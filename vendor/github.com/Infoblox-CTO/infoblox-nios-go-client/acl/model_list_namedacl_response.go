/*
Infoblox ACL API

OpenAPI specification for Infoblox NIOS WAPI ACL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package acl

import (
	"encoding/json"
	"fmt"
)

// ListNamedaclResponse - struct for ListNamedaclResponse
type ListNamedaclResponse struct {
	ListNamedaclResponseObject *ListNamedaclResponseObject
	ArrayOfNamedacl            *[]Namedacl
}

// ListNamedaclResponseObjectAsListNamedaclResponse is a convenience function that returns ListNamedaclResponseObject wrapped in ListNamedaclResponse
func ListNamedaclResponseObjectAsListNamedaclResponse(v *ListNamedaclResponseObject) ListNamedaclResponse {
	return ListNamedaclResponse{
		ListNamedaclResponseObject: v,
	}
}

// []NamedaclAsListNamedaclResponse is a convenience function that returns []Namedacl wrapped in ListNamedaclResponse
func ArrayOfNamedaclAsListNamedaclResponse(v *[]Namedacl) ListNamedaclResponse {
	return ListNamedaclResponse{
		ArrayOfNamedacl: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNamedaclResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNamedaclResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNamedaclResponseObject)
	if err == nil {
		jsonListNamedaclResponseObject, _ := json.Marshal(dst.ListNamedaclResponseObject)
		if string(jsonListNamedaclResponseObject) == "{}" { // empty struct
			dst.ListNamedaclResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNamedaclResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNamedacl
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNamedacl)
	if err == nil {
		jsonArrayOfNamedacl, _ := json.Marshal(dst.ArrayOfNamedacl)
		if string(jsonArrayOfNamedacl) == "{}" { // empty struct
			dst.ArrayOfNamedacl = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNamedacl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNamedaclResponseObject = nil
		dst.ArrayOfNamedacl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNamedaclResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNamedaclResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNamedaclResponse) MarshalJSON() ([]byte, error) {
	if src.ListNamedaclResponseObject != nil {
		return json.Marshal(&src.ListNamedaclResponseObject)
	}

	if src.ArrayOfNamedacl != nil {
		return json.Marshal(&src.ArrayOfNamedacl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNamedaclResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNamedaclResponseObject != nil {
		return obj.ListNamedaclResponseObject
	}

	if obj.ArrayOfNamedacl != nil {
		return obj.ArrayOfNamedacl
	}

	// all schemas are nil
	return nil
}

type NullableListNamedaclResponse struct {
	value *ListNamedaclResponse
	isSet bool
}

func (v NullableListNamedaclResponse) Get() *ListNamedaclResponse {
	return v.value
}

func (v *NullableListNamedaclResponse) Set(val *ListNamedaclResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNamedaclResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNamedaclResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNamedaclResponse(val *ListNamedaclResponse) *NullableListNamedaclResponse {
	return &NullableListNamedaclResponse{value: val, isSet: true}
}

func (v NullableListNamedaclResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNamedaclResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
