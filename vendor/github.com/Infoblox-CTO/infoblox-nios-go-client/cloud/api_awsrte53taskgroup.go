/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type Awsrte53taskgroupAPI interface {
	/*
		Get Retrieve awsrte53taskgroup objects

		Returns a list of awsrte53taskgroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Awsrte53taskgroupAPIGetRequest
	*/
	Get(ctx context.Context) Awsrte53taskgroupAPIGetRequest

	// GetExecute executes the request
	//  @return ListAwsrte53taskgroupResponse
	GetExecute(r Awsrte53taskgroupAPIGetRequest) (*ListAwsrte53taskgroupResponse, *http.Response, error)
	/*
		Post Create a awsrte53taskgroup object

		Creates a new awsrte53taskgroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Awsrte53taskgroupAPIPostRequest
	*/
	Post(ctx context.Context) Awsrte53taskgroupAPIPostRequest

	// PostExecute executes the request
	//  @return CreateAwsrte53taskgroupResponse
	PostExecute(r Awsrte53taskgroupAPIPostRequest) (*CreateAwsrte53taskgroupResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a awsrte53taskgroup object

		Deletes a specific awsrte53taskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the awsrte53taskgroup object
		@return Awsrte53taskgroupAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) Awsrte53taskgroupAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r Awsrte53taskgroupAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific awsrte53taskgroup object

		Returns a specific awsrte53taskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the awsrte53taskgroup object
		@return Awsrte53taskgroupAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) Awsrte53taskgroupAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetAwsrte53taskgroupResponse
	ReferenceGetExecute(r Awsrte53taskgroupAPIReferenceGetRequest) (*GetAwsrte53taskgroupResponse, *http.Response, error)
	/*
		ReferencePut Update a awsrte53taskgroup object

		Updates a specific awsrte53taskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the awsrte53taskgroup object
		@return Awsrte53taskgroupAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) Awsrte53taskgroupAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateAwsrte53taskgroupResponse
	ReferencePutExecute(r Awsrte53taskgroupAPIReferencePutRequest) (*UpdateAwsrte53taskgroupResponse, *http.Response, error)
}

// Awsrte53taskgroupAPIService Awsrte53taskgroupAPI service
type Awsrte53taskgroupAPIService internal.Service

type Awsrte53taskgroupAPIGetRequest struct {
	ctx            context.Context
	ApiService     Awsrte53taskgroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r Awsrte53taskgroupAPIGetRequest) ReturnFields(returnFields string) Awsrte53taskgroupAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Awsrte53taskgroupAPIGetRequest) ReturnFields2(returnFields2 string) Awsrte53taskgroupAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r Awsrte53taskgroupAPIGetRequest) MaxResults(maxResults int32) Awsrte53taskgroupAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r Awsrte53taskgroupAPIGetRequest) ReturnAsObject(returnAsObject int32) Awsrte53taskgroupAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r Awsrte53taskgroupAPIGetRequest) Paging(paging int32) Awsrte53taskgroupAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r Awsrte53taskgroupAPIGetRequest) PageId(pageId string) Awsrte53taskgroupAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r Awsrte53taskgroupAPIGetRequest) Filters(filters map[string]interface{}) Awsrte53taskgroupAPIGetRequest {
	r.filters = &filters
	return r
}

func (r Awsrte53taskgroupAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) Awsrte53taskgroupAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r Awsrte53taskgroupAPIGetRequest) Execute() (*ListAwsrte53taskgroupResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve awsrte53taskgroup objects

Returns a list of awsrte53taskgroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Awsrte53taskgroupAPIGetRequest
*/
func (a *Awsrte53taskgroupAPIService) Get(ctx context.Context) Awsrte53taskgroupAPIGetRequest {
	return Awsrte53taskgroupAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListAwsrte53taskgroupResponse
func (a *Awsrte53taskgroupAPIService) GetExecute(r Awsrte53taskgroupAPIGetRequest) (*ListAwsrte53taskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListAwsrte53taskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Awsrte53taskgroupAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/awsrte53taskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Awsrte53taskgroupAPIPostRequest struct {
	ctx               context.Context
	ApiService        Awsrte53taskgroupAPI
	awsrte53taskgroup *Awsrte53taskgroup
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r Awsrte53taskgroupAPIPostRequest) Awsrte53taskgroup(awsrte53taskgroup Awsrte53taskgroup) Awsrte53taskgroupAPIPostRequest {
	r.awsrte53taskgroup = &awsrte53taskgroup
	return r
}

// Enter the field names followed by comma
func (r Awsrte53taskgroupAPIPostRequest) ReturnFields(returnFields string) Awsrte53taskgroupAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Awsrte53taskgroupAPIPostRequest) ReturnFields2(returnFields2 string) Awsrte53taskgroupAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r Awsrte53taskgroupAPIPostRequest) ReturnAsObject(returnAsObject int32) Awsrte53taskgroupAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Awsrte53taskgroupAPIPostRequest) Execute() (*CreateAwsrte53taskgroupResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a awsrte53taskgroup object

Creates a new awsrte53taskgroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Awsrte53taskgroupAPIPostRequest
*/
func (a *Awsrte53taskgroupAPIService) Post(ctx context.Context) Awsrte53taskgroupAPIPostRequest {
	return Awsrte53taskgroupAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateAwsrte53taskgroupResponse
func (a *Awsrte53taskgroupAPIService) PostExecute(r Awsrte53taskgroupAPIPostRequest) (*CreateAwsrte53taskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateAwsrte53taskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Awsrte53taskgroupAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/awsrte53taskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.awsrte53taskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("awsrte53taskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.awsrte53taskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Awsrte53taskgroupAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService Awsrte53taskgroupAPI
	reference  string
}

func (r Awsrte53taskgroupAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a awsrte53taskgroup object

Deletes a specific awsrte53taskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the awsrte53taskgroup object
	@return Awsrte53taskgroupAPIReferenceDeleteRequest
*/
func (a *Awsrte53taskgroupAPIService) ReferenceDelete(ctx context.Context, reference string) Awsrte53taskgroupAPIReferenceDeleteRequest {
	return Awsrte53taskgroupAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *Awsrte53taskgroupAPIService) ReferenceDeleteExecute(r Awsrte53taskgroupAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Awsrte53taskgroupAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/awsrte53taskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Awsrte53taskgroupAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     Awsrte53taskgroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r Awsrte53taskgroupAPIReferenceGetRequest) ReturnFields(returnFields string) Awsrte53taskgroupAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Awsrte53taskgroupAPIReferenceGetRequest) ReturnFields2(returnFields2 string) Awsrte53taskgroupAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r Awsrte53taskgroupAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) Awsrte53taskgroupAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Awsrte53taskgroupAPIReferenceGetRequest) Execute() (*GetAwsrte53taskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific awsrte53taskgroup object

Returns a specific awsrte53taskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the awsrte53taskgroup object
	@return Awsrte53taskgroupAPIReferenceGetRequest
*/
func (a *Awsrte53taskgroupAPIService) ReferenceGet(ctx context.Context, reference string) Awsrte53taskgroupAPIReferenceGetRequest {
	return Awsrte53taskgroupAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetAwsrte53taskgroupResponse
func (a *Awsrte53taskgroupAPIService) ReferenceGetExecute(r Awsrte53taskgroupAPIReferenceGetRequest) (*GetAwsrte53taskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetAwsrte53taskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Awsrte53taskgroupAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/awsrte53taskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Awsrte53taskgroupAPIReferencePutRequest struct {
	ctx               context.Context
	ApiService        Awsrte53taskgroupAPI
	reference         string
	awsrte53taskgroup *Awsrte53taskgroup
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r Awsrte53taskgroupAPIReferencePutRequest) Awsrte53taskgroup(awsrte53taskgroup Awsrte53taskgroup) Awsrte53taskgroupAPIReferencePutRequest {
	r.awsrte53taskgroup = &awsrte53taskgroup
	return r
}

// Enter the field names followed by comma
func (r Awsrte53taskgroupAPIReferencePutRequest) ReturnFields(returnFields string) Awsrte53taskgroupAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Awsrte53taskgroupAPIReferencePutRequest) ReturnFields2(returnFields2 string) Awsrte53taskgroupAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r Awsrte53taskgroupAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) Awsrte53taskgroupAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Awsrte53taskgroupAPIReferencePutRequest) Execute() (*UpdateAwsrte53taskgroupResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a awsrte53taskgroup object

Updates a specific awsrte53taskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the awsrte53taskgroup object
	@return Awsrte53taskgroupAPIReferencePutRequest
*/
func (a *Awsrte53taskgroupAPIService) ReferencePut(ctx context.Context, reference string) Awsrte53taskgroupAPIReferencePutRequest {
	return Awsrte53taskgroupAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateAwsrte53taskgroupResponse
func (a *Awsrte53taskgroupAPIService) ReferencePutExecute(r Awsrte53taskgroupAPIReferencePutRequest) (*UpdateAwsrte53taskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateAwsrte53taskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Awsrte53taskgroupAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/awsrte53taskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.awsrte53taskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("awsrte53taskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.awsrte53taskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
