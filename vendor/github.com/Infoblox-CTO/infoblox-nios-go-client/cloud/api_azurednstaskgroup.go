/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type AzurednstaskgroupAPI interface {
	/*
		Create Create a azurednstaskgroup object

		Creates a new azurednstaskgroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AzurednstaskgroupAPICreateRequest
	*/
	Create(ctx context.Context) AzurednstaskgroupAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateAzurednstaskgroupResponse
	CreateExecute(r AzurednstaskgroupAPICreateRequest) (*CreateAzurednstaskgroupResponse, *http.Response, error)
	/*
		Delete Delete a azurednstaskgroup object

		Deletes a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) AzurednstaskgroupAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r AzurednstaskgroupAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve azurednstaskgroup objects

		Returns a list of azurednstaskgroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AzurednstaskgroupAPIListRequest
	*/
	List(ctx context.Context) AzurednstaskgroupAPIListRequest

	// ListExecute executes the request
	//  @return ListAzurednstaskgroupResponse
	ListExecute(r AzurednstaskgroupAPIListRequest) (*ListAzurednstaskgroupResponse, *http.Response, error)
	/*
		Read Get a specific azurednstaskgroup object

		Returns a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIReadRequest
	*/
	Read(ctx context.Context, reference string) AzurednstaskgroupAPIReadRequest

	// ReadExecute executes the request
	//  @return GetAzurednstaskgroupResponse
	ReadExecute(r AzurednstaskgroupAPIReadRequest) (*GetAzurednstaskgroupResponse, *http.Response, error)
	/*
		Update Update a azurednstaskgroup object

		Updates a specific azurednstaskgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the azurednstaskgroup object
		@return AzurednstaskgroupAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) AzurednstaskgroupAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateAzurednstaskgroupResponse
	UpdateExecute(r AzurednstaskgroupAPIUpdateRequest) (*UpdateAzurednstaskgroupResponse, *http.Response, error)
}

// AzurednstaskgroupAPIService AzurednstaskgroupAPI service
type AzurednstaskgroupAPIService internal.Service

type AzurednstaskgroupAPICreateRequest struct {
	ctx               context.Context
	ApiService        AzurednstaskgroupAPI
	azurednstaskgroup *Azurednstaskgroup
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to create
func (r AzurednstaskgroupAPICreateRequest) Azurednstaskgroup(azurednstaskgroup Azurednstaskgroup) AzurednstaskgroupAPICreateRequest {
	r.azurednstaskgroup = &azurednstaskgroup
	return r
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPICreateRequest) ReturnFields(returnFields string) AzurednstaskgroupAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) AzurednstaskgroupAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPICreateRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPICreateRequest) Execute() (*CreateAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a azurednstaskgroup object

Creates a new azurednstaskgroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AzurednstaskgroupAPICreateRequest
*/
func (a *AzurednstaskgroupAPIService) Create(ctx context.Context) AzurednstaskgroupAPICreateRequest {
	return AzurednstaskgroupAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) CreateExecute(r AzurednstaskgroupAPICreateRequest) (*CreateAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.azurednstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("azurednstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.azurednstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIDeleteRequest struct {
	ctx        context.Context
	ApiService AzurednstaskgroupAPI
	reference  string
}

func (r AzurednstaskgroupAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a azurednstaskgroup object

Deletes a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIDeleteRequest
*/
func (a *AzurednstaskgroupAPIService) Delete(ctx context.Context, reference string) AzurednstaskgroupAPIDeleteRequest {
	return AzurednstaskgroupAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *AzurednstaskgroupAPIService) DeleteExecute(r AzurednstaskgroupAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIListRequest struct {
	ctx              context.Context
	ApiService       AzurednstaskgroupAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIListRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) AzurednstaskgroupAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r AzurednstaskgroupAPIListRequest) MaxResults(maxResults int32) AzurednstaskgroupAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIListRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r AzurednstaskgroupAPIListRequest) Paging(paging int32) AzurednstaskgroupAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r AzurednstaskgroupAPIListRequest) PageId(pageId string) AzurednstaskgroupAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r AzurednstaskgroupAPIListRequest) Filters(filters map[string]interface{}) AzurednstaskgroupAPIListRequest {
	r.filters = &filters
	return r
}

func (r AzurednstaskgroupAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) AzurednstaskgroupAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r AzurednstaskgroupAPIListRequest) Execute() (*ListAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve azurednstaskgroup objects

Returns a list of azurednstaskgroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AzurednstaskgroupAPIListRequest
*/
func (a *AzurednstaskgroupAPIService) List(ctx context.Context) AzurednstaskgroupAPIListRequest {
	return AzurednstaskgroupAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) ListExecute(r AzurednstaskgroupAPIListRequest) (*ListAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIReadRequest struct {
	ctx              context.Context
	ApiService       AzurednstaskgroupAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIReadRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) AzurednstaskgroupAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIReadRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPIReadRequest) Execute() (*GetAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific azurednstaskgroup object

Returns a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIReadRequest
*/
func (a *AzurednstaskgroupAPIService) Read(ctx context.Context, reference string) AzurednstaskgroupAPIReadRequest {
	return AzurednstaskgroupAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) ReadExecute(r AzurednstaskgroupAPIReadRequest) (*GetAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AzurednstaskgroupAPIUpdateRequest struct {
	ctx               context.Context
	ApiService        AzurednstaskgroupAPI
	reference         string
	azurednstaskgroup *Azurednstaskgroup
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to update
func (r AzurednstaskgroupAPIUpdateRequest) Azurednstaskgroup(azurednstaskgroup Azurednstaskgroup) AzurednstaskgroupAPIUpdateRequest {
	r.azurednstaskgroup = &azurednstaskgroup
	return r
}

// Enter the field names followed by comma
func (r AzurednstaskgroupAPIUpdateRequest) ReturnFields(returnFields string) AzurednstaskgroupAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AzurednstaskgroupAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) AzurednstaskgroupAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r AzurednstaskgroupAPIUpdateRequest) ReturnAsObject(returnAsObject int32) AzurednstaskgroupAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AzurednstaskgroupAPIUpdateRequest) Execute() (*UpdateAzurednstaskgroupResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a azurednstaskgroup object

Updates a specific azurednstaskgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the azurednstaskgroup object
	@return AzurednstaskgroupAPIUpdateRequest
*/
func (a *AzurednstaskgroupAPIService) Update(ctx context.Context, reference string) AzurednstaskgroupAPIUpdateRequest {
	return AzurednstaskgroupAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateAzurednstaskgroupResponse
func (a *AzurednstaskgroupAPIService) UpdateExecute(r AzurednstaskgroupAPIUpdateRequest) (*UpdateAzurednstaskgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateAzurednstaskgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AzurednstaskgroupAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/azurednstaskgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.azurednstaskgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("azurednstaskgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.azurednstaskgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
