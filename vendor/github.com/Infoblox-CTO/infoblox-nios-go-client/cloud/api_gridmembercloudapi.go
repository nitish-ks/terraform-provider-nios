/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridmembercloudapiAPI interface {
	/*
		Get Retrieve grid:member:cloudapi objects

		Returns a list of grid:member:cloudapi objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridmembercloudapiAPIGetRequest
	*/
	Get(ctx context.Context) GridmembercloudapiAPIGetRequest

	// GetExecute executes the request
	//  @return ListGridMemberCloudapiResponse
	GetExecute(r GridmembercloudapiAPIGetRequest) (*ListGridMemberCloudapiResponse, *http.Response, error)
	/*
		ReferenceGet Get a specific grid:member:cloudapi object

		Returns a specific grid:member:cloudapi object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:member:cloudapi object
		@return GridmembercloudapiAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) GridmembercloudapiAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetGridMemberCloudapiResponse
	ReferenceGetExecute(r GridmembercloudapiAPIReferenceGetRequest) (*GetGridMemberCloudapiResponse, *http.Response, error)
	/*
		ReferencePut Update a grid:member:cloudapi object

		Updates a specific grid:member:cloudapi object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:member:cloudapi object
		@return GridmembercloudapiAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) GridmembercloudapiAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateGridMemberCloudapiResponse
	ReferencePutExecute(r GridmembercloudapiAPIReferencePutRequest) (*UpdateGridMemberCloudapiResponse, *http.Response, error)
}

// GridmembercloudapiAPIService GridmembercloudapiAPI service
type GridmembercloudapiAPIService internal.Service

type GridmembercloudapiAPIGetRequest struct {
	ctx            context.Context
	ApiService     GridmembercloudapiAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridmembercloudapiAPIGetRequest) ReturnFields(returnFields string) GridmembercloudapiAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridmembercloudapiAPIGetRequest) ReturnFields2(returnFields2 string) GridmembercloudapiAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r GridmembercloudapiAPIGetRequest) MaxResults(maxResults int32) GridmembercloudapiAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridmembercloudapiAPIGetRequest) ReturnAsObject(returnAsObject int32) GridmembercloudapiAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridmembercloudapiAPIGetRequest) Paging(paging int32) GridmembercloudapiAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridmembercloudapiAPIGetRequest) PageId(pageId string) GridmembercloudapiAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r GridmembercloudapiAPIGetRequest) Filters(filters map[string]interface{}) GridmembercloudapiAPIGetRequest {
	r.filters = &filters
	return r
}

func (r GridmembercloudapiAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) GridmembercloudapiAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridmembercloudapiAPIGetRequest) Execute() (*ListGridMemberCloudapiResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve grid:member:cloudapi objects

Returns a list of grid:member:cloudapi objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridmembercloudapiAPIGetRequest
*/
func (a *GridmembercloudapiAPIService) Get(ctx context.Context) GridmembercloudapiAPIGetRequest {
	return GridmembercloudapiAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridMemberCloudapiResponse
func (a *GridmembercloudapiAPIService) GetExecute(r GridmembercloudapiAPIGetRequest) (*ListGridMemberCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridMemberCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridmembercloudapiAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:member:cloudapi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridmembercloudapiAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     GridmembercloudapiAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r GridmembercloudapiAPIReferenceGetRequest) ReturnFields(returnFields string) GridmembercloudapiAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridmembercloudapiAPIReferenceGetRequest) ReturnFields2(returnFields2 string) GridmembercloudapiAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridmembercloudapiAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) GridmembercloudapiAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridmembercloudapiAPIReferenceGetRequest) Execute() (*GetGridMemberCloudapiResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific grid:member:cloudapi object

Returns a specific grid:member:cloudapi object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:member:cloudapi object
	@return GridmembercloudapiAPIReferenceGetRequest
*/
func (a *GridmembercloudapiAPIService) ReferenceGet(ctx context.Context, reference string) GridmembercloudapiAPIReferenceGetRequest {
	return GridmembercloudapiAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridMemberCloudapiResponse
func (a *GridmembercloudapiAPIService) ReferenceGetExecute(r GridmembercloudapiAPIReferenceGetRequest) (*GetGridMemberCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridMemberCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridmembercloudapiAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:member:cloudapi/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridmembercloudapiAPIReferencePutRequest struct {
	ctx                context.Context
	ApiService         GridmembercloudapiAPI
	reference          string
	gridMemberCloudapi *GridMemberCloudapi
	returnFields       *string
	returnFields2      *string
	returnAsObject     *int32
}

// Object data to update
func (r GridmembercloudapiAPIReferencePutRequest) GridMemberCloudapi(gridMemberCloudapi GridMemberCloudapi) GridmembercloudapiAPIReferencePutRequest {
	r.gridMemberCloudapi = &gridMemberCloudapi
	return r
}

// Enter the field names followed by comma
func (r GridmembercloudapiAPIReferencePutRequest) ReturnFields(returnFields string) GridmembercloudapiAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridmembercloudapiAPIReferencePutRequest) ReturnFields2(returnFields2 string) GridmembercloudapiAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r GridmembercloudapiAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) GridmembercloudapiAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridmembercloudapiAPIReferencePutRequest) Execute() (*UpdateGridMemberCloudapiResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a grid:member:cloudapi object

Updates a specific grid:member:cloudapi object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:member:cloudapi object
	@return GridmembercloudapiAPIReferencePutRequest
*/
func (a *GridmembercloudapiAPIService) ReferencePut(ctx context.Context, reference string) GridmembercloudapiAPIReferencePutRequest {
	return GridmembercloudapiAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridMemberCloudapiResponse
func (a *GridmembercloudapiAPIService) ReferencePutExecute(r GridmembercloudapiAPIReferencePutRequest) (*UpdateGridMemberCloudapiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridMemberCloudapiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridmembercloudapiAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:member:cloudapi/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridMemberCloudapi == nil {
		return localVarReturnValue, nil, internal.ReportError("gridMemberCloudapi is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.gridMemberCloudapi != nil {
		if r.gridMemberCloudapi.Extattrs == nil {
			r.gridMemberCloudapi.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.gridMemberCloudapi.Extattrs)[k]; !ok {
				(*r.gridMemberCloudapi.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.gridMemberCloudapi
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
