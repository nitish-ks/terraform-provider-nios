/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetAwsrte53taskgroupResponse - struct for GetAwsrte53taskgroupResponse
type GetAwsrte53taskgroupResponse struct {
	Awsrte53taskgroup                          *Awsrte53taskgroup
	GetAwsrte53taskgroupResponseObjectAsResult *GetAwsrte53taskgroupResponseObjectAsResult
}

// Awsrte53taskgroupAsGetAwsrte53taskgroupResponse is a convenience function that returns Awsrte53taskgroup wrapped in GetAwsrte53taskgroupResponse
func Awsrte53taskgroupAsGetAwsrte53taskgroupResponse(v *Awsrte53taskgroup) GetAwsrte53taskgroupResponse {
	return GetAwsrte53taskgroupResponse{
		Awsrte53taskgroup: v,
	}
}

// GetAwsrte53taskgroupResponseObjectAsResultAsGetAwsrte53taskgroupResponse is a convenience function that returns GetAwsrte53taskgroupResponseObjectAsResult wrapped in GetAwsrte53taskgroupResponse
func GetAwsrte53taskgroupResponseObjectAsResultAsGetAwsrte53taskgroupResponse(v *GetAwsrte53taskgroupResponseObjectAsResult) GetAwsrte53taskgroupResponse {
	return GetAwsrte53taskgroupResponse{
		GetAwsrte53taskgroupResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAwsrte53taskgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Awsrte53taskgroup
	err = newStrictDecoder(data).Decode(&dst.Awsrte53taskgroup)
	if err == nil {
		jsonAwsrte53taskgroup, _ := json.Marshal(dst.Awsrte53taskgroup)
		if string(jsonAwsrte53taskgroup) == "{}" { // empty struct
			dst.Awsrte53taskgroup = nil
		} else {
			match++
		}
	} else {
		dst.Awsrte53taskgroup = nil
	}

	// try to unmarshal data into GetAwsrte53taskgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAwsrte53taskgroupResponseObjectAsResult)
	if err == nil {
		jsonGetAwsrte53taskgroupResponseObjectAsResult, _ := json.Marshal(dst.GetAwsrte53taskgroupResponseObjectAsResult)
		if string(jsonGetAwsrte53taskgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAwsrte53taskgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAwsrte53taskgroupResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Awsrte53taskgroup = nil
		dst.GetAwsrte53taskgroupResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAwsrte53taskgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAwsrte53taskgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAwsrte53taskgroupResponse) MarshalJSON() ([]byte, error) {
	if src.Awsrte53taskgroup != nil {
		return json.Marshal(&src.Awsrte53taskgroup)
	}

	if src.GetAwsrte53taskgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAwsrte53taskgroupResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAwsrte53taskgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Awsrte53taskgroup != nil {
		return obj.Awsrte53taskgroup
	}

	if obj.GetAwsrte53taskgroupResponseObjectAsResult != nil {
		return obj.GetAwsrte53taskgroupResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAwsrte53taskgroupResponse struct {
	value *GetAwsrte53taskgroupResponse
	isSet bool
}

func (v NullableGetAwsrte53taskgroupResponse) Get() *GetAwsrte53taskgroupResponse {
	return v.value
}

func (v *NullableGetAwsrte53taskgroupResponse) Set(val *GetAwsrte53taskgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAwsrte53taskgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAwsrte53taskgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAwsrte53taskgroupResponse(val *GetAwsrte53taskgroupResponse) *NullableGetAwsrte53taskgroupResponse {
	return &NullableGetAwsrte53taskgroupResponse{value: val, isSet: true}
}

func (v NullableGetAwsrte53taskgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAwsrte53taskgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
