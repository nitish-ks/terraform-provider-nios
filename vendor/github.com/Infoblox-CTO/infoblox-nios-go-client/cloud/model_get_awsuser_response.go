/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetAwsuserResponse - struct for GetAwsuserResponse
type GetAwsuserResponse struct {
	Awsuser                          *Awsuser
	GetAwsuserResponseObjectAsResult *GetAwsuserResponseObjectAsResult
}

// AwsuserAsGetAwsuserResponse is a convenience function that returns Awsuser wrapped in GetAwsuserResponse
func AwsuserAsGetAwsuserResponse(v *Awsuser) GetAwsuserResponse {
	return GetAwsuserResponse{
		Awsuser: v,
	}
}

// GetAwsuserResponseObjectAsResultAsGetAwsuserResponse is a convenience function that returns GetAwsuserResponseObjectAsResult wrapped in GetAwsuserResponse
func GetAwsuserResponseObjectAsResultAsGetAwsuserResponse(v *GetAwsuserResponseObjectAsResult) GetAwsuserResponse {
	return GetAwsuserResponse{
		GetAwsuserResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAwsuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Awsuser
	err = newStrictDecoder(data).Decode(&dst.Awsuser)
	if err == nil {
		jsonAwsuser, _ := json.Marshal(dst.Awsuser)
		if string(jsonAwsuser) == "{}" { // empty struct
			dst.Awsuser = nil
		} else {
			match++
		}
	} else {
		dst.Awsuser = nil
	}

	// try to unmarshal data into GetAwsuserResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAwsuserResponseObjectAsResult)
	if err == nil {
		jsonGetAwsuserResponseObjectAsResult, _ := json.Marshal(dst.GetAwsuserResponseObjectAsResult)
		if string(jsonGetAwsuserResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAwsuserResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAwsuserResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Awsuser = nil
		dst.GetAwsuserResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAwsuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAwsuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAwsuserResponse) MarshalJSON() ([]byte, error) {
	if src.Awsuser != nil {
		return json.Marshal(&src.Awsuser)
	}

	if src.GetAwsuserResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAwsuserResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAwsuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Awsuser != nil {
		return obj.Awsuser
	}

	if obj.GetAwsuserResponseObjectAsResult != nil {
		return obj.GetAwsuserResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAwsuserResponse struct {
	value *GetAwsuserResponse
	isSet bool
}

func (v NullableGetAwsuserResponse) Get() *GetAwsuserResponse {
	return v.value
}

func (v *NullableGetAwsuserResponse) Set(val *GetAwsuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAwsuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAwsuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAwsuserResponse(val *GetAwsuserResponse) *NullableGetAwsuserResponse {
	return &NullableGetAwsuserResponse{value: val, isSet: true}
}

func (v NullableGetAwsuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAwsuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
