/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetAzurednstaskgroupResponse - struct for GetAzurednstaskgroupResponse
type GetAzurednstaskgroupResponse struct {
	Azurednstaskgroup                          *Azurednstaskgroup
	GetAzurednstaskgroupResponseObjectAsResult *GetAzurednstaskgroupResponseObjectAsResult
}

// AzurednstaskgroupAsGetAzurednstaskgroupResponse is a convenience function that returns Azurednstaskgroup wrapped in GetAzurednstaskgroupResponse
func AzurednstaskgroupAsGetAzurednstaskgroupResponse(v *Azurednstaskgroup) GetAzurednstaskgroupResponse {
	return GetAzurednstaskgroupResponse{
		Azurednstaskgroup: v,
	}
}

// GetAzurednstaskgroupResponseObjectAsResultAsGetAzurednstaskgroupResponse is a convenience function that returns GetAzurednstaskgroupResponseObjectAsResult wrapped in GetAzurednstaskgroupResponse
func GetAzurednstaskgroupResponseObjectAsResultAsGetAzurednstaskgroupResponse(v *GetAzurednstaskgroupResponseObjectAsResult) GetAzurednstaskgroupResponse {
	return GetAzurednstaskgroupResponse{
		GetAzurednstaskgroupResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAzurednstaskgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Azurednstaskgroup
	err = newStrictDecoder(data).Decode(&dst.Azurednstaskgroup)
	if err == nil {
		jsonAzurednstaskgroup, _ := json.Marshal(dst.Azurednstaskgroup)
		if string(jsonAzurednstaskgroup) == "{}" { // empty struct
			dst.Azurednstaskgroup = nil
		} else {
			match++
		}
	} else {
		dst.Azurednstaskgroup = nil
	}

	// try to unmarshal data into GetAzurednstaskgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAzurednstaskgroupResponseObjectAsResult)
	if err == nil {
		jsonGetAzurednstaskgroupResponseObjectAsResult, _ := json.Marshal(dst.GetAzurednstaskgroupResponseObjectAsResult)
		if string(jsonGetAzurednstaskgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAzurednstaskgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAzurednstaskgroupResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Azurednstaskgroup = nil
		dst.GetAzurednstaskgroupResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAzurednstaskgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAzurednstaskgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAzurednstaskgroupResponse) MarshalJSON() ([]byte, error) {
	if src.Azurednstaskgroup != nil {
		return json.Marshal(&src.Azurednstaskgroup)
	}

	if src.GetAzurednstaskgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAzurednstaskgroupResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAzurednstaskgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Azurednstaskgroup != nil {
		return obj.Azurednstaskgroup
	}

	if obj.GetAzurednstaskgroupResponseObjectAsResult != nil {
		return obj.GetAzurednstaskgroupResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAzurednstaskgroupResponse struct {
	value *GetAzurednstaskgroupResponse
	isSet bool
}

func (v NullableGetAzurednstaskgroupResponse) Get() *GetAzurednstaskgroupResponse {
	return v.value
}

func (v *NullableGetAzurednstaskgroupResponse) Set(val *GetAzurednstaskgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAzurednstaskgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAzurednstaskgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAzurednstaskgroupResponse(val *GetAzurednstaskgroupResponse) *NullableGetAzurednstaskgroupResponse {
	return &NullableGetAzurednstaskgroupResponse{value: val, isSet: true}
}

func (v NullableGetAzurednstaskgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAzurednstaskgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
