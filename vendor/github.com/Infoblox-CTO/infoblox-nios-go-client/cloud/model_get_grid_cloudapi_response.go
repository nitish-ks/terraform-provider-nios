/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetGridCloudapiResponse - struct for GetGridCloudapiResponse
type GetGridCloudapiResponse struct {
	GetGridCloudapiResponseObjectAsResult *GetGridCloudapiResponseObjectAsResult
	GridCloudapi                          *GridCloudapi
}

// GetGridCloudapiResponseObjectAsResultAsGetGridCloudapiResponse is a convenience function that returns GetGridCloudapiResponseObjectAsResult wrapped in GetGridCloudapiResponse
func GetGridCloudapiResponseObjectAsResultAsGetGridCloudapiResponse(v *GetGridCloudapiResponseObjectAsResult) GetGridCloudapiResponse {
	return GetGridCloudapiResponse{
		GetGridCloudapiResponseObjectAsResult: v,
	}
}

// GridCloudapiAsGetGridCloudapiResponse is a convenience function that returns GridCloudapi wrapped in GetGridCloudapiResponse
func GridCloudapiAsGetGridCloudapiResponse(v *GridCloudapi) GetGridCloudapiResponse {
	return GetGridCloudapiResponse{
		GridCloudapi: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridCloudapiResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridCloudapiResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridCloudapiResponseObjectAsResult)
	if err == nil {
		jsonGetGridCloudapiResponseObjectAsResult, _ := json.Marshal(dst.GetGridCloudapiResponseObjectAsResult)
		if string(jsonGetGridCloudapiResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridCloudapiResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridCloudapiResponseObjectAsResult = nil
	}

	// try to unmarshal data into GridCloudapi
	err = newStrictDecoder(data).Decode(&dst.GridCloudapi)
	if err == nil {
		jsonGridCloudapi, _ := json.Marshal(dst.GridCloudapi)
		if string(jsonGridCloudapi) == "{}" { // empty struct
			dst.GridCloudapi = nil
		} else {
			match++
		}
	} else {
		dst.GridCloudapi = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridCloudapiResponseObjectAsResult = nil
		dst.GridCloudapi = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridCloudapiResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridCloudapiResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridCloudapiResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridCloudapiResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridCloudapiResponseObjectAsResult)
	}

	if src.GridCloudapi != nil {
		return json.Marshal(&src.GridCloudapi)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridCloudapiResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridCloudapiResponseObjectAsResult != nil {
		return obj.GetGridCloudapiResponseObjectAsResult
	}

	if obj.GridCloudapi != nil {
		return obj.GridCloudapi
	}

	// all schemas are nil
	return nil
}

type NullableGetGridCloudapiResponse struct {
	value *GetGridCloudapiResponse
	isSet bool
}

func (v NullableGetGridCloudapiResponse) Get() *GetGridCloudapiResponse {
	return v.value
}

func (v *NullableGetGridCloudapiResponse) Set(val *GetGridCloudapiResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridCloudapiResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridCloudapiResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridCloudapiResponse(val *GetGridCloudapiResponse) *NullableGetGridCloudapiResponse {
	return &NullableGetGridCloudapiResponse{value: val, isSet: true}
}

func (v NullableGetGridCloudapiResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridCloudapiResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
