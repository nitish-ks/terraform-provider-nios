/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetMultiregionsResponse - struct for GetMultiregionsResponse
type GetMultiregionsResponse struct {
	GetMultiregionsResponseObjectAsResult *GetMultiregionsResponseObjectAsResult
	Multiregions                          *Multiregions
}

// GetMultiregionsResponseObjectAsResultAsGetMultiregionsResponse is a convenience function that returns GetMultiregionsResponseObjectAsResult wrapped in GetMultiregionsResponse
func GetMultiregionsResponseObjectAsResultAsGetMultiregionsResponse(v *GetMultiregionsResponseObjectAsResult) GetMultiregionsResponse {
	return GetMultiregionsResponse{
		GetMultiregionsResponseObjectAsResult: v,
	}
}

// MultiregionsAsGetMultiregionsResponse is a convenience function that returns Multiregions wrapped in GetMultiregionsResponse
func MultiregionsAsGetMultiregionsResponse(v *Multiregions) GetMultiregionsResponse {
	return GetMultiregionsResponse{
		Multiregions: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMultiregionsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMultiregionsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMultiregionsResponseObjectAsResult)
	if err == nil {
		jsonGetMultiregionsResponseObjectAsResult, _ := json.Marshal(dst.GetMultiregionsResponseObjectAsResult)
		if string(jsonGetMultiregionsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMultiregionsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMultiregionsResponseObjectAsResult = nil
	}

	// try to unmarshal data into Multiregions
	err = newStrictDecoder(data).Decode(&dst.Multiregions)
	if err == nil {
		jsonMultiregions, _ := json.Marshal(dst.Multiregions)
		if string(jsonMultiregions) == "{}" { // empty struct
			dst.Multiregions = nil
		} else {
			match++
		}
	} else {
		dst.Multiregions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMultiregionsResponseObjectAsResult = nil
		dst.Multiregions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMultiregionsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMultiregionsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMultiregionsResponse) MarshalJSON() ([]byte, error) {
	if src.GetMultiregionsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMultiregionsResponseObjectAsResult)
	}

	if src.Multiregions != nil {
		return json.Marshal(&src.Multiregions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMultiregionsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMultiregionsResponseObjectAsResult != nil {
		return obj.GetMultiregionsResponseObjectAsResult
	}

	if obj.Multiregions != nil {
		return obj.Multiregions
	}

	// all schemas are nil
	return nil
}

type NullableGetMultiregionsResponse struct {
	value *GetMultiregionsResponse
	isSet bool
}

func (v NullableGetMultiregionsResponse) Get() *GetMultiregionsResponse {
	return v.value
}

func (v *NullableGetMultiregionsResponse) Set(val *GetMultiregionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMultiregionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMultiregionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMultiregionsResponse(val *GetMultiregionsResponse) *NullableGetMultiregionsResponse {
	return &NullableGetMultiregionsResponse{value: val, isSet: true}
}

func (v NullableGetMultiregionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMultiregionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
