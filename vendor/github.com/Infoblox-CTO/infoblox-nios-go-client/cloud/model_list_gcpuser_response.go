/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// ListGcpuserResponse - struct for ListGcpuserResponse
type ListGcpuserResponse struct {
	ListGcpuserResponseObject *ListGcpuserResponseObject
	ArrayOfGcpuser            *[]Gcpuser
}

// ListGcpuserResponseObjectAsListGcpuserResponse is a convenience function that returns ListGcpuserResponseObject wrapped in ListGcpuserResponse
func ListGcpuserResponseObjectAsListGcpuserResponse(v *ListGcpuserResponseObject) ListGcpuserResponse {
	return ListGcpuserResponse{
		ListGcpuserResponseObject: v,
	}
}

// []GcpuserAsListGcpuserResponse is a convenience function that returns []Gcpuser wrapped in ListGcpuserResponse
func ArrayOfGcpuserAsListGcpuserResponse(v *[]Gcpuser) ListGcpuserResponse {
	return ListGcpuserResponse{
		ArrayOfGcpuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGcpuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGcpuserResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGcpuserResponseObject)
	if err == nil {
		jsonListGcpuserResponseObject, _ := json.Marshal(dst.ListGcpuserResponseObject)
		if string(jsonListGcpuserResponseObject) == "{}" { // empty struct
			dst.ListGcpuserResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGcpuserResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGcpuser
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGcpuser)
	if err == nil {
		jsonArrayOfGcpuser, _ := json.Marshal(dst.ArrayOfGcpuser)
		if string(jsonArrayOfGcpuser) == "{}" { // empty struct
			dst.ArrayOfGcpuser = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGcpuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGcpuserResponseObject = nil
		dst.ArrayOfGcpuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGcpuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGcpuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGcpuserResponse) MarshalJSON() ([]byte, error) {
	if src.ListGcpuserResponseObject != nil {
		return json.Marshal(&src.ListGcpuserResponseObject)
	}

	if src.ArrayOfGcpuser != nil {
		return json.Marshal(&src.ArrayOfGcpuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGcpuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGcpuserResponseObject != nil {
		return obj.ListGcpuserResponseObject
	}

	if obj.ArrayOfGcpuser != nil {
		return obj.ArrayOfGcpuser
	}

	// all schemas are nil
	return nil
}

type NullableListGcpuserResponse struct {
	value *ListGcpuserResponse
	isSet bool
}

func (v NullableListGcpuserResponse) Get() *ListGcpuserResponse {
	return v.value
}

func (v *NullableListGcpuserResponse) Set(val *ListGcpuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGcpuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGcpuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGcpuserResponse(val *ListGcpuserResponse) *NullableListGcpuserResponse {
	return &NullableListGcpuserResponse{value: val, isSet: true}
}

func (v NullableListGcpuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGcpuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
