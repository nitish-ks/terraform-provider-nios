/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// ListGridCloudapiResponse - struct for ListGridCloudapiResponse
type ListGridCloudapiResponse struct {
	ListGridCloudapiResponseObject *ListGridCloudapiResponseObject
	ArrayOfGridCloudapi            *[]GridCloudapi
}

// ListGridCloudapiResponseObjectAsListGridCloudapiResponse is a convenience function that returns ListGridCloudapiResponseObject wrapped in ListGridCloudapiResponse
func ListGridCloudapiResponseObjectAsListGridCloudapiResponse(v *ListGridCloudapiResponseObject) ListGridCloudapiResponse {
	return ListGridCloudapiResponse{
		ListGridCloudapiResponseObject: v,
	}
}

// []GridCloudapiAsListGridCloudapiResponse is a convenience function that returns []GridCloudapi wrapped in ListGridCloudapiResponse
func ArrayOfGridCloudapiAsListGridCloudapiResponse(v *[]GridCloudapi) ListGridCloudapiResponse {
	return ListGridCloudapiResponse{
		ArrayOfGridCloudapi: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGridCloudapiResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGridCloudapiResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGridCloudapiResponseObject)
	if err == nil {
		jsonListGridCloudapiResponseObject, _ := json.Marshal(dst.ListGridCloudapiResponseObject)
		if string(jsonListGridCloudapiResponseObject) == "{}" { // empty struct
			dst.ListGridCloudapiResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGridCloudapiResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGridCloudapi
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGridCloudapi)
	if err == nil {
		jsonArrayOfGridCloudapi, _ := json.Marshal(dst.ArrayOfGridCloudapi)
		if string(jsonArrayOfGridCloudapi) == "{}" { // empty struct
			dst.ArrayOfGridCloudapi = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGridCloudapi = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGridCloudapiResponseObject = nil
		dst.ArrayOfGridCloudapi = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGridCloudapiResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGridCloudapiResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGridCloudapiResponse) MarshalJSON() ([]byte, error) {
	if src.ListGridCloudapiResponseObject != nil {
		return json.Marshal(&src.ListGridCloudapiResponseObject)
	}

	if src.ArrayOfGridCloudapi != nil {
		return json.Marshal(&src.ArrayOfGridCloudapi)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGridCloudapiResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGridCloudapiResponseObject != nil {
		return obj.ListGridCloudapiResponseObject
	}

	if obj.ArrayOfGridCloudapi != nil {
		return obj.ArrayOfGridCloudapi
	}

	// all schemas are nil
	return nil
}

type NullableListGridCloudapiResponse struct {
	value *ListGridCloudapiResponse
	isSet bool
}

func (v NullableListGridCloudapiResponse) Get() *ListGridCloudapiResponse {
	return v.value
}

func (v *NullableListGridCloudapiResponse) Set(val *ListGridCloudapiResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGridCloudapiResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGridCloudapiResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGridCloudapiResponse(val *ListGridCloudapiResponse) *NullableListGridCloudapiResponse {
	return &NullableListGridCloudapiResponse{value: val, isSet: true}
}

func (v NullableListGridCloudapiResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGridCloudapiResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
