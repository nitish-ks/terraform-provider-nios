/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// ListMultiregionsResponse - struct for ListMultiregionsResponse
type ListMultiregionsResponse struct {
	ListMultiregionsResponseObject *ListMultiregionsResponseObject
	ArrayOfMultiregions            *[]Multiregions
}

// ListMultiregionsResponseObjectAsListMultiregionsResponse is a convenience function that returns ListMultiregionsResponseObject wrapped in ListMultiregionsResponse
func ListMultiregionsResponseObjectAsListMultiregionsResponse(v *ListMultiregionsResponseObject) ListMultiregionsResponse {
	return ListMultiregionsResponse{
		ListMultiregionsResponseObject: v,
	}
}

// []MultiregionsAsListMultiregionsResponse is a convenience function that returns []Multiregions wrapped in ListMultiregionsResponse
func ArrayOfMultiregionsAsListMultiregionsResponse(v *[]Multiregions) ListMultiregionsResponse {
	return ListMultiregionsResponse{
		ArrayOfMultiregions: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMultiregionsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMultiregionsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMultiregionsResponseObject)
	if err == nil {
		jsonListMultiregionsResponseObject, _ := json.Marshal(dst.ListMultiregionsResponseObject)
		if string(jsonListMultiregionsResponseObject) == "{}" { // empty struct
			dst.ListMultiregionsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMultiregionsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMultiregions
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMultiregions)
	if err == nil {
		jsonArrayOfMultiregions, _ := json.Marshal(dst.ArrayOfMultiregions)
		if string(jsonArrayOfMultiregions) == "{}" { // empty struct
			dst.ArrayOfMultiregions = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMultiregions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMultiregionsResponseObject = nil
		dst.ArrayOfMultiregions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMultiregionsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMultiregionsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMultiregionsResponse) MarshalJSON() ([]byte, error) {
	if src.ListMultiregionsResponseObject != nil {
		return json.Marshal(&src.ListMultiregionsResponseObject)
	}

	if src.ArrayOfMultiregions != nil {
		return json.Marshal(&src.ArrayOfMultiregions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMultiregionsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMultiregionsResponseObject != nil {
		return obj.ListMultiregionsResponseObject
	}

	if obj.ArrayOfMultiregions != nil {
		return obj.ArrayOfMultiregions
	}

	// all schemas are nil
	return nil
}

type NullableListMultiregionsResponse struct {
	value *ListMultiregionsResponse
	isSet bool
}

func (v NullableListMultiregionsResponse) Get() *ListMultiregionsResponse {
	return v.value
}

func (v *NullableListMultiregionsResponse) Set(val *ListMultiregionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMultiregionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMultiregionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMultiregionsResponse(val *ListMultiregionsResponse) *NullableListMultiregionsResponse {
	return &NullableListMultiregionsResponse{value: val, isSet: true}
}

func (v NullableListMultiregionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMultiregionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
