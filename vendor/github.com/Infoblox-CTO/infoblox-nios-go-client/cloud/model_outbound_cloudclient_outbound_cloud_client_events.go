/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
)

// checks if the OutboundCloudclientOutboundCloudClientEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutboundCloudclientOutboundCloudClientEvents{}

// OutboundCloudclientOutboundCloudClientEvents struct for OutboundCloudclientOutboundCloudClientEvents
type OutboundCloudclientOutboundCloudClientEvents struct {
	// The event type enum rpz and analytics.
	EventType *string `json:"event_type,omitempty"`
	// Determines if the event type is enabled or not.
	Enabled              *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutboundCloudclientOutboundCloudClientEvents OutboundCloudclientOutboundCloudClientEvents

// NewOutboundCloudclientOutboundCloudClientEvents instantiates a new OutboundCloudclientOutboundCloudClientEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutboundCloudclientOutboundCloudClientEvents() *OutboundCloudclientOutboundCloudClientEvents {
	this := OutboundCloudclientOutboundCloudClientEvents{}
	return &this
}

// NewOutboundCloudclientOutboundCloudClientEventsWithDefaults instantiates a new OutboundCloudclientOutboundCloudClientEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutboundCloudclientOutboundCloudClientEventsWithDefaults() *OutboundCloudclientOutboundCloudClientEvents {
	this := OutboundCloudclientOutboundCloudClientEvents{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *OutboundCloudclientOutboundCloudClientEvents) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCloudclientOutboundCloudClientEvents) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *OutboundCloudclientOutboundCloudClientEvents) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *OutboundCloudclientOutboundCloudClientEvents) SetEventType(v string) {
	o.EventType = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OutboundCloudclientOutboundCloudClientEvents) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutboundCloudclientOutboundCloudClientEvents) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OutboundCloudclientOutboundCloudClientEvents) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OutboundCloudclientOutboundCloudClientEvents) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o OutboundCloudclientOutboundCloudClientEvents) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutboundCloudclientOutboundCloudClientEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OutboundCloudclientOutboundCloudClientEvents) UnmarshalJSON(data []byte) (err error) {
	varOutboundCloudclientOutboundCloudClientEvents := _OutboundCloudclientOutboundCloudClientEvents{}

	err = json.Unmarshal(data, &varOutboundCloudclientOutboundCloudClientEvents)

	if err != nil {
		return err
	}

	*o = OutboundCloudclientOutboundCloudClientEvents(varOutboundCloudclientOutboundCloudClientEvents)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event_type")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutboundCloudclientOutboundCloudClientEvents struct {
	value *OutboundCloudclientOutboundCloudClientEvents
	isSet bool
}

func (v NullableOutboundCloudclientOutboundCloudClientEvents) Get() *OutboundCloudclientOutboundCloudClientEvents {
	return v.value
}

func (v *NullableOutboundCloudclientOutboundCloudClientEvents) Set(val *OutboundCloudclientOutboundCloudClientEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableOutboundCloudclientOutboundCloudClientEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableOutboundCloudclientOutboundCloudClientEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutboundCloudclientOutboundCloudClientEvents(val *OutboundCloudclientOutboundCloudClientEvents) *NullableOutboundCloudclientOutboundCloudClientEvents {
	return &NullableOutboundCloudclientOutboundCloudClientEvents{value: val, isSet: true}
}

func (v NullableOutboundCloudclientOutboundCloudClientEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutboundCloudclientOutboundCloudClientEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
