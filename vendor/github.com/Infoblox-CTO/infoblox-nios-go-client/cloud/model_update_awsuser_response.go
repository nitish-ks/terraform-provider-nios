/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// UpdateAwsuserResponse - struct for UpdateAwsuserResponse
type UpdateAwsuserResponse struct {
	UpdateAwsuserResponseAsObject *UpdateAwsuserResponseAsObject
	String                        *string
}

// UpdateAwsuserResponseAsObjectAsUpdateAwsuserResponse is a convenience function that returns UpdateAwsuserResponseAsObject wrapped in UpdateAwsuserResponse
func UpdateAwsuserResponseAsObjectAsUpdateAwsuserResponse(v *UpdateAwsuserResponseAsObject) UpdateAwsuserResponse {
	return UpdateAwsuserResponse{
		UpdateAwsuserResponseAsObject: v,
	}
}

// stringAsUpdateAwsuserResponse is a convenience function that returns string wrapped in UpdateAwsuserResponse
func StringAsUpdateAwsuserResponse(v *string) UpdateAwsuserResponse {
	return UpdateAwsuserResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateAwsuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateAwsuserResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateAwsuserResponseAsObject)
	if err == nil {
		jsonUpdateAwsuserResponseAsObject, _ := json.Marshal(dst.UpdateAwsuserResponseAsObject)
		if string(jsonUpdateAwsuserResponseAsObject) == "{}" { // empty struct
			dst.UpdateAwsuserResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateAwsuserResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateAwsuserResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateAwsuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateAwsuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateAwsuserResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateAwsuserResponseAsObject != nil {
		return json.Marshal(&src.UpdateAwsuserResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateAwsuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateAwsuserResponseAsObject != nil {
		return obj.UpdateAwsuserResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateAwsuserResponse struct {
	value *UpdateAwsuserResponse
	isSet bool
}

func (v NullableUpdateAwsuserResponse) Get() *UpdateAwsuserResponse {
	return v.value
}

func (v *NullableUpdateAwsuserResponse) Set(val *UpdateAwsuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAwsuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAwsuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAwsuserResponse(val *UpdateAwsuserResponse) *NullableUpdateAwsuserResponse {
	return &NullableUpdateAwsuserResponse{value: val, isSet: true}
}

func (v NullableUpdateAwsuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAwsuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
