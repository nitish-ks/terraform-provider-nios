/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DhcpfailoverAPI interface {
	/*
		Get Retrieve dhcpfailover objects

		Returns a list of dhcpfailover objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DhcpfailoverAPIGetRequest
	*/
	Get(ctx context.Context) DhcpfailoverAPIGetRequest

	// GetExecute executes the request
	//  @return ListDhcpfailoverResponse
	GetExecute(r DhcpfailoverAPIGetRequest) (*ListDhcpfailoverResponse, *http.Response, error)
	/*
		Post Create a dhcpfailover object

		Creates a new dhcpfailover object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DhcpfailoverAPIPostRequest
	*/
	Post(ctx context.Context) DhcpfailoverAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDhcpfailoverResponse
	PostExecute(r DhcpfailoverAPIPostRequest) (*CreateDhcpfailoverResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a dhcpfailover object

		Deletes a specific dhcpfailover object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpfailover object
		@return DhcpfailoverAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DhcpfailoverAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DhcpfailoverAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific dhcpfailover object

		Returns a specific dhcpfailover object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpfailover object
		@return DhcpfailoverAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DhcpfailoverAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDhcpfailoverResponse
	ReferenceGetExecute(r DhcpfailoverAPIReferenceGetRequest) (*GetDhcpfailoverResponse, *http.Response, error)
	/*
		ReferencePut Update a dhcpfailover object

		Updates a specific dhcpfailover object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpfailover object
		@return DhcpfailoverAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DhcpfailoverAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDhcpfailoverResponse
	ReferencePutExecute(r DhcpfailoverAPIReferencePutRequest) (*UpdateDhcpfailoverResponse, *http.Response, error)
}

// DhcpfailoverAPIService DhcpfailoverAPI service
type DhcpfailoverAPIService internal.Service

type DhcpfailoverAPIGetRequest struct {
	ctx            context.Context
	ApiService     DhcpfailoverAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DhcpfailoverAPIGetRequest) ReturnFields(returnFields string) DhcpfailoverAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpfailoverAPIGetRequest) ReturnFields2(returnFields2 string) DhcpfailoverAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DhcpfailoverAPIGetRequest) MaxResults(maxResults int32) DhcpfailoverAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DhcpfailoverAPIGetRequest) ReturnAsObject(returnAsObject int32) DhcpfailoverAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DhcpfailoverAPIGetRequest) Paging(paging int32) DhcpfailoverAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DhcpfailoverAPIGetRequest) PageId(pageId string) DhcpfailoverAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DhcpfailoverAPIGetRequest) Filters(filters map[string]interface{}) DhcpfailoverAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DhcpfailoverAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DhcpfailoverAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DhcpfailoverAPIGetRequest) Execute() (*ListDhcpfailoverResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve dhcpfailover objects

Returns a list of dhcpfailover objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DhcpfailoverAPIGetRequest
*/
func (a *DhcpfailoverAPIService) Get(ctx context.Context) DhcpfailoverAPIGetRequest {
	return DhcpfailoverAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDhcpfailoverResponse
func (a *DhcpfailoverAPIService) GetExecute(r DhcpfailoverAPIGetRequest) (*ListDhcpfailoverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDhcpfailoverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpfailoverAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpfailover"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpfailoverAPIPostRequest struct {
	ctx            context.Context
	ApiService     DhcpfailoverAPI
	dhcpfailover   *Dhcpfailover
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DhcpfailoverAPIPostRequest) Dhcpfailover(dhcpfailover Dhcpfailover) DhcpfailoverAPIPostRequest {
	r.dhcpfailover = &dhcpfailover
	return r
}

// Enter the field names followed by comma
func (r DhcpfailoverAPIPostRequest) ReturnFields(returnFields string) DhcpfailoverAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpfailoverAPIPostRequest) ReturnFields2(returnFields2 string) DhcpfailoverAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpfailoverAPIPostRequest) ReturnAsObject(returnAsObject int32) DhcpfailoverAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpfailoverAPIPostRequest) Execute() (*CreateDhcpfailoverResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a dhcpfailover object

Creates a new dhcpfailover object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DhcpfailoverAPIPostRequest
*/
func (a *DhcpfailoverAPIService) Post(ctx context.Context) DhcpfailoverAPIPostRequest {
	return DhcpfailoverAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDhcpfailoverResponse
func (a *DhcpfailoverAPIService) PostExecute(r DhcpfailoverAPIPostRequest) (*CreateDhcpfailoverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDhcpfailoverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpfailoverAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpfailover"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dhcpfailover == nil {
		return localVarReturnValue, nil, internal.ReportError("dhcpfailover is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dhcpfailover != nil {
		if r.dhcpfailover.Extattrs == nil {
			r.dhcpfailover.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dhcpfailover.Extattrs)[k]; !ok {
				(*r.dhcpfailover.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dhcpfailover
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpfailoverAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DhcpfailoverAPI
	reference  string
}

func (r DhcpfailoverAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a dhcpfailover object

Deletes a specific dhcpfailover object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpfailover object
	@return DhcpfailoverAPIReferenceDeleteRequest
*/
func (a *DhcpfailoverAPIService) ReferenceDelete(ctx context.Context, reference string) DhcpfailoverAPIReferenceDeleteRequest {
	return DhcpfailoverAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DhcpfailoverAPIService) ReferenceDeleteExecute(r DhcpfailoverAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpfailoverAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpfailover/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DhcpfailoverAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DhcpfailoverAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DhcpfailoverAPIReferenceGetRequest) ReturnFields(returnFields string) DhcpfailoverAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpfailoverAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DhcpfailoverAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpfailoverAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DhcpfailoverAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpfailoverAPIReferenceGetRequest) Execute() (*GetDhcpfailoverResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific dhcpfailover object

Returns a specific dhcpfailover object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpfailover object
	@return DhcpfailoverAPIReferenceGetRequest
*/
func (a *DhcpfailoverAPIService) ReferenceGet(ctx context.Context, reference string) DhcpfailoverAPIReferenceGetRequest {
	return DhcpfailoverAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDhcpfailoverResponse
func (a *DhcpfailoverAPIService) ReferenceGetExecute(r DhcpfailoverAPIReferenceGetRequest) (*GetDhcpfailoverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDhcpfailoverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpfailoverAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpfailover/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpfailoverAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     DhcpfailoverAPI
	reference      string
	dhcpfailover   *Dhcpfailover
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DhcpfailoverAPIReferencePutRequest) Dhcpfailover(dhcpfailover Dhcpfailover) DhcpfailoverAPIReferencePutRequest {
	r.dhcpfailover = &dhcpfailover
	return r
}

// Enter the field names followed by comma
func (r DhcpfailoverAPIReferencePutRequest) ReturnFields(returnFields string) DhcpfailoverAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpfailoverAPIReferencePutRequest) ReturnFields2(returnFields2 string) DhcpfailoverAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpfailoverAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DhcpfailoverAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpfailoverAPIReferencePutRequest) Execute() (*UpdateDhcpfailoverResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a dhcpfailover object

Updates a specific dhcpfailover object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpfailover object
	@return DhcpfailoverAPIReferencePutRequest
*/
func (a *DhcpfailoverAPIService) ReferencePut(ctx context.Context, reference string) DhcpfailoverAPIReferencePutRequest {
	return DhcpfailoverAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDhcpfailoverResponse
func (a *DhcpfailoverAPIService) ReferencePutExecute(r DhcpfailoverAPIReferencePutRequest) (*UpdateDhcpfailoverResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDhcpfailoverResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpfailoverAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpfailover/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dhcpfailover == nil {
		return localVarReturnValue, nil, internal.ReportError("dhcpfailover is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dhcpfailover != nil {
		if r.dhcpfailover.Extattrs == nil {
			r.dhcpfailover.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dhcpfailover.Extattrs)[k]; !ok {
				(*r.dhcpfailover.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dhcpfailover
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
