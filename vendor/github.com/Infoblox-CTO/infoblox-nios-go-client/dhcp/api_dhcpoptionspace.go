/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DhcpoptionspaceAPI interface {
	/*
		Get Retrieve dhcpoptionspace objects

		Returns a list of dhcpoptionspace objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DhcpoptionspaceAPIGetRequest
	*/
	Get(ctx context.Context) DhcpoptionspaceAPIGetRequest

	// GetExecute executes the request
	//  @return ListDhcpoptionspaceResponse
	GetExecute(r DhcpoptionspaceAPIGetRequest) (*ListDhcpoptionspaceResponse, *http.Response, error)
	/*
		Post Create a dhcpoptionspace object

		Creates a new dhcpoptionspace object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DhcpoptionspaceAPIPostRequest
	*/
	Post(ctx context.Context) DhcpoptionspaceAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDhcpoptionspaceResponse
	PostExecute(r DhcpoptionspaceAPIPostRequest) (*CreateDhcpoptionspaceResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a dhcpoptionspace object

		Deletes a specific dhcpoptionspace object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpoptionspace object
		@return DhcpoptionspaceAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DhcpoptionspaceAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DhcpoptionspaceAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific dhcpoptionspace object

		Returns a specific dhcpoptionspace object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpoptionspace object
		@return DhcpoptionspaceAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DhcpoptionspaceAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDhcpoptionspaceResponse
	ReferenceGetExecute(r DhcpoptionspaceAPIReferenceGetRequest) (*GetDhcpoptionspaceResponse, *http.Response, error)
	/*
		ReferencePut Update a dhcpoptionspace object

		Updates a specific dhcpoptionspace object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dhcpoptionspace object
		@return DhcpoptionspaceAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DhcpoptionspaceAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDhcpoptionspaceResponse
	ReferencePutExecute(r DhcpoptionspaceAPIReferencePutRequest) (*UpdateDhcpoptionspaceResponse, *http.Response, error)
}

// DhcpoptionspaceAPIService DhcpoptionspaceAPI service
type DhcpoptionspaceAPIService internal.Service

type DhcpoptionspaceAPIGetRequest struct {
	ctx            context.Context
	ApiService     DhcpoptionspaceAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DhcpoptionspaceAPIGetRequest) ReturnFields(returnFields string) DhcpoptionspaceAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpoptionspaceAPIGetRequest) ReturnFields2(returnFields2 string) DhcpoptionspaceAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DhcpoptionspaceAPIGetRequest) MaxResults(maxResults int32) DhcpoptionspaceAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DhcpoptionspaceAPIGetRequest) ReturnAsObject(returnAsObject int32) DhcpoptionspaceAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DhcpoptionspaceAPIGetRequest) Paging(paging int32) DhcpoptionspaceAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DhcpoptionspaceAPIGetRequest) PageId(pageId string) DhcpoptionspaceAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DhcpoptionspaceAPIGetRequest) Filters(filters map[string]interface{}) DhcpoptionspaceAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DhcpoptionspaceAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DhcpoptionspaceAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DhcpoptionspaceAPIGetRequest) Execute() (*ListDhcpoptionspaceResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve dhcpoptionspace objects

Returns a list of dhcpoptionspace objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DhcpoptionspaceAPIGetRequest
*/
func (a *DhcpoptionspaceAPIService) Get(ctx context.Context) DhcpoptionspaceAPIGetRequest {
	return DhcpoptionspaceAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDhcpoptionspaceResponse
func (a *DhcpoptionspaceAPIService) GetExecute(r DhcpoptionspaceAPIGetRequest) (*ListDhcpoptionspaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDhcpoptionspaceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpoptionspaceAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpoptionspace"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpoptionspaceAPIPostRequest struct {
	ctx             context.Context
	ApiService      DhcpoptionspaceAPI
	dhcpoptionspace *Dhcpoptionspace
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to create
func (r DhcpoptionspaceAPIPostRequest) Dhcpoptionspace(dhcpoptionspace Dhcpoptionspace) DhcpoptionspaceAPIPostRequest {
	r.dhcpoptionspace = &dhcpoptionspace
	return r
}

// Enter the field names followed by comma
func (r DhcpoptionspaceAPIPostRequest) ReturnFields(returnFields string) DhcpoptionspaceAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpoptionspaceAPIPostRequest) ReturnFields2(returnFields2 string) DhcpoptionspaceAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpoptionspaceAPIPostRequest) ReturnAsObject(returnAsObject int32) DhcpoptionspaceAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpoptionspaceAPIPostRequest) Execute() (*CreateDhcpoptionspaceResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a dhcpoptionspace object

Creates a new dhcpoptionspace object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DhcpoptionspaceAPIPostRequest
*/
func (a *DhcpoptionspaceAPIService) Post(ctx context.Context) DhcpoptionspaceAPIPostRequest {
	return DhcpoptionspaceAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDhcpoptionspaceResponse
func (a *DhcpoptionspaceAPIService) PostExecute(r DhcpoptionspaceAPIPostRequest) (*CreateDhcpoptionspaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDhcpoptionspaceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpoptionspaceAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpoptionspace"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dhcpoptionspace == nil {
		return localVarReturnValue, nil, internal.ReportError("dhcpoptionspace is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dhcpoptionspace
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpoptionspaceAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DhcpoptionspaceAPI
	reference  string
}

func (r DhcpoptionspaceAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a dhcpoptionspace object

Deletes a specific dhcpoptionspace object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpoptionspace object
	@return DhcpoptionspaceAPIReferenceDeleteRequest
*/
func (a *DhcpoptionspaceAPIService) ReferenceDelete(ctx context.Context, reference string) DhcpoptionspaceAPIReferenceDeleteRequest {
	return DhcpoptionspaceAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DhcpoptionspaceAPIService) ReferenceDeleteExecute(r DhcpoptionspaceAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpoptionspaceAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpoptionspace/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DhcpoptionspaceAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DhcpoptionspaceAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DhcpoptionspaceAPIReferenceGetRequest) ReturnFields(returnFields string) DhcpoptionspaceAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpoptionspaceAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DhcpoptionspaceAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpoptionspaceAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DhcpoptionspaceAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpoptionspaceAPIReferenceGetRequest) Execute() (*GetDhcpoptionspaceResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific dhcpoptionspace object

Returns a specific dhcpoptionspace object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpoptionspace object
	@return DhcpoptionspaceAPIReferenceGetRequest
*/
func (a *DhcpoptionspaceAPIService) ReferenceGet(ctx context.Context, reference string) DhcpoptionspaceAPIReferenceGetRequest {
	return DhcpoptionspaceAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDhcpoptionspaceResponse
func (a *DhcpoptionspaceAPIService) ReferenceGetExecute(r DhcpoptionspaceAPIReferenceGetRequest) (*GetDhcpoptionspaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDhcpoptionspaceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpoptionspaceAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpoptionspace/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DhcpoptionspaceAPIReferencePutRequest struct {
	ctx             context.Context
	ApiService      DhcpoptionspaceAPI
	reference       string
	dhcpoptionspace *Dhcpoptionspace
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to update
func (r DhcpoptionspaceAPIReferencePutRequest) Dhcpoptionspace(dhcpoptionspace Dhcpoptionspace) DhcpoptionspaceAPIReferencePutRequest {
	r.dhcpoptionspace = &dhcpoptionspace
	return r
}

// Enter the field names followed by comma
func (r DhcpoptionspaceAPIReferencePutRequest) ReturnFields(returnFields string) DhcpoptionspaceAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DhcpoptionspaceAPIReferencePutRequest) ReturnFields2(returnFields2 string) DhcpoptionspaceAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DhcpoptionspaceAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DhcpoptionspaceAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DhcpoptionspaceAPIReferencePutRequest) Execute() (*UpdateDhcpoptionspaceResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a dhcpoptionspace object

Updates a specific dhcpoptionspace object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dhcpoptionspace object
	@return DhcpoptionspaceAPIReferencePutRequest
*/
func (a *DhcpoptionspaceAPIService) ReferencePut(ctx context.Context, reference string) DhcpoptionspaceAPIReferencePutRequest {
	return DhcpoptionspaceAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDhcpoptionspaceResponse
func (a *DhcpoptionspaceAPIService) ReferencePutExecute(r DhcpoptionspaceAPIReferencePutRequest) (*UpdateDhcpoptionspaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDhcpoptionspaceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DhcpoptionspaceAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcpoptionspace/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dhcpoptionspace == nil {
		return localVarReturnValue, nil, internal.ReportError("dhcpoptionspace is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dhcpoptionspace
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
