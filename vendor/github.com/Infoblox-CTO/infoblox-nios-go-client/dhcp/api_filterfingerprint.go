/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type FilterfingerprintAPI interface {
	/*
		Get Retrieve filterfingerprint objects

		Returns a list of filterfingerprint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FilterfingerprintAPIGetRequest
	*/
	Get(ctx context.Context) FilterfingerprintAPIGetRequest

	// GetExecute executes the request
	//  @return ListFilterfingerprintResponse
	GetExecute(r FilterfingerprintAPIGetRequest) (*ListFilterfingerprintResponse, *http.Response, error)
	/*
		Post Create a filterfingerprint object

		Creates a new filterfingerprint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FilterfingerprintAPIPostRequest
	*/
	Post(ctx context.Context) FilterfingerprintAPIPostRequest

	// PostExecute executes the request
	//  @return CreateFilterfingerprintResponse
	PostExecute(r FilterfingerprintAPIPostRequest) (*CreateFilterfingerprintResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a filterfingerprint object

		Deletes a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) FilterfingerprintAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r FilterfingerprintAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific filterfingerprint object

		Returns a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) FilterfingerprintAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetFilterfingerprintResponse
	ReferenceGetExecute(r FilterfingerprintAPIReferenceGetRequest) (*GetFilterfingerprintResponse, *http.Response, error)
	/*
		ReferencePut Update a filterfingerprint object

		Updates a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) FilterfingerprintAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateFilterfingerprintResponse
	ReferencePutExecute(r FilterfingerprintAPIReferencePutRequest) (*UpdateFilterfingerprintResponse, *http.Response, error)
}

// FilterfingerprintAPIService FilterfingerprintAPI service
type FilterfingerprintAPIService internal.Service

type FilterfingerprintAPIGetRequest struct {
	ctx            context.Context
	ApiService     FilterfingerprintAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIGetRequest) ReturnFields(returnFields string) FilterfingerprintAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIGetRequest) ReturnFields2(returnFields2 string) FilterfingerprintAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r FilterfingerprintAPIGetRequest) MaxResults(maxResults int32) FilterfingerprintAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIGetRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r FilterfingerprintAPIGetRequest) Paging(paging int32) FilterfingerprintAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r FilterfingerprintAPIGetRequest) PageId(pageId string) FilterfingerprintAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r FilterfingerprintAPIGetRequest) Filters(filters map[string]interface{}) FilterfingerprintAPIGetRequest {
	r.filters = &filters
	return r
}

func (r FilterfingerprintAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) FilterfingerprintAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r FilterfingerprintAPIGetRequest) Execute() (*ListFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve filterfingerprint objects

Returns a list of filterfingerprint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilterfingerprintAPIGetRequest
*/
func (a *FilterfingerprintAPIService) Get(ctx context.Context) FilterfingerprintAPIGetRequest {
	return FilterfingerprintAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListFilterfingerprintResponse
func (a *FilterfingerprintAPIService) GetExecute(r FilterfingerprintAPIGetRequest) (*ListFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIPostRequest struct {
	ctx               context.Context
	ApiService        FilterfingerprintAPI
	filterfingerprint *Filterfingerprint
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r FilterfingerprintAPIPostRequest) Filterfingerprint(filterfingerprint Filterfingerprint) FilterfingerprintAPIPostRequest {
	r.filterfingerprint = &filterfingerprint
	return r
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIPostRequest) ReturnFields(returnFields string) FilterfingerprintAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIPostRequest) ReturnFields2(returnFields2 string) FilterfingerprintAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIPostRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPIPostRequest) Execute() (*CreateFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a filterfingerprint object

Creates a new filterfingerprint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilterfingerprintAPIPostRequest
*/
func (a *FilterfingerprintAPIService) Post(ctx context.Context) FilterfingerprintAPIPostRequest {
	return FilterfingerprintAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateFilterfingerprintResponse
func (a *FilterfingerprintAPIService) PostExecute(r FilterfingerprintAPIPostRequest) (*CreateFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterfingerprint == nil {
		return localVarReturnValue, nil, internal.ReportError("filterfingerprint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.filterfingerprint != nil {
		if r.filterfingerprint.Extattrs == nil {
			r.filterfingerprint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.filterfingerprint.Extattrs)[k]; !ok {
				(*r.filterfingerprint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.filterfingerprint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService FilterfingerprintAPI
	reference  string
}

func (r FilterfingerprintAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a filterfingerprint object

Deletes a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIReferenceDeleteRequest
*/
func (a *FilterfingerprintAPIService) ReferenceDelete(ctx context.Context, reference string) FilterfingerprintAPIReferenceDeleteRequest {
	return FilterfingerprintAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *FilterfingerprintAPIService) ReferenceDeleteExecute(r FilterfingerprintAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FilterfingerprintAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     FilterfingerprintAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIReferenceGetRequest) ReturnFields(returnFields string) FilterfingerprintAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIReferenceGetRequest) ReturnFields2(returnFields2 string) FilterfingerprintAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPIReferenceGetRequest) Execute() (*GetFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific filterfingerprint object

Returns a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIReferenceGetRequest
*/
func (a *FilterfingerprintAPIService) ReferenceGet(ctx context.Context, reference string) FilterfingerprintAPIReferenceGetRequest {
	return FilterfingerprintAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetFilterfingerprintResponse
func (a *FilterfingerprintAPIService) ReferenceGetExecute(r FilterfingerprintAPIReferenceGetRequest) (*GetFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIReferencePutRequest struct {
	ctx               context.Context
	ApiService        FilterfingerprintAPI
	reference         string
	filterfingerprint *Filterfingerprint
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r FilterfingerprintAPIReferencePutRequest) Filterfingerprint(filterfingerprint Filterfingerprint) FilterfingerprintAPIReferencePutRequest {
	r.filterfingerprint = &filterfingerprint
	return r
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIReferencePutRequest) ReturnFields(returnFields string) FilterfingerprintAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIReferencePutRequest) ReturnFields2(returnFields2 string) FilterfingerprintAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPIReferencePutRequest) Execute() (*UpdateFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a filterfingerprint object

Updates a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIReferencePutRequest
*/
func (a *FilterfingerprintAPIService) ReferencePut(ctx context.Context, reference string) FilterfingerprintAPIReferencePutRequest {
	return FilterfingerprintAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateFilterfingerprintResponse
func (a *FilterfingerprintAPIService) ReferencePutExecute(r FilterfingerprintAPIReferencePutRequest) (*UpdateFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterfingerprint == nil {
		return localVarReturnValue, nil, internal.ReportError("filterfingerprint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.filterfingerprint != nil {
		if r.filterfingerprint.Extattrs == nil {
			r.filterfingerprint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.filterfingerprint.Extattrs)[k]; !ok {
				(*r.filterfingerprint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.filterfingerprint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
