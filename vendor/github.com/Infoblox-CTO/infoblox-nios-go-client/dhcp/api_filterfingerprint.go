/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type FilterfingerprintAPI interface {
	/*
		Create Create a filterfingerprint object

		Creates a new filterfingerprint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FilterfingerprintAPICreateRequest
	*/
	Create(ctx context.Context) FilterfingerprintAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateFilterfingerprintResponse
	CreateExecute(r FilterfingerprintAPICreateRequest) (*CreateFilterfingerprintResponse, *http.Response, error)
	/*
		Delete Delete a filterfingerprint object

		Deletes a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) FilterfingerprintAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r FilterfingerprintAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve filterfingerprint objects

		Returns a list of filterfingerprint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return FilterfingerprintAPIListRequest
	*/
	List(ctx context.Context) FilterfingerprintAPIListRequest

	// ListExecute executes the request
	//  @return ListFilterfingerprintResponse
	ListExecute(r FilterfingerprintAPIListRequest) (*ListFilterfingerprintResponse, *http.Response, error)
	/*
		Read Get a specific filterfingerprint object

		Returns a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIReadRequest
	*/
	Read(ctx context.Context, reference string) FilterfingerprintAPIReadRequest

	// ReadExecute executes the request
	//  @return GetFilterfingerprintResponse
	ReadExecute(r FilterfingerprintAPIReadRequest) (*GetFilterfingerprintResponse, *http.Response, error)
	/*
		Update Update a filterfingerprint object

		Updates a specific filterfingerprint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the filterfingerprint object
		@return FilterfingerprintAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) FilterfingerprintAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateFilterfingerprintResponse
	UpdateExecute(r FilterfingerprintAPIUpdateRequest) (*UpdateFilterfingerprintResponse, *http.Response, error)
}

// FilterfingerprintAPIService FilterfingerprintAPI service
type FilterfingerprintAPIService internal.Service

type FilterfingerprintAPICreateRequest struct {
	ctx               context.Context
	ApiService        FilterfingerprintAPI
	filterfingerprint *Filterfingerprint
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to create
func (r FilterfingerprintAPICreateRequest) Filterfingerprint(filterfingerprint Filterfingerprint) FilterfingerprintAPICreateRequest {
	r.filterfingerprint = &filterfingerprint
	return r
}

// Enter the field names followed by comma
func (r FilterfingerprintAPICreateRequest) ReturnFields(returnFields string) FilterfingerprintAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) FilterfingerprintAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPICreateRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPICreateRequest) Execute() (*CreateFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a filterfingerprint object

Creates a new filterfingerprint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilterfingerprintAPICreateRequest
*/
func (a *FilterfingerprintAPIService) Create(ctx context.Context) FilterfingerprintAPICreateRequest {
	return FilterfingerprintAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateFilterfingerprintResponse
func (a *FilterfingerprintAPIService) CreateExecute(r FilterfingerprintAPICreateRequest) (*CreateFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterfingerprint == nil {
		return localVarReturnValue, nil, internal.ReportError("filterfingerprint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.filterfingerprint != nil {
		if r.filterfingerprint.Extattrs == nil {
			r.filterfingerprint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.filterfingerprint.Extattrs)[k]; !ok {
				(*r.filterfingerprint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.filterfingerprint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIDeleteRequest struct {
	ctx        context.Context
	ApiService FilterfingerprintAPI
	reference  string
}

func (r FilterfingerprintAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a filterfingerprint object

Deletes a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIDeleteRequest
*/
func (a *FilterfingerprintAPIService) Delete(ctx context.Context, reference string) FilterfingerprintAPIDeleteRequest {
	return FilterfingerprintAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *FilterfingerprintAPIService) DeleteExecute(r FilterfingerprintAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FilterfingerprintAPIListRequest struct {
	ctx              context.Context
	ApiService       FilterfingerprintAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIListRequest) ReturnFields(returnFields string) FilterfingerprintAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) FilterfingerprintAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r FilterfingerprintAPIListRequest) MaxResults(maxResults int32) FilterfingerprintAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIListRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r FilterfingerprintAPIListRequest) Paging(paging int32) FilterfingerprintAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r FilterfingerprintAPIListRequest) PageId(pageId string) FilterfingerprintAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r FilterfingerprintAPIListRequest) Filters(filters map[string]interface{}) FilterfingerprintAPIListRequest {
	r.filters = &filters
	return r
}

func (r FilterfingerprintAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) FilterfingerprintAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r FilterfingerprintAPIListRequest) Execute() (*ListFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve filterfingerprint objects

Returns a list of filterfingerprint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilterfingerprintAPIListRequest
*/
func (a *FilterfingerprintAPIService) List(ctx context.Context) FilterfingerprintAPIListRequest {
	return FilterfingerprintAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListFilterfingerprintResponse
func (a *FilterfingerprintAPIService) ListExecute(r FilterfingerprintAPIListRequest) (*ListFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIReadRequest struct {
	ctx              context.Context
	ApiService       FilterfingerprintAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIReadRequest) ReturnFields(returnFields string) FilterfingerprintAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) FilterfingerprintAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIReadRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPIReadRequest) Execute() (*GetFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific filterfingerprint object

Returns a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIReadRequest
*/
func (a *FilterfingerprintAPIService) Read(ctx context.Context, reference string) FilterfingerprintAPIReadRequest {
	return FilterfingerprintAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetFilterfingerprintResponse
func (a *FilterfingerprintAPIService) ReadExecute(r FilterfingerprintAPIReadRequest) (*GetFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilterfingerprintAPIUpdateRequest struct {
	ctx               context.Context
	ApiService        FilterfingerprintAPI
	reference         string
	filterfingerprint *Filterfingerprint
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to update
func (r FilterfingerprintAPIUpdateRequest) Filterfingerprint(filterfingerprint Filterfingerprint) FilterfingerprintAPIUpdateRequest {
	r.filterfingerprint = &filterfingerprint
	return r
}

// Enter the field names followed by comma
func (r FilterfingerprintAPIUpdateRequest) ReturnFields(returnFields string) FilterfingerprintAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r FilterfingerprintAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) FilterfingerprintAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r FilterfingerprintAPIUpdateRequest) ReturnAsObject(returnAsObject int32) FilterfingerprintAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r FilterfingerprintAPIUpdateRequest) Execute() (*UpdateFilterfingerprintResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a filterfingerprint object

Updates a specific filterfingerprint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the filterfingerprint object
	@return FilterfingerprintAPIUpdateRequest
*/
func (a *FilterfingerprintAPIService) Update(ctx context.Context, reference string) FilterfingerprintAPIUpdateRequest {
	return FilterfingerprintAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateFilterfingerprintResponse
func (a *FilterfingerprintAPIService) UpdateExecute(r FilterfingerprintAPIUpdateRequest) (*UpdateFilterfingerprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateFilterfingerprintResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "FilterfingerprintAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/filterfingerprint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterfingerprint == nil {
		return localVarReturnValue, nil, internal.ReportError("filterfingerprint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.filterfingerprint != nil {
		if r.filterfingerprint.Extattrs == nil {
			r.filterfingerprint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.filterfingerprint.Extattrs)[k]; !ok {
				(*r.filterfingerprint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.filterfingerprint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
