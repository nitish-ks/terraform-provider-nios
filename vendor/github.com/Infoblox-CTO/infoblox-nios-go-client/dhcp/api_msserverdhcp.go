/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MsserverdhcpAPI interface {
	/*
		Get Retrieve msserver:dhcp objects

		Returns a list of msserver:dhcp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverdhcpAPIGetRequest
	*/
	Get(ctx context.Context) MsserverdhcpAPIGetRequest

	// GetExecute executes the request
	//  @return ListMsserverDhcpResponse
	GetExecute(r MsserverdhcpAPIGetRequest) (*ListMsserverDhcpResponse, *http.Response, error)
	/*
		Post Create a msserver:dhcp object

		Creates a new msserver:dhcp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverdhcpAPIPostRequest
	*/
	Post(ctx context.Context) MsserverdhcpAPIPostRequest

	// PostExecute executes the request
	//  @return CreateMsserverDhcpResponse
	PostExecute(r MsserverdhcpAPIPostRequest) (*CreateMsserverDhcpResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a msserver:dhcp object

		Deletes a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverdhcpAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) MsserverdhcpAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r MsserverdhcpAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific msserver:dhcp object

		Returns a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverdhcpAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) MsserverdhcpAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetMsserverDhcpResponse
	ReferenceGetExecute(r MsserverdhcpAPIReferenceGetRequest) (*GetMsserverDhcpResponse, *http.Response, error)
	/*
		ReferencePut Update a msserver:dhcp object

		Updates a specific msserver:dhcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:dhcp object
		@return MsserverdhcpAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) MsserverdhcpAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateMsserverDhcpResponse
	ReferencePutExecute(r MsserverdhcpAPIReferencePutRequest) (*UpdateMsserverDhcpResponse, *http.Response, error)
}

// MsserverdhcpAPIService MsserverdhcpAPI service
type MsserverdhcpAPIService internal.Service

type MsserverdhcpAPIGetRequest struct {
	ctx            context.Context
	ApiService     MsserverdhcpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MsserverdhcpAPIGetRequest) ReturnFields(returnFields string) MsserverdhcpAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverdhcpAPIGetRequest) ReturnFields2(returnFields2 string) MsserverdhcpAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MsserverdhcpAPIGetRequest) MaxResults(maxResults int32) MsserverdhcpAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MsserverdhcpAPIGetRequest) ReturnAsObject(returnAsObject int32) MsserverdhcpAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MsserverdhcpAPIGetRequest) Paging(paging int32) MsserverdhcpAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MsserverdhcpAPIGetRequest) PageId(pageId string) MsserverdhcpAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r MsserverdhcpAPIGetRequest) Filters(filters map[string]interface{}) MsserverdhcpAPIGetRequest {
	r.filters = &filters
	return r
}

func (r MsserverdhcpAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MsserverdhcpAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MsserverdhcpAPIGetRequest) Execute() (*ListMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve msserver:dhcp objects

Returns a list of msserver:dhcp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverdhcpAPIGetRequest
*/
func (a *MsserverdhcpAPIService) Get(ctx context.Context) MsserverdhcpAPIGetRequest {
	return MsserverdhcpAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMsserverDhcpResponse
func (a *MsserverdhcpAPIService) GetExecute(r MsserverdhcpAPIGetRequest) (*ListMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverdhcpAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverdhcpAPIPostRequest struct {
	ctx            context.Context
	ApiService     MsserverdhcpAPI
	msserverDhcp   *MsserverDhcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r MsserverdhcpAPIPostRequest) MsserverDhcp(msserverDhcp MsserverDhcp) MsserverdhcpAPIPostRequest {
	r.msserverDhcp = &msserverDhcp
	return r
}

// Enter the field names followed by comma
func (r MsserverdhcpAPIPostRequest) ReturnFields(returnFields string) MsserverdhcpAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverdhcpAPIPostRequest) ReturnFields2(returnFields2 string) MsserverdhcpAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverdhcpAPIPostRequest) ReturnAsObject(returnAsObject int32) MsserverdhcpAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverdhcpAPIPostRequest) Execute() (*CreateMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a msserver:dhcp object

Creates a new msserver:dhcp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverdhcpAPIPostRequest
*/
func (a *MsserverdhcpAPIService) Post(ctx context.Context) MsserverdhcpAPIPostRequest {
	return MsserverdhcpAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMsserverDhcpResponse
func (a *MsserverdhcpAPIService) PostExecute(r MsserverdhcpAPIPostRequest) (*CreateMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverdhcpAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDhcp == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDhcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDhcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverdhcpAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService MsserverdhcpAPI
	reference  string
}

func (r MsserverdhcpAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a msserver:dhcp object

Deletes a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverdhcpAPIReferenceDeleteRequest
*/
func (a *MsserverdhcpAPIService) ReferenceDelete(ctx context.Context, reference string) MsserverdhcpAPIReferenceDeleteRequest {
	return MsserverdhcpAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MsserverdhcpAPIService) ReferenceDeleteExecute(r MsserverdhcpAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverdhcpAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MsserverdhcpAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MsserverdhcpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MsserverdhcpAPIReferenceGetRequest) ReturnFields(returnFields string) MsserverdhcpAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverdhcpAPIReferenceGetRequest) ReturnFields2(returnFields2 string) MsserverdhcpAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverdhcpAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) MsserverdhcpAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverdhcpAPIReferenceGetRequest) Execute() (*GetMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific msserver:dhcp object

Returns a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverdhcpAPIReferenceGetRequest
*/
func (a *MsserverdhcpAPIService) ReferenceGet(ctx context.Context, reference string) MsserverdhcpAPIReferenceGetRequest {
	return MsserverdhcpAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMsserverDhcpResponse
func (a *MsserverdhcpAPIService) ReferenceGetExecute(r MsserverdhcpAPIReferenceGetRequest) (*GetMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverdhcpAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverdhcpAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     MsserverdhcpAPI
	reference      string
	msserverDhcp   *MsserverDhcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r MsserverdhcpAPIReferencePutRequest) MsserverDhcp(msserverDhcp MsserverDhcp) MsserverdhcpAPIReferencePutRequest {
	r.msserverDhcp = &msserverDhcp
	return r
}

// Enter the field names followed by comma
func (r MsserverdhcpAPIReferencePutRequest) ReturnFields(returnFields string) MsserverdhcpAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverdhcpAPIReferencePutRequest) ReturnFields2(returnFields2 string) MsserverdhcpAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MsserverdhcpAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) MsserverdhcpAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverdhcpAPIReferencePutRequest) Execute() (*UpdateMsserverDhcpResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a msserver:dhcp object

Updates a specific msserver:dhcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:dhcp object
	@return MsserverdhcpAPIReferencePutRequest
*/
func (a *MsserverdhcpAPIService) ReferencePut(ctx context.Context, reference string) MsserverdhcpAPIReferencePutRequest {
	return MsserverdhcpAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMsserverDhcpResponse
func (a *MsserverdhcpAPIService) ReferencePutExecute(r MsserverdhcpAPIReferencePutRequest) (*UpdateMsserverDhcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMsserverDhcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverdhcpAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:dhcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverDhcp == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverDhcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverDhcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
