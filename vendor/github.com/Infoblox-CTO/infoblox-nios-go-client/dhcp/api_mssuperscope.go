/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MssuperscopeAPI interface {
	/*
		Get Retrieve mssuperscope objects

		Returns a list of mssuperscope objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MssuperscopeAPIGetRequest
	*/
	Get(ctx context.Context) MssuperscopeAPIGetRequest

	// GetExecute executes the request
	//  @return ListMssuperscopeResponse
	GetExecute(r MssuperscopeAPIGetRequest) (*ListMssuperscopeResponse, *http.Response, error)
	/*
		Post Create a mssuperscope object

		Creates a new mssuperscope object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MssuperscopeAPIPostRequest
	*/
	Post(ctx context.Context) MssuperscopeAPIPostRequest

	// PostExecute executes the request
	//  @return CreateMssuperscopeResponse
	PostExecute(r MssuperscopeAPIPostRequest) (*CreateMssuperscopeResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a mssuperscope object

		Deletes a specific mssuperscope object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the mssuperscope object
		@return MssuperscopeAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) MssuperscopeAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r MssuperscopeAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific mssuperscope object

		Returns a specific mssuperscope object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the mssuperscope object
		@return MssuperscopeAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) MssuperscopeAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetMssuperscopeResponse
	ReferenceGetExecute(r MssuperscopeAPIReferenceGetRequest) (*GetMssuperscopeResponse, *http.Response, error)
	/*
		ReferencePut Update a mssuperscope object

		Updates a specific mssuperscope object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the mssuperscope object
		@return MssuperscopeAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) MssuperscopeAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateMssuperscopeResponse
	ReferencePutExecute(r MssuperscopeAPIReferencePutRequest) (*UpdateMssuperscopeResponse, *http.Response, error)
}

// MssuperscopeAPIService MssuperscopeAPI service
type MssuperscopeAPIService internal.Service

type MssuperscopeAPIGetRequest struct {
	ctx            context.Context
	ApiService     MssuperscopeAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r MssuperscopeAPIGetRequest) ReturnFields(returnFields string) MssuperscopeAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MssuperscopeAPIGetRequest) ReturnFields2(returnFields2 string) MssuperscopeAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r MssuperscopeAPIGetRequest) MaxResults(maxResults int32) MssuperscopeAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MssuperscopeAPIGetRequest) ReturnAsObject(returnAsObject int32) MssuperscopeAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MssuperscopeAPIGetRequest) Paging(paging int32) MssuperscopeAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MssuperscopeAPIGetRequest) PageId(pageId string) MssuperscopeAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r MssuperscopeAPIGetRequest) Filters(filters map[string]interface{}) MssuperscopeAPIGetRequest {
	r.filters = &filters
	return r
}

func (r MssuperscopeAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) MssuperscopeAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MssuperscopeAPIGetRequest) Execute() (*ListMssuperscopeResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve mssuperscope objects

Returns a list of mssuperscope objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MssuperscopeAPIGetRequest
*/
func (a *MssuperscopeAPIService) Get(ctx context.Context) MssuperscopeAPIGetRequest {
	return MssuperscopeAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMssuperscopeResponse
func (a *MssuperscopeAPIService) GetExecute(r MssuperscopeAPIGetRequest) (*ListMssuperscopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMssuperscopeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MssuperscopeAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/mssuperscope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MssuperscopeAPIPostRequest struct {
	ctx            context.Context
	ApiService     MssuperscopeAPI
	mssuperscope   *Mssuperscope
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r MssuperscopeAPIPostRequest) Mssuperscope(mssuperscope Mssuperscope) MssuperscopeAPIPostRequest {
	r.mssuperscope = &mssuperscope
	return r
}

// Enter the field names followed by comma
func (r MssuperscopeAPIPostRequest) ReturnFields(returnFields string) MssuperscopeAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MssuperscopeAPIPostRequest) ReturnFields2(returnFields2 string) MssuperscopeAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MssuperscopeAPIPostRequest) ReturnAsObject(returnAsObject int32) MssuperscopeAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MssuperscopeAPIPostRequest) Execute() (*CreateMssuperscopeResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a mssuperscope object

Creates a new mssuperscope object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MssuperscopeAPIPostRequest
*/
func (a *MssuperscopeAPIService) Post(ctx context.Context) MssuperscopeAPIPostRequest {
	return MssuperscopeAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMssuperscopeResponse
func (a *MssuperscopeAPIService) PostExecute(r MssuperscopeAPIPostRequest) (*CreateMssuperscopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMssuperscopeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MssuperscopeAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/mssuperscope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mssuperscope == nil {
		return localVarReturnValue, nil, internal.ReportError("mssuperscope is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.mssuperscope != nil {
		if r.mssuperscope.Extattrs == nil {
			r.mssuperscope.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.mssuperscope.Extattrs)[k]; !ok {
				(*r.mssuperscope.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.mssuperscope
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MssuperscopeAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService MssuperscopeAPI
	reference  string
}

func (r MssuperscopeAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a mssuperscope object

Deletes a specific mssuperscope object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the mssuperscope object
	@return MssuperscopeAPIReferenceDeleteRequest
*/
func (a *MssuperscopeAPIService) ReferenceDelete(ctx context.Context, reference string) MssuperscopeAPIReferenceDeleteRequest {
	return MssuperscopeAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MssuperscopeAPIService) ReferenceDeleteExecute(r MssuperscopeAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MssuperscopeAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/mssuperscope/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MssuperscopeAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     MssuperscopeAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r MssuperscopeAPIReferenceGetRequest) ReturnFields(returnFields string) MssuperscopeAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MssuperscopeAPIReferenceGetRequest) ReturnFields2(returnFields2 string) MssuperscopeAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MssuperscopeAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) MssuperscopeAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MssuperscopeAPIReferenceGetRequest) Execute() (*GetMssuperscopeResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific mssuperscope object

Returns a specific mssuperscope object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the mssuperscope object
	@return MssuperscopeAPIReferenceGetRequest
*/
func (a *MssuperscopeAPIService) ReferenceGet(ctx context.Context, reference string) MssuperscopeAPIReferenceGetRequest {
	return MssuperscopeAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMssuperscopeResponse
func (a *MssuperscopeAPIService) ReferenceGetExecute(r MssuperscopeAPIReferenceGetRequest) (*GetMssuperscopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMssuperscopeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MssuperscopeAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/mssuperscope/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MssuperscopeAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     MssuperscopeAPI
	reference      string
	mssuperscope   *Mssuperscope
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r MssuperscopeAPIReferencePutRequest) Mssuperscope(mssuperscope Mssuperscope) MssuperscopeAPIReferencePutRequest {
	r.mssuperscope = &mssuperscope
	return r
}

// Enter the field names followed by comma
func (r MssuperscopeAPIReferencePutRequest) ReturnFields(returnFields string) MssuperscopeAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MssuperscopeAPIReferencePutRequest) ReturnFields2(returnFields2 string) MssuperscopeAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r MssuperscopeAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) MssuperscopeAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MssuperscopeAPIReferencePutRequest) Execute() (*UpdateMssuperscopeResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a mssuperscope object

Updates a specific mssuperscope object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the mssuperscope object
	@return MssuperscopeAPIReferencePutRequest
*/
func (a *MssuperscopeAPIService) ReferencePut(ctx context.Context, reference string) MssuperscopeAPIReferencePutRequest {
	return MssuperscopeAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMssuperscopeResponse
func (a *MssuperscopeAPIService) ReferencePutExecute(r MssuperscopeAPIReferencePutRequest) (*UpdateMssuperscopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMssuperscopeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MssuperscopeAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/mssuperscope/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mssuperscope == nil {
		return localVarReturnValue, nil, internal.ReportError("mssuperscope is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.mssuperscope != nil {
		if r.mssuperscope.Extattrs == nil {
			r.mssuperscope.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.mssuperscope.Extattrs)[k]; !ok {
				(*r.mssuperscope.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.mssuperscope
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
