/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// CreateRangetemplateResponse - struct for CreateRangetemplateResponse
type CreateRangetemplateResponse struct {
	CreateRangetemplateResponseAsObject *CreateRangetemplateResponseAsObject
	String                              *string
}

// CreateRangetemplateResponseAsObjectAsCreateRangetemplateResponse is a convenience function that returns CreateRangetemplateResponseAsObject wrapped in CreateRangetemplateResponse
func CreateRangetemplateResponseAsObjectAsCreateRangetemplateResponse(v *CreateRangetemplateResponseAsObject) CreateRangetemplateResponse {
	return CreateRangetemplateResponse{
		CreateRangetemplateResponseAsObject: v,
	}
}

// stringAsCreateRangetemplateResponse is a convenience function that returns string wrapped in CreateRangetemplateResponse
func StringAsCreateRangetemplateResponse(v *string) CreateRangetemplateResponse {
	return CreateRangetemplateResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRangetemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRangetemplateResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRangetemplateResponseAsObject)
	if err == nil {
		jsonCreateRangetemplateResponseAsObject, _ := json.Marshal(dst.CreateRangetemplateResponseAsObject)
		if string(jsonCreateRangetemplateResponseAsObject) == "{}" { // empty struct
			dst.CreateRangetemplateResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRangetemplateResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRangetemplateResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRangetemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRangetemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRangetemplateResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRangetemplateResponseAsObject != nil {
		return json.Marshal(&src.CreateRangetemplateResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRangetemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRangetemplateResponseAsObject != nil {
		return obj.CreateRangetemplateResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRangetemplateResponse struct {
	value *CreateRangetemplateResponse
	isSet bool
}

func (v NullableCreateRangetemplateResponse) Get() *CreateRangetemplateResponse {
	return v.value
}

func (v *NullableCreateRangetemplateResponse) Set(val *CreateRangetemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRangetemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRangetemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRangetemplateResponse(val *CreateRangetemplateResponse) *NullableCreateRangetemplateResponse {
	return &NullableCreateRangetemplateResponse{value: val, isSet: true}
}

func (v NullableCreateRangetemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRangetemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
