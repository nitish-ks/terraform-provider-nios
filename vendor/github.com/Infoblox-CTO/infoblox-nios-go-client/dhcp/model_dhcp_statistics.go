/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the DhcpStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpStatistics{}

// DhcpStatistics struct for DhcpStatistics
type DhcpStatistics struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The percentage of the total DHCP utilization of DHCP objects multiplied by 1000. This is the percentage of the total number of available IP addresses belonging to the object versus the total number of all IP addresses in object.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
	// A string describing the utilization level of the DHCP object.
	DhcpUtilizationStatus *string `json:"dhcp_utilization_status,omitempty"`
	// The total number of DHCP leases issued for the DHCP object.
	DynamicHosts *int64 `json:"dynamic_hosts,omitempty"`
	// The number of static DHCP addresses configured in the DHCP object.
	StaticHosts *int64 `json:"static_hosts,omitempty"`
	// The total number of DHCP addresses configured in the DHCP object.
	TotalHosts *int64 `json:"total_hosts,omitempty"`
}

// NewDhcpStatistics instantiates a new DhcpStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpStatistics() *DhcpStatistics {
	this := DhcpStatistics{}
	return &this
}

// NewDhcpStatisticsWithDefaults instantiates a new DhcpStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpStatisticsWithDefaults() *DhcpStatistics {
	this := DhcpStatistics{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DhcpStatistics) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DhcpStatistics) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DhcpStatistics) SetRef(v string) {
	o.Ref = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *DhcpStatistics) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *DhcpStatistics) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *DhcpStatistics) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

// GetDhcpUtilizationStatus returns the DhcpUtilizationStatus field value if set, zero value otherwise.
func (o *DhcpStatistics) GetDhcpUtilizationStatus() string {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		var ret string
		return ret
	}
	return *o.DhcpUtilizationStatus
}

// GetDhcpUtilizationStatusOk returns a tuple with the DhcpUtilizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetDhcpUtilizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		return nil, false
	}
	return o.DhcpUtilizationStatus, true
}

// HasDhcpUtilizationStatus returns a boolean if a field has been set.
func (o *DhcpStatistics) HasDhcpUtilizationStatus() bool {
	if o != nil && !IsNil(o.DhcpUtilizationStatus) {
		return true
	}

	return false
}

// SetDhcpUtilizationStatus gets a reference to the given string and assigns it to the DhcpUtilizationStatus field.
func (o *DhcpStatistics) SetDhcpUtilizationStatus(v string) {
	o.DhcpUtilizationStatus = &v
}

// GetDynamicHosts returns the DynamicHosts field value if set, zero value otherwise.
func (o *DhcpStatistics) GetDynamicHosts() int64 {
	if o == nil || IsNil(o.DynamicHosts) {
		var ret int64
		return ret
	}
	return *o.DynamicHosts
}

// GetDynamicHostsOk returns a tuple with the DynamicHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetDynamicHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.DynamicHosts) {
		return nil, false
	}
	return o.DynamicHosts, true
}

// HasDynamicHosts returns a boolean if a field has been set.
func (o *DhcpStatistics) HasDynamicHosts() bool {
	if o != nil && !IsNil(o.DynamicHosts) {
		return true
	}

	return false
}

// SetDynamicHosts gets a reference to the given int64 and assigns it to the DynamicHosts field.
func (o *DhcpStatistics) SetDynamicHosts(v int64) {
	o.DynamicHosts = &v
}

// GetStaticHosts returns the StaticHosts field value if set, zero value otherwise.
func (o *DhcpStatistics) GetStaticHosts() int64 {
	if o == nil || IsNil(o.StaticHosts) {
		var ret int64
		return ret
	}
	return *o.StaticHosts
}

// GetStaticHostsOk returns a tuple with the StaticHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetStaticHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.StaticHosts) {
		return nil, false
	}
	return o.StaticHosts, true
}

// HasStaticHosts returns a boolean if a field has been set.
func (o *DhcpStatistics) HasStaticHosts() bool {
	if o != nil && !IsNil(o.StaticHosts) {
		return true
	}

	return false
}

// SetStaticHosts gets a reference to the given int64 and assigns it to the StaticHosts field.
func (o *DhcpStatistics) SetStaticHosts(v int64) {
	o.StaticHosts = &v
}

// GetTotalHosts returns the TotalHosts field value if set, zero value otherwise.
func (o *DhcpStatistics) GetTotalHosts() int64 {
	if o == nil || IsNil(o.TotalHosts) {
		var ret int64
		return ret
	}
	return *o.TotalHosts
}

// GetTotalHostsOk returns a tuple with the TotalHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatistics) GetTotalHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHosts) {
		return nil, false
	}
	return o.TotalHosts, true
}

// HasTotalHosts returns a boolean if a field has been set.
func (o *DhcpStatistics) HasTotalHosts() bool {
	if o != nil && !IsNil(o.TotalHosts) {
		return true
	}

	return false
}

// SetTotalHosts gets a reference to the given int64 and assigns it to the TotalHosts field.
func (o *DhcpStatistics) SetTotalHosts(v int64) {
	o.TotalHosts = &v
}

func (o DhcpStatistics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DhcpUtilizationStatus) {
		toSerialize["dhcp_utilization_status"] = o.DhcpUtilizationStatus
	}
	if !IsNil(o.DynamicHosts) {
		toSerialize["dynamic_hosts"] = o.DynamicHosts
	}
	if !IsNil(o.StaticHosts) {
		toSerialize["static_hosts"] = o.StaticHosts
	}
	if !IsNil(o.TotalHosts) {
		toSerialize["total_hosts"] = o.TotalHosts
	}
	return toSerialize, nil
}

type NullableDhcpStatistics struct {
	value *DhcpStatistics
	isSet bool
}

func (v NullableDhcpStatistics) Get() *DhcpStatistics {
	return v.value
}

func (v *NullableDhcpStatistics) Set(val *DhcpStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpStatistics(val *DhcpStatistics) *NullableDhcpStatistics {
	return &NullableDhcpStatistics{value: val, isSet: true}
}

func (v NullableDhcpStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
