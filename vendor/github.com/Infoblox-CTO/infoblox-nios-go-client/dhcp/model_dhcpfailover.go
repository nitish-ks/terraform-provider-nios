/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Dhcpfailover type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dhcpfailover{}

// Dhcpfailover struct for Dhcpfailover
type Dhcpfailover struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The value indicating whether the failover assoctaion is Microsoft or Grid based. This is a read-only attribute.
	AssociationType *string `json:"association_type,omitempty"`
	// A descriptive comment about a DHCP failover object.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Determines the TCP port on which the server should listen for connections from its failover peer. Valid values are between 1 and 63999.
	FailoverPort *int64 `json:"failover_port,omitempty"`
	// A load balancing split value of a DHCP failover object. Specify the value of the maximum load balancing delay in a 8-bit integer format (range from 0 to 256).
	LoadBalanceSplit *int64 `json:"load_balance_split,omitempty"`
	// The maximum client lead time value of a DHCP failover object. Specify the value of the maximum client lead time in a 32-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. Valid values are between 1 and 4294967295.
	MaxClientLeadTime *int64 `json:"max_client_lead_time,omitempty"`
	// The maximum load balancing delay value of a DHCP failover object. Specify the value of the maximum load balancing delay in a 32-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. Valid values are between 1 and 4294967295.
	MaxLoadBalanceDelay *int64 `json:"max_load_balance_delay,omitempty"`
	// The maximum response delay value of a DHCP failover object. Specify the value of the maximum response delay in a 32-bit integer format (range from 0 to 4294967295) that represents the duration in seconds. Valid values are between 1 and 4294967295.
	MaxResponseDelay *int64 `json:"max_response_delay,omitempty"`
	// The maximum number of unacked updates value of a DHCP failover object. Specify the value of the maximum number of unacked updates in a 32-bit integer format (range from 0 to 4294967295) that represents the number of messages. Valid values are between 1 and 4294967295.
	MaxUnackedUpdates *int64 `json:"max_unacked_updates,omitempty"`
	// The value that indicates whether the failover association is read-write or read-only. This is a read-only attribute.
	MsAssociationMode *string `json:"ms_association_mode,omitempty"`
	// Determines if the authentication for the failover association is enabled or not.
	MsEnableAuthentication *bool `json:"ms_enable_authentication,omitempty"`
	// Determines if the switchover interval is enabled or not.
	MsEnableSwitchoverInterval *bool `json:"ms_enable_switchover_interval,omitempty"`
	// The mode for the failover association.
	MsFailoverMode *string `json:"ms_failover_mode,omitempty"`
	// Failover partner defined in the association with the Microsoft Server.
	MsFailoverPartner *string `json:"ms_failover_partner,omitempty"`
	// The partner role in the case of HotStandby.
	MsHotstandbyPartnerRole *string `json:"ms_hotstandby_partner_role,omitempty"`
	// Determines if the matching Microsfot failover association (if any) is in synchronization (False) or not (True). If there is no matching failover association the returned values is False. This is a read-only attribute.
	MsIsConflict *bool `json:"ms_is_conflict,omitempty"`
	// The previous failover association state. This is a read-only attribute.
	MsPreviousState *string `json:"ms_previous_state,omitempty"`
	// The primary Microsoft Server.
	MsServer *string `json:"ms_server,omitempty"`
	// The failover association authentication. This is a write-only attribute.
	MsSharedSecret *string `json:"ms_shared_secret,omitempty"`
	// The failover association state. This is a read-only attribute.
	MsState *string `json:"ms_state,omitempty"`
	// The time (in seconds) that DHCPv4 server will wait before transitioning the server from the COMMUNICATION-INT state to PARTNER-DOWN state.
	MsSwitchoverInterval *int64 `json:"ms_switchover_interval,omitempty"`
	// The name of a DHCP failover object.
	Name *string `json:"name,omitempty"`
	// The primary server of a DHCP failover object.
	Primary *string `json:"primary,omitempty"`
	// The type of the primary server of DHCP Failover association object.
	PrimaryServerType *string `json:"primary_server_type,omitempty"`
	// The primary server status of a DHCP failover object.
	PrimaryState *string `json:"primary_state,omitempty"`
	// Determines if the leases are kept in recycle bin until one week after expiration or not.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// The secondary server of a DHCP failover object.
	Secondary *string `json:"secondary,omitempty"`
	// The type of the secondary server of DHCP Failover association object.
	SecondaryServerType *string `json:"secondary_server_type,omitempty"`
	// The secondary server status of a DHCP failover object.
	SecondaryState *string `json:"secondary_state,omitempty"`
	// Use flag for: failover_port
	UseFailoverPort *bool `json:"use_failover_port,omitempty"`
	// Use flag for: ms_switchover_interval
	UseMsSwitchoverInterval *bool `json:"use_ms_switchover_interval,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
}

// NewDhcpfailover instantiates a new Dhcpfailover object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpfailover() *Dhcpfailover {
	this := Dhcpfailover{}
	return &this
}

// NewDhcpfailoverWithDefaults instantiates a new Dhcpfailover object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpfailoverWithDefaults() *Dhcpfailover {
	this := Dhcpfailover{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dhcpfailover) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dhcpfailover) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dhcpfailover) SetRef(v string) {
	o.Ref = &v
}

// GetAssociationType returns the AssociationType field value if set, zero value otherwise.
func (o *Dhcpfailover) GetAssociationType() string {
	if o == nil || IsNil(o.AssociationType) {
		var ret string
		return ret
	}
	return *o.AssociationType
}

// GetAssociationTypeOk returns a tuple with the AssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetAssociationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssociationType) {
		return nil, false
	}
	return o.AssociationType, true
}

// HasAssociationType returns a boolean if a field has been set.
func (o *Dhcpfailover) HasAssociationType() bool {
	if o != nil && !IsNil(o.AssociationType) {
		return true
	}

	return false
}

// SetAssociationType gets a reference to the given string and assigns it to the AssociationType field.
func (o *Dhcpfailover) SetAssociationType(v string) {
	o.AssociationType = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Dhcpfailover) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Dhcpfailover) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Dhcpfailover) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Dhcpfailover) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Dhcpfailover) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Dhcpfailover) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFailoverPort returns the FailoverPort field value if set, zero value otherwise.
func (o *Dhcpfailover) GetFailoverPort() int64 {
	if o == nil || IsNil(o.FailoverPort) {
		var ret int64
		return ret
	}
	return *o.FailoverPort
}

// GetFailoverPortOk returns a tuple with the FailoverPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetFailoverPortOk() (*int64, bool) {
	if o == nil || IsNil(o.FailoverPort) {
		return nil, false
	}
	return o.FailoverPort, true
}

// HasFailoverPort returns a boolean if a field has been set.
func (o *Dhcpfailover) HasFailoverPort() bool {
	if o != nil && !IsNil(o.FailoverPort) {
		return true
	}

	return false
}

// SetFailoverPort gets a reference to the given int64 and assigns it to the FailoverPort field.
func (o *Dhcpfailover) SetFailoverPort(v int64) {
	o.FailoverPort = &v
}

// GetLoadBalanceSplit returns the LoadBalanceSplit field value if set, zero value otherwise.
func (o *Dhcpfailover) GetLoadBalanceSplit() int64 {
	if o == nil || IsNil(o.LoadBalanceSplit) {
		var ret int64
		return ret
	}
	return *o.LoadBalanceSplit
}

// GetLoadBalanceSplitOk returns a tuple with the LoadBalanceSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetLoadBalanceSplitOk() (*int64, bool) {
	if o == nil || IsNil(o.LoadBalanceSplit) {
		return nil, false
	}
	return o.LoadBalanceSplit, true
}

// HasLoadBalanceSplit returns a boolean if a field has been set.
func (o *Dhcpfailover) HasLoadBalanceSplit() bool {
	if o != nil && !IsNil(o.LoadBalanceSplit) {
		return true
	}

	return false
}

// SetLoadBalanceSplit gets a reference to the given int64 and assigns it to the LoadBalanceSplit field.
func (o *Dhcpfailover) SetLoadBalanceSplit(v int64) {
	o.LoadBalanceSplit = &v
}

// GetMaxClientLeadTime returns the MaxClientLeadTime field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMaxClientLeadTime() int64 {
	if o == nil || IsNil(o.MaxClientLeadTime) {
		var ret int64
		return ret
	}
	return *o.MaxClientLeadTime
}

// GetMaxClientLeadTimeOk returns a tuple with the MaxClientLeadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMaxClientLeadTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxClientLeadTime) {
		return nil, false
	}
	return o.MaxClientLeadTime, true
}

// HasMaxClientLeadTime returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMaxClientLeadTime() bool {
	if o != nil && !IsNil(o.MaxClientLeadTime) {
		return true
	}

	return false
}

// SetMaxClientLeadTime gets a reference to the given int64 and assigns it to the MaxClientLeadTime field.
func (o *Dhcpfailover) SetMaxClientLeadTime(v int64) {
	o.MaxClientLeadTime = &v
}

// GetMaxLoadBalanceDelay returns the MaxLoadBalanceDelay field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMaxLoadBalanceDelay() int64 {
	if o == nil || IsNil(o.MaxLoadBalanceDelay) {
		var ret int64
		return ret
	}
	return *o.MaxLoadBalanceDelay
}

// GetMaxLoadBalanceDelayOk returns a tuple with the MaxLoadBalanceDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMaxLoadBalanceDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxLoadBalanceDelay) {
		return nil, false
	}
	return o.MaxLoadBalanceDelay, true
}

// HasMaxLoadBalanceDelay returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMaxLoadBalanceDelay() bool {
	if o != nil && !IsNil(o.MaxLoadBalanceDelay) {
		return true
	}

	return false
}

// SetMaxLoadBalanceDelay gets a reference to the given int64 and assigns it to the MaxLoadBalanceDelay field.
func (o *Dhcpfailover) SetMaxLoadBalanceDelay(v int64) {
	o.MaxLoadBalanceDelay = &v
}

// GetMaxResponseDelay returns the MaxResponseDelay field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMaxResponseDelay() int64 {
	if o == nil || IsNil(o.MaxResponseDelay) {
		var ret int64
		return ret
	}
	return *o.MaxResponseDelay
}

// GetMaxResponseDelayOk returns a tuple with the MaxResponseDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMaxResponseDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxResponseDelay) {
		return nil, false
	}
	return o.MaxResponseDelay, true
}

// HasMaxResponseDelay returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMaxResponseDelay() bool {
	if o != nil && !IsNil(o.MaxResponseDelay) {
		return true
	}

	return false
}

// SetMaxResponseDelay gets a reference to the given int64 and assigns it to the MaxResponseDelay field.
func (o *Dhcpfailover) SetMaxResponseDelay(v int64) {
	o.MaxResponseDelay = &v
}

// GetMaxUnackedUpdates returns the MaxUnackedUpdates field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMaxUnackedUpdates() int64 {
	if o == nil || IsNil(o.MaxUnackedUpdates) {
		var ret int64
		return ret
	}
	return *o.MaxUnackedUpdates
}

// GetMaxUnackedUpdatesOk returns a tuple with the MaxUnackedUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMaxUnackedUpdatesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUnackedUpdates) {
		return nil, false
	}
	return o.MaxUnackedUpdates, true
}

// HasMaxUnackedUpdates returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMaxUnackedUpdates() bool {
	if o != nil && !IsNil(o.MaxUnackedUpdates) {
		return true
	}

	return false
}

// SetMaxUnackedUpdates gets a reference to the given int64 and assigns it to the MaxUnackedUpdates field.
func (o *Dhcpfailover) SetMaxUnackedUpdates(v int64) {
	o.MaxUnackedUpdates = &v
}

// GetMsAssociationMode returns the MsAssociationMode field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsAssociationMode() string {
	if o == nil || IsNil(o.MsAssociationMode) {
		var ret string
		return ret
	}
	return *o.MsAssociationMode
}

// GetMsAssociationModeOk returns a tuple with the MsAssociationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsAssociationModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsAssociationMode) {
		return nil, false
	}
	return o.MsAssociationMode, true
}

// HasMsAssociationMode returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsAssociationMode() bool {
	if o != nil && !IsNil(o.MsAssociationMode) {
		return true
	}

	return false
}

// SetMsAssociationMode gets a reference to the given string and assigns it to the MsAssociationMode field.
func (o *Dhcpfailover) SetMsAssociationMode(v string) {
	o.MsAssociationMode = &v
}

// GetMsEnableAuthentication returns the MsEnableAuthentication field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsEnableAuthentication() bool {
	if o == nil || IsNil(o.MsEnableAuthentication) {
		var ret bool
		return ret
	}
	return *o.MsEnableAuthentication
}

// GetMsEnableAuthenticationOk returns a tuple with the MsEnableAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsEnableAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.MsEnableAuthentication) {
		return nil, false
	}
	return o.MsEnableAuthentication, true
}

// HasMsEnableAuthentication returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsEnableAuthentication() bool {
	if o != nil && !IsNil(o.MsEnableAuthentication) {
		return true
	}

	return false
}

// SetMsEnableAuthentication gets a reference to the given bool and assigns it to the MsEnableAuthentication field.
func (o *Dhcpfailover) SetMsEnableAuthentication(v bool) {
	o.MsEnableAuthentication = &v
}

// GetMsEnableSwitchoverInterval returns the MsEnableSwitchoverInterval field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsEnableSwitchoverInterval() bool {
	if o == nil || IsNil(o.MsEnableSwitchoverInterval) {
		var ret bool
		return ret
	}
	return *o.MsEnableSwitchoverInterval
}

// GetMsEnableSwitchoverIntervalOk returns a tuple with the MsEnableSwitchoverInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsEnableSwitchoverIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.MsEnableSwitchoverInterval) {
		return nil, false
	}
	return o.MsEnableSwitchoverInterval, true
}

// HasMsEnableSwitchoverInterval returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsEnableSwitchoverInterval() bool {
	if o != nil && !IsNil(o.MsEnableSwitchoverInterval) {
		return true
	}

	return false
}

// SetMsEnableSwitchoverInterval gets a reference to the given bool and assigns it to the MsEnableSwitchoverInterval field.
func (o *Dhcpfailover) SetMsEnableSwitchoverInterval(v bool) {
	o.MsEnableSwitchoverInterval = &v
}

// GetMsFailoverMode returns the MsFailoverMode field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsFailoverMode() string {
	if o == nil || IsNil(o.MsFailoverMode) {
		var ret string
		return ret
	}
	return *o.MsFailoverMode
}

// GetMsFailoverModeOk returns a tuple with the MsFailoverMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsFailoverModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsFailoverMode) {
		return nil, false
	}
	return o.MsFailoverMode, true
}

// HasMsFailoverMode returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsFailoverMode() bool {
	if o != nil && !IsNil(o.MsFailoverMode) {
		return true
	}

	return false
}

// SetMsFailoverMode gets a reference to the given string and assigns it to the MsFailoverMode field.
func (o *Dhcpfailover) SetMsFailoverMode(v string) {
	o.MsFailoverMode = &v
}

// GetMsFailoverPartner returns the MsFailoverPartner field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsFailoverPartner() string {
	if o == nil || IsNil(o.MsFailoverPartner) {
		var ret string
		return ret
	}
	return *o.MsFailoverPartner
}

// GetMsFailoverPartnerOk returns a tuple with the MsFailoverPartner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsFailoverPartnerOk() (*string, bool) {
	if o == nil || IsNil(o.MsFailoverPartner) {
		return nil, false
	}
	return o.MsFailoverPartner, true
}

// HasMsFailoverPartner returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsFailoverPartner() bool {
	if o != nil && !IsNil(o.MsFailoverPartner) {
		return true
	}

	return false
}

// SetMsFailoverPartner gets a reference to the given string and assigns it to the MsFailoverPartner field.
func (o *Dhcpfailover) SetMsFailoverPartner(v string) {
	o.MsFailoverPartner = &v
}

// GetMsHotstandbyPartnerRole returns the MsHotstandbyPartnerRole field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsHotstandbyPartnerRole() string {
	if o == nil || IsNil(o.MsHotstandbyPartnerRole) {
		var ret string
		return ret
	}
	return *o.MsHotstandbyPartnerRole
}

// GetMsHotstandbyPartnerRoleOk returns a tuple with the MsHotstandbyPartnerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsHotstandbyPartnerRoleOk() (*string, bool) {
	if o == nil || IsNil(o.MsHotstandbyPartnerRole) {
		return nil, false
	}
	return o.MsHotstandbyPartnerRole, true
}

// HasMsHotstandbyPartnerRole returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsHotstandbyPartnerRole() bool {
	if o != nil && !IsNil(o.MsHotstandbyPartnerRole) {
		return true
	}

	return false
}

// SetMsHotstandbyPartnerRole gets a reference to the given string and assigns it to the MsHotstandbyPartnerRole field.
func (o *Dhcpfailover) SetMsHotstandbyPartnerRole(v string) {
	o.MsHotstandbyPartnerRole = &v
}

// GetMsIsConflict returns the MsIsConflict field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsIsConflict() bool {
	if o == nil || IsNil(o.MsIsConflict) {
		var ret bool
		return ret
	}
	return *o.MsIsConflict
}

// GetMsIsConflictOk returns a tuple with the MsIsConflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsIsConflictOk() (*bool, bool) {
	if o == nil || IsNil(o.MsIsConflict) {
		return nil, false
	}
	return o.MsIsConflict, true
}

// HasMsIsConflict returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsIsConflict() bool {
	if o != nil && !IsNil(o.MsIsConflict) {
		return true
	}

	return false
}

// SetMsIsConflict gets a reference to the given bool and assigns it to the MsIsConflict field.
func (o *Dhcpfailover) SetMsIsConflict(v bool) {
	o.MsIsConflict = &v
}

// GetMsPreviousState returns the MsPreviousState field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsPreviousState() string {
	if o == nil || IsNil(o.MsPreviousState) {
		var ret string
		return ret
	}
	return *o.MsPreviousState
}

// GetMsPreviousStateOk returns a tuple with the MsPreviousState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsPreviousStateOk() (*string, bool) {
	if o == nil || IsNil(o.MsPreviousState) {
		return nil, false
	}
	return o.MsPreviousState, true
}

// HasMsPreviousState returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsPreviousState() bool {
	if o != nil && !IsNil(o.MsPreviousState) {
		return true
	}

	return false
}

// SetMsPreviousState gets a reference to the given string and assigns it to the MsPreviousState field.
func (o *Dhcpfailover) SetMsPreviousState(v string) {
	o.MsPreviousState = &v
}

// GetMsServer returns the MsServer field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsServer() string {
	if o == nil || IsNil(o.MsServer) {
		var ret string
		return ret
	}
	return *o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsServerOk() (*string, bool) {
	if o == nil || IsNil(o.MsServer) {
		return nil, false
	}
	return o.MsServer, true
}

// HasMsServer returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsServer() bool {
	if o != nil && !IsNil(o.MsServer) {
		return true
	}

	return false
}

// SetMsServer gets a reference to the given string and assigns it to the MsServer field.
func (o *Dhcpfailover) SetMsServer(v string) {
	o.MsServer = &v
}

// GetMsSharedSecret returns the MsSharedSecret field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsSharedSecret() string {
	if o == nil || IsNil(o.MsSharedSecret) {
		var ret string
		return ret
	}
	return *o.MsSharedSecret
}

// GetMsSharedSecretOk returns a tuple with the MsSharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsSharedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.MsSharedSecret) {
		return nil, false
	}
	return o.MsSharedSecret, true
}

// HasMsSharedSecret returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsSharedSecret() bool {
	if o != nil && !IsNil(o.MsSharedSecret) {
		return true
	}

	return false
}

// SetMsSharedSecret gets a reference to the given string and assigns it to the MsSharedSecret field.
func (o *Dhcpfailover) SetMsSharedSecret(v string) {
	o.MsSharedSecret = &v
}

// GetMsState returns the MsState field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsState() string {
	if o == nil || IsNil(o.MsState) {
		var ret string
		return ret
	}
	return *o.MsState
}

// GetMsStateOk returns a tuple with the MsState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsStateOk() (*string, bool) {
	if o == nil || IsNil(o.MsState) {
		return nil, false
	}
	return o.MsState, true
}

// HasMsState returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsState() bool {
	if o != nil && !IsNil(o.MsState) {
		return true
	}

	return false
}

// SetMsState gets a reference to the given string and assigns it to the MsState field.
func (o *Dhcpfailover) SetMsState(v string) {
	o.MsState = &v
}

// GetMsSwitchoverInterval returns the MsSwitchoverInterval field value if set, zero value otherwise.
func (o *Dhcpfailover) GetMsSwitchoverInterval() int64 {
	if o == nil || IsNil(o.MsSwitchoverInterval) {
		var ret int64
		return ret
	}
	return *o.MsSwitchoverInterval
}

// GetMsSwitchoverIntervalOk returns a tuple with the MsSwitchoverInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetMsSwitchoverIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.MsSwitchoverInterval) {
		return nil, false
	}
	return o.MsSwitchoverInterval, true
}

// HasMsSwitchoverInterval returns a boolean if a field has been set.
func (o *Dhcpfailover) HasMsSwitchoverInterval() bool {
	if o != nil && !IsNil(o.MsSwitchoverInterval) {
		return true
	}

	return false
}

// SetMsSwitchoverInterval gets a reference to the given int64 and assigns it to the MsSwitchoverInterval field.
func (o *Dhcpfailover) SetMsSwitchoverInterval(v int64) {
	o.MsSwitchoverInterval = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dhcpfailover) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dhcpfailover) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dhcpfailover) SetName(v string) {
	o.Name = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *Dhcpfailover) GetPrimary() string {
	if o == nil || IsNil(o.Primary) {
		var ret string
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *Dhcpfailover) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given string and assigns it to the Primary field.
func (o *Dhcpfailover) SetPrimary(v string) {
	o.Primary = &v
}

// GetPrimaryServerType returns the PrimaryServerType field value if set, zero value otherwise.
func (o *Dhcpfailover) GetPrimaryServerType() string {
	if o == nil || IsNil(o.PrimaryServerType) {
		var ret string
		return ret
	}
	return *o.PrimaryServerType
}

// GetPrimaryServerTypeOk returns a tuple with the PrimaryServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetPrimaryServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryServerType) {
		return nil, false
	}
	return o.PrimaryServerType, true
}

// HasPrimaryServerType returns a boolean if a field has been set.
func (o *Dhcpfailover) HasPrimaryServerType() bool {
	if o != nil && !IsNil(o.PrimaryServerType) {
		return true
	}

	return false
}

// SetPrimaryServerType gets a reference to the given string and assigns it to the PrimaryServerType field.
func (o *Dhcpfailover) SetPrimaryServerType(v string) {
	o.PrimaryServerType = &v
}

// GetPrimaryState returns the PrimaryState field value if set, zero value otherwise.
func (o *Dhcpfailover) GetPrimaryState() string {
	if o == nil || IsNil(o.PrimaryState) {
		var ret string
		return ret
	}
	return *o.PrimaryState
}

// GetPrimaryStateOk returns a tuple with the PrimaryState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetPrimaryStateOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryState) {
		return nil, false
	}
	return o.PrimaryState, true
}

// HasPrimaryState returns a boolean if a field has been set.
func (o *Dhcpfailover) HasPrimaryState() bool {
	if o != nil && !IsNil(o.PrimaryState) {
		return true
	}

	return false
}

// SetPrimaryState gets a reference to the given string and assigns it to the PrimaryState field.
func (o *Dhcpfailover) SetPrimaryState(v string) {
	o.PrimaryState = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Dhcpfailover) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Dhcpfailover) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Dhcpfailover) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *Dhcpfailover) GetSecondary() string {
	if o == nil || IsNil(o.Secondary) {
		var ret string
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetSecondaryOk() (*string, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *Dhcpfailover) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given string and assigns it to the Secondary field.
func (o *Dhcpfailover) SetSecondary(v string) {
	o.Secondary = &v
}

// GetSecondaryServerType returns the SecondaryServerType field value if set, zero value otherwise.
func (o *Dhcpfailover) GetSecondaryServerType() string {
	if o == nil || IsNil(o.SecondaryServerType) {
		var ret string
		return ret
	}
	return *o.SecondaryServerType
}

// GetSecondaryServerTypeOk returns a tuple with the SecondaryServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetSecondaryServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryServerType) {
		return nil, false
	}
	return o.SecondaryServerType, true
}

// HasSecondaryServerType returns a boolean if a field has been set.
func (o *Dhcpfailover) HasSecondaryServerType() bool {
	if o != nil && !IsNil(o.SecondaryServerType) {
		return true
	}

	return false
}

// SetSecondaryServerType gets a reference to the given string and assigns it to the SecondaryServerType field.
func (o *Dhcpfailover) SetSecondaryServerType(v string) {
	o.SecondaryServerType = &v
}

// GetSecondaryState returns the SecondaryState field value if set, zero value otherwise.
func (o *Dhcpfailover) GetSecondaryState() string {
	if o == nil || IsNil(o.SecondaryState) {
		var ret string
		return ret
	}
	return *o.SecondaryState
}

// GetSecondaryStateOk returns a tuple with the SecondaryState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetSecondaryStateOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryState) {
		return nil, false
	}
	return o.SecondaryState, true
}

// HasSecondaryState returns a boolean if a field has been set.
func (o *Dhcpfailover) HasSecondaryState() bool {
	if o != nil && !IsNil(o.SecondaryState) {
		return true
	}

	return false
}

// SetSecondaryState gets a reference to the given string and assigns it to the SecondaryState field.
func (o *Dhcpfailover) SetSecondaryState(v string) {
	o.SecondaryState = &v
}

// GetUseFailoverPort returns the UseFailoverPort field value if set, zero value otherwise.
func (o *Dhcpfailover) GetUseFailoverPort() bool {
	if o == nil || IsNil(o.UseFailoverPort) {
		var ret bool
		return ret
	}
	return *o.UseFailoverPort
}

// GetUseFailoverPortOk returns a tuple with the UseFailoverPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetUseFailoverPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFailoverPort) {
		return nil, false
	}
	return o.UseFailoverPort, true
}

// HasUseFailoverPort returns a boolean if a field has been set.
func (o *Dhcpfailover) HasUseFailoverPort() bool {
	if o != nil && !IsNil(o.UseFailoverPort) {
		return true
	}

	return false
}

// SetUseFailoverPort gets a reference to the given bool and assigns it to the UseFailoverPort field.
func (o *Dhcpfailover) SetUseFailoverPort(v bool) {
	o.UseFailoverPort = &v
}

// GetUseMsSwitchoverInterval returns the UseMsSwitchoverInterval field value if set, zero value otherwise.
func (o *Dhcpfailover) GetUseMsSwitchoverInterval() bool {
	if o == nil || IsNil(o.UseMsSwitchoverInterval) {
		var ret bool
		return ret
	}
	return *o.UseMsSwitchoverInterval
}

// GetUseMsSwitchoverIntervalOk returns a tuple with the UseMsSwitchoverInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetUseMsSwitchoverIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMsSwitchoverInterval) {
		return nil, false
	}
	return o.UseMsSwitchoverInterval, true
}

// HasUseMsSwitchoverInterval returns a boolean if a field has been set.
func (o *Dhcpfailover) HasUseMsSwitchoverInterval() bool {
	if o != nil && !IsNil(o.UseMsSwitchoverInterval) {
		return true
	}

	return false
}

// SetUseMsSwitchoverInterval gets a reference to the given bool and assigns it to the UseMsSwitchoverInterval field.
func (o *Dhcpfailover) SetUseMsSwitchoverInterval(v bool) {
	o.UseMsSwitchoverInterval = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Dhcpfailover) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpfailover) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Dhcpfailover) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Dhcpfailover) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

func (o Dhcpfailover) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dhcpfailover) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AssociationType) {
		toSerialize["association_type"] = o.AssociationType
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FailoverPort) {
		toSerialize["failover_port"] = o.FailoverPort
	}
	if !IsNil(o.LoadBalanceSplit) {
		toSerialize["load_balance_split"] = o.LoadBalanceSplit
	}
	if !IsNil(o.MaxClientLeadTime) {
		toSerialize["max_client_lead_time"] = o.MaxClientLeadTime
	}
	if !IsNil(o.MaxLoadBalanceDelay) {
		toSerialize["max_load_balance_delay"] = o.MaxLoadBalanceDelay
	}
	if !IsNil(o.MaxResponseDelay) {
		toSerialize["max_response_delay"] = o.MaxResponseDelay
	}
	if !IsNil(o.MaxUnackedUpdates) {
		toSerialize["max_unacked_updates"] = o.MaxUnackedUpdates
	}
	if !IsNil(o.MsAssociationMode) {
		toSerialize["ms_association_mode"] = o.MsAssociationMode
	}
	if !IsNil(o.MsEnableAuthentication) {
		toSerialize["ms_enable_authentication"] = o.MsEnableAuthentication
	}
	if !IsNil(o.MsEnableSwitchoverInterval) {
		toSerialize["ms_enable_switchover_interval"] = o.MsEnableSwitchoverInterval
	}
	if !IsNil(o.MsFailoverMode) {
		toSerialize["ms_failover_mode"] = o.MsFailoverMode
	}
	if !IsNil(o.MsFailoverPartner) {
		toSerialize["ms_failover_partner"] = o.MsFailoverPartner
	}
	if !IsNil(o.MsHotstandbyPartnerRole) {
		toSerialize["ms_hotstandby_partner_role"] = o.MsHotstandbyPartnerRole
	}
	if !IsNil(o.MsIsConflict) {
		toSerialize["ms_is_conflict"] = o.MsIsConflict
	}
	if !IsNil(o.MsPreviousState) {
		toSerialize["ms_previous_state"] = o.MsPreviousState
	}
	if !IsNil(o.MsServer) {
		toSerialize["ms_server"] = o.MsServer
	}
	if !IsNil(o.MsSharedSecret) {
		toSerialize["ms_shared_secret"] = o.MsSharedSecret
	}
	if !IsNil(o.MsState) {
		toSerialize["ms_state"] = o.MsState
	}
	if !IsNil(o.MsSwitchoverInterval) {
		toSerialize["ms_switchover_interval"] = o.MsSwitchoverInterval
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.PrimaryServerType) {
		toSerialize["primary_server_type"] = o.PrimaryServerType
	}
	if !IsNil(o.PrimaryState) {
		toSerialize["primary_state"] = o.PrimaryState
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}
	if !IsNil(o.SecondaryServerType) {
		toSerialize["secondary_server_type"] = o.SecondaryServerType
	}
	if !IsNil(o.SecondaryState) {
		toSerialize["secondary_state"] = o.SecondaryState
	}
	if !IsNil(o.UseFailoverPort) {
		toSerialize["use_failover_port"] = o.UseFailoverPort
	}
	if !IsNil(o.UseMsSwitchoverInterval) {
		toSerialize["use_ms_switchover_interval"] = o.UseMsSwitchoverInterval
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	return toSerialize, nil
}

type NullableDhcpfailover struct {
	value *Dhcpfailover
	isSet bool
}

func (v NullableDhcpfailover) Get() *Dhcpfailover {
	return v.value
}

func (v *NullableDhcpfailover) Set(val *Dhcpfailover) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpfailover) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpfailover) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpfailover(val *Dhcpfailover) *NullableDhcpfailover {
	return &NullableDhcpfailover{value: val, isSet: true}
}

func (v NullableDhcpfailover) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpfailover) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
