/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Dhcpoptiondefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dhcpoptiondefinition{}

// Dhcpoptiondefinition struct for Dhcpoptiondefinition
type Dhcpoptiondefinition struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The code of a DHCP option definition object. An option code number is used to identify the DHCP option.
	Code *int64 `json:"code,omitempty"`
	// The name of a DHCP option definition object.
	Name *string `json:"name,omitempty"`
	// The space of a DHCP option definition object.
	Space *string `json:"space,omitempty"`
	// The data type of the Grid DHCP option.
	Type *string `json:"type,omitempty"`
}

// NewDhcpoptiondefinition instantiates a new Dhcpoptiondefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpoptiondefinition() *Dhcpoptiondefinition {
	this := Dhcpoptiondefinition{}
	return &this
}

// NewDhcpoptiondefinitionWithDefaults instantiates a new Dhcpoptiondefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpoptiondefinitionWithDefaults() *Dhcpoptiondefinition {
	this := Dhcpoptiondefinition{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dhcpoptiondefinition) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpoptiondefinition) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dhcpoptiondefinition) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dhcpoptiondefinition) SetRef(v string) {
	o.Ref = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Dhcpoptiondefinition) GetCode() int64 {
	if o == nil || IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpoptiondefinition) GetCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Dhcpoptiondefinition) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *Dhcpoptiondefinition) SetCode(v int64) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dhcpoptiondefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpoptiondefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dhcpoptiondefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dhcpoptiondefinition) SetName(v string) {
	o.Name = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *Dhcpoptiondefinition) GetSpace() string {
	if o == nil || IsNil(o.Space) {
		var ret string
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpoptiondefinition) GetSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *Dhcpoptiondefinition) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given string and assigns it to the Space field.
func (o *Dhcpoptiondefinition) SetSpace(v string) {
	o.Space = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Dhcpoptiondefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dhcpoptiondefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Dhcpoptiondefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Dhcpoptiondefinition) SetType(v string) {
	o.Type = &v
}

func (o Dhcpoptiondefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dhcpoptiondefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDhcpoptiondefinition struct {
	value *Dhcpoptiondefinition
	isSet bool
}

func (v NullableDhcpoptiondefinition) Get() *Dhcpoptiondefinition {
	return v.value
}

func (v *NullableDhcpoptiondefinition) Set(val *Dhcpoptiondefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpoptiondefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpoptiondefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpoptiondefinition(val *Dhcpoptiondefinition) *NullableDhcpoptiondefinition {
	return &NullableDhcpoptiondefinition{value: val, isSet: true}
}

func (v NullableDhcpoptiondefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpoptiondefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
