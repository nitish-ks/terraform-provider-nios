/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Filterfingerprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filterfingerprint{}

// Filterfingerprint struct for Filterfingerprint
type Filterfingerprint struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of DHCP Fingerprint objects.
	Fingerprint []string `json:"fingerprint,omitempty"`
	// The name of a DHCP Fingerprint Filter object.
	Name *string `json:"name,omitempty"`
}

// NewFilterfingerprint instantiates a new Filterfingerprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterfingerprint() *Filterfingerprint {
	this := Filterfingerprint{}
	return &this
}

// NewFilterfingerprintWithDefaults instantiates a new Filterfingerprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterfingerprintWithDefaults() *Filterfingerprint {
	this := Filterfingerprint{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Filterfingerprint) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filterfingerprint) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Filterfingerprint) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Filterfingerprint) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Filterfingerprint) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filterfingerprint) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Filterfingerprint) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Filterfingerprint) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Filterfingerprint) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filterfingerprint) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Filterfingerprint) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Filterfingerprint) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *Filterfingerprint) GetFingerprint() []string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret []string
		return ret
	}
	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filterfingerprint) GetFingerprintOk() ([]string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Filterfingerprint) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given []string and assigns it to the Fingerprint field.
func (o *Filterfingerprint) SetFingerprint(v []string) {
	o.Fingerprint = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Filterfingerprint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filterfingerprint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Filterfingerprint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Filterfingerprint) SetName(v string) {
	o.Name = &v
}

func (o Filterfingerprint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filterfingerprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFilterfingerprint struct {
	value *Filterfingerprint
	isSet bool
}

func (v NullableFilterfingerprint) Get() *Filterfingerprint {
	return v.value
}

func (v *NullableFilterfingerprint) Set(val *Filterfingerprint) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterfingerprint) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterfingerprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterfingerprint(val *Filterfingerprint) *NullableFilterfingerprint {
	return &NullableFilterfingerprint{value: val, isSet: true}
}

func (v NullableFilterfingerprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterfingerprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
