/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Filtermac type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filtermac{}

// Filtermac struct for Filtermac
type Filtermac struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The descriptive comment of a DHCP MAC Filter object.
	Comment *string `json:"comment,omitempty"`
	// The default MAC expiration time of the DHCP MAC Address Filter object. By default, the MAC address filter never expires; otherwise, it is the absolute interval when the MAC address filter expires. The maximum value can extend up to 4294967295 secs. The minimum value is 60 secs (1 min).
	DefaultMacAddressExpiration *int64 `json:"default_mac_address_expiration,omitempty"`
	// Determines if the DHCP Fingerprint object is disabled or not.
	Disable *bool `json:"disable,omitempty"`
	// The flag to enforce MAC address expiration of the DHCP MAC Address Filter object.
	EnforceExpirationTimes *bool `json:"enforce_expiration_times,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The length of time the DHCP server leases an IP address to a client. The lease time applies to hosts that meet the filter criteria.
	LeaseTime *int64 `json:"lease_time,omitempty"`
	// The name of a DHCP MAC Filter object.
	Name *string `json:"name,omitempty"`
	// Determines if DHCP MAC Filter never expires or automatically expires.
	NeverExpires *bool `json:"never_expires,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []FiltermacOptions `json:"options,omitempty"`
	// This is reserved for writing comments related to the particular MAC address filter. The length of comment cannot exceed 1024 bytes.
	ReservedForInfoblox *string `json:"reserved_for_infoblox,omitempty"`
}

// NewFiltermac instantiates a new Filtermac object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltermac() *Filtermac {
	this := Filtermac{}
	return &this
}

// NewFiltermacWithDefaults instantiates a new Filtermac object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltermacWithDefaults() *Filtermac {
	this := Filtermac{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Filtermac) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Filtermac) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Filtermac) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Filtermac) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Filtermac) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Filtermac) SetComment(v string) {
	o.Comment = &v
}

// GetDefaultMacAddressExpiration returns the DefaultMacAddressExpiration field value if set, zero value otherwise.
func (o *Filtermac) GetDefaultMacAddressExpiration() int64 {
	if o == nil || IsNil(o.DefaultMacAddressExpiration) {
		var ret int64
		return ret
	}
	return *o.DefaultMacAddressExpiration
}

// GetDefaultMacAddressExpirationOk returns a tuple with the DefaultMacAddressExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetDefaultMacAddressExpirationOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultMacAddressExpiration) {
		return nil, false
	}
	return o.DefaultMacAddressExpiration, true
}

// HasDefaultMacAddressExpiration returns a boolean if a field has been set.
func (o *Filtermac) HasDefaultMacAddressExpiration() bool {
	if o != nil && !IsNil(o.DefaultMacAddressExpiration) {
		return true
	}

	return false
}

// SetDefaultMacAddressExpiration gets a reference to the given int64 and assigns it to the DefaultMacAddressExpiration field.
func (o *Filtermac) SetDefaultMacAddressExpiration(v int64) {
	o.DefaultMacAddressExpiration = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Filtermac) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Filtermac) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Filtermac) SetDisable(v bool) {
	o.Disable = &v
}

// GetEnforceExpirationTimes returns the EnforceExpirationTimes field value if set, zero value otherwise.
func (o *Filtermac) GetEnforceExpirationTimes() bool {
	if o == nil || IsNil(o.EnforceExpirationTimes) {
		var ret bool
		return ret
	}
	return *o.EnforceExpirationTimes
}

// GetEnforceExpirationTimesOk returns a tuple with the EnforceExpirationTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetEnforceExpirationTimesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceExpirationTimes) {
		return nil, false
	}
	return o.EnforceExpirationTimes, true
}

// HasEnforceExpirationTimes returns a boolean if a field has been set.
func (o *Filtermac) HasEnforceExpirationTimes() bool {
	if o != nil && !IsNil(o.EnforceExpirationTimes) {
		return true
	}

	return false
}

// SetEnforceExpirationTimes gets a reference to the given bool and assigns it to the EnforceExpirationTimes field.
func (o *Filtermac) SetEnforceExpirationTimes(v bool) {
	o.EnforceExpirationTimes = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Filtermac) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Filtermac) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Filtermac) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetLeaseTime returns the LeaseTime field value if set, zero value otherwise.
func (o *Filtermac) GetLeaseTime() int64 {
	if o == nil || IsNil(o.LeaseTime) {
		var ret int64
		return ret
	}
	return *o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseTime) {
		return nil, false
	}
	return o.LeaseTime, true
}

// HasLeaseTime returns a boolean if a field has been set.
func (o *Filtermac) HasLeaseTime() bool {
	if o != nil && !IsNil(o.LeaseTime) {
		return true
	}

	return false
}

// SetLeaseTime gets a reference to the given int64 and assigns it to the LeaseTime field.
func (o *Filtermac) SetLeaseTime(v int64) {
	o.LeaseTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Filtermac) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Filtermac) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Filtermac) SetName(v string) {
	o.Name = &v
}

// GetNeverExpires returns the NeverExpires field value if set, zero value otherwise.
func (o *Filtermac) GetNeverExpires() bool {
	if o == nil || IsNil(o.NeverExpires) {
		var ret bool
		return ret
	}
	return *o.NeverExpires
}

// GetNeverExpiresOk returns a tuple with the NeverExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetNeverExpiresOk() (*bool, bool) {
	if o == nil || IsNil(o.NeverExpires) {
		return nil, false
	}
	return o.NeverExpires, true
}

// HasNeverExpires returns a boolean if a field has been set.
func (o *Filtermac) HasNeverExpires() bool {
	if o != nil && !IsNil(o.NeverExpires) {
		return true
	}

	return false
}

// SetNeverExpires gets a reference to the given bool and assigns it to the NeverExpires field.
func (o *Filtermac) SetNeverExpires(v bool) {
	o.NeverExpires = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Filtermac) GetOptions() []FiltermacOptions {
	if o == nil || IsNil(o.Options) {
		var ret []FiltermacOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetOptionsOk() ([]FiltermacOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Filtermac) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []FiltermacOptions and assigns it to the Options field.
func (o *Filtermac) SetOptions(v []FiltermacOptions) {
	o.Options = v
}

// GetReservedForInfoblox returns the ReservedForInfoblox field value if set, zero value otherwise.
func (o *Filtermac) GetReservedForInfoblox() string {
	if o == nil || IsNil(o.ReservedForInfoblox) {
		var ret string
		return ret
	}
	return *o.ReservedForInfoblox
}

// GetReservedForInfobloxOk returns a tuple with the ReservedForInfoblox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filtermac) GetReservedForInfobloxOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedForInfoblox) {
		return nil, false
	}
	return o.ReservedForInfoblox, true
}

// HasReservedForInfoblox returns a boolean if a field has been set.
func (o *Filtermac) HasReservedForInfoblox() bool {
	if o != nil && !IsNil(o.ReservedForInfoblox) {
		return true
	}

	return false
}

// SetReservedForInfoblox gets a reference to the given string and assigns it to the ReservedForInfoblox field.
func (o *Filtermac) SetReservedForInfoblox(v string) {
	o.ReservedForInfoblox = &v
}

func (o Filtermac) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filtermac) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DefaultMacAddressExpiration) {
		toSerialize["default_mac_address_expiration"] = o.DefaultMacAddressExpiration
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.EnforceExpirationTimes) {
		toSerialize["enforce_expiration_times"] = o.EnforceExpirationTimes
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.LeaseTime) {
		toSerialize["lease_time"] = o.LeaseTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NeverExpires) {
		toSerialize["never_expires"] = o.NeverExpires
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ReservedForInfoblox) {
		toSerialize["reserved_for_infoblox"] = o.ReservedForInfoblox
	}
	return toSerialize, nil
}

type NullableFiltermac struct {
	value *Filtermac
	isSet bool
}

func (v NullableFiltermac) Get() *Filtermac {
	return v.value
}

func (v *NullableFiltermac) Set(val *Filtermac) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltermac) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltermac) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltermac(val *Filtermac) *NullableFiltermac {
	return &NullableFiltermac{value: val, isSet: true}
}

func (v NullableFiltermac) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltermac) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
