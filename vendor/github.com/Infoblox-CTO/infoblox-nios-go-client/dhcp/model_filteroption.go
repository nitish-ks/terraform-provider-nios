/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Filteroption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filteroption{}

// Filteroption struct for Filteroption
type Filteroption struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines if apply as class is enabled or not. If this flag is set to \"true\" the filter is treated as global DHCP class, e.g it is written to dhcpd config file even if it is not present in any DHCP range.
	ApplyAsClass *bool `json:"apply_as_class,omitempty"`
	// A name of boot file of a DHCP filter option object.
	Bootfile *string `json:"bootfile,omitempty"`
	// Determines the boot server of a DHCP filter option object. You can specify the name and/or IP address of the boot server that host needs to boot.
	Bootserver *string `json:"bootserver,omitempty"`
	// The descriptive comment of a DHCP filter option object.
	Comment *string `json:"comment,omitempty"`
	// The conditional expression of a DHCP filter option object.
	Expression *string `json:"expression,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Determines the lease time of a DHCP filter option object.
	LeaseTime *int64 `json:"lease_time,omitempty"`
	// The name of a DHCP option filter object.
	Name *string `json:"name,omitempty"`
	// Determines the next server of a DHCP filter option object. You can specify the name and/or IP address of the next server that the host needs to boot.
	NextServer *string `json:"next_server,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	OptionList []FilteroptionOptionList `json:"option_list,omitempty"`
	// The option space of a DHCP filter option object.
	OptionSpace *string `json:"option_space,omitempty"`
	// Determines the PXE (Preboot Execution Environment) lease time of a DHCP filter option object. To specify the duration of time it takes a host to connect to a boot server, such as a TFTP server, and download the file it needs to boot.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
}

// NewFilteroption instantiates a new Filteroption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilteroption() *Filteroption {
	this := Filteroption{}
	return &this
}

// NewFilteroptionWithDefaults instantiates a new Filteroption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilteroptionWithDefaults() *Filteroption {
	this := Filteroption{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Filteroption) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Filteroption) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Filteroption) SetRef(v string) {
	o.Ref = &v
}

// GetApplyAsClass returns the ApplyAsClass field value if set, zero value otherwise.
func (o *Filteroption) GetApplyAsClass() bool {
	if o == nil || IsNil(o.ApplyAsClass) {
		var ret bool
		return ret
	}
	return *o.ApplyAsClass
}

// GetApplyAsClassOk returns a tuple with the ApplyAsClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetApplyAsClassOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyAsClass) {
		return nil, false
	}
	return o.ApplyAsClass, true
}

// HasApplyAsClass returns a boolean if a field has been set.
func (o *Filteroption) HasApplyAsClass() bool {
	if o != nil && !IsNil(o.ApplyAsClass) {
		return true
	}

	return false
}

// SetApplyAsClass gets a reference to the given bool and assigns it to the ApplyAsClass field.
func (o *Filteroption) SetApplyAsClass(v bool) {
	o.ApplyAsClass = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Filteroption) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Filteroption) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Filteroption) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Filteroption) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Filteroption) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Filteroption) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Filteroption) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Filteroption) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Filteroption) SetComment(v string) {
	o.Comment = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Filteroption) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Filteroption) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Filteroption) SetExpression(v string) {
	o.Expression = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Filteroption) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Filteroption) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Filteroption) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetLeaseTime returns the LeaseTime field value if set, zero value otherwise.
func (o *Filteroption) GetLeaseTime() int64 {
	if o == nil || IsNil(o.LeaseTime) {
		var ret int64
		return ret
	}
	return *o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseTime) {
		return nil, false
	}
	return o.LeaseTime, true
}

// HasLeaseTime returns a boolean if a field has been set.
func (o *Filteroption) HasLeaseTime() bool {
	if o != nil && !IsNil(o.LeaseTime) {
		return true
	}

	return false
}

// SetLeaseTime gets a reference to the given int64 and assigns it to the LeaseTime field.
func (o *Filteroption) SetLeaseTime(v int64) {
	o.LeaseTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Filteroption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Filteroption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Filteroption) SetName(v string) {
	o.Name = &v
}

// GetNextServer returns the NextServer field value if set, zero value otherwise.
func (o *Filteroption) GetNextServer() string {
	if o == nil || IsNil(o.NextServer) {
		var ret string
		return ret
	}
	return *o.NextServer
}

// GetNextServerOk returns a tuple with the NextServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetNextServerOk() (*string, bool) {
	if o == nil || IsNil(o.NextServer) {
		return nil, false
	}
	return o.NextServer, true
}

// HasNextServer returns a boolean if a field has been set.
func (o *Filteroption) HasNextServer() bool {
	if o != nil && !IsNil(o.NextServer) {
		return true
	}

	return false
}

// SetNextServer gets a reference to the given string and assigns it to the NextServer field.
func (o *Filteroption) SetNextServer(v string) {
	o.NextServer = &v
}

// GetOptionList returns the OptionList field value if set, zero value otherwise.
func (o *Filteroption) GetOptionList() []FilteroptionOptionList {
	if o == nil || IsNil(o.OptionList) {
		var ret []FilteroptionOptionList
		return ret
	}
	return o.OptionList
}

// GetOptionListOk returns a tuple with the OptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetOptionListOk() ([]FilteroptionOptionList, bool) {
	if o == nil || IsNil(o.OptionList) {
		return nil, false
	}
	return o.OptionList, true
}

// HasOptionList returns a boolean if a field has been set.
func (o *Filteroption) HasOptionList() bool {
	if o != nil && !IsNil(o.OptionList) {
		return true
	}

	return false
}

// SetOptionList gets a reference to the given []FilteroptionOptionList and assigns it to the OptionList field.
func (o *Filteroption) SetOptionList(v []FilteroptionOptionList) {
	o.OptionList = v
}

// GetOptionSpace returns the OptionSpace field value if set, zero value otherwise.
func (o *Filteroption) GetOptionSpace() string {
	if o == nil || IsNil(o.OptionSpace) {
		var ret string
		return ret
	}
	return *o.OptionSpace
}

// GetOptionSpaceOk returns a tuple with the OptionSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetOptionSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.OptionSpace) {
		return nil, false
	}
	return o.OptionSpace, true
}

// HasOptionSpace returns a boolean if a field has been set.
func (o *Filteroption) HasOptionSpace() bool {
	if o != nil && !IsNil(o.OptionSpace) {
		return true
	}

	return false
}

// SetOptionSpace gets a reference to the given string and assigns it to the OptionSpace field.
func (o *Filteroption) SetOptionSpace(v string) {
	o.OptionSpace = &v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Filteroption) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filteroption) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Filteroption) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Filteroption) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

func (o Filteroption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filteroption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ApplyAsClass) {
		toSerialize["apply_as_class"] = o.ApplyAsClass
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.LeaseTime) {
		toSerialize["lease_time"] = o.LeaseTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextServer) {
		toSerialize["next_server"] = o.NextServer
	}
	if !IsNil(o.OptionList) {
		toSerialize["option_list"] = o.OptionList
	}
	if !IsNil(o.OptionSpace) {
		toSerialize["option_space"] = o.OptionSpace
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	return toSerialize, nil
}

type NullableFilteroption struct {
	value *Filteroption
	isSet bool
}

func (v NullableFilteroption) Get() *Filteroption {
	return v.value
}

func (v *NullableFilteroption) Set(val *Filteroption) {
	v.value = val
	v.isSet = true
}

func (v NullableFilteroption) IsSet() bool {
	return v.isSet
}

func (v *NullableFilteroption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilteroption(val *Filteroption) *NullableFilteroption {
	return &NullableFilteroption{value: val, isSet: true}
}

func (v NullableFilteroption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilteroption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
