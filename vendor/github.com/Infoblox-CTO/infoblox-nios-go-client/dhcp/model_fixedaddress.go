/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Fixedaddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fixedaddress{}

// Fixedaddress struct for Fixedaddress
type Fixedaddress struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The agent circuit ID for the fixed address.
	AgentCircuitId *string `json:"agent_circuit_id,omitempty"`
	// The agent remote ID for the fixed address.
	AgentRemoteId *string `json:"agent_remote_id,omitempty"`
	// This field controls whether the credential is used for both the Telnet and SSH credentials. If set to False, the credential is used only for SSH.
	AllowTelnet *bool `json:"allow_telnet,omitempty"`
	// This field controls whether only the DHCP server is allowed to update DNS, regardless of the DHCP client requests.
	AlwaysUpdateDns *bool `json:"always_update_dns,omitempty"`
	// The bootfile name for the fixed address. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the fixed address. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// The CLI credentials for the fixed address.
	CliCredentials []FixedaddressCliCredentials `json:"cli_credentials,omitempty"`
	// This field controls whether there is a prepend for the dhcp-client-identifier of a fixed address.
	ClientIdentifierPrependZero *bool                  `json:"client_identifier_prepend_zero,omitempty"`
	CloudInfo                   *FixedaddressCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the fixed address; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this fixed address.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// The DDNS host name for this fixed address.
	DdnsHostname *string `json:"ddns_hostname,omitempty"`
	// If set to true, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The description of the device.
	DeviceDescription *string `json:"device_description,omitempty"`
	// The location of the device.
	DeviceLocation *string `json:"device_location,omitempty"`
	// The type of the device.
	DeviceType *string `json:"device_type,omitempty"`
	// The vendor of the device.
	DeviceVendor *string `json:"device_vendor,omitempty"`
	// The DHCP client ID for the fixed address.
	DhcpClientIdentifier *string `json:"dhcp_client_identifier,omitempty"`
	// Determines whether a fixed address is disabled or not. When this is set to False, the fixed address is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines if the discovery for this fixed address is disabled or not. False means that the discovery is enabled.
	DisableDiscovery *bool `json:"disable_discovery,omitempty"`
	// The discovery status of this fixed address.
	DiscoverNowStatus *string                     `json:"discover_now_status,omitempty"`
	DiscoveredData    *FixedaddressDiscoveredData `json:"discovered_data,omitempty"`
	// The dynamic DNS updates flag of a DHCP Fixed Address object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if the discovery for the fixed address should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// The IPv4 Address of the fixed address.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// This flag reflects whether the MAC address for this fixed address is invalid.
	IsInvalidMac *bool `json:"is_invalid_mac,omitempty"`
	// This field contains the logic filters to be applied on the this fixed address. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []FixedaddressLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The MAC address value for this fixed address.
	Mac *string `json:"mac,omitempty"`
	// The match_client value for this fixed address. Valid values are: \"MAC_ADDRESS\": The fixed IP address is leased to the matching MAC address. \"CLIENT_ID\": The fixed IP address is leased to the matching DHCP client identifier. \"RESERVED\": The fixed IP address is reserved for later use with a MAC address that only has zeros. \"CIRCUIT_ID\": The fixed IP address is leased to the DHCP client with a matching circuit ID. Note that the \"agent_circuit_id\" field must be set in this case. \"REMOTE_ID\": The fixed IP address is leased to the DHCP client with a matching remote ID. Note that the \"agent_remote_id\" field must be set in this case.
	MatchClient  *string                   `json:"match_client,omitempty"`
	MsAdUserData *FixedaddressMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// This field contains the Microsoft DHCP options for this fixed address.
	MsOptions []FixedaddressMsOptions `json:"ms_options,omitempty"`
	MsServer  *FixedaddressMsServer   `json:"ms_server,omitempty"`
	// This field contains the name of this fixed address.
	Name *string `json:"name,omitempty"`
	// The network to which this fixed address belongs, in IPv4 Address/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which this fixed address resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The name in FQDN and/or IPv4 Address format of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []FixedaddressOptions `json:"options,omitempty"`
	// The PXE lease time value for a DHCP Fixed Address object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// The ref to the reserved interface to which the device belongs.
	ReservedInterface *string `json:"reserved_interface,omitempty"`
	// Restarts the member service. The restart_if_needed flag can trigger a restart on DHCP services only when it is enabled on CP member.
	RestartIfNeeded *bool                        `json:"restart_if_needed,omitempty"`
	Snmp3Credential *FixedaddressSnmp3Credential `json:"snmp3_credential,omitempty"`
	SnmpCredential  *FixedaddressSnmpCredential  `json:"snmp_credential,omitempty"`
	// If set on creation, the fixed address will be created according to the values specified in the named template.
	Template *string `json:"template,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// If set to true, the CLI credential will override member-level settings.
	UseCliCredentials *bool `json:"use_cli_credentials,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: ms_options
	UseMsOptions *bool `json:"use_ms_options,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Determines if the SNMPv3 credential should be used for the fixed address.
	UseSnmp3Credential *bool `json:"use_snmp3_credential,omitempty"`
	// If set to true, the SNMP credential will override member-level settings.
	UseSnmpCredential *bool `json:"use_snmp_credential,omitempty"`
}

// NewFixedaddress instantiates a new Fixedaddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedaddress() *Fixedaddress {
	this := Fixedaddress{}
	return &this
}

// NewFixedaddressWithDefaults instantiates a new Fixedaddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedaddressWithDefaults() *Fixedaddress {
	this := Fixedaddress{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Fixedaddress) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Fixedaddress) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Fixedaddress) SetRef(v string) {
	o.Ref = &v
}

// GetAgentCircuitId returns the AgentCircuitId field value if set, zero value otherwise.
func (o *Fixedaddress) GetAgentCircuitId() string {
	if o == nil || IsNil(o.AgentCircuitId) {
		var ret string
		return ret
	}
	return *o.AgentCircuitId
}

// GetAgentCircuitIdOk returns a tuple with the AgentCircuitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetAgentCircuitIdOk() (*string, bool) {
	if o == nil || IsNil(o.AgentCircuitId) {
		return nil, false
	}
	return o.AgentCircuitId, true
}

// HasAgentCircuitId returns a boolean if a field has been set.
func (o *Fixedaddress) HasAgentCircuitId() bool {
	if o != nil && !IsNil(o.AgentCircuitId) {
		return true
	}

	return false
}

// SetAgentCircuitId gets a reference to the given string and assigns it to the AgentCircuitId field.
func (o *Fixedaddress) SetAgentCircuitId(v string) {
	o.AgentCircuitId = &v
}

// GetAgentRemoteId returns the AgentRemoteId field value if set, zero value otherwise.
func (o *Fixedaddress) GetAgentRemoteId() string {
	if o == nil || IsNil(o.AgentRemoteId) {
		var ret string
		return ret
	}
	return *o.AgentRemoteId
}

// GetAgentRemoteIdOk returns a tuple with the AgentRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetAgentRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AgentRemoteId) {
		return nil, false
	}
	return o.AgentRemoteId, true
}

// HasAgentRemoteId returns a boolean if a field has been set.
func (o *Fixedaddress) HasAgentRemoteId() bool {
	if o != nil && !IsNil(o.AgentRemoteId) {
		return true
	}

	return false
}

// SetAgentRemoteId gets a reference to the given string and assigns it to the AgentRemoteId field.
func (o *Fixedaddress) SetAgentRemoteId(v string) {
	o.AgentRemoteId = &v
}

// GetAllowTelnet returns the AllowTelnet field value if set, zero value otherwise.
func (o *Fixedaddress) GetAllowTelnet() bool {
	if o == nil || IsNil(o.AllowTelnet) {
		var ret bool
		return ret
	}
	return *o.AllowTelnet
}

// GetAllowTelnetOk returns a tuple with the AllowTelnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetAllowTelnetOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTelnet) {
		return nil, false
	}
	return o.AllowTelnet, true
}

// HasAllowTelnet returns a boolean if a field has been set.
func (o *Fixedaddress) HasAllowTelnet() bool {
	if o != nil && !IsNil(o.AllowTelnet) {
		return true
	}

	return false
}

// SetAllowTelnet gets a reference to the given bool and assigns it to the AllowTelnet field.
func (o *Fixedaddress) SetAllowTelnet(v bool) {
	o.AllowTelnet = &v
}

// GetAlwaysUpdateDns returns the AlwaysUpdateDns field value if set, zero value otherwise.
func (o *Fixedaddress) GetAlwaysUpdateDns() bool {
	if o == nil || IsNil(o.AlwaysUpdateDns) {
		var ret bool
		return ret
	}
	return *o.AlwaysUpdateDns
}

// GetAlwaysUpdateDnsOk returns a tuple with the AlwaysUpdateDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetAlwaysUpdateDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.AlwaysUpdateDns) {
		return nil, false
	}
	return o.AlwaysUpdateDns, true
}

// HasAlwaysUpdateDns returns a boolean if a field has been set.
func (o *Fixedaddress) HasAlwaysUpdateDns() bool {
	if o != nil && !IsNil(o.AlwaysUpdateDns) {
		return true
	}

	return false
}

// SetAlwaysUpdateDns gets a reference to the given bool and assigns it to the AlwaysUpdateDns field.
func (o *Fixedaddress) SetAlwaysUpdateDns(v bool) {
	o.AlwaysUpdateDns = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Fixedaddress) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Fixedaddress) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Fixedaddress) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Fixedaddress) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Fixedaddress) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Fixedaddress) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCliCredentials returns the CliCredentials field value if set, zero value otherwise.
func (o *Fixedaddress) GetCliCredentials() []FixedaddressCliCredentials {
	if o == nil || IsNil(o.CliCredentials) {
		var ret []FixedaddressCliCredentials
		return ret
	}
	return o.CliCredentials
}

// GetCliCredentialsOk returns a tuple with the CliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetCliCredentialsOk() ([]FixedaddressCliCredentials, bool) {
	if o == nil || IsNil(o.CliCredentials) {
		return nil, false
	}
	return o.CliCredentials, true
}

// HasCliCredentials returns a boolean if a field has been set.
func (o *Fixedaddress) HasCliCredentials() bool {
	if o != nil && !IsNil(o.CliCredentials) {
		return true
	}

	return false
}

// SetCliCredentials gets a reference to the given []FixedaddressCliCredentials and assigns it to the CliCredentials field.
func (o *Fixedaddress) SetCliCredentials(v []FixedaddressCliCredentials) {
	o.CliCredentials = v
}

// GetClientIdentifierPrependZero returns the ClientIdentifierPrependZero field value if set, zero value otherwise.
func (o *Fixedaddress) GetClientIdentifierPrependZero() bool {
	if o == nil || IsNil(o.ClientIdentifierPrependZero) {
		var ret bool
		return ret
	}
	return *o.ClientIdentifierPrependZero
}

// GetClientIdentifierPrependZeroOk returns a tuple with the ClientIdentifierPrependZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetClientIdentifierPrependZeroOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientIdentifierPrependZero) {
		return nil, false
	}
	return o.ClientIdentifierPrependZero, true
}

// HasClientIdentifierPrependZero returns a boolean if a field has been set.
func (o *Fixedaddress) HasClientIdentifierPrependZero() bool {
	if o != nil && !IsNil(o.ClientIdentifierPrependZero) {
		return true
	}

	return false
}

// SetClientIdentifierPrependZero gets a reference to the given bool and assigns it to the ClientIdentifierPrependZero field.
func (o *Fixedaddress) SetClientIdentifierPrependZero(v bool) {
	o.ClientIdentifierPrependZero = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Fixedaddress) GetCloudInfo() FixedaddressCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret FixedaddressCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetCloudInfoOk() (*FixedaddressCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Fixedaddress) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given FixedaddressCloudInfo and assigns it to the CloudInfo field.
func (o *Fixedaddress) SetCloudInfo(v FixedaddressCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Fixedaddress) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Fixedaddress) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Fixedaddress) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Fixedaddress) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Fixedaddress) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Fixedaddress) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsHostname returns the DdnsHostname field value if set, zero value otherwise.
func (o *Fixedaddress) GetDdnsHostname() string {
	if o == nil || IsNil(o.DdnsHostname) {
		var ret string
		return ret
	}
	return *o.DdnsHostname
}

// GetDdnsHostnameOk returns a tuple with the DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDdnsHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsHostname) {
		return nil, false
	}
	return o.DdnsHostname, true
}

// HasDdnsHostname returns a boolean if a field has been set.
func (o *Fixedaddress) HasDdnsHostname() bool {
	if o != nil && !IsNil(o.DdnsHostname) {
		return true
	}

	return false
}

// SetDdnsHostname gets a reference to the given string and assigns it to the DdnsHostname field.
func (o *Fixedaddress) SetDdnsHostname(v string) {
	o.DdnsHostname = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Fixedaddress) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Fixedaddress) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Fixedaddress) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDeviceDescription returns the DeviceDescription field value if set, zero value otherwise.
func (o *Fixedaddress) GetDeviceDescription() string {
	if o == nil || IsNil(o.DeviceDescription) {
		var ret string
		return ret
	}
	return *o.DeviceDescription
}

// GetDeviceDescriptionOk returns a tuple with the DeviceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDeviceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceDescription) {
		return nil, false
	}
	return o.DeviceDescription, true
}

// HasDeviceDescription returns a boolean if a field has been set.
func (o *Fixedaddress) HasDeviceDescription() bool {
	if o != nil && !IsNil(o.DeviceDescription) {
		return true
	}

	return false
}

// SetDeviceDescription gets a reference to the given string and assigns it to the DeviceDescription field.
func (o *Fixedaddress) SetDeviceDescription(v string) {
	o.DeviceDescription = &v
}

// GetDeviceLocation returns the DeviceLocation field value if set, zero value otherwise.
func (o *Fixedaddress) GetDeviceLocation() string {
	if o == nil || IsNil(o.DeviceLocation) {
		var ret string
		return ret
	}
	return *o.DeviceLocation
}

// GetDeviceLocationOk returns a tuple with the DeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDeviceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocation) {
		return nil, false
	}
	return o.DeviceLocation, true
}

// HasDeviceLocation returns a boolean if a field has been set.
func (o *Fixedaddress) HasDeviceLocation() bool {
	if o != nil && !IsNil(o.DeviceLocation) {
		return true
	}

	return false
}

// SetDeviceLocation gets a reference to the given string and assigns it to the DeviceLocation field.
func (o *Fixedaddress) SetDeviceLocation(v string) {
	o.DeviceLocation = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *Fixedaddress) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Fixedaddress) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *Fixedaddress) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceVendor returns the DeviceVendor field value if set, zero value otherwise.
func (o *Fixedaddress) GetDeviceVendor() string {
	if o == nil || IsNil(o.DeviceVendor) {
		var ret string
		return ret
	}
	return *o.DeviceVendor
}

// GetDeviceVendorOk returns a tuple with the DeviceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDeviceVendorOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVendor) {
		return nil, false
	}
	return o.DeviceVendor, true
}

// HasDeviceVendor returns a boolean if a field has been set.
func (o *Fixedaddress) HasDeviceVendor() bool {
	if o != nil && !IsNil(o.DeviceVendor) {
		return true
	}

	return false
}

// SetDeviceVendor gets a reference to the given string and assigns it to the DeviceVendor field.
func (o *Fixedaddress) SetDeviceVendor(v string) {
	o.DeviceVendor = &v
}

// GetDhcpClientIdentifier returns the DhcpClientIdentifier field value if set, zero value otherwise.
func (o *Fixedaddress) GetDhcpClientIdentifier() string {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		var ret string
		return ret
	}
	return *o.DhcpClientIdentifier
}

// GetDhcpClientIdentifierOk returns a tuple with the DhcpClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDhcpClientIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		return nil, false
	}
	return o.DhcpClientIdentifier, true
}

// HasDhcpClientIdentifier returns a boolean if a field has been set.
func (o *Fixedaddress) HasDhcpClientIdentifier() bool {
	if o != nil && !IsNil(o.DhcpClientIdentifier) {
		return true
	}

	return false
}

// SetDhcpClientIdentifier gets a reference to the given string and assigns it to the DhcpClientIdentifier field.
func (o *Fixedaddress) SetDhcpClientIdentifier(v string) {
	o.DhcpClientIdentifier = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Fixedaddress) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Fixedaddress) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Fixedaddress) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableDiscovery returns the DisableDiscovery field value if set, zero value otherwise.
func (o *Fixedaddress) GetDisableDiscovery() bool {
	if o == nil || IsNil(o.DisableDiscovery) {
		var ret bool
		return ret
	}
	return *o.DisableDiscovery
}

// GetDisableDiscoveryOk returns a tuple with the DisableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDisableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDiscovery) {
		return nil, false
	}
	return o.DisableDiscovery, true
}

// HasDisableDiscovery returns a boolean if a field has been set.
func (o *Fixedaddress) HasDisableDiscovery() bool {
	if o != nil && !IsNil(o.DisableDiscovery) {
		return true
	}

	return false
}

// SetDisableDiscovery gets a reference to the given bool and assigns it to the DisableDiscovery field.
func (o *Fixedaddress) SetDisableDiscovery(v bool) {
	o.DisableDiscovery = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Fixedaddress) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Fixedaddress) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Fixedaddress) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *Fixedaddress) GetDiscoveredData() FixedaddressDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret FixedaddressDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetDiscoveredDataOk() (*FixedaddressDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *Fixedaddress) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given FixedaddressDiscoveredData and assigns it to the DiscoveredData field.
func (o *Fixedaddress) SetDiscoveredData(v FixedaddressDiscoveredData) {
	o.DiscoveredData = &v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Fixedaddress) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Fixedaddress) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Fixedaddress) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Fixedaddress) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Fixedaddress) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Fixedaddress) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddress) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddress) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Fixedaddress) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Fixedaddress) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Fixedaddress) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Fixedaddress) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Fixedaddress) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Fixedaddress) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Fixedaddress) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *Fixedaddress) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *Fixedaddress) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *Fixedaddress) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIsInvalidMac returns the IsInvalidMac field value if set, zero value otherwise.
func (o *Fixedaddress) GetIsInvalidMac() bool {
	if o == nil || IsNil(o.IsInvalidMac) {
		var ret bool
		return ret
	}
	return *o.IsInvalidMac
}

// GetIsInvalidMacOk returns a tuple with the IsInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetIsInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInvalidMac) {
		return nil, false
	}
	return o.IsInvalidMac, true
}

// HasIsInvalidMac returns a boolean if a field has been set.
func (o *Fixedaddress) HasIsInvalidMac() bool {
	if o != nil && !IsNil(o.IsInvalidMac) {
		return true
	}

	return false
}

// SetIsInvalidMac gets a reference to the given bool and assigns it to the IsInvalidMac field.
func (o *Fixedaddress) SetIsInvalidMac(v bool) {
	o.IsInvalidMac = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Fixedaddress) GetLogicFilterRules() []FixedaddressLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []FixedaddressLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetLogicFilterRulesOk() ([]FixedaddressLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Fixedaddress) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []FixedaddressLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Fixedaddress) SetLogicFilterRules(v []FixedaddressLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Fixedaddress) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Fixedaddress) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Fixedaddress) SetMac(v string) {
	o.Mac = &v
}

// GetMatchClient returns the MatchClient field value if set, zero value otherwise.
func (o *Fixedaddress) GetMatchClient() string {
	if o == nil || IsNil(o.MatchClient) {
		var ret string
		return ret
	}
	return *o.MatchClient
}

// GetMatchClientOk returns a tuple with the MatchClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetMatchClientOk() (*string, bool) {
	if o == nil || IsNil(o.MatchClient) {
		return nil, false
	}
	return o.MatchClient, true
}

// HasMatchClient returns a boolean if a field has been set.
func (o *Fixedaddress) HasMatchClient() bool {
	if o != nil && !IsNil(o.MatchClient) {
		return true
	}

	return false
}

// SetMatchClient gets a reference to the given string and assigns it to the MatchClient field.
func (o *Fixedaddress) SetMatchClient(v string) {
	o.MatchClient = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Fixedaddress) GetMsAdUserData() FixedaddressMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret FixedaddressMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetMsAdUserDataOk() (*FixedaddressMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Fixedaddress) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given FixedaddressMsAdUserData and assigns it to the MsAdUserData field.
func (o *Fixedaddress) SetMsAdUserData(v FixedaddressMsAdUserData) {
	o.MsAdUserData = &v
}

// GetMsOptions returns the MsOptions field value if set, zero value otherwise.
func (o *Fixedaddress) GetMsOptions() []FixedaddressMsOptions {
	if o == nil || IsNil(o.MsOptions) {
		var ret []FixedaddressMsOptions
		return ret
	}
	return o.MsOptions
}

// GetMsOptionsOk returns a tuple with the MsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetMsOptionsOk() ([]FixedaddressMsOptions, bool) {
	if o == nil || IsNil(o.MsOptions) {
		return nil, false
	}
	return o.MsOptions, true
}

// HasMsOptions returns a boolean if a field has been set.
func (o *Fixedaddress) HasMsOptions() bool {
	if o != nil && !IsNil(o.MsOptions) {
		return true
	}

	return false
}

// SetMsOptions gets a reference to the given []FixedaddressMsOptions and assigns it to the MsOptions field.
func (o *Fixedaddress) SetMsOptions(v []FixedaddressMsOptions) {
	o.MsOptions = v
}

// GetMsServer returns the MsServer field value if set, zero value otherwise.
func (o *Fixedaddress) GetMsServer() FixedaddressMsServer {
	if o == nil || IsNil(o.MsServer) {
		var ret FixedaddressMsServer
		return ret
	}
	return *o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetMsServerOk() (*FixedaddressMsServer, bool) {
	if o == nil || IsNil(o.MsServer) {
		return nil, false
	}
	return o.MsServer, true
}

// HasMsServer returns a boolean if a field has been set.
func (o *Fixedaddress) HasMsServer() bool {
	if o != nil && !IsNil(o.MsServer) {
		return true
	}

	return false
}

// SetMsServer gets a reference to the given FixedaddressMsServer and assigns it to the MsServer field.
func (o *Fixedaddress) SetMsServer(v FixedaddressMsServer) {
	o.MsServer = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Fixedaddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Fixedaddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Fixedaddress) SetName(v string) {
	o.Name = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Fixedaddress) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Fixedaddress) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Fixedaddress) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Fixedaddress) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Fixedaddress) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Fixedaddress) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Fixedaddress) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Fixedaddress) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Fixedaddress) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Fixedaddress) GetOptions() []FixedaddressOptions {
	if o == nil || IsNil(o.Options) {
		var ret []FixedaddressOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetOptionsOk() ([]FixedaddressOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Fixedaddress) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []FixedaddressOptions and assigns it to the Options field.
func (o *Fixedaddress) SetOptions(v []FixedaddressOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddress) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddress) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Fixedaddress) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetReservedInterface returns the ReservedInterface field value if set, zero value otherwise.
func (o *Fixedaddress) GetReservedInterface() string {
	if o == nil || IsNil(o.ReservedInterface) {
		var ret string
		return ret
	}
	return *o.ReservedInterface
}

// GetReservedInterfaceOk returns a tuple with the ReservedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetReservedInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedInterface) {
		return nil, false
	}
	return o.ReservedInterface, true
}

// HasReservedInterface returns a boolean if a field has been set.
func (o *Fixedaddress) HasReservedInterface() bool {
	if o != nil && !IsNil(o.ReservedInterface) {
		return true
	}

	return false
}

// SetReservedInterface gets a reference to the given string and assigns it to the ReservedInterface field.
func (o *Fixedaddress) SetReservedInterface(v string) {
	o.ReservedInterface = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Fixedaddress) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Fixedaddress) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Fixedaddress) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetSnmp3Credential returns the Snmp3Credential field value if set, zero value otherwise.
func (o *Fixedaddress) GetSnmp3Credential() FixedaddressSnmp3Credential {
	if o == nil || IsNil(o.Snmp3Credential) {
		var ret FixedaddressSnmp3Credential
		return ret
	}
	return *o.Snmp3Credential
}

// GetSnmp3CredentialOk returns a tuple with the Snmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetSnmp3CredentialOk() (*FixedaddressSnmp3Credential, bool) {
	if o == nil || IsNil(o.Snmp3Credential) {
		return nil, false
	}
	return o.Snmp3Credential, true
}

// HasSnmp3Credential returns a boolean if a field has been set.
func (o *Fixedaddress) HasSnmp3Credential() bool {
	if o != nil && !IsNil(o.Snmp3Credential) {
		return true
	}

	return false
}

// SetSnmp3Credential gets a reference to the given FixedaddressSnmp3Credential and assigns it to the Snmp3Credential field.
func (o *Fixedaddress) SetSnmp3Credential(v FixedaddressSnmp3Credential) {
	o.Snmp3Credential = &v
}

// GetSnmpCredential returns the SnmpCredential field value if set, zero value otherwise.
func (o *Fixedaddress) GetSnmpCredential() FixedaddressSnmpCredential {
	if o == nil || IsNil(o.SnmpCredential) {
		var ret FixedaddressSnmpCredential
		return ret
	}
	return *o.SnmpCredential
}

// GetSnmpCredentialOk returns a tuple with the SnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetSnmpCredentialOk() (*FixedaddressSnmpCredential, bool) {
	if o == nil || IsNil(o.SnmpCredential) {
		return nil, false
	}
	return o.SnmpCredential, true
}

// HasSnmpCredential returns a boolean if a field has been set.
func (o *Fixedaddress) HasSnmpCredential() bool {
	if o != nil && !IsNil(o.SnmpCredential) {
		return true
	}

	return false
}

// SetSnmpCredential gets a reference to the given FixedaddressSnmpCredential and assigns it to the SnmpCredential field.
func (o *Fixedaddress) SetSnmpCredential(v FixedaddressSnmpCredential) {
	o.SnmpCredential = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Fixedaddress) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Fixedaddress) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Fixedaddress) SetTemplate(v string) {
	o.Template = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Fixedaddress) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Fixedaddress) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseCliCredentials returns the UseCliCredentials field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseCliCredentials() bool {
	if o == nil || IsNil(o.UseCliCredentials) {
		var ret bool
		return ret
	}
	return *o.UseCliCredentials
}

// GetUseCliCredentialsOk returns a tuple with the UseCliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseCliCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCliCredentials) {
		return nil, false
	}
	return o.UseCliCredentials, true
}

// HasUseCliCredentials returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseCliCredentials() bool {
	if o != nil && !IsNil(o.UseCliCredentials) {
		return true
	}

	return false
}

// SetUseCliCredentials gets a reference to the given bool and assigns it to the UseCliCredentials field.
func (o *Fixedaddress) SetUseCliCredentials(v bool) {
	o.UseCliCredentials = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Fixedaddress) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Fixedaddress) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Fixedaddress) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Fixedaddress) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Fixedaddress) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMsOptions returns the UseMsOptions field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseMsOptions() bool {
	if o == nil || IsNil(o.UseMsOptions) {
		var ret bool
		return ret
	}
	return *o.UseMsOptions
}

// GetUseMsOptionsOk returns a tuple with the UseMsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseMsOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMsOptions) {
		return nil, false
	}
	return o.UseMsOptions, true
}

// HasUseMsOptions returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseMsOptions() bool {
	if o != nil && !IsNil(o.UseMsOptions) {
		return true
	}

	return false
}

// SetUseMsOptions gets a reference to the given bool and assigns it to the UseMsOptions field.
func (o *Fixedaddress) SetUseMsOptions(v bool) {
	o.UseMsOptions = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Fixedaddress) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Fixedaddress) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddress) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddress) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Fixedaddress) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseSnmp3Credential returns the UseSnmp3Credential field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseSnmp3Credential() bool {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		var ret bool
		return ret
	}
	return *o.UseSnmp3Credential
}

// GetUseSnmp3CredentialOk returns a tuple with the UseSnmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseSnmp3CredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		return nil, false
	}
	return o.UseSnmp3Credential, true
}

// HasUseSnmp3Credential returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseSnmp3Credential() bool {
	if o != nil && !IsNil(o.UseSnmp3Credential) {
		return true
	}

	return false
}

// SetUseSnmp3Credential gets a reference to the given bool and assigns it to the UseSnmp3Credential field.
func (o *Fixedaddress) SetUseSnmp3Credential(v bool) {
	o.UseSnmp3Credential = &v
}

// GetUseSnmpCredential returns the UseSnmpCredential field value if set, zero value otherwise.
func (o *Fixedaddress) GetUseSnmpCredential() bool {
	if o == nil || IsNil(o.UseSnmpCredential) {
		var ret bool
		return ret
	}
	return *o.UseSnmpCredential
}

// GetUseSnmpCredentialOk returns a tuple with the UseSnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddress) GetUseSnmpCredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmpCredential) {
		return nil, false
	}
	return o.UseSnmpCredential, true
}

// HasUseSnmpCredential returns a boolean if a field has been set.
func (o *Fixedaddress) HasUseSnmpCredential() bool {
	if o != nil && !IsNil(o.UseSnmpCredential) {
		return true
	}

	return false
}

// SetUseSnmpCredential gets a reference to the given bool and assigns it to the UseSnmpCredential field.
func (o *Fixedaddress) SetUseSnmpCredential(v bool) {
	o.UseSnmpCredential = &v
}

func (o Fixedaddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fixedaddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AgentCircuitId) {
		toSerialize["agent_circuit_id"] = o.AgentCircuitId
	}
	if !IsNil(o.AgentRemoteId) {
		toSerialize["agent_remote_id"] = o.AgentRemoteId
	}
	if !IsNil(o.AllowTelnet) {
		toSerialize["allow_telnet"] = o.AllowTelnet
	}
	if !IsNil(o.AlwaysUpdateDns) {
		toSerialize["always_update_dns"] = o.AlwaysUpdateDns
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CliCredentials) {
		toSerialize["cli_credentials"] = o.CliCredentials
	}
	if !IsNil(o.ClientIdentifierPrependZero) {
		toSerialize["client_identifier_prepend_zero"] = o.ClientIdentifierPrependZero
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsHostname) {
		toSerialize["ddns_hostname"] = o.DdnsHostname
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DeviceDescription) {
		toSerialize["device_description"] = o.DeviceDescription
	}
	if !IsNil(o.DeviceLocation) {
		toSerialize["device_location"] = o.DeviceLocation
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.DeviceVendor) {
		toSerialize["device_vendor"] = o.DeviceVendor
	}
	if !IsNil(o.DhcpClientIdentifier) {
		toSerialize["dhcp_client_identifier"] = o.DhcpClientIdentifier
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableDiscovery) {
		toSerialize["disable_discovery"] = o.DisableDiscovery
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.IsInvalidMac) {
		toSerialize["is_invalid_mac"] = o.IsInvalidMac
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MatchClient) {
		toSerialize["match_client"] = o.MatchClient
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.MsOptions) {
		toSerialize["ms_options"] = o.MsOptions
	}
	if !IsNil(o.MsServer) {
		toSerialize["ms_server"] = o.MsServer
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.ReservedInterface) {
		toSerialize["reserved_interface"] = o.ReservedInterface
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.Snmp3Credential) {
		toSerialize["snmp3_credential"] = o.Snmp3Credential
	}
	if !IsNil(o.SnmpCredential) {
		toSerialize["snmp_credential"] = o.SnmpCredential
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseCliCredentials) {
		toSerialize["use_cli_credentials"] = o.UseCliCredentials
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMsOptions) {
		toSerialize["use_ms_options"] = o.UseMsOptions
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseSnmp3Credential) {
		toSerialize["use_snmp3_credential"] = o.UseSnmp3Credential
	}
	if !IsNil(o.UseSnmpCredential) {
		toSerialize["use_snmp_credential"] = o.UseSnmpCredential
	}
	return toSerialize, nil
}

type NullableFixedaddress struct {
	value *Fixedaddress
	isSet bool
}

func (v NullableFixedaddress) Get() *Fixedaddress {
	return v.value
}

func (v *NullableFixedaddress) Set(val *Fixedaddress) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedaddress) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedaddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedaddress(val *Fixedaddress) *NullableFixedaddress {
	return &NullableFixedaddress{value: val, isSet: true}
}

func (v NullableFixedaddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedaddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
