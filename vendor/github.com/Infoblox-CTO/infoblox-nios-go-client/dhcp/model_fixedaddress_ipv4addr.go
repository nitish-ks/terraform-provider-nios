/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// FixedaddressIpv4addr - The IPv4 Address of the fixed address.
type FixedaddressIpv4addr struct {
	FixedaddressIpv4addrOneOf *FixedaddressIpv4addrOneOf
	String                    *string
}

// FixedaddressIpv4addrOneOfAsFixedaddressIpv4addr is a convenience function that returns FixedaddressIpv4addrOneOf wrapped in FixedaddressIpv4addr
func FixedaddressIpv4addrOneOfAsFixedaddressIpv4addr(v *FixedaddressIpv4addrOneOf) FixedaddressIpv4addr {
	return FixedaddressIpv4addr{
		FixedaddressIpv4addrOneOf: v,
	}
}

// stringAsFixedaddressIpv4addr is a convenience function that returns string wrapped in FixedaddressIpv4addr
func StringAsFixedaddressIpv4addr(v *string) FixedaddressIpv4addr {
	return FixedaddressIpv4addr{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FixedaddressIpv4addr) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FixedaddressIpv4addrOneOf
	err = newStrictDecoder(data).Decode(&dst.FixedaddressIpv4addrOneOf)
	if err == nil {
		jsonFixedaddressIpv4addrOneOf, _ := json.Marshal(dst.FixedaddressIpv4addrOneOf)
		if string(jsonFixedaddressIpv4addrOneOf) == "{}" { // empty struct
			dst.FixedaddressIpv4addrOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FixedaddressIpv4addrOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FixedaddressIpv4addrOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FixedaddressIpv4addr)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FixedaddressIpv4addr)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FixedaddressIpv4addr) MarshalJSON() ([]byte, error) {
	if src.FixedaddressIpv4addrOneOf != nil {
		return json.Marshal(&src.FixedaddressIpv4addrOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FixedaddressIpv4addr) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FixedaddressIpv4addrOneOf != nil {
		return obj.FixedaddressIpv4addrOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableFixedaddressIpv4addr struct {
	value *FixedaddressIpv4addr
	isSet bool
}

func (v NullableFixedaddressIpv4addr) Get() *FixedaddressIpv4addr {
	return v.value
}

func (v *NullableFixedaddressIpv4addr) Set(val *FixedaddressIpv4addr) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedaddressIpv4addr) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedaddressIpv4addr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedaddressIpv4addr(val *FixedaddressIpv4addr) *NullableFixedaddressIpv4addr {
	return &NullableFixedaddressIpv4addr{value: val, isSet: true}
}

func (v NullableFixedaddressIpv4addr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedaddressIpv4addr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
