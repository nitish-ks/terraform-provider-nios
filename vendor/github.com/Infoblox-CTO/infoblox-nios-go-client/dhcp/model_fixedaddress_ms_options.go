/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the FixedaddressMsOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedaddressMsOptions{}

// FixedaddressMsOptions struct for FixedaddressMsOptions
type FixedaddressMsOptions struct {
	// The code of the DHCP option.
	Num *int64 `json:"num,omitempty"`
	// Value of the DHCP option.
	Value *string `json:"value,omitempty"`
	// The name of the DHCP option.
	Name *string `json:"name,omitempty"`
	// The name of the vendor class with which this DHCP option is associated.
	VendorClass *string `json:"vendor_class,omitempty"`
	// The name of the user class with which this DHCP option is associated.
	UserClass *string `json:"user_class,omitempty"`
	// The DHCP option type. Valid values are: * \"16-bit signed integer\" * \"16-bit unsigned integer\" * \"32-bit signed integer\" * \"32-bit unsigned integer\" * \"64-bit unsigned integer\" * \"8-bit signed integer\" * \"8-bit unsigned integer (1,2,4,8)\" * \"8-bit unsigned integer\" * \"array of 16-bit integer\" * \"array of 16-bit unsigned integer\" * \"array of 32-bit integer\" * \"array of 32-bit unsigned integer\" * \"array of 64-bit unsigned integer\" * \"array of 8-bit integer\" * \"array of 8-bit unsigned integer\" * \"array of ip-address pair\" * \"array of ip-address\" * \"array of string\" * \"binary\" * \"boolean array of ip-address\" * \"boolean\" * \"boolean-text\" * \"domain-list\" * \"domain-name\" * \"encapsulated\" * \"ip-address\" * \"string\" * \"text\"
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FixedaddressMsOptions FixedaddressMsOptions

// NewFixedaddressMsOptions instantiates a new FixedaddressMsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedaddressMsOptions() *FixedaddressMsOptions {
	this := FixedaddressMsOptions{}
	return &this
}

// NewFixedaddressMsOptionsWithDefaults instantiates a new FixedaddressMsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedaddressMsOptionsWithDefaults() *FixedaddressMsOptions {
	this := FixedaddressMsOptions{}
	return &this
}

// GetNum returns the Num field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetNum() int64 {
	if o == nil || IsNil(o.Num) {
		var ret int64
		return ret
	}
	return *o.Num
}

// GetNumOk returns a tuple with the Num field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetNumOk() (*int64, bool) {
	if o == nil || IsNil(o.Num) {
		return nil, false
	}
	return o.Num, true
}

// HasNum returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasNum() bool {
	if o != nil && !IsNil(o.Num) {
		return true
	}

	return false
}

// SetNum gets a reference to the given int64 and assigns it to the Num field.
func (o *FixedaddressMsOptions) SetNum(v int64) {
	o.Num = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FixedaddressMsOptions) SetValue(v string) {
	o.Value = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FixedaddressMsOptions) SetName(v string) {
	o.Name = &v
}

// GetVendorClass returns the VendorClass field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetVendorClass() string {
	if o == nil || IsNil(o.VendorClass) {
		var ret string
		return ret
	}
	return *o.VendorClass
}

// GetVendorClassOk returns a tuple with the VendorClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetVendorClassOk() (*string, bool) {
	if o == nil || IsNil(o.VendorClass) {
		return nil, false
	}
	return o.VendorClass, true
}

// HasVendorClass returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasVendorClass() bool {
	if o != nil && !IsNil(o.VendorClass) {
		return true
	}

	return false
}

// SetVendorClass gets a reference to the given string and assigns it to the VendorClass field.
func (o *FixedaddressMsOptions) SetVendorClass(v string) {
	o.VendorClass = &v
}

// GetUserClass returns the UserClass field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetUserClass() string {
	if o == nil || IsNil(o.UserClass) {
		var ret string
		return ret
	}
	return *o.UserClass
}

// GetUserClassOk returns a tuple with the UserClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetUserClassOk() (*string, bool) {
	if o == nil || IsNil(o.UserClass) {
		return nil, false
	}
	return o.UserClass, true
}

// HasUserClass returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasUserClass() bool {
	if o != nil && !IsNil(o.UserClass) {
		return true
	}

	return false
}

// SetUserClass gets a reference to the given string and assigns it to the UserClass field.
func (o *FixedaddressMsOptions) SetUserClass(v string) {
	o.UserClass = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FixedaddressMsOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedaddressMsOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FixedaddressMsOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FixedaddressMsOptions) SetType(v string) {
	o.Type = &v
}

func (o FixedaddressMsOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedaddressMsOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Num) {
		toSerialize["num"] = o.Num
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VendorClass) {
		toSerialize["vendor_class"] = o.VendorClass
	}
	if !IsNil(o.UserClass) {
		toSerialize["user_class"] = o.UserClass
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FixedaddressMsOptions) UnmarshalJSON(data []byte) (err error) {
	varFixedaddressMsOptions := _FixedaddressMsOptions{}

	err = json.Unmarshal(data, &varFixedaddressMsOptions)

	if err != nil {
		return err
	}

	*o = FixedaddressMsOptions(varFixedaddressMsOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "num")
		delete(additionalProperties, "value")
		delete(additionalProperties, "name")
		delete(additionalProperties, "vendor_class")
		delete(additionalProperties, "user_class")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixedaddressMsOptions struct {
	value *FixedaddressMsOptions
	isSet bool
}

func (v NullableFixedaddressMsOptions) Get() *FixedaddressMsOptions {
	return v.value
}

func (v *NullableFixedaddressMsOptions) Set(val *FixedaddressMsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedaddressMsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedaddressMsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedaddressMsOptions(val *FixedaddressMsOptions) *NullableFixedaddressMsOptions {
	return &NullableFixedaddressMsOptions{value: val, isSet: true}
}

func (v NullableFixedaddressMsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedaddressMsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
