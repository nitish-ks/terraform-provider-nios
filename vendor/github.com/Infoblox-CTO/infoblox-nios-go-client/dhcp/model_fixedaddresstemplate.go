/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Fixedaddresstemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fixedaddresstemplate{}

// Fixedaddresstemplate struct for Fixedaddresstemplate
type Fixedaddresstemplate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The boot file name for the fixed address. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The boot server address for the fixed address. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// A descriptive comment of a fixed address template object.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this fixed address.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// The DDNS host name for this fixed address.
	DdnsHostname *string `json:"ddns_hostname,omitempty"`
	// Determines if BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// Determines if the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// This field contains the logic filters to be applied on this fixed address. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []FixedaddresstemplateLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The name of a fixed address template object.
	Name *string `json:"name,omitempty"`
	// The name in FQDN and/or IPv4 Address format of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// The number of addresses for this fixed address.
	NumberOfAddresses *int64 `json:"number_of_addresses,omitempty"`
	// The start address offset for this fixed address.
	Offset *int64 `json:"offset,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []FixedaddresstemplateOptions `json:"options,omitempty"`
	// The PXE lease time value for a DHCP Fixed Address object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
}

// NewFixedaddresstemplate instantiates a new Fixedaddresstemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedaddresstemplate() *Fixedaddresstemplate {
	this := Fixedaddresstemplate{}
	return &this
}

// NewFixedaddresstemplateWithDefaults instantiates a new Fixedaddresstemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedaddresstemplateWithDefaults() *Fixedaddresstemplate {
	this := Fixedaddresstemplate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Fixedaddresstemplate) SetRef(v string) {
	o.Ref = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Fixedaddresstemplate) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Fixedaddresstemplate) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Fixedaddresstemplate) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Fixedaddresstemplate) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsHostname returns the DdnsHostname field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetDdnsHostname() string {
	if o == nil || IsNil(o.DdnsHostname) {
		var ret string
		return ret
	}
	return *o.DdnsHostname
}

// GetDdnsHostnameOk returns a tuple with the DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetDdnsHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsHostname) {
		return nil, false
	}
	return o.DdnsHostname, true
}

// HasDdnsHostname returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasDdnsHostname() bool {
	if o != nil && !IsNil(o.DdnsHostname) {
		return true
	}

	return false
}

// SetDdnsHostname gets a reference to the given string and assigns it to the DdnsHostname field.
func (o *Fixedaddresstemplate) SetDdnsHostname(v string) {
	o.DdnsHostname = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Fixedaddresstemplate) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Fixedaddresstemplate) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Fixedaddresstemplate) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Fixedaddresstemplate) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Fixedaddresstemplate) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetLogicFilterRules() []FixedaddresstemplateLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []FixedaddresstemplateLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetLogicFilterRulesOk() ([]FixedaddresstemplateLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []FixedaddresstemplateLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Fixedaddresstemplate) SetLogicFilterRules(v []FixedaddresstemplateLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Fixedaddresstemplate) SetName(v string) {
	o.Name = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Fixedaddresstemplate) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetNumberOfAddresses returns the NumberOfAddresses field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetNumberOfAddresses() int64 {
	if o == nil || IsNil(o.NumberOfAddresses) {
		var ret int64
		return ret
	}
	return *o.NumberOfAddresses
}

// GetNumberOfAddressesOk returns a tuple with the NumberOfAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetNumberOfAddressesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfAddresses) {
		return nil, false
	}
	return o.NumberOfAddresses, true
}

// HasNumberOfAddresses returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasNumberOfAddresses() bool {
	if o != nil && !IsNil(o.NumberOfAddresses) {
		return true
	}

	return false
}

// SetNumberOfAddresses gets a reference to the given int64 and assigns it to the NumberOfAddresses field.
func (o *Fixedaddresstemplate) SetNumberOfAddresses(v int64) {
	o.NumberOfAddresses = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *Fixedaddresstemplate) SetOffset(v int64) {
	o.Offset = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetOptions() []FixedaddresstemplateOptions {
	if o == nil || IsNil(o.Options) {
		var ret []FixedaddresstemplateOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetOptionsOk() ([]FixedaddresstemplateOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []FixedaddresstemplateOptions and assigns it to the Options field.
func (o *Fixedaddresstemplate) SetOptions(v []FixedaddresstemplateOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Fixedaddresstemplate) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Fixedaddresstemplate) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Fixedaddresstemplate) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Fixedaddresstemplate) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Fixedaddresstemplate) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Fixedaddresstemplate) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Fixedaddresstemplate) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Fixedaddresstemplate) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Fixedaddresstemplate) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Fixedaddresstemplate) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Fixedaddresstemplate) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fixedaddresstemplate) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Fixedaddresstemplate) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Fixedaddresstemplate) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

func (o Fixedaddresstemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fixedaddresstemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsHostname) {
		toSerialize["ddns_hostname"] = o.DdnsHostname
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.NumberOfAddresses) {
		toSerialize["number_of_addresses"] = o.NumberOfAddresses
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	return toSerialize, nil
}

type NullableFixedaddresstemplate struct {
	value *Fixedaddresstemplate
	isSet bool
}

func (v NullableFixedaddresstemplate) Get() *Fixedaddresstemplate {
	return v.value
}

func (v *NullableFixedaddresstemplate) Set(val *Fixedaddresstemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedaddresstemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedaddresstemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedaddresstemplate(val *Fixedaddresstemplate) *NullableFixedaddresstemplate {
	return &NullableFixedaddresstemplate{value: val, isSet: true}
}

func (v NullableFixedaddresstemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedaddresstemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
