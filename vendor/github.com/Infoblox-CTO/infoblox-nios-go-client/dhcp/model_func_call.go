/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// checks if the FuncCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FuncCall{}

// FuncCall Function Call attribute
type FuncCall struct {
	// The attribute to be called.
	AttributeName string `json:"attribute_name"`
	// The function to be called.
	ObjectFunction *string `json:"_object_function,omitempty"`
	// The parameters for the function.
	Parameters map[string]interface{} `json:"_parameters,omitempty"`
	// The result field of the function.
	ResultField *string `json:"_result_field,omitempty"`
	// The object to be called.
	Object *string `json:"_object,omitempty"`
	// The parameters for the object.
	ObjectParameters     map[string]interface{} `json:"_object_parameters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FuncCall FuncCall

// NewFuncCall instantiates a new FuncCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuncCall(attributeName string) *FuncCall {
	this := FuncCall{}
	this.AttributeName = attributeName
	return &this
}

// NewFuncCallWithDefaults instantiates a new FuncCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuncCallWithDefaults() *FuncCall {
	this := FuncCall{}
	return &this
}

// GetAttributeName returns the AttributeName field value
func (o *FuncCall) GetAttributeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value
// and a boolean to check if the value has been set.
func (o *FuncCall) GetAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeName, true
}

// SetAttributeName sets field value
func (o *FuncCall) SetAttributeName(v string) {
	o.AttributeName = v
}

// GetObjectFunction returns the ObjectFunction field value if set, zero value otherwise.
func (o *FuncCall) GetObjectFunction() string {
	if o == nil || IsNil(o.ObjectFunction) {
		var ret string
		return ret
	}
	return *o.ObjectFunction
}

// GetObjectFunctionOk returns a tuple with the ObjectFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuncCall) GetObjectFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectFunction) {
		return nil, false
	}
	return o.ObjectFunction, true
}

// HasObjectFunction returns a boolean if a field has been set.
func (o *FuncCall) HasObjectFunction() bool {
	if o != nil && !IsNil(o.ObjectFunction) {
		return true
	}

	return false
}

// SetObjectFunction gets a reference to the given string and assigns it to the ObjectFunction field.
func (o *FuncCall) SetObjectFunction(v string) {
	o.ObjectFunction = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *FuncCall) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuncCall) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *FuncCall) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *FuncCall) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetResultField returns the ResultField field value if set, zero value otherwise.
func (o *FuncCall) GetResultField() string {
	if o == nil || IsNil(o.ResultField) {
		var ret string
		return ret
	}
	return *o.ResultField
}

// GetResultFieldOk returns a tuple with the ResultField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuncCall) GetResultFieldOk() (*string, bool) {
	if o == nil || IsNil(o.ResultField) {
		return nil, false
	}
	return o.ResultField, true
}

// HasResultField returns a boolean if a field has been set.
func (o *FuncCall) HasResultField() bool {
	if o != nil && !IsNil(o.ResultField) {
		return true
	}

	return false
}

// SetResultField gets a reference to the given string and assigns it to the ResultField field.
func (o *FuncCall) SetResultField(v string) {
	o.ResultField = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *FuncCall) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuncCall) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *FuncCall) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *FuncCall) SetObject(v string) {
	o.Object = &v
}

// GetObjectParameters returns the ObjectParameters field value if set, zero value otherwise.
func (o *FuncCall) GetObjectParameters() map[string]interface{} {
	if o == nil || IsNil(o.ObjectParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.ObjectParameters
}

// GetObjectParametersOk returns a tuple with the ObjectParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuncCall) GetObjectParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ObjectParameters) {
		return map[string]interface{}{}, false
	}
	return o.ObjectParameters, true
}

// HasObjectParameters returns a boolean if a field has been set.
func (o *FuncCall) HasObjectParameters() bool {
	if o != nil && !IsNil(o.ObjectParameters) {
		return true
	}

	return false
}

// SetObjectParameters gets a reference to the given map[string]interface{} and assigns it to the ObjectParameters field.
func (o *FuncCall) SetObjectParameters(v map[string]interface{}) {
	o.ObjectParameters = v
}

func (o FuncCall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FuncCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute_name"] = o.AttributeName
	if !IsNil(o.ObjectFunction) {
		toSerialize["_object_function"] = o.ObjectFunction
	}
	if !IsNil(o.Parameters) {
		toSerialize["_parameters"] = o.Parameters
	}
	if !IsNil(o.ResultField) {
		toSerialize["_result_field"] = o.ResultField
	}
	if !IsNil(o.Object) {
		toSerialize["_object"] = o.Object
	}
	if !IsNil(o.ObjectParameters) {
		toSerialize["_object_parameters"] = o.ObjectParameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FuncCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFuncCall := _FuncCall{}

	err = json.Unmarshal(data, &varFuncCall)

	if err != nil {
		return err
	}

	*o = FuncCall(varFuncCall)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attribute_name")
		delete(additionalProperties, "_object_function")
		delete(additionalProperties, "_parameters")
		delete(additionalProperties, "_result_field")
		delete(additionalProperties, "_object")
		delete(additionalProperties, "_object_parameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFuncCall struct {
	value *FuncCall
	isSet bool
}

func (v NullableFuncCall) Get() *FuncCall {
	return v.value
}

func (v *NullableFuncCall) Set(val *FuncCall) {
	v.value = val
	v.isSet = true
}

func (v NullableFuncCall) IsSet() bool {
	return v.isSet
}

func (v *NullableFuncCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuncCall(val *FuncCall) *NullableFuncCall {
	return &NullableFuncCall{value: val, isSet: true}
}

func (v NullableFuncCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuncCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
