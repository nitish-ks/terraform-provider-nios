/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetDhcpoptiondefinitionResponse - struct for GetDhcpoptiondefinitionResponse
type GetDhcpoptiondefinitionResponse struct {
	Dhcpoptiondefinition                          *Dhcpoptiondefinition
	GetDhcpoptiondefinitionResponseObjectAsResult *GetDhcpoptiondefinitionResponseObjectAsResult
}

// DhcpoptiondefinitionAsGetDhcpoptiondefinitionResponse is a convenience function that returns Dhcpoptiondefinition wrapped in GetDhcpoptiondefinitionResponse
func DhcpoptiondefinitionAsGetDhcpoptiondefinitionResponse(v *Dhcpoptiondefinition) GetDhcpoptiondefinitionResponse {
	return GetDhcpoptiondefinitionResponse{
		Dhcpoptiondefinition: v,
	}
}

// GetDhcpoptiondefinitionResponseObjectAsResultAsGetDhcpoptiondefinitionResponse is a convenience function that returns GetDhcpoptiondefinitionResponseObjectAsResult wrapped in GetDhcpoptiondefinitionResponse
func GetDhcpoptiondefinitionResponseObjectAsResultAsGetDhcpoptiondefinitionResponse(v *GetDhcpoptiondefinitionResponseObjectAsResult) GetDhcpoptiondefinitionResponse {
	return GetDhcpoptiondefinitionResponse{
		GetDhcpoptiondefinitionResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDhcpoptiondefinitionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dhcpoptiondefinition
	err = newStrictDecoder(data).Decode(&dst.Dhcpoptiondefinition)
	if err == nil {
		jsonDhcpoptiondefinition, _ := json.Marshal(dst.Dhcpoptiondefinition)
		if string(jsonDhcpoptiondefinition) == "{}" { // empty struct
			dst.Dhcpoptiondefinition = nil
		} else {
			match++
		}
	} else {
		dst.Dhcpoptiondefinition = nil
	}

	// try to unmarshal data into GetDhcpoptiondefinitionResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDhcpoptiondefinitionResponseObjectAsResult)
	if err == nil {
		jsonGetDhcpoptiondefinitionResponseObjectAsResult, _ := json.Marshal(dst.GetDhcpoptiondefinitionResponseObjectAsResult)
		if string(jsonGetDhcpoptiondefinitionResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDhcpoptiondefinitionResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDhcpoptiondefinitionResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dhcpoptiondefinition = nil
		dst.GetDhcpoptiondefinitionResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDhcpoptiondefinitionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDhcpoptiondefinitionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDhcpoptiondefinitionResponse) MarshalJSON() ([]byte, error) {
	if src.Dhcpoptiondefinition != nil {
		return json.Marshal(&src.Dhcpoptiondefinition)
	}

	if src.GetDhcpoptiondefinitionResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDhcpoptiondefinitionResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDhcpoptiondefinitionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Dhcpoptiondefinition != nil {
		return obj.Dhcpoptiondefinition
	}

	if obj.GetDhcpoptiondefinitionResponseObjectAsResult != nil {
		return obj.GetDhcpoptiondefinitionResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDhcpoptiondefinitionResponse struct {
	value *GetDhcpoptiondefinitionResponse
	isSet bool
}

func (v NullableGetDhcpoptiondefinitionResponse) Get() *GetDhcpoptiondefinitionResponse {
	return v.value
}

func (v *NullableGetDhcpoptiondefinitionResponse) Set(val *GetDhcpoptiondefinitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDhcpoptiondefinitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDhcpoptiondefinitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDhcpoptiondefinitionResponse(val *GetDhcpoptiondefinitionResponse) *NullableGetDhcpoptiondefinitionResponse {
	return &NullableGetDhcpoptiondefinitionResponse{value: val, isSet: true}
}

func (v NullableGetDhcpoptiondefinitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDhcpoptiondefinitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
