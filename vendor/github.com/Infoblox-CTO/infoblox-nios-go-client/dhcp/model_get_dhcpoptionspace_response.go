/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetDhcpoptionspaceResponse - struct for GetDhcpoptionspaceResponse
type GetDhcpoptionspaceResponse struct {
	Dhcpoptionspace                          *Dhcpoptionspace
	GetDhcpoptionspaceResponseObjectAsResult *GetDhcpoptionspaceResponseObjectAsResult
}

// DhcpoptionspaceAsGetDhcpoptionspaceResponse is a convenience function that returns Dhcpoptionspace wrapped in GetDhcpoptionspaceResponse
func DhcpoptionspaceAsGetDhcpoptionspaceResponse(v *Dhcpoptionspace) GetDhcpoptionspaceResponse {
	return GetDhcpoptionspaceResponse{
		Dhcpoptionspace: v,
	}
}

// GetDhcpoptionspaceResponseObjectAsResultAsGetDhcpoptionspaceResponse is a convenience function that returns GetDhcpoptionspaceResponseObjectAsResult wrapped in GetDhcpoptionspaceResponse
func GetDhcpoptionspaceResponseObjectAsResultAsGetDhcpoptionspaceResponse(v *GetDhcpoptionspaceResponseObjectAsResult) GetDhcpoptionspaceResponse {
	return GetDhcpoptionspaceResponse{
		GetDhcpoptionspaceResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDhcpoptionspaceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dhcpoptionspace
	err = newStrictDecoder(data).Decode(&dst.Dhcpoptionspace)
	if err == nil {
		jsonDhcpoptionspace, _ := json.Marshal(dst.Dhcpoptionspace)
		if string(jsonDhcpoptionspace) == "{}" { // empty struct
			dst.Dhcpoptionspace = nil
		} else {
			match++
		}
	} else {
		dst.Dhcpoptionspace = nil
	}

	// try to unmarshal data into GetDhcpoptionspaceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDhcpoptionspaceResponseObjectAsResult)
	if err == nil {
		jsonGetDhcpoptionspaceResponseObjectAsResult, _ := json.Marshal(dst.GetDhcpoptionspaceResponseObjectAsResult)
		if string(jsonGetDhcpoptionspaceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDhcpoptionspaceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDhcpoptionspaceResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dhcpoptionspace = nil
		dst.GetDhcpoptionspaceResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDhcpoptionspaceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDhcpoptionspaceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	if src.Dhcpoptionspace != nil {
		return json.Marshal(&src.Dhcpoptionspace)
	}

	if src.GetDhcpoptionspaceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDhcpoptionspaceResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDhcpoptionspaceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Dhcpoptionspace != nil {
		return obj.Dhcpoptionspace
	}

	if obj.GetDhcpoptionspaceResponseObjectAsResult != nil {
		return obj.GetDhcpoptionspaceResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDhcpoptionspaceResponse struct {
	value *GetDhcpoptionspaceResponse
	isSet bool
}

func (v NullableGetDhcpoptionspaceResponse) Get() *GetDhcpoptionspaceResponse {
	return v.value
}

func (v *NullableGetDhcpoptionspaceResponse) Set(val *GetDhcpoptionspaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDhcpoptionspaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDhcpoptionspaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDhcpoptionspaceResponse(val *GetDhcpoptionspaceResponse) *NullableGetDhcpoptionspaceResponse {
	return &NullableGetDhcpoptionspaceResponse{value: val, isSet: true}
}

func (v NullableGetDhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDhcpoptionspaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
