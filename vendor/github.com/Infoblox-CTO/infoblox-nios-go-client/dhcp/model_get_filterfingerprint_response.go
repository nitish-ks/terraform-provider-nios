/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFilterfingerprintResponse - struct for GetFilterfingerprintResponse
type GetFilterfingerprintResponse struct {
	Filterfingerprint                          *Filterfingerprint
	GetFilterfingerprintResponseObjectAsResult *GetFilterfingerprintResponseObjectAsResult
}

// FilterfingerprintAsGetFilterfingerprintResponse is a convenience function that returns Filterfingerprint wrapped in GetFilterfingerprintResponse
func FilterfingerprintAsGetFilterfingerprintResponse(v *Filterfingerprint) GetFilterfingerprintResponse {
	return GetFilterfingerprintResponse{
		Filterfingerprint: v,
	}
}

// GetFilterfingerprintResponseObjectAsResultAsGetFilterfingerprintResponse is a convenience function that returns GetFilterfingerprintResponseObjectAsResult wrapped in GetFilterfingerprintResponse
func GetFilterfingerprintResponseObjectAsResultAsGetFilterfingerprintResponse(v *GetFilterfingerprintResponseObjectAsResult) GetFilterfingerprintResponse {
	return GetFilterfingerprintResponse{
		GetFilterfingerprintResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFilterfingerprintResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filterfingerprint
	err = newStrictDecoder(data).Decode(&dst.Filterfingerprint)
	if err == nil {
		jsonFilterfingerprint, _ := json.Marshal(dst.Filterfingerprint)
		if string(jsonFilterfingerprint) == "{}" { // empty struct
			dst.Filterfingerprint = nil
		} else {
			match++
		}
	} else {
		dst.Filterfingerprint = nil
	}

	// try to unmarshal data into GetFilterfingerprintResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFilterfingerprintResponseObjectAsResult)
	if err == nil {
		jsonGetFilterfingerprintResponseObjectAsResult, _ := json.Marshal(dst.GetFilterfingerprintResponseObjectAsResult)
		if string(jsonGetFilterfingerprintResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFilterfingerprintResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFilterfingerprintResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filterfingerprint = nil
		dst.GetFilterfingerprintResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFilterfingerprintResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFilterfingerprintResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFilterfingerprintResponse) MarshalJSON() ([]byte, error) {
	if src.Filterfingerprint != nil {
		return json.Marshal(&src.Filterfingerprint)
	}

	if src.GetFilterfingerprintResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFilterfingerprintResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFilterfingerprintResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Filterfingerprint != nil {
		return obj.Filterfingerprint
	}

	if obj.GetFilterfingerprintResponseObjectAsResult != nil {
		return obj.GetFilterfingerprintResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFilterfingerprintResponse struct {
	value *GetFilterfingerprintResponse
	isSet bool
}

func (v NullableGetFilterfingerprintResponse) Get() *GetFilterfingerprintResponse {
	return v.value
}

func (v *NullableGetFilterfingerprintResponse) Set(val *GetFilterfingerprintResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFilterfingerprintResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFilterfingerprintResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFilterfingerprintResponse(val *GetFilterfingerprintResponse) *NullableGetFilterfingerprintResponse {
	return &NullableGetFilterfingerprintResponse{value: val, isSet: true}
}

func (v NullableGetFilterfingerprintResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFilterfingerprintResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
