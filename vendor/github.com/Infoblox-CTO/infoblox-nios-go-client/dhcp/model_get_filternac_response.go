/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFilternacResponse - struct for GetFilternacResponse
type GetFilternacResponse struct {
	Filternac                          *Filternac
	GetFilternacResponseObjectAsResult *GetFilternacResponseObjectAsResult
}

// FilternacAsGetFilternacResponse is a convenience function that returns Filternac wrapped in GetFilternacResponse
func FilternacAsGetFilternacResponse(v *Filternac) GetFilternacResponse {
	return GetFilternacResponse{
		Filternac: v,
	}
}

// GetFilternacResponseObjectAsResultAsGetFilternacResponse is a convenience function that returns GetFilternacResponseObjectAsResult wrapped in GetFilternacResponse
func GetFilternacResponseObjectAsResultAsGetFilternacResponse(v *GetFilternacResponseObjectAsResult) GetFilternacResponse {
	return GetFilternacResponse{
		GetFilternacResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFilternacResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filternac
	err = newStrictDecoder(data).Decode(&dst.Filternac)
	if err == nil {
		jsonFilternac, _ := json.Marshal(dst.Filternac)
		if string(jsonFilternac) == "{}" { // empty struct
			dst.Filternac = nil
		} else {
			match++
		}
	} else {
		dst.Filternac = nil
	}

	// try to unmarshal data into GetFilternacResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFilternacResponseObjectAsResult)
	if err == nil {
		jsonGetFilternacResponseObjectAsResult, _ := json.Marshal(dst.GetFilternacResponseObjectAsResult)
		if string(jsonGetFilternacResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFilternacResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFilternacResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filternac = nil
		dst.GetFilternacResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFilternacResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFilternacResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFilternacResponse) MarshalJSON() ([]byte, error) {
	if src.Filternac != nil {
		return json.Marshal(&src.Filternac)
	}

	if src.GetFilternacResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFilternacResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFilternacResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Filternac != nil {
		return obj.Filternac
	}

	if obj.GetFilternacResponseObjectAsResult != nil {
		return obj.GetFilternacResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFilternacResponse struct {
	value *GetFilternacResponse
	isSet bool
}

func (v NullableGetFilternacResponse) Get() *GetFilternacResponse {
	return v.value
}

func (v *NullableGetFilternacResponse) Set(val *GetFilternacResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFilternacResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFilternacResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFilternacResponse(val *GetFilternacResponse) *NullableGetFilternacResponse {
	return &NullableGetFilternacResponse{value: val, isSet: true}
}

func (v NullableGetFilternacResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFilternacResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
