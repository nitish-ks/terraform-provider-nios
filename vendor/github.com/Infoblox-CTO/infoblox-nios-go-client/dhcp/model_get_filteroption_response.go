/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFilteroptionResponse - struct for GetFilteroptionResponse
type GetFilteroptionResponse struct {
	Filteroption                          *Filteroption
	GetFilteroptionResponseObjectAsResult *GetFilteroptionResponseObjectAsResult
}

// FilteroptionAsGetFilteroptionResponse is a convenience function that returns Filteroption wrapped in GetFilteroptionResponse
func FilteroptionAsGetFilteroptionResponse(v *Filteroption) GetFilteroptionResponse {
	return GetFilteroptionResponse{
		Filteroption: v,
	}
}

// GetFilteroptionResponseObjectAsResultAsGetFilteroptionResponse is a convenience function that returns GetFilteroptionResponseObjectAsResult wrapped in GetFilteroptionResponse
func GetFilteroptionResponseObjectAsResultAsGetFilteroptionResponse(v *GetFilteroptionResponseObjectAsResult) GetFilteroptionResponse {
	return GetFilteroptionResponse{
		GetFilteroptionResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFilteroptionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filteroption
	err = newStrictDecoder(data).Decode(&dst.Filteroption)
	if err == nil {
		jsonFilteroption, _ := json.Marshal(dst.Filteroption)
		if string(jsonFilteroption) == "{}" { // empty struct
			dst.Filteroption = nil
		} else {
			match++
		}
	} else {
		dst.Filteroption = nil
	}

	// try to unmarshal data into GetFilteroptionResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFilteroptionResponseObjectAsResult)
	if err == nil {
		jsonGetFilteroptionResponseObjectAsResult, _ := json.Marshal(dst.GetFilteroptionResponseObjectAsResult)
		if string(jsonGetFilteroptionResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFilteroptionResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFilteroptionResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filteroption = nil
		dst.GetFilteroptionResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFilteroptionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFilteroptionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFilteroptionResponse) MarshalJSON() ([]byte, error) {
	if src.Filteroption != nil {
		return json.Marshal(&src.Filteroption)
	}

	if src.GetFilteroptionResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFilteroptionResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFilteroptionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Filteroption != nil {
		return obj.Filteroption
	}

	if obj.GetFilteroptionResponseObjectAsResult != nil {
		return obj.GetFilteroptionResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFilteroptionResponse struct {
	value *GetFilteroptionResponse
	isSet bool
}

func (v NullableGetFilteroptionResponse) Get() *GetFilteroptionResponse {
	return v.value
}

func (v *NullableGetFilteroptionResponse) Set(val *GetFilteroptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFilteroptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFilteroptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFilteroptionResponse(val *GetFilteroptionResponse) *NullableGetFilteroptionResponse {
	return &NullableGetFilteroptionResponse{value: val, isSet: true}
}

func (v NullableGetFilteroptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFilteroptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
