/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFilterrelayagentResponse - struct for GetFilterrelayagentResponse
type GetFilterrelayagentResponse struct {
	Filterrelayagent                          *Filterrelayagent
	GetFilterrelayagentResponseObjectAsResult *GetFilterrelayagentResponseObjectAsResult
}

// FilterrelayagentAsGetFilterrelayagentResponse is a convenience function that returns Filterrelayagent wrapped in GetFilterrelayagentResponse
func FilterrelayagentAsGetFilterrelayagentResponse(v *Filterrelayagent) GetFilterrelayagentResponse {
	return GetFilterrelayagentResponse{
		Filterrelayagent: v,
	}
}

// GetFilterrelayagentResponseObjectAsResultAsGetFilterrelayagentResponse is a convenience function that returns GetFilterrelayagentResponseObjectAsResult wrapped in GetFilterrelayagentResponse
func GetFilterrelayagentResponseObjectAsResultAsGetFilterrelayagentResponse(v *GetFilterrelayagentResponseObjectAsResult) GetFilterrelayagentResponse {
	return GetFilterrelayagentResponse{
		GetFilterrelayagentResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFilterrelayagentResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filterrelayagent
	err = newStrictDecoder(data).Decode(&dst.Filterrelayagent)
	if err == nil {
		jsonFilterrelayagent, _ := json.Marshal(dst.Filterrelayagent)
		if string(jsonFilterrelayagent) == "{}" { // empty struct
			dst.Filterrelayagent = nil
		} else {
			match++
		}
	} else {
		dst.Filterrelayagent = nil
	}

	// try to unmarshal data into GetFilterrelayagentResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFilterrelayagentResponseObjectAsResult)
	if err == nil {
		jsonGetFilterrelayagentResponseObjectAsResult, _ := json.Marshal(dst.GetFilterrelayagentResponseObjectAsResult)
		if string(jsonGetFilterrelayagentResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFilterrelayagentResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFilterrelayagentResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filterrelayagent = nil
		dst.GetFilterrelayagentResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFilterrelayagentResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFilterrelayagentResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFilterrelayagentResponse) MarshalJSON() ([]byte, error) {
	if src.Filterrelayagent != nil {
		return json.Marshal(&src.Filterrelayagent)
	}

	if src.GetFilterrelayagentResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFilterrelayagentResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFilterrelayagentResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Filterrelayagent != nil {
		return obj.Filterrelayagent
	}

	if obj.GetFilterrelayagentResponseObjectAsResult != nil {
		return obj.GetFilterrelayagentResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFilterrelayagentResponse struct {
	value *GetFilterrelayagentResponse
	isSet bool
}

func (v NullableGetFilterrelayagentResponse) Get() *GetFilterrelayagentResponse {
	return v.value
}

func (v *NullableGetFilterrelayagentResponse) Set(val *GetFilterrelayagentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFilterrelayagentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFilterrelayagentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFilterrelayagentResponse(val *GetFilterrelayagentResponse) *NullableGetFilterrelayagentResponse {
	return &NullableGetFilterrelayagentResponse{value: val, isSet: true}
}

func (v NullableGetFilterrelayagentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFilterrelayagentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
