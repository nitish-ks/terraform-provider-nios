/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetIpv6dhcpoptionspaceResponse - struct for GetIpv6dhcpoptionspaceResponse
type GetIpv6dhcpoptionspaceResponse struct {
	GetIpv6dhcpoptionspaceResponseObjectAsResult *GetIpv6dhcpoptionspaceResponseObjectAsResult
	Ipv6dhcpoptionspace                          *Ipv6dhcpoptionspace
}

// GetIpv6dhcpoptionspaceResponseObjectAsResultAsGetIpv6dhcpoptionspaceResponse is a convenience function that returns GetIpv6dhcpoptionspaceResponseObjectAsResult wrapped in GetIpv6dhcpoptionspaceResponse
func GetIpv6dhcpoptionspaceResponseObjectAsResultAsGetIpv6dhcpoptionspaceResponse(v *GetIpv6dhcpoptionspaceResponseObjectAsResult) GetIpv6dhcpoptionspaceResponse {
	return GetIpv6dhcpoptionspaceResponse{
		GetIpv6dhcpoptionspaceResponseObjectAsResult: v,
	}
}

// Ipv6dhcpoptionspaceAsGetIpv6dhcpoptionspaceResponse is a convenience function that returns Ipv6dhcpoptionspace wrapped in GetIpv6dhcpoptionspaceResponse
func Ipv6dhcpoptionspaceAsGetIpv6dhcpoptionspaceResponse(v *Ipv6dhcpoptionspace) GetIpv6dhcpoptionspaceResponse {
	return GetIpv6dhcpoptionspaceResponse{
		Ipv6dhcpoptionspace: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6dhcpoptionspaceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6dhcpoptionspaceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6dhcpoptionspaceResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6dhcpoptionspaceResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6dhcpoptionspaceResponseObjectAsResult)
		if string(jsonGetIpv6dhcpoptionspaceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6dhcpoptionspaceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6dhcpoptionspaceResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6dhcpoptionspace
	err = newStrictDecoder(data).Decode(&dst.Ipv6dhcpoptionspace)
	if err == nil {
		jsonIpv6dhcpoptionspace, _ := json.Marshal(dst.Ipv6dhcpoptionspace)
		if string(jsonIpv6dhcpoptionspace) == "{}" { // empty struct
			dst.Ipv6dhcpoptionspace = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6dhcpoptionspace = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6dhcpoptionspaceResponseObjectAsResult = nil
		dst.Ipv6dhcpoptionspace = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6dhcpoptionspaceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6dhcpoptionspaceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6dhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6dhcpoptionspaceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6dhcpoptionspaceResponseObjectAsResult)
	}

	if src.Ipv6dhcpoptionspace != nil {
		return json.Marshal(&src.Ipv6dhcpoptionspace)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6dhcpoptionspaceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6dhcpoptionspaceResponseObjectAsResult != nil {
		return obj.GetIpv6dhcpoptionspaceResponseObjectAsResult
	}

	if obj.Ipv6dhcpoptionspace != nil {
		return obj.Ipv6dhcpoptionspace
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6dhcpoptionspaceResponse struct {
	value *GetIpv6dhcpoptionspaceResponse
	isSet bool
}

func (v NullableGetIpv6dhcpoptionspaceResponse) Get() *GetIpv6dhcpoptionspaceResponse {
	return v.value
}

func (v *NullableGetIpv6dhcpoptionspaceResponse) Set(val *GetIpv6dhcpoptionspaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6dhcpoptionspaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6dhcpoptionspaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6dhcpoptionspaceResponse(val *GetIpv6dhcpoptionspaceResponse) *NullableGetIpv6dhcpoptionspaceResponse {
	return &NullableGetIpv6dhcpoptionspaceResponse{value: val, isSet: true}
}

func (v NullableGetIpv6dhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6dhcpoptionspaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
