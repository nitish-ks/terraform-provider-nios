/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetIpv6filteroptionResponse - struct for GetIpv6filteroptionResponse
type GetIpv6filteroptionResponse struct {
	GetIpv6filteroptionResponseObjectAsResult *GetIpv6filteroptionResponseObjectAsResult
	Ipv6filteroption                          *Ipv6filteroption
}

// GetIpv6filteroptionResponseObjectAsResultAsGetIpv6filteroptionResponse is a convenience function that returns GetIpv6filteroptionResponseObjectAsResult wrapped in GetIpv6filteroptionResponse
func GetIpv6filteroptionResponseObjectAsResultAsGetIpv6filteroptionResponse(v *GetIpv6filteroptionResponseObjectAsResult) GetIpv6filteroptionResponse {
	return GetIpv6filteroptionResponse{
		GetIpv6filteroptionResponseObjectAsResult: v,
	}
}

// Ipv6filteroptionAsGetIpv6filteroptionResponse is a convenience function that returns Ipv6filteroption wrapped in GetIpv6filteroptionResponse
func Ipv6filteroptionAsGetIpv6filteroptionResponse(v *Ipv6filteroption) GetIpv6filteroptionResponse {
	return GetIpv6filteroptionResponse{
		Ipv6filteroption: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6filteroptionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6filteroptionResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6filteroptionResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6filteroptionResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6filteroptionResponseObjectAsResult)
		if string(jsonGetIpv6filteroptionResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6filteroptionResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6filteroptionResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6filteroption
	err = newStrictDecoder(data).Decode(&dst.Ipv6filteroption)
	if err == nil {
		jsonIpv6filteroption, _ := json.Marshal(dst.Ipv6filteroption)
		if string(jsonIpv6filteroption) == "{}" { // empty struct
			dst.Ipv6filteroption = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6filteroption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6filteroptionResponseObjectAsResult = nil
		dst.Ipv6filteroption = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6filteroptionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6filteroptionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6filteroptionResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6filteroptionResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6filteroptionResponseObjectAsResult)
	}

	if src.Ipv6filteroption != nil {
		return json.Marshal(&src.Ipv6filteroption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6filteroptionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6filteroptionResponseObjectAsResult != nil {
		return obj.GetIpv6filteroptionResponseObjectAsResult
	}

	if obj.Ipv6filteroption != nil {
		return obj.Ipv6filteroption
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6filteroptionResponse struct {
	value *GetIpv6filteroptionResponse
	isSet bool
}

func (v NullableGetIpv6filteroptionResponse) Get() *GetIpv6filteroptionResponse {
	return v.value
}

func (v *NullableGetIpv6filteroptionResponse) Set(val *GetIpv6filteroptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6filteroptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6filteroptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6filteroptionResponse(val *GetIpv6filteroptionResponse) *NullableGetIpv6filteroptionResponse {
	return &NullableGetIpv6filteroptionResponse{value: val, isSet: true}
}

func (v NullableGetIpv6filteroptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6filteroptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
