/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetIpv6rangeResponse - struct for GetIpv6rangeResponse
type GetIpv6rangeResponse struct {
	GetIpv6rangeResponseObjectAsResult *GetIpv6rangeResponseObjectAsResult
	Ipv6range                          *Ipv6range
}

// GetIpv6rangeResponseObjectAsResultAsGetIpv6rangeResponse is a convenience function that returns GetIpv6rangeResponseObjectAsResult wrapped in GetIpv6rangeResponse
func GetIpv6rangeResponseObjectAsResultAsGetIpv6rangeResponse(v *GetIpv6rangeResponseObjectAsResult) GetIpv6rangeResponse {
	return GetIpv6rangeResponse{
		GetIpv6rangeResponseObjectAsResult: v,
	}
}

// Ipv6rangeAsGetIpv6rangeResponse is a convenience function that returns Ipv6range wrapped in GetIpv6rangeResponse
func Ipv6rangeAsGetIpv6rangeResponse(v *Ipv6range) GetIpv6rangeResponse {
	return GetIpv6rangeResponse{
		Ipv6range: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6rangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6rangeResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6rangeResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6rangeResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6rangeResponseObjectAsResult)
		if string(jsonGetIpv6rangeResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6rangeResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6rangeResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6range
	err = newStrictDecoder(data).Decode(&dst.Ipv6range)
	if err == nil {
		jsonIpv6range, _ := json.Marshal(dst.Ipv6range)
		if string(jsonIpv6range) == "{}" { // empty struct
			dst.Ipv6range = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6range = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6rangeResponseObjectAsResult = nil
		dst.Ipv6range = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6rangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6rangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6rangeResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6rangeResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6rangeResponseObjectAsResult)
	}

	if src.Ipv6range != nil {
		return json.Marshal(&src.Ipv6range)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6rangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6rangeResponseObjectAsResult != nil {
		return obj.GetIpv6rangeResponseObjectAsResult
	}

	if obj.Ipv6range != nil {
		return obj.Ipv6range
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6rangeResponse struct {
	value *GetIpv6rangeResponse
	isSet bool
}

func (v NullableGetIpv6rangeResponse) Get() *GetIpv6rangeResponse {
	return v.value
}

func (v *NullableGetIpv6rangeResponse) Set(val *GetIpv6rangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6rangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6rangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6rangeResponse(val *GetIpv6rangeResponse) *NullableGetIpv6rangeResponse {
	return &NullableGetIpv6rangeResponse{value: val, isSet: true}
}

func (v NullableGetIpv6rangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6rangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
