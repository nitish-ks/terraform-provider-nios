/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetIpv6rangetemplateResponse - struct for GetIpv6rangetemplateResponse
type GetIpv6rangetemplateResponse struct {
	GetIpv6rangetemplateResponseObjectAsResult *GetIpv6rangetemplateResponseObjectAsResult
	Ipv6rangetemplate                          *Ipv6rangetemplate
}

// GetIpv6rangetemplateResponseObjectAsResultAsGetIpv6rangetemplateResponse is a convenience function that returns GetIpv6rangetemplateResponseObjectAsResult wrapped in GetIpv6rangetemplateResponse
func GetIpv6rangetemplateResponseObjectAsResultAsGetIpv6rangetemplateResponse(v *GetIpv6rangetemplateResponseObjectAsResult) GetIpv6rangetemplateResponse {
	return GetIpv6rangetemplateResponse{
		GetIpv6rangetemplateResponseObjectAsResult: v,
	}
}

// Ipv6rangetemplateAsGetIpv6rangetemplateResponse is a convenience function that returns Ipv6rangetemplate wrapped in GetIpv6rangetemplateResponse
func Ipv6rangetemplateAsGetIpv6rangetemplateResponse(v *Ipv6rangetemplate) GetIpv6rangetemplateResponse {
	return GetIpv6rangetemplateResponse{
		Ipv6rangetemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6rangetemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6rangetemplateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6rangetemplateResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6rangetemplateResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6rangetemplateResponseObjectAsResult)
		if string(jsonGetIpv6rangetemplateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6rangetemplateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6rangetemplateResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6rangetemplate
	err = newStrictDecoder(data).Decode(&dst.Ipv6rangetemplate)
	if err == nil {
		jsonIpv6rangetemplate, _ := json.Marshal(dst.Ipv6rangetemplate)
		if string(jsonIpv6rangetemplate) == "{}" { // empty struct
			dst.Ipv6rangetemplate = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6rangetemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6rangetemplateResponseObjectAsResult = nil
		dst.Ipv6rangetemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6rangetemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6rangetemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6rangetemplateResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6rangetemplateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6rangetemplateResponseObjectAsResult)
	}

	if src.Ipv6rangetemplate != nil {
		return json.Marshal(&src.Ipv6rangetemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6rangetemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6rangetemplateResponseObjectAsResult != nil {
		return obj.GetIpv6rangetemplateResponseObjectAsResult
	}

	if obj.Ipv6rangetemplate != nil {
		return obj.Ipv6rangetemplate
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6rangetemplateResponse struct {
	value *GetIpv6rangetemplateResponse
	isSet bool
}

func (v NullableGetIpv6rangetemplateResponse) Get() *GetIpv6rangetemplateResponse {
	return v.value
}

func (v *NullableGetIpv6rangetemplateResponse) Set(val *GetIpv6rangetemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6rangetemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6rangetemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6rangetemplateResponse(val *GetIpv6rangetemplateResponse) *NullableGetIpv6rangetemplateResponse {
	return &NullableGetIpv6rangetemplateResponse{value: val, isSet: true}
}

func (v NullableGetIpv6rangetemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6rangetemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
