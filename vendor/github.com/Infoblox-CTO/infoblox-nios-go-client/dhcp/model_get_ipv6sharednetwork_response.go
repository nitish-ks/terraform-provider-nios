/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetIpv6sharednetworkResponse - struct for GetIpv6sharednetworkResponse
type GetIpv6sharednetworkResponse struct {
	GetIpv6sharednetworkResponseObjectAsResult *GetIpv6sharednetworkResponseObjectAsResult
	Ipv6sharednetwork                          *Ipv6sharednetwork
}

// GetIpv6sharednetworkResponseObjectAsResultAsGetIpv6sharednetworkResponse is a convenience function that returns GetIpv6sharednetworkResponseObjectAsResult wrapped in GetIpv6sharednetworkResponse
func GetIpv6sharednetworkResponseObjectAsResultAsGetIpv6sharednetworkResponse(v *GetIpv6sharednetworkResponseObjectAsResult) GetIpv6sharednetworkResponse {
	return GetIpv6sharednetworkResponse{
		GetIpv6sharednetworkResponseObjectAsResult: v,
	}
}

// Ipv6sharednetworkAsGetIpv6sharednetworkResponse is a convenience function that returns Ipv6sharednetwork wrapped in GetIpv6sharednetworkResponse
func Ipv6sharednetworkAsGetIpv6sharednetworkResponse(v *Ipv6sharednetwork) GetIpv6sharednetworkResponse {
	return GetIpv6sharednetworkResponse{
		Ipv6sharednetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6sharednetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6sharednetworkResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6sharednetworkResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6sharednetworkResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6sharednetworkResponseObjectAsResult)
		if string(jsonGetIpv6sharednetworkResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6sharednetworkResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6sharednetworkResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6sharednetwork
	err = newStrictDecoder(data).Decode(&dst.Ipv6sharednetwork)
	if err == nil {
		jsonIpv6sharednetwork, _ := json.Marshal(dst.Ipv6sharednetwork)
		if string(jsonIpv6sharednetwork) == "{}" { // empty struct
			dst.Ipv6sharednetwork = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6sharednetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6sharednetworkResponseObjectAsResult = nil
		dst.Ipv6sharednetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6sharednetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6sharednetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6sharednetworkResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6sharednetworkResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6sharednetworkResponseObjectAsResult)
	}

	if src.Ipv6sharednetwork != nil {
		return json.Marshal(&src.Ipv6sharednetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6sharednetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6sharednetworkResponseObjectAsResult != nil {
		return obj.GetIpv6sharednetworkResponseObjectAsResult
	}

	if obj.Ipv6sharednetwork != nil {
		return obj.Ipv6sharednetwork
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6sharednetworkResponse struct {
	value *GetIpv6sharednetworkResponse
	isSet bool
}

func (v NullableGetIpv6sharednetworkResponse) Get() *GetIpv6sharednetworkResponse {
	return v.value
}

func (v *NullableGetIpv6sharednetworkResponse) Set(val *GetIpv6sharednetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6sharednetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6sharednetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6sharednetworkResponse(val *GetIpv6sharednetworkResponse) *NullableGetIpv6sharednetworkResponse {
	return &NullableGetIpv6sharednetworkResponse{value: val, isSet: true}
}

func (v NullableGetIpv6sharednetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6sharednetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
