/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the GetIpv6sharednetworkResponseObjectAsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIpv6sharednetworkResponseObjectAsResult{}

// GetIpv6sharednetworkResponseObjectAsResult The response format to retrieve __Ipv6sharednetwork__ objects.
type GetIpv6sharednetworkResponseObjectAsResult struct {
	Result *Ipv6sharednetwork `json:"result,omitempty"`
}

// NewGetIpv6sharednetworkResponseObjectAsResult instantiates a new GetIpv6sharednetworkResponseObjectAsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIpv6sharednetworkResponseObjectAsResult() *GetIpv6sharednetworkResponseObjectAsResult {
	this := GetIpv6sharednetworkResponseObjectAsResult{}
	return &this
}

// NewGetIpv6sharednetworkResponseObjectAsResultWithDefaults instantiates a new GetIpv6sharednetworkResponseObjectAsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIpv6sharednetworkResponseObjectAsResultWithDefaults() *GetIpv6sharednetworkResponseObjectAsResult {
	this := GetIpv6sharednetworkResponseObjectAsResult{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *GetIpv6sharednetworkResponseObjectAsResult) GetResult() Ipv6sharednetwork {
	if o == nil || IsNil(o.Result) {
		var ret Ipv6sharednetwork
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIpv6sharednetworkResponseObjectAsResult) GetResultOk() (*Ipv6sharednetwork, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *GetIpv6sharednetworkResponseObjectAsResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given Ipv6sharednetwork and assigns it to the Result field.
func (o *GetIpv6sharednetworkResponseObjectAsResult) SetResult(v Ipv6sharednetwork) {
	o.Result = &v
}

func (o GetIpv6sharednetworkResponseObjectAsResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIpv6sharednetworkResponseObjectAsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableGetIpv6sharednetworkResponseObjectAsResult struct {
	value *GetIpv6sharednetworkResponseObjectAsResult
	isSet bool
}

func (v NullableGetIpv6sharednetworkResponseObjectAsResult) Get() *GetIpv6sharednetworkResponseObjectAsResult {
	return v.value
}

func (v *NullableGetIpv6sharednetworkResponseObjectAsResult) Set(val *GetIpv6sharednetworkResponseObjectAsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6sharednetworkResponseObjectAsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6sharednetworkResponseObjectAsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6sharednetworkResponseObjectAsResult(val *GetIpv6sharednetworkResponseObjectAsResult) *NullableGetIpv6sharednetworkResponseObjectAsResult {
	return &NullableGetIpv6sharednetworkResponseObjectAsResult{value: val, isSet: true}
}

func (v NullableGetIpv6sharednetworkResponseObjectAsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6sharednetworkResponseObjectAsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
