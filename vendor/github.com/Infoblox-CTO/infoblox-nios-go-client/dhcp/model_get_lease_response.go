/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetLeaseResponse - struct for GetLeaseResponse
type GetLeaseResponse struct {
	GetLeaseResponseObjectAsResult *GetLeaseResponseObjectAsResult
	Lease                          *Lease
}

// GetLeaseResponseObjectAsResultAsGetLeaseResponse is a convenience function that returns GetLeaseResponseObjectAsResult wrapped in GetLeaseResponse
func GetLeaseResponseObjectAsResultAsGetLeaseResponse(v *GetLeaseResponseObjectAsResult) GetLeaseResponse {
	return GetLeaseResponse{
		GetLeaseResponseObjectAsResult: v,
	}
}

// LeaseAsGetLeaseResponse is a convenience function that returns Lease wrapped in GetLeaseResponse
func LeaseAsGetLeaseResponse(v *Lease) GetLeaseResponse {
	return GetLeaseResponse{
		Lease: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLeaseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLeaseResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetLeaseResponseObjectAsResult)
	if err == nil {
		jsonGetLeaseResponseObjectAsResult, _ := json.Marshal(dst.GetLeaseResponseObjectAsResult)
		if string(jsonGetLeaseResponseObjectAsResult) == "{}" { // empty struct
			dst.GetLeaseResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetLeaseResponseObjectAsResult = nil
	}

	// try to unmarshal data into Lease
	err = newStrictDecoder(data).Decode(&dst.Lease)
	if err == nil {
		jsonLease, _ := json.Marshal(dst.Lease)
		if string(jsonLease) == "{}" { // empty struct
			dst.Lease = nil
		} else {
			match++
		}
	} else {
		dst.Lease = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLeaseResponseObjectAsResult = nil
		dst.Lease = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetLeaseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetLeaseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLeaseResponse) MarshalJSON() ([]byte, error) {
	if src.GetLeaseResponseObjectAsResult != nil {
		return json.Marshal(&src.GetLeaseResponseObjectAsResult)
	}

	if src.Lease != nil {
		return json.Marshal(&src.Lease)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLeaseResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetLeaseResponseObjectAsResult != nil {
		return obj.GetLeaseResponseObjectAsResult
	}

	if obj.Lease != nil {
		return obj.Lease
	}

	// all schemas are nil
	return nil
}

type NullableGetLeaseResponse struct {
	value *GetLeaseResponse
	isSet bool
}

func (v NullableGetLeaseResponse) Get() *GetLeaseResponse {
	return v.value
}

func (v *NullableGetLeaseResponse) Set(val *GetLeaseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLeaseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLeaseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLeaseResponse(val *GetLeaseResponse) *NullableGetLeaseResponse {
	return &NullableGetLeaseResponse{value: val, isSet: true}
}

func (v NullableGetLeaseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLeaseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
