/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetMacfilteraddressResponse - struct for GetMacfilteraddressResponse
type GetMacfilteraddressResponse struct {
	GetMacfilteraddressResponseObjectAsResult *GetMacfilteraddressResponseObjectAsResult
	Macfilteraddress                          *Macfilteraddress
}

// GetMacfilteraddressResponseObjectAsResultAsGetMacfilteraddressResponse is a convenience function that returns GetMacfilteraddressResponseObjectAsResult wrapped in GetMacfilteraddressResponse
func GetMacfilteraddressResponseObjectAsResultAsGetMacfilteraddressResponse(v *GetMacfilteraddressResponseObjectAsResult) GetMacfilteraddressResponse {
	return GetMacfilteraddressResponse{
		GetMacfilteraddressResponseObjectAsResult: v,
	}
}

// MacfilteraddressAsGetMacfilteraddressResponse is a convenience function that returns Macfilteraddress wrapped in GetMacfilteraddressResponse
func MacfilteraddressAsGetMacfilteraddressResponse(v *Macfilteraddress) GetMacfilteraddressResponse {
	return GetMacfilteraddressResponse{
		Macfilteraddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMacfilteraddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMacfilteraddressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMacfilteraddressResponseObjectAsResult)
	if err == nil {
		jsonGetMacfilteraddressResponseObjectAsResult, _ := json.Marshal(dst.GetMacfilteraddressResponseObjectAsResult)
		if string(jsonGetMacfilteraddressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMacfilteraddressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMacfilteraddressResponseObjectAsResult = nil
	}

	// try to unmarshal data into Macfilteraddress
	err = newStrictDecoder(data).Decode(&dst.Macfilteraddress)
	if err == nil {
		jsonMacfilteraddress, _ := json.Marshal(dst.Macfilteraddress)
		if string(jsonMacfilteraddress) == "{}" { // empty struct
			dst.Macfilteraddress = nil
		} else {
			match++
		}
	} else {
		dst.Macfilteraddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMacfilteraddressResponseObjectAsResult = nil
		dst.Macfilteraddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMacfilteraddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMacfilteraddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMacfilteraddressResponse) MarshalJSON() ([]byte, error) {
	if src.GetMacfilteraddressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMacfilteraddressResponseObjectAsResult)
	}

	if src.Macfilteraddress != nil {
		return json.Marshal(&src.Macfilteraddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMacfilteraddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMacfilteraddressResponseObjectAsResult != nil {
		return obj.GetMacfilteraddressResponseObjectAsResult
	}

	if obj.Macfilteraddress != nil {
		return obj.Macfilteraddress
	}

	// all schemas are nil
	return nil
}

type NullableGetMacfilteraddressResponse struct {
	value *GetMacfilteraddressResponse
	isSet bool
}

func (v NullableGetMacfilteraddressResponse) Get() *GetMacfilteraddressResponse {
	return v.value
}

func (v *NullableGetMacfilteraddressResponse) Set(val *GetMacfilteraddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMacfilteraddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMacfilteraddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMacfilteraddressResponse(val *GetMacfilteraddressResponse) *NullableGetMacfilteraddressResponse {
	return &NullableGetMacfilteraddressResponse{value: val, isSet: true}
}

func (v NullableGetMacfilteraddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMacfilteraddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
