/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetMemberDhcppropertiesResponse - struct for GetMemberDhcppropertiesResponse
type GetMemberDhcppropertiesResponse struct {
	GetMemberDhcppropertiesResponseObjectAsResult *GetMemberDhcppropertiesResponseObjectAsResult
	MemberDhcpproperties                          *MemberDhcpproperties
}

// GetMemberDhcppropertiesResponseObjectAsResultAsGetMemberDhcppropertiesResponse is a convenience function that returns GetMemberDhcppropertiesResponseObjectAsResult wrapped in GetMemberDhcppropertiesResponse
func GetMemberDhcppropertiesResponseObjectAsResultAsGetMemberDhcppropertiesResponse(v *GetMemberDhcppropertiesResponseObjectAsResult) GetMemberDhcppropertiesResponse {
	return GetMemberDhcppropertiesResponse{
		GetMemberDhcppropertiesResponseObjectAsResult: v,
	}
}

// MemberDhcppropertiesAsGetMemberDhcppropertiesResponse is a convenience function that returns MemberDhcpproperties wrapped in GetMemberDhcppropertiesResponse
func MemberDhcppropertiesAsGetMemberDhcppropertiesResponse(v *MemberDhcpproperties) GetMemberDhcppropertiesResponse {
	return GetMemberDhcppropertiesResponse{
		MemberDhcpproperties: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberDhcppropertiesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberDhcppropertiesResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberDhcppropertiesResponseObjectAsResult)
	if err == nil {
		jsonGetMemberDhcppropertiesResponseObjectAsResult, _ := json.Marshal(dst.GetMemberDhcppropertiesResponseObjectAsResult)
		if string(jsonGetMemberDhcppropertiesResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberDhcppropertiesResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberDhcppropertiesResponseObjectAsResult = nil
	}

	// try to unmarshal data into MemberDhcpproperties
	err = newStrictDecoder(data).Decode(&dst.MemberDhcpproperties)
	if err == nil {
		jsonMemberDhcpproperties, _ := json.Marshal(dst.MemberDhcpproperties)
		if string(jsonMemberDhcpproperties) == "{}" { // empty struct
			dst.MemberDhcpproperties = nil
		} else {
			match++
		}
	} else {
		dst.MemberDhcpproperties = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberDhcppropertiesResponseObjectAsResult = nil
		dst.MemberDhcpproperties = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberDhcppropertiesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberDhcppropertiesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberDhcppropertiesResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberDhcppropertiesResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberDhcppropertiesResponseObjectAsResult)
	}

	if src.MemberDhcpproperties != nil {
		return json.Marshal(&src.MemberDhcpproperties)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberDhcppropertiesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberDhcppropertiesResponseObjectAsResult != nil {
		return obj.GetMemberDhcppropertiesResponseObjectAsResult
	}

	if obj.MemberDhcpproperties != nil {
		return obj.MemberDhcpproperties
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberDhcppropertiesResponse struct {
	value *GetMemberDhcppropertiesResponse
	isSet bool
}

func (v NullableGetMemberDhcppropertiesResponse) Get() *GetMemberDhcppropertiesResponse {
	return v.value
}

func (v *NullableGetMemberDhcppropertiesResponse) Set(val *GetMemberDhcppropertiesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberDhcppropertiesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberDhcppropertiesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberDhcppropertiesResponse(val *GetMemberDhcppropertiesResponse) *NullableGetMemberDhcppropertiesResponse {
	return &NullableGetMemberDhcppropertiesResponse{value: val, isSet: true}
}

func (v NullableGetMemberDhcppropertiesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberDhcppropertiesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
