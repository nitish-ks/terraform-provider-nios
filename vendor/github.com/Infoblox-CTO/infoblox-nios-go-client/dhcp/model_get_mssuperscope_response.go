/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetMssuperscopeResponse - struct for GetMssuperscopeResponse
type GetMssuperscopeResponse struct {
	GetMssuperscopeResponseObjectAsResult *GetMssuperscopeResponseObjectAsResult
	Mssuperscope                          *Mssuperscope
}

// GetMssuperscopeResponseObjectAsResultAsGetMssuperscopeResponse is a convenience function that returns GetMssuperscopeResponseObjectAsResult wrapped in GetMssuperscopeResponse
func GetMssuperscopeResponseObjectAsResultAsGetMssuperscopeResponse(v *GetMssuperscopeResponseObjectAsResult) GetMssuperscopeResponse {
	return GetMssuperscopeResponse{
		GetMssuperscopeResponseObjectAsResult: v,
	}
}

// MssuperscopeAsGetMssuperscopeResponse is a convenience function that returns Mssuperscope wrapped in GetMssuperscopeResponse
func MssuperscopeAsGetMssuperscopeResponse(v *Mssuperscope) GetMssuperscopeResponse {
	return GetMssuperscopeResponse{
		Mssuperscope: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMssuperscopeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMssuperscopeResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMssuperscopeResponseObjectAsResult)
	if err == nil {
		jsonGetMssuperscopeResponseObjectAsResult, _ := json.Marshal(dst.GetMssuperscopeResponseObjectAsResult)
		if string(jsonGetMssuperscopeResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMssuperscopeResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMssuperscopeResponseObjectAsResult = nil
	}

	// try to unmarshal data into Mssuperscope
	err = newStrictDecoder(data).Decode(&dst.Mssuperscope)
	if err == nil {
		jsonMssuperscope, _ := json.Marshal(dst.Mssuperscope)
		if string(jsonMssuperscope) == "{}" { // empty struct
			dst.Mssuperscope = nil
		} else {
			match++
		}
	} else {
		dst.Mssuperscope = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMssuperscopeResponseObjectAsResult = nil
		dst.Mssuperscope = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMssuperscopeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMssuperscopeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMssuperscopeResponse) MarshalJSON() ([]byte, error) {
	if src.GetMssuperscopeResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMssuperscopeResponseObjectAsResult)
	}

	if src.Mssuperscope != nil {
		return json.Marshal(&src.Mssuperscope)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMssuperscopeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMssuperscopeResponseObjectAsResult != nil {
		return obj.GetMssuperscopeResponseObjectAsResult
	}

	if obj.Mssuperscope != nil {
		return obj.Mssuperscope
	}

	// all schemas are nil
	return nil
}

type NullableGetMssuperscopeResponse struct {
	value *GetMssuperscopeResponse
	isSet bool
}

func (v NullableGetMssuperscopeResponse) Get() *GetMssuperscopeResponse {
	return v.value
}

func (v *NullableGetMssuperscopeResponse) Set(val *GetMssuperscopeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMssuperscopeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMssuperscopeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMssuperscopeResponse(val *GetMssuperscopeResponse) *NullableGetMssuperscopeResponse {
	return &NullableGetMssuperscopeResponse{value: val, isSet: true}
}

func (v NullableGetMssuperscopeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMssuperscopeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
