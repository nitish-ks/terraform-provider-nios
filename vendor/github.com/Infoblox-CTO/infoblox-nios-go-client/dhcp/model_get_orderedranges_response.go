/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetOrderedrangesResponse - struct for GetOrderedrangesResponse
type GetOrderedrangesResponse struct {
	GetOrderedrangesResponseObjectAsResult *GetOrderedrangesResponseObjectAsResult
	Orderedranges                          *Orderedranges
}

// GetOrderedrangesResponseObjectAsResultAsGetOrderedrangesResponse is a convenience function that returns GetOrderedrangesResponseObjectAsResult wrapped in GetOrderedrangesResponse
func GetOrderedrangesResponseObjectAsResultAsGetOrderedrangesResponse(v *GetOrderedrangesResponseObjectAsResult) GetOrderedrangesResponse {
	return GetOrderedrangesResponse{
		GetOrderedrangesResponseObjectAsResult: v,
	}
}

// OrderedrangesAsGetOrderedrangesResponse is a convenience function that returns Orderedranges wrapped in GetOrderedrangesResponse
func OrderedrangesAsGetOrderedrangesResponse(v *Orderedranges) GetOrderedrangesResponse {
	return GetOrderedrangesResponse{
		Orderedranges: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetOrderedrangesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetOrderedrangesResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetOrderedrangesResponseObjectAsResult)
	if err == nil {
		jsonGetOrderedrangesResponseObjectAsResult, _ := json.Marshal(dst.GetOrderedrangesResponseObjectAsResult)
		if string(jsonGetOrderedrangesResponseObjectAsResult) == "{}" { // empty struct
			dst.GetOrderedrangesResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetOrderedrangesResponseObjectAsResult = nil
	}

	// try to unmarshal data into Orderedranges
	err = newStrictDecoder(data).Decode(&dst.Orderedranges)
	if err == nil {
		jsonOrderedranges, _ := json.Marshal(dst.Orderedranges)
		if string(jsonOrderedranges) == "{}" { // empty struct
			dst.Orderedranges = nil
		} else {
			match++
		}
	} else {
		dst.Orderedranges = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetOrderedrangesResponseObjectAsResult = nil
		dst.Orderedranges = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetOrderedrangesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetOrderedrangesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetOrderedrangesResponse) MarshalJSON() ([]byte, error) {
	if src.GetOrderedrangesResponseObjectAsResult != nil {
		return json.Marshal(&src.GetOrderedrangesResponseObjectAsResult)
	}

	if src.Orderedranges != nil {
		return json.Marshal(&src.Orderedranges)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetOrderedrangesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetOrderedrangesResponseObjectAsResult != nil {
		return obj.GetOrderedrangesResponseObjectAsResult
	}

	if obj.Orderedranges != nil {
		return obj.Orderedranges
	}

	// all schemas are nil
	return nil
}

type NullableGetOrderedrangesResponse struct {
	value *GetOrderedrangesResponse
	isSet bool
}

func (v NullableGetOrderedrangesResponse) Get() *GetOrderedrangesResponse {
	return v.value
}

func (v *NullableGetOrderedrangesResponse) Set(val *GetOrderedrangesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrderedrangesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrderedrangesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrderedrangesResponse(val *GetOrderedrangesResponse) *NullableGetOrderedrangesResponse {
	return &NullableGetOrderedrangesResponse{value: val, isSet: true}
}

func (v NullableGetOrderedrangesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrderedrangesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
