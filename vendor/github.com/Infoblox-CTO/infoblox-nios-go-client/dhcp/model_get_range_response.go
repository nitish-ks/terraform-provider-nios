/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetRangeResponse - struct for GetRangeResponse
type GetRangeResponse struct {
	GetRangeResponseObjectAsResult *GetRangeResponseObjectAsResult
	Range                          *Range
}

// GetRangeResponseObjectAsResultAsGetRangeResponse is a convenience function that returns GetRangeResponseObjectAsResult wrapped in GetRangeResponse
func GetRangeResponseObjectAsResultAsGetRangeResponse(v *GetRangeResponseObjectAsResult) GetRangeResponse {
	return GetRangeResponse{
		GetRangeResponseObjectAsResult: v,
	}
}

// RangeAsGetRangeResponse is a convenience function that returns Range wrapped in GetRangeResponse
func RangeAsGetRangeResponse(v *Range) GetRangeResponse {
	return GetRangeResponse{
		Range: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRangeResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRangeResponseObjectAsResult)
	if err == nil {
		jsonGetRangeResponseObjectAsResult, _ := json.Marshal(dst.GetRangeResponseObjectAsResult)
		if string(jsonGetRangeResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRangeResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRangeResponseObjectAsResult = nil
	}

	// try to unmarshal data into Range
	err = newStrictDecoder(data).Decode(&dst.Range)
	if err == nil {
		jsonRange, _ := json.Marshal(dst.Range)
		if string(jsonRange) == "{}" { // empty struct
			dst.Range = nil
		} else {
			match++
		}
	} else {
		dst.Range = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRangeResponseObjectAsResult = nil
		dst.Range = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRangeResponse) MarshalJSON() ([]byte, error) {
	if src.GetRangeResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRangeResponseObjectAsResult)
	}

	if src.Range != nil {
		return json.Marshal(&src.Range)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRangeResponseObjectAsResult != nil {
		return obj.GetRangeResponseObjectAsResult
	}

	if obj.Range != nil {
		return obj.Range
	}

	// all schemas are nil
	return nil
}

type NullableGetRangeResponse struct {
	value *GetRangeResponse
	isSet bool
}

func (v NullableGetRangeResponse) Get() *GetRangeResponse {
	return v.value
}

func (v *NullableGetRangeResponse) Set(val *GetRangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRangeResponse(val *GetRangeResponse) *NullableGetRangeResponse {
	return &NullableGetRangeResponse{value: val, isSet: true}
}

func (v NullableGetRangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
