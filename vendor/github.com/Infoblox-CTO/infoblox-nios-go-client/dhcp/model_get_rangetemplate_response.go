/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetRangetemplateResponse - struct for GetRangetemplateResponse
type GetRangetemplateResponse struct {
	GetRangetemplateResponseObjectAsResult *GetRangetemplateResponseObjectAsResult
	Rangetemplate                          *Rangetemplate
}

// GetRangetemplateResponseObjectAsResultAsGetRangetemplateResponse is a convenience function that returns GetRangetemplateResponseObjectAsResult wrapped in GetRangetemplateResponse
func GetRangetemplateResponseObjectAsResultAsGetRangetemplateResponse(v *GetRangetemplateResponseObjectAsResult) GetRangetemplateResponse {
	return GetRangetemplateResponse{
		GetRangetemplateResponseObjectAsResult: v,
	}
}

// RangetemplateAsGetRangetemplateResponse is a convenience function that returns Rangetemplate wrapped in GetRangetemplateResponse
func RangetemplateAsGetRangetemplateResponse(v *Rangetemplate) GetRangetemplateResponse {
	return GetRangetemplateResponse{
		Rangetemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRangetemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRangetemplateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRangetemplateResponseObjectAsResult)
	if err == nil {
		jsonGetRangetemplateResponseObjectAsResult, _ := json.Marshal(dst.GetRangetemplateResponseObjectAsResult)
		if string(jsonGetRangetemplateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRangetemplateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRangetemplateResponseObjectAsResult = nil
	}

	// try to unmarshal data into Rangetemplate
	err = newStrictDecoder(data).Decode(&dst.Rangetemplate)
	if err == nil {
		jsonRangetemplate, _ := json.Marshal(dst.Rangetemplate)
		if string(jsonRangetemplate) == "{}" { // empty struct
			dst.Rangetemplate = nil
		} else {
			match++
		}
	} else {
		dst.Rangetemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRangetemplateResponseObjectAsResult = nil
		dst.Rangetemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRangetemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRangetemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRangetemplateResponse) MarshalJSON() ([]byte, error) {
	if src.GetRangetemplateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRangetemplateResponseObjectAsResult)
	}

	if src.Rangetemplate != nil {
		return json.Marshal(&src.Rangetemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRangetemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRangetemplateResponseObjectAsResult != nil {
		return obj.GetRangetemplateResponseObjectAsResult
	}

	if obj.Rangetemplate != nil {
		return obj.Rangetemplate
	}

	// all schemas are nil
	return nil
}

type NullableGetRangetemplateResponse struct {
	value *GetRangetemplateResponse
	isSet bool
}

func (v NullableGetRangetemplateResponse) Get() *GetRangetemplateResponse {
	return v.value
}

func (v *NullableGetRangetemplateResponse) Set(val *GetRangetemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRangetemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRangetemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRangetemplateResponse(val *GetRangetemplateResponse) *NullableGetRangetemplateResponse {
	return &NullableGetRangetemplateResponse{value: val, isSet: true}
}

func (v NullableGetRangetemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRangetemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
