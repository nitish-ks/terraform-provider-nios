/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetRoaminghostResponse - struct for GetRoaminghostResponse
type GetRoaminghostResponse struct {
	GetRoaminghostResponseObjectAsResult *GetRoaminghostResponseObjectAsResult
	Roaminghost                          *Roaminghost
}

// GetRoaminghostResponseObjectAsResultAsGetRoaminghostResponse is a convenience function that returns GetRoaminghostResponseObjectAsResult wrapped in GetRoaminghostResponse
func GetRoaminghostResponseObjectAsResultAsGetRoaminghostResponse(v *GetRoaminghostResponseObjectAsResult) GetRoaminghostResponse {
	return GetRoaminghostResponse{
		GetRoaminghostResponseObjectAsResult: v,
	}
}

// RoaminghostAsGetRoaminghostResponse is a convenience function that returns Roaminghost wrapped in GetRoaminghostResponse
func RoaminghostAsGetRoaminghostResponse(v *Roaminghost) GetRoaminghostResponse {
	return GetRoaminghostResponse{
		Roaminghost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRoaminghostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRoaminghostResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRoaminghostResponseObjectAsResult)
	if err == nil {
		jsonGetRoaminghostResponseObjectAsResult, _ := json.Marshal(dst.GetRoaminghostResponseObjectAsResult)
		if string(jsonGetRoaminghostResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRoaminghostResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRoaminghostResponseObjectAsResult = nil
	}

	// try to unmarshal data into Roaminghost
	err = newStrictDecoder(data).Decode(&dst.Roaminghost)
	if err == nil {
		jsonRoaminghost, _ := json.Marshal(dst.Roaminghost)
		if string(jsonRoaminghost) == "{}" { // empty struct
			dst.Roaminghost = nil
		} else {
			match++
		}
	} else {
		dst.Roaminghost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRoaminghostResponseObjectAsResult = nil
		dst.Roaminghost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRoaminghostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRoaminghostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRoaminghostResponse) MarshalJSON() ([]byte, error) {
	if src.GetRoaminghostResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRoaminghostResponseObjectAsResult)
	}

	if src.Roaminghost != nil {
		return json.Marshal(&src.Roaminghost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRoaminghostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRoaminghostResponseObjectAsResult != nil {
		return obj.GetRoaminghostResponseObjectAsResult
	}

	if obj.Roaminghost != nil {
		return obj.Roaminghost
	}

	// all schemas are nil
	return nil
}

type NullableGetRoaminghostResponse struct {
	value *GetRoaminghostResponse
	isSet bool
}

func (v NullableGetRoaminghostResponse) Get() *GetRoaminghostResponse {
	return v.value
}

func (v *NullableGetRoaminghostResponse) Set(val *GetRoaminghostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRoaminghostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRoaminghostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRoaminghostResponse(val *GetRoaminghostResponse) *NullableGetRoaminghostResponse {
	return &NullableGetRoaminghostResponse{value: val, isSet: true}
}

func (v NullableGetRoaminghostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRoaminghostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
