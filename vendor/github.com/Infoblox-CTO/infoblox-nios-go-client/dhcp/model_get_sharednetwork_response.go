/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetSharednetworkResponse - struct for GetSharednetworkResponse
type GetSharednetworkResponse struct {
	GetSharednetworkResponseObjectAsResult *GetSharednetworkResponseObjectAsResult
	Sharednetwork                          *Sharednetwork
}

// GetSharednetworkResponseObjectAsResultAsGetSharednetworkResponse is a convenience function that returns GetSharednetworkResponseObjectAsResult wrapped in GetSharednetworkResponse
func GetSharednetworkResponseObjectAsResultAsGetSharednetworkResponse(v *GetSharednetworkResponseObjectAsResult) GetSharednetworkResponse {
	return GetSharednetworkResponse{
		GetSharednetworkResponseObjectAsResult: v,
	}
}

// SharednetworkAsGetSharednetworkResponse is a convenience function that returns Sharednetwork wrapped in GetSharednetworkResponse
func SharednetworkAsGetSharednetworkResponse(v *Sharednetwork) GetSharednetworkResponse {
	return GetSharednetworkResponse{
		Sharednetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharednetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharednetworkResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharednetworkResponseObjectAsResult)
	if err == nil {
		jsonGetSharednetworkResponseObjectAsResult, _ := json.Marshal(dst.GetSharednetworkResponseObjectAsResult)
		if string(jsonGetSharednetworkResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharednetworkResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharednetworkResponseObjectAsResult = nil
	}

	// try to unmarshal data into Sharednetwork
	err = newStrictDecoder(data).Decode(&dst.Sharednetwork)
	if err == nil {
		jsonSharednetwork, _ := json.Marshal(dst.Sharednetwork)
		if string(jsonSharednetwork) == "{}" { // empty struct
			dst.Sharednetwork = nil
		} else {
			match++
		}
	} else {
		dst.Sharednetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharednetworkResponseObjectAsResult = nil
		dst.Sharednetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharednetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharednetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharednetworkResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharednetworkResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharednetworkResponseObjectAsResult)
	}

	if src.Sharednetwork != nil {
		return json.Marshal(&src.Sharednetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharednetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharednetworkResponseObjectAsResult != nil {
		return obj.GetSharednetworkResponseObjectAsResult
	}

	if obj.Sharednetwork != nil {
		return obj.Sharednetwork
	}

	// all schemas are nil
	return nil
}

type NullableGetSharednetworkResponse struct {
	value *GetSharednetworkResponse
	isSet bool
}

func (v NullableGetSharednetworkResponse) Get() *GetSharednetworkResponse {
	return v.value
}

func (v *NullableGetSharednetworkResponse) Set(val *GetSharednetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharednetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharednetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharednetworkResponse(val *GetSharednetworkResponse) *NullableGetSharednetworkResponse {
	return &NullableGetSharednetworkResponse{value: val, isSet: true}
}

func (v NullableGetSharednetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharednetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
