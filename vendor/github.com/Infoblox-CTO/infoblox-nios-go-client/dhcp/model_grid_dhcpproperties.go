/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the GridDhcpproperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridDhcpproperties{}

// GridDhcpproperties struct for GridDhcpproperties
type GridDhcpproperties struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The Grid-level authority flag. This flag specifies whether a DHCP server is authoritative for a domain.
	Authority *bool `json:"authority,omitempty"`
	// The name of a file that DHCP clients need to boot. Some DHCP clients use BOOTP (bootstrap protocol) or include the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The name of the server on which a boot file is stored.
	Bootserver *string `json:"bootserver,omitempty"`
	// The Grid-level capture hostname flag. Set this flag to capture the hostname and lease time when assigning a fixed address.
	CaptureHostname *bool `json:"capture_hostname,omitempty"`
	// The member DDNS domain name value.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// Determines if the ability of a DHCP server to generate a host name and update DNS with this host name when it receives a DHCP REQUEST message that does not include a host name is enabled or not.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// Determines the retry interval when the DHCP server makes repeated attempts to send DDNS updates to a DNS server.
	DdnsRetryInterval *int64 `json:"ddns_retry_interval,omitempty"`
	// Determines that only the DHCP server is allowed to update DNS, regardless of the requests from the DHCP clients.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DDNS TTL (Dynamic DNS Time To Live) value specifies the number of seconds an IP address for the name is cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// Determines if the Grid DHCP server's ability to update the A and PTR records with a fixed address is enabled or not.
	DdnsUpdateFixedAddresses *bool `json:"ddns_update_fixed_addresses,omitempty"`
	// Determines if support for option 81 is enabled or not.
	DdnsUseOption81 *bool `json:"ddns_use_option81,omitempty"`
	// Determines if deny BOOTP is enabled or not.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// If set to True, NAC filters will be disabled on the Infoblox Grid.
	DisableAllNacFilters *bool `json:"disable_all_nac_filters,omitempty"`
	// The update style for dynamic DNS updates.
	DnsUpdateStyle *string `json:"dns_update_style,omitempty"`
	// The Grid-level email_list value. Specify an e-mail address to which you want the Infoblox appliance to send e-mail notifications when the DHCP address usage for the grid crosses a threshold. You can create a list of several e-mail addresses.
	EmailList []string `json:"email_list,omitempty"`
	// Determines if the member DHCP server's ability to send DDNS updates is enabled or not.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Represents the watermarks above or below which address usage in a network is unexpected and might warrant your attention.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines if e-mail warnings are enabled or disabled. When DHCP threshold is enabled and DHCP address usage crosses a watermark threshold, the appliance sends an e-mail notification to an administrator.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Determines if the fingerprint feature is enabled or not. If you enable this feature, the server will match a fingerprint for incoming lease requests.
	EnableFingerprint *bool `json:"enable_fingerprint,omitempty"`
	// Determines whether all appliances are enabled to receive GSS-TSIG authenticated updates from DHCP clients.
	EnableGssTsig *bool `json:"enable_gss_tsig,omitempty"`
	// Determines if the Grid-level host name rewrite feature is enabled or not.
	EnableHostnameRewrite *bool `json:"enable_hostname_rewrite,omitempty"`
	// Determines if lease query is allowed or not.
	EnableLeasequery *bool `json:"enable_leasequery,omitempty"`
	// Determines if DHCP servers in a Grid support roaming hosts or not.
	EnableRoamingHosts *bool `json:"enable_roaming_hosts,omitempty"`
	// Determined if the SNMP warnings on Grid-level are enabled or not. When DHCP threshold is enabled and DHCP address usage crosses a watermark threshold, the appliance sends an SNMP trap to the trap receiver that you defined you defined at the Grid member level.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// The format option for Option 82 logging.
	FormatLogOption82 *string `json:"format_log_option_82,omitempty"`
	// Determines the Grid that serves DHCP. This specifies a group of Infoblox appliances that are connected together to provide a single point of device administration and service configuration in a secure, highly available environment.
	Grid *string `json:"grid,omitempty"`
	// The list of GSS-TSIG keys for a Grid DHCP object.
	GssTsigKeys []map[string]interface{} `json:"gss_tsig_keys,omitempty"`
	// Determines the high watermark value of a Grid DHCP server. If the percentage of allocated addresses exceeds this watermark, the appliance makes a syslog entry and sends an e-mail notification (if enabled). Specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// Determines the high watermark reset value of a member DHCP server. If the percentage of allocated addresses drops below this value, a corresponding SNMP trap is reset. Specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// The name of the default hostname rewrite policy, which is also in the protocol_hostname_rewrite_policies array.
	HostnameRewritePolicy *string `json:"hostname_rewrite_policy,omitempty"`
	// Determines if the ignore DHCP option list request flag of a Grid DHCP is enabled or not. If this flag is set to true all available DHCP options will be returned to the client.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Indicates whether the appliance will ignore DHCP client IDs or MAC addresses. Valid values are \"NONE\", \"CLIENT\", or \"MACADDR\". The default is \"NONE\".
	IgnoreId *string `json:"ignore_id,omitempty"`
	// A list of MAC addresses the appliance will ignore.
	IgnoreMacAddresses []string `json:"ignore_mac_addresses,omitempty"`
	// Determines if the fixed address configuration takes effect immediately without DHCP service restart or not.
	ImmediateFaConfiguration *bool `json:"immediate_fa_configuration,omitempty"`
	// Determines if the IPv6 host name and lease time is captured or not while assigning a fixed address.
	Ipv6CaptureHostname *bool `json:"ipv6_capture_hostname,omitempty"`
	// The Grid-level DDNS domain name value.
	Ipv6DdnsDomainname *string `json:"ipv6_ddns_domainname,omitempty"`
	// Controls whether the FQDN option sent by the client is to be used, or if the server can automatically generate the FQDN.
	Ipv6DdnsEnableOptionFqdn *bool `json:"ipv6_ddns_enable_option_fqdn,omitempty"`
	// Determines if the server always updates DNS or updates only if requested by the client.
	Ipv6DdnsServerAlwaysUpdates *bool `json:"ipv6_ddns_server_always_updates,omitempty"`
	// The Grid-level IPv6 DDNS TTL value.
	Ipv6DdnsTtl *int64 `json:"ipv6_ddns_ttl,omitempty"`
	// The Grid-level IPv6 default prefix.
	Ipv6DefaultPrefix *string `json:"ipv6_default_prefix,omitempty"`
	// The update style for dynamic DHCPv6 DNS updates.
	Ipv6DnsUpdateStyle *string `json:"ipv6_dns_update_style,omitempty"`
	// The IPv6 domain name.
	Ipv6DomainName *string `json:"ipv6_domain_name,omitempty"`
	// The comma separated list of domain name server addresses in IPv6 address format.
	Ipv6DomainNameServers []string `json:"ipv6_domain_name_servers,omitempty"`
	// Determines if sending DDNS updates by the DHCPv6 server is enabled or not.
	Ipv6EnableDdns *bool `json:"ipv6_enable_ddns,omitempty"`
	// Determines whether the all appliances are enabled to receive GSS-TSIG authenticated updates from DHCPv6 clients.
	Ipv6EnableGssTsig *bool `json:"ipv6_enable_gss_tsig,omitempty"`
	// Indicates whether DHCPv6 lease scavenging is enabled or disabled.
	Ipv6EnableLeaseScavenging *bool `json:"ipv6_enable_lease_scavenging,omitempty"`
	// Determines if the DHCPv6 server retries failed dynamic DNS updates or not.
	Ipv6EnableRetryUpdates *bool `json:"ipv6_enable_retry_updates,omitempty"`
	// Determines if the server generates the hostname if it is not sent by the client.
	Ipv6GenerateHostname *bool `json:"ipv6_generate_hostname,omitempty"`
	// The list of GSS-TSIG keys for a Grid DHCPv6 object.
	Ipv6GssTsigKeys []map[string]interface{} `json:"ipv6_gss_tsig_keys,omitempty"`
	// The IPv6 address or FQDN of the Kerberos server for DHCPv6 GSS-TSIG authentication.
	Ipv6KdcServer *string `json:"ipv6_kdc_server,omitempty"`
	// The Grid-level grace period (in seconds) to keep an expired lease before it is deleted by the scavenging process.
	Ipv6LeaseScavengingTime *int64 `json:"ipv6_lease_scavenging_time,omitempty"`
	// The Grid-level Microsoft client DHCP IPv6 code page value. This value is the hostname translation code page for Microsoft DHCP IPv6 clients.
	Ipv6MicrosoftCodePage *string `json:"ipv6_microsoft_code_page,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCPv6 options associated with the object.
	Ipv6Options []GridDhcppropertiesIpv6Options `json:"ipv6_options,omitempty"`
	// The Grid-level list of IPv6 prefixes.
	Ipv6Prefixes []string `json:"ipv6_prefixes,omitempty"`
	// Determines if the IPv6 recycle leases feature is enabled or not. If the feature is enabled, leases are kept in the Recycle Bin until one week after expiration. When the feature is disabled, the leases are irrecoverably deleted.
	Ipv6RecycleLeases *bool `json:"ipv6_recycle_leases,omitempty"`
	// Enable binding for expired DHCPv6 leases.
	Ipv6RememberExpiredClientAssociation *bool `json:"ipv6_remember_expired_client_association,omitempty"`
	// Determines the retry interval when the member DHCPv6 server makes repeated attempts to send DDNS updates to a DNS server.
	Ipv6RetryUpdatesInterval *int64 `json:"ipv6_retry_updates_interval,omitempty"`
	// The Grid-level TXT record handling value. This value specifies how DHCPv6 should treat the TXT records when performing DNS updates.
	Ipv6TxtRecordHandling *string `json:"ipv6_txt_record_handling,omitempty"`
	// Controls whether the DHCPv6 server updates DNS when an IPv6 DHCP lease is renewed.
	Ipv6UpdateDnsOnLeaseRenewal *bool `json:"ipv6_update_dns_on_lease_renewal,omitempty"`
	// The IPv4 address or FQDN of the Kerberos server for DHCPv4 GSS-TSIG authentication.
	KdcServer *string `json:"kdc_server,omitempty"`
	// The Grid member on which you want to store the DHCP lease history log. Infoblox recommends that you dedicate a member other than the master as a logging member. If possible, use this member solely for storing the DHCP lease history log. If you do not select a member, no logging can occur.
	LeaseLoggingMember *string `json:"lease_logging_member,omitempty"`
	// Defines how the appliance releases DHCP leases. Valid values are \"RELEASE_MACHING_ID\", \"NEVER_RELEASE\", or \"ONE_LEASE_PER_CLIENT\". The default is \"RELEASE_MATCHING_ID\".
	LeasePerClientSettings *string `json:"lease_per_client_settings,omitempty"`
	// Determines the lease scavenging time value. When this field is set, the appliance permanently deletes the free and backup leases, that remain in the database beyond a specified period of time. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *int32 `json:"lease_scavenge_time,omitempty"`
	// This value specifies whether the Grid DHCP members log lease events is enabled or not.
	LogLeaseEvents *bool `json:"log_lease_events,omitempty"`
	// This field contains the logic filters to be applied on the Infoblox Grid. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []GridDhcppropertiesLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// Determines the low watermark value. If the percent of allocated addresses drops below this watermark, the appliance makes a syslog entry and if enabled, sends an e-mail notification.
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// Determines the low watermark reset value.If the percentage of allocated addresses exceeds this value, a corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// The Microsoft client DHCP IPv4 code page value of a Grid. This value is the hostname translation code page for Microsoft DHCP IPv4 clients.
	MicrosoftCodePage *string `json:"microsoft_code_page,omitempty"`
	// The next server value of a DHCP server. This value is the IP address or name of the boot file server on which the boot file is stored.
	Nextserver *string `json:"nextserver,omitempty"`
	// The list of option 60 match rules.
	Option60MatchRules []GridDhcppropertiesOption60MatchRules `json:"option60_match_rules,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object. Note that WAPI does not return special options 'routers', 'domain-name-servers', 'domain-name' and 'broadcast-address' with empty values for this object.
	Options []GridDhcppropertiesOptions `json:"options,omitempty"`
	// Specifies the number of pings that the Infoblox appliance sends to an IP address to verify that it is not in use. Values are range is from 0 to 10, where 0 disables pings.
	PingCount *int64 `json:"ping_count,omitempty"`
	// Indicates the number of milliseconds the appliance waits for a response to its ping. Valid values are 100, 500, 1000, 2000, 3000, 4000 and 5000 milliseconds.
	PingTimeout *int64 `json:"ping_timeout,omitempty"`
	// The preferred lifetime value.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The Prefix length mode for DHCPv6.
	PrefixLengthMode *string `json:"prefix_length_mode,omitempty"`
	// The list of hostname rewrite policies.
	ProtocolHostnameRewritePolicies []map[string]interface{} `json:"protocol_hostname_rewrite_policies,omitempty"`
	// Specifies the duration of time it takes a host to connect to a boot server, such as a TFTP server, and download the file it needs to boot. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// Determines if the recycle leases feature is enabled or not. If you enabled this feature, and then delete a DHCP range, the appliance stores active leases from this range up to one week after the leases expires.
	RecycleLeases  *bool                             `json:"recycle_leases,omitempty"`
	RestartSetting *GridDhcppropertiesRestartSetting `json:"restart_setting,omitempty"`
	// Indicates whether the DHCP server makes repeated attempts to send DDNS updates to a DNS server.
	RetryDdnsUpdates *bool `json:"retry_ddns_updates,omitempty"`
	// The syslog facility is the location on the syslog server to which you want to sort the syslog messages.
	SyslogFacility *string `json:"syslog_facility,omitempty"`
	// The Grid-level TXT record handling value. This value specifies how DHCP should treat the TXT records when performing DNS updates.
	TxtRecordHandling *string `json:"txt_record_handling,omitempty"`
	// Controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// The valid lifetime for the Grid members.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewGridDhcpproperties instantiates a new GridDhcpproperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridDhcpproperties() *GridDhcpproperties {
	this := GridDhcpproperties{}
	return &this
}

// NewGridDhcppropertiesWithDefaults instantiates a new GridDhcpproperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridDhcppropertiesWithDefaults() *GridDhcpproperties {
	this := GridDhcpproperties{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GridDhcpproperties) SetRef(v string) {
	o.Ref = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetAuthority() bool {
	if o == nil || IsNil(o.Authority) {
		var ret bool
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given bool and assigns it to the Authority field.
func (o *GridDhcpproperties) SetAuthority(v bool) {
	o.Authority = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *GridDhcpproperties) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *GridDhcpproperties) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCaptureHostname returns the CaptureHostname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetCaptureHostname() bool {
	if o == nil || IsNil(o.CaptureHostname) {
		var ret bool
		return ret
	}
	return *o.CaptureHostname
}

// GetCaptureHostnameOk returns a tuple with the CaptureHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetCaptureHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptureHostname) {
		return nil, false
	}
	return o.CaptureHostname, true
}

// HasCaptureHostname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasCaptureHostname() bool {
	if o != nil && !IsNil(o.CaptureHostname) {
		return true
	}

	return false
}

// SetCaptureHostname gets a reference to the given bool and assigns it to the CaptureHostname field.
func (o *GridDhcpproperties) SetCaptureHostname(v bool) {
	o.CaptureHostname = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *GridDhcpproperties) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *GridDhcpproperties) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsRetryInterval returns the DdnsRetryInterval field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsRetryInterval() int64 {
	if o == nil || IsNil(o.DdnsRetryInterval) {
		var ret int64
		return ret
	}
	return *o.DdnsRetryInterval
}

// GetDdnsRetryIntervalOk returns a tuple with the DdnsRetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsRetryIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsRetryInterval) {
		return nil, false
	}
	return o.DdnsRetryInterval, true
}

// HasDdnsRetryInterval returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsRetryInterval() bool {
	if o != nil && !IsNil(o.DdnsRetryInterval) {
		return true
	}

	return false
}

// SetDdnsRetryInterval gets a reference to the given int64 and assigns it to the DdnsRetryInterval field.
func (o *GridDhcpproperties) SetDdnsRetryInterval(v int64) {
	o.DdnsRetryInterval = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *GridDhcpproperties) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *GridDhcpproperties) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDdnsUpdateFixedAddresses returns the DdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateFixedAddresses
}

// GetDdnsUpdateFixedAddressesOk returns a tuple with the DdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.DdnsUpdateFixedAddresses, true
}

// HasDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.DdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the DdnsUpdateFixedAddresses field.
func (o *GridDhcpproperties) SetDdnsUpdateFixedAddresses(v bool) {
	o.DdnsUpdateFixedAddresses = &v
}

// GetDdnsUseOption81 returns the DdnsUseOption81 field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDdnsUseOption81() bool {
	if o == nil || IsNil(o.DdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.DdnsUseOption81
}

// GetDdnsUseOption81Ok returns a tuple with the DdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseOption81) {
		return nil, false
	}
	return o.DdnsUseOption81, true
}

// HasDdnsUseOption81 returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDdnsUseOption81() bool {
	if o != nil && !IsNil(o.DdnsUseOption81) {
		return true
	}

	return false
}

// SetDdnsUseOption81 gets a reference to the given bool and assigns it to the DdnsUseOption81 field.
func (o *GridDhcpproperties) SetDdnsUseOption81(v bool) {
	o.DdnsUseOption81 = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *GridDhcpproperties) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDisableAllNacFilters returns the DisableAllNacFilters field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDisableAllNacFilters() bool {
	if o == nil || IsNil(o.DisableAllNacFilters) {
		var ret bool
		return ret
	}
	return *o.DisableAllNacFilters
}

// GetDisableAllNacFiltersOk returns a tuple with the DisableAllNacFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDisableAllNacFiltersOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAllNacFilters) {
		return nil, false
	}
	return o.DisableAllNacFilters, true
}

// HasDisableAllNacFilters returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDisableAllNacFilters() bool {
	if o != nil && !IsNil(o.DisableAllNacFilters) {
		return true
	}

	return false
}

// SetDisableAllNacFilters gets a reference to the given bool and assigns it to the DisableAllNacFilters field.
func (o *GridDhcpproperties) SetDisableAllNacFilters(v bool) {
	o.DisableAllNacFilters = &v
}

// GetDnsUpdateStyle returns the DnsUpdateStyle field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetDnsUpdateStyle() string {
	if o == nil || IsNil(o.DnsUpdateStyle) {
		var ret string
		return ret
	}
	return *o.DnsUpdateStyle
}

// GetDnsUpdateStyleOk returns a tuple with the DnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetDnsUpdateStyleOk() (*string, bool) {
	if o == nil || IsNil(o.DnsUpdateStyle) {
		return nil, false
	}
	return o.DnsUpdateStyle, true
}

// HasDnsUpdateStyle returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasDnsUpdateStyle() bool {
	if o != nil && !IsNil(o.DnsUpdateStyle) {
		return true
	}

	return false
}

// SetDnsUpdateStyle gets a reference to the given string and assigns it to the DnsUpdateStyle field.
func (o *GridDhcpproperties) SetDnsUpdateStyle(v string) {
	o.DnsUpdateStyle = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *GridDhcpproperties) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *GridDhcpproperties) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *GridDhcpproperties) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *GridDhcpproperties) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnableFingerprint returns the EnableFingerprint field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableFingerprint() bool {
	if o == nil || IsNil(o.EnableFingerprint) {
		var ret bool
		return ret
	}
	return *o.EnableFingerprint
}

// GetEnableFingerprintOk returns a tuple with the EnableFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableFingerprintOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFingerprint) {
		return nil, false
	}
	return o.EnableFingerprint, true
}

// HasEnableFingerprint returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableFingerprint() bool {
	if o != nil && !IsNil(o.EnableFingerprint) {
		return true
	}

	return false
}

// SetEnableFingerprint gets a reference to the given bool and assigns it to the EnableFingerprint field.
func (o *GridDhcpproperties) SetEnableFingerprint(v bool) {
	o.EnableFingerprint = &v
}

// GetEnableGssTsig returns the EnableGssTsig field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableGssTsig() bool {
	if o == nil || IsNil(o.EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.EnableGssTsig
}

// GetEnableGssTsigOk returns a tuple with the EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGssTsig) {
		return nil, false
	}
	return o.EnableGssTsig, true
}

// HasEnableGssTsig returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableGssTsig() bool {
	if o != nil && !IsNil(o.EnableGssTsig) {
		return true
	}

	return false
}

// SetEnableGssTsig gets a reference to the given bool and assigns it to the EnableGssTsig field.
func (o *GridDhcpproperties) SetEnableGssTsig(v bool) {
	o.EnableGssTsig = &v
}

// GetEnableHostnameRewrite returns the EnableHostnameRewrite field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableHostnameRewrite() bool {
	if o == nil || IsNil(o.EnableHostnameRewrite) {
		var ret bool
		return ret
	}
	return *o.EnableHostnameRewrite
}

// GetEnableHostnameRewriteOk returns a tuple with the EnableHostnameRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableHostnameRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHostnameRewrite) {
		return nil, false
	}
	return o.EnableHostnameRewrite, true
}

// HasEnableHostnameRewrite returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableHostnameRewrite() bool {
	if o != nil && !IsNil(o.EnableHostnameRewrite) {
		return true
	}

	return false
}

// SetEnableHostnameRewrite gets a reference to the given bool and assigns it to the EnableHostnameRewrite field.
func (o *GridDhcpproperties) SetEnableHostnameRewrite(v bool) {
	o.EnableHostnameRewrite = &v
}

// GetEnableLeasequery returns the EnableLeasequery field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableLeasequery() bool {
	if o == nil || IsNil(o.EnableLeasequery) {
		var ret bool
		return ret
	}
	return *o.EnableLeasequery
}

// GetEnableLeasequeryOk returns a tuple with the EnableLeasequery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableLeasequeryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLeasequery) {
		return nil, false
	}
	return o.EnableLeasequery, true
}

// HasEnableLeasequery returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableLeasequery() bool {
	if o != nil && !IsNil(o.EnableLeasequery) {
		return true
	}

	return false
}

// SetEnableLeasequery gets a reference to the given bool and assigns it to the EnableLeasequery field.
func (o *GridDhcpproperties) SetEnableLeasequery(v bool) {
	o.EnableLeasequery = &v
}

// GetEnableRoamingHosts returns the EnableRoamingHosts field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableRoamingHosts() bool {
	if o == nil || IsNil(o.EnableRoamingHosts) {
		var ret bool
		return ret
	}
	return *o.EnableRoamingHosts
}

// GetEnableRoamingHostsOk returns a tuple with the EnableRoamingHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableRoamingHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRoamingHosts) {
		return nil, false
	}
	return o.EnableRoamingHosts, true
}

// HasEnableRoamingHosts returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableRoamingHosts() bool {
	if o != nil && !IsNil(o.EnableRoamingHosts) {
		return true
	}

	return false
}

// SetEnableRoamingHosts gets a reference to the given bool and assigns it to the EnableRoamingHosts field.
func (o *GridDhcpproperties) SetEnableRoamingHosts(v bool) {
	o.EnableRoamingHosts = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *GridDhcpproperties) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetFormatLogOption82 returns the FormatLogOption82 field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetFormatLogOption82() string {
	if o == nil || IsNil(o.FormatLogOption82) {
		var ret string
		return ret
	}
	return *o.FormatLogOption82
}

// GetFormatLogOption82Ok returns a tuple with the FormatLogOption82 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetFormatLogOption82Ok() (*string, bool) {
	if o == nil || IsNil(o.FormatLogOption82) {
		return nil, false
	}
	return o.FormatLogOption82, true
}

// HasFormatLogOption82 returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasFormatLogOption82() bool {
	if o != nil && !IsNil(o.FormatLogOption82) {
		return true
	}

	return false
}

// SetFormatLogOption82 gets a reference to the given string and assigns it to the FormatLogOption82 field.
func (o *GridDhcpproperties) SetFormatLogOption82(v string) {
	o.FormatLogOption82 = &v
}

// GetGrid returns the Grid field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetGrid() string {
	if o == nil || IsNil(o.Grid) {
		var ret string
		return ret
	}
	return *o.Grid
}

// GetGridOk returns a tuple with the Grid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetGridOk() (*string, bool) {
	if o == nil || IsNil(o.Grid) {
		return nil, false
	}
	return o.Grid, true
}

// HasGrid returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasGrid() bool {
	if o != nil && !IsNil(o.Grid) {
		return true
	}

	return false
}

// SetGrid gets a reference to the given string and assigns it to the Grid field.
func (o *GridDhcpproperties) SetGrid(v string) {
	o.Grid = &v
}

// GetGssTsigKeys returns the GssTsigKeys field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetGssTsigKeys() []map[string]interface{} {
	if o == nil || IsNil(o.GssTsigKeys) {
		var ret []map[string]interface{}
		return ret
	}
	return o.GssTsigKeys
}

// GetGssTsigKeysOk returns a tuple with the GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetGssTsigKeysOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.GssTsigKeys) {
		return nil, false
	}
	return o.GssTsigKeys, true
}

// HasGssTsigKeys returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasGssTsigKeys() bool {
	if o != nil && !IsNil(o.GssTsigKeys) {
		return true
	}

	return false
}

// SetGssTsigKeys gets a reference to the given []map[string]interface{} and assigns it to the GssTsigKeys field.
func (o *GridDhcpproperties) SetGssTsigKeys(v []map[string]interface{}) {
	o.GssTsigKeys = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *GridDhcpproperties) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *GridDhcpproperties) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetHostnameRewritePolicy returns the HostnameRewritePolicy field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetHostnameRewritePolicy() string {
	if o == nil || IsNil(o.HostnameRewritePolicy) {
		var ret string
		return ret
	}
	return *o.HostnameRewritePolicy
}

// GetHostnameRewritePolicyOk returns a tuple with the HostnameRewritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetHostnameRewritePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewritePolicy) {
		return nil, false
	}
	return o.HostnameRewritePolicy, true
}

// HasHostnameRewritePolicy returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasHostnameRewritePolicy() bool {
	if o != nil && !IsNil(o.HostnameRewritePolicy) {
		return true
	}

	return false
}

// SetHostnameRewritePolicy gets a reference to the given string and assigns it to the HostnameRewritePolicy field.
func (o *GridDhcpproperties) SetHostnameRewritePolicy(v string) {
	o.HostnameRewritePolicy = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *GridDhcpproperties) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIgnoreId returns the IgnoreId field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIgnoreId() string {
	if o == nil || IsNil(o.IgnoreId) {
		var ret string
		return ret
	}
	return *o.IgnoreId
}

// GetIgnoreIdOk returns a tuple with the IgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIgnoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreId) {
		return nil, false
	}
	return o.IgnoreId, true
}

// HasIgnoreId returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIgnoreId() bool {
	if o != nil && !IsNil(o.IgnoreId) {
		return true
	}

	return false
}

// SetIgnoreId gets a reference to the given string and assigns it to the IgnoreId field.
func (o *GridDhcpproperties) SetIgnoreId(v string) {
	o.IgnoreId = &v
}

// GetIgnoreMacAddresses returns the IgnoreMacAddresses field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIgnoreMacAddresses() []string {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		var ret []string
		return ret
	}
	return o.IgnoreMacAddresses
}

// GetIgnoreMacAddressesOk returns a tuple with the IgnoreMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIgnoreMacAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		return nil, false
	}
	return o.IgnoreMacAddresses, true
}

// HasIgnoreMacAddresses returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIgnoreMacAddresses() bool {
	if o != nil && !IsNil(o.IgnoreMacAddresses) {
		return true
	}

	return false
}

// SetIgnoreMacAddresses gets a reference to the given []string and assigns it to the IgnoreMacAddresses field.
func (o *GridDhcpproperties) SetIgnoreMacAddresses(v []string) {
	o.IgnoreMacAddresses = v
}

// GetImmediateFaConfiguration returns the ImmediateFaConfiguration field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetImmediateFaConfiguration() bool {
	if o == nil || IsNil(o.ImmediateFaConfiguration) {
		var ret bool
		return ret
	}
	return *o.ImmediateFaConfiguration
}

// GetImmediateFaConfigurationOk returns a tuple with the ImmediateFaConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetImmediateFaConfigurationOk() (*bool, bool) {
	if o == nil || IsNil(o.ImmediateFaConfiguration) {
		return nil, false
	}
	return o.ImmediateFaConfiguration, true
}

// HasImmediateFaConfiguration returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasImmediateFaConfiguration() bool {
	if o != nil && !IsNil(o.ImmediateFaConfiguration) {
		return true
	}

	return false
}

// SetImmediateFaConfiguration gets a reference to the given bool and assigns it to the ImmediateFaConfiguration field.
func (o *GridDhcpproperties) SetImmediateFaConfiguration(v bool) {
	o.ImmediateFaConfiguration = &v
}

// GetIpv6CaptureHostname returns the Ipv6CaptureHostname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6CaptureHostname() bool {
	if o == nil || IsNil(o.Ipv6CaptureHostname) {
		var ret bool
		return ret
	}
	return *o.Ipv6CaptureHostname
}

// GetIpv6CaptureHostnameOk returns a tuple with the Ipv6CaptureHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6CaptureHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6CaptureHostname) {
		return nil, false
	}
	return o.Ipv6CaptureHostname, true
}

// HasIpv6CaptureHostname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6CaptureHostname() bool {
	if o != nil && !IsNil(o.Ipv6CaptureHostname) {
		return true
	}

	return false
}

// SetIpv6CaptureHostname gets a reference to the given bool and assigns it to the Ipv6CaptureHostname field.
func (o *GridDhcpproperties) SetIpv6CaptureHostname(v bool) {
	o.Ipv6CaptureHostname = &v
}

// GetIpv6DdnsDomainname returns the Ipv6DdnsDomainname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DdnsDomainname() string {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.Ipv6DdnsDomainname
}

// GetIpv6DdnsDomainnameOk returns a tuple with the Ipv6DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		return nil, false
	}
	return o.Ipv6DdnsDomainname, true
}

// HasIpv6DdnsDomainname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DdnsDomainname() bool {
	if o != nil && !IsNil(o.Ipv6DdnsDomainname) {
		return true
	}

	return false
}

// SetIpv6DdnsDomainname gets a reference to the given string and assigns it to the Ipv6DdnsDomainname field.
func (o *GridDhcpproperties) SetIpv6DdnsDomainname(v string) {
	o.Ipv6DdnsDomainname = &v
}

// GetIpv6DdnsEnableOptionFqdn returns the Ipv6DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.Ipv6DdnsEnableOptionFqdn
}

// GetIpv6DdnsEnableOptionFqdnOk returns a tuple with the Ipv6DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.Ipv6DdnsEnableOptionFqdn, true
}

// HasIpv6DdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetIpv6DdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the Ipv6DdnsEnableOptionFqdn field.
func (o *GridDhcpproperties) SetIpv6DdnsEnableOptionFqdn(v bool) {
	o.Ipv6DdnsEnableOptionFqdn = &v
}

// GetIpv6DdnsServerAlwaysUpdates returns the Ipv6DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.Ipv6DdnsServerAlwaysUpdates
}

// GetIpv6DdnsServerAlwaysUpdatesOk returns a tuple with the Ipv6DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.Ipv6DdnsServerAlwaysUpdates, true
}

// HasIpv6DdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetIpv6DdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the Ipv6DdnsServerAlwaysUpdates field.
func (o *GridDhcpproperties) SetIpv6DdnsServerAlwaysUpdates(v bool) {
	o.Ipv6DdnsServerAlwaysUpdates = &v
}

// GetIpv6DdnsTtl returns the Ipv6DdnsTtl field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DdnsTtl() int64 {
	if o == nil || IsNil(o.Ipv6DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.Ipv6DdnsTtl
}

// GetIpv6DdnsTtlOk returns a tuple with the Ipv6DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6DdnsTtl) {
		return nil, false
	}
	return o.Ipv6DdnsTtl, true
}

// HasIpv6DdnsTtl returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DdnsTtl() bool {
	if o != nil && !IsNil(o.Ipv6DdnsTtl) {
		return true
	}

	return false
}

// SetIpv6DdnsTtl gets a reference to the given int64 and assigns it to the Ipv6DdnsTtl field.
func (o *GridDhcpproperties) SetIpv6DdnsTtl(v int64) {
	o.Ipv6DdnsTtl = &v
}

// GetIpv6DefaultPrefix returns the Ipv6DefaultPrefix field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DefaultPrefix() string {
	if o == nil || IsNil(o.Ipv6DefaultPrefix) {
		var ret string
		return ret
	}
	return *o.Ipv6DefaultPrefix
}

// GetIpv6DefaultPrefixOk returns a tuple with the Ipv6DefaultPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DefaultPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DefaultPrefix) {
		return nil, false
	}
	return o.Ipv6DefaultPrefix, true
}

// HasIpv6DefaultPrefix returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DefaultPrefix() bool {
	if o != nil && !IsNil(o.Ipv6DefaultPrefix) {
		return true
	}

	return false
}

// SetIpv6DefaultPrefix gets a reference to the given string and assigns it to the Ipv6DefaultPrefix field.
func (o *GridDhcpproperties) SetIpv6DefaultPrefix(v string) {
	o.Ipv6DefaultPrefix = &v
}

// GetIpv6DnsUpdateStyle returns the Ipv6DnsUpdateStyle field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DnsUpdateStyle() string {
	if o == nil || IsNil(o.Ipv6DnsUpdateStyle) {
		var ret string
		return ret
	}
	return *o.Ipv6DnsUpdateStyle
}

// GetIpv6DnsUpdateStyleOk returns a tuple with the Ipv6DnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DnsUpdateStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DnsUpdateStyle) {
		return nil, false
	}
	return o.Ipv6DnsUpdateStyle, true
}

// HasIpv6DnsUpdateStyle returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DnsUpdateStyle() bool {
	if o != nil && !IsNil(o.Ipv6DnsUpdateStyle) {
		return true
	}

	return false
}

// SetIpv6DnsUpdateStyle gets a reference to the given string and assigns it to the Ipv6DnsUpdateStyle field.
func (o *GridDhcpproperties) SetIpv6DnsUpdateStyle(v string) {
	o.Ipv6DnsUpdateStyle = &v
}

// GetIpv6DomainName returns the Ipv6DomainName field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DomainName() string {
	if o == nil || IsNil(o.Ipv6DomainName) {
		var ret string
		return ret
	}
	return *o.Ipv6DomainName
}

// GetIpv6DomainNameOk returns a tuple with the Ipv6DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DomainName) {
		return nil, false
	}
	return o.Ipv6DomainName, true
}

// HasIpv6DomainName returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DomainName() bool {
	if o != nil && !IsNil(o.Ipv6DomainName) {
		return true
	}

	return false
}

// SetIpv6DomainName gets a reference to the given string and assigns it to the Ipv6DomainName field.
func (o *GridDhcpproperties) SetIpv6DomainName(v string) {
	o.Ipv6DomainName = &v
}

// GetIpv6DomainNameServers returns the Ipv6DomainNameServers field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6DomainNameServers() []string {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		var ret []string
		return ret
	}
	return o.Ipv6DomainNameServers
}

// GetIpv6DomainNameServersOk returns a tuple with the Ipv6DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6DomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		return nil, false
	}
	return o.Ipv6DomainNameServers, true
}

// HasIpv6DomainNameServers returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6DomainNameServers() bool {
	if o != nil && !IsNil(o.Ipv6DomainNameServers) {
		return true
	}

	return false
}

// SetIpv6DomainNameServers gets a reference to the given []string and assigns it to the Ipv6DomainNameServers field.
func (o *GridDhcpproperties) SetIpv6DomainNameServers(v []string) {
	o.Ipv6DomainNameServers = v
}

// GetIpv6EnableDdns returns the Ipv6EnableDdns field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6EnableDdns() bool {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableDdns
}

// GetIpv6EnableDdnsOk returns a tuple with the Ipv6EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6EnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		return nil, false
	}
	return o.Ipv6EnableDdns, true
}

// HasIpv6EnableDdns returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6EnableDdns() bool {
	if o != nil && !IsNil(o.Ipv6EnableDdns) {
		return true
	}

	return false
}

// SetIpv6EnableDdns gets a reference to the given bool and assigns it to the Ipv6EnableDdns field.
func (o *GridDhcpproperties) SetIpv6EnableDdns(v bool) {
	o.Ipv6EnableDdns = &v
}

// GetIpv6EnableGssTsig returns the Ipv6EnableGssTsig field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6EnableGssTsig() bool {
	if o == nil || IsNil(o.Ipv6EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableGssTsig
}

// GetIpv6EnableGssTsigOk returns a tuple with the Ipv6EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6EnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableGssTsig) {
		return nil, false
	}
	return o.Ipv6EnableGssTsig, true
}

// HasIpv6EnableGssTsig returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6EnableGssTsig() bool {
	if o != nil && !IsNil(o.Ipv6EnableGssTsig) {
		return true
	}

	return false
}

// SetIpv6EnableGssTsig gets a reference to the given bool and assigns it to the Ipv6EnableGssTsig field.
func (o *GridDhcpproperties) SetIpv6EnableGssTsig(v bool) {
	o.Ipv6EnableGssTsig = &v
}

// GetIpv6EnableLeaseScavenging returns the Ipv6EnableLeaseScavenging field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6EnableLeaseScavenging() bool {
	if o == nil || IsNil(o.Ipv6EnableLeaseScavenging) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableLeaseScavenging
}

// GetIpv6EnableLeaseScavengingOk returns a tuple with the Ipv6EnableLeaseScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6EnableLeaseScavengingOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableLeaseScavenging) {
		return nil, false
	}
	return o.Ipv6EnableLeaseScavenging, true
}

// HasIpv6EnableLeaseScavenging returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6EnableLeaseScavenging() bool {
	if o != nil && !IsNil(o.Ipv6EnableLeaseScavenging) {
		return true
	}

	return false
}

// SetIpv6EnableLeaseScavenging gets a reference to the given bool and assigns it to the Ipv6EnableLeaseScavenging field.
func (o *GridDhcpproperties) SetIpv6EnableLeaseScavenging(v bool) {
	o.Ipv6EnableLeaseScavenging = &v
}

// GetIpv6EnableRetryUpdates returns the Ipv6EnableRetryUpdates field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6EnableRetryUpdates() bool {
	if o == nil || IsNil(o.Ipv6EnableRetryUpdates) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableRetryUpdates
}

// GetIpv6EnableRetryUpdatesOk returns a tuple with the Ipv6EnableRetryUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6EnableRetryUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableRetryUpdates) {
		return nil, false
	}
	return o.Ipv6EnableRetryUpdates, true
}

// HasIpv6EnableRetryUpdates returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6EnableRetryUpdates() bool {
	if o != nil && !IsNil(o.Ipv6EnableRetryUpdates) {
		return true
	}

	return false
}

// SetIpv6EnableRetryUpdates gets a reference to the given bool and assigns it to the Ipv6EnableRetryUpdates field.
func (o *GridDhcpproperties) SetIpv6EnableRetryUpdates(v bool) {
	o.Ipv6EnableRetryUpdates = &v
}

// GetIpv6GenerateHostname returns the Ipv6GenerateHostname field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6GenerateHostname() bool {
	if o == nil || IsNil(o.Ipv6GenerateHostname) {
		var ret bool
		return ret
	}
	return *o.Ipv6GenerateHostname
}

// GetIpv6GenerateHostnameOk returns a tuple with the Ipv6GenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6GenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6GenerateHostname) {
		return nil, false
	}
	return o.Ipv6GenerateHostname, true
}

// HasIpv6GenerateHostname returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6GenerateHostname() bool {
	if o != nil && !IsNil(o.Ipv6GenerateHostname) {
		return true
	}

	return false
}

// SetIpv6GenerateHostname gets a reference to the given bool and assigns it to the Ipv6GenerateHostname field.
func (o *GridDhcpproperties) SetIpv6GenerateHostname(v bool) {
	o.Ipv6GenerateHostname = &v
}

// GetIpv6GssTsigKeys returns the Ipv6GssTsigKeys field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6GssTsigKeys() []map[string]interface{} {
	if o == nil || IsNil(o.Ipv6GssTsigKeys) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Ipv6GssTsigKeys
}

// GetIpv6GssTsigKeysOk returns a tuple with the Ipv6GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6GssTsigKeysOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Ipv6GssTsigKeys) {
		return nil, false
	}
	return o.Ipv6GssTsigKeys, true
}

// HasIpv6GssTsigKeys returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6GssTsigKeys() bool {
	if o != nil && !IsNil(o.Ipv6GssTsigKeys) {
		return true
	}

	return false
}

// SetIpv6GssTsigKeys gets a reference to the given []map[string]interface{} and assigns it to the Ipv6GssTsigKeys field.
func (o *GridDhcpproperties) SetIpv6GssTsigKeys(v []map[string]interface{}) {
	o.Ipv6GssTsigKeys = v
}

// GetIpv6KdcServer returns the Ipv6KdcServer field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6KdcServer() string {
	if o == nil || IsNil(o.Ipv6KdcServer) {
		var ret string
		return ret
	}
	return *o.Ipv6KdcServer
}

// GetIpv6KdcServerOk returns a tuple with the Ipv6KdcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6KdcServerOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6KdcServer) {
		return nil, false
	}
	return o.Ipv6KdcServer, true
}

// HasIpv6KdcServer returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6KdcServer() bool {
	if o != nil && !IsNil(o.Ipv6KdcServer) {
		return true
	}

	return false
}

// SetIpv6KdcServer gets a reference to the given string and assigns it to the Ipv6KdcServer field.
func (o *GridDhcpproperties) SetIpv6KdcServer(v string) {
	o.Ipv6KdcServer = &v
}

// GetIpv6LeaseScavengingTime returns the Ipv6LeaseScavengingTime field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6LeaseScavengingTime() int64 {
	if o == nil || IsNil(o.Ipv6LeaseScavengingTime) {
		var ret int64
		return ret
	}
	return *o.Ipv6LeaseScavengingTime
}

// GetIpv6LeaseScavengingTimeOk returns a tuple with the Ipv6LeaseScavengingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6LeaseScavengingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6LeaseScavengingTime) {
		return nil, false
	}
	return o.Ipv6LeaseScavengingTime, true
}

// HasIpv6LeaseScavengingTime returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6LeaseScavengingTime() bool {
	if o != nil && !IsNil(o.Ipv6LeaseScavengingTime) {
		return true
	}

	return false
}

// SetIpv6LeaseScavengingTime gets a reference to the given int64 and assigns it to the Ipv6LeaseScavengingTime field.
func (o *GridDhcpproperties) SetIpv6LeaseScavengingTime(v int64) {
	o.Ipv6LeaseScavengingTime = &v
}

// GetIpv6MicrosoftCodePage returns the Ipv6MicrosoftCodePage field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6MicrosoftCodePage() string {
	if o == nil || IsNil(o.Ipv6MicrosoftCodePage) {
		var ret string
		return ret
	}
	return *o.Ipv6MicrosoftCodePage
}

// GetIpv6MicrosoftCodePageOk returns a tuple with the Ipv6MicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6MicrosoftCodePageOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6MicrosoftCodePage) {
		return nil, false
	}
	return o.Ipv6MicrosoftCodePage, true
}

// HasIpv6MicrosoftCodePage returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6MicrosoftCodePage() bool {
	if o != nil && !IsNil(o.Ipv6MicrosoftCodePage) {
		return true
	}

	return false
}

// SetIpv6MicrosoftCodePage gets a reference to the given string and assigns it to the Ipv6MicrosoftCodePage field.
func (o *GridDhcpproperties) SetIpv6MicrosoftCodePage(v string) {
	o.Ipv6MicrosoftCodePage = &v
}

// GetIpv6Options returns the Ipv6Options field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6Options() []GridDhcppropertiesIpv6Options {
	if o == nil || IsNil(o.Ipv6Options) {
		var ret []GridDhcppropertiesIpv6Options
		return ret
	}
	return o.Ipv6Options
}

// GetIpv6OptionsOk returns a tuple with the Ipv6Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6OptionsOk() ([]GridDhcppropertiesIpv6Options, bool) {
	if o == nil || IsNil(o.Ipv6Options) {
		return nil, false
	}
	return o.Ipv6Options, true
}

// HasIpv6Options returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6Options() bool {
	if o != nil && !IsNil(o.Ipv6Options) {
		return true
	}

	return false
}

// SetIpv6Options gets a reference to the given []GridDhcppropertiesIpv6Options and assigns it to the Ipv6Options field.
func (o *GridDhcpproperties) SetIpv6Options(v []GridDhcppropertiesIpv6Options) {
	o.Ipv6Options = v
}

// GetIpv6Prefixes returns the Ipv6Prefixes field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6Prefixes() []string {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		var ret []string
		return ret
	}
	return o.Ipv6Prefixes
}

// GetIpv6PrefixesOk returns a tuple with the Ipv6Prefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6PrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6Prefixes) {
		return nil, false
	}
	return o.Ipv6Prefixes, true
}

// HasIpv6Prefixes returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6Prefixes() bool {
	if o != nil && !IsNil(o.Ipv6Prefixes) {
		return true
	}

	return false
}

// SetIpv6Prefixes gets a reference to the given []string and assigns it to the Ipv6Prefixes field.
func (o *GridDhcpproperties) SetIpv6Prefixes(v []string) {
	o.Ipv6Prefixes = v
}

// GetIpv6RecycleLeases returns the Ipv6RecycleLeases field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6RecycleLeases() bool {
	if o == nil || IsNil(o.Ipv6RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.Ipv6RecycleLeases
}

// GetIpv6RecycleLeasesOk returns a tuple with the Ipv6RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6RecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6RecycleLeases) {
		return nil, false
	}
	return o.Ipv6RecycleLeases, true
}

// HasIpv6RecycleLeases returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6RecycleLeases() bool {
	if o != nil && !IsNil(o.Ipv6RecycleLeases) {
		return true
	}

	return false
}

// SetIpv6RecycleLeases gets a reference to the given bool and assigns it to the Ipv6RecycleLeases field.
func (o *GridDhcpproperties) SetIpv6RecycleLeases(v bool) {
	o.Ipv6RecycleLeases = &v
}

// GetIpv6RememberExpiredClientAssociation returns the Ipv6RememberExpiredClientAssociation field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6RememberExpiredClientAssociation() bool {
	if o == nil || IsNil(o.Ipv6RememberExpiredClientAssociation) {
		var ret bool
		return ret
	}
	return *o.Ipv6RememberExpiredClientAssociation
}

// GetIpv6RememberExpiredClientAssociationOk returns a tuple with the Ipv6RememberExpiredClientAssociation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6RememberExpiredClientAssociationOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6RememberExpiredClientAssociation) {
		return nil, false
	}
	return o.Ipv6RememberExpiredClientAssociation, true
}

// HasIpv6RememberExpiredClientAssociation returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6RememberExpiredClientAssociation() bool {
	if o != nil && !IsNil(o.Ipv6RememberExpiredClientAssociation) {
		return true
	}

	return false
}

// SetIpv6RememberExpiredClientAssociation gets a reference to the given bool and assigns it to the Ipv6RememberExpiredClientAssociation field.
func (o *GridDhcpproperties) SetIpv6RememberExpiredClientAssociation(v bool) {
	o.Ipv6RememberExpiredClientAssociation = &v
}

// GetIpv6RetryUpdatesInterval returns the Ipv6RetryUpdatesInterval field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6RetryUpdatesInterval() int64 {
	if o == nil || IsNil(o.Ipv6RetryUpdatesInterval) {
		var ret int64
		return ret
	}
	return *o.Ipv6RetryUpdatesInterval
}

// GetIpv6RetryUpdatesIntervalOk returns a tuple with the Ipv6RetryUpdatesInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6RetryUpdatesIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6RetryUpdatesInterval) {
		return nil, false
	}
	return o.Ipv6RetryUpdatesInterval, true
}

// HasIpv6RetryUpdatesInterval returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6RetryUpdatesInterval() bool {
	if o != nil && !IsNil(o.Ipv6RetryUpdatesInterval) {
		return true
	}

	return false
}

// SetIpv6RetryUpdatesInterval gets a reference to the given int64 and assigns it to the Ipv6RetryUpdatesInterval field.
func (o *GridDhcpproperties) SetIpv6RetryUpdatesInterval(v int64) {
	o.Ipv6RetryUpdatesInterval = &v
}

// GetIpv6TxtRecordHandling returns the Ipv6TxtRecordHandling field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6TxtRecordHandling() string {
	if o == nil || IsNil(o.Ipv6TxtRecordHandling) {
		var ret string
		return ret
	}
	return *o.Ipv6TxtRecordHandling
}

// GetIpv6TxtRecordHandlingOk returns a tuple with the Ipv6TxtRecordHandling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6TxtRecordHandlingOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6TxtRecordHandling) {
		return nil, false
	}
	return o.Ipv6TxtRecordHandling, true
}

// HasIpv6TxtRecordHandling returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6TxtRecordHandling() bool {
	if o != nil && !IsNil(o.Ipv6TxtRecordHandling) {
		return true
	}

	return false
}

// SetIpv6TxtRecordHandling gets a reference to the given string and assigns it to the Ipv6TxtRecordHandling field.
func (o *GridDhcpproperties) SetIpv6TxtRecordHandling(v string) {
	o.Ipv6TxtRecordHandling = &v
}

// GetIpv6UpdateDnsOnLeaseRenewal returns the Ipv6UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetIpv6UpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.Ipv6UpdateDnsOnLeaseRenewal
}

// GetIpv6UpdateDnsOnLeaseRenewalOk returns a tuple with the Ipv6UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetIpv6UpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.Ipv6UpdateDnsOnLeaseRenewal, true
}

// HasIpv6UpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasIpv6UpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetIpv6UpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the Ipv6UpdateDnsOnLeaseRenewal field.
func (o *GridDhcpproperties) SetIpv6UpdateDnsOnLeaseRenewal(v bool) {
	o.Ipv6UpdateDnsOnLeaseRenewal = &v
}

// GetKdcServer returns the KdcServer field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetKdcServer() string {
	if o == nil || IsNil(o.KdcServer) {
		var ret string
		return ret
	}
	return *o.KdcServer
}

// GetKdcServerOk returns a tuple with the KdcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetKdcServerOk() (*string, bool) {
	if o == nil || IsNil(o.KdcServer) {
		return nil, false
	}
	return o.KdcServer, true
}

// HasKdcServer returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasKdcServer() bool {
	if o != nil && !IsNil(o.KdcServer) {
		return true
	}

	return false
}

// SetKdcServer gets a reference to the given string and assigns it to the KdcServer field.
func (o *GridDhcpproperties) SetKdcServer(v string) {
	o.KdcServer = &v
}

// GetLeaseLoggingMember returns the LeaseLoggingMember field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLeaseLoggingMember() string {
	if o == nil || IsNil(o.LeaseLoggingMember) {
		var ret string
		return ret
	}
	return *o.LeaseLoggingMember
}

// GetLeaseLoggingMemberOk returns a tuple with the LeaseLoggingMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLeaseLoggingMemberOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseLoggingMember) {
		return nil, false
	}
	return o.LeaseLoggingMember, true
}

// HasLeaseLoggingMember returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLeaseLoggingMember() bool {
	if o != nil && !IsNil(o.LeaseLoggingMember) {
		return true
	}

	return false
}

// SetLeaseLoggingMember gets a reference to the given string and assigns it to the LeaseLoggingMember field.
func (o *GridDhcpproperties) SetLeaseLoggingMember(v string) {
	o.LeaseLoggingMember = &v
}

// GetLeasePerClientSettings returns the LeasePerClientSettings field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLeasePerClientSettings() string {
	if o == nil || IsNil(o.LeasePerClientSettings) {
		var ret string
		return ret
	}
	return *o.LeasePerClientSettings
}

// GetLeasePerClientSettingsOk returns a tuple with the LeasePerClientSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLeasePerClientSettingsOk() (*string, bool) {
	if o == nil || IsNil(o.LeasePerClientSettings) {
		return nil, false
	}
	return o.LeasePerClientSettings, true
}

// HasLeasePerClientSettings returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLeasePerClientSettings() bool {
	if o != nil && !IsNil(o.LeasePerClientSettings) {
		return true
	}

	return false
}

// SetLeasePerClientSettings gets a reference to the given string and assigns it to the LeasePerClientSettings field.
func (o *GridDhcpproperties) SetLeasePerClientSettings(v string) {
	o.LeasePerClientSettings = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLeaseScavengeTime() int32 {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret int32
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLeaseScavengeTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given int32 and assigns it to the LeaseScavengeTime field.
func (o *GridDhcpproperties) SetLeaseScavengeTime(v int32) {
	o.LeaseScavengeTime = &v
}

// GetLogLeaseEvents returns the LogLeaseEvents field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLogLeaseEvents() bool {
	if o == nil || IsNil(o.LogLeaseEvents) {
		var ret bool
		return ret
	}
	return *o.LogLeaseEvents
}

// GetLogLeaseEventsOk returns a tuple with the LogLeaseEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLogLeaseEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.LogLeaseEvents) {
		return nil, false
	}
	return o.LogLeaseEvents, true
}

// HasLogLeaseEvents returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLogLeaseEvents() bool {
	if o != nil && !IsNil(o.LogLeaseEvents) {
		return true
	}

	return false
}

// SetLogLeaseEvents gets a reference to the given bool and assigns it to the LogLeaseEvents field.
func (o *GridDhcpproperties) SetLogLeaseEvents(v bool) {
	o.LogLeaseEvents = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLogicFilterRules() []GridDhcppropertiesLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []GridDhcppropertiesLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLogicFilterRulesOk() ([]GridDhcppropertiesLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []GridDhcppropertiesLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *GridDhcpproperties) SetLogicFilterRules(v []GridDhcppropertiesLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *GridDhcpproperties) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *GridDhcpproperties) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMicrosoftCodePage returns the MicrosoftCodePage field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetMicrosoftCodePage() string {
	if o == nil || IsNil(o.MicrosoftCodePage) {
		var ret string
		return ret
	}
	return *o.MicrosoftCodePage
}

// GetMicrosoftCodePageOk returns a tuple with the MicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetMicrosoftCodePageOk() (*string, bool) {
	if o == nil || IsNil(o.MicrosoftCodePage) {
		return nil, false
	}
	return o.MicrosoftCodePage, true
}

// HasMicrosoftCodePage returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasMicrosoftCodePage() bool {
	if o != nil && !IsNil(o.MicrosoftCodePage) {
		return true
	}

	return false
}

// SetMicrosoftCodePage gets a reference to the given string and assigns it to the MicrosoftCodePage field.
func (o *GridDhcpproperties) SetMicrosoftCodePage(v string) {
	o.MicrosoftCodePage = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *GridDhcpproperties) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOption60MatchRules returns the Option60MatchRules field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetOption60MatchRules() []GridDhcppropertiesOption60MatchRules {
	if o == nil || IsNil(o.Option60MatchRules) {
		var ret []GridDhcppropertiesOption60MatchRules
		return ret
	}
	return o.Option60MatchRules
}

// GetOption60MatchRulesOk returns a tuple with the Option60MatchRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetOption60MatchRulesOk() ([]GridDhcppropertiesOption60MatchRules, bool) {
	if o == nil || IsNil(o.Option60MatchRules) {
		return nil, false
	}
	return o.Option60MatchRules, true
}

// HasOption60MatchRules returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasOption60MatchRules() bool {
	if o != nil && !IsNil(o.Option60MatchRules) {
		return true
	}

	return false
}

// SetOption60MatchRules gets a reference to the given []GridDhcppropertiesOption60MatchRules and assigns it to the Option60MatchRules field.
func (o *GridDhcpproperties) SetOption60MatchRules(v []GridDhcppropertiesOption60MatchRules) {
	o.Option60MatchRules = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetOptions() []GridDhcppropertiesOptions {
	if o == nil || IsNil(o.Options) {
		var ret []GridDhcppropertiesOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetOptionsOk() ([]GridDhcppropertiesOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []GridDhcppropertiesOptions and assigns it to the Options field.
func (o *GridDhcpproperties) SetOptions(v []GridDhcppropertiesOptions) {
	o.Options = v
}

// GetPingCount returns the PingCount field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetPingCount() int64 {
	if o == nil || IsNil(o.PingCount) {
		var ret int64
		return ret
	}
	return *o.PingCount
}

// GetPingCountOk returns a tuple with the PingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetPingCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PingCount) {
		return nil, false
	}
	return o.PingCount, true
}

// HasPingCount returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasPingCount() bool {
	if o != nil && !IsNil(o.PingCount) {
		return true
	}

	return false
}

// SetPingCount gets a reference to the given int64 and assigns it to the PingCount field.
func (o *GridDhcpproperties) SetPingCount(v int64) {
	o.PingCount = &v
}

// GetPingTimeout returns the PingTimeout field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetPingTimeout() int64 {
	if o == nil || IsNil(o.PingTimeout) {
		var ret int64
		return ret
	}
	return *o.PingTimeout
}

// GetPingTimeoutOk returns a tuple with the PingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetPingTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.PingTimeout) {
		return nil, false
	}
	return o.PingTimeout, true
}

// HasPingTimeout returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasPingTimeout() bool {
	if o != nil && !IsNil(o.PingTimeout) {
		return true
	}

	return false
}

// SetPingTimeout gets a reference to the given int64 and assigns it to the PingTimeout field.
func (o *GridDhcpproperties) SetPingTimeout(v int64) {
	o.PingTimeout = &v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *GridDhcpproperties) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetPrefixLengthMode returns the PrefixLengthMode field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetPrefixLengthMode() string {
	if o == nil || IsNil(o.PrefixLengthMode) {
		var ret string
		return ret
	}
	return *o.PrefixLengthMode
}

// GetPrefixLengthModeOk returns a tuple with the PrefixLengthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetPrefixLengthModeOk() (*string, bool) {
	if o == nil || IsNil(o.PrefixLengthMode) {
		return nil, false
	}
	return o.PrefixLengthMode, true
}

// HasPrefixLengthMode returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasPrefixLengthMode() bool {
	if o != nil && !IsNil(o.PrefixLengthMode) {
		return true
	}

	return false
}

// SetPrefixLengthMode gets a reference to the given string and assigns it to the PrefixLengthMode field.
func (o *GridDhcpproperties) SetPrefixLengthMode(v string) {
	o.PrefixLengthMode = &v
}

// GetProtocolHostnameRewritePolicies returns the ProtocolHostnameRewritePolicies field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetProtocolHostnameRewritePolicies() []map[string]interface{} {
	if o == nil || IsNil(o.ProtocolHostnameRewritePolicies) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ProtocolHostnameRewritePolicies
}

// GetProtocolHostnameRewritePoliciesOk returns a tuple with the ProtocolHostnameRewritePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetProtocolHostnameRewritePoliciesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ProtocolHostnameRewritePolicies) {
		return nil, false
	}
	return o.ProtocolHostnameRewritePolicies, true
}

// HasProtocolHostnameRewritePolicies returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasProtocolHostnameRewritePolicies() bool {
	if o != nil && !IsNil(o.ProtocolHostnameRewritePolicies) {
		return true
	}

	return false
}

// SetProtocolHostnameRewritePolicies gets a reference to the given []map[string]interface{} and assigns it to the ProtocolHostnameRewritePolicies field.
func (o *GridDhcpproperties) SetProtocolHostnameRewritePolicies(v []map[string]interface{}) {
	o.ProtocolHostnameRewritePolicies = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *GridDhcpproperties) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *GridDhcpproperties) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRestartSetting returns the RestartSetting field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetRestartSetting() GridDhcppropertiesRestartSetting {
	if o == nil || IsNil(o.RestartSetting) {
		var ret GridDhcppropertiesRestartSetting
		return ret
	}
	return *o.RestartSetting
}

// GetRestartSettingOk returns a tuple with the RestartSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetRestartSettingOk() (*GridDhcppropertiesRestartSetting, bool) {
	if o == nil || IsNil(o.RestartSetting) {
		return nil, false
	}
	return o.RestartSetting, true
}

// HasRestartSetting returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasRestartSetting() bool {
	if o != nil && !IsNil(o.RestartSetting) {
		return true
	}

	return false
}

// SetRestartSetting gets a reference to the given GridDhcppropertiesRestartSetting and assigns it to the RestartSetting field.
func (o *GridDhcpproperties) SetRestartSetting(v GridDhcppropertiesRestartSetting) {
	o.RestartSetting = &v
}

// GetRetryDdnsUpdates returns the RetryDdnsUpdates field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetRetryDdnsUpdates() bool {
	if o == nil || IsNil(o.RetryDdnsUpdates) {
		var ret bool
		return ret
	}
	return *o.RetryDdnsUpdates
}

// GetRetryDdnsUpdatesOk returns a tuple with the RetryDdnsUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetRetryDdnsUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.RetryDdnsUpdates) {
		return nil, false
	}
	return o.RetryDdnsUpdates, true
}

// HasRetryDdnsUpdates returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasRetryDdnsUpdates() bool {
	if o != nil && !IsNil(o.RetryDdnsUpdates) {
		return true
	}

	return false
}

// SetRetryDdnsUpdates gets a reference to the given bool and assigns it to the RetryDdnsUpdates field.
func (o *GridDhcpproperties) SetRetryDdnsUpdates(v bool) {
	o.RetryDdnsUpdates = &v
}

// GetSyslogFacility returns the SyslogFacility field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetSyslogFacility() string {
	if o == nil || IsNil(o.SyslogFacility) {
		var ret string
		return ret
	}
	return *o.SyslogFacility
}

// GetSyslogFacilityOk returns a tuple with the SyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetSyslogFacilityOk() (*string, bool) {
	if o == nil || IsNil(o.SyslogFacility) {
		return nil, false
	}
	return o.SyslogFacility, true
}

// HasSyslogFacility returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasSyslogFacility() bool {
	if o != nil && !IsNil(o.SyslogFacility) {
		return true
	}

	return false
}

// SetSyslogFacility gets a reference to the given string and assigns it to the SyslogFacility field.
func (o *GridDhcpproperties) SetSyslogFacility(v string) {
	o.SyslogFacility = &v
}

// GetTxtRecordHandling returns the TxtRecordHandling field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetTxtRecordHandling() string {
	if o == nil || IsNil(o.TxtRecordHandling) {
		var ret string
		return ret
	}
	return *o.TxtRecordHandling
}

// GetTxtRecordHandlingOk returns a tuple with the TxtRecordHandling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetTxtRecordHandlingOk() (*string, bool) {
	if o == nil || IsNil(o.TxtRecordHandling) {
		return nil, false
	}
	return o.TxtRecordHandling, true
}

// HasTxtRecordHandling returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasTxtRecordHandling() bool {
	if o != nil && !IsNil(o.TxtRecordHandling) {
		return true
	}

	return false
}

// SetTxtRecordHandling gets a reference to the given string and assigns it to the TxtRecordHandling field.
func (o *GridDhcpproperties) SetTxtRecordHandling(v string) {
	o.TxtRecordHandling = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *GridDhcpproperties) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *GridDhcpproperties) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDhcpproperties) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *GridDhcpproperties) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *GridDhcpproperties) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o GridDhcpproperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridDhcpproperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CaptureHostname) {
		toSerialize["capture_hostname"] = o.CaptureHostname
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsRetryInterval) {
		toSerialize["ddns_retry_interval"] = o.DdnsRetryInterval
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DdnsUpdateFixedAddresses) {
		toSerialize["ddns_update_fixed_addresses"] = o.DdnsUpdateFixedAddresses
	}
	if !IsNil(o.DdnsUseOption81) {
		toSerialize["ddns_use_option81"] = o.DdnsUseOption81
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DisableAllNacFilters) {
		toSerialize["disable_all_nac_filters"] = o.DisableAllNacFilters
	}
	if !IsNil(o.DnsUpdateStyle) {
		toSerialize["dns_update_style"] = o.DnsUpdateStyle
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnableFingerprint) {
		toSerialize["enable_fingerprint"] = o.EnableFingerprint
	}
	if !IsNil(o.EnableGssTsig) {
		toSerialize["enable_gss_tsig"] = o.EnableGssTsig
	}
	if !IsNil(o.EnableHostnameRewrite) {
		toSerialize["enable_hostname_rewrite"] = o.EnableHostnameRewrite
	}
	if !IsNil(o.EnableLeasequery) {
		toSerialize["enable_leasequery"] = o.EnableLeasequery
	}
	if !IsNil(o.EnableRoamingHosts) {
		toSerialize["enable_roaming_hosts"] = o.EnableRoamingHosts
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.FormatLogOption82) {
		toSerialize["format_log_option_82"] = o.FormatLogOption82
	}
	if !IsNil(o.Grid) {
		toSerialize["grid"] = o.Grid
	}
	if !IsNil(o.GssTsigKeys) {
		toSerialize["gss_tsig_keys"] = o.GssTsigKeys
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.HostnameRewritePolicy) {
		toSerialize["hostname_rewrite_policy"] = o.HostnameRewritePolicy
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IgnoreId) {
		toSerialize["ignore_id"] = o.IgnoreId
	}
	if !IsNil(o.IgnoreMacAddresses) {
		toSerialize["ignore_mac_addresses"] = o.IgnoreMacAddresses
	}
	if !IsNil(o.ImmediateFaConfiguration) {
		toSerialize["immediate_fa_configuration"] = o.ImmediateFaConfiguration
	}
	if !IsNil(o.Ipv6CaptureHostname) {
		toSerialize["ipv6_capture_hostname"] = o.Ipv6CaptureHostname
	}
	if !IsNil(o.Ipv6DdnsDomainname) {
		toSerialize["ipv6_ddns_domainname"] = o.Ipv6DdnsDomainname
	}
	if !IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		toSerialize["ipv6_ddns_enable_option_fqdn"] = o.Ipv6DdnsEnableOptionFqdn
	}
	if !IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		toSerialize["ipv6_ddns_server_always_updates"] = o.Ipv6DdnsServerAlwaysUpdates
	}
	if !IsNil(o.Ipv6DdnsTtl) {
		toSerialize["ipv6_ddns_ttl"] = o.Ipv6DdnsTtl
	}
	if !IsNil(o.Ipv6DefaultPrefix) {
		toSerialize["ipv6_default_prefix"] = o.Ipv6DefaultPrefix
	}
	if !IsNil(o.Ipv6DnsUpdateStyle) {
		toSerialize["ipv6_dns_update_style"] = o.Ipv6DnsUpdateStyle
	}
	if !IsNil(o.Ipv6DomainName) {
		toSerialize["ipv6_domain_name"] = o.Ipv6DomainName
	}
	if !IsNil(o.Ipv6DomainNameServers) {
		toSerialize["ipv6_domain_name_servers"] = o.Ipv6DomainNameServers
	}
	if !IsNil(o.Ipv6EnableDdns) {
		toSerialize["ipv6_enable_ddns"] = o.Ipv6EnableDdns
	}
	if !IsNil(o.Ipv6EnableGssTsig) {
		toSerialize["ipv6_enable_gss_tsig"] = o.Ipv6EnableGssTsig
	}
	if !IsNil(o.Ipv6EnableLeaseScavenging) {
		toSerialize["ipv6_enable_lease_scavenging"] = o.Ipv6EnableLeaseScavenging
	}
	if !IsNil(o.Ipv6EnableRetryUpdates) {
		toSerialize["ipv6_enable_retry_updates"] = o.Ipv6EnableRetryUpdates
	}
	if !IsNil(o.Ipv6GenerateHostname) {
		toSerialize["ipv6_generate_hostname"] = o.Ipv6GenerateHostname
	}
	if !IsNil(o.Ipv6GssTsigKeys) {
		toSerialize["ipv6_gss_tsig_keys"] = o.Ipv6GssTsigKeys
	}
	if !IsNil(o.Ipv6KdcServer) {
		toSerialize["ipv6_kdc_server"] = o.Ipv6KdcServer
	}
	if !IsNil(o.Ipv6LeaseScavengingTime) {
		toSerialize["ipv6_lease_scavenging_time"] = o.Ipv6LeaseScavengingTime
	}
	if !IsNil(o.Ipv6MicrosoftCodePage) {
		toSerialize["ipv6_microsoft_code_page"] = o.Ipv6MicrosoftCodePage
	}
	if !IsNil(o.Ipv6Options) {
		toSerialize["ipv6_options"] = o.Ipv6Options
	}
	if !IsNil(o.Ipv6Prefixes) {
		toSerialize["ipv6_prefixes"] = o.Ipv6Prefixes
	}
	if !IsNil(o.Ipv6RecycleLeases) {
		toSerialize["ipv6_recycle_leases"] = o.Ipv6RecycleLeases
	}
	if !IsNil(o.Ipv6RememberExpiredClientAssociation) {
		toSerialize["ipv6_remember_expired_client_association"] = o.Ipv6RememberExpiredClientAssociation
	}
	if !IsNil(o.Ipv6RetryUpdatesInterval) {
		toSerialize["ipv6_retry_updates_interval"] = o.Ipv6RetryUpdatesInterval
	}
	if !IsNil(o.Ipv6TxtRecordHandling) {
		toSerialize["ipv6_txt_record_handling"] = o.Ipv6TxtRecordHandling
	}
	if !IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		toSerialize["ipv6_update_dns_on_lease_renewal"] = o.Ipv6UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.KdcServer) {
		toSerialize["kdc_server"] = o.KdcServer
	}
	if !IsNil(o.LeaseLoggingMember) {
		toSerialize["lease_logging_member"] = o.LeaseLoggingMember
	}
	if !IsNil(o.LeasePerClientSettings) {
		toSerialize["lease_per_client_settings"] = o.LeasePerClientSettings
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogLeaseEvents) {
		toSerialize["log_lease_events"] = o.LogLeaseEvents
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.MicrosoftCodePage) {
		toSerialize["microsoft_code_page"] = o.MicrosoftCodePage
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Option60MatchRules) {
		toSerialize["option60_match_rules"] = o.Option60MatchRules
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PingCount) {
		toSerialize["ping_count"] = o.PingCount
	}
	if !IsNil(o.PingTimeout) {
		toSerialize["ping_timeout"] = o.PingTimeout
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.PrefixLengthMode) {
		toSerialize["prefix_length_mode"] = o.PrefixLengthMode
	}
	if !IsNil(o.ProtocolHostnameRewritePolicies) {
		toSerialize["protocol_hostname_rewrite_policies"] = o.ProtocolHostnameRewritePolicies
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RestartSetting) {
		toSerialize["restart_setting"] = o.RestartSetting
	}
	if !IsNil(o.RetryDdnsUpdates) {
		toSerialize["retry_ddns_updates"] = o.RetryDdnsUpdates
	}
	if !IsNil(o.SyslogFacility) {
		toSerialize["syslog_facility"] = o.SyslogFacility
	}
	if !IsNil(o.TxtRecordHandling) {
		toSerialize["txt_record_handling"] = o.TxtRecordHandling
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableGridDhcpproperties struct {
	value *GridDhcpproperties
	isSet bool
}

func (v NullableGridDhcpproperties) Get() *GridDhcpproperties {
	return v.value
}

func (v *NullableGridDhcpproperties) Set(val *GridDhcpproperties) {
	v.value = val
	v.isSet = true
}

func (v NullableGridDhcpproperties) IsSet() bool {
	return v.isSet
}

func (v *NullableGridDhcpproperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridDhcpproperties(val *GridDhcpproperties) *NullableGridDhcpproperties {
	return &NullableGridDhcpproperties{value: val, isSet: true}
}

func (v NullableGridDhcpproperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridDhcpproperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
