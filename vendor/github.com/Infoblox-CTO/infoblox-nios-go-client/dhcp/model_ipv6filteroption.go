/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6filteroption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6filteroption{}

// Ipv6filteroption struct for Ipv6filteroption
type Ipv6filteroption struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines if apply as class is enabled or not. If this flag is set to \"true\" the filter is treated as global DHCP class, e.g it is written to DHCPv6 configuration file even if it is not present in any DHCP range.
	ApplyAsClass *bool `json:"apply_as_class,omitempty"`
	// The descriptive comment of a DHCP IPv6 filter option object.
	Comment *string `json:"comment,omitempty"`
	// The conditional expression of a DHCP IPv6 filter option object.
	Expression *string `json:"expression,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Determines the lease time of a DHCP IPv6 filter option object.
	LeaseTime *int64 `json:"lease_time,omitempty"`
	// The name of a DHCP IPv6 option filter object.
	Name *string `json:"name,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	OptionList []Ipv6filteroptionOptionList `json:"option_list,omitempty"`
	// The option space of a DHCP IPv6 filter option object.
	OptionSpace *string `json:"option_space,omitempty"`
}

// NewIpv6filteroption instantiates a new Ipv6filteroption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6filteroption() *Ipv6filteroption {
	this := Ipv6filteroption{}
	return &this
}

// NewIpv6filteroptionWithDefaults instantiates a new Ipv6filteroption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6filteroptionWithDefaults() *Ipv6filteroption {
	this := Ipv6filteroption{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6filteroption) SetRef(v string) {
	o.Ref = &v
}

// GetApplyAsClass returns the ApplyAsClass field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetApplyAsClass() bool {
	if o == nil || IsNil(o.ApplyAsClass) {
		var ret bool
		return ret
	}
	return *o.ApplyAsClass
}

// GetApplyAsClassOk returns a tuple with the ApplyAsClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetApplyAsClassOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyAsClass) {
		return nil, false
	}
	return o.ApplyAsClass, true
}

// HasApplyAsClass returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasApplyAsClass() bool {
	if o != nil && !IsNil(o.ApplyAsClass) {
		return true
	}

	return false
}

// SetApplyAsClass gets a reference to the given bool and assigns it to the ApplyAsClass field.
func (o *Ipv6filteroption) SetApplyAsClass(v bool) {
	o.ApplyAsClass = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6filteroption) SetComment(v string) {
	o.Comment = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Ipv6filteroption) SetExpression(v string) {
	o.Expression = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ipv6filteroption) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetLeaseTime returns the LeaseTime field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetLeaseTime() int64 {
	if o == nil || IsNil(o.LeaseTime) {
		var ret int64
		return ret
	}
	return *o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseTime) {
		return nil, false
	}
	return o.LeaseTime, true
}

// HasLeaseTime returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasLeaseTime() bool {
	if o != nil && !IsNil(o.LeaseTime) {
		return true
	}

	return false
}

// SetLeaseTime gets a reference to the given int64 and assigns it to the LeaseTime field.
func (o *Ipv6filteroption) SetLeaseTime(v int64) {
	o.LeaseTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6filteroption) SetName(v string) {
	o.Name = &v
}

// GetOptionList returns the OptionList field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetOptionList() []Ipv6filteroptionOptionList {
	if o == nil || IsNil(o.OptionList) {
		var ret []Ipv6filteroptionOptionList
		return ret
	}
	return o.OptionList
}

// GetOptionListOk returns a tuple with the OptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetOptionListOk() ([]Ipv6filteroptionOptionList, bool) {
	if o == nil || IsNil(o.OptionList) {
		return nil, false
	}
	return o.OptionList, true
}

// HasOptionList returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasOptionList() bool {
	if o != nil && !IsNil(o.OptionList) {
		return true
	}

	return false
}

// SetOptionList gets a reference to the given []Ipv6filteroptionOptionList and assigns it to the OptionList field.
func (o *Ipv6filteroption) SetOptionList(v []Ipv6filteroptionOptionList) {
	o.OptionList = v
}

// GetOptionSpace returns the OptionSpace field value if set, zero value otherwise.
func (o *Ipv6filteroption) GetOptionSpace() string {
	if o == nil || IsNil(o.OptionSpace) {
		var ret string
		return ret
	}
	return *o.OptionSpace
}

// GetOptionSpaceOk returns a tuple with the OptionSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6filteroption) GetOptionSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.OptionSpace) {
		return nil, false
	}
	return o.OptionSpace, true
}

// HasOptionSpace returns a boolean if a field has been set.
func (o *Ipv6filteroption) HasOptionSpace() bool {
	if o != nil && !IsNil(o.OptionSpace) {
		return true
	}

	return false
}

// SetOptionSpace gets a reference to the given string and assigns it to the OptionSpace field.
func (o *Ipv6filteroption) SetOptionSpace(v string) {
	o.OptionSpace = &v
}

func (o Ipv6filteroption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6filteroption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ApplyAsClass) {
		toSerialize["apply_as_class"] = o.ApplyAsClass
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.LeaseTime) {
		toSerialize["lease_time"] = o.LeaseTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OptionList) {
		toSerialize["option_list"] = o.OptionList
	}
	if !IsNil(o.OptionSpace) {
		toSerialize["option_space"] = o.OptionSpace
	}
	return toSerialize, nil
}

type NullableIpv6filteroption struct {
	value *Ipv6filteroption
	isSet bool
}

func (v NullableIpv6filteroption) Get() *Ipv6filteroption {
	return v.value
}

func (v *NullableIpv6filteroption) Set(val *Ipv6filteroption) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6filteroption) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6filteroption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6filteroption(val *Ipv6filteroption) *NullableIpv6filteroption {
	return &NullableIpv6filteroption{value: val, isSet: true}
}

func (v NullableIpv6filteroption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6filteroption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
