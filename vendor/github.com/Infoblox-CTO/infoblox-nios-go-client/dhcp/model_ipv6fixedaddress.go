/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6fixedaddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6fixedaddress{}

// Ipv6fixedaddress struct for Ipv6fixedaddress
type Ipv6fixedaddress struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The address type value for this IPv6 fixed address. When the address type is \"ADDRESS\", a value for the 'ipv6addr' member is required. When the address type is \"PREFIX\", values for 'ipv6prefix' and 'ipv6prefix_bits' are required. When the address type is \"BOTH\", values for 'ipv6addr', 'ipv6prefix', and 'ipv6prefix_bits' are all required.
	AddressType *string `json:"address_type,omitempty"`
	// This field controls whether the credential is used for both the Telnet and SSH credentials. If set to False, the credential is used only for SSH.
	AllowTelnet *bool `json:"allow_telnet,omitempty"`
	// The CLI credentials for the IPv6 fixed address.
	CliCredentials []Ipv6fixedaddressCliCredentials `json:"cli_credentials,omitempty"`
	CloudInfo      *Ipv6fixedaddressCloudInfo       `json:"cloud_info,omitempty"`
	// Comment for the fixed address; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The description of the device.
	DeviceDescription *string `json:"device_description,omitempty"`
	// The location of the device.
	DeviceLocation *string `json:"device_location,omitempty"`
	// The type of the device.
	DeviceType *string `json:"device_type,omitempty"`
	// The vendor of the device.
	DeviceVendor *string `json:"device_vendor,omitempty"`
	// Determines whether a fixed address is disabled or not. When this is set to False, the IPv6 fixed address is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines if the discovery for this IPv6 fixed address is disabled or not. False means that the discovery is enabled.
	DisableDiscovery *bool `json:"disable_discovery,omitempty"`
	// The discovery status of this IPv6 fixed address.
	DiscoverNowStatus *string                         `json:"discover_now_status,omitempty"`
	DiscoveredData    *Ipv6fixedaddressDiscoveredData `json:"discovered_data,omitempty"`
	// The domain name for this IPv6 fixed address.
	DomainName *string `json:"domain_name,omitempty"`
	// The IPv6 addresses of DNS recursive name servers to which the DHCP client can send name resolution requests. The DHCP server includes this information in the DNS Recursive Name Server option in Advertise, Rebind, Information-Request, and Reply messages.
	DomainNameServers []string `json:"domain_name_servers,omitempty"`
	// The DUID value for this IPv6 fixed address.
	Duid *string `json:"duid,omitempty"`
	// Determines if the discovery for the IPv6 fixed address should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The IPv6 Address of the DHCP IPv6 fixed address.
	Ipv6addr *string `json:"ipv6addr,omitempty"`
	// The IPv6 Address prefix of the DHCP IPv6 fixed address.
	Ipv6prefix *string `json:"ipv6prefix,omitempty"`
	// Prefix bits of the DHCP IPv6 fixed address.
	Ipv6prefixBits *int64 `json:"ipv6prefix_bits,omitempty"`
	// This field contains the logic filters to be applied to this IPv6 fixed address. This list corresponds to the match rules that are written to the DHCPv6 configuration file.
	LogicFilterRules []Ipv6fixedaddressLogicFilterRules `json:"logic_filter_rules,omitempty"`
	MsAdUserData     *Ipv6fixedaddressMsAdUserData      `json:"ms_ad_user_data,omitempty"`
	// This field contains the name of this IPv6 fixed address.
	Name *string `json:"name,omitempty"`
	// The network to which this IPv6 fixed address belongs, in IPv6 Address/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which this IPv6 fixed address resides.
	NetworkView *string `json:"network_view,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []Ipv6fixedaddressOptions `json:"options,omitempty"`
	// The preferred lifetime value for this DHCP IPv6 fixed address object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The reference to the reserved interface to which the device belongs.
	ReservedInterface *string `json:"reserved_interface,omitempty"`
	// Restarts the member service. The restart_if_needed flag can trigger a restart on DHCP services only when it is enabled on CP member.
	RestartIfNeeded *bool                            `json:"restart_if_needed,omitempty"`
	Snmp3Credential *Ipv6fixedaddressSnmp3Credential `json:"snmp3_credential,omitempty"`
	SnmpCredential  *Ipv6fixedaddressSnmpCredential  `json:"snmp_credential,omitempty"`
	// If set on creation, the IPv6 fixed address will be created according to the values specified in the named template.
	Template *string `json:"template,omitempty"`
	// If set to true, the CLI credential will override member-level settings.
	UseCliCredentials *bool `json:"use_cli_credentials,omitempty"`
	// Use flag for: domain_name
	UseDomainName *bool `json:"use_domain_name,omitempty"`
	// Use flag for: domain_name_servers
	UseDomainNameServers *bool `json:"use_domain_name_servers,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Determines if the SNMPv3 credential should be used for the IPv6 fixed address.
	UseSnmp3Credential *bool `json:"use_snmp3_credential,omitempty"`
	// If set to true, SNMP credential will override member level settings.
	UseSnmpCredential *bool `json:"use_snmp_credential,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// The valid lifetime value for this DHCP IPv6 Fixed Address object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewIpv6fixedaddress instantiates a new Ipv6fixedaddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6fixedaddress() *Ipv6fixedaddress {
	this := Ipv6fixedaddress{}
	return &this
}

// NewIpv6fixedaddressWithDefaults instantiates a new Ipv6fixedaddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6fixedaddressWithDefaults() *Ipv6fixedaddress {
	this := Ipv6fixedaddress{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6fixedaddress) SetRef(v string) {
	o.Ref = &v
}

// GetAddressType returns the AddressType field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetAddressType() string {
	if o == nil || IsNil(o.AddressType) {
		var ret string
		return ret
	}
	return *o.AddressType
}

// GetAddressTypeOk returns a tuple with the AddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetAddressTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressType) {
		return nil, false
	}
	return o.AddressType, true
}

// HasAddressType returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasAddressType() bool {
	if o != nil && !IsNil(o.AddressType) {
		return true
	}

	return false
}

// SetAddressType gets a reference to the given string and assigns it to the AddressType field.
func (o *Ipv6fixedaddress) SetAddressType(v string) {
	o.AddressType = &v
}

// GetAllowTelnet returns the AllowTelnet field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetAllowTelnet() bool {
	if o == nil || IsNil(o.AllowTelnet) {
		var ret bool
		return ret
	}
	return *o.AllowTelnet
}

// GetAllowTelnetOk returns a tuple with the AllowTelnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetAllowTelnetOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTelnet) {
		return nil, false
	}
	return o.AllowTelnet, true
}

// HasAllowTelnet returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasAllowTelnet() bool {
	if o != nil && !IsNil(o.AllowTelnet) {
		return true
	}

	return false
}

// SetAllowTelnet gets a reference to the given bool and assigns it to the AllowTelnet field.
func (o *Ipv6fixedaddress) SetAllowTelnet(v bool) {
	o.AllowTelnet = &v
}

// GetCliCredentials returns the CliCredentials field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetCliCredentials() []Ipv6fixedaddressCliCredentials {
	if o == nil || IsNil(o.CliCredentials) {
		var ret []Ipv6fixedaddressCliCredentials
		return ret
	}
	return o.CliCredentials
}

// GetCliCredentialsOk returns a tuple with the CliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetCliCredentialsOk() ([]Ipv6fixedaddressCliCredentials, bool) {
	if o == nil || IsNil(o.CliCredentials) {
		return nil, false
	}
	return o.CliCredentials, true
}

// HasCliCredentials returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasCliCredentials() bool {
	if o != nil && !IsNil(o.CliCredentials) {
		return true
	}

	return false
}

// SetCliCredentials gets a reference to the given []Ipv6fixedaddressCliCredentials and assigns it to the CliCredentials field.
func (o *Ipv6fixedaddress) SetCliCredentials(v []Ipv6fixedaddressCliCredentials) {
	o.CliCredentials = v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetCloudInfo() Ipv6fixedaddressCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret Ipv6fixedaddressCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetCloudInfoOk() (*Ipv6fixedaddressCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given Ipv6fixedaddressCloudInfo and assigns it to the CloudInfo field.
func (o *Ipv6fixedaddress) SetCloudInfo(v Ipv6fixedaddressCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6fixedaddress) SetComment(v string) {
	o.Comment = &v
}

// GetDeviceDescription returns the DeviceDescription field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDeviceDescription() string {
	if o == nil || IsNil(o.DeviceDescription) {
		var ret string
		return ret
	}
	return *o.DeviceDescription
}

// GetDeviceDescriptionOk returns a tuple with the DeviceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDeviceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceDescription) {
		return nil, false
	}
	return o.DeviceDescription, true
}

// HasDeviceDescription returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDeviceDescription() bool {
	if o != nil && !IsNil(o.DeviceDescription) {
		return true
	}

	return false
}

// SetDeviceDescription gets a reference to the given string and assigns it to the DeviceDescription field.
func (o *Ipv6fixedaddress) SetDeviceDescription(v string) {
	o.DeviceDescription = &v
}

// GetDeviceLocation returns the DeviceLocation field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDeviceLocation() string {
	if o == nil || IsNil(o.DeviceLocation) {
		var ret string
		return ret
	}
	return *o.DeviceLocation
}

// GetDeviceLocationOk returns a tuple with the DeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDeviceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocation) {
		return nil, false
	}
	return o.DeviceLocation, true
}

// HasDeviceLocation returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDeviceLocation() bool {
	if o != nil && !IsNil(o.DeviceLocation) {
		return true
	}

	return false
}

// SetDeviceLocation gets a reference to the given string and assigns it to the DeviceLocation field.
func (o *Ipv6fixedaddress) SetDeviceLocation(v string) {
	o.DeviceLocation = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *Ipv6fixedaddress) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceVendor returns the DeviceVendor field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDeviceVendor() string {
	if o == nil || IsNil(o.DeviceVendor) {
		var ret string
		return ret
	}
	return *o.DeviceVendor
}

// GetDeviceVendorOk returns a tuple with the DeviceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDeviceVendorOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVendor) {
		return nil, false
	}
	return o.DeviceVendor, true
}

// HasDeviceVendor returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDeviceVendor() bool {
	if o != nil && !IsNil(o.DeviceVendor) {
		return true
	}

	return false
}

// SetDeviceVendor gets a reference to the given string and assigns it to the DeviceVendor field.
func (o *Ipv6fixedaddress) SetDeviceVendor(v string) {
	o.DeviceVendor = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Ipv6fixedaddress) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableDiscovery returns the DisableDiscovery field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDisableDiscovery() bool {
	if o == nil || IsNil(o.DisableDiscovery) {
		var ret bool
		return ret
	}
	return *o.DisableDiscovery
}

// GetDisableDiscoveryOk returns a tuple with the DisableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDisableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDiscovery) {
		return nil, false
	}
	return o.DisableDiscovery, true
}

// HasDisableDiscovery returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDisableDiscovery() bool {
	if o != nil && !IsNil(o.DisableDiscovery) {
		return true
	}

	return false
}

// SetDisableDiscovery gets a reference to the given bool and assigns it to the DisableDiscovery field.
func (o *Ipv6fixedaddress) SetDisableDiscovery(v bool) {
	o.DisableDiscovery = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Ipv6fixedaddress) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDiscoveredData() Ipv6fixedaddressDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret Ipv6fixedaddressDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDiscoveredDataOk() (*Ipv6fixedaddressDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given Ipv6fixedaddressDiscoveredData and assigns it to the DiscoveredData field.
func (o *Ipv6fixedaddress) SetDiscoveredData(v Ipv6fixedaddressDiscoveredData) {
	o.DiscoveredData = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *Ipv6fixedaddress) SetDomainName(v string) {
	o.DomainName = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDomainNameServers() []string {
	if o == nil || IsNil(o.DomainNameServers) {
		var ret []string
		return ret
	}
	return o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNameServers) {
		return nil, false
	}
	return o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDomainNameServers() bool {
	if o != nil && !IsNil(o.DomainNameServers) {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *Ipv6fixedaddress) SetDomainNameServers(v []string) {
	o.DomainNameServers = v
}

// GetDuid returns the Duid field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetDuid() string {
	if o == nil || IsNil(o.Duid) {
		var ret string
		return ret
	}
	return *o.Duid
}

// GetDuidOk returns a tuple with the Duid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetDuidOk() (*string, bool) {
	if o == nil || IsNil(o.Duid) {
		return nil, false
	}
	return o.Duid, true
}

// HasDuid returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasDuid() bool {
	if o != nil && !IsNil(o.Duid) {
		return true
	}

	return false
}

// SetDuid gets a reference to the given string and assigns it to the Duid field.
func (o *Ipv6fixedaddress) SetDuid(v string) {
	o.Duid = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Ipv6fixedaddress) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ipv6fixedaddress) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *Ipv6fixedaddress) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetIpv6prefix returns the Ipv6prefix field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetIpv6prefix() string {
	if o == nil || IsNil(o.Ipv6prefix) {
		var ret string
		return ret
	}
	return *o.Ipv6prefix
}

// GetIpv6prefixOk returns a tuple with the Ipv6prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetIpv6prefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6prefix) {
		return nil, false
	}
	return o.Ipv6prefix, true
}

// HasIpv6prefix returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasIpv6prefix() bool {
	if o != nil && !IsNil(o.Ipv6prefix) {
		return true
	}

	return false
}

// SetIpv6prefix gets a reference to the given string and assigns it to the Ipv6prefix field.
func (o *Ipv6fixedaddress) SetIpv6prefix(v string) {
	o.Ipv6prefix = &v
}

// GetIpv6prefixBits returns the Ipv6prefixBits field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetIpv6prefixBits() int64 {
	if o == nil || IsNil(o.Ipv6prefixBits) {
		var ret int64
		return ret
	}
	return *o.Ipv6prefixBits
}

// GetIpv6prefixBitsOk returns a tuple with the Ipv6prefixBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetIpv6prefixBitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6prefixBits) {
		return nil, false
	}
	return o.Ipv6prefixBits, true
}

// HasIpv6prefixBits returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasIpv6prefixBits() bool {
	if o != nil && !IsNil(o.Ipv6prefixBits) {
		return true
	}

	return false
}

// SetIpv6prefixBits gets a reference to the given int64 and assigns it to the Ipv6prefixBits field.
func (o *Ipv6fixedaddress) SetIpv6prefixBits(v int64) {
	o.Ipv6prefixBits = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetLogicFilterRules() []Ipv6fixedaddressLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6fixedaddressLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetLogicFilterRulesOk() ([]Ipv6fixedaddressLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6fixedaddressLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6fixedaddress) SetLogicFilterRules(v []Ipv6fixedaddressLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetMsAdUserData() Ipv6fixedaddressMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret Ipv6fixedaddressMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetMsAdUserDataOk() (*Ipv6fixedaddressMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given Ipv6fixedaddressMsAdUserData and assigns it to the MsAdUserData field.
func (o *Ipv6fixedaddress) SetMsAdUserData(v Ipv6fixedaddressMsAdUserData) {
	o.MsAdUserData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6fixedaddress) SetName(v string) {
	o.Name = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Ipv6fixedaddress) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Ipv6fixedaddress) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetOptions() []Ipv6fixedaddressOptions {
	if o == nil || IsNil(o.Options) {
		var ret []Ipv6fixedaddressOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetOptionsOk() ([]Ipv6fixedaddressOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Ipv6fixedaddressOptions and assigns it to the Options field.
func (o *Ipv6fixedaddress) SetOptions(v []Ipv6fixedaddressOptions) {
	o.Options = v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *Ipv6fixedaddress) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetReservedInterface returns the ReservedInterface field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetReservedInterface() string {
	if o == nil || IsNil(o.ReservedInterface) {
		var ret string
		return ret
	}
	return *o.ReservedInterface
}

// GetReservedInterfaceOk returns a tuple with the ReservedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetReservedInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedInterface) {
		return nil, false
	}
	return o.ReservedInterface, true
}

// HasReservedInterface returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasReservedInterface() bool {
	if o != nil && !IsNil(o.ReservedInterface) {
		return true
	}

	return false
}

// SetReservedInterface gets a reference to the given string and assigns it to the ReservedInterface field.
func (o *Ipv6fixedaddress) SetReservedInterface(v string) {
	o.ReservedInterface = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Ipv6fixedaddress) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetSnmp3Credential returns the Snmp3Credential field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetSnmp3Credential() Ipv6fixedaddressSnmp3Credential {
	if o == nil || IsNil(o.Snmp3Credential) {
		var ret Ipv6fixedaddressSnmp3Credential
		return ret
	}
	return *o.Snmp3Credential
}

// GetSnmp3CredentialOk returns a tuple with the Snmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetSnmp3CredentialOk() (*Ipv6fixedaddressSnmp3Credential, bool) {
	if o == nil || IsNil(o.Snmp3Credential) {
		return nil, false
	}
	return o.Snmp3Credential, true
}

// HasSnmp3Credential returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasSnmp3Credential() bool {
	if o != nil && !IsNil(o.Snmp3Credential) {
		return true
	}

	return false
}

// SetSnmp3Credential gets a reference to the given Ipv6fixedaddressSnmp3Credential and assigns it to the Snmp3Credential field.
func (o *Ipv6fixedaddress) SetSnmp3Credential(v Ipv6fixedaddressSnmp3Credential) {
	o.Snmp3Credential = &v
}

// GetSnmpCredential returns the SnmpCredential field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetSnmpCredential() Ipv6fixedaddressSnmpCredential {
	if o == nil || IsNil(o.SnmpCredential) {
		var ret Ipv6fixedaddressSnmpCredential
		return ret
	}
	return *o.SnmpCredential
}

// GetSnmpCredentialOk returns a tuple with the SnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetSnmpCredentialOk() (*Ipv6fixedaddressSnmpCredential, bool) {
	if o == nil || IsNil(o.SnmpCredential) {
		return nil, false
	}
	return o.SnmpCredential, true
}

// HasSnmpCredential returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasSnmpCredential() bool {
	if o != nil && !IsNil(o.SnmpCredential) {
		return true
	}

	return false
}

// SetSnmpCredential gets a reference to the given Ipv6fixedaddressSnmpCredential and assigns it to the SnmpCredential field.
func (o *Ipv6fixedaddress) SetSnmpCredential(v Ipv6fixedaddressSnmpCredential) {
	o.SnmpCredential = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Ipv6fixedaddress) SetTemplate(v string) {
	o.Template = &v
}

// GetUseCliCredentials returns the UseCliCredentials field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseCliCredentials() bool {
	if o == nil || IsNil(o.UseCliCredentials) {
		var ret bool
		return ret
	}
	return *o.UseCliCredentials
}

// GetUseCliCredentialsOk returns a tuple with the UseCliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseCliCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCliCredentials) {
		return nil, false
	}
	return o.UseCliCredentials, true
}

// HasUseCliCredentials returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseCliCredentials() bool {
	if o != nil && !IsNil(o.UseCliCredentials) {
		return true
	}

	return false
}

// SetUseCliCredentials gets a reference to the given bool and assigns it to the UseCliCredentials field.
func (o *Ipv6fixedaddress) SetUseCliCredentials(v bool) {
	o.UseCliCredentials = &v
}

// GetUseDomainName returns the UseDomainName field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseDomainName() bool {
	if o == nil || IsNil(o.UseDomainName) {
		var ret bool
		return ret
	}
	return *o.UseDomainName
}

// GetUseDomainNameOk returns a tuple with the UseDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseDomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainName) {
		return nil, false
	}
	return o.UseDomainName, true
}

// HasUseDomainName returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseDomainName() bool {
	if o != nil && !IsNil(o.UseDomainName) {
		return true
	}

	return false
}

// SetUseDomainName gets a reference to the given bool and assigns it to the UseDomainName field.
func (o *Ipv6fixedaddress) SetUseDomainName(v bool) {
	o.UseDomainName = &v
}

// GetUseDomainNameServers returns the UseDomainNameServers field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseDomainNameServers() bool {
	if o == nil || IsNil(o.UseDomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseDomainNameServers
}

// GetUseDomainNameServersOk returns a tuple with the UseDomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseDomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainNameServers) {
		return nil, false
	}
	return o.UseDomainNameServers, true
}

// HasUseDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseDomainNameServers() bool {
	if o != nil && !IsNil(o.UseDomainNameServers) {
		return true
	}

	return false
}

// SetUseDomainNameServers gets a reference to the given bool and assigns it to the UseDomainNameServers field.
func (o *Ipv6fixedaddress) SetUseDomainNameServers(v bool) {
	o.UseDomainNameServers = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6fixedaddress) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Ipv6fixedaddress) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *Ipv6fixedaddress) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUseSnmp3Credential returns the UseSnmp3Credential field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseSnmp3Credential() bool {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		var ret bool
		return ret
	}
	return *o.UseSnmp3Credential
}

// GetUseSnmp3CredentialOk returns a tuple with the UseSnmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseSnmp3CredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		return nil, false
	}
	return o.UseSnmp3Credential, true
}

// HasUseSnmp3Credential returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseSnmp3Credential() bool {
	if o != nil && !IsNil(o.UseSnmp3Credential) {
		return true
	}

	return false
}

// SetUseSnmp3Credential gets a reference to the given bool and assigns it to the UseSnmp3Credential field.
func (o *Ipv6fixedaddress) SetUseSnmp3Credential(v bool) {
	o.UseSnmp3Credential = &v
}

// GetUseSnmpCredential returns the UseSnmpCredential field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseSnmpCredential() bool {
	if o == nil || IsNil(o.UseSnmpCredential) {
		var ret bool
		return ret
	}
	return *o.UseSnmpCredential
}

// GetUseSnmpCredentialOk returns a tuple with the UseSnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseSnmpCredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmpCredential) {
		return nil, false
	}
	return o.UseSnmpCredential, true
}

// HasUseSnmpCredential returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseSnmpCredential() bool {
	if o != nil && !IsNil(o.UseSnmpCredential) {
		return true
	}

	return false
}

// SetUseSnmpCredential gets a reference to the given bool and assigns it to the UseSnmpCredential field.
func (o *Ipv6fixedaddress) SetUseSnmpCredential(v bool) {
	o.UseSnmpCredential = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *Ipv6fixedaddress) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *Ipv6fixedaddress) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6fixedaddress) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *Ipv6fixedaddress) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *Ipv6fixedaddress) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o Ipv6fixedaddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6fixedaddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddressType) {
		toSerialize["address_type"] = o.AddressType
	}
	if !IsNil(o.AllowTelnet) {
		toSerialize["allow_telnet"] = o.AllowTelnet
	}
	if !IsNil(o.CliCredentials) {
		toSerialize["cli_credentials"] = o.CliCredentials
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DeviceDescription) {
		toSerialize["device_description"] = o.DeviceDescription
	}
	if !IsNil(o.DeviceLocation) {
		toSerialize["device_location"] = o.DeviceLocation
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.DeviceVendor) {
		toSerialize["device_vendor"] = o.DeviceVendor
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableDiscovery) {
		toSerialize["disable_discovery"] = o.DisableDiscovery
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.DomainNameServers) {
		toSerialize["domain_name_servers"] = o.DomainNameServers
	}
	if !IsNil(o.Duid) {
		toSerialize["duid"] = o.Duid
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.Ipv6prefix) {
		toSerialize["ipv6prefix"] = o.Ipv6prefix
	}
	if !IsNil(o.Ipv6prefixBits) {
		toSerialize["ipv6prefix_bits"] = o.Ipv6prefixBits
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.ReservedInterface) {
		toSerialize["reserved_interface"] = o.ReservedInterface
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.Snmp3Credential) {
		toSerialize["snmp3_credential"] = o.Snmp3Credential
	}
	if !IsNil(o.SnmpCredential) {
		toSerialize["snmp_credential"] = o.SnmpCredential
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.UseCliCredentials) {
		toSerialize["use_cli_credentials"] = o.UseCliCredentials
	}
	if !IsNil(o.UseDomainName) {
		toSerialize["use_domain_name"] = o.UseDomainName
	}
	if !IsNil(o.UseDomainNameServers) {
		toSerialize["use_domain_name_servers"] = o.UseDomainNameServers
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UseSnmp3Credential) {
		toSerialize["use_snmp3_credential"] = o.UseSnmp3Credential
	}
	if !IsNil(o.UseSnmpCredential) {
		toSerialize["use_snmp_credential"] = o.UseSnmpCredential
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableIpv6fixedaddress struct {
	value *Ipv6fixedaddress
	isSet bool
}

func (v NullableIpv6fixedaddress) Get() *Ipv6fixedaddress {
	return v.value
}

func (v *NullableIpv6fixedaddress) Set(val *Ipv6fixedaddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6fixedaddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6fixedaddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6fixedaddress(val *Ipv6fixedaddress) *NullableIpv6fixedaddress {
	return &NullableIpv6fixedaddress{value: val, isSet: true}
}

func (v NullableIpv6fixedaddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6fixedaddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
