/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6range type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6range{}

// Ipv6range struct for Ipv6range
type Ipv6range struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Type of a DHCP IPv6 Range object. Valid values are \"ADDRESS\", \"PREFIX\", or \"BOTH\". When the address type is \"ADDRESS\", values for the 'start_addr' and 'end_addr' members are required. When the address type is \"PREFIX\", values for 'ipv6_start_prefix', 'ipv6_end_prefix', and 'ipv6_prefix_bits' are required. When the address type is \"BOTH\", values for 'start_addr', 'end_addr', 'ipv6_start_prefix', 'ipv6_end_prefix', and 'ipv6_prefix_bits' are all required.
	AddressType *string             `json:"address_type,omitempty"`
	CloudInfo   *Ipv6rangeCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the range; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether a range is disabled or not. When this is set to False, the range is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Discover now status for this range.
	DiscoverNowStatus          *string                              `json:"discover_now_status,omitempty"`
	DiscoveryBasicPollSettings *Ipv6rangeDiscoveryBasicPollSettings `json:"discovery_basic_poll_settings,omitempty"`
	DiscoveryBlackoutSetting   *Ipv6rangeDiscoveryBlackoutSetting   `json:"discovery_blackout_setting,omitempty"`
	// The member that will run discovery for this range.
	DiscoveryMember *string `json:"discovery_member,omitempty"`
	// Determines whether a discovery is enabled or not for this range. When this is set to False, the discovery for this range is disabled.
	EnableDiscovery *bool `json:"enable_discovery,omitempty"`
	// Determines if the discovery for the range should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// The IPv6 Address end address of the DHCP IPv6 range.
	EndAddr *string `json:"end_addr,omitempty"`
	// The endpoints that provides data for the DHCP IPv6 Range object.
	EndpointSources []map[string]interface{} `json:"endpoint_sources,omitempty"`
	// These are ranges of IP addresses that the appliance does not use to assign to clients. You can use these exclusion addresses as static IP addresses. They contain the start and end addresses of the exclusion range, and optionally,information about this exclusion range.
	Exclude []Ipv6rangeExclude `json:"exclude,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The IPv6 Address end prefix of the DHCP IPv6 range.
	Ipv6EndPrefix *string `json:"ipv6_end_prefix,omitempty"`
	// Prefix bits of the DHCP IPv6 range.
	Ipv6PrefixBits *int64 `json:"ipv6_prefix_bits,omitempty"`
	// The IPv6 Address starting prefix of the DHCP IPv6 range.
	Ipv6StartPrefix *string `json:"ipv6_start_prefix,omitempty"`
	// This field contains the logic filters to be applied to this IPv6 range. This list corresponds to the match rules that are written to the DHCPv6 configuration file.
	LogicFilterRules []Ipv6rangeLogicFilterRules `json:"logic_filter_rules,omitempty"`
	Member           *Ipv6rangeMember            `json:"member,omitempty"`
	// This field contains the name of the Microsoft scope.
	Name *string `json:"name,omitempty"`
	// The network this range belongs to, in IPv6 Address/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which this range resides.
	NetworkView     *string                `json:"network_view,omitempty"`
	NextAvailableIp map[string]interface{} `json:"next_available_ip,omitempty"`
	// This field contains the Option filters to be applied to this IPv6 range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	OptionFilterRules          []Ipv6rangeOptionFilterRules         `json:"option_filter_rules,omitempty"`
	PortControlBlackoutSetting *Ipv6rangePortControlBlackoutSetting `json:"port_control_blackout_setting,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// If the field is set to True, the discovery blackout setting will be used for port control blackout setting.
	SamePortControlDiscoveryBlackout *bool `json:"same_port_control_discovery_blackout,omitempty"`
	// The type of server that is going to serve the range. Valid values are: * MEMBER * NONE
	ServerAssociationType *string `json:"server_association_type,omitempty"`
	// The IPv6 Address starting address of the DHCP IPv6 range.
	StartAddr         *string                     `json:"start_addr,omitempty"`
	SubscribeSettings *Ipv6rangeSubscribeSettings `json:"subscribe_settings,omitempty"`
	// If set on creation, the range will be created according to the values specified in the named template.
	Template *string `json:"template,omitempty"`
	// Use flag for: discovery_blackout_setting , port_control_blackout_setting, same_port_control_discovery_blackout
	UseBlackoutSetting *bool `json:"use_blackout_setting,omitempty"`
	// Use flag for: discovery_basic_poll_settings
	UseDiscoveryBasicPollingSettings *bool `json:"use_discovery_basic_polling_settings,omitempty"`
	// Use flag for: discovery_member , enable_discovery
	UseEnableDiscovery *bool `json:"use_enable_discovery,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: subscribe_settings
	UseSubscribeSettings *bool `json:"use_subscribe_settings,omitempty"`
}

// NewIpv6range instantiates a new Ipv6range object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6range() *Ipv6range {
	this := Ipv6range{}
	return &this
}

// NewIpv6rangeWithDefaults instantiates a new Ipv6range object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6rangeWithDefaults() *Ipv6range {
	this := Ipv6range{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6range) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6range) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6range) SetRef(v string) {
	o.Ref = &v
}

// GetAddressType returns the AddressType field value if set, zero value otherwise.
func (o *Ipv6range) GetAddressType() string {
	if o == nil || IsNil(o.AddressType) {
		var ret string
		return ret
	}
	return *o.AddressType
}

// GetAddressTypeOk returns a tuple with the AddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetAddressTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressType) {
		return nil, false
	}
	return o.AddressType, true
}

// HasAddressType returns a boolean if a field has been set.
func (o *Ipv6range) HasAddressType() bool {
	if o != nil && !IsNil(o.AddressType) {
		return true
	}

	return false
}

// SetAddressType gets a reference to the given string and assigns it to the AddressType field.
func (o *Ipv6range) SetAddressType(v string) {
	o.AddressType = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Ipv6range) GetCloudInfo() Ipv6rangeCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret Ipv6rangeCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetCloudInfoOk() (*Ipv6rangeCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Ipv6range) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given Ipv6rangeCloudInfo and assigns it to the CloudInfo field.
func (o *Ipv6range) SetCloudInfo(v Ipv6rangeCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6range) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6range) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6range) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Ipv6range) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Ipv6range) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Ipv6range) SetDisable(v bool) {
	o.Disable = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Ipv6range) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Ipv6range) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Ipv6range) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveryBasicPollSettings returns the DiscoveryBasicPollSettings field value if set, zero value otherwise.
func (o *Ipv6range) GetDiscoveryBasicPollSettings() Ipv6rangeDiscoveryBasicPollSettings {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		var ret Ipv6rangeDiscoveryBasicPollSettings
		return ret
	}
	return *o.DiscoveryBasicPollSettings
}

// GetDiscoveryBasicPollSettingsOk returns a tuple with the DiscoveryBasicPollSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetDiscoveryBasicPollSettingsOk() (*Ipv6rangeDiscoveryBasicPollSettings, bool) {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		return nil, false
	}
	return o.DiscoveryBasicPollSettings, true
}

// HasDiscoveryBasicPollSettings returns a boolean if a field has been set.
func (o *Ipv6range) HasDiscoveryBasicPollSettings() bool {
	if o != nil && !IsNil(o.DiscoveryBasicPollSettings) {
		return true
	}

	return false
}

// SetDiscoveryBasicPollSettings gets a reference to the given Ipv6rangeDiscoveryBasicPollSettings and assigns it to the DiscoveryBasicPollSettings field.
func (o *Ipv6range) SetDiscoveryBasicPollSettings(v Ipv6rangeDiscoveryBasicPollSettings) {
	o.DiscoveryBasicPollSettings = &v
}

// GetDiscoveryBlackoutSetting returns the DiscoveryBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6range) GetDiscoveryBlackoutSetting() Ipv6rangeDiscoveryBlackoutSetting {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		var ret Ipv6rangeDiscoveryBlackoutSetting
		return ret
	}
	return *o.DiscoveryBlackoutSetting
}

// GetDiscoveryBlackoutSettingOk returns a tuple with the DiscoveryBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetDiscoveryBlackoutSettingOk() (*Ipv6rangeDiscoveryBlackoutSetting, bool) {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		return nil, false
	}
	return o.DiscoveryBlackoutSetting, true
}

// HasDiscoveryBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6range) HasDiscoveryBlackoutSetting() bool {
	if o != nil && !IsNil(o.DiscoveryBlackoutSetting) {
		return true
	}

	return false
}

// SetDiscoveryBlackoutSetting gets a reference to the given Ipv6rangeDiscoveryBlackoutSetting and assigns it to the DiscoveryBlackoutSetting field.
func (o *Ipv6range) SetDiscoveryBlackoutSetting(v Ipv6rangeDiscoveryBlackoutSetting) {
	o.DiscoveryBlackoutSetting = &v
}

// GetDiscoveryMember returns the DiscoveryMember field value if set, zero value otherwise.
func (o *Ipv6range) GetDiscoveryMember() string {
	if o == nil || IsNil(o.DiscoveryMember) {
		var ret string
		return ret
	}
	return *o.DiscoveryMember
}

// GetDiscoveryMemberOk returns a tuple with the DiscoveryMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetDiscoveryMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMember) {
		return nil, false
	}
	return o.DiscoveryMember, true
}

// HasDiscoveryMember returns a boolean if a field has been set.
func (o *Ipv6range) HasDiscoveryMember() bool {
	if o != nil && !IsNil(o.DiscoveryMember) {
		return true
	}

	return false
}

// SetDiscoveryMember gets a reference to the given string and assigns it to the DiscoveryMember field.
func (o *Ipv6range) SetDiscoveryMember(v string) {
	o.DiscoveryMember = &v
}

// GetEnableDiscovery returns the EnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6range) GetEnableDiscovery() bool {
	if o == nil || IsNil(o.EnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableDiscovery
}

// GetEnableDiscoveryOk returns a tuple with the EnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDiscovery) {
		return nil, false
	}
	return o.EnableDiscovery, true
}

// HasEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6range) HasEnableDiscovery() bool {
	if o != nil && !IsNil(o.EnableDiscovery) {
		return true
	}

	return false
}

// SetEnableDiscovery gets a reference to the given bool and assigns it to the EnableDiscovery field.
func (o *Ipv6range) SetEnableDiscovery(v bool) {
	o.EnableDiscovery = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Ipv6range) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Ipv6range) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Ipv6range) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEndAddr returns the EndAddr field value if set, zero value otherwise.
func (o *Ipv6range) GetEndAddr() string {
	if o == nil || IsNil(o.EndAddr) {
		var ret string
		return ret
	}
	return *o.EndAddr
}

// GetEndAddrOk returns a tuple with the EndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetEndAddrOk() (*string, bool) {
	if o == nil || IsNil(o.EndAddr) {
		return nil, false
	}
	return o.EndAddr, true
}

// HasEndAddr returns a boolean if a field has been set.
func (o *Ipv6range) HasEndAddr() bool {
	if o != nil && !IsNil(o.EndAddr) {
		return true
	}

	return false
}

// SetEndAddr gets a reference to the given string and assigns it to the EndAddr field.
func (o *Ipv6range) SetEndAddr(v string) {
	o.EndAddr = &v
}

// GetEndpointSources returns the EndpointSources field value if set, zero value otherwise.
func (o *Ipv6range) GetEndpointSources() []map[string]interface{} {
	if o == nil || IsNil(o.EndpointSources) {
		var ret []map[string]interface{}
		return ret
	}
	return o.EndpointSources
}

// GetEndpointSourcesOk returns a tuple with the EndpointSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetEndpointSourcesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.EndpointSources) {
		return nil, false
	}
	return o.EndpointSources, true
}

// HasEndpointSources returns a boolean if a field has been set.
func (o *Ipv6range) HasEndpointSources() bool {
	if o != nil && !IsNil(o.EndpointSources) {
		return true
	}

	return false
}

// SetEndpointSources gets a reference to the given []map[string]interface{} and assigns it to the EndpointSources field.
func (o *Ipv6range) SetEndpointSources(v []map[string]interface{}) {
	o.EndpointSources = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Ipv6range) GetExclude() []Ipv6rangeExclude {
	if o == nil || IsNil(o.Exclude) {
		var ret []Ipv6rangeExclude
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetExcludeOk() ([]Ipv6rangeExclude, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Ipv6range) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []Ipv6rangeExclude and assigns it to the Exclude field.
func (o *Ipv6range) SetExclude(v []Ipv6rangeExclude) {
	o.Exclude = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ipv6range) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ipv6range) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ipv6range) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIpv6EndPrefix returns the Ipv6EndPrefix field value if set, zero value otherwise.
func (o *Ipv6range) GetIpv6EndPrefix() string {
	if o == nil || IsNil(o.Ipv6EndPrefix) {
		var ret string
		return ret
	}
	return *o.Ipv6EndPrefix
}

// GetIpv6EndPrefixOk returns a tuple with the Ipv6EndPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetIpv6EndPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6EndPrefix) {
		return nil, false
	}
	return o.Ipv6EndPrefix, true
}

// HasIpv6EndPrefix returns a boolean if a field has been set.
func (o *Ipv6range) HasIpv6EndPrefix() bool {
	if o != nil && !IsNil(o.Ipv6EndPrefix) {
		return true
	}

	return false
}

// SetIpv6EndPrefix gets a reference to the given string and assigns it to the Ipv6EndPrefix field.
func (o *Ipv6range) SetIpv6EndPrefix(v string) {
	o.Ipv6EndPrefix = &v
}

// GetIpv6PrefixBits returns the Ipv6PrefixBits field value if set, zero value otherwise.
func (o *Ipv6range) GetIpv6PrefixBits() int64 {
	if o == nil || IsNil(o.Ipv6PrefixBits) {
		var ret int64
		return ret
	}
	return *o.Ipv6PrefixBits
}

// GetIpv6PrefixBitsOk returns a tuple with the Ipv6PrefixBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetIpv6PrefixBitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6PrefixBits) {
		return nil, false
	}
	return o.Ipv6PrefixBits, true
}

// HasIpv6PrefixBits returns a boolean if a field has been set.
func (o *Ipv6range) HasIpv6PrefixBits() bool {
	if o != nil && !IsNil(o.Ipv6PrefixBits) {
		return true
	}

	return false
}

// SetIpv6PrefixBits gets a reference to the given int64 and assigns it to the Ipv6PrefixBits field.
func (o *Ipv6range) SetIpv6PrefixBits(v int64) {
	o.Ipv6PrefixBits = &v
}

// GetIpv6StartPrefix returns the Ipv6StartPrefix field value if set, zero value otherwise.
func (o *Ipv6range) GetIpv6StartPrefix() string {
	if o == nil || IsNil(o.Ipv6StartPrefix) {
		var ret string
		return ret
	}
	return *o.Ipv6StartPrefix
}

// GetIpv6StartPrefixOk returns a tuple with the Ipv6StartPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetIpv6StartPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6StartPrefix) {
		return nil, false
	}
	return o.Ipv6StartPrefix, true
}

// HasIpv6StartPrefix returns a boolean if a field has been set.
func (o *Ipv6range) HasIpv6StartPrefix() bool {
	if o != nil && !IsNil(o.Ipv6StartPrefix) {
		return true
	}

	return false
}

// SetIpv6StartPrefix gets a reference to the given string and assigns it to the Ipv6StartPrefix field.
func (o *Ipv6range) SetIpv6StartPrefix(v string) {
	o.Ipv6StartPrefix = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6range) GetLogicFilterRules() []Ipv6rangeLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6rangeLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetLogicFilterRulesOk() ([]Ipv6rangeLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6range) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6rangeLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6range) SetLogicFilterRules(v []Ipv6rangeLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Ipv6range) GetMember() Ipv6rangeMember {
	if o == nil || IsNil(o.Member) {
		var ret Ipv6rangeMember
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetMemberOk() (*Ipv6rangeMember, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Ipv6range) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given Ipv6rangeMember and assigns it to the Member field.
func (o *Ipv6range) SetMember(v Ipv6rangeMember) {
	o.Member = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6range) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6range) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6range) SetName(v string) {
	o.Name = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Ipv6range) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Ipv6range) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Ipv6range) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Ipv6range) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Ipv6range) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Ipv6range) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextAvailableIp returns the NextAvailableIp field value if set, zero value otherwise.
func (o *Ipv6range) GetNextAvailableIp() map[string]interface{} {
	if o == nil || IsNil(o.NextAvailableIp) {
		var ret map[string]interface{}
		return ret
	}
	return o.NextAvailableIp
}

// GetNextAvailableIpOk returns a tuple with the NextAvailableIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetNextAvailableIpOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NextAvailableIp) {
		return map[string]interface{}{}, false
	}
	return o.NextAvailableIp, true
}

// HasNextAvailableIp returns a boolean if a field has been set.
func (o *Ipv6range) HasNextAvailableIp() bool {
	if o != nil && !IsNil(o.NextAvailableIp) {
		return true
	}

	return false
}

// SetNextAvailableIp gets a reference to the given map[string]interface{} and assigns it to the NextAvailableIp field.
func (o *Ipv6range) SetNextAvailableIp(v map[string]interface{}) {
	o.NextAvailableIp = v
}

// GetOptionFilterRules returns the OptionFilterRules field value if set, zero value otherwise.
func (o *Ipv6range) GetOptionFilterRules() []Ipv6rangeOptionFilterRules {
	if o == nil || IsNil(o.OptionFilterRules) {
		var ret []Ipv6rangeOptionFilterRules
		return ret
	}
	return o.OptionFilterRules
}

// GetOptionFilterRulesOk returns a tuple with the OptionFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetOptionFilterRulesOk() ([]Ipv6rangeOptionFilterRules, bool) {
	if o == nil || IsNil(o.OptionFilterRules) {
		return nil, false
	}
	return o.OptionFilterRules, true
}

// HasOptionFilterRules returns a boolean if a field has been set.
func (o *Ipv6range) HasOptionFilterRules() bool {
	if o != nil && !IsNil(o.OptionFilterRules) {
		return true
	}

	return false
}

// SetOptionFilterRules gets a reference to the given []Ipv6rangeOptionFilterRules and assigns it to the OptionFilterRules field.
func (o *Ipv6range) SetOptionFilterRules(v []Ipv6rangeOptionFilterRules) {
	o.OptionFilterRules = v
}

// GetPortControlBlackoutSetting returns the PortControlBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6range) GetPortControlBlackoutSetting() Ipv6rangePortControlBlackoutSetting {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		var ret Ipv6rangePortControlBlackoutSetting
		return ret
	}
	return *o.PortControlBlackoutSetting
}

// GetPortControlBlackoutSettingOk returns a tuple with the PortControlBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetPortControlBlackoutSettingOk() (*Ipv6rangePortControlBlackoutSetting, bool) {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		return nil, false
	}
	return o.PortControlBlackoutSetting, true
}

// HasPortControlBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6range) HasPortControlBlackoutSetting() bool {
	if o != nil && !IsNil(o.PortControlBlackoutSetting) {
		return true
	}

	return false
}

// SetPortControlBlackoutSetting gets a reference to the given Ipv6rangePortControlBlackoutSetting and assigns it to the PortControlBlackoutSetting field.
func (o *Ipv6range) SetPortControlBlackoutSetting(v Ipv6rangePortControlBlackoutSetting) {
	o.PortControlBlackoutSetting = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Ipv6range) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6range) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Ipv6range) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Ipv6range) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Ipv6range) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Ipv6range) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetSamePortControlDiscoveryBlackout returns the SamePortControlDiscoveryBlackout field value if set, zero value otherwise.
func (o *Ipv6range) GetSamePortControlDiscoveryBlackout() bool {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		var ret bool
		return ret
	}
	return *o.SamePortControlDiscoveryBlackout
}

// GetSamePortControlDiscoveryBlackoutOk returns a tuple with the SamePortControlDiscoveryBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetSamePortControlDiscoveryBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		return nil, false
	}
	return o.SamePortControlDiscoveryBlackout, true
}

// HasSamePortControlDiscoveryBlackout returns a boolean if a field has been set.
func (o *Ipv6range) HasSamePortControlDiscoveryBlackout() bool {
	if o != nil && !IsNil(o.SamePortControlDiscoveryBlackout) {
		return true
	}

	return false
}

// SetSamePortControlDiscoveryBlackout gets a reference to the given bool and assigns it to the SamePortControlDiscoveryBlackout field.
func (o *Ipv6range) SetSamePortControlDiscoveryBlackout(v bool) {
	o.SamePortControlDiscoveryBlackout = &v
}

// GetServerAssociationType returns the ServerAssociationType field value if set, zero value otherwise.
func (o *Ipv6range) GetServerAssociationType() string {
	if o == nil || IsNil(o.ServerAssociationType) {
		var ret string
		return ret
	}
	return *o.ServerAssociationType
}

// GetServerAssociationTypeOk returns a tuple with the ServerAssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetServerAssociationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAssociationType) {
		return nil, false
	}
	return o.ServerAssociationType, true
}

// HasServerAssociationType returns a boolean if a field has been set.
func (o *Ipv6range) HasServerAssociationType() bool {
	if o != nil && !IsNil(o.ServerAssociationType) {
		return true
	}

	return false
}

// SetServerAssociationType gets a reference to the given string and assigns it to the ServerAssociationType field.
func (o *Ipv6range) SetServerAssociationType(v string) {
	o.ServerAssociationType = &v
}

// GetStartAddr returns the StartAddr field value if set, zero value otherwise.
func (o *Ipv6range) GetStartAddr() string {
	if o == nil || IsNil(o.StartAddr) {
		var ret string
		return ret
	}
	return *o.StartAddr
}

// GetStartAddrOk returns a tuple with the StartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetStartAddrOk() (*string, bool) {
	if o == nil || IsNil(o.StartAddr) {
		return nil, false
	}
	return o.StartAddr, true
}

// HasStartAddr returns a boolean if a field has been set.
func (o *Ipv6range) HasStartAddr() bool {
	if o != nil && !IsNil(o.StartAddr) {
		return true
	}

	return false
}

// SetStartAddr gets a reference to the given string and assigns it to the StartAddr field.
func (o *Ipv6range) SetStartAddr(v string) {
	o.StartAddr = &v
}

// GetSubscribeSettings returns the SubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6range) GetSubscribeSettings() Ipv6rangeSubscribeSettings {
	if o == nil || IsNil(o.SubscribeSettings) {
		var ret Ipv6rangeSubscribeSettings
		return ret
	}
	return *o.SubscribeSettings
}

// GetSubscribeSettingsOk returns a tuple with the SubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetSubscribeSettingsOk() (*Ipv6rangeSubscribeSettings, bool) {
	if o == nil || IsNil(o.SubscribeSettings) {
		return nil, false
	}
	return o.SubscribeSettings, true
}

// HasSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6range) HasSubscribeSettings() bool {
	if o != nil && !IsNil(o.SubscribeSettings) {
		return true
	}

	return false
}

// SetSubscribeSettings gets a reference to the given Ipv6rangeSubscribeSettings and assigns it to the SubscribeSettings field.
func (o *Ipv6range) SetSubscribeSettings(v Ipv6rangeSubscribeSettings) {
	o.SubscribeSettings = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Ipv6range) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Ipv6range) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Ipv6range) SetTemplate(v string) {
	o.Template = &v
}

// GetUseBlackoutSetting returns the UseBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6range) GetUseBlackoutSetting() bool {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseBlackoutSetting
}

// GetUseBlackoutSettingOk returns a tuple with the UseBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseBlackoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		return nil, false
	}
	return o.UseBlackoutSetting, true
}

// HasUseBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6range) HasUseBlackoutSetting() bool {
	if o != nil && !IsNil(o.UseBlackoutSetting) {
		return true
	}

	return false
}

// SetUseBlackoutSetting gets a reference to the given bool and assigns it to the UseBlackoutSetting field.
func (o *Ipv6range) SetUseBlackoutSetting(v bool) {
	o.UseBlackoutSetting = &v
}

// GetUseDiscoveryBasicPollingSettings returns the UseDiscoveryBasicPollingSettings field value if set, zero value otherwise.
func (o *Ipv6range) GetUseDiscoveryBasicPollingSettings() bool {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		var ret bool
		return ret
	}
	return *o.UseDiscoveryBasicPollingSettings
}

// GetUseDiscoveryBasicPollingSettingsOk returns a tuple with the UseDiscoveryBasicPollingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseDiscoveryBasicPollingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		return nil, false
	}
	return o.UseDiscoveryBasicPollingSettings, true
}

// HasUseDiscoveryBasicPollingSettings returns a boolean if a field has been set.
func (o *Ipv6range) HasUseDiscoveryBasicPollingSettings() bool {
	if o != nil && !IsNil(o.UseDiscoveryBasicPollingSettings) {
		return true
	}

	return false
}

// SetUseDiscoveryBasicPollingSettings gets a reference to the given bool and assigns it to the UseDiscoveryBasicPollingSettings field.
func (o *Ipv6range) SetUseDiscoveryBasicPollingSettings(v bool) {
	o.UseDiscoveryBasicPollingSettings = &v
}

// GetUseEnableDiscovery returns the UseEnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6range) GetUseEnableDiscovery() bool {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.UseEnableDiscovery
}

// GetUseEnableDiscoveryOk returns a tuple with the UseEnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		return nil, false
	}
	return o.UseEnableDiscovery, true
}

// HasUseEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6range) HasUseEnableDiscovery() bool {
	if o != nil && !IsNil(o.UseEnableDiscovery) {
		return true
	}

	return false
}

// SetUseEnableDiscovery gets a reference to the given bool and assigns it to the UseEnableDiscovery field.
func (o *Ipv6range) SetUseEnableDiscovery(v bool) {
	o.UseEnableDiscovery = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6range) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6range) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6range) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Ipv6range) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6range) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Ipv6range) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseSubscribeSettings returns the UseSubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6range) GetUseSubscribeSettings() bool {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		var ret bool
		return ret
	}
	return *o.UseSubscribeSettings
}

// GetUseSubscribeSettingsOk returns a tuple with the UseSubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6range) GetUseSubscribeSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		return nil, false
	}
	return o.UseSubscribeSettings, true
}

// HasUseSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6range) HasUseSubscribeSettings() bool {
	if o != nil && !IsNil(o.UseSubscribeSettings) {
		return true
	}

	return false
}

// SetUseSubscribeSettings gets a reference to the given bool and assigns it to the UseSubscribeSettings field.
func (o *Ipv6range) SetUseSubscribeSettings(v bool) {
	o.UseSubscribeSettings = &v
}

func (o Ipv6range) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6range) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddressType) {
		toSerialize["address_type"] = o.AddressType
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveryBasicPollSettings) {
		toSerialize["discovery_basic_poll_settings"] = o.DiscoveryBasicPollSettings
	}
	if !IsNil(o.DiscoveryBlackoutSetting) {
		toSerialize["discovery_blackout_setting"] = o.DiscoveryBlackoutSetting
	}
	if !IsNil(o.DiscoveryMember) {
		toSerialize["discovery_member"] = o.DiscoveryMember
	}
	if !IsNil(o.EnableDiscovery) {
		toSerialize["enable_discovery"] = o.EnableDiscovery
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EndAddr) {
		toSerialize["end_addr"] = o.EndAddr
	}
	if !IsNil(o.EndpointSources) {
		toSerialize["endpoint_sources"] = o.EndpointSources
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Ipv6EndPrefix) {
		toSerialize["ipv6_end_prefix"] = o.Ipv6EndPrefix
	}
	if !IsNil(o.Ipv6PrefixBits) {
		toSerialize["ipv6_prefix_bits"] = o.Ipv6PrefixBits
	}
	if !IsNil(o.Ipv6StartPrefix) {
		toSerialize["ipv6_start_prefix"] = o.Ipv6StartPrefix
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NextAvailableIp) {
		toSerialize["next_available_ip"] = o.NextAvailableIp
	}
	if !IsNil(o.OptionFilterRules) {
		toSerialize["option_filter_rules"] = o.OptionFilterRules
	}
	if !IsNil(o.PortControlBlackoutSetting) {
		toSerialize["port_control_blackout_setting"] = o.PortControlBlackoutSetting
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.SamePortControlDiscoveryBlackout) {
		toSerialize["same_port_control_discovery_blackout"] = o.SamePortControlDiscoveryBlackout
	}
	if !IsNil(o.ServerAssociationType) {
		toSerialize["server_association_type"] = o.ServerAssociationType
	}
	if !IsNil(o.StartAddr) {
		toSerialize["start_addr"] = o.StartAddr
	}
	if !IsNil(o.SubscribeSettings) {
		toSerialize["subscribe_settings"] = o.SubscribeSettings
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.UseBlackoutSetting) {
		toSerialize["use_blackout_setting"] = o.UseBlackoutSetting
	}
	if !IsNil(o.UseDiscoveryBasicPollingSettings) {
		toSerialize["use_discovery_basic_polling_settings"] = o.UseDiscoveryBasicPollingSettings
	}
	if !IsNil(o.UseEnableDiscovery) {
		toSerialize["use_enable_discovery"] = o.UseEnableDiscovery
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseSubscribeSettings) {
		toSerialize["use_subscribe_settings"] = o.UseSubscribeSettings
	}
	return toSerialize, nil
}

type NullableIpv6range struct {
	value *Ipv6range
	isSet bool
}

func (v NullableIpv6range) Get() *Ipv6range {
	return v.value
}

func (v *NullableIpv6range) Set(val *Ipv6range) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6range) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6range) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6range(val *Ipv6range) *NullableIpv6range {
	return &NullableIpv6range{value: val, isSet: true}
}

func (v NullableIpv6range) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6range) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
