/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6rangeLogicFilterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6rangeLogicFilterRules{}

// Ipv6rangeLogicFilterRules struct for Ipv6rangeLogicFilterRules
type Ipv6rangeLogicFilterRules struct {
	// The filter name.
	Filter *string `json:"filter,omitempty"`
	// The filter type. Valid values are: * MAC * NAC * Option
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6rangeLogicFilterRules Ipv6rangeLogicFilterRules

// NewIpv6rangeLogicFilterRules instantiates a new Ipv6rangeLogicFilterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6rangeLogicFilterRules() *Ipv6rangeLogicFilterRules {
	this := Ipv6rangeLogicFilterRules{}
	return &this
}

// NewIpv6rangeLogicFilterRulesWithDefaults instantiates a new Ipv6rangeLogicFilterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6rangeLogicFilterRulesWithDefaults() *Ipv6rangeLogicFilterRules {
	this := Ipv6rangeLogicFilterRules{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Ipv6rangeLogicFilterRules) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangeLogicFilterRules) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Ipv6rangeLogicFilterRules) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *Ipv6rangeLogicFilterRules) SetFilter(v string) {
	o.Filter = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Ipv6rangeLogicFilterRules) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangeLogicFilterRules) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ipv6rangeLogicFilterRules) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Ipv6rangeLogicFilterRules) SetType(v string) {
	o.Type = &v
}

func (o Ipv6rangeLogicFilterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6rangeLogicFilterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6rangeLogicFilterRules) UnmarshalJSON(data []byte) (err error) {
	varIpv6rangeLogicFilterRules := _Ipv6rangeLogicFilterRules{}

	err = json.Unmarshal(data, &varIpv6rangeLogicFilterRules)

	if err != nil {
		return err
	}

	*o = Ipv6rangeLogicFilterRules(varIpv6rangeLogicFilterRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6rangeLogicFilterRules struct {
	value *Ipv6rangeLogicFilterRules
	isSet bool
}

func (v NullableIpv6rangeLogicFilterRules) Get() *Ipv6rangeLogicFilterRules {
	return v.value
}

func (v *NullableIpv6rangeLogicFilterRules) Set(val *Ipv6rangeLogicFilterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6rangeLogicFilterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6rangeLogicFilterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6rangeLogicFilterRules(val *Ipv6rangeLogicFilterRules) *NullableIpv6rangeLogicFilterRules {
	return &NullableIpv6rangeLogicFilterRules{value: val, isSet: true}
}

func (v NullableIpv6rangeLogicFilterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6rangeLogicFilterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
