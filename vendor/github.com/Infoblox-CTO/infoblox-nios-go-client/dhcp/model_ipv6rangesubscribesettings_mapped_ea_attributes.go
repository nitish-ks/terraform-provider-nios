/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6rangesubscribesettingsMappedEaAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6rangesubscribesettingsMappedEaAttributes{}

// Ipv6rangesubscribesettingsMappedEaAttributes struct for Ipv6rangesubscribesettingsMappedEaAttributes
type Ipv6rangesubscribesettingsMappedEaAttributes struct {
	// The Cisco ISE attribute name that is enabled for publishsing from a Cisco ISE endpoint.
	Name *string `json:"name,omitempty"`
	// The name of the extensible attribute definition object the Cisco ISE attribute that is enabled for subscription is mapped on.
	MappedEa             *string `json:"mapped_ea,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6rangesubscribesettingsMappedEaAttributes Ipv6rangesubscribesettingsMappedEaAttributes

// NewIpv6rangesubscribesettingsMappedEaAttributes instantiates a new Ipv6rangesubscribesettingsMappedEaAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6rangesubscribesettingsMappedEaAttributes() *Ipv6rangesubscribesettingsMappedEaAttributes {
	this := Ipv6rangesubscribesettingsMappedEaAttributes{}
	return &this
}

// NewIpv6rangesubscribesettingsMappedEaAttributesWithDefaults instantiates a new Ipv6rangesubscribesettingsMappedEaAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6rangesubscribesettingsMappedEaAttributesWithDefaults() *Ipv6rangesubscribesettingsMappedEaAttributes {
	this := Ipv6rangesubscribesettingsMappedEaAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) SetName(v string) {
	o.Name = &v
}

// GetMappedEa returns the MappedEa field value if set, zero value otherwise.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) GetMappedEa() string {
	if o == nil || IsNil(o.MappedEa) {
		var ret string
		return ret
	}
	return *o.MappedEa
}

// GetMappedEaOk returns a tuple with the MappedEa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) GetMappedEaOk() (*string, bool) {
	if o == nil || IsNil(o.MappedEa) {
		return nil, false
	}
	return o.MappedEa, true
}

// HasMappedEa returns a boolean if a field has been set.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) HasMappedEa() bool {
	if o != nil && !IsNil(o.MappedEa) {
		return true
	}

	return false
}

// SetMappedEa gets a reference to the given string and assigns it to the MappedEa field.
func (o *Ipv6rangesubscribesettingsMappedEaAttributes) SetMappedEa(v string) {
	o.MappedEa = &v
}

func (o Ipv6rangesubscribesettingsMappedEaAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6rangesubscribesettingsMappedEaAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MappedEa) {
		toSerialize["mapped_ea"] = o.MappedEa
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6rangesubscribesettingsMappedEaAttributes) UnmarshalJSON(data []byte) (err error) {
	varIpv6rangesubscribesettingsMappedEaAttributes := _Ipv6rangesubscribesettingsMappedEaAttributes{}

	err = json.Unmarshal(data, &varIpv6rangesubscribesettingsMappedEaAttributes)

	if err != nil {
		return err
	}

	*o = Ipv6rangesubscribesettingsMappedEaAttributes(varIpv6rangesubscribesettingsMappedEaAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "mapped_ea")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6rangesubscribesettingsMappedEaAttributes struct {
	value *Ipv6rangesubscribesettingsMappedEaAttributes
	isSet bool
}

func (v NullableIpv6rangesubscribesettingsMappedEaAttributes) Get() *Ipv6rangesubscribesettingsMappedEaAttributes {
	return v.value
}

func (v *NullableIpv6rangesubscribesettingsMappedEaAttributes) Set(val *Ipv6rangesubscribesettingsMappedEaAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6rangesubscribesettingsMappedEaAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6rangesubscribesettingsMappedEaAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6rangesubscribesettingsMappedEaAttributes(val *Ipv6rangesubscribesettingsMappedEaAttributes) *NullableIpv6rangesubscribesettingsMappedEaAttributes {
	return &NullableIpv6rangesubscribesettingsMappedEaAttributes{value: val, isSet: true}
}

func (v NullableIpv6rangesubscribesettingsMappedEaAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6rangesubscribesettingsMappedEaAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
