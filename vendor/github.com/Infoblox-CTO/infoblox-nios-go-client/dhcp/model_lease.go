/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Lease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lease{}

// Lease struct for Lease
type Lease struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IPv4 Address or IPv6 Address of the lease.
	Address *string `json:"address,omitempty"`
	// The billing_class value of a DHCP Lease object. This field specifies the class to which this lease is currently billed. This field is for IPv4 leases only.
	BillingClass *string `json:"billing_class,omitempty"`
	// The binding state for the current lease. Following are some of the values this field can be set to: * ABANDONED: The Infoblox appliance cannot lease this IP address because the appliance received a response when it pinged the address. * ACTIVE: The lease is currently in use by a DHCP client. * EXPIRED: The lease was in use, but the DHCP client never renewed it, so it is no longer valid. * FREE: The lease is available for clients to use. * RELEASED: The DHCP client returned the lease to the appliance.
	BindingState *string `json:"binding_state,omitempty"`
	// The client_hostname of a DHCP Lease object. This field specifies the host name that the DHCP client sends to the Infoblox appliance using DHCP option 12.
	ClientHostname *string `json:"client_hostname,omitempty"`
	// The CLTT (Client Last Transaction Time) value of a DHCP Lease object. This field specifies the time of the last transaction with the DHCP client for this lease.
	Cltt           *int64               `json:"cltt,omitempty"`
	DiscoveredData *LeaseDiscoveredData `json:"discovered_data,omitempty"`
	// The end time value of a DHCP Lease object. This field specifies the time when a lease ended.
	Ends *int64 `json:"ends,omitempty"`
	// DHCP fingerprint for the lease.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// The hardware type of a DHCP Lease object. This field specifies the MAC address of the network interface on which the lease will be used. This field is for IPv4 leases only.
	Hardware *string `json:"hardware,omitempty"`
	// The DUID value for this lease. This field is only applicable for IPv6 leases.
	Ipv6Duid *string `json:"ipv6_duid,omitempty"`
	// The interface ID of an IPv6 address that the Infoblox appliance leased to the DHCP client. This field is for IPv6 leases only.
	Ipv6Iaid *string `json:"ipv6_iaid,omitempty"`
	// The preferred lifetime value of an IPv6 address that the Infoblox appliance leased to the DHCP client. This field is for IPv6 leases only.
	Ipv6PreferredLifetime *int64 `json:"ipv6_preferred_lifetime,omitempty"`
	// Prefix bits for this lease. This field is for IPv6 leases only.
	Ipv6PrefixBits *int64 `json:"ipv6_prefix_bits,omitempty"`
	// This flag reflects whether the MAC address for this lease is invalid.
	IsInvalidMac *bool              `json:"is_invalid_mac,omitempty"`
	MsAdUserData *LeaseMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The network, in \"network/netmask\" format, with which this lease is associated.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which this lease resides.
	NetworkView *string `json:"network_view,omitempty"`
	// If this field is set to True, the lease does not have an end time.
	NeverEnds *bool `json:"never_ends,omitempty"`
	// If this field is set to True, the lease does not have a start time.
	NeverStarts *bool `json:"never_starts,omitempty"`
	// The subsequent binding state when the current lease expires. This field is for IPv4 leases only. Following are some of the values this field can be set to: * ABANDONED: The Infoblox appliance cannot lease this IP address because the appliance received a response when it pinged the address. * ACTIVE: The lease is currently in use by a DHCP client. * EXPIRED: The lease was in use, but the DHCP client never renewed it, so it is no longer valid. * FREE: The lease is available for clients to use. * RELEASED: The DHCP client returned the lease to the appliance.
	NextBindingState *string `json:"next_binding_state,omitempty"`
	// The list of commands to be executed when the lease is granted.
	OnCommit *string `json:"on_commit,omitempty"`
	// The list of commands to be executed when the lease expires.
	OnExpiry *string `json:"on_expiry,omitempty"`
	// The list of commands to be executed when the lease is released.
	OnRelease *string `json:"on_release,omitempty"`
	// The option value of a DHCP Lease object. This field specifies the agent circuit ID and remote ID sent by a DHCP relay agent in DHCP option 82. This field is for IPv4 leases only.
	Option *string `json:"option,omitempty"`
	// This field determines whether the lease is an IPv4 or IPv6 address.
	Protocol *string `json:"protocol,omitempty"`
	// This field represents the \"Remote ID\" sub-option of DHCP option 82. Remote ID can be in ASCII form (e.g. ``\"abcd\"``) or in colon-separated HEX form (e.g. ``1:2:ab:cd``). HEX representation is used only when the sub-option value contains unprintable characters. If a remote ID sub-option value is in ASCII form, it is always enclosed in quotes to prevent ambiguous values (e.g. ``\"10:20\"`` - ASCII 5-byte string; ``10:20`` - HEX 2-byte value). * ASCII representation is used if the remote ID sub-option contains only printable ASCII characters (ASCII characters in range ``x20-0x7E``). * The backslash symbol (``\\``) is used as an escape symbol to escape the quote symbol (``\"``) in an ASCII string. * Double backslashes (``\\\\``) are used to represent the backslash symbol (``\\``) in an ASCII string. * HEX representation is used only when the remote ID sub-option value contains unprintable characters and is normalized as follows: * starting zero is removed from digits: ``1``, ``a`` - Valid; ``01``, ``0a`` - Invalid; * lowercase characters are used for symbols: ``fa`` - Valid; ``FA`` - Invalid. NIOS does not support the convertion between HEX and ASCII formats. Searches are performed using the exact same format and value as the sub-option is represented. Query examples assume the following leases are stored in the database: .. tabularcolumns:: |p{1in}|p{3in}|p{2in}| ========= ========================== ============================ Number Option field Extracted remote ID field ========= ========================== ============================ Lease01 agent.remote-id= \"00152654358700\" \"00152654358700\" agent.circuit-id= \"BX1-PORT-003\" Lease02 agent.remote-id=\"Dhcp \"Dhcp Relay 10\" Relay 10\" agent.circuit-id=\"Port008\" Lease03 agent.remote-id=\"00:01:02\" \"00:01:02\" Lease04 agent.remote-id=0:1:2 0:1:2 Lease05 agent.remote-id=02:03 2:3 Lease06 agent.remote-id=10:20 10:20 Lease07 agent.circuit-id= \"no-remote-id\" ========= ========================== ============================ Expected results: .. tabularcolumns:: |p{1.5in}|p{1.5in}|p{3in}| ========================= ==================== ============================= Query Returned leases Comments ========================= ==================== ============================= remote_id=01:02 None EXACT query. No results are expected. remote_id=\"Dhcp Relay 10\" Lease02 EXACT query for an ASCII value. remote_id=0:1:2 Lease04 EXACT query for a HEX value. remote_id=00:01:02 None EXACT query for a HEX value. No results are expected as the search value is not normalized to the same format used in the database. remote_id~=10 Lease02, Lease06 REGEX query. remote_id~=^\".*1 Lease01, Lease02, REGEX query. Only ASCII Lease03 values are expected due to the starting quote (``\"``) in the search value. remote_id~=^[^\"]*2 Lease04, Lease05, REGEX query. Only HEX values Lease06 are expected as the starting quote (``\"``) is excluded from the search value. remote_id=\"\" None EXACT query. No results are expected as no leases that contain an empty remote ID value exist in the database. ID value in the database. remote_id~=\"\" Lease01, Lease02, REGEX query. This query is Lease03, Lease04, expected to match any Lease05, Lease06 lease that contain remote ID set to any value. ========================= ==================== ============================= **NOTE:** Lease07 is not expected to be returned when searching for the remote ID sub-option.
	RemoteId *string `json:"remote_id,omitempty"`
	// The IP address of the server that sends an active lease to a client.
	ServedBy *string `json:"served_by,omitempty"`
	// The host name of the Grid member or Microsoft DHCP server that issues the lease.
	ServerHostName *string `json:"server_host_name,omitempty"`
	// The start time of a DHCP Lease object. This field specifies the time when the lease starts.
	Starts *int64 `json:"starts,omitempty"`
	// The TSFP (Time Sent From Partner) value of a DHCP Lease object. This field specifies the time that the current lease state ends, from the point of view of a remote DHCP failover peer. This field is for IPv4 leases only.
	Tsfp *int64 `json:"tsfp,omitempty"`
	// The TSTP (Time Sent To Partner) value of a DHCP Lease object. This field specifies the time that the current lease state ends, from the point of view of a local DHCP failover peer. This field is for IPv4 leases only.
	Tstp *int64 `json:"tstp,omitempty"`
	// The UID (User ID) value of a DHCP Lease object. This field specifies the client identifier that the DHCP client sends the Infoblox appliance (in DHCP option 61) when it acquires the lease. Not all DHCP clients send a UID. This field is for IPv4 leases only.
	Uid *string `json:"uid,omitempty"`
	// The user name that the server has associated with a DHCP Lease object.
	Username *string `json:"username,omitempty"`
	// The variable value of a DHCP Lease object. This field keeps all variables related to the DDNS update of the DHCP lease. The variables related to the DDNS updates of the DHCP lease. The variables can be one of the following: ddns-text: The ddns-text variable is used to record the value of the client's TXT identification record when the interim DDNS update style has been used to update the DNS service for a particular lease. ddns-fwd-name: When a DDNS update was successfully completed, the ddns-fwd-name variable records the value of the name used when the client's A record was updated. The server may have used this name when it updated the client's PTR record. ddns-client-fqdn: If the server is configured to use the interim DDNS update style and is also configured to allow clients to update their own FQDNs, the ddns-client-fqdn variable records the name that the client used when it updated its own FQDN. This is also the name that the server used to update the client's PTR record. ddns-rev-name: If the server successfully updates the client's PTR record, this variable will record the name that the DHCP server used for the PTR record. The name to which the PTR record points will be either the ddns-fwd-name or the ddns-client-fqdn.
	Variable *string `json:"variable,omitempty"`
}

// NewLease instantiates a new Lease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLease() *Lease {
	this := Lease{}
	return &this
}

// NewLeaseWithDefaults instantiates a new Lease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaseWithDefaults() *Lease {
	this := Lease{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Lease) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Lease) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Lease) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Lease) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Lease) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Lease) SetAddress(v string) {
	o.Address = &v
}

// GetBillingClass returns the BillingClass field value if set, zero value otherwise.
func (o *Lease) GetBillingClass() string {
	if o == nil || IsNil(o.BillingClass) {
		var ret string
		return ret
	}
	return *o.BillingClass
}

// GetBillingClassOk returns a tuple with the BillingClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetBillingClassOk() (*string, bool) {
	if o == nil || IsNil(o.BillingClass) {
		return nil, false
	}
	return o.BillingClass, true
}

// HasBillingClass returns a boolean if a field has been set.
func (o *Lease) HasBillingClass() bool {
	if o != nil && !IsNil(o.BillingClass) {
		return true
	}

	return false
}

// SetBillingClass gets a reference to the given string and assigns it to the BillingClass field.
func (o *Lease) SetBillingClass(v string) {
	o.BillingClass = &v
}

// GetBindingState returns the BindingState field value if set, zero value otherwise.
func (o *Lease) GetBindingState() string {
	if o == nil || IsNil(o.BindingState) {
		var ret string
		return ret
	}
	return *o.BindingState
}

// GetBindingStateOk returns a tuple with the BindingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetBindingStateOk() (*string, bool) {
	if o == nil || IsNil(o.BindingState) {
		return nil, false
	}
	return o.BindingState, true
}

// HasBindingState returns a boolean if a field has been set.
func (o *Lease) HasBindingState() bool {
	if o != nil && !IsNil(o.BindingState) {
		return true
	}

	return false
}

// SetBindingState gets a reference to the given string and assigns it to the BindingState field.
func (o *Lease) SetBindingState(v string) {
	o.BindingState = &v
}

// GetClientHostname returns the ClientHostname field value if set, zero value otherwise.
func (o *Lease) GetClientHostname() string {
	if o == nil || IsNil(o.ClientHostname) {
		var ret string
		return ret
	}
	return *o.ClientHostname
}

// GetClientHostnameOk returns a tuple with the ClientHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetClientHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.ClientHostname) {
		return nil, false
	}
	return o.ClientHostname, true
}

// HasClientHostname returns a boolean if a field has been set.
func (o *Lease) HasClientHostname() bool {
	if o != nil && !IsNil(o.ClientHostname) {
		return true
	}

	return false
}

// SetClientHostname gets a reference to the given string and assigns it to the ClientHostname field.
func (o *Lease) SetClientHostname(v string) {
	o.ClientHostname = &v
}

// GetCltt returns the Cltt field value if set, zero value otherwise.
func (o *Lease) GetCltt() int64 {
	if o == nil || IsNil(o.Cltt) {
		var ret int64
		return ret
	}
	return *o.Cltt
}

// GetClttOk returns a tuple with the Cltt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetClttOk() (*int64, bool) {
	if o == nil || IsNil(o.Cltt) {
		return nil, false
	}
	return o.Cltt, true
}

// HasCltt returns a boolean if a field has been set.
func (o *Lease) HasCltt() bool {
	if o != nil && !IsNil(o.Cltt) {
		return true
	}

	return false
}

// SetCltt gets a reference to the given int64 and assigns it to the Cltt field.
func (o *Lease) SetCltt(v int64) {
	o.Cltt = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *Lease) GetDiscoveredData() LeaseDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret LeaseDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetDiscoveredDataOk() (*LeaseDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *Lease) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given LeaseDiscoveredData and assigns it to the DiscoveredData field.
func (o *Lease) SetDiscoveredData(v LeaseDiscoveredData) {
	o.DiscoveredData = &v
}

// GetEnds returns the Ends field value if set, zero value otherwise.
func (o *Lease) GetEnds() int64 {
	if o == nil || IsNil(o.Ends) {
		var ret int64
		return ret
	}
	return *o.Ends
}

// GetEndsOk returns a tuple with the Ends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetEndsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ends) {
		return nil, false
	}
	return o.Ends, true
}

// HasEnds returns a boolean if a field has been set.
func (o *Lease) HasEnds() bool {
	if o != nil && !IsNil(o.Ends) {
		return true
	}

	return false
}

// SetEnds gets a reference to the given int64 and assigns it to the Ends field.
func (o *Lease) SetEnds(v int64) {
	o.Ends = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *Lease) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Lease) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *Lease) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetHardware returns the Hardware field value if set, zero value otherwise.
func (o *Lease) GetHardware() string {
	if o == nil || IsNil(o.Hardware) {
		var ret string
		return ret
	}
	return *o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetHardwareOk() (*string, bool) {
	if o == nil || IsNil(o.Hardware) {
		return nil, false
	}
	return o.Hardware, true
}

// HasHardware returns a boolean if a field has been set.
func (o *Lease) HasHardware() bool {
	if o != nil && !IsNil(o.Hardware) {
		return true
	}

	return false
}

// SetHardware gets a reference to the given string and assigns it to the Hardware field.
func (o *Lease) SetHardware(v string) {
	o.Hardware = &v
}

// GetIpv6Duid returns the Ipv6Duid field value if set, zero value otherwise.
func (o *Lease) GetIpv6Duid() string {
	if o == nil || IsNil(o.Ipv6Duid) {
		var ret string
		return ret
	}
	return *o.Ipv6Duid
}

// GetIpv6DuidOk returns a tuple with the Ipv6Duid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetIpv6DuidOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Duid) {
		return nil, false
	}
	return o.Ipv6Duid, true
}

// HasIpv6Duid returns a boolean if a field has been set.
func (o *Lease) HasIpv6Duid() bool {
	if o != nil && !IsNil(o.Ipv6Duid) {
		return true
	}

	return false
}

// SetIpv6Duid gets a reference to the given string and assigns it to the Ipv6Duid field.
func (o *Lease) SetIpv6Duid(v string) {
	o.Ipv6Duid = &v
}

// GetIpv6Iaid returns the Ipv6Iaid field value if set, zero value otherwise.
func (o *Lease) GetIpv6Iaid() string {
	if o == nil || IsNil(o.Ipv6Iaid) {
		var ret string
		return ret
	}
	return *o.Ipv6Iaid
}

// GetIpv6IaidOk returns a tuple with the Ipv6Iaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetIpv6IaidOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Iaid) {
		return nil, false
	}
	return o.Ipv6Iaid, true
}

// HasIpv6Iaid returns a boolean if a field has been set.
func (o *Lease) HasIpv6Iaid() bool {
	if o != nil && !IsNil(o.Ipv6Iaid) {
		return true
	}

	return false
}

// SetIpv6Iaid gets a reference to the given string and assigns it to the Ipv6Iaid field.
func (o *Lease) SetIpv6Iaid(v string) {
	o.Ipv6Iaid = &v
}

// GetIpv6PreferredLifetime returns the Ipv6PreferredLifetime field value if set, zero value otherwise.
func (o *Lease) GetIpv6PreferredLifetime() int64 {
	if o == nil || IsNil(o.Ipv6PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.Ipv6PreferredLifetime
}

// GetIpv6PreferredLifetimeOk returns a tuple with the Ipv6PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetIpv6PreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6PreferredLifetime) {
		return nil, false
	}
	return o.Ipv6PreferredLifetime, true
}

// HasIpv6PreferredLifetime returns a boolean if a field has been set.
func (o *Lease) HasIpv6PreferredLifetime() bool {
	if o != nil && !IsNil(o.Ipv6PreferredLifetime) {
		return true
	}

	return false
}

// SetIpv6PreferredLifetime gets a reference to the given int64 and assigns it to the Ipv6PreferredLifetime field.
func (o *Lease) SetIpv6PreferredLifetime(v int64) {
	o.Ipv6PreferredLifetime = &v
}

// GetIpv6PrefixBits returns the Ipv6PrefixBits field value if set, zero value otherwise.
func (o *Lease) GetIpv6PrefixBits() int64 {
	if o == nil || IsNil(o.Ipv6PrefixBits) {
		var ret int64
		return ret
	}
	return *o.Ipv6PrefixBits
}

// GetIpv6PrefixBitsOk returns a tuple with the Ipv6PrefixBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetIpv6PrefixBitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6PrefixBits) {
		return nil, false
	}
	return o.Ipv6PrefixBits, true
}

// HasIpv6PrefixBits returns a boolean if a field has been set.
func (o *Lease) HasIpv6PrefixBits() bool {
	if o != nil && !IsNil(o.Ipv6PrefixBits) {
		return true
	}

	return false
}

// SetIpv6PrefixBits gets a reference to the given int64 and assigns it to the Ipv6PrefixBits field.
func (o *Lease) SetIpv6PrefixBits(v int64) {
	o.Ipv6PrefixBits = &v
}

// GetIsInvalidMac returns the IsInvalidMac field value if set, zero value otherwise.
func (o *Lease) GetIsInvalidMac() bool {
	if o == nil || IsNil(o.IsInvalidMac) {
		var ret bool
		return ret
	}
	return *o.IsInvalidMac
}

// GetIsInvalidMacOk returns a tuple with the IsInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetIsInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInvalidMac) {
		return nil, false
	}
	return o.IsInvalidMac, true
}

// HasIsInvalidMac returns a boolean if a field has been set.
func (o *Lease) HasIsInvalidMac() bool {
	if o != nil && !IsNil(o.IsInvalidMac) {
		return true
	}

	return false
}

// SetIsInvalidMac gets a reference to the given bool and assigns it to the IsInvalidMac field.
func (o *Lease) SetIsInvalidMac(v bool) {
	o.IsInvalidMac = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Lease) GetMsAdUserData() LeaseMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret LeaseMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetMsAdUserDataOk() (*LeaseMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Lease) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given LeaseMsAdUserData and assigns it to the MsAdUserData field.
func (o *Lease) SetMsAdUserData(v LeaseMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Lease) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Lease) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Lease) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Lease) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Lease) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Lease) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNeverEnds returns the NeverEnds field value if set, zero value otherwise.
func (o *Lease) GetNeverEnds() bool {
	if o == nil || IsNil(o.NeverEnds) {
		var ret bool
		return ret
	}
	return *o.NeverEnds
}

// GetNeverEndsOk returns a tuple with the NeverEnds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetNeverEndsOk() (*bool, bool) {
	if o == nil || IsNil(o.NeverEnds) {
		return nil, false
	}
	return o.NeverEnds, true
}

// HasNeverEnds returns a boolean if a field has been set.
func (o *Lease) HasNeverEnds() bool {
	if o != nil && !IsNil(o.NeverEnds) {
		return true
	}

	return false
}

// SetNeverEnds gets a reference to the given bool and assigns it to the NeverEnds field.
func (o *Lease) SetNeverEnds(v bool) {
	o.NeverEnds = &v
}

// GetNeverStarts returns the NeverStarts field value if set, zero value otherwise.
func (o *Lease) GetNeverStarts() bool {
	if o == nil || IsNil(o.NeverStarts) {
		var ret bool
		return ret
	}
	return *o.NeverStarts
}

// GetNeverStartsOk returns a tuple with the NeverStarts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetNeverStartsOk() (*bool, bool) {
	if o == nil || IsNil(o.NeverStarts) {
		return nil, false
	}
	return o.NeverStarts, true
}

// HasNeverStarts returns a boolean if a field has been set.
func (o *Lease) HasNeverStarts() bool {
	if o != nil && !IsNil(o.NeverStarts) {
		return true
	}

	return false
}

// SetNeverStarts gets a reference to the given bool and assigns it to the NeverStarts field.
func (o *Lease) SetNeverStarts(v bool) {
	o.NeverStarts = &v
}

// GetNextBindingState returns the NextBindingState field value if set, zero value otherwise.
func (o *Lease) GetNextBindingState() string {
	if o == nil || IsNil(o.NextBindingState) {
		var ret string
		return ret
	}
	return *o.NextBindingState
}

// GetNextBindingStateOk returns a tuple with the NextBindingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetNextBindingStateOk() (*string, bool) {
	if o == nil || IsNil(o.NextBindingState) {
		return nil, false
	}
	return o.NextBindingState, true
}

// HasNextBindingState returns a boolean if a field has been set.
func (o *Lease) HasNextBindingState() bool {
	if o != nil && !IsNil(o.NextBindingState) {
		return true
	}

	return false
}

// SetNextBindingState gets a reference to the given string and assigns it to the NextBindingState field.
func (o *Lease) SetNextBindingState(v string) {
	o.NextBindingState = &v
}

// GetOnCommit returns the OnCommit field value if set, zero value otherwise.
func (o *Lease) GetOnCommit() string {
	if o == nil || IsNil(o.OnCommit) {
		var ret string
		return ret
	}
	return *o.OnCommit
}

// GetOnCommitOk returns a tuple with the OnCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetOnCommitOk() (*string, bool) {
	if o == nil || IsNil(o.OnCommit) {
		return nil, false
	}
	return o.OnCommit, true
}

// HasOnCommit returns a boolean if a field has been set.
func (o *Lease) HasOnCommit() bool {
	if o != nil && !IsNil(o.OnCommit) {
		return true
	}

	return false
}

// SetOnCommit gets a reference to the given string and assigns it to the OnCommit field.
func (o *Lease) SetOnCommit(v string) {
	o.OnCommit = &v
}

// GetOnExpiry returns the OnExpiry field value if set, zero value otherwise.
func (o *Lease) GetOnExpiry() string {
	if o == nil || IsNil(o.OnExpiry) {
		var ret string
		return ret
	}
	return *o.OnExpiry
}

// GetOnExpiryOk returns a tuple with the OnExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetOnExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.OnExpiry) {
		return nil, false
	}
	return o.OnExpiry, true
}

// HasOnExpiry returns a boolean if a field has been set.
func (o *Lease) HasOnExpiry() bool {
	if o != nil && !IsNil(o.OnExpiry) {
		return true
	}

	return false
}

// SetOnExpiry gets a reference to the given string and assigns it to the OnExpiry field.
func (o *Lease) SetOnExpiry(v string) {
	o.OnExpiry = &v
}

// GetOnRelease returns the OnRelease field value if set, zero value otherwise.
func (o *Lease) GetOnRelease() string {
	if o == nil || IsNil(o.OnRelease) {
		var ret string
		return ret
	}
	return *o.OnRelease
}

// GetOnReleaseOk returns a tuple with the OnRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetOnReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.OnRelease) {
		return nil, false
	}
	return o.OnRelease, true
}

// HasOnRelease returns a boolean if a field has been set.
func (o *Lease) HasOnRelease() bool {
	if o != nil && !IsNil(o.OnRelease) {
		return true
	}

	return false
}

// SetOnRelease gets a reference to the given string and assigns it to the OnRelease field.
func (o *Lease) SetOnRelease(v string) {
	o.OnRelease = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *Lease) GetOption() string {
	if o == nil || IsNil(o.Option) {
		var ret string
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetOptionOk() (*string, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *Lease) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given string and assigns it to the Option field.
func (o *Lease) SetOption(v string) {
	o.Option = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Lease) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Lease) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Lease) SetProtocol(v string) {
	o.Protocol = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *Lease) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *Lease) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *Lease) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetServedBy returns the ServedBy field value if set, zero value otherwise.
func (o *Lease) GetServedBy() string {
	if o == nil || IsNil(o.ServedBy) {
		var ret string
		return ret
	}
	return *o.ServedBy
}

// GetServedByOk returns a tuple with the ServedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetServedByOk() (*string, bool) {
	if o == nil || IsNil(o.ServedBy) {
		return nil, false
	}
	return o.ServedBy, true
}

// HasServedBy returns a boolean if a field has been set.
func (o *Lease) HasServedBy() bool {
	if o != nil && !IsNil(o.ServedBy) {
		return true
	}

	return false
}

// SetServedBy gets a reference to the given string and assigns it to the ServedBy field.
func (o *Lease) SetServedBy(v string) {
	o.ServedBy = &v
}

// GetServerHostName returns the ServerHostName field value if set, zero value otherwise.
func (o *Lease) GetServerHostName() string {
	if o == nil || IsNil(o.ServerHostName) {
		var ret string
		return ret
	}
	return *o.ServerHostName
}

// GetServerHostNameOk returns a tuple with the ServerHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetServerHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostName) {
		return nil, false
	}
	return o.ServerHostName, true
}

// HasServerHostName returns a boolean if a field has been set.
func (o *Lease) HasServerHostName() bool {
	if o != nil && !IsNil(o.ServerHostName) {
		return true
	}

	return false
}

// SetServerHostName gets a reference to the given string and assigns it to the ServerHostName field.
func (o *Lease) SetServerHostName(v string) {
	o.ServerHostName = &v
}

// GetStarts returns the Starts field value if set, zero value otherwise.
func (o *Lease) GetStarts() int64 {
	if o == nil || IsNil(o.Starts) {
		var ret int64
		return ret
	}
	return *o.Starts
}

// GetStartsOk returns a tuple with the Starts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetStartsOk() (*int64, bool) {
	if o == nil || IsNil(o.Starts) {
		return nil, false
	}
	return o.Starts, true
}

// HasStarts returns a boolean if a field has been set.
func (o *Lease) HasStarts() bool {
	if o != nil && !IsNil(o.Starts) {
		return true
	}

	return false
}

// SetStarts gets a reference to the given int64 and assigns it to the Starts field.
func (o *Lease) SetStarts(v int64) {
	o.Starts = &v
}

// GetTsfp returns the Tsfp field value if set, zero value otherwise.
func (o *Lease) GetTsfp() int64 {
	if o == nil || IsNil(o.Tsfp) {
		var ret int64
		return ret
	}
	return *o.Tsfp
}

// GetTsfpOk returns a tuple with the Tsfp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetTsfpOk() (*int64, bool) {
	if o == nil || IsNil(o.Tsfp) {
		return nil, false
	}
	return o.Tsfp, true
}

// HasTsfp returns a boolean if a field has been set.
func (o *Lease) HasTsfp() bool {
	if o != nil && !IsNil(o.Tsfp) {
		return true
	}

	return false
}

// SetTsfp gets a reference to the given int64 and assigns it to the Tsfp field.
func (o *Lease) SetTsfp(v int64) {
	o.Tsfp = &v
}

// GetTstp returns the Tstp field value if set, zero value otherwise.
func (o *Lease) GetTstp() int64 {
	if o == nil || IsNil(o.Tstp) {
		var ret int64
		return ret
	}
	return *o.Tstp
}

// GetTstpOk returns a tuple with the Tstp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetTstpOk() (*int64, bool) {
	if o == nil || IsNil(o.Tstp) {
		return nil, false
	}
	return o.Tstp, true
}

// HasTstp returns a boolean if a field has been set.
func (o *Lease) HasTstp() bool {
	if o != nil && !IsNil(o.Tstp) {
		return true
	}

	return false
}

// SetTstp gets a reference to the given int64 and assigns it to the Tstp field.
func (o *Lease) SetTstp(v int64) {
	o.Tstp = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Lease) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Lease) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Lease) SetUid(v string) {
	o.Uid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Lease) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Lease) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Lease) SetUsername(v string) {
	o.Username = &v
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *Lease) GetVariable() string {
	if o == nil || IsNil(o.Variable) {
		var ret string
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lease) GetVariableOk() (*string, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *Lease) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given string and assigns it to the Variable field.
func (o *Lease) SetVariable(v string) {
	o.Variable = &v
}

func (o Lease) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.BillingClass) {
		toSerialize["billing_class"] = o.BillingClass
	}
	if !IsNil(o.BindingState) {
		toSerialize["binding_state"] = o.BindingState
	}
	if !IsNil(o.ClientHostname) {
		toSerialize["client_hostname"] = o.ClientHostname
	}
	if !IsNil(o.Cltt) {
		toSerialize["cltt"] = o.Cltt
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.Ends) {
		toSerialize["ends"] = o.Ends
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Hardware) {
		toSerialize["hardware"] = o.Hardware
	}
	if !IsNil(o.Ipv6Duid) {
		toSerialize["ipv6_duid"] = o.Ipv6Duid
	}
	if !IsNil(o.Ipv6Iaid) {
		toSerialize["ipv6_iaid"] = o.Ipv6Iaid
	}
	if !IsNil(o.Ipv6PreferredLifetime) {
		toSerialize["ipv6_preferred_lifetime"] = o.Ipv6PreferredLifetime
	}
	if !IsNil(o.Ipv6PrefixBits) {
		toSerialize["ipv6_prefix_bits"] = o.Ipv6PrefixBits
	}
	if !IsNil(o.IsInvalidMac) {
		toSerialize["is_invalid_mac"] = o.IsInvalidMac
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NeverEnds) {
		toSerialize["never_ends"] = o.NeverEnds
	}
	if !IsNil(o.NeverStarts) {
		toSerialize["never_starts"] = o.NeverStarts
	}
	if !IsNil(o.NextBindingState) {
		toSerialize["next_binding_state"] = o.NextBindingState
	}
	if !IsNil(o.OnCommit) {
		toSerialize["on_commit"] = o.OnCommit
	}
	if !IsNil(o.OnExpiry) {
		toSerialize["on_expiry"] = o.OnExpiry
	}
	if !IsNil(o.OnRelease) {
		toSerialize["on_release"] = o.OnRelease
	}
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remote_id"] = o.RemoteId
	}
	if !IsNil(o.ServedBy) {
		toSerialize["served_by"] = o.ServedBy
	}
	if !IsNil(o.ServerHostName) {
		toSerialize["server_host_name"] = o.ServerHostName
	}
	if !IsNil(o.Starts) {
		toSerialize["starts"] = o.Starts
	}
	if !IsNil(o.Tsfp) {
		toSerialize["tsfp"] = o.Tsfp
	}
	if !IsNil(o.Tstp) {
		toSerialize["tstp"] = o.Tstp
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	return toSerialize, nil
}

type NullableLease struct {
	value *Lease
	isSet bool
}

func (v NullableLease) Get() *Lease {
	return v.value
}

func (v *NullableLease) Set(val *Lease) {
	v.value = val
	v.isSet = true
}

func (v NullableLease) IsSet() bool {
	return v.isSet
}

func (v *NullableLease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLease(val *Lease) *NullableLease {
	return &NullableLease{value: val, isSet: true}
}

func (v NullableLease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
