/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListDhcpStatisticsResponse - struct for ListDhcpStatisticsResponse
type ListDhcpStatisticsResponse struct {
	ListDhcpStatisticsResponseObject *ListDhcpStatisticsResponseObject
	ArrayOfDhcpStatistics            *[]DhcpStatistics
}

// ListDhcpStatisticsResponseObjectAsListDhcpStatisticsResponse is a convenience function that returns ListDhcpStatisticsResponseObject wrapped in ListDhcpStatisticsResponse
func ListDhcpStatisticsResponseObjectAsListDhcpStatisticsResponse(v *ListDhcpStatisticsResponseObject) ListDhcpStatisticsResponse {
	return ListDhcpStatisticsResponse{
		ListDhcpStatisticsResponseObject: v,
	}
}

// []DhcpStatisticsAsListDhcpStatisticsResponse is a convenience function that returns []DhcpStatistics wrapped in ListDhcpStatisticsResponse
func ArrayOfDhcpStatisticsAsListDhcpStatisticsResponse(v *[]DhcpStatistics) ListDhcpStatisticsResponse {
	return ListDhcpStatisticsResponse{
		ArrayOfDhcpStatistics: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDhcpStatisticsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDhcpStatisticsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDhcpStatisticsResponseObject)
	if err == nil {
		jsonListDhcpStatisticsResponseObject, _ := json.Marshal(dst.ListDhcpStatisticsResponseObject)
		if string(jsonListDhcpStatisticsResponseObject) == "{}" { // empty struct
			dst.ListDhcpStatisticsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDhcpStatisticsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDhcpStatistics
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDhcpStatistics)
	if err == nil {
		jsonArrayOfDhcpStatistics, _ := json.Marshal(dst.ArrayOfDhcpStatistics)
		if string(jsonArrayOfDhcpStatistics) == "{}" { // empty struct
			dst.ArrayOfDhcpStatistics = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDhcpStatistics = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDhcpStatisticsResponseObject = nil
		dst.ArrayOfDhcpStatistics = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDhcpStatisticsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDhcpStatisticsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDhcpStatisticsResponse) MarshalJSON() ([]byte, error) {
	if src.ListDhcpStatisticsResponseObject != nil {
		return json.Marshal(&src.ListDhcpStatisticsResponseObject)
	}

	if src.ArrayOfDhcpStatistics != nil {
		return json.Marshal(&src.ArrayOfDhcpStatistics)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDhcpStatisticsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDhcpStatisticsResponseObject != nil {
		return obj.ListDhcpStatisticsResponseObject
	}

	if obj.ArrayOfDhcpStatistics != nil {
		return obj.ArrayOfDhcpStatistics
	}

	// all schemas are nil
	return nil
}

type NullableListDhcpStatisticsResponse struct {
	value *ListDhcpStatisticsResponse
	isSet bool
}

func (v NullableListDhcpStatisticsResponse) Get() *ListDhcpStatisticsResponse {
	return v.value
}

func (v *NullableListDhcpStatisticsResponse) Set(val *ListDhcpStatisticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDhcpStatisticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDhcpStatisticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDhcpStatisticsResponse(val *ListDhcpStatisticsResponse) *NullableListDhcpStatisticsResponse {
	return &NullableListDhcpStatisticsResponse{value: val, isSet: true}
}

func (v NullableListDhcpStatisticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDhcpStatisticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
