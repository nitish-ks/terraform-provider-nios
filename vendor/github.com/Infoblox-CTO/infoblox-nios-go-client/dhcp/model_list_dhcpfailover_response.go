/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListDhcpfailoverResponse - struct for ListDhcpfailoverResponse
type ListDhcpfailoverResponse struct {
	ListDhcpfailoverResponseObject *ListDhcpfailoverResponseObject
	ArrayOfDhcpfailover            *[]Dhcpfailover
}

// ListDhcpfailoverResponseObjectAsListDhcpfailoverResponse is a convenience function that returns ListDhcpfailoverResponseObject wrapped in ListDhcpfailoverResponse
func ListDhcpfailoverResponseObjectAsListDhcpfailoverResponse(v *ListDhcpfailoverResponseObject) ListDhcpfailoverResponse {
	return ListDhcpfailoverResponse{
		ListDhcpfailoverResponseObject: v,
	}
}

// []DhcpfailoverAsListDhcpfailoverResponse is a convenience function that returns []Dhcpfailover wrapped in ListDhcpfailoverResponse
func ArrayOfDhcpfailoverAsListDhcpfailoverResponse(v *[]Dhcpfailover) ListDhcpfailoverResponse {
	return ListDhcpfailoverResponse{
		ArrayOfDhcpfailover: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDhcpfailoverResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDhcpfailoverResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDhcpfailoverResponseObject)
	if err == nil {
		jsonListDhcpfailoverResponseObject, _ := json.Marshal(dst.ListDhcpfailoverResponseObject)
		if string(jsonListDhcpfailoverResponseObject) == "{}" { // empty struct
			dst.ListDhcpfailoverResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDhcpfailoverResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDhcpfailover
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDhcpfailover)
	if err == nil {
		jsonArrayOfDhcpfailover, _ := json.Marshal(dst.ArrayOfDhcpfailover)
		if string(jsonArrayOfDhcpfailover) == "{}" { // empty struct
			dst.ArrayOfDhcpfailover = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDhcpfailover = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDhcpfailoverResponseObject = nil
		dst.ArrayOfDhcpfailover = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDhcpfailoverResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDhcpfailoverResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDhcpfailoverResponse) MarshalJSON() ([]byte, error) {
	if src.ListDhcpfailoverResponseObject != nil {
		return json.Marshal(&src.ListDhcpfailoverResponseObject)
	}

	if src.ArrayOfDhcpfailover != nil {
		return json.Marshal(&src.ArrayOfDhcpfailover)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDhcpfailoverResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDhcpfailoverResponseObject != nil {
		return obj.ListDhcpfailoverResponseObject
	}

	if obj.ArrayOfDhcpfailover != nil {
		return obj.ArrayOfDhcpfailover
	}

	// all schemas are nil
	return nil
}

type NullableListDhcpfailoverResponse struct {
	value *ListDhcpfailoverResponse
	isSet bool
}

func (v NullableListDhcpfailoverResponse) Get() *ListDhcpfailoverResponse {
	return v.value
}

func (v *NullableListDhcpfailoverResponse) Set(val *ListDhcpfailoverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDhcpfailoverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDhcpfailoverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDhcpfailoverResponse(val *ListDhcpfailoverResponse) *NullableListDhcpfailoverResponse {
	return &NullableListDhcpfailoverResponse{value: val, isSet: true}
}

func (v NullableListDhcpfailoverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDhcpfailoverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
