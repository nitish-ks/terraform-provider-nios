/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListDhcpoptiondefinitionResponse - struct for ListDhcpoptiondefinitionResponse
type ListDhcpoptiondefinitionResponse struct {
	ListDhcpoptiondefinitionResponseObject *ListDhcpoptiondefinitionResponseObject
	ArrayOfDhcpoptiondefinition            *[]Dhcpoptiondefinition
}

// ListDhcpoptiondefinitionResponseObjectAsListDhcpoptiondefinitionResponse is a convenience function that returns ListDhcpoptiondefinitionResponseObject wrapped in ListDhcpoptiondefinitionResponse
func ListDhcpoptiondefinitionResponseObjectAsListDhcpoptiondefinitionResponse(v *ListDhcpoptiondefinitionResponseObject) ListDhcpoptiondefinitionResponse {
	return ListDhcpoptiondefinitionResponse{
		ListDhcpoptiondefinitionResponseObject: v,
	}
}

// []DhcpoptiondefinitionAsListDhcpoptiondefinitionResponse is a convenience function that returns []Dhcpoptiondefinition wrapped in ListDhcpoptiondefinitionResponse
func ArrayOfDhcpoptiondefinitionAsListDhcpoptiondefinitionResponse(v *[]Dhcpoptiondefinition) ListDhcpoptiondefinitionResponse {
	return ListDhcpoptiondefinitionResponse{
		ArrayOfDhcpoptiondefinition: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDhcpoptiondefinitionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDhcpoptiondefinitionResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDhcpoptiondefinitionResponseObject)
	if err == nil {
		jsonListDhcpoptiondefinitionResponseObject, _ := json.Marshal(dst.ListDhcpoptiondefinitionResponseObject)
		if string(jsonListDhcpoptiondefinitionResponseObject) == "{}" { // empty struct
			dst.ListDhcpoptiondefinitionResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDhcpoptiondefinitionResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDhcpoptiondefinition
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDhcpoptiondefinition)
	if err == nil {
		jsonArrayOfDhcpoptiondefinition, _ := json.Marshal(dst.ArrayOfDhcpoptiondefinition)
		if string(jsonArrayOfDhcpoptiondefinition) == "{}" { // empty struct
			dst.ArrayOfDhcpoptiondefinition = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDhcpoptiondefinition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDhcpoptiondefinitionResponseObject = nil
		dst.ArrayOfDhcpoptiondefinition = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDhcpoptiondefinitionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDhcpoptiondefinitionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDhcpoptiondefinitionResponse) MarshalJSON() ([]byte, error) {
	if src.ListDhcpoptiondefinitionResponseObject != nil {
		return json.Marshal(&src.ListDhcpoptiondefinitionResponseObject)
	}

	if src.ArrayOfDhcpoptiondefinition != nil {
		return json.Marshal(&src.ArrayOfDhcpoptiondefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDhcpoptiondefinitionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDhcpoptiondefinitionResponseObject != nil {
		return obj.ListDhcpoptiondefinitionResponseObject
	}

	if obj.ArrayOfDhcpoptiondefinition != nil {
		return obj.ArrayOfDhcpoptiondefinition
	}

	// all schemas are nil
	return nil
}

type NullableListDhcpoptiondefinitionResponse struct {
	value *ListDhcpoptiondefinitionResponse
	isSet bool
}

func (v NullableListDhcpoptiondefinitionResponse) Get() *ListDhcpoptiondefinitionResponse {
	return v.value
}

func (v *NullableListDhcpoptiondefinitionResponse) Set(val *ListDhcpoptiondefinitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDhcpoptiondefinitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDhcpoptiondefinitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDhcpoptiondefinitionResponse(val *ListDhcpoptiondefinitionResponse) *NullableListDhcpoptiondefinitionResponse {
	return &NullableListDhcpoptiondefinitionResponse{value: val, isSet: true}
}

func (v NullableListDhcpoptiondefinitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDhcpoptiondefinitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
