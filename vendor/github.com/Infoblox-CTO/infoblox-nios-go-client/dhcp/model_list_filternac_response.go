/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListFilternacResponse - struct for ListFilternacResponse
type ListFilternacResponse struct {
	ListFilternacResponseObject *ListFilternacResponseObject
	ArrayOfFilternac            *[]Filternac
}

// ListFilternacResponseObjectAsListFilternacResponse is a convenience function that returns ListFilternacResponseObject wrapped in ListFilternacResponse
func ListFilternacResponseObjectAsListFilternacResponse(v *ListFilternacResponseObject) ListFilternacResponse {
	return ListFilternacResponse{
		ListFilternacResponseObject: v,
	}
}

// []FilternacAsListFilternacResponse is a convenience function that returns []Filternac wrapped in ListFilternacResponse
func ArrayOfFilternacAsListFilternacResponse(v *[]Filternac) ListFilternacResponse {
	return ListFilternacResponse{
		ArrayOfFilternac: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFilternacResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFilternacResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFilternacResponseObject)
	if err == nil {
		jsonListFilternacResponseObject, _ := json.Marshal(dst.ListFilternacResponseObject)
		if string(jsonListFilternacResponseObject) == "{}" { // empty struct
			dst.ListFilternacResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFilternacResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFilternac
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFilternac)
	if err == nil {
		jsonArrayOfFilternac, _ := json.Marshal(dst.ArrayOfFilternac)
		if string(jsonArrayOfFilternac) == "{}" { // empty struct
			dst.ArrayOfFilternac = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFilternac = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFilternacResponseObject = nil
		dst.ArrayOfFilternac = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFilternacResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFilternacResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFilternacResponse) MarshalJSON() ([]byte, error) {
	if src.ListFilternacResponseObject != nil {
		return json.Marshal(&src.ListFilternacResponseObject)
	}

	if src.ArrayOfFilternac != nil {
		return json.Marshal(&src.ArrayOfFilternac)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFilternacResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFilternacResponseObject != nil {
		return obj.ListFilternacResponseObject
	}

	if obj.ArrayOfFilternac != nil {
		return obj.ArrayOfFilternac
	}

	// all schemas are nil
	return nil
}

type NullableListFilternacResponse struct {
	value *ListFilternacResponse
	isSet bool
}

func (v NullableListFilternacResponse) Get() *ListFilternacResponse {
	return v.value
}

func (v *NullableListFilternacResponse) Set(val *ListFilternacResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFilternacResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFilternacResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFilternacResponse(val *ListFilternacResponse) *NullableListFilternacResponse {
	return &NullableListFilternacResponse{value: val, isSet: true}
}

func (v NullableListFilternacResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFilternacResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
