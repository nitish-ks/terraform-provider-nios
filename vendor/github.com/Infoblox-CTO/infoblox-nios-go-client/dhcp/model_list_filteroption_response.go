/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListFilteroptionResponse - struct for ListFilteroptionResponse
type ListFilteroptionResponse struct {
	ListFilteroptionResponseObject *ListFilteroptionResponseObject
	ArrayOfFilteroption            *[]Filteroption
}

// ListFilteroptionResponseObjectAsListFilteroptionResponse is a convenience function that returns ListFilteroptionResponseObject wrapped in ListFilteroptionResponse
func ListFilteroptionResponseObjectAsListFilteroptionResponse(v *ListFilteroptionResponseObject) ListFilteroptionResponse {
	return ListFilteroptionResponse{
		ListFilteroptionResponseObject: v,
	}
}

// []FilteroptionAsListFilteroptionResponse is a convenience function that returns []Filteroption wrapped in ListFilteroptionResponse
func ArrayOfFilteroptionAsListFilteroptionResponse(v *[]Filteroption) ListFilteroptionResponse {
	return ListFilteroptionResponse{
		ArrayOfFilteroption: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFilteroptionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFilteroptionResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFilteroptionResponseObject)
	if err == nil {
		jsonListFilteroptionResponseObject, _ := json.Marshal(dst.ListFilteroptionResponseObject)
		if string(jsonListFilteroptionResponseObject) == "{}" { // empty struct
			dst.ListFilteroptionResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFilteroptionResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFilteroption
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFilteroption)
	if err == nil {
		jsonArrayOfFilteroption, _ := json.Marshal(dst.ArrayOfFilteroption)
		if string(jsonArrayOfFilteroption) == "{}" { // empty struct
			dst.ArrayOfFilteroption = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFilteroption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFilteroptionResponseObject = nil
		dst.ArrayOfFilteroption = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFilteroptionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFilteroptionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFilteroptionResponse) MarshalJSON() ([]byte, error) {
	if src.ListFilteroptionResponseObject != nil {
		return json.Marshal(&src.ListFilteroptionResponseObject)
	}

	if src.ArrayOfFilteroption != nil {
		return json.Marshal(&src.ArrayOfFilteroption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFilteroptionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFilteroptionResponseObject != nil {
		return obj.ListFilteroptionResponseObject
	}

	if obj.ArrayOfFilteroption != nil {
		return obj.ArrayOfFilteroption
	}

	// all schemas are nil
	return nil
}

type NullableListFilteroptionResponse struct {
	value *ListFilteroptionResponse
	isSet bool
}

func (v NullableListFilteroptionResponse) Get() *ListFilteroptionResponse {
	return v.value
}

func (v *NullableListFilteroptionResponse) Set(val *ListFilteroptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFilteroptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFilteroptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFilteroptionResponse(val *ListFilteroptionResponse) *NullableListFilteroptionResponse {
	return &NullableListFilteroptionResponse{value: val, isSet: true}
}

func (v NullableListFilteroptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFilteroptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
