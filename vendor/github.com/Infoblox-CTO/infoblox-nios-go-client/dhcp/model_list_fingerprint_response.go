/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListFingerprintResponse - struct for ListFingerprintResponse
type ListFingerprintResponse struct {
	ListFingerprintResponseObject *ListFingerprintResponseObject
	ArrayOfFingerprint            *[]Fingerprint
}

// ListFingerprintResponseObjectAsListFingerprintResponse is a convenience function that returns ListFingerprintResponseObject wrapped in ListFingerprintResponse
func ListFingerprintResponseObjectAsListFingerprintResponse(v *ListFingerprintResponseObject) ListFingerprintResponse {
	return ListFingerprintResponse{
		ListFingerprintResponseObject: v,
	}
}

// []FingerprintAsListFingerprintResponse is a convenience function that returns []Fingerprint wrapped in ListFingerprintResponse
func ArrayOfFingerprintAsListFingerprintResponse(v *[]Fingerprint) ListFingerprintResponse {
	return ListFingerprintResponse{
		ArrayOfFingerprint: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFingerprintResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFingerprintResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFingerprintResponseObject)
	if err == nil {
		jsonListFingerprintResponseObject, _ := json.Marshal(dst.ListFingerprintResponseObject)
		if string(jsonListFingerprintResponseObject) == "{}" { // empty struct
			dst.ListFingerprintResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFingerprintResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFingerprint
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFingerprint)
	if err == nil {
		jsonArrayOfFingerprint, _ := json.Marshal(dst.ArrayOfFingerprint)
		if string(jsonArrayOfFingerprint) == "{}" { // empty struct
			dst.ArrayOfFingerprint = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFingerprint = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFingerprintResponseObject = nil
		dst.ArrayOfFingerprint = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFingerprintResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFingerprintResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFingerprintResponse) MarshalJSON() ([]byte, error) {
	if src.ListFingerprintResponseObject != nil {
		return json.Marshal(&src.ListFingerprintResponseObject)
	}

	if src.ArrayOfFingerprint != nil {
		return json.Marshal(&src.ArrayOfFingerprint)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFingerprintResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFingerprintResponseObject != nil {
		return obj.ListFingerprintResponseObject
	}

	if obj.ArrayOfFingerprint != nil {
		return obj.ArrayOfFingerprint
	}

	// all schemas are nil
	return nil
}

type NullableListFingerprintResponse struct {
	value *ListFingerprintResponse
	isSet bool
}

func (v NullableListFingerprintResponse) Get() *ListFingerprintResponse {
	return v.value
}

func (v *NullableListFingerprintResponse) Set(val *ListFingerprintResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFingerprintResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFingerprintResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFingerprintResponse(val *ListFingerprintResponse) *NullableListFingerprintResponse {
	return &NullableListFingerprintResponse{value: val, isSet: true}
}

func (v NullableListFingerprintResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFingerprintResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
