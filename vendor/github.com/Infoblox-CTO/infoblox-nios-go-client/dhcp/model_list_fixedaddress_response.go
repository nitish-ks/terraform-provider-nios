/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListFixedaddressResponse - struct for ListFixedaddressResponse
type ListFixedaddressResponse struct {
	ListFixedaddressResponseObject *ListFixedaddressResponseObject
	ArrayOfFixedaddress            *[]Fixedaddress
}

// ListFixedaddressResponseObjectAsListFixedaddressResponse is a convenience function that returns ListFixedaddressResponseObject wrapped in ListFixedaddressResponse
func ListFixedaddressResponseObjectAsListFixedaddressResponse(v *ListFixedaddressResponseObject) ListFixedaddressResponse {
	return ListFixedaddressResponse{
		ListFixedaddressResponseObject: v,
	}
}

// []FixedaddressAsListFixedaddressResponse is a convenience function that returns []Fixedaddress wrapped in ListFixedaddressResponse
func ArrayOfFixedaddressAsListFixedaddressResponse(v *[]Fixedaddress) ListFixedaddressResponse {
	return ListFixedaddressResponse{
		ArrayOfFixedaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFixedaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFixedaddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFixedaddressResponseObject)
	if err == nil {
		jsonListFixedaddressResponseObject, _ := json.Marshal(dst.ListFixedaddressResponseObject)
		if string(jsonListFixedaddressResponseObject) == "{}" { // empty struct
			dst.ListFixedaddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFixedaddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFixedaddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFixedaddress)
	if err == nil {
		jsonArrayOfFixedaddress, _ := json.Marshal(dst.ArrayOfFixedaddress)
		if string(jsonArrayOfFixedaddress) == "{}" { // empty struct
			dst.ArrayOfFixedaddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFixedaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFixedaddressResponseObject = nil
		dst.ArrayOfFixedaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFixedaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFixedaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFixedaddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListFixedaddressResponseObject != nil {
		return json.Marshal(&src.ListFixedaddressResponseObject)
	}

	if src.ArrayOfFixedaddress != nil {
		return json.Marshal(&src.ArrayOfFixedaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFixedaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFixedaddressResponseObject != nil {
		return obj.ListFixedaddressResponseObject
	}

	if obj.ArrayOfFixedaddress != nil {
		return obj.ArrayOfFixedaddress
	}

	// all schemas are nil
	return nil
}

type NullableListFixedaddressResponse struct {
	value *ListFixedaddressResponse
	isSet bool
}

func (v NullableListFixedaddressResponse) Get() *ListFixedaddressResponse {
	return v.value
}

func (v *NullableListFixedaddressResponse) Set(val *ListFixedaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFixedaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFixedaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFixedaddressResponse(val *ListFixedaddressResponse) *NullableListFixedaddressResponse {
	return &NullableListFixedaddressResponse{value: val, isSet: true}
}

func (v NullableListFixedaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFixedaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
