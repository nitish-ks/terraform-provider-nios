/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListFixedaddresstemplateResponse - struct for ListFixedaddresstemplateResponse
type ListFixedaddresstemplateResponse struct {
	ListFixedaddresstemplateResponseObject *ListFixedaddresstemplateResponseObject
	ArrayOfFixedaddresstemplate            *[]Fixedaddresstemplate
}

// ListFixedaddresstemplateResponseObjectAsListFixedaddresstemplateResponse is a convenience function that returns ListFixedaddresstemplateResponseObject wrapped in ListFixedaddresstemplateResponse
func ListFixedaddresstemplateResponseObjectAsListFixedaddresstemplateResponse(v *ListFixedaddresstemplateResponseObject) ListFixedaddresstemplateResponse {
	return ListFixedaddresstemplateResponse{
		ListFixedaddresstemplateResponseObject: v,
	}
}

// []FixedaddresstemplateAsListFixedaddresstemplateResponse is a convenience function that returns []Fixedaddresstemplate wrapped in ListFixedaddresstemplateResponse
func ArrayOfFixedaddresstemplateAsListFixedaddresstemplateResponse(v *[]Fixedaddresstemplate) ListFixedaddresstemplateResponse {
	return ListFixedaddresstemplateResponse{
		ArrayOfFixedaddresstemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFixedaddresstemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFixedaddresstemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFixedaddresstemplateResponseObject)
	if err == nil {
		jsonListFixedaddresstemplateResponseObject, _ := json.Marshal(dst.ListFixedaddresstemplateResponseObject)
		if string(jsonListFixedaddresstemplateResponseObject) == "{}" { // empty struct
			dst.ListFixedaddresstemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFixedaddresstemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFixedaddresstemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFixedaddresstemplate)
	if err == nil {
		jsonArrayOfFixedaddresstemplate, _ := json.Marshal(dst.ArrayOfFixedaddresstemplate)
		if string(jsonArrayOfFixedaddresstemplate) == "{}" { // empty struct
			dst.ArrayOfFixedaddresstemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFixedaddresstemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFixedaddresstemplateResponseObject = nil
		dst.ArrayOfFixedaddresstemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFixedaddresstemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFixedaddresstemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFixedaddresstemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListFixedaddresstemplateResponseObject != nil {
		return json.Marshal(&src.ListFixedaddresstemplateResponseObject)
	}

	if src.ArrayOfFixedaddresstemplate != nil {
		return json.Marshal(&src.ArrayOfFixedaddresstemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFixedaddresstemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFixedaddresstemplateResponseObject != nil {
		return obj.ListFixedaddresstemplateResponseObject
	}

	if obj.ArrayOfFixedaddresstemplate != nil {
		return obj.ArrayOfFixedaddresstemplate
	}

	// all schemas are nil
	return nil
}

type NullableListFixedaddresstemplateResponse struct {
	value *ListFixedaddresstemplateResponse
	isSet bool
}

func (v NullableListFixedaddresstemplateResponse) Get() *ListFixedaddresstemplateResponse {
	return v.value
}

func (v *NullableListFixedaddresstemplateResponse) Set(val *ListFixedaddresstemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFixedaddresstemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFixedaddresstemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFixedaddresstemplateResponse(val *ListFixedaddresstemplateResponse) *NullableListFixedaddresstemplateResponse {
	return &NullableListFixedaddresstemplateResponse{value: val, isSet: true}
}

func (v NullableListFixedaddresstemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFixedaddresstemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
