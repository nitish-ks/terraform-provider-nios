/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListIpv6dhcpoptionspaceResponse - struct for ListIpv6dhcpoptionspaceResponse
type ListIpv6dhcpoptionspaceResponse struct {
	ListIpv6dhcpoptionspaceResponseObject *ListIpv6dhcpoptionspaceResponseObject
	ArrayOfIpv6dhcpoptionspace            *[]Ipv6dhcpoptionspace
}

// ListIpv6dhcpoptionspaceResponseObjectAsListIpv6dhcpoptionspaceResponse is a convenience function that returns ListIpv6dhcpoptionspaceResponseObject wrapped in ListIpv6dhcpoptionspaceResponse
func ListIpv6dhcpoptionspaceResponseObjectAsListIpv6dhcpoptionspaceResponse(v *ListIpv6dhcpoptionspaceResponseObject) ListIpv6dhcpoptionspaceResponse {
	return ListIpv6dhcpoptionspaceResponse{
		ListIpv6dhcpoptionspaceResponseObject: v,
	}
}

// []Ipv6dhcpoptionspaceAsListIpv6dhcpoptionspaceResponse is a convenience function that returns []Ipv6dhcpoptionspace wrapped in ListIpv6dhcpoptionspaceResponse
func ArrayOfIpv6dhcpoptionspaceAsListIpv6dhcpoptionspaceResponse(v *[]Ipv6dhcpoptionspace) ListIpv6dhcpoptionspaceResponse {
	return ListIpv6dhcpoptionspaceResponse{
		ArrayOfIpv6dhcpoptionspace: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6dhcpoptionspaceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6dhcpoptionspaceResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6dhcpoptionspaceResponseObject)
	if err == nil {
		jsonListIpv6dhcpoptionspaceResponseObject, _ := json.Marshal(dst.ListIpv6dhcpoptionspaceResponseObject)
		if string(jsonListIpv6dhcpoptionspaceResponseObject) == "{}" { // empty struct
			dst.ListIpv6dhcpoptionspaceResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6dhcpoptionspaceResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6dhcpoptionspace
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6dhcpoptionspace)
	if err == nil {
		jsonArrayOfIpv6dhcpoptionspace, _ := json.Marshal(dst.ArrayOfIpv6dhcpoptionspace)
		if string(jsonArrayOfIpv6dhcpoptionspace) == "{}" { // empty struct
			dst.ArrayOfIpv6dhcpoptionspace = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6dhcpoptionspace = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6dhcpoptionspaceResponseObject = nil
		dst.ArrayOfIpv6dhcpoptionspace = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6dhcpoptionspaceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6dhcpoptionspaceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6dhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6dhcpoptionspaceResponseObject != nil {
		return json.Marshal(&src.ListIpv6dhcpoptionspaceResponseObject)
	}

	if src.ArrayOfIpv6dhcpoptionspace != nil {
		return json.Marshal(&src.ArrayOfIpv6dhcpoptionspace)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6dhcpoptionspaceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6dhcpoptionspaceResponseObject != nil {
		return obj.ListIpv6dhcpoptionspaceResponseObject
	}

	if obj.ArrayOfIpv6dhcpoptionspace != nil {
		return obj.ArrayOfIpv6dhcpoptionspace
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6dhcpoptionspaceResponse struct {
	value *ListIpv6dhcpoptionspaceResponse
	isSet bool
}

func (v NullableListIpv6dhcpoptionspaceResponse) Get() *ListIpv6dhcpoptionspaceResponse {
	return v.value
}

func (v *NullableListIpv6dhcpoptionspaceResponse) Set(val *ListIpv6dhcpoptionspaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6dhcpoptionspaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6dhcpoptionspaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6dhcpoptionspaceResponse(val *ListIpv6dhcpoptionspaceResponse) *NullableListIpv6dhcpoptionspaceResponse {
	return &NullableListIpv6dhcpoptionspaceResponse{value: val, isSet: true}
}

func (v NullableListIpv6dhcpoptionspaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6dhcpoptionspaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
