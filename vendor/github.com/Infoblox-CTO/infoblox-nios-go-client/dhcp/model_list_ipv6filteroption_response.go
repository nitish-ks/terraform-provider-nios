/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListIpv6filteroptionResponse - struct for ListIpv6filteroptionResponse
type ListIpv6filteroptionResponse struct {
	ListIpv6filteroptionResponseObject *ListIpv6filteroptionResponseObject
	ArrayOfIpv6filteroption            *[]Ipv6filteroption
}

// ListIpv6filteroptionResponseObjectAsListIpv6filteroptionResponse is a convenience function that returns ListIpv6filteroptionResponseObject wrapped in ListIpv6filteroptionResponse
func ListIpv6filteroptionResponseObjectAsListIpv6filteroptionResponse(v *ListIpv6filteroptionResponseObject) ListIpv6filteroptionResponse {
	return ListIpv6filteroptionResponse{
		ListIpv6filteroptionResponseObject: v,
	}
}

// []Ipv6filteroptionAsListIpv6filteroptionResponse is a convenience function that returns []Ipv6filteroption wrapped in ListIpv6filteroptionResponse
func ArrayOfIpv6filteroptionAsListIpv6filteroptionResponse(v *[]Ipv6filteroption) ListIpv6filteroptionResponse {
	return ListIpv6filteroptionResponse{
		ArrayOfIpv6filteroption: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6filteroptionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6filteroptionResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6filteroptionResponseObject)
	if err == nil {
		jsonListIpv6filteroptionResponseObject, _ := json.Marshal(dst.ListIpv6filteroptionResponseObject)
		if string(jsonListIpv6filteroptionResponseObject) == "{}" { // empty struct
			dst.ListIpv6filteroptionResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6filteroptionResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6filteroption
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6filteroption)
	if err == nil {
		jsonArrayOfIpv6filteroption, _ := json.Marshal(dst.ArrayOfIpv6filteroption)
		if string(jsonArrayOfIpv6filteroption) == "{}" { // empty struct
			dst.ArrayOfIpv6filteroption = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6filteroption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6filteroptionResponseObject = nil
		dst.ArrayOfIpv6filteroption = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6filteroptionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6filteroptionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6filteroptionResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6filteroptionResponseObject != nil {
		return json.Marshal(&src.ListIpv6filteroptionResponseObject)
	}

	if src.ArrayOfIpv6filteroption != nil {
		return json.Marshal(&src.ArrayOfIpv6filteroption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6filteroptionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6filteroptionResponseObject != nil {
		return obj.ListIpv6filteroptionResponseObject
	}

	if obj.ArrayOfIpv6filteroption != nil {
		return obj.ArrayOfIpv6filteroption
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6filteroptionResponse struct {
	value *ListIpv6filteroptionResponse
	isSet bool
}

func (v NullableListIpv6filteroptionResponse) Get() *ListIpv6filteroptionResponse {
	return v.value
}

func (v *NullableListIpv6filteroptionResponse) Set(val *ListIpv6filteroptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6filteroptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6filteroptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6filteroptionResponse(val *ListIpv6filteroptionResponse) *NullableListIpv6filteroptionResponse {
	return &NullableListIpv6filteroptionResponse{value: val, isSet: true}
}

func (v NullableListIpv6filteroptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6filteroptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
