/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListIpv6fixedaddresstemplateResponse - struct for ListIpv6fixedaddresstemplateResponse
type ListIpv6fixedaddresstemplateResponse struct {
	ListIpv6fixedaddresstemplateResponseObject *ListIpv6fixedaddresstemplateResponseObject
	ArrayOfIpv6fixedaddresstemplate            *[]Ipv6fixedaddresstemplate
}

// ListIpv6fixedaddresstemplateResponseObjectAsListIpv6fixedaddresstemplateResponse is a convenience function that returns ListIpv6fixedaddresstemplateResponseObject wrapped in ListIpv6fixedaddresstemplateResponse
func ListIpv6fixedaddresstemplateResponseObjectAsListIpv6fixedaddresstemplateResponse(v *ListIpv6fixedaddresstemplateResponseObject) ListIpv6fixedaddresstemplateResponse {
	return ListIpv6fixedaddresstemplateResponse{
		ListIpv6fixedaddresstemplateResponseObject: v,
	}
}

// []Ipv6fixedaddresstemplateAsListIpv6fixedaddresstemplateResponse is a convenience function that returns []Ipv6fixedaddresstemplate wrapped in ListIpv6fixedaddresstemplateResponse
func ArrayOfIpv6fixedaddresstemplateAsListIpv6fixedaddresstemplateResponse(v *[]Ipv6fixedaddresstemplate) ListIpv6fixedaddresstemplateResponse {
	return ListIpv6fixedaddresstemplateResponse{
		ArrayOfIpv6fixedaddresstemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6fixedaddresstemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6fixedaddresstemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6fixedaddresstemplateResponseObject)
	if err == nil {
		jsonListIpv6fixedaddresstemplateResponseObject, _ := json.Marshal(dst.ListIpv6fixedaddresstemplateResponseObject)
		if string(jsonListIpv6fixedaddresstemplateResponseObject) == "{}" { // empty struct
			dst.ListIpv6fixedaddresstemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6fixedaddresstemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6fixedaddresstemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6fixedaddresstemplate)
	if err == nil {
		jsonArrayOfIpv6fixedaddresstemplate, _ := json.Marshal(dst.ArrayOfIpv6fixedaddresstemplate)
		if string(jsonArrayOfIpv6fixedaddresstemplate) == "{}" { // empty struct
			dst.ArrayOfIpv6fixedaddresstemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6fixedaddresstemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6fixedaddresstemplateResponseObject = nil
		dst.ArrayOfIpv6fixedaddresstemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6fixedaddresstemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6fixedaddresstemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6fixedaddresstemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6fixedaddresstemplateResponseObject != nil {
		return json.Marshal(&src.ListIpv6fixedaddresstemplateResponseObject)
	}

	if src.ArrayOfIpv6fixedaddresstemplate != nil {
		return json.Marshal(&src.ArrayOfIpv6fixedaddresstemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6fixedaddresstemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6fixedaddresstemplateResponseObject != nil {
		return obj.ListIpv6fixedaddresstemplateResponseObject
	}

	if obj.ArrayOfIpv6fixedaddresstemplate != nil {
		return obj.ArrayOfIpv6fixedaddresstemplate
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6fixedaddresstemplateResponse struct {
	value *ListIpv6fixedaddresstemplateResponse
	isSet bool
}

func (v NullableListIpv6fixedaddresstemplateResponse) Get() *ListIpv6fixedaddresstemplateResponse {
	return v.value
}

func (v *NullableListIpv6fixedaddresstemplateResponse) Set(val *ListIpv6fixedaddresstemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6fixedaddresstemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6fixedaddresstemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6fixedaddresstemplateResponse(val *ListIpv6fixedaddresstemplateResponse) *NullableListIpv6fixedaddresstemplateResponse {
	return &NullableListIpv6fixedaddresstemplateResponse{value: val, isSet: true}
}

func (v NullableListIpv6fixedaddresstemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6fixedaddresstemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
