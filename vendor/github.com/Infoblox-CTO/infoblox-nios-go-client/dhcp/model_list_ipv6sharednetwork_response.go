/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListIpv6sharednetworkResponse - struct for ListIpv6sharednetworkResponse
type ListIpv6sharednetworkResponse struct {
	ListIpv6sharednetworkResponseObject *ListIpv6sharednetworkResponseObject
	ArrayOfIpv6sharednetwork            *[]Ipv6sharednetwork
}

// ListIpv6sharednetworkResponseObjectAsListIpv6sharednetworkResponse is a convenience function that returns ListIpv6sharednetworkResponseObject wrapped in ListIpv6sharednetworkResponse
func ListIpv6sharednetworkResponseObjectAsListIpv6sharednetworkResponse(v *ListIpv6sharednetworkResponseObject) ListIpv6sharednetworkResponse {
	return ListIpv6sharednetworkResponse{
		ListIpv6sharednetworkResponseObject: v,
	}
}

// []Ipv6sharednetworkAsListIpv6sharednetworkResponse is a convenience function that returns []Ipv6sharednetwork wrapped in ListIpv6sharednetworkResponse
func ArrayOfIpv6sharednetworkAsListIpv6sharednetworkResponse(v *[]Ipv6sharednetwork) ListIpv6sharednetworkResponse {
	return ListIpv6sharednetworkResponse{
		ArrayOfIpv6sharednetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6sharednetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6sharednetworkResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6sharednetworkResponseObject)
	if err == nil {
		jsonListIpv6sharednetworkResponseObject, _ := json.Marshal(dst.ListIpv6sharednetworkResponseObject)
		if string(jsonListIpv6sharednetworkResponseObject) == "{}" { // empty struct
			dst.ListIpv6sharednetworkResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6sharednetworkResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6sharednetwork
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6sharednetwork)
	if err == nil {
		jsonArrayOfIpv6sharednetwork, _ := json.Marshal(dst.ArrayOfIpv6sharednetwork)
		if string(jsonArrayOfIpv6sharednetwork) == "{}" { // empty struct
			dst.ArrayOfIpv6sharednetwork = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6sharednetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6sharednetworkResponseObject = nil
		dst.ArrayOfIpv6sharednetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6sharednetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6sharednetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6sharednetworkResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6sharednetworkResponseObject != nil {
		return json.Marshal(&src.ListIpv6sharednetworkResponseObject)
	}

	if src.ArrayOfIpv6sharednetwork != nil {
		return json.Marshal(&src.ArrayOfIpv6sharednetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6sharednetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6sharednetworkResponseObject != nil {
		return obj.ListIpv6sharednetworkResponseObject
	}

	if obj.ArrayOfIpv6sharednetwork != nil {
		return obj.ArrayOfIpv6sharednetwork
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6sharednetworkResponse struct {
	value *ListIpv6sharednetworkResponse
	isSet bool
}

func (v NullableListIpv6sharednetworkResponse) Get() *ListIpv6sharednetworkResponse {
	return v.value
}

func (v *NullableListIpv6sharednetworkResponse) Set(val *ListIpv6sharednetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6sharednetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6sharednetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6sharednetworkResponse(val *ListIpv6sharednetworkResponse) *NullableListIpv6sharednetworkResponse {
	return &NullableListIpv6sharednetworkResponse{value: val, isSet: true}
}

func (v NullableListIpv6sharednetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6sharednetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
