/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListLeaseResponse - struct for ListLeaseResponse
type ListLeaseResponse struct {
	ListLeaseResponseObject *ListLeaseResponseObject
	ArrayOfLease            *[]Lease
}

// ListLeaseResponseObjectAsListLeaseResponse is a convenience function that returns ListLeaseResponseObject wrapped in ListLeaseResponse
func ListLeaseResponseObjectAsListLeaseResponse(v *ListLeaseResponseObject) ListLeaseResponse {
	return ListLeaseResponse{
		ListLeaseResponseObject: v,
	}
}

// []LeaseAsListLeaseResponse is a convenience function that returns []Lease wrapped in ListLeaseResponse
func ArrayOfLeaseAsListLeaseResponse(v *[]Lease) ListLeaseResponse {
	return ListLeaseResponse{
		ArrayOfLease: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListLeaseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListLeaseResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListLeaseResponseObject)
	if err == nil {
		jsonListLeaseResponseObject, _ := json.Marshal(dst.ListLeaseResponseObject)
		if string(jsonListLeaseResponseObject) == "{}" { // empty struct
			dst.ListLeaseResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListLeaseResponseObject = nil
	}

	// try to unmarshal data into ArrayOfLease
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLease)
	if err == nil {
		jsonArrayOfLease, _ := json.Marshal(dst.ArrayOfLease)
		if string(jsonArrayOfLease) == "{}" { // empty struct
			dst.ArrayOfLease = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfLease = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListLeaseResponseObject = nil
		dst.ArrayOfLease = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListLeaseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListLeaseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListLeaseResponse) MarshalJSON() ([]byte, error) {
	if src.ListLeaseResponseObject != nil {
		return json.Marshal(&src.ListLeaseResponseObject)
	}

	if src.ArrayOfLease != nil {
		return json.Marshal(&src.ArrayOfLease)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListLeaseResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListLeaseResponseObject != nil {
		return obj.ListLeaseResponseObject
	}

	if obj.ArrayOfLease != nil {
		return obj.ArrayOfLease
	}

	// all schemas are nil
	return nil
}

type NullableListLeaseResponse struct {
	value *ListLeaseResponse
	isSet bool
}

func (v NullableListLeaseResponse) Get() *ListLeaseResponse {
	return v.value
}

func (v *NullableListLeaseResponse) Set(val *ListLeaseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListLeaseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListLeaseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLeaseResponse(val *ListLeaseResponse) *NullableListLeaseResponse {
	return &NullableListLeaseResponse{value: val, isSet: true}
}

func (v NullableListLeaseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLeaseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
