/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListMacfilteraddressResponse - struct for ListMacfilteraddressResponse
type ListMacfilteraddressResponse struct {
	ListMacfilteraddressResponseObject *ListMacfilteraddressResponseObject
	ArrayOfMacfilteraddress            *[]Macfilteraddress
}

// ListMacfilteraddressResponseObjectAsListMacfilteraddressResponse is a convenience function that returns ListMacfilteraddressResponseObject wrapped in ListMacfilteraddressResponse
func ListMacfilteraddressResponseObjectAsListMacfilteraddressResponse(v *ListMacfilteraddressResponseObject) ListMacfilteraddressResponse {
	return ListMacfilteraddressResponse{
		ListMacfilteraddressResponseObject: v,
	}
}

// []MacfilteraddressAsListMacfilteraddressResponse is a convenience function that returns []Macfilteraddress wrapped in ListMacfilteraddressResponse
func ArrayOfMacfilteraddressAsListMacfilteraddressResponse(v *[]Macfilteraddress) ListMacfilteraddressResponse {
	return ListMacfilteraddressResponse{
		ArrayOfMacfilteraddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMacfilteraddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMacfilteraddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMacfilteraddressResponseObject)
	if err == nil {
		jsonListMacfilteraddressResponseObject, _ := json.Marshal(dst.ListMacfilteraddressResponseObject)
		if string(jsonListMacfilteraddressResponseObject) == "{}" { // empty struct
			dst.ListMacfilteraddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMacfilteraddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMacfilteraddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMacfilteraddress)
	if err == nil {
		jsonArrayOfMacfilteraddress, _ := json.Marshal(dst.ArrayOfMacfilteraddress)
		if string(jsonArrayOfMacfilteraddress) == "{}" { // empty struct
			dst.ArrayOfMacfilteraddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMacfilteraddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMacfilteraddressResponseObject = nil
		dst.ArrayOfMacfilteraddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMacfilteraddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMacfilteraddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMacfilteraddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListMacfilteraddressResponseObject != nil {
		return json.Marshal(&src.ListMacfilteraddressResponseObject)
	}

	if src.ArrayOfMacfilteraddress != nil {
		return json.Marshal(&src.ArrayOfMacfilteraddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMacfilteraddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMacfilteraddressResponseObject != nil {
		return obj.ListMacfilteraddressResponseObject
	}

	if obj.ArrayOfMacfilteraddress != nil {
		return obj.ArrayOfMacfilteraddress
	}

	// all schemas are nil
	return nil
}

type NullableListMacfilteraddressResponse struct {
	value *ListMacfilteraddressResponse
	isSet bool
}

func (v NullableListMacfilteraddressResponse) Get() *ListMacfilteraddressResponse {
	return v.value
}

func (v *NullableListMacfilteraddressResponse) Set(val *ListMacfilteraddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMacfilteraddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMacfilteraddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMacfilteraddressResponse(val *ListMacfilteraddressResponse) *NullableListMacfilteraddressResponse {
	return &NullableListMacfilteraddressResponse{value: val, isSet: true}
}

func (v NullableListMacfilteraddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMacfilteraddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
