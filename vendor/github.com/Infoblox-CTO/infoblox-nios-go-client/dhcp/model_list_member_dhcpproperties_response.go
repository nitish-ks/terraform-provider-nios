/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListMemberDhcppropertiesResponse - struct for ListMemberDhcppropertiesResponse
type ListMemberDhcppropertiesResponse struct {
	ListMemberDhcppropertiesResponseObject *ListMemberDhcppropertiesResponseObject
	ArrayOfMemberDhcpproperties            *[]MemberDhcpproperties
}

// ListMemberDhcppropertiesResponseObjectAsListMemberDhcppropertiesResponse is a convenience function that returns ListMemberDhcppropertiesResponseObject wrapped in ListMemberDhcppropertiesResponse
func ListMemberDhcppropertiesResponseObjectAsListMemberDhcppropertiesResponse(v *ListMemberDhcppropertiesResponseObject) ListMemberDhcppropertiesResponse {
	return ListMemberDhcppropertiesResponse{
		ListMemberDhcppropertiesResponseObject: v,
	}
}

// []MemberDhcppropertiesAsListMemberDhcppropertiesResponse is a convenience function that returns []MemberDhcpproperties wrapped in ListMemberDhcppropertiesResponse
func ArrayOfMemberDhcppropertiesAsListMemberDhcppropertiesResponse(v *[]MemberDhcpproperties) ListMemberDhcppropertiesResponse {
	return ListMemberDhcppropertiesResponse{
		ArrayOfMemberDhcpproperties: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMemberDhcppropertiesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMemberDhcppropertiesResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMemberDhcppropertiesResponseObject)
	if err == nil {
		jsonListMemberDhcppropertiesResponseObject, _ := json.Marshal(dst.ListMemberDhcppropertiesResponseObject)
		if string(jsonListMemberDhcppropertiesResponseObject) == "{}" { // empty struct
			dst.ListMemberDhcppropertiesResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMemberDhcppropertiesResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMemberDhcpproperties
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMemberDhcpproperties)
	if err == nil {
		jsonArrayOfMemberDhcpproperties, _ := json.Marshal(dst.ArrayOfMemberDhcpproperties)
		if string(jsonArrayOfMemberDhcpproperties) == "{}" { // empty struct
			dst.ArrayOfMemberDhcpproperties = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMemberDhcpproperties = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMemberDhcppropertiesResponseObject = nil
		dst.ArrayOfMemberDhcpproperties = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMemberDhcppropertiesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMemberDhcppropertiesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMemberDhcppropertiesResponse) MarshalJSON() ([]byte, error) {
	if src.ListMemberDhcppropertiesResponseObject != nil {
		return json.Marshal(&src.ListMemberDhcppropertiesResponseObject)
	}

	if src.ArrayOfMemberDhcpproperties != nil {
		return json.Marshal(&src.ArrayOfMemberDhcpproperties)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMemberDhcppropertiesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMemberDhcppropertiesResponseObject != nil {
		return obj.ListMemberDhcppropertiesResponseObject
	}

	if obj.ArrayOfMemberDhcpproperties != nil {
		return obj.ArrayOfMemberDhcpproperties
	}

	// all schemas are nil
	return nil
}

type NullableListMemberDhcppropertiesResponse struct {
	value *ListMemberDhcppropertiesResponse
	isSet bool
}

func (v NullableListMemberDhcppropertiesResponse) Get() *ListMemberDhcppropertiesResponse {
	return v.value
}

func (v *NullableListMemberDhcppropertiesResponse) Set(val *ListMemberDhcppropertiesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMemberDhcppropertiesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMemberDhcppropertiesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMemberDhcppropertiesResponse(val *ListMemberDhcppropertiesResponse) *NullableListMemberDhcppropertiesResponse {
	return &NullableListMemberDhcppropertiesResponse{value: val, isSet: true}
}

func (v NullableListMemberDhcppropertiesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMemberDhcppropertiesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
