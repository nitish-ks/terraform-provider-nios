/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListMsserverDhcpResponse - struct for ListMsserverDhcpResponse
type ListMsserverDhcpResponse struct {
	ListMsserverDhcpResponseObject *ListMsserverDhcpResponseObject
	ArrayOfMsserverDhcp            *[]MsserverDhcp
}

// ListMsserverDhcpResponseObjectAsListMsserverDhcpResponse is a convenience function that returns ListMsserverDhcpResponseObject wrapped in ListMsserverDhcpResponse
func ListMsserverDhcpResponseObjectAsListMsserverDhcpResponse(v *ListMsserverDhcpResponseObject) ListMsserverDhcpResponse {
	return ListMsserverDhcpResponse{
		ListMsserverDhcpResponseObject: v,
	}
}

// []MsserverDhcpAsListMsserverDhcpResponse is a convenience function that returns []MsserverDhcp wrapped in ListMsserverDhcpResponse
func ArrayOfMsserverDhcpAsListMsserverDhcpResponse(v *[]MsserverDhcp) ListMsserverDhcpResponse {
	return ListMsserverDhcpResponse{
		ArrayOfMsserverDhcp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMsserverDhcpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMsserverDhcpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMsserverDhcpResponseObject)
	if err == nil {
		jsonListMsserverDhcpResponseObject, _ := json.Marshal(dst.ListMsserverDhcpResponseObject)
		if string(jsonListMsserverDhcpResponseObject) == "{}" { // empty struct
			dst.ListMsserverDhcpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMsserverDhcpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMsserverDhcp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMsserverDhcp)
	if err == nil {
		jsonArrayOfMsserverDhcp, _ := json.Marshal(dst.ArrayOfMsserverDhcp)
		if string(jsonArrayOfMsserverDhcp) == "{}" { // empty struct
			dst.ArrayOfMsserverDhcp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMsserverDhcp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMsserverDhcpResponseObject = nil
		dst.ArrayOfMsserverDhcp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMsserverDhcpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMsserverDhcpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMsserverDhcpResponse) MarshalJSON() ([]byte, error) {
	if src.ListMsserverDhcpResponseObject != nil {
		return json.Marshal(&src.ListMsserverDhcpResponseObject)
	}

	if src.ArrayOfMsserverDhcp != nil {
		return json.Marshal(&src.ArrayOfMsserverDhcp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMsserverDhcpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMsserverDhcpResponseObject != nil {
		return obj.ListMsserverDhcpResponseObject
	}

	if obj.ArrayOfMsserverDhcp != nil {
		return obj.ArrayOfMsserverDhcp
	}

	// all schemas are nil
	return nil
}

type NullableListMsserverDhcpResponse struct {
	value *ListMsserverDhcpResponse
	isSet bool
}

func (v NullableListMsserverDhcpResponse) Get() *ListMsserverDhcpResponse {
	return v.value
}

func (v *NullableListMsserverDhcpResponse) Set(val *ListMsserverDhcpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMsserverDhcpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMsserverDhcpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMsserverDhcpResponse(val *ListMsserverDhcpResponse) *NullableListMsserverDhcpResponse {
	return &NullableListMsserverDhcpResponse{value: val, isSet: true}
}

func (v NullableListMsserverDhcpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMsserverDhcpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
