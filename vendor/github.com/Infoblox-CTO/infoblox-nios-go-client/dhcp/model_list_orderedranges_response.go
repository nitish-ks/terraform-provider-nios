/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListOrderedrangesResponse - struct for ListOrderedrangesResponse
type ListOrderedrangesResponse struct {
	ListOrderedrangesResponseObject *ListOrderedrangesResponseObject
	ArrayOfOrderedranges            *[]Orderedranges
}

// ListOrderedrangesResponseObjectAsListOrderedrangesResponse is a convenience function that returns ListOrderedrangesResponseObject wrapped in ListOrderedrangesResponse
func ListOrderedrangesResponseObjectAsListOrderedrangesResponse(v *ListOrderedrangesResponseObject) ListOrderedrangesResponse {
	return ListOrderedrangesResponse{
		ListOrderedrangesResponseObject: v,
	}
}

// []OrderedrangesAsListOrderedrangesResponse is a convenience function that returns []Orderedranges wrapped in ListOrderedrangesResponse
func ArrayOfOrderedrangesAsListOrderedrangesResponse(v *[]Orderedranges) ListOrderedrangesResponse {
	return ListOrderedrangesResponse{
		ArrayOfOrderedranges: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListOrderedrangesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListOrderedrangesResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListOrderedrangesResponseObject)
	if err == nil {
		jsonListOrderedrangesResponseObject, _ := json.Marshal(dst.ListOrderedrangesResponseObject)
		if string(jsonListOrderedrangesResponseObject) == "{}" { // empty struct
			dst.ListOrderedrangesResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListOrderedrangesResponseObject = nil
	}

	// try to unmarshal data into ArrayOfOrderedranges
	err = newStrictDecoder(data).Decode(&dst.ArrayOfOrderedranges)
	if err == nil {
		jsonArrayOfOrderedranges, _ := json.Marshal(dst.ArrayOfOrderedranges)
		if string(jsonArrayOfOrderedranges) == "{}" { // empty struct
			dst.ArrayOfOrderedranges = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfOrderedranges = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListOrderedrangesResponseObject = nil
		dst.ArrayOfOrderedranges = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListOrderedrangesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListOrderedrangesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListOrderedrangesResponse) MarshalJSON() ([]byte, error) {
	if src.ListOrderedrangesResponseObject != nil {
		return json.Marshal(&src.ListOrderedrangesResponseObject)
	}

	if src.ArrayOfOrderedranges != nil {
		return json.Marshal(&src.ArrayOfOrderedranges)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListOrderedrangesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListOrderedrangesResponseObject != nil {
		return obj.ListOrderedrangesResponseObject
	}

	if obj.ArrayOfOrderedranges != nil {
		return obj.ArrayOfOrderedranges
	}

	// all schemas are nil
	return nil
}

type NullableListOrderedrangesResponse struct {
	value *ListOrderedrangesResponse
	isSet bool
}

func (v NullableListOrderedrangesResponse) Get() *ListOrderedrangesResponse {
	return v.value
}

func (v *NullableListOrderedrangesResponse) Set(val *ListOrderedrangesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrderedrangesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrderedrangesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrderedrangesResponse(val *ListOrderedrangesResponse) *NullableListOrderedrangesResponse {
	return &NullableListOrderedrangesResponse{value: val, isSet: true}
}

func (v NullableListOrderedrangesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrderedrangesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
