/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListRangeResponse - struct for ListRangeResponse
type ListRangeResponse struct {
	ListRangeResponseObject *ListRangeResponseObject
	ArrayOfRange            *[]Range
}

// ListRangeResponseObjectAsListRangeResponse is a convenience function that returns ListRangeResponseObject wrapped in ListRangeResponse
func ListRangeResponseObjectAsListRangeResponse(v *ListRangeResponseObject) ListRangeResponse {
	return ListRangeResponse{
		ListRangeResponseObject: v,
	}
}

// []RangeAsListRangeResponse is a convenience function that returns []Range wrapped in ListRangeResponse
func ArrayOfRangeAsListRangeResponse(v *[]Range) ListRangeResponse {
	return ListRangeResponse{
		ArrayOfRange: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRangeResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRangeResponseObject)
	if err == nil {
		jsonListRangeResponseObject, _ := json.Marshal(dst.ListRangeResponseObject)
		if string(jsonListRangeResponseObject) == "{}" { // empty struct
			dst.ListRangeResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRangeResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRange
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRange)
	if err == nil {
		jsonArrayOfRange, _ := json.Marshal(dst.ArrayOfRange)
		if string(jsonArrayOfRange) == "{}" { // empty struct
			dst.ArrayOfRange = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRangeResponseObject = nil
		dst.ArrayOfRange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRangeResponse) MarshalJSON() ([]byte, error) {
	if src.ListRangeResponseObject != nil {
		return json.Marshal(&src.ListRangeResponseObject)
	}

	if src.ArrayOfRange != nil {
		return json.Marshal(&src.ArrayOfRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRangeResponseObject != nil {
		return obj.ListRangeResponseObject
	}

	if obj.ArrayOfRange != nil {
		return obj.ArrayOfRange
	}

	// all schemas are nil
	return nil
}

type NullableListRangeResponse struct {
	value *ListRangeResponse
	isSet bool
}

func (v NullableListRangeResponse) Get() *ListRangeResponse {
	return v.value
}

func (v *NullableListRangeResponse) Set(val *ListRangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRangeResponse(val *ListRangeResponse) *NullableListRangeResponse {
	return &NullableListRangeResponse{value: val, isSet: true}
}

func (v NullableListRangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
