/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListRangetemplateResponse - struct for ListRangetemplateResponse
type ListRangetemplateResponse struct {
	ListRangetemplateResponseObject *ListRangetemplateResponseObject
	ArrayOfRangetemplate            *[]Rangetemplate
}

// ListRangetemplateResponseObjectAsListRangetemplateResponse is a convenience function that returns ListRangetemplateResponseObject wrapped in ListRangetemplateResponse
func ListRangetemplateResponseObjectAsListRangetemplateResponse(v *ListRangetemplateResponseObject) ListRangetemplateResponse {
	return ListRangetemplateResponse{
		ListRangetemplateResponseObject: v,
	}
}

// []RangetemplateAsListRangetemplateResponse is a convenience function that returns []Rangetemplate wrapped in ListRangetemplateResponse
func ArrayOfRangetemplateAsListRangetemplateResponse(v *[]Rangetemplate) ListRangetemplateResponse {
	return ListRangetemplateResponse{
		ArrayOfRangetemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRangetemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRangetemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRangetemplateResponseObject)
	if err == nil {
		jsonListRangetemplateResponseObject, _ := json.Marshal(dst.ListRangetemplateResponseObject)
		if string(jsonListRangetemplateResponseObject) == "{}" { // empty struct
			dst.ListRangetemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRangetemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRangetemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRangetemplate)
	if err == nil {
		jsonArrayOfRangetemplate, _ := json.Marshal(dst.ArrayOfRangetemplate)
		if string(jsonArrayOfRangetemplate) == "{}" { // empty struct
			dst.ArrayOfRangetemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRangetemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRangetemplateResponseObject = nil
		dst.ArrayOfRangetemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRangetemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRangetemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRangetemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListRangetemplateResponseObject != nil {
		return json.Marshal(&src.ListRangetemplateResponseObject)
	}

	if src.ArrayOfRangetemplate != nil {
		return json.Marshal(&src.ArrayOfRangetemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRangetemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRangetemplateResponseObject != nil {
		return obj.ListRangetemplateResponseObject
	}

	if obj.ArrayOfRangetemplate != nil {
		return obj.ArrayOfRangetemplate
	}

	// all schemas are nil
	return nil
}

type NullableListRangetemplateResponse struct {
	value *ListRangetemplateResponse
	isSet bool
}

func (v NullableListRangetemplateResponse) Get() *ListRangetemplateResponse {
	return v.value
}

func (v *NullableListRangetemplateResponse) Set(val *ListRangetemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRangetemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRangetemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRangetemplateResponse(val *ListRangetemplateResponse) *NullableListRangetemplateResponse {
	return &NullableListRangetemplateResponse{value: val, isSet: true}
}

func (v NullableListRangetemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRangetemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
