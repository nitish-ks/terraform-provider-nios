/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// ListSharednetworkResponse - struct for ListSharednetworkResponse
type ListSharednetworkResponse struct {
	ListSharednetworkResponseObject *ListSharednetworkResponseObject
	ArrayOfSharednetwork            *[]Sharednetwork
}

// ListSharednetworkResponseObjectAsListSharednetworkResponse is a convenience function that returns ListSharednetworkResponseObject wrapped in ListSharednetworkResponse
func ListSharednetworkResponseObjectAsListSharednetworkResponse(v *ListSharednetworkResponseObject) ListSharednetworkResponse {
	return ListSharednetworkResponse{
		ListSharednetworkResponseObject: v,
	}
}

// []SharednetworkAsListSharednetworkResponse is a convenience function that returns []Sharednetwork wrapped in ListSharednetworkResponse
func ArrayOfSharednetworkAsListSharednetworkResponse(v *[]Sharednetwork) ListSharednetworkResponse {
	return ListSharednetworkResponse{
		ArrayOfSharednetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharednetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharednetworkResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharednetworkResponseObject)
	if err == nil {
		jsonListSharednetworkResponseObject, _ := json.Marshal(dst.ListSharednetworkResponseObject)
		if string(jsonListSharednetworkResponseObject) == "{}" { // empty struct
			dst.ListSharednetworkResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharednetworkResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharednetwork
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharednetwork)
	if err == nil {
		jsonArrayOfSharednetwork, _ := json.Marshal(dst.ArrayOfSharednetwork)
		if string(jsonArrayOfSharednetwork) == "{}" { // empty struct
			dst.ArrayOfSharednetwork = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharednetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharednetworkResponseObject = nil
		dst.ArrayOfSharednetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharednetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharednetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharednetworkResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharednetworkResponseObject != nil {
		return json.Marshal(&src.ListSharednetworkResponseObject)
	}

	if src.ArrayOfSharednetwork != nil {
		return json.Marshal(&src.ArrayOfSharednetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharednetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharednetworkResponseObject != nil {
		return obj.ListSharednetworkResponseObject
	}

	if obj.ArrayOfSharednetwork != nil {
		return obj.ArrayOfSharednetwork
	}

	// all schemas are nil
	return nil
}

type NullableListSharednetworkResponse struct {
	value *ListSharednetworkResponse
	isSet bool
}

func (v NullableListSharednetworkResponse) Get() *ListSharednetworkResponse {
	return v.value
}

func (v *NullableListSharednetworkResponse) Set(val *ListSharednetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharednetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharednetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharednetworkResponse(val *ListSharednetworkResponse) *NullableListSharednetworkResponse {
	return &NullableListSharednetworkResponse{value: val, isSet: true}
}

func (v NullableListSharednetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharednetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
