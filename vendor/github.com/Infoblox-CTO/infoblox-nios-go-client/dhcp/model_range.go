/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Range type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Range{}

// Range struct for Range
type Range struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This field controls whether only the DHCP server is allowed to update DNS, regardless of the DHCP clients requests.
	AlwaysUpdateDns *bool `json:"always_update_dns,omitempty"`
	// The bootfile name for the range. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the range. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string         `json:"bootserver,omitempty"`
	CloudInfo  *RangeCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the range; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this range.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// If True, send NAK forcing the client to take the new address.
	DenyAllClients *bool `json:"deny_all_clients,omitempty"`
	// If set to true, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The percentage of the total DHCP utilization of the range multiplied by 1000. This is the percentage of the total number of available IP addresses belonging to the range versus the total number of all IP addresses in the range.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
	// A string describing the utilization level of the range.
	DhcpUtilizationStatus *string `json:"dhcp_utilization_status,omitempty"`
	// Determines whether a range is disabled or not. When this is set to False, the range is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Discover now status for this range.
	DiscoverNowStatus          *string                          `json:"discover_now_status,omitempty"`
	DiscoveryBasicPollSettings *RangeDiscoveryBasicPollSettings `json:"discovery_basic_poll_settings,omitempty"`
	DiscoveryBlackoutSetting   *RangeDiscoveryBlackoutSetting   `json:"discovery_blackout_setting,omitempty"`
	// The member that will run discovery for this range.
	DiscoveryMember *string `json:"discovery_member,omitempty"`
	// The total number of DHCP leases issued for the range.
	DynamicHosts *int64 `json:"dynamic_hosts,omitempty"`
	// The e-mail lists to which the appliance sends DHCP threshold alarm e-mail messages.
	EmailList []string `json:"email_list,omitempty"`
	// The dynamic DNS updates flag of a DHCP range object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if DHCP thresholds are enabled for the range.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines whether a discovery is enabled or not for this range. When this is set to False, the discovery for this range is disabled.
	EnableDiscovery *bool `json:"enable_discovery,omitempty"`
	// Determines if DHCP threshold warnings are sent through email.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Determines if IFMAP publishing is enabled for the range.
	EnableIfmapPublishing *bool `json:"enable_ifmap_publishing,omitempty"`
	// Determines if the discovery for the range should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Determines if DHCP threshold warnings are send through SNMP.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// The IPv4 Address end address of the range.
	EndAddr *string `json:"end_addr,omitempty"`
	// The endpoints that provides data for the DHCP Range object.
	EndpointSources []string `json:"endpoint_sources,omitempty"`
	// These are ranges of IP addresses that the appliance does not use to assign to clients. You can use these exclusion addresses as static IP addresses. They contain the start and end addresses of the exclusion range, and optionally, information about this exclusion range.
	Exclude []RangeExclude `json:"exclude,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of the failover association: the server in this failover association will serve the IPv4 range in case the main server is out of service. {range:range} must be set to 'FAILOVER' or 'FAILOVER_MS' if you want the failover association specified here to serve the range.
	FailoverAssociation *string `json:"failover_association,omitempty"`
	// This field contains the fingerprint filters for this DHCP range. The appliance uses matching rules in these filters to select the address range from which it assigns a lease.
	FingerprintFilterRules []RangeFingerprintFilterRules `json:"fingerprint_filter_rules,omitempty"`
	// The percentage of DHCP range usage threshold above which range usage is not expected and may warrant your attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// The percentage of DHCP range usage below which the corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Indicates whether the appliance will ignore DHCP client IDs or MAC addresses. Valid values are \"NONE\", \"CLIENT\", or \"MACADDR\". The default is \"NONE\".
	IgnoreId *string `json:"ignore_id,omitempty"`
	// A list of MAC addresses the appliance will ignore.
	IgnoreMacAddresses []string `json:"ignore_mac_addresses,omitempty"`
	// This field will be 'true' if this particular range is part of a split scope.
	IsSplitScope *bool `json:"is_split_scope,omitempty"`
	// Permission for known clients. This can be 'Allow' or 'Deny'. If set to 'Deny' known clients will be denied IP addresses. Known clients include roaming hosts and clients with fixed addresses or DHCP host entries. Unknown clients include clients that are not roaming hosts and clients that do not have fixed addresses or DHCP host entries.
	KnownClients *string `json:"known_clients,omitempty"`
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *string `json:"lease_scavenge_time,omitempty"`
	// This field contains the logic filters to be applied to this range. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []RangeLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The percentage of DHCP range usage below which the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// The percentage of DHCP range usage threshold below which range usage is not expected and may warrant your attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// This field contains the MAC filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	MacFilterRules []RangeMacFilterRules `json:"mac_filter_rules,omitempty"`
	Member         *RangeMember          `json:"member,omitempty"`
	MsAdUserData   *RangeMsAdUserData    `json:"ms_ad_user_data,omitempty"`
	// This field contains the Microsoft DHCP options for this range.
	MsOptions []RangeMsOptions `json:"ms_options,omitempty"`
	MsServer  *RangeMsServer   `json:"ms_server,omitempty"`
	// This field contains the NAC filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	NacFilterRules []RangeNacFilterRules `json:"nac_filter_rules,omitempty"`
	// This field contains the name of the Microsoft scope.
	Name *string `json:"name,omitempty"`
	// The network to which this range belongs, in IPv4 Address/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which this range resides.
	NetworkView     *string                `json:"network_view,omitempty"`
	NextAvailableIp map[string]interface{} `json:"next_available_ip,omitempty"`
	// The name in FQDN and/or IPv4 Address of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// This field contains the Option filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	OptionFilterRules []RangeOptionFilterRules `json:"option_filter_rules,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options                    []RangeOptions                   `json:"options,omitempty"`
	PortControlBlackoutSetting *RangePortControlBlackoutSetting `json:"port_control_blackout_setting,omitempty"`
	// The PXE lease time value of a DHCP Range object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// This field contains the Relay Agent filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	RelayAgentFilterRules []RangeRelayAgentFilterRules `json:"relay_agent_filter_rules,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// If the field is set to True, the discovery blackout setting will be used for port control blackout setting.
	SamePortControlDiscoveryBlackout *bool `json:"same_port_control_discovery_blackout,omitempty"`
	// The type of server that is going to serve the range.
	ServerAssociationType *string           `json:"server_association_type,omitempty"`
	SplitMember           *RangeSplitMember `json:"split_member,omitempty"`
	// This field controls the percentage used when creating a split scope. Valid values are numbers between 1 and 99. If the value is 40, it means that the top 40% of the exclusion will be created on the DHCP range assigned to {next_available_ip:next_available_ip} and the lower 60% of the range will be assigned to DHCP range assigned to {next_available_ip:next_available_ip}
	SplitScopeExclusionPercent *int64 `json:"split_scope_exclusion_percent,omitempty"`
	// The IPv4 Address starting address of the range.
	StartAddr *string `json:"start_addr,omitempty"`
	// The number of static DHCP addresses configured in the range.
	StaticHosts       *int64                  `json:"static_hosts,omitempty"`
	SubscribeSettings *RangeSubscribeSettings `json:"subscribe_settings,omitempty"`
	// If set on creation, the range will be created according to the values specified in the named template.
	Template *string `json:"template,omitempty"`
	// The total number of DHCP addresses configured in the range.
	TotalHosts *int64 `json:"total_hosts,omitempty"`
	// Permission for unknown clients. This can be 'Allow' or 'Deny'. If set to 'Deny', unknown clients will be denied IP addresses. Known clients include roaming hosts and clients with fixed addresses or DHCP host entries. Unknown clients include clients that are not roaming hosts and clients that do not have fixed addresses or DHCP host entries.
	UnknownClients *string `json:"unknown_clients,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: discovery_blackout_setting , port_control_blackout_setting, same_port_control_discovery_blackout
	UseBlackoutSetting *bool `json:"use_blackout_setting,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: discovery_basic_poll_settings
	UseDiscoveryBasicPollingSettings *bool `json:"use_discovery_basic_polling_settings,omitempty"`
	// Use flag for: email_list
	UseEmailList *bool `json:"use_email_list,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: enable_dhcp_thresholds
	UseEnableDhcpThresholds *bool `json:"use_enable_dhcp_thresholds,omitempty"`
	// Use flag for: discovery_member , enable_discovery
	UseEnableDiscovery *bool `json:"use_enable_discovery,omitempty"`
	// Use flag for: enable_ifmap_publishing
	UseEnableIfmapPublishing *bool `json:"use_enable_ifmap_publishing,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ignore_id
	UseIgnoreId *bool `json:"use_ignore_id,omitempty"`
	// Use flag for: known_clients
	UseKnownClients *bool `json:"use_known_clients,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: ms_options
	UseMsOptions *bool `json:"use_ms_options,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: subscribe_settings
	UseSubscribeSettings *bool `json:"use_subscribe_settings,omitempty"`
	// Use flag for: unknown_clients
	UseUnknownClients *bool `json:"use_unknown_clients,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
}

// NewRange instantiates a new Range object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRange() *Range {
	this := Range{}
	return &this
}

// NewRangeWithDefaults instantiates a new Range object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeWithDefaults() *Range {
	this := Range{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Range) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Range) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Range) SetRef(v string) {
	o.Ref = &v
}

// GetAlwaysUpdateDns returns the AlwaysUpdateDns field value if set, zero value otherwise.
func (o *Range) GetAlwaysUpdateDns() bool {
	if o == nil || IsNil(o.AlwaysUpdateDns) {
		var ret bool
		return ret
	}
	return *o.AlwaysUpdateDns
}

// GetAlwaysUpdateDnsOk returns a tuple with the AlwaysUpdateDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetAlwaysUpdateDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.AlwaysUpdateDns) {
		return nil, false
	}
	return o.AlwaysUpdateDns, true
}

// HasAlwaysUpdateDns returns a boolean if a field has been set.
func (o *Range) HasAlwaysUpdateDns() bool {
	if o != nil && !IsNil(o.AlwaysUpdateDns) {
		return true
	}

	return false
}

// SetAlwaysUpdateDns gets a reference to the given bool and assigns it to the AlwaysUpdateDns field.
func (o *Range) SetAlwaysUpdateDns(v bool) {
	o.AlwaysUpdateDns = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Range) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Range) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Range) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Range) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Range) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Range) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Range) GetCloudInfo() RangeCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RangeCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetCloudInfoOk() (*RangeCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Range) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RangeCloudInfo and assigns it to the CloudInfo field.
func (o *Range) SetCloudInfo(v RangeCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Range) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Range) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Range) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Range) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Range) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Range) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Range) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Range) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Range) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDenyAllClients returns the DenyAllClients field value if set, zero value otherwise.
func (o *Range) GetDenyAllClients() bool {
	if o == nil || IsNil(o.DenyAllClients) {
		var ret bool
		return ret
	}
	return *o.DenyAllClients
}

// GetDenyAllClientsOk returns a tuple with the DenyAllClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDenyAllClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyAllClients) {
		return nil, false
	}
	return o.DenyAllClients, true
}

// HasDenyAllClients returns a boolean if a field has been set.
func (o *Range) HasDenyAllClients() bool {
	if o != nil && !IsNil(o.DenyAllClients) {
		return true
	}

	return false
}

// SetDenyAllClients gets a reference to the given bool and assigns it to the DenyAllClients field.
func (o *Range) SetDenyAllClients(v bool) {
	o.DenyAllClients = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Range) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Range) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Range) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *Range) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *Range) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *Range) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

// GetDhcpUtilizationStatus returns the DhcpUtilizationStatus field value if set, zero value otherwise.
func (o *Range) GetDhcpUtilizationStatus() string {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		var ret string
		return ret
	}
	return *o.DhcpUtilizationStatus
}

// GetDhcpUtilizationStatusOk returns a tuple with the DhcpUtilizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDhcpUtilizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		return nil, false
	}
	return o.DhcpUtilizationStatus, true
}

// HasDhcpUtilizationStatus returns a boolean if a field has been set.
func (o *Range) HasDhcpUtilizationStatus() bool {
	if o != nil && !IsNil(o.DhcpUtilizationStatus) {
		return true
	}

	return false
}

// SetDhcpUtilizationStatus gets a reference to the given string and assigns it to the DhcpUtilizationStatus field.
func (o *Range) SetDhcpUtilizationStatus(v string) {
	o.DhcpUtilizationStatus = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Range) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Range) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Range) SetDisable(v bool) {
	o.Disable = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Range) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Range) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Range) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveryBasicPollSettings returns the DiscoveryBasicPollSettings field value if set, zero value otherwise.
func (o *Range) GetDiscoveryBasicPollSettings() RangeDiscoveryBasicPollSettings {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		var ret RangeDiscoveryBasicPollSettings
		return ret
	}
	return *o.DiscoveryBasicPollSettings
}

// GetDiscoveryBasicPollSettingsOk returns a tuple with the DiscoveryBasicPollSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDiscoveryBasicPollSettingsOk() (*RangeDiscoveryBasicPollSettings, bool) {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		return nil, false
	}
	return o.DiscoveryBasicPollSettings, true
}

// HasDiscoveryBasicPollSettings returns a boolean if a field has been set.
func (o *Range) HasDiscoveryBasicPollSettings() bool {
	if o != nil && !IsNil(o.DiscoveryBasicPollSettings) {
		return true
	}

	return false
}

// SetDiscoveryBasicPollSettings gets a reference to the given RangeDiscoveryBasicPollSettings and assigns it to the DiscoveryBasicPollSettings field.
func (o *Range) SetDiscoveryBasicPollSettings(v RangeDiscoveryBasicPollSettings) {
	o.DiscoveryBasicPollSettings = &v
}

// GetDiscoveryBlackoutSetting returns the DiscoveryBlackoutSetting field value if set, zero value otherwise.
func (o *Range) GetDiscoveryBlackoutSetting() RangeDiscoveryBlackoutSetting {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		var ret RangeDiscoveryBlackoutSetting
		return ret
	}
	return *o.DiscoveryBlackoutSetting
}

// GetDiscoveryBlackoutSettingOk returns a tuple with the DiscoveryBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDiscoveryBlackoutSettingOk() (*RangeDiscoveryBlackoutSetting, bool) {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		return nil, false
	}
	return o.DiscoveryBlackoutSetting, true
}

// HasDiscoveryBlackoutSetting returns a boolean if a field has been set.
func (o *Range) HasDiscoveryBlackoutSetting() bool {
	if o != nil && !IsNil(o.DiscoveryBlackoutSetting) {
		return true
	}

	return false
}

// SetDiscoveryBlackoutSetting gets a reference to the given RangeDiscoveryBlackoutSetting and assigns it to the DiscoveryBlackoutSetting field.
func (o *Range) SetDiscoveryBlackoutSetting(v RangeDiscoveryBlackoutSetting) {
	o.DiscoveryBlackoutSetting = &v
}

// GetDiscoveryMember returns the DiscoveryMember field value if set, zero value otherwise.
func (o *Range) GetDiscoveryMember() string {
	if o == nil || IsNil(o.DiscoveryMember) {
		var ret string
		return ret
	}
	return *o.DiscoveryMember
}

// GetDiscoveryMemberOk returns a tuple with the DiscoveryMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDiscoveryMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMember) {
		return nil, false
	}
	return o.DiscoveryMember, true
}

// HasDiscoveryMember returns a boolean if a field has been set.
func (o *Range) HasDiscoveryMember() bool {
	if o != nil && !IsNil(o.DiscoveryMember) {
		return true
	}

	return false
}

// SetDiscoveryMember gets a reference to the given string and assigns it to the DiscoveryMember field.
func (o *Range) SetDiscoveryMember(v string) {
	o.DiscoveryMember = &v
}

// GetDynamicHosts returns the DynamicHosts field value if set, zero value otherwise.
func (o *Range) GetDynamicHosts() int64 {
	if o == nil || IsNil(o.DynamicHosts) {
		var ret int64
		return ret
	}
	return *o.DynamicHosts
}

// GetDynamicHostsOk returns a tuple with the DynamicHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetDynamicHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.DynamicHosts) {
		return nil, false
	}
	return o.DynamicHosts, true
}

// HasDynamicHosts returns a boolean if a field has been set.
func (o *Range) HasDynamicHosts() bool {
	if o != nil && !IsNil(o.DynamicHosts) {
		return true
	}

	return false
}

// SetDynamicHosts gets a reference to the given int64 and assigns it to the DynamicHosts field.
func (o *Range) SetDynamicHosts(v int64) {
	o.DynamicHosts = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *Range) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *Range) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *Range) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Range) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Range) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Range) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *Range) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Range) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *Range) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableDiscovery returns the EnableDiscovery field value if set, zero value otherwise.
func (o *Range) GetEnableDiscovery() bool {
	if o == nil || IsNil(o.EnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableDiscovery
}

// GetEnableDiscoveryOk returns a tuple with the EnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDiscovery) {
		return nil, false
	}
	return o.EnableDiscovery, true
}

// HasEnableDiscovery returns a boolean if a field has been set.
func (o *Range) HasEnableDiscovery() bool {
	if o != nil && !IsNil(o.EnableDiscovery) {
		return true
	}

	return false
}

// SetEnableDiscovery gets a reference to the given bool and assigns it to the EnableDiscovery field.
func (o *Range) SetEnableDiscovery(v bool) {
	o.EnableDiscovery = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *Range) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *Range) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *Range) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnableIfmapPublishing returns the EnableIfmapPublishing field value if set, zero value otherwise.
func (o *Range) GetEnableIfmapPublishing() bool {
	if o == nil || IsNil(o.EnableIfmapPublishing) {
		var ret bool
		return ret
	}
	return *o.EnableIfmapPublishing
}

// GetEnableIfmapPublishingOk returns a tuple with the EnableIfmapPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableIfmapPublishingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIfmapPublishing) {
		return nil, false
	}
	return o.EnableIfmapPublishing, true
}

// HasEnableIfmapPublishing returns a boolean if a field has been set.
func (o *Range) HasEnableIfmapPublishing() bool {
	if o != nil && !IsNil(o.EnableIfmapPublishing) {
		return true
	}

	return false
}

// SetEnableIfmapPublishing gets a reference to the given bool and assigns it to the EnableIfmapPublishing field.
func (o *Range) SetEnableIfmapPublishing(v bool) {
	o.EnableIfmapPublishing = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Range) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Range) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Range) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Range) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Range) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Range) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *Range) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *Range) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *Range) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetEndAddr returns the EndAddr field value if set, zero value otherwise.
func (o *Range) GetEndAddr() string {
	if o == nil || IsNil(o.EndAddr) {
		var ret string
		return ret
	}
	return *o.EndAddr
}

// GetEndAddrOk returns a tuple with the EndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEndAddrOk() (*string, bool) {
	if o == nil || IsNil(o.EndAddr) {
		return nil, false
	}
	return o.EndAddr, true
}

// HasEndAddr returns a boolean if a field has been set.
func (o *Range) HasEndAddr() bool {
	if o != nil && !IsNil(o.EndAddr) {
		return true
	}

	return false
}

// SetEndAddr gets a reference to the given string and assigns it to the EndAddr field.
func (o *Range) SetEndAddr(v string) {
	o.EndAddr = &v
}

// GetEndpointSources returns the EndpointSources field value if set, zero value otherwise.
func (o *Range) GetEndpointSources() []string {
	if o == nil || IsNil(o.EndpointSources) {
		var ret []string
		return ret
	}
	return o.EndpointSources
}

// GetEndpointSourcesOk returns a tuple with the EndpointSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetEndpointSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.EndpointSources) {
		return nil, false
	}
	return o.EndpointSources, true
}

// HasEndpointSources returns a boolean if a field has been set.
func (o *Range) HasEndpointSources() bool {
	if o != nil && !IsNil(o.EndpointSources) {
		return true
	}

	return false
}

// SetEndpointSources gets a reference to the given []string and assigns it to the EndpointSources field.
func (o *Range) SetEndpointSources(v []string) {
	o.EndpointSources = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Range) GetExclude() []RangeExclude {
	if o == nil || IsNil(o.Exclude) {
		var ret []RangeExclude
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetExcludeOk() ([]RangeExclude, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Range) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []RangeExclude and assigns it to the Exclude field.
func (o *Range) SetExclude(v []RangeExclude) {
	o.Exclude = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Range) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Range) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Range) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFailoverAssociation returns the FailoverAssociation field value if set, zero value otherwise.
func (o *Range) GetFailoverAssociation() string {
	if o == nil || IsNil(o.FailoverAssociation) {
		var ret string
		return ret
	}
	return *o.FailoverAssociation
}

// GetFailoverAssociationOk returns a tuple with the FailoverAssociation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetFailoverAssociationOk() (*string, bool) {
	if o == nil || IsNil(o.FailoverAssociation) {
		return nil, false
	}
	return o.FailoverAssociation, true
}

// HasFailoverAssociation returns a boolean if a field has been set.
func (o *Range) HasFailoverAssociation() bool {
	if o != nil && !IsNil(o.FailoverAssociation) {
		return true
	}

	return false
}

// SetFailoverAssociation gets a reference to the given string and assigns it to the FailoverAssociation field.
func (o *Range) SetFailoverAssociation(v string) {
	o.FailoverAssociation = &v
}

// GetFingerprintFilterRules returns the FingerprintFilterRules field value if set, zero value otherwise.
func (o *Range) GetFingerprintFilterRules() []RangeFingerprintFilterRules {
	if o == nil || IsNil(o.FingerprintFilterRules) {
		var ret []RangeFingerprintFilterRules
		return ret
	}
	return o.FingerprintFilterRules
}

// GetFingerprintFilterRulesOk returns a tuple with the FingerprintFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetFingerprintFilterRulesOk() ([]RangeFingerprintFilterRules, bool) {
	if o == nil || IsNil(o.FingerprintFilterRules) {
		return nil, false
	}
	return o.FingerprintFilterRules, true
}

// HasFingerprintFilterRules returns a boolean if a field has been set.
func (o *Range) HasFingerprintFilterRules() bool {
	if o != nil && !IsNil(o.FingerprintFilterRules) {
		return true
	}

	return false
}

// SetFingerprintFilterRules gets a reference to the given []RangeFingerprintFilterRules and assigns it to the FingerprintFilterRules field.
func (o *Range) SetFingerprintFilterRules(v []RangeFingerprintFilterRules) {
	o.FingerprintFilterRules = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *Range) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *Range) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *Range) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *Range) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *Range) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *Range) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Range) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Range) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Range) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIgnoreId returns the IgnoreId field value if set, zero value otherwise.
func (o *Range) GetIgnoreId() string {
	if o == nil || IsNil(o.IgnoreId) {
		var ret string
		return ret
	}
	return *o.IgnoreId
}

// GetIgnoreIdOk returns a tuple with the IgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetIgnoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreId) {
		return nil, false
	}
	return o.IgnoreId, true
}

// HasIgnoreId returns a boolean if a field has been set.
func (o *Range) HasIgnoreId() bool {
	if o != nil && !IsNil(o.IgnoreId) {
		return true
	}

	return false
}

// SetIgnoreId gets a reference to the given string and assigns it to the IgnoreId field.
func (o *Range) SetIgnoreId(v string) {
	o.IgnoreId = &v
}

// GetIgnoreMacAddresses returns the IgnoreMacAddresses field value if set, zero value otherwise.
func (o *Range) GetIgnoreMacAddresses() []string {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		var ret []string
		return ret
	}
	return o.IgnoreMacAddresses
}

// GetIgnoreMacAddressesOk returns a tuple with the IgnoreMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetIgnoreMacAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		return nil, false
	}
	return o.IgnoreMacAddresses, true
}

// HasIgnoreMacAddresses returns a boolean if a field has been set.
func (o *Range) HasIgnoreMacAddresses() bool {
	if o != nil && !IsNil(o.IgnoreMacAddresses) {
		return true
	}

	return false
}

// SetIgnoreMacAddresses gets a reference to the given []string and assigns it to the IgnoreMacAddresses field.
func (o *Range) SetIgnoreMacAddresses(v []string) {
	o.IgnoreMacAddresses = v
}

// GetIsSplitScope returns the IsSplitScope field value if set, zero value otherwise.
func (o *Range) GetIsSplitScope() bool {
	if o == nil || IsNil(o.IsSplitScope) {
		var ret bool
		return ret
	}
	return *o.IsSplitScope
}

// GetIsSplitScopeOk returns a tuple with the IsSplitScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetIsSplitScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSplitScope) {
		return nil, false
	}
	return o.IsSplitScope, true
}

// HasIsSplitScope returns a boolean if a field has been set.
func (o *Range) HasIsSplitScope() bool {
	if o != nil && !IsNil(o.IsSplitScope) {
		return true
	}

	return false
}

// SetIsSplitScope gets a reference to the given bool and assigns it to the IsSplitScope field.
func (o *Range) SetIsSplitScope(v bool) {
	o.IsSplitScope = &v
}

// GetKnownClients returns the KnownClients field value if set, zero value otherwise.
func (o *Range) GetKnownClients() string {
	if o == nil || IsNil(o.KnownClients) {
		var ret string
		return ret
	}
	return *o.KnownClients
}

// GetKnownClientsOk returns a tuple with the KnownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetKnownClientsOk() (*string, bool) {
	if o == nil || IsNil(o.KnownClients) {
		return nil, false
	}
	return o.KnownClients, true
}

// HasKnownClients returns a boolean if a field has been set.
func (o *Range) HasKnownClients() bool {
	if o != nil && !IsNil(o.KnownClients) {
		return true
	}

	return false
}

// SetKnownClients gets a reference to the given string and assigns it to the KnownClients field.
func (o *Range) SetKnownClients(v string) {
	o.KnownClients = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *Range) GetLeaseScavengeTime() string {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret string
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetLeaseScavengeTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *Range) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given string and assigns it to the LeaseScavengeTime field.
func (o *Range) SetLeaseScavengeTime(v string) {
	o.LeaseScavengeTime = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Range) GetLogicFilterRules() []RangeLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []RangeLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetLogicFilterRulesOk() ([]RangeLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Range) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []RangeLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Range) SetLogicFilterRules(v []RangeLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *Range) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *Range) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *Range) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *Range) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *Range) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *Range) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMacFilterRules returns the MacFilterRules field value if set, zero value otherwise.
func (o *Range) GetMacFilterRules() []RangeMacFilterRules {
	if o == nil || IsNil(o.MacFilterRules) {
		var ret []RangeMacFilterRules
		return ret
	}
	return o.MacFilterRules
}

// GetMacFilterRulesOk returns a tuple with the MacFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetMacFilterRulesOk() ([]RangeMacFilterRules, bool) {
	if o == nil || IsNil(o.MacFilterRules) {
		return nil, false
	}
	return o.MacFilterRules, true
}

// HasMacFilterRules returns a boolean if a field has been set.
func (o *Range) HasMacFilterRules() bool {
	if o != nil && !IsNil(o.MacFilterRules) {
		return true
	}

	return false
}

// SetMacFilterRules gets a reference to the given []RangeMacFilterRules and assigns it to the MacFilterRules field.
func (o *Range) SetMacFilterRules(v []RangeMacFilterRules) {
	o.MacFilterRules = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Range) GetMember() RangeMember {
	if o == nil || IsNil(o.Member) {
		var ret RangeMember
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetMemberOk() (*RangeMember, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Range) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given RangeMember and assigns it to the Member field.
func (o *Range) SetMember(v RangeMember) {
	o.Member = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Range) GetMsAdUserData() RangeMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret RangeMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetMsAdUserDataOk() (*RangeMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Range) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given RangeMsAdUserData and assigns it to the MsAdUserData field.
func (o *Range) SetMsAdUserData(v RangeMsAdUserData) {
	o.MsAdUserData = &v
}

// GetMsOptions returns the MsOptions field value if set, zero value otherwise.
func (o *Range) GetMsOptions() []RangeMsOptions {
	if o == nil || IsNil(o.MsOptions) {
		var ret []RangeMsOptions
		return ret
	}
	return o.MsOptions
}

// GetMsOptionsOk returns a tuple with the MsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetMsOptionsOk() ([]RangeMsOptions, bool) {
	if o == nil || IsNil(o.MsOptions) {
		return nil, false
	}
	return o.MsOptions, true
}

// HasMsOptions returns a boolean if a field has been set.
func (o *Range) HasMsOptions() bool {
	if o != nil && !IsNil(o.MsOptions) {
		return true
	}

	return false
}

// SetMsOptions gets a reference to the given []RangeMsOptions and assigns it to the MsOptions field.
func (o *Range) SetMsOptions(v []RangeMsOptions) {
	o.MsOptions = v
}

// GetMsServer returns the MsServer field value if set, zero value otherwise.
func (o *Range) GetMsServer() RangeMsServer {
	if o == nil || IsNil(o.MsServer) {
		var ret RangeMsServer
		return ret
	}
	return *o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetMsServerOk() (*RangeMsServer, bool) {
	if o == nil || IsNil(o.MsServer) {
		return nil, false
	}
	return o.MsServer, true
}

// HasMsServer returns a boolean if a field has been set.
func (o *Range) HasMsServer() bool {
	if o != nil && !IsNil(o.MsServer) {
		return true
	}

	return false
}

// SetMsServer gets a reference to the given RangeMsServer and assigns it to the MsServer field.
func (o *Range) SetMsServer(v RangeMsServer) {
	o.MsServer = &v
}

// GetNacFilterRules returns the NacFilterRules field value if set, zero value otherwise.
func (o *Range) GetNacFilterRules() []RangeNacFilterRules {
	if o == nil || IsNil(o.NacFilterRules) {
		var ret []RangeNacFilterRules
		return ret
	}
	return o.NacFilterRules
}

// GetNacFilterRulesOk returns a tuple with the NacFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNacFilterRulesOk() ([]RangeNacFilterRules, bool) {
	if o == nil || IsNil(o.NacFilterRules) {
		return nil, false
	}
	return o.NacFilterRules, true
}

// HasNacFilterRules returns a boolean if a field has been set.
func (o *Range) HasNacFilterRules() bool {
	if o != nil && !IsNil(o.NacFilterRules) {
		return true
	}

	return false
}

// SetNacFilterRules gets a reference to the given []RangeNacFilterRules and assigns it to the NacFilterRules field.
func (o *Range) SetNacFilterRules(v []RangeNacFilterRules) {
	o.NacFilterRules = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Range) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Range) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Range) SetName(v string) {
	o.Name = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Range) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Range) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Range) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Range) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Range) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Range) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextAvailableIp returns the NextAvailableIp field value if set, zero value otherwise.
func (o *Range) GetNextAvailableIp() map[string]interface{} {
	if o == nil || IsNil(o.NextAvailableIp) {
		var ret map[string]interface{}
		return ret
	}
	return o.NextAvailableIp
}

// GetNextAvailableIpOk returns a tuple with the NextAvailableIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNextAvailableIpOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NextAvailableIp) {
		return map[string]interface{}{}, false
	}
	return o.NextAvailableIp, true
}

// HasNextAvailableIp returns a boolean if a field has been set.
func (o *Range) HasNextAvailableIp() bool {
	if o != nil && !IsNil(o.NextAvailableIp) {
		return true
	}

	return false
}

// SetNextAvailableIp gets a reference to the given map[string]interface{} and assigns it to the NextAvailableIp field.
func (o *Range) SetNextAvailableIp(v map[string]interface{}) {
	o.NextAvailableIp = v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Range) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Range) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Range) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptionFilterRules returns the OptionFilterRules field value if set, zero value otherwise.
func (o *Range) GetOptionFilterRules() []RangeOptionFilterRules {
	if o == nil || IsNil(o.OptionFilterRules) {
		var ret []RangeOptionFilterRules
		return ret
	}
	return o.OptionFilterRules
}

// GetOptionFilterRulesOk returns a tuple with the OptionFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetOptionFilterRulesOk() ([]RangeOptionFilterRules, bool) {
	if o == nil || IsNil(o.OptionFilterRules) {
		return nil, false
	}
	return o.OptionFilterRules, true
}

// HasOptionFilterRules returns a boolean if a field has been set.
func (o *Range) HasOptionFilterRules() bool {
	if o != nil && !IsNil(o.OptionFilterRules) {
		return true
	}

	return false
}

// SetOptionFilterRules gets a reference to the given []RangeOptionFilterRules and assigns it to the OptionFilterRules field.
func (o *Range) SetOptionFilterRules(v []RangeOptionFilterRules) {
	o.OptionFilterRules = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Range) GetOptions() []RangeOptions {
	if o == nil || IsNil(o.Options) {
		var ret []RangeOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetOptionsOk() ([]RangeOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Range) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []RangeOptions and assigns it to the Options field.
func (o *Range) SetOptions(v []RangeOptions) {
	o.Options = v
}

// GetPortControlBlackoutSetting returns the PortControlBlackoutSetting field value if set, zero value otherwise.
func (o *Range) GetPortControlBlackoutSetting() RangePortControlBlackoutSetting {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		var ret RangePortControlBlackoutSetting
		return ret
	}
	return *o.PortControlBlackoutSetting
}

// GetPortControlBlackoutSettingOk returns a tuple with the PortControlBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetPortControlBlackoutSettingOk() (*RangePortControlBlackoutSetting, bool) {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		return nil, false
	}
	return o.PortControlBlackoutSetting, true
}

// HasPortControlBlackoutSetting returns a boolean if a field has been set.
func (o *Range) HasPortControlBlackoutSetting() bool {
	if o != nil && !IsNil(o.PortControlBlackoutSetting) {
		return true
	}

	return false
}

// SetPortControlBlackoutSetting gets a reference to the given RangePortControlBlackoutSetting and assigns it to the PortControlBlackoutSetting field.
func (o *Range) SetPortControlBlackoutSetting(v RangePortControlBlackoutSetting) {
	o.PortControlBlackoutSetting = &v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Range) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Range) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Range) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Range) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Range) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Range) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRelayAgentFilterRules returns the RelayAgentFilterRules field value if set, zero value otherwise.
func (o *Range) GetRelayAgentFilterRules() []RangeRelayAgentFilterRules {
	if o == nil || IsNil(o.RelayAgentFilterRules) {
		var ret []RangeRelayAgentFilterRules
		return ret
	}
	return o.RelayAgentFilterRules
}

// GetRelayAgentFilterRulesOk returns a tuple with the RelayAgentFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetRelayAgentFilterRulesOk() ([]RangeRelayAgentFilterRules, bool) {
	if o == nil || IsNil(o.RelayAgentFilterRules) {
		return nil, false
	}
	return o.RelayAgentFilterRules, true
}

// HasRelayAgentFilterRules returns a boolean if a field has been set.
func (o *Range) HasRelayAgentFilterRules() bool {
	if o != nil && !IsNil(o.RelayAgentFilterRules) {
		return true
	}

	return false
}

// SetRelayAgentFilterRules gets a reference to the given []RangeRelayAgentFilterRules and assigns it to the RelayAgentFilterRules field.
func (o *Range) SetRelayAgentFilterRules(v []RangeRelayAgentFilterRules) {
	o.RelayAgentFilterRules = v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Range) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Range) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Range) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetSamePortControlDiscoveryBlackout returns the SamePortControlDiscoveryBlackout field value if set, zero value otherwise.
func (o *Range) GetSamePortControlDiscoveryBlackout() bool {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		var ret bool
		return ret
	}
	return *o.SamePortControlDiscoveryBlackout
}

// GetSamePortControlDiscoveryBlackoutOk returns a tuple with the SamePortControlDiscoveryBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetSamePortControlDiscoveryBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		return nil, false
	}
	return o.SamePortControlDiscoveryBlackout, true
}

// HasSamePortControlDiscoveryBlackout returns a boolean if a field has been set.
func (o *Range) HasSamePortControlDiscoveryBlackout() bool {
	if o != nil && !IsNil(o.SamePortControlDiscoveryBlackout) {
		return true
	}

	return false
}

// SetSamePortControlDiscoveryBlackout gets a reference to the given bool and assigns it to the SamePortControlDiscoveryBlackout field.
func (o *Range) SetSamePortControlDiscoveryBlackout(v bool) {
	o.SamePortControlDiscoveryBlackout = &v
}

// GetServerAssociationType returns the ServerAssociationType field value if set, zero value otherwise.
func (o *Range) GetServerAssociationType() string {
	if o == nil || IsNil(o.ServerAssociationType) {
		var ret string
		return ret
	}
	return *o.ServerAssociationType
}

// GetServerAssociationTypeOk returns a tuple with the ServerAssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetServerAssociationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAssociationType) {
		return nil, false
	}
	return o.ServerAssociationType, true
}

// HasServerAssociationType returns a boolean if a field has been set.
func (o *Range) HasServerAssociationType() bool {
	if o != nil && !IsNil(o.ServerAssociationType) {
		return true
	}

	return false
}

// SetServerAssociationType gets a reference to the given string and assigns it to the ServerAssociationType field.
func (o *Range) SetServerAssociationType(v string) {
	o.ServerAssociationType = &v
}

// GetSplitMember returns the SplitMember field value if set, zero value otherwise.
func (o *Range) GetSplitMember() RangeSplitMember {
	if o == nil || IsNil(o.SplitMember) {
		var ret RangeSplitMember
		return ret
	}
	return *o.SplitMember
}

// GetSplitMemberOk returns a tuple with the SplitMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetSplitMemberOk() (*RangeSplitMember, bool) {
	if o == nil || IsNil(o.SplitMember) {
		return nil, false
	}
	return o.SplitMember, true
}

// HasSplitMember returns a boolean if a field has been set.
func (o *Range) HasSplitMember() bool {
	if o != nil && !IsNil(o.SplitMember) {
		return true
	}

	return false
}

// SetSplitMember gets a reference to the given RangeSplitMember and assigns it to the SplitMember field.
func (o *Range) SetSplitMember(v RangeSplitMember) {
	o.SplitMember = &v
}

// GetSplitScopeExclusionPercent returns the SplitScopeExclusionPercent field value if set, zero value otherwise.
func (o *Range) GetSplitScopeExclusionPercent() int64 {
	if o == nil || IsNil(o.SplitScopeExclusionPercent) {
		var ret int64
		return ret
	}
	return *o.SplitScopeExclusionPercent
}

// GetSplitScopeExclusionPercentOk returns a tuple with the SplitScopeExclusionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetSplitScopeExclusionPercentOk() (*int64, bool) {
	if o == nil || IsNil(o.SplitScopeExclusionPercent) {
		return nil, false
	}
	return o.SplitScopeExclusionPercent, true
}

// HasSplitScopeExclusionPercent returns a boolean if a field has been set.
func (o *Range) HasSplitScopeExclusionPercent() bool {
	if o != nil && !IsNil(o.SplitScopeExclusionPercent) {
		return true
	}

	return false
}

// SetSplitScopeExclusionPercent gets a reference to the given int64 and assigns it to the SplitScopeExclusionPercent field.
func (o *Range) SetSplitScopeExclusionPercent(v int64) {
	o.SplitScopeExclusionPercent = &v
}

// GetStartAddr returns the StartAddr field value if set, zero value otherwise.
func (o *Range) GetStartAddr() string {
	if o == nil || IsNil(o.StartAddr) {
		var ret string
		return ret
	}
	return *o.StartAddr
}

// GetStartAddrOk returns a tuple with the StartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetStartAddrOk() (*string, bool) {
	if o == nil || IsNil(o.StartAddr) {
		return nil, false
	}
	return o.StartAddr, true
}

// HasStartAddr returns a boolean if a field has been set.
func (o *Range) HasStartAddr() bool {
	if o != nil && !IsNil(o.StartAddr) {
		return true
	}

	return false
}

// SetStartAddr gets a reference to the given string and assigns it to the StartAddr field.
func (o *Range) SetStartAddr(v string) {
	o.StartAddr = &v
}

// GetStaticHosts returns the StaticHosts field value if set, zero value otherwise.
func (o *Range) GetStaticHosts() int64 {
	if o == nil || IsNil(o.StaticHosts) {
		var ret int64
		return ret
	}
	return *o.StaticHosts
}

// GetStaticHostsOk returns a tuple with the StaticHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetStaticHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.StaticHosts) {
		return nil, false
	}
	return o.StaticHosts, true
}

// HasStaticHosts returns a boolean if a field has been set.
func (o *Range) HasStaticHosts() bool {
	if o != nil && !IsNil(o.StaticHosts) {
		return true
	}

	return false
}

// SetStaticHosts gets a reference to the given int64 and assigns it to the StaticHosts field.
func (o *Range) SetStaticHosts(v int64) {
	o.StaticHosts = &v
}

// GetSubscribeSettings returns the SubscribeSettings field value if set, zero value otherwise.
func (o *Range) GetSubscribeSettings() RangeSubscribeSettings {
	if o == nil || IsNil(o.SubscribeSettings) {
		var ret RangeSubscribeSettings
		return ret
	}
	return *o.SubscribeSettings
}

// GetSubscribeSettingsOk returns a tuple with the SubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetSubscribeSettingsOk() (*RangeSubscribeSettings, bool) {
	if o == nil || IsNil(o.SubscribeSettings) {
		return nil, false
	}
	return o.SubscribeSettings, true
}

// HasSubscribeSettings returns a boolean if a field has been set.
func (o *Range) HasSubscribeSettings() bool {
	if o != nil && !IsNil(o.SubscribeSettings) {
		return true
	}

	return false
}

// SetSubscribeSettings gets a reference to the given RangeSubscribeSettings and assigns it to the SubscribeSettings field.
func (o *Range) SetSubscribeSettings(v RangeSubscribeSettings) {
	o.SubscribeSettings = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Range) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Range) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Range) SetTemplate(v string) {
	o.Template = &v
}

// GetTotalHosts returns the TotalHosts field value if set, zero value otherwise.
func (o *Range) GetTotalHosts() int64 {
	if o == nil || IsNil(o.TotalHosts) {
		var ret int64
		return ret
	}
	return *o.TotalHosts
}

// GetTotalHostsOk returns a tuple with the TotalHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetTotalHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHosts) {
		return nil, false
	}
	return o.TotalHosts, true
}

// HasTotalHosts returns a boolean if a field has been set.
func (o *Range) HasTotalHosts() bool {
	if o != nil && !IsNil(o.TotalHosts) {
		return true
	}

	return false
}

// SetTotalHosts gets a reference to the given int64 and assigns it to the TotalHosts field.
func (o *Range) SetTotalHosts(v int64) {
	o.TotalHosts = &v
}

// GetUnknownClients returns the UnknownClients field value if set, zero value otherwise.
func (o *Range) GetUnknownClients() string {
	if o == nil || IsNil(o.UnknownClients) {
		var ret string
		return ret
	}
	return *o.UnknownClients
}

// GetUnknownClientsOk returns a tuple with the UnknownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUnknownClientsOk() (*string, bool) {
	if o == nil || IsNil(o.UnknownClients) {
		return nil, false
	}
	return o.UnknownClients, true
}

// HasUnknownClients returns a boolean if a field has been set.
func (o *Range) HasUnknownClients() bool {
	if o != nil && !IsNil(o.UnknownClients) {
		return true
	}

	return false
}

// SetUnknownClients gets a reference to the given string and assigns it to the UnknownClients field.
func (o *Range) SetUnknownClients(v string) {
	o.UnknownClients = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Range) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Range) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Range) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseBlackoutSetting returns the UseBlackoutSetting field value if set, zero value otherwise.
func (o *Range) GetUseBlackoutSetting() bool {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseBlackoutSetting
}

// GetUseBlackoutSettingOk returns a tuple with the UseBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseBlackoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		return nil, false
	}
	return o.UseBlackoutSetting, true
}

// HasUseBlackoutSetting returns a boolean if a field has been set.
func (o *Range) HasUseBlackoutSetting() bool {
	if o != nil && !IsNil(o.UseBlackoutSetting) {
		return true
	}

	return false
}

// SetUseBlackoutSetting gets a reference to the given bool and assigns it to the UseBlackoutSetting field.
func (o *Range) SetUseBlackoutSetting(v bool) {
	o.UseBlackoutSetting = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Range) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Range) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Range) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Range) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Range) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Range) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Range) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Range) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Range) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Range) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Range) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Range) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Range) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Range) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Range) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseDiscoveryBasicPollingSettings returns the UseDiscoveryBasicPollingSettings field value if set, zero value otherwise.
func (o *Range) GetUseDiscoveryBasicPollingSettings() bool {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		var ret bool
		return ret
	}
	return *o.UseDiscoveryBasicPollingSettings
}

// GetUseDiscoveryBasicPollingSettingsOk returns a tuple with the UseDiscoveryBasicPollingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseDiscoveryBasicPollingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		return nil, false
	}
	return o.UseDiscoveryBasicPollingSettings, true
}

// HasUseDiscoveryBasicPollingSettings returns a boolean if a field has been set.
func (o *Range) HasUseDiscoveryBasicPollingSettings() bool {
	if o != nil && !IsNil(o.UseDiscoveryBasicPollingSettings) {
		return true
	}

	return false
}

// SetUseDiscoveryBasicPollingSettings gets a reference to the given bool and assigns it to the UseDiscoveryBasicPollingSettings field.
func (o *Range) SetUseDiscoveryBasicPollingSettings(v bool) {
	o.UseDiscoveryBasicPollingSettings = &v
}

// GetUseEmailList returns the UseEmailList field value if set, zero value otherwise.
func (o *Range) GetUseEmailList() bool {
	if o == nil || IsNil(o.UseEmailList) {
		var ret bool
		return ret
	}
	return *o.UseEmailList
}

// GetUseEmailListOk returns a tuple with the UseEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseEmailListOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailList) {
		return nil, false
	}
	return o.UseEmailList, true
}

// HasUseEmailList returns a boolean if a field has been set.
func (o *Range) HasUseEmailList() bool {
	if o != nil && !IsNil(o.UseEmailList) {
		return true
	}

	return false
}

// SetUseEmailList gets a reference to the given bool and assigns it to the UseEmailList field.
func (o *Range) SetUseEmailList(v bool) {
	o.UseEmailList = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Range) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Range) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Range) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDhcpThresholds returns the UseEnableDhcpThresholds field value if set, zero value otherwise.
func (o *Range) GetUseEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.UseEnableDhcpThresholds
}

// GetUseEnableDhcpThresholdsOk returns a tuple with the UseEnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		return nil, false
	}
	return o.UseEnableDhcpThresholds, true
}

// HasUseEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Range) HasUseEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.UseEnableDhcpThresholds) {
		return true
	}

	return false
}

// SetUseEnableDhcpThresholds gets a reference to the given bool and assigns it to the UseEnableDhcpThresholds field.
func (o *Range) SetUseEnableDhcpThresholds(v bool) {
	o.UseEnableDhcpThresholds = &v
}

// GetUseEnableDiscovery returns the UseEnableDiscovery field value if set, zero value otherwise.
func (o *Range) GetUseEnableDiscovery() bool {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.UseEnableDiscovery
}

// GetUseEnableDiscoveryOk returns a tuple with the UseEnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		return nil, false
	}
	return o.UseEnableDiscovery, true
}

// HasUseEnableDiscovery returns a boolean if a field has been set.
func (o *Range) HasUseEnableDiscovery() bool {
	if o != nil && !IsNil(o.UseEnableDiscovery) {
		return true
	}

	return false
}

// SetUseEnableDiscovery gets a reference to the given bool and assigns it to the UseEnableDiscovery field.
func (o *Range) SetUseEnableDiscovery(v bool) {
	o.UseEnableDiscovery = &v
}

// GetUseEnableIfmapPublishing returns the UseEnableIfmapPublishing field value if set, zero value otherwise.
func (o *Range) GetUseEnableIfmapPublishing() bool {
	if o == nil || IsNil(o.UseEnableIfmapPublishing) {
		var ret bool
		return ret
	}
	return *o.UseEnableIfmapPublishing
}

// GetUseEnableIfmapPublishingOk returns a tuple with the UseEnableIfmapPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseEnableIfmapPublishingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableIfmapPublishing) {
		return nil, false
	}
	return o.UseEnableIfmapPublishing, true
}

// HasUseEnableIfmapPublishing returns a boolean if a field has been set.
func (o *Range) HasUseEnableIfmapPublishing() bool {
	if o != nil && !IsNil(o.UseEnableIfmapPublishing) {
		return true
	}

	return false
}

// SetUseEnableIfmapPublishing gets a reference to the given bool and assigns it to the UseEnableIfmapPublishing field.
func (o *Range) SetUseEnableIfmapPublishing(v bool) {
	o.UseEnableIfmapPublishing = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Range) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Range) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Range) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIgnoreId returns the UseIgnoreId field value if set, zero value otherwise.
func (o *Range) GetUseIgnoreId() bool {
	if o == nil || IsNil(o.UseIgnoreId) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreId
}

// GetUseIgnoreIdOk returns a tuple with the UseIgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseIgnoreIdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreId) {
		return nil, false
	}
	return o.UseIgnoreId, true
}

// HasUseIgnoreId returns a boolean if a field has been set.
func (o *Range) HasUseIgnoreId() bool {
	if o != nil && !IsNil(o.UseIgnoreId) {
		return true
	}

	return false
}

// SetUseIgnoreId gets a reference to the given bool and assigns it to the UseIgnoreId field.
func (o *Range) SetUseIgnoreId(v bool) {
	o.UseIgnoreId = &v
}

// GetUseKnownClients returns the UseKnownClients field value if set, zero value otherwise.
func (o *Range) GetUseKnownClients() bool {
	if o == nil || IsNil(o.UseKnownClients) {
		var ret bool
		return ret
	}
	return *o.UseKnownClients
}

// GetUseKnownClientsOk returns a tuple with the UseKnownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseKnownClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseKnownClients) {
		return nil, false
	}
	return o.UseKnownClients, true
}

// HasUseKnownClients returns a boolean if a field has been set.
func (o *Range) HasUseKnownClients() bool {
	if o != nil && !IsNil(o.UseKnownClients) {
		return true
	}

	return false
}

// SetUseKnownClients gets a reference to the given bool and assigns it to the UseKnownClients field.
func (o *Range) SetUseKnownClients(v bool) {
	o.UseKnownClients = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *Range) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *Range) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *Range) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Range) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Range) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Range) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMsOptions returns the UseMsOptions field value if set, zero value otherwise.
func (o *Range) GetUseMsOptions() bool {
	if o == nil || IsNil(o.UseMsOptions) {
		var ret bool
		return ret
	}
	return *o.UseMsOptions
}

// GetUseMsOptionsOk returns a tuple with the UseMsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseMsOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMsOptions) {
		return nil, false
	}
	return o.UseMsOptions, true
}

// HasUseMsOptions returns a boolean if a field has been set.
func (o *Range) HasUseMsOptions() bool {
	if o != nil && !IsNil(o.UseMsOptions) {
		return true
	}

	return false
}

// SetUseMsOptions gets a reference to the given bool and assigns it to the UseMsOptions field.
func (o *Range) SetUseMsOptions(v bool) {
	o.UseMsOptions = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Range) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Range) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Range) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Range) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Range) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Range) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Range) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Range) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Range) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Range) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Range) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Range) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseSubscribeSettings returns the UseSubscribeSettings field value if set, zero value otherwise.
func (o *Range) GetUseSubscribeSettings() bool {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		var ret bool
		return ret
	}
	return *o.UseSubscribeSettings
}

// GetUseSubscribeSettingsOk returns a tuple with the UseSubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseSubscribeSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		return nil, false
	}
	return o.UseSubscribeSettings, true
}

// HasUseSubscribeSettings returns a boolean if a field has been set.
func (o *Range) HasUseSubscribeSettings() bool {
	if o != nil && !IsNil(o.UseSubscribeSettings) {
		return true
	}

	return false
}

// SetUseSubscribeSettings gets a reference to the given bool and assigns it to the UseSubscribeSettings field.
func (o *Range) SetUseSubscribeSettings(v bool) {
	o.UseSubscribeSettings = &v
}

// GetUseUnknownClients returns the UseUnknownClients field value if set, zero value otherwise.
func (o *Range) GetUseUnknownClients() bool {
	if o == nil || IsNil(o.UseUnknownClients) {
		var ret bool
		return ret
	}
	return *o.UseUnknownClients
}

// GetUseUnknownClientsOk returns a tuple with the UseUnknownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseUnknownClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUnknownClients) {
		return nil, false
	}
	return o.UseUnknownClients, true
}

// HasUseUnknownClients returns a boolean if a field has been set.
func (o *Range) HasUseUnknownClients() bool {
	if o != nil && !IsNil(o.UseUnknownClients) {
		return true
	}

	return false
}

// SetUseUnknownClients gets a reference to the given bool and assigns it to the UseUnknownClients field.
func (o *Range) SetUseUnknownClients(v bool) {
	o.UseUnknownClients = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Range) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Range) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Range) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Range) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

func (o Range) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Range) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AlwaysUpdateDns) {
		toSerialize["always_update_dns"] = o.AlwaysUpdateDns
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DenyAllClients) {
		toSerialize["deny_all_clients"] = o.DenyAllClients
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DhcpUtilizationStatus) {
		toSerialize["dhcp_utilization_status"] = o.DhcpUtilizationStatus
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveryBasicPollSettings) {
		toSerialize["discovery_basic_poll_settings"] = o.DiscoveryBasicPollSettings
	}
	if !IsNil(o.DiscoveryBlackoutSetting) {
		toSerialize["discovery_blackout_setting"] = o.DiscoveryBlackoutSetting
	}
	if !IsNil(o.DiscoveryMember) {
		toSerialize["discovery_member"] = o.DiscoveryMember
	}
	if !IsNil(o.DynamicHosts) {
		toSerialize["dynamic_hosts"] = o.DynamicHosts
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableDiscovery) {
		toSerialize["enable_discovery"] = o.EnableDiscovery
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnableIfmapPublishing) {
		toSerialize["enable_ifmap_publishing"] = o.EnableIfmapPublishing
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.EndAddr) {
		toSerialize["end_addr"] = o.EndAddr
	}
	if !IsNil(o.EndpointSources) {
		toSerialize["endpoint_sources"] = o.EndpointSources
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FailoverAssociation) {
		toSerialize["failover_association"] = o.FailoverAssociation
	}
	if !IsNil(o.FingerprintFilterRules) {
		toSerialize["fingerprint_filter_rules"] = o.FingerprintFilterRules
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IgnoreId) {
		toSerialize["ignore_id"] = o.IgnoreId
	}
	if !IsNil(o.IgnoreMacAddresses) {
		toSerialize["ignore_mac_addresses"] = o.IgnoreMacAddresses
	}
	if !IsNil(o.IsSplitScope) {
		toSerialize["is_split_scope"] = o.IsSplitScope
	}
	if !IsNil(o.KnownClients) {
		toSerialize["known_clients"] = o.KnownClients
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.MacFilterRules) {
		toSerialize["mac_filter_rules"] = o.MacFilterRules
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.MsOptions) {
		toSerialize["ms_options"] = o.MsOptions
	}
	if !IsNil(o.MsServer) {
		toSerialize["ms_server"] = o.MsServer
	}
	if !IsNil(o.NacFilterRules) {
		toSerialize["nac_filter_rules"] = o.NacFilterRules
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NextAvailableIp) {
		toSerialize["next_available_ip"] = o.NextAvailableIp
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.OptionFilterRules) {
		toSerialize["option_filter_rules"] = o.OptionFilterRules
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PortControlBlackoutSetting) {
		toSerialize["port_control_blackout_setting"] = o.PortControlBlackoutSetting
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RelayAgentFilterRules) {
		toSerialize["relay_agent_filter_rules"] = o.RelayAgentFilterRules
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.SamePortControlDiscoveryBlackout) {
		toSerialize["same_port_control_discovery_blackout"] = o.SamePortControlDiscoveryBlackout
	}
	if !IsNil(o.ServerAssociationType) {
		toSerialize["server_association_type"] = o.ServerAssociationType
	}
	if !IsNil(o.SplitMember) {
		toSerialize["split_member"] = o.SplitMember
	}
	if !IsNil(o.SplitScopeExclusionPercent) {
		toSerialize["split_scope_exclusion_percent"] = o.SplitScopeExclusionPercent
	}
	if !IsNil(o.StartAddr) {
		toSerialize["start_addr"] = o.StartAddr
	}
	if !IsNil(o.StaticHosts) {
		toSerialize["static_hosts"] = o.StaticHosts
	}
	if !IsNil(o.SubscribeSettings) {
		toSerialize["subscribe_settings"] = o.SubscribeSettings
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.TotalHosts) {
		toSerialize["total_hosts"] = o.TotalHosts
	}
	if !IsNil(o.UnknownClients) {
		toSerialize["unknown_clients"] = o.UnknownClients
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseBlackoutSetting) {
		toSerialize["use_blackout_setting"] = o.UseBlackoutSetting
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseDiscoveryBasicPollingSettings) {
		toSerialize["use_discovery_basic_polling_settings"] = o.UseDiscoveryBasicPollingSettings
	}
	if !IsNil(o.UseEmailList) {
		toSerialize["use_email_list"] = o.UseEmailList
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDhcpThresholds) {
		toSerialize["use_enable_dhcp_thresholds"] = o.UseEnableDhcpThresholds
	}
	if !IsNil(o.UseEnableDiscovery) {
		toSerialize["use_enable_discovery"] = o.UseEnableDiscovery
	}
	if !IsNil(o.UseEnableIfmapPublishing) {
		toSerialize["use_enable_ifmap_publishing"] = o.UseEnableIfmapPublishing
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIgnoreId) {
		toSerialize["use_ignore_id"] = o.UseIgnoreId
	}
	if !IsNil(o.UseKnownClients) {
		toSerialize["use_known_clients"] = o.UseKnownClients
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMsOptions) {
		toSerialize["use_ms_options"] = o.UseMsOptions
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseSubscribeSettings) {
		toSerialize["use_subscribe_settings"] = o.UseSubscribeSettings
	}
	if !IsNil(o.UseUnknownClients) {
		toSerialize["use_unknown_clients"] = o.UseUnknownClients
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	return toSerialize, nil
}

type NullableRange struct {
	value *Range
	isSet bool
}

func (v NullableRange) Get() *Range {
	return v.value
}

func (v *NullableRange) Set(val *Range) {
	v.value = val
	v.isSet = true
}

func (v NullableRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRange(val *Range) *NullableRange {
	return &NullableRange{value: val, isSet: true}
}

func (v NullableRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
