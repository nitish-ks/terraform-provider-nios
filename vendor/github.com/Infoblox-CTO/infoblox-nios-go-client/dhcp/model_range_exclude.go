/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangeExclude type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeExclude{}

// RangeExclude struct for RangeExclude
type RangeExclude struct {
	// The IPv4 Address starting address of the exclusion range.
	StartAddress *string `json:"start_address,omitempty"`
	// The IPv4 Address ending address of the exclusion range.
	EndAddress *string `json:"end_address,omitempty"`
	// Comment for the exclusion range; maximum 256 characters.
	Comment              *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangeExclude RangeExclude

// NewRangeExclude instantiates a new RangeExclude object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeExclude() *RangeExclude {
	this := RangeExclude{}
	return &this
}

// NewRangeExcludeWithDefaults instantiates a new RangeExclude object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeExcludeWithDefaults() *RangeExclude {
	this := RangeExclude{}
	return &this
}

// GetStartAddress returns the StartAddress field value if set, zero value otherwise.
func (o *RangeExclude) GetStartAddress() string {
	if o == nil || IsNil(o.StartAddress) {
		var ret string
		return ret
	}
	return *o.StartAddress
}

// GetStartAddressOk returns a tuple with the StartAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeExclude) GetStartAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StartAddress) {
		return nil, false
	}
	return o.StartAddress, true
}

// HasStartAddress returns a boolean if a field has been set.
func (o *RangeExclude) HasStartAddress() bool {
	if o != nil && !IsNil(o.StartAddress) {
		return true
	}

	return false
}

// SetStartAddress gets a reference to the given string and assigns it to the StartAddress field.
func (o *RangeExclude) SetStartAddress(v string) {
	o.StartAddress = &v
}

// GetEndAddress returns the EndAddress field value if set, zero value otherwise.
func (o *RangeExclude) GetEndAddress() string {
	if o == nil || IsNil(o.EndAddress) {
		var ret string
		return ret
	}
	return *o.EndAddress
}

// GetEndAddressOk returns a tuple with the EndAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeExclude) GetEndAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EndAddress) {
		return nil, false
	}
	return o.EndAddress, true
}

// HasEndAddress returns a boolean if a field has been set.
func (o *RangeExclude) HasEndAddress() bool {
	if o != nil && !IsNil(o.EndAddress) {
		return true
	}

	return false
}

// SetEndAddress gets a reference to the given string and assigns it to the EndAddress field.
func (o *RangeExclude) SetEndAddress(v string) {
	o.EndAddress = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RangeExclude) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeExclude) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RangeExclude) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RangeExclude) SetComment(v string) {
	o.Comment = &v
}

func (o RangeExclude) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeExclude) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartAddress) {
		toSerialize["start_address"] = o.StartAddress
	}
	if !IsNil(o.EndAddress) {
		toSerialize["end_address"] = o.EndAddress
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangeExclude) UnmarshalJSON(data []byte) (err error) {
	varRangeExclude := _RangeExclude{}

	err = json.Unmarshal(data, &varRangeExclude)

	if err != nil {
		return err
	}

	*o = RangeExclude(varRangeExclude)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start_address")
		delete(additionalProperties, "end_address")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangeExclude struct {
	value *RangeExclude
	isSet bool
}

func (v NullableRangeExclude) Get() *RangeExclude {
	return v.value
}

func (v *NullableRangeExclude) Set(val *RangeExclude) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeExclude) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeExclude) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeExclude(val *RangeExclude) *NullableRangeExclude {
	return &NullableRangeExclude{value: val, isSet: true}
}

func (v NullableRangeExclude) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeExclude) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
