/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangeMacFilterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeMacFilterRules{}

// RangeMacFilterRules struct for RangeMacFilterRules
type RangeMacFilterRules struct {
	// The name of the DHCP filter.
	Filter *string `json:"filter,omitempty"`
	// The permission to be applied.
	Permission           *string `json:"permission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangeMacFilterRules RangeMacFilterRules

// NewRangeMacFilterRules instantiates a new RangeMacFilterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeMacFilterRules() *RangeMacFilterRules {
	this := RangeMacFilterRules{}
	return &this
}

// NewRangeMacFilterRulesWithDefaults instantiates a new RangeMacFilterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeMacFilterRulesWithDefaults() *RangeMacFilterRules {
	this := RangeMacFilterRules{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *RangeMacFilterRules) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeMacFilterRules) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *RangeMacFilterRules) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *RangeMacFilterRules) SetFilter(v string) {
	o.Filter = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RangeMacFilterRules) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeMacFilterRules) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RangeMacFilterRules) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RangeMacFilterRules) SetPermission(v string) {
	o.Permission = &v
}

func (o RangeMacFilterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeMacFilterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangeMacFilterRules) UnmarshalJSON(data []byte) (err error) {
	varRangeMacFilterRules := _RangeMacFilterRules{}

	err = json.Unmarshal(data, &varRangeMacFilterRules)

	if err != nil {
		return err
	}

	*o = RangeMacFilterRules(varRangeMacFilterRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangeMacFilterRules struct {
	value *RangeMacFilterRules
	isSet bool
}

func (v NullableRangeMacFilterRules) Get() *RangeMacFilterRules {
	return v.value
}

func (v *NullableRangeMacFilterRules) Set(val *RangeMacFilterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeMacFilterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeMacFilterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeMacFilterRules(val *RangeMacFilterRules) *NullableRangeMacFilterRules {
	return &NullableRangeMacFilterRules{value: val, isSet: true}
}

func (v NullableRangeMacFilterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeMacFilterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
