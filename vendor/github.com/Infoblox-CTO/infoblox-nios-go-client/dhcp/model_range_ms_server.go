/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangeMsServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeMsServer{}

// RangeMsServer struct for RangeMsServer
type RangeMsServer struct {
	// The IPv4 Address or FQDN of the Microsoft server.
	Ipv4addr             *string `json:"ipv4addr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangeMsServer RangeMsServer

// NewRangeMsServer instantiates a new RangeMsServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeMsServer() *RangeMsServer {
	this := RangeMsServer{}
	return &this
}

// NewRangeMsServerWithDefaults instantiates a new RangeMsServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeMsServerWithDefaults() *RangeMsServer {
	this := RangeMsServer{}
	return &this
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *RangeMsServer) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeMsServer) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *RangeMsServer) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *RangeMsServer) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

func (o RangeMsServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeMsServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangeMsServer) UnmarshalJSON(data []byte) (err error) {
	varRangeMsServer := _RangeMsServer{}

	err = json.Unmarshal(data, &varRangeMsServer)

	if err != nil {
		return err
	}

	*o = RangeMsServer(varRangeMsServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4addr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangeMsServer struct {
	value *RangeMsServer
	isSet bool
}

func (v NullableRangeMsServer) Get() *RangeMsServer {
	return v.value
}

func (v *NullableRangeMsServer) Set(val *RangeMsServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeMsServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeMsServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeMsServer(val *RangeMsServer) *NullableRangeMsServer {
	return &NullableRangeMsServer{value: val, isSet: true}
}

func (v NullableRangeMsServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeMsServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
