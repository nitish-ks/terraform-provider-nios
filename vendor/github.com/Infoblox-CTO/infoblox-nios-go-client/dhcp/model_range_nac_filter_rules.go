/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangeNacFilterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeNacFilterRules{}

// RangeNacFilterRules struct for RangeNacFilterRules
type RangeNacFilterRules struct {
	// The name of the DHCP filter.
	Filter *string `json:"filter,omitempty"`
	// The permission to be applied.
	Permission           *string `json:"permission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangeNacFilterRules RangeNacFilterRules

// NewRangeNacFilterRules instantiates a new RangeNacFilterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeNacFilterRules() *RangeNacFilterRules {
	this := RangeNacFilterRules{}
	return &this
}

// NewRangeNacFilterRulesWithDefaults instantiates a new RangeNacFilterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeNacFilterRulesWithDefaults() *RangeNacFilterRules {
	this := RangeNacFilterRules{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *RangeNacFilterRules) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeNacFilterRules) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *RangeNacFilterRules) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *RangeNacFilterRules) SetFilter(v string) {
	o.Filter = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RangeNacFilterRules) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeNacFilterRules) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RangeNacFilterRules) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RangeNacFilterRules) SetPermission(v string) {
	o.Permission = &v
}

func (o RangeNacFilterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeNacFilterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangeNacFilterRules) UnmarshalJSON(data []byte) (err error) {
	varRangeNacFilterRules := _RangeNacFilterRules{}

	err = json.Unmarshal(data, &varRangeNacFilterRules)

	if err != nil {
		return err
	}

	*o = RangeNacFilterRules(varRangeNacFilterRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangeNacFilterRules struct {
	value *RangeNacFilterRules
	isSet bool
}

func (v NullableRangeNacFilterRules) Get() *RangeNacFilterRules {
	return v.value
}

func (v *NullableRangeNacFilterRules) Set(val *RangeNacFilterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeNacFilterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeNacFilterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeNacFilterRules(val *RangeNacFilterRules) *NullableRangeNacFilterRules {
	return &NullableRangeNacFilterRules{value: val, isSet: true}
}

func (v NullableRangeNacFilterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeNacFilterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
