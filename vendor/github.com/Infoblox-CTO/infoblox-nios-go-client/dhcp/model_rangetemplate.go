/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Rangetemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rangetemplate{}

// Rangetemplate struct for Rangetemplate
type Rangetemplate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The bootfile name for the range. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the range. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// This flag controls whether this template can be used to create network objects in a cloud-computing deployment.
	CloudApiCompatible *bool `json:"cloud_api_compatible,omitempty"`
	// A descriptive comment of a range template object.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this range.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool                         `json:"ddns_generate_hostname,omitempty"`
	DelegatedMember      *RangetemplateDelegatedMember `json:"delegated_member,omitempty"`
	// If True, send NAK forcing the client to take the new address.
	DenyAllClients *bool `json:"deny_all_clients,omitempty"`
	// Determines if BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The e-mail lists to which the appliance sends DHCP threshold alarm e-mail messages.
	EmailList []string `json:"email_list,omitempty"`
	// Determines if the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if DHCP thresholds are enabled for the range.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines if DHCP threshold warnings are sent through email.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Determines if DHCP threshold warnings are sent through SNMP.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// These are ranges of IP addresses that the appliance does not use to assign to clients. You can use these exclusion addresses as static IP addresses. They contain the start and end addresses of the exclusion range, and optionally, information about this exclusion range.
	Exclude []RangetemplateExclude `json:"exclude,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of the failover association: the server in this failover association will serve the IPv4 range in case the main server is out of service. {rangetemplate:rangetemplate} must be set to 'FAILOVER' or 'FAILOVER_MS' if you want the failover association specified here to serve the range.
	FailoverAssociation *string `json:"failover_association,omitempty"`
	// This field contains the fingerprint filters for this DHCP range. The appliance uses matching rules in these filters to select the address range from which it assigns a lease.
	FingerprintFilterRules []RangetemplateFingerprintFilterRules `json:"fingerprint_filter_rules,omitempty"`
	// The percentage of DHCP range usage threshold above which range usage is not expected and may warrant your attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// The percentage of DHCP range usage below which the corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Permission for known clients. If set to 'Deny' known clients will be denied IP addresses. Known clients include roaming hosts and clients with fixed addresses or DHCP host entries. Unknown clients include clients that are not roaming hosts and clients that do not have fixed addresses or DHCP host entries.
	KnownClients *string `json:"known_clients,omitempty"`
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *int32 `json:"lease_scavenge_time,omitempty"`
	// This field contains the logic filters to be applied on this range. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []RangetemplateLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The percentage of DHCP range usage below which the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// The percentage of DHCP range usage threshold below which range usage is not expected and may warrant your attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// This field contains the MAC filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	MacFilterRules []RangetemplateMacFilterRules `json:"mac_filter_rules,omitempty"`
	Member         *RangetemplateMember          `json:"member,omitempty"`
	// The Microsoft DHCP options for this range.
	MsOptions []RangetemplateMsOptions `json:"ms_options,omitempty"`
	MsServer  *RangetemplateMsServer   `json:"ms_server,omitempty"`
	// This field contains the NAC filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	NacFilterRules []RangetemplateNacFilterRules `json:"nac_filter_rules,omitempty"`
	// The name of a range template object.
	Name *string `json:"name,omitempty"`
	// The name in FQDN and/or IPv4 Address format of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// The number of addresses for this range.
	NumberOfAddresses *int64 `json:"number_of_addresses,omitempty"`
	// The start address offset for this range.
	Offset *int64 `json:"offset,omitempty"`
	// This field contains the Option filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	OptionFilterRules []RangetemplateOptionFilterRules `json:"option_filter_rules,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []RangetemplateOptions `json:"options,omitempty"`
	// The PXE lease time value for a range object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// This field contains the Relay Agent filters to be applied to this range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	RelayAgentFilterRules []RangetemplateRelayAgentFilterRules `json:"relay_agent_filter_rules,omitempty"`
	// The type of server that is going to serve the range.
	ServerAssociationType *string `json:"server_association_type,omitempty"`
	// Permission for unknown clients. If set to 'Deny' unknown clients will be denied IP addresses. Known clients include roaming hosts and clients with fixed addresses or DHCP host entries. Unknown clients include clients that are not roaming hosts and clients that do not have fixed addresses or DHCP host entries.
	UnknownClients *string `json:"unknown_clients,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: email_list
	UseEmailList *bool `json:"use_email_list,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: enable_dhcp_thresholds
	UseEnableDhcpThresholds *bool `json:"use_enable_dhcp_thresholds,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: known_clients
	UseKnownClients *bool `json:"use_known_clients,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: ms_options
	UseMsOptions *bool `json:"use_ms_options,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: unknown_clients
	UseUnknownClients *bool `json:"use_unknown_clients,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
}

// NewRangetemplate instantiates a new Rangetemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangetemplate() *Rangetemplate {
	this := Rangetemplate{}
	return &this
}

// NewRangetemplateWithDefaults instantiates a new Rangetemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangetemplateWithDefaults() *Rangetemplate {
	this := Rangetemplate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Rangetemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Rangetemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Rangetemplate) SetRef(v string) {
	o.Ref = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Rangetemplate) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Rangetemplate) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Rangetemplate) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Rangetemplate) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Rangetemplate) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Rangetemplate) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCloudApiCompatible returns the CloudApiCompatible field value if set, zero value otherwise.
func (o *Rangetemplate) GetCloudApiCompatible() bool {
	if o == nil || IsNil(o.CloudApiCompatible) {
		var ret bool
		return ret
	}
	return *o.CloudApiCompatible
}

// GetCloudApiCompatibleOk returns a tuple with the CloudApiCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetCloudApiCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudApiCompatible) {
		return nil, false
	}
	return o.CloudApiCompatible, true
}

// HasCloudApiCompatible returns a boolean if a field has been set.
func (o *Rangetemplate) HasCloudApiCompatible() bool {
	if o != nil && !IsNil(o.CloudApiCompatible) {
		return true
	}

	return false
}

// SetCloudApiCompatible gets a reference to the given bool and assigns it to the CloudApiCompatible field.
func (o *Rangetemplate) SetCloudApiCompatible(v bool) {
	o.CloudApiCompatible = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Rangetemplate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Rangetemplate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Rangetemplate) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Rangetemplate) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Rangetemplate) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Rangetemplate) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Rangetemplate) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Rangetemplate) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Rangetemplate) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDelegatedMember returns the DelegatedMember field value if set, zero value otherwise.
func (o *Rangetemplate) GetDelegatedMember() RangetemplateDelegatedMember {
	if o == nil || IsNil(o.DelegatedMember) {
		var ret RangetemplateDelegatedMember
		return ret
	}
	return *o.DelegatedMember
}

// GetDelegatedMemberOk returns a tuple with the DelegatedMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetDelegatedMemberOk() (*RangetemplateDelegatedMember, bool) {
	if o == nil || IsNil(o.DelegatedMember) {
		return nil, false
	}
	return o.DelegatedMember, true
}

// HasDelegatedMember returns a boolean if a field has been set.
func (o *Rangetemplate) HasDelegatedMember() bool {
	if o != nil && !IsNil(o.DelegatedMember) {
		return true
	}

	return false
}

// SetDelegatedMember gets a reference to the given RangetemplateDelegatedMember and assigns it to the DelegatedMember field.
func (o *Rangetemplate) SetDelegatedMember(v RangetemplateDelegatedMember) {
	o.DelegatedMember = &v
}

// GetDenyAllClients returns the DenyAllClients field value if set, zero value otherwise.
func (o *Rangetemplate) GetDenyAllClients() bool {
	if o == nil || IsNil(o.DenyAllClients) {
		var ret bool
		return ret
	}
	return *o.DenyAllClients
}

// GetDenyAllClientsOk returns a tuple with the DenyAllClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetDenyAllClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyAllClients) {
		return nil, false
	}
	return o.DenyAllClients, true
}

// HasDenyAllClients returns a boolean if a field has been set.
func (o *Rangetemplate) HasDenyAllClients() bool {
	if o != nil && !IsNil(o.DenyAllClients) {
		return true
	}

	return false
}

// SetDenyAllClients gets a reference to the given bool and assigns it to the DenyAllClients field.
func (o *Rangetemplate) SetDenyAllClients(v bool) {
	o.DenyAllClients = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Rangetemplate) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Rangetemplate) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Rangetemplate) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *Rangetemplate) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *Rangetemplate) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *Rangetemplate) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Rangetemplate) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Rangetemplate) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Rangetemplate) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *Rangetemplate) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Rangetemplate) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *Rangetemplate) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *Rangetemplate) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *Rangetemplate) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *Rangetemplate) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Rangetemplate) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Rangetemplate) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Rangetemplate) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *Rangetemplate) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *Rangetemplate) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *Rangetemplate) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Rangetemplate) GetExclude() []RangetemplateExclude {
	if o == nil || IsNil(o.Exclude) {
		var ret []RangetemplateExclude
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetExcludeOk() ([]RangetemplateExclude, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Rangetemplate) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []RangetemplateExclude and assigns it to the Exclude field.
func (o *Rangetemplate) SetExclude(v []RangetemplateExclude) {
	o.Exclude = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Rangetemplate) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Rangetemplate) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Rangetemplate) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFailoverAssociation returns the FailoverAssociation field value if set, zero value otherwise.
func (o *Rangetemplate) GetFailoverAssociation() string {
	if o == nil || IsNil(o.FailoverAssociation) {
		var ret string
		return ret
	}
	return *o.FailoverAssociation
}

// GetFailoverAssociationOk returns a tuple with the FailoverAssociation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetFailoverAssociationOk() (*string, bool) {
	if o == nil || IsNil(o.FailoverAssociation) {
		return nil, false
	}
	return o.FailoverAssociation, true
}

// HasFailoverAssociation returns a boolean if a field has been set.
func (o *Rangetemplate) HasFailoverAssociation() bool {
	if o != nil && !IsNil(o.FailoverAssociation) {
		return true
	}

	return false
}

// SetFailoverAssociation gets a reference to the given string and assigns it to the FailoverAssociation field.
func (o *Rangetemplate) SetFailoverAssociation(v string) {
	o.FailoverAssociation = &v
}

// GetFingerprintFilterRules returns the FingerprintFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetFingerprintFilterRules() []RangetemplateFingerprintFilterRules {
	if o == nil || IsNil(o.FingerprintFilterRules) {
		var ret []RangetemplateFingerprintFilterRules
		return ret
	}
	return o.FingerprintFilterRules
}

// GetFingerprintFilterRulesOk returns a tuple with the FingerprintFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetFingerprintFilterRulesOk() ([]RangetemplateFingerprintFilterRules, bool) {
	if o == nil || IsNil(o.FingerprintFilterRules) {
		return nil, false
	}
	return o.FingerprintFilterRules, true
}

// HasFingerprintFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasFingerprintFilterRules() bool {
	if o != nil && !IsNil(o.FingerprintFilterRules) {
		return true
	}

	return false
}

// SetFingerprintFilterRules gets a reference to the given []RangetemplateFingerprintFilterRules and assigns it to the FingerprintFilterRules field.
func (o *Rangetemplate) SetFingerprintFilterRules(v []RangetemplateFingerprintFilterRules) {
	o.FingerprintFilterRules = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *Rangetemplate) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *Rangetemplate) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *Rangetemplate) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *Rangetemplate) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *Rangetemplate) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *Rangetemplate) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Rangetemplate) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Rangetemplate) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Rangetemplate) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetKnownClients returns the KnownClients field value if set, zero value otherwise.
func (o *Rangetemplate) GetKnownClients() string {
	if o == nil || IsNil(o.KnownClients) {
		var ret string
		return ret
	}
	return *o.KnownClients
}

// GetKnownClientsOk returns a tuple with the KnownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetKnownClientsOk() (*string, bool) {
	if o == nil || IsNil(o.KnownClients) {
		return nil, false
	}
	return o.KnownClients, true
}

// HasKnownClients returns a boolean if a field has been set.
func (o *Rangetemplate) HasKnownClients() bool {
	if o != nil && !IsNil(o.KnownClients) {
		return true
	}

	return false
}

// SetKnownClients gets a reference to the given string and assigns it to the KnownClients field.
func (o *Rangetemplate) SetKnownClients(v string) {
	o.KnownClients = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *Rangetemplate) GetLeaseScavengeTime() int32 {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret int32
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetLeaseScavengeTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *Rangetemplate) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given int32 and assigns it to the LeaseScavengeTime field.
func (o *Rangetemplate) SetLeaseScavengeTime(v int32) {
	o.LeaseScavengeTime = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetLogicFilterRules() []RangetemplateLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []RangetemplateLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetLogicFilterRulesOk() ([]RangetemplateLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []RangetemplateLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Rangetemplate) SetLogicFilterRules(v []RangetemplateLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *Rangetemplate) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *Rangetemplate) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *Rangetemplate) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *Rangetemplate) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *Rangetemplate) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *Rangetemplate) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMacFilterRules returns the MacFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetMacFilterRules() []RangetemplateMacFilterRules {
	if o == nil || IsNil(o.MacFilterRules) {
		var ret []RangetemplateMacFilterRules
		return ret
	}
	return o.MacFilterRules
}

// GetMacFilterRulesOk returns a tuple with the MacFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetMacFilterRulesOk() ([]RangetemplateMacFilterRules, bool) {
	if o == nil || IsNil(o.MacFilterRules) {
		return nil, false
	}
	return o.MacFilterRules, true
}

// HasMacFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasMacFilterRules() bool {
	if o != nil && !IsNil(o.MacFilterRules) {
		return true
	}

	return false
}

// SetMacFilterRules gets a reference to the given []RangetemplateMacFilterRules and assigns it to the MacFilterRules field.
func (o *Rangetemplate) SetMacFilterRules(v []RangetemplateMacFilterRules) {
	o.MacFilterRules = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Rangetemplate) GetMember() RangetemplateMember {
	if o == nil || IsNil(o.Member) {
		var ret RangetemplateMember
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetMemberOk() (*RangetemplateMember, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Rangetemplate) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given RangetemplateMember and assigns it to the Member field.
func (o *Rangetemplate) SetMember(v RangetemplateMember) {
	o.Member = &v
}

// GetMsOptions returns the MsOptions field value if set, zero value otherwise.
func (o *Rangetemplate) GetMsOptions() []RangetemplateMsOptions {
	if o == nil || IsNil(o.MsOptions) {
		var ret []RangetemplateMsOptions
		return ret
	}
	return o.MsOptions
}

// GetMsOptionsOk returns a tuple with the MsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetMsOptionsOk() ([]RangetemplateMsOptions, bool) {
	if o == nil || IsNil(o.MsOptions) {
		return nil, false
	}
	return o.MsOptions, true
}

// HasMsOptions returns a boolean if a field has been set.
func (o *Rangetemplate) HasMsOptions() bool {
	if o != nil && !IsNil(o.MsOptions) {
		return true
	}

	return false
}

// SetMsOptions gets a reference to the given []RangetemplateMsOptions and assigns it to the MsOptions field.
func (o *Rangetemplate) SetMsOptions(v []RangetemplateMsOptions) {
	o.MsOptions = v
}

// GetMsServer returns the MsServer field value if set, zero value otherwise.
func (o *Rangetemplate) GetMsServer() RangetemplateMsServer {
	if o == nil || IsNil(o.MsServer) {
		var ret RangetemplateMsServer
		return ret
	}
	return *o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetMsServerOk() (*RangetemplateMsServer, bool) {
	if o == nil || IsNil(o.MsServer) {
		return nil, false
	}
	return o.MsServer, true
}

// HasMsServer returns a boolean if a field has been set.
func (o *Rangetemplate) HasMsServer() bool {
	if o != nil && !IsNil(o.MsServer) {
		return true
	}

	return false
}

// SetMsServer gets a reference to the given RangetemplateMsServer and assigns it to the MsServer field.
func (o *Rangetemplate) SetMsServer(v RangetemplateMsServer) {
	o.MsServer = &v
}

// GetNacFilterRules returns the NacFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetNacFilterRules() []RangetemplateNacFilterRules {
	if o == nil || IsNil(o.NacFilterRules) {
		var ret []RangetemplateNacFilterRules
		return ret
	}
	return o.NacFilterRules
}

// GetNacFilterRulesOk returns a tuple with the NacFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetNacFilterRulesOk() ([]RangetemplateNacFilterRules, bool) {
	if o == nil || IsNil(o.NacFilterRules) {
		return nil, false
	}
	return o.NacFilterRules, true
}

// HasNacFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasNacFilterRules() bool {
	if o != nil && !IsNil(o.NacFilterRules) {
		return true
	}

	return false
}

// SetNacFilterRules gets a reference to the given []RangetemplateNacFilterRules and assigns it to the NacFilterRules field.
func (o *Rangetemplate) SetNacFilterRules(v []RangetemplateNacFilterRules) {
	o.NacFilterRules = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Rangetemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Rangetemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Rangetemplate) SetName(v string) {
	o.Name = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Rangetemplate) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Rangetemplate) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Rangetemplate) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetNumberOfAddresses returns the NumberOfAddresses field value if set, zero value otherwise.
func (o *Rangetemplate) GetNumberOfAddresses() int64 {
	if o == nil || IsNil(o.NumberOfAddresses) {
		var ret int64
		return ret
	}
	return *o.NumberOfAddresses
}

// GetNumberOfAddressesOk returns a tuple with the NumberOfAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetNumberOfAddressesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfAddresses) {
		return nil, false
	}
	return o.NumberOfAddresses, true
}

// HasNumberOfAddresses returns a boolean if a field has been set.
func (o *Rangetemplate) HasNumberOfAddresses() bool {
	if o != nil && !IsNil(o.NumberOfAddresses) {
		return true
	}

	return false
}

// SetNumberOfAddresses gets a reference to the given int64 and assigns it to the NumberOfAddresses field.
func (o *Rangetemplate) SetNumberOfAddresses(v int64) {
	o.NumberOfAddresses = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *Rangetemplate) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *Rangetemplate) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *Rangetemplate) SetOffset(v int64) {
	o.Offset = &v
}

// GetOptionFilterRules returns the OptionFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetOptionFilterRules() []RangetemplateOptionFilterRules {
	if o == nil || IsNil(o.OptionFilterRules) {
		var ret []RangetemplateOptionFilterRules
		return ret
	}
	return o.OptionFilterRules
}

// GetOptionFilterRulesOk returns a tuple with the OptionFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetOptionFilterRulesOk() ([]RangetemplateOptionFilterRules, bool) {
	if o == nil || IsNil(o.OptionFilterRules) {
		return nil, false
	}
	return o.OptionFilterRules, true
}

// HasOptionFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasOptionFilterRules() bool {
	if o != nil && !IsNil(o.OptionFilterRules) {
		return true
	}

	return false
}

// SetOptionFilterRules gets a reference to the given []RangetemplateOptionFilterRules and assigns it to the OptionFilterRules field.
func (o *Rangetemplate) SetOptionFilterRules(v []RangetemplateOptionFilterRules) {
	o.OptionFilterRules = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Rangetemplate) GetOptions() []RangetemplateOptions {
	if o == nil || IsNil(o.Options) {
		var ret []RangetemplateOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetOptionsOk() ([]RangetemplateOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Rangetemplate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []RangetemplateOptions and assigns it to the Options field.
func (o *Rangetemplate) SetOptions(v []RangetemplateOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Rangetemplate) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Rangetemplate) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Rangetemplate) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Rangetemplate) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Rangetemplate) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Rangetemplate) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRelayAgentFilterRules returns the RelayAgentFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetRelayAgentFilterRules() []RangetemplateRelayAgentFilterRules {
	if o == nil || IsNil(o.RelayAgentFilterRules) {
		var ret []RangetemplateRelayAgentFilterRules
		return ret
	}
	return o.RelayAgentFilterRules
}

// GetRelayAgentFilterRulesOk returns a tuple with the RelayAgentFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetRelayAgentFilterRulesOk() ([]RangetemplateRelayAgentFilterRules, bool) {
	if o == nil || IsNil(o.RelayAgentFilterRules) {
		return nil, false
	}
	return o.RelayAgentFilterRules, true
}

// HasRelayAgentFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasRelayAgentFilterRules() bool {
	if o != nil && !IsNil(o.RelayAgentFilterRules) {
		return true
	}

	return false
}

// SetRelayAgentFilterRules gets a reference to the given []RangetemplateRelayAgentFilterRules and assigns it to the RelayAgentFilterRules field.
func (o *Rangetemplate) SetRelayAgentFilterRules(v []RangetemplateRelayAgentFilterRules) {
	o.RelayAgentFilterRules = v
}

// GetServerAssociationType returns the ServerAssociationType field value if set, zero value otherwise.
func (o *Rangetemplate) GetServerAssociationType() string {
	if o == nil || IsNil(o.ServerAssociationType) {
		var ret string
		return ret
	}
	return *o.ServerAssociationType
}

// GetServerAssociationTypeOk returns a tuple with the ServerAssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetServerAssociationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAssociationType) {
		return nil, false
	}
	return o.ServerAssociationType, true
}

// HasServerAssociationType returns a boolean if a field has been set.
func (o *Rangetemplate) HasServerAssociationType() bool {
	if o != nil && !IsNil(o.ServerAssociationType) {
		return true
	}

	return false
}

// SetServerAssociationType gets a reference to the given string and assigns it to the ServerAssociationType field.
func (o *Rangetemplate) SetServerAssociationType(v string) {
	o.ServerAssociationType = &v
}

// GetUnknownClients returns the UnknownClients field value if set, zero value otherwise.
func (o *Rangetemplate) GetUnknownClients() string {
	if o == nil || IsNil(o.UnknownClients) {
		var ret string
		return ret
	}
	return *o.UnknownClients
}

// GetUnknownClientsOk returns a tuple with the UnknownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUnknownClientsOk() (*string, bool) {
	if o == nil || IsNil(o.UnknownClients) {
		return nil, false
	}
	return o.UnknownClients, true
}

// HasUnknownClients returns a boolean if a field has been set.
func (o *Rangetemplate) HasUnknownClients() bool {
	if o != nil && !IsNil(o.UnknownClients) {
		return true
	}

	return false
}

// SetUnknownClients gets a reference to the given string and assigns it to the UnknownClients field.
func (o *Rangetemplate) SetUnknownClients(v string) {
	o.UnknownClients = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Rangetemplate) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Rangetemplate) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Rangetemplate) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Rangetemplate) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Rangetemplate) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Rangetemplate) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Rangetemplate) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Rangetemplate) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEmailList returns the UseEmailList field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseEmailList() bool {
	if o == nil || IsNil(o.UseEmailList) {
		var ret bool
		return ret
	}
	return *o.UseEmailList
}

// GetUseEmailListOk returns a tuple with the UseEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseEmailListOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailList) {
		return nil, false
	}
	return o.UseEmailList, true
}

// HasUseEmailList returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseEmailList() bool {
	if o != nil && !IsNil(o.UseEmailList) {
		return true
	}

	return false
}

// SetUseEmailList gets a reference to the given bool and assigns it to the UseEmailList field.
func (o *Rangetemplate) SetUseEmailList(v bool) {
	o.UseEmailList = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Rangetemplate) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDhcpThresholds returns the UseEnableDhcpThresholds field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.UseEnableDhcpThresholds
}

// GetUseEnableDhcpThresholdsOk returns a tuple with the UseEnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		return nil, false
	}
	return o.UseEnableDhcpThresholds, true
}

// HasUseEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.UseEnableDhcpThresholds) {
		return true
	}

	return false
}

// SetUseEnableDhcpThresholds gets a reference to the given bool and assigns it to the UseEnableDhcpThresholds field.
func (o *Rangetemplate) SetUseEnableDhcpThresholds(v bool) {
	o.UseEnableDhcpThresholds = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Rangetemplate) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseKnownClients returns the UseKnownClients field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseKnownClients() bool {
	if o == nil || IsNil(o.UseKnownClients) {
		var ret bool
		return ret
	}
	return *o.UseKnownClients
}

// GetUseKnownClientsOk returns a tuple with the UseKnownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseKnownClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseKnownClients) {
		return nil, false
	}
	return o.UseKnownClients, true
}

// HasUseKnownClients returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseKnownClients() bool {
	if o != nil && !IsNil(o.UseKnownClients) {
		return true
	}

	return false
}

// SetUseKnownClients gets a reference to the given bool and assigns it to the UseKnownClients field.
func (o *Rangetemplate) SetUseKnownClients(v bool) {
	o.UseKnownClients = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *Rangetemplate) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Rangetemplate) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMsOptions returns the UseMsOptions field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseMsOptions() bool {
	if o == nil || IsNil(o.UseMsOptions) {
		var ret bool
		return ret
	}
	return *o.UseMsOptions
}

// GetUseMsOptionsOk returns a tuple with the UseMsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseMsOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMsOptions) {
		return nil, false
	}
	return o.UseMsOptions, true
}

// HasUseMsOptions returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseMsOptions() bool {
	if o != nil && !IsNil(o.UseMsOptions) {
		return true
	}

	return false
}

// SetUseMsOptions gets a reference to the given bool and assigns it to the UseMsOptions field.
func (o *Rangetemplate) SetUseMsOptions(v bool) {
	o.UseMsOptions = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Rangetemplate) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Rangetemplate) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Rangetemplate) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Rangetemplate) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Rangetemplate) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Rangetemplate) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseUnknownClients returns the UseUnknownClients field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseUnknownClients() bool {
	if o == nil || IsNil(o.UseUnknownClients) {
		var ret bool
		return ret
	}
	return *o.UseUnknownClients
}

// GetUseUnknownClientsOk returns a tuple with the UseUnknownClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseUnknownClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUnknownClients) {
		return nil, false
	}
	return o.UseUnknownClients, true
}

// HasUseUnknownClients returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseUnknownClients() bool {
	if o != nil && !IsNil(o.UseUnknownClients) {
		return true
	}

	return false
}

// SetUseUnknownClients gets a reference to the given bool and assigns it to the UseUnknownClients field.
func (o *Rangetemplate) SetUseUnknownClients(v bool) {
	o.UseUnknownClients = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Rangetemplate) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rangetemplate) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Rangetemplate) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Rangetemplate) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

func (o Rangetemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rangetemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CloudApiCompatible) {
		toSerialize["cloud_api_compatible"] = o.CloudApiCompatible
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DelegatedMember) {
		toSerialize["delegated_member"] = o.DelegatedMember
	}
	if !IsNil(o.DenyAllClients) {
		toSerialize["deny_all_clients"] = o.DenyAllClients
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FailoverAssociation) {
		toSerialize["failover_association"] = o.FailoverAssociation
	}
	if !IsNil(o.FingerprintFilterRules) {
		toSerialize["fingerprint_filter_rules"] = o.FingerprintFilterRules
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.KnownClients) {
		toSerialize["known_clients"] = o.KnownClients
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.MacFilterRules) {
		toSerialize["mac_filter_rules"] = o.MacFilterRules
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.MsOptions) {
		toSerialize["ms_options"] = o.MsOptions
	}
	if !IsNil(o.MsServer) {
		toSerialize["ms_server"] = o.MsServer
	}
	if !IsNil(o.NacFilterRules) {
		toSerialize["nac_filter_rules"] = o.NacFilterRules
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.NumberOfAddresses) {
		toSerialize["number_of_addresses"] = o.NumberOfAddresses
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.OptionFilterRules) {
		toSerialize["option_filter_rules"] = o.OptionFilterRules
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RelayAgentFilterRules) {
		toSerialize["relay_agent_filter_rules"] = o.RelayAgentFilterRules
	}
	if !IsNil(o.ServerAssociationType) {
		toSerialize["server_association_type"] = o.ServerAssociationType
	}
	if !IsNil(o.UnknownClients) {
		toSerialize["unknown_clients"] = o.UnknownClients
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEmailList) {
		toSerialize["use_email_list"] = o.UseEmailList
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDhcpThresholds) {
		toSerialize["use_enable_dhcp_thresholds"] = o.UseEnableDhcpThresholds
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseKnownClients) {
		toSerialize["use_known_clients"] = o.UseKnownClients
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMsOptions) {
		toSerialize["use_ms_options"] = o.UseMsOptions
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseUnknownClients) {
		toSerialize["use_unknown_clients"] = o.UseUnknownClients
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	return toSerialize, nil
}

type NullableRangetemplate struct {
	value *Rangetemplate
	isSet bool
}

func (v NullableRangetemplate) Get() *Rangetemplate {
	return v.value
}

func (v *NullableRangetemplate) Set(val *Rangetemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableRangetemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableRangetemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangetemplate(val *Rangetemplate) *NullableRangetemplate {
	return &NullableRangetemplate{value: val, isSet: true}
}

func (v NullableRangetemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangetemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
