/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangetemplateExclude type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangetemplateExclude{}

// RangetemplateExclude struct for RangetemplateExclude
type RangetemplateExclude struct {
	// The address offset of the DHCP exclusion range template.
	Offset *int64 `json:"offset,omitempty"`
	// The number of addresses in the DHCP exclusion range template.
	NumberOfAddresses *int64 `json:"number_of_addresses,omitempty"`
	// A descriptive comment of a DHCP exclusion range template.
	Comment              *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangetemplateExclude RangetemplateExclude

// NewRangetemplateExclude instantiates a new RangetemplateExclude object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangetemplateExclude() *RangetemplateExclude {
	this := RangetemplateExclude{}
	return &this
}

// NewRangetemplateExcludeWithDefaults instantiates a new RangetemplateExclude object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangetemplateExcludeWithDefaults() *RangetemplateExclude {
	this := RangetemplateExclude{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RangetemplateExclude) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangetemplateExclude) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RangetemplateExclude) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *RangetemplateExclude) SetOffset(v int64) {
	o.Offset = &v
}

// GetNumberOfAddresses returns the NumberOfAddresses field value if set, zero value otherwise.
func (o *RangetemplateExclude) GetNumberOfAddresses() int64 {
	if o == nil || IsNil(o.NumberOfAddresses) {
		var ret int64
		return ret
	}
	return *o.NumberOfAddresses
}

// GetNumberOfAddressesOk returns a tuple with the NumberOfAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangetemplateExclude) GetNumberOfAddressesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfAddresses) {
		return nil, false
	}
	return o.NumberOfAddresses, true
}

// HasNumberOfAddresses returns a boolean if a field has been set.
func (o *RangetemplateExclude) HasNumberOfAddresses() bool {
	if o != nil && !IsNil(o.NumberOfAddresses) {
		return true
	}

	return false
}

// SetNumberOfAddresses gets a reference to the given int64 and assigns it to the NumberOfAddresses field.
func (o *RangetemplateExclude) SetNumberOfAddresses(v int64) {
	o.NumberOfAddresses = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RangetemplateExclude) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangetemplateExclude) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RangetemplateExclude) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RangetemplateExclude) SetComment(v string) {
	o.Comment = &v
}

func (o RangetemplateExclude) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangetemplateExclude) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.NumberOfAddresses) {
		toSerialize["number_of_addresses"] = o.NumberOfAddresses
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangetemplateExclude) UnmarshalJSON(data []byte) (err error) {
	varRangetemplateExclude := _RangetemplateExclude{}

	err = json.Unmarshal(data, &varRangetemplateExclude)

	if err != nil {
		return err
	}

	*o = RangetemplateExclude(varRangetemplateExclude)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "offset")
		delete(additionalProperties, "number_of_addresses")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangetemplateExclude struct {
	value *RangetemplateExclude
	isSet bool
}

func (v NullableRangetemplateExclude) Get() *RangetemplateExclude {
	return v.value
}

func (v *NullableRangetemplateExclude) Set(val *RangetemplateExclude) {
	v.value = val
	v.isSet = true
}

func (v NullableRangetemplateExclude) IsSet() bool {
	return v.isSet
}

func (v *NullableRangetemplateExclude) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangetemplateExclude(val *RangetemplateExclude) *NullableRangetemplateExclude {
	return &NullableRangetemplateExclude{value: val, isSet: true}
}

func (v NullableRangetemplateExclude) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangetemplateExclude) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
