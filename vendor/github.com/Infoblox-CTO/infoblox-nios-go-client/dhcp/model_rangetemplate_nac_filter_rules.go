/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the RangetemplateNacFilterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangetemplateNacFilterRules{}

// RangetemplateNacFilterRules struct for RangetemplateNacFilterRules
type RangetemplateNacFilterRules struct {
	// The name of the DHCP filter.
	Filter *string `json:"filter,omitempty"`
	// The permission to be applied.
	Permission           *string `json:"permission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RangetemplateNacFilterRules RangetemplateNacFilterRules

// NewRangetemplateNacFilterRules instantiates a new RangetemplateNacFilterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangetemplateNacFilterRules() *RangetemplateNacFilterRules {
	this := RangetemplateNacFilterRules{}
	return &this
}

// NewRangetemplateNacFilterRulesWithDefaults instantiates a new RangetemplateNacFilterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangetemplateNacFilterRulesWithDefaults() *RangetemplateNacFilterRules {
	this := RangetemplateNacFilterRules{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *RangetemplateNacFilterRules) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangetemplateNacFilterRules) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *RangetemplateNacFilterRules) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *RangetemplateNacFilterRules) SetFilter(v string) {
	o.Filter = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RangetemplateNacFilterRules) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangetemplateNacFilterRules) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RangetemplateNacFilterRules) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RangetemplateNacFilterRules) SetPermission(v string) {
	o.Permission = &v
}

func (o RangetemplateNacFilterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangetemplateNacFilterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RangetemplateNacFilterRules) UnmarshalJSON(data []byte) (err error) {
	varRangetemplateNacFilterRules := _RangetemplateNacFilterRules{}

	err = json.Unmarshal(data, &varRangetemplateNacFilterRules)

	if err != nil {
		return err
	}

	*o = RangetemplateNacFilterRules(varRangetemplateNacFilterRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRangetemplateNacFilterRules struct {
	value *RangetemplateNacFilterRules
	isSet bool
}

func (v NullableRangetemplateNacFilterRules) Get() *RangetemplateNacFilterRules {
	return v.value
}

func (v *NullableRangetemplateNacFilterRules) Set(val *RangetemplateNacFilterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRangetemplateNacFilterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRangetemplateNacFilterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangetemplateNacFilterRules(val *RangetemplateNacFilterRules) *NullableRangetemplateNacFilterRules {
	return &NullableRangetemplateNacFilterRules{value: val, isSet: true}
}

func (v NullableRangetemplateNacFilterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangetemplateNacFilterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
