/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Roaminghost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Roaminghost{}

// Roaminghost struct for Roaminghost
type Roaminghost struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The address type for this roaming host.
	AddressType *string `json:"address_type,omitempty"`
	// The bootfile name for the roaming host. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The boot server address for the roaming host. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// This field controls whether there is a prepend for the dhcp-client-identifier of a roaming host.
	ClientIdentifierPrependZero *bool `json:"client_identifier_prepend_zero,omitempty"`
	// Comment for the roaming host; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The DDNS domain name for this roaming host.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// The DDNS host name for this roaming host.
	DdnsHostname *string `json:"ddns_hostname,omitempty"`
	// If set to true, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The DHCP client ID for the roaming host.
	DhcpClientIdentifier *string `json:"dhcp_client_identifier,omitempty"`
	// Determines whether a roaming host is disabled or not. When this is set to False, the roaming host is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The dynamic DNS updates flag of the roaming host object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Set this to True to use the roaming host name as its ddns_hostname.
	ForceRoamingHostname *bool `json:"force_roaming_hostname,omitempty"`
	// If this field is set to False, the appliance returns all the DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// The client hostname of a DHCP roaming host object. This field specifies the host name that the DHCP client sends to the Infoblox appliance using DHCP option 12.
	Ipv6ClientHostname *string `json:"ipv6_client_hostname,omitempty"`
	// The IPv6 DDNS domain name for this roaming host.
	Ipv6DdnsDomainname *string `json:"ipv6_ddns_domainname,omitempty"`
	// The IPv6 DDNS host name for this roaming host.
	Ipv6DdnsHostname *string `json:"ipv6_ddns_hostname,omitempty"`
	// The IPv6 domain name for this roaming host.
	Ipv6DomainName *string `json:"ipv6_domain_name,omitempty"`
	// The IPv6 addresses of DNS recursive name servers to which the DHCP client can send name resolution requests. The DHCP server includes this information in the DNS Recursive Name Server option in Advertise, Rebind, Information-Request, and Reply messages.
	Ipv6DomainNameServers []string `json:"ipv6_domain_name_servers,omitempty"`
	// The DUID value for this roaming host.
	Ipv6Duid *string `json:"ipv6_duid,omitempty"`
	// Set this to True to enable IPv6 DDNS.
	Ipv6EnableDdns *bool `json:"ipv6_enable_ddns,omitempty"`
	// Set this to True to use the roaming host name as its ddns_hostname.
	Ipv6ForceRoamingHostname *bool `json:"ipv6_force_roaming_hostname,omitempty"`
	// The identification method for an IPv6 or mixed IPv4/IPv6 roaming host. Currently, the only supported value for this field is \"DUID\", which corresponds to identification by DHCPv6 unique ID.
	Ipv6MatchOption *string `json:"ipv6_match_option,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Ipv6Options []RoaminghostIpv6Options `json:"ipv6_options,omitempty"`
	// If set on creation, the roaming host will be created according to the values specified in the named IPv6 roaming host template.
	Ipv6Template *string `json:"ipv6_template,omitempty"`
	// The MAC address for this roaming host.
	Mac *string `json:"mac,omitempty"`
	// The match-client value for this roaming host. Valid values are: \"MAC_ADDRESS\": The fixed IP address is leased to the matching MAC address. \"CLIENT_ID\": The fixed IP address is leased to the matching DHCP client identifier.
	MatchClient *string `json:"match_client,omitempty"`
	// The name of this roaming host.
	Name *string `json:"name,omitempty"`
	// The name of the network view in which this roaming host resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The name in FQDN and/or IPv4 Address format of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []RoaminghostOptions `json:"options,omitempty"`
	// The preferred lifetime value for this roaming host object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The PXE lease time value for this roaming host object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// If set on creation, the roaming host will be created according to the values specified in the named template.
	Template *string `json:"template,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ipv6_ddns_domainname
	UseIpv6DdnsDomainname *bool `json:"use_ipv6_ddns_domainname,omitempty"`
	// Use flag for: ipv6_domain_name
	UseIpv6DomainName *bool `json:"use_ipv6_domain_name,omitempty"`
	// Use flag for: ipv6_domain_name_servers
	UseIpv6DomainNameServers *bool `json:"use_ipv6_domain_name_servers,omitempty"`
	// Use flag for: ipv6_enable_ddns
	UseIpv6EnableDdns *bool `json:"use_ipv6_enable_ddns,omitempty"`
	// Use flag for: ipv6_options
	UseIpv6Options *bool `json:"use_ipv6_options,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// The valid lifetime value for this roaming host object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewRoaminghost instantiates a new Roaminghost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoaminghost() *Roaminghost {
	this := Roaminghost{}
	return &this
}

// NewRoaminghostWithDefaults instantiates a new Roaminghost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoaminghostWithDefaults() *Roaminghost {
	this := Roaminghost{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Roaminghost) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Roaminghost) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Roaminghost) SetRef(v string) {
	o.Ref = &v
}

// GetAddressType returns the AddressType field value if set, zero value otherwise.
func (o *Roaminghost) GetAddressType() string {
	if o == nil || IsNil(o.AddressType) {
		var ret string
		return ret
	}
	return *o.AddressType
}

// GetAddressTypeOk returns a tuple with the AddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetAddressTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressType) {
		return nil, false
	}
	return o.AddressType, true
}

// HasAddressType returns a boolean if a field has been set.
func (o *Roaminghost) HasAddressType() bool {
	if o != nil && !IsNil(o.AddressType) {
		return true
	}

	return false
}

// SetAddressType gets a reference to the given string and assigns it to the AddressType field.
func (o *Roaminghost) SetAddressType(v string) {
	o.AddressType = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Roaminghost) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Roaminghost) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Roaminghost) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Roaminghost) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Roaminghost) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Roaminghost) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetClientIdentifierPrependZero returns the ClientIdentifierPrependZero field value if set, zero value otherwise.
func (o *Roaminghost) GetClientIdentifierPrependZero() bool {
	if o == nil || IsNil(o.ClientIdentifierPrependZero) {
		var ret bool
		return ret
	}
	return *o.ClientIdentifierPrependZero
}

// GetClientIdentifierPrependZeroOk returns a tuple with the ClientIdentifierPrependZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetClientIdentifierPrependZeroOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientIdentifierPrependZero) {
		return nil, false
	}
	return o.ClientIdentifierPrependZero, true
}

// HasClientIdentifierPrependZero returns a boolean if a field has been set.
func (o *Roaminghost) HasClientIdentifierPrependZero() bool {
	if o != nil && !IsNil(o.ClientIdentifierPrependZero) {
		return true
	}

	return false
}

// SetClientIdentifierPrependZero gets a reference to the given bool and assigns it to the ClientIdentifierPrependZero field.
func (o *Roaminghost) SetClientIdentifierPrependZero(v bool) {
	o.ClientIdentifierPrependZero = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Roaminghost) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Roaminghost) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Roaminghost) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Roaminghost) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Roaminghost) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Roaminghost) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsHostname returns the DdnsHostname field value if set, zero value otherwise.
func (o *Roaminghost) GetDdnsHostname() string {
	if o == nil || IsNil(o.DdnsHostname) {
		var ret string
		return ret
	}
	return *o.DdnsHostname
}

// GetDdnsHostnameOk returns a tuple with the DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetDdnsHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsHostname) {
		return nil, false
	}
	return o.DdnsHostname, true
}

// HasDdnsHostname returns a boolean if a field has been set.
func (o *Roaminghost) HasDdnsHostname() bool {
	if o != nil && !IsNil(o.DdnsHostname) {
		return true
	}

	return false
}

// SetDdnsHostname gets a reference to the given string and assigns it to the DdnsHostname field.
func (o *Roaminghost) SetDdnsHostname(v string) {
	o.DdnsHostname = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Roaminghost) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Roaminghost) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Roaminghost) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDhcpClientIdentifier returns the DhcpClientIdentifier field value if set, zero value otherwise.
func (o *Roaminghost) GetDhcpClientIdentifier() string {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		var ret string
		return ret
	}
	return *o.DhcpClientIdentifier
}

// GetDhcpClientIdentifierOk returns a tuple with the DhcpClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetDhcpClientIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		return nil, false
	}
	return o.DhcpClientIdentifier, true
}

// HasDhcpClientIdentifier returns a boolean if a field has been set.
func (o *Roaminghost) HasDhcpClientIdentifier() bool {
	if o != nil && !IsNil(o.DhcpClientIdentifier) {
		return true
	}

	return false
}

// SetDhcpClientIdentifier gets a reference to the given string and assigns it to the DhcpClientIdentifier field.
func (o *Roaminghost) SetDhcpClientIdentifier(v string) {
	o.DhcpClientIdentifier = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Roaminghost) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Roaminghost) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Roaminghost) SetDisable(v bool) {
	o.Disable = &v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Roaminghost) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Roaminghost) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Roaminghost) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Roaminghost) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Roaminghost) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Roaminghost) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Roaminghost) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Roaminghost) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Roaminghost) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetForceRoamingHostname returns the ForceRoamingHostname field value if set, zero value otherwise.
func (o *Roaminghost) GetForceRoamingHostname() bool {
	if o == nil || IsNil(o.ForceRoamingHostname) {
		var ret bool
		return ret
	}
	return *o.ForceRoamingHostname
}

// GetForceRoamingHostnameOk returns a tuple with the ForceRoamingHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetForceRoamingHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceRoamingHostname) {
		return nil, false
	}
	return o.ForceRoamingHostname, true
}

// HasForceRoamingHostname returns a boolean if a field has been set.
func (o *Roaminghost) HasForceRoamingHostname() bool {
	if o != nil && !IsNil(o.ForceRoamingHostname) {
		return true
	}

	return false
}

// SetForceRoamingHostname gets a reference to the given bool and assigns it to the ForceRoamingHostname field.
func (o *Roaminghost) SetForceRoamingHostname(v bool) {
	o.ForceRoamingHostname = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Roaminghost) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Roaminghost) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Roaminghost) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIpv6ClientHostname returns the Ipv6ClientHostname field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6ClientHostname() string {
	if o == nil || IsNil(o.Ipv6ClientHostname) {
		var ret string
		return ret
	}
	return *o.Ipv6ClientHostname
}

// GetIpv6ClientHostnameOk returns a tuple with the Ipv6ClientHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6ClientHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6ClientHostname) {
		return nil, false
	}
	return o.Ipv6ClientHostname, true
}

// HasIpv6ClientHostname returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6ClientHostname() bool {
	if o != nil && !IsNil(o.Ipv6ClientHostname) {
		return true
	}

	return false
}

// SetIpv6ClientHostname gets a reference to the given string and assigns it to the Ipv6ClientHostname field.
func (o *Roaminghost) SetIpv6ClientHostname(v string) {
	o.Ipv6ClientHostname = &v
}

// GetIpv6DdnsDomainname returns the Ipv6DdnsDomainname field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6DdnsDomainname() string {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.Ipv6DdnsDomainname
}

// GetIpv6DdnsDomainnameOk returns a tuple with the Ipv6DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6DdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		return nil, false
	}
	return o.Ipv6DdnsDomainname, true
}

// HasIpv6DdnsDomainname returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6DdnsDomainname() bool {
	if o != nil && !IsNil(o.Ipv6DdnsDomainname) {
		return true
	}

	return false
}

// SetIpv6DdnsDomainname gets a reference to the given string and assigns it to the Ipv6DdnsDomainname field.
func (o *Roaminghost) SetIpv6DdnsDomainname(v string) {
	o.Ipv6DdnsDomainname = &v
}

// GetIpv6DdnsHostname returns the Ipv6DdnsHostname field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6DdnsHostname() string {
	if o == nil || IsNil(o.Ipv6DdnsHostname) {
		var ret string
		return ret
	}
	return *o.Ipv6DdnsHostname
}

// GetIpv6DdnsHostnameOk returns a tuple with the Ipv6DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6DdnsHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DdnsHostname) {
		return nil, false
	}
	return o.Ipv6DdnsHostname, true
}

// HasIpv6DdnsHostname returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6DdnsHostname() bool {
	if o != nil && !IsNil(o.Ipv6DdnsHostname) {
		return true
	}

	return false
}

// SetIpv6DdnsHostname gets a reference to the given string and assigns it to the Ipv6DdnsHostname field.
func (o *Roaminghost) SetIpv6DdnsHostname(v string) {
	o.Ipv6DdnsHostname = &v
}

// GetIpv6DomainName returns the Ipv6DomainName field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6DomainName() string {
	if o == nil || IsNil(o.Ipv6DomainName) {
		var ret string
		return ret
	}
	return *o.Ipv6DomainName
}

// GetIpv6DomainNameOk returns a tuple with the Ipv6DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6DomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DomainName) {
		return nil, false
	}
	return o.Ipv6DomainName, true
}

// HasIpv6DomainName returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6DomainName() bool {
	if o != nil && !IsNil(o.Ipv6DomainName) {
		return true
	}

	return false
}

// SetIpv6DomainName gets a reference to the given string and assigns it to the Ipv6DomainName field.
func (o *Roaminghost) SetIpv6DomainName(v string) {
	o.Ipv6DomainName = &v
}

// GetIpv6DomainNameServers returns the Ipv6DomainNameServers field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6DomainNameServers() []string {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		var ret []string
		return ret
	}
	return o.Ipv6DomainNameServers
}

// GetIpv6DomainNameServersOk returns a tuple with the Ipv6DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6DomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		return nil, false
	}
	return o.Ipv6DomainNameServers, true
}

// HasIpv6DomainNameServers returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6DomainNameServers() bool {
	if o != nil && !IsNil(o.Ipv6DomainNameServers) {
		return true
	}

	return false
}

// SetIpv6DomainNameServers gets a reference to the given []string and assigns it to the Ipv6DomainNameServers field.
func (o *Roaminghost) SetIpv6DomainNameServers(v []string) {
	o.Ipv6DomainNameServers = v
}

// GetIpv6Duid returns the Ipv6Duid field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6Duid() string {
	if o == nil || IsNil(o.Ipv6Duid) {
		var ret string
		return ret
	}
	return *o.Ipv6Duid
}

// GetIpv6DuidOk returns a tuple with the Ipv6Duid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6DuidOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Duid) {
		return nil, false
	}
	return o.Ipv6Duid, true
}

// HasIpv6Duid returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6Duid() bool {
	if o != nil && !IsNil(o.Ipv6Duid) {
		return true
	}

	return false
}

// SetIpv6Duid gets a reference to the given string and assigns it to the Ipv6Duid field.
func (o *Roaminghost) SetIpv6Duid(v string) {
	o.Ipv6Duid = &v
}

// GetIpv6EnableDdns returns the Ipv6EnableDdns field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6EnableDdns() bool {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableDdns
}

// GetIpv6EnableDdnsOk returns a tuple with the Ipv6EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6EnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		return nil, false
	}
	return o.Ipv6EnableDdns, true
}

// HasIpv6EnableDdns returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6EnableDdns() bool {
	if o != nil && !IsNil(o.Ipv6EnableDdns) {
		return true
	}

	return false
}

// SetIpv6EnableDdns gets a reference to the given bool and assigns it to the Ipv6EnableDdns field.
func (o *Roaminghost) SetIpv6EnableDdns(v bool) {
	o.Ipv6EnableDdns = &v
}

// GetIpv6ForceRoamingHostname returns the Ipv6ForceRoamingHostname field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6ForceRoamingHostname() bool {
	if o == nil || IsNil(o.Ipv6ForceRoamingHostname) {
		var ret bool
		return ret
	}
	return *o.Ipv6ForceRoamingHostname
}

// GetIpv6ForceRoamingHostnameOk returns a tuple with the Ipv6ForceRoamingHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6ForceRoamingHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6ForceRoamingHostname) {
		return nil, false
	}
	return o.Ipv6ForceRoamingHostname, true
}

// HasIpv6ForceRoamingHostname returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6ForceRoamingHostname() bool {
	if o != nil && !IsNil(o.Ipv6ForceRoamingHostname) {
		return true
	}

	return false
}

// SetIpv6ForceRoamingHostname gets a reference to the given bool and assigns it to the Ipv6ForceRoamingHostname field.
func (o *Roaminghost) SetIpv6ForceRoamingHostname(v bool) {
	o.Ipv6ForceRoamingHostname = &v
}

// GetIpv6MatchOption returns the Ipv6MatchOption field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6MatchOption() string {
	if o == nil || IsNil(o.Ipv6MatchOption) {
		var ret string
		return ret
	}
	return *o.Ipv6MatchOption
}

// GetIpv6MatchOptionOk returns a tuple with the Ipv6MatchOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6MatchOptionOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6MatchOption) {
		return nil, false
	}
	return o.Ipv6MatchOption, true
}

// HasIpv6MatchOption returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6MatchOption() bool {
	if o != nil && !IsNil(o.Ipv6MatchOption) {
		return true
	}

	return false
}

// SetIpv6MatchOption gets a reference to the given string and assigns it to the Ipv6MatchOption field.
func (o *Roaminghost) SetIpv6MatchOption(v string) {
	o.Ipv6MatchOption = &v
}

// GetIpv6Options returns the Ipv6Options field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6Options() []RoaminghostIpv6Options {
	if o == nil || IsNil(o.Ipv6Options) {
		var ret []RoaminghostIpv6Options
		return ret
	}
	return o.Ipv6Options
}

// GetIpv6OptionsOk returns a tuple with the Ipv6Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6OptionsOk() ([]RoaminghostIpv6Options, bool) {
	if o == nil || IsNil(o.Ipv6Options) {
		return nil, false
	}
	return o.Ipv6Options, true
}

// HasIpv6Options returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6Options() bool {
	if o != nil && !IsNil(o.Ipv6Options) {
		return true
	}

	return false
}

// SetIpv6Options gets a reference to the given []RoaminghostIpv6Options and assigns it to the Ipv6Options field.
func (o *Roaminghost) SetIpv6Options(v []RoaminghostIpv6Options) {
	o.Ipv6Options = v
}

// GetIpv6Template returns the Ipv6Template field value if set, zero value otherwise.
func (o *Roaminghost) GetIpv6Template() string {
	if o == nil || IsNil(o.Ipv6Template) {
		var ret string
		return ret
	}
	return *o.Ipv6Template
}

// GetIpv6TemplateOk returns a tuple with the Ipv6Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetIpv6TemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Template) {
		return nil, false
	}
	return o.Ipv6Template, true
}

// HasIpv6Template returns a boolean if a field has been set.
func (o *Roaminghost) HasIpv6Template() bool {
	if o != nil && !IsNil(o.Ipv6Template) {
		return true
	}

	return false
}

// SetIpv6Template gets a reference to the given string and assigns it to the Ipv6Template field.
func (o *Roaminghost) SetIpv6Template(v string) {
	o.Ipv6Template = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Roaminghost) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Roaminghost) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Roaminghost) SetMac(v string) {
	o.Mac = &v
}

// GetMatchClient returns the MatchClient field value if set, zero value otherwise.
func (o *Roaminghost) GetMatchClient() string {
	if o == nil || IsNil(o.MatchClient) {
		var ret string
		return ret
	}
	return *o.MatchClient
}

// GetMatchClientOk returns a tuple with the MatchClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetMatchClientOk() (*string, bool) {
	if o == nil || IsNil(o.MatchClient) {
		return nil, false
	}
	return o.MatchClient, true
}

// HasMatchClient returns a boolean if a field has been set.
func (o *Roaminghost) HasMatchClient() bool {
	if o != nil && !IsNil(o.MatchClient) {
		return true
	}

	return false
}

// SetMatchClient gets a reference to the given string and assigns it to the MatchClient field.
func (o *Roaminghost) SetMatchClient(v string) {
	o.MatchClient = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Roaminghost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Roaminghost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Roaminghost) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Roaminghost) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Roaminghost) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Roaminghost) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Roaminghost) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Roaminghost) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Roaminghost) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Roaminghost) GetOptions() []RoaminghostOptions {
	if o == nil || IsNil(o.Options) {
		var ret []RoaminghostOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetOptionsOk() ([]RoaminghostOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Roaminghost) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []RoaminghostOptions and assigns it to the Options field.
func (o *Roaminghost) SetOptions(v []RoaminghostOptions) {
	o.Options = v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *Roaminghost) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *Roaminghost) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *Roaminghost) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Roaminghost) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Roaminghost) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Roaminghost) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Roaminghost) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Roaminghost) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Roaminghost) SetTemplate(v string) {
	o.Template = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Roaminghost) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Roaminghost) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Roaminghost) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Roaminghost) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Roaminghost) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Roaminghost) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Roaminghost) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Roaminghost) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Roaminghost) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Roaminghost) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Roaminghost) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Roaminghost) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Roaminghost) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Roaminghost) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Roaminghost) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Roaminghost) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIpv6DdnsDomainname returns the UseIpv6DdnsDomainname field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIpv6DdnsDomainname() bool {
	if o == nil || IsNil(o.UseIpv6DdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DdnsDomainname
}

// GetUseIpv6DdnsDomainnameOk returns a tuple with the UseIpv6DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIpv6DdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DdnsDomainname) {
		return nil, false
	}
	return o.UseIpv6DdnsDomainname, true
}

// HasUseIpv6DdnsDomainname returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIpv6DdnsDomainname() bool {
	if o != nil && !IsNil(o.UseIpv6DdnsDomainname) {
		return true
	}

	return false
}

// SetUseIpv6DdnsDomainname gets a reference to the given bool and assigns it to the UseIpv6DdnsDomainname field.
func (o *Roaminghost) SetUseIpv6DdnsDomainname(v bool) {
	o.UseIpv6DdnsDomainname = &v
}

// GetUseIpv6DomainName returns the UseIpv6DomainName field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIpv6DomainName() bool {
	if o == nil || IsNil(o.UseIpv6DomainName) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DomainName
}

// GetUseIpv6DomainNameOk returns a tuple with the UseIpv6DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIpv6DomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DomainName) {
		return nil, false
	}
	return o.UseIpv6DomainName, true
}

// HasUseIpv6DomainName returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIpv6DomainName() bool {
	if o != nil && !IsNil(o.UseIpv6DomainName) {
		return true
	}

	return false
}

// SetUseIpv6DomainName gets a reference to the given bool and assigns it to the UseIpv6DomainName field.
func (o *Roaminghost) SetUseIpv6DomainName(v bool) {
	o.UseIpv6DomainName = &v
}

// GetUseIpv6DomainNameServers returns the UseIpv6DomainNameServers field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIpv6DomainNameServers() bool {
	if o == nil || IsNil(o.UseIpv6DomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DomainNameServers
}

// GetUseIpv6DomainNameServersOk returns a tuple with the UseIpv6DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIpv6DomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DomainNameServers) {
		return nil, false
	}
	return o.UseIpv6DomainNameServers, true
}

// HasUseIpv6DomainNameServers returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIpv6DomainNameServers() bool {
	if o != nil && !IsNil(o.UseIpv6DomainNameServers) {
		return true
	}

	return false
}

// SetUseIpv6DomainNameServers gets a reference to the given bool and assigns it to the UseIpv6DomainNameServers field.
func (o *Roaminghost) SetUseIpv6DomainNameServers(v bool) {
	o.UseIpv6DomainNameServers = &v
}

// GetUseIpv6EnableDdns returns the UseIpv6EnableDdns field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIpv6EnableDdns() bool {
	if o == nil || IsNil(o.UseIpv6EnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseIpv6EnableDdns
}

// GetUseIpv6EnableDdnsOk returns a tuple with the UseIpv6EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIpv6EnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6EnableDdns) {
		return nil, false
	}
	return o.UseIpv6EnableDdns, true
}

// HasUseIpv6EnableDdns returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIpv6EnableDdns() bool {
	if o != nil && !IsNil(o.UseIpv6EnableDdns) {
		return true
	}

	return false
}

// SetUseIpv6EnableDdns gets a reference to the given bool and assigns it to the UseIpv6EnableDdns field.
func (o *Roaminghost) SetUseIpv6EnableDdns(v bool) {
	o.UseIpv6EnableDdns = &v
}

// GetUseIpv6Options returns the UseIpv6Options field value if set, zero value otherwise.
func (o *Roaminghost) GetUseIpv6Options() bool {
	if o == nil || IsNil(o.UseIpv6Options) {
		var ret bool
		return ret
	}
	return *o.UseIpv6Options
}

// GetUseIpv6OptionsOk returns a tuple with the UseIpv6Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseIpv6OptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6Options) {
		return nil, false
	}
	return o.UseIpv6Options, true
}

// HasUseIpv6Options returns a boolean if a field has been set.
func (o *Roaminghost) HasUseIpv6Options() bool {
	if o != nil && !IsNil(o.UseIpv6Options) {
		return true
	}

	return false
}

// SetUseIpv6Options gets a reference to the given bool and assigns it to the UseIpv6Options field.
func (o *Roaminghost) SetUseIpv6Options(v bool) {
	o.UseIpv6Options = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Roaminghost) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Roaminghost) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Roaminghost) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Roaminghost) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Roaminghost) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Roaminghost) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *Roaminghost) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *Roaminghost) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *Roaminghost) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Roaminghost) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Roaminghost) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Roaminghost) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *Roaminghost) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *Roaminghost) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *Roaminghost) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *Roaminghost) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roaminghost) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *Roaminghost) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *Roaminghost) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o Roaminghost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Roaminghost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddressType) {
		toSerialize["address_type"] = o.AddressType
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.ClientIdentifierPrependZero) {
		toSerialize["client_identifier_prepend_zero"] = o.ClientIdentifierPrependZero
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsHostname) {
		toSerialize["ddns_hostname"] = o.DdnsHostname
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DhcpClientIdentifier) {
		toSerialize["dhcp_client_identifier"] = o.DhcpClientIdentifier
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.ForceRoamingHostname) {
		toSerialize["force_roaming_hostname"] = o.ForceRoamingHostname
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.Ipv6ClientHostname) {
		toSerialize["ipv6_client_hostname"] = o.Ipv6ClientHostname
	}
	if !IsNil(o.Ipv6DdnsDomainname) {
		toSerialize["ipv6_ddns_domainname"] = o.Ipv6DdnsDomainname
	}
	if !IsNil(o.Ipv6DdnsHostname) {
		toSerialize["ipv6_ddns_hostname"] = o.Ipv6DdnsHostname
	}
	if !IsNil(o.Ipv6DomainName) {
		toSerialize["ipv6_domain_name"] = o.Ipv6DomainName
	}
	if !IsNil(o.Ipv6DomainNameServers) {
		toSerialize["ipv6_domain_name_servers"] = o.Ipv6DomainNameServers
	}
	if !IsNil(o.Ipv6Duid) {
		toSerialize["ipv6_duid"] = o.Ipv6Duid
	}
	if !IsNil(o.Ipv6EnableDdns) {
		toSerialize["ipv6_enable_ddns"] = o.Ipv6EnableDdns
	}
	if !IsNil(o.Ipv6ForceRoamingHostname) {
		toSerialize["ipv6_force_roaming_hostname"] = o.Ipv6ForceRoamingHostname
	}
	if !IsNil(o.Ipv6MatchOption) {
		toSerialize["ipv6_match_option"] = o.Ipv6MatchOption
	}
	if !IsNil(o.Ipv6Options) {
		toSerialize["ipv6_options"] = o.Ipv6Options
	}
	if !IsNil(o.Ipv6Template) {
		toSerialize["ipv6_template"] = o.Ipv6Template
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MatchClient) {
		toSerialize["match_client"] = o.MatchClient
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIpv6DdnsDomainname) {
		toSerialize["use_ipv6_ddns_domainname"] = o.UseIpv6DdnsDomainname
	}
	if !IsNil(o.UseIpv6DomainName) {
		toSerialize["use_ipv6_domain_name"] = o.UseIpv6DomainName
	}
	if !IsNil(o.UseIpv6DomainNameServers) {
		toSerialize["use_ipv6_domain_name_servers"] = o.UseIpv6DomainNameServers
	}
	if !IsNil(o.UseIpv6EnableDdns) {
		toSerialize["use_ipv6_enable_ddns"] = o.UseIpv6EnableDdns
	}
	if !IsNil(o.UseIpv6Options) {
		toSerialize["use_ipv6_options"] = o.UseIpv6Options
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableRoaminghost struct {
	value *Roaminghost
	isSet bool
}

func (v NullableRoaminghost) Get() *Roaminghost {
	return v.value
}

func (v *NullableRoaminghost) Set(val *Roaminghost) {
	v.value = val
	v.isSet = true
}

func (v NullableRoaminghost) IsSet() bool {
	return v.isSet
}

func (v *NullableRoaminghost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoaminghost(val *Roaminghost) *NullableRoaminghost {
	return &NullableRoaminghost{value: val, isSet: true}
}

func (v NullableRoaminghost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoaminghost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
