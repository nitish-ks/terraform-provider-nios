/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Sharednetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sharednetwork{}

// Sharednetwork struct for Sharednetwork
type Sharednetwork struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Authority for the shared network.
	Authority *bool `json:"authority,omitempty"`
	// The bootfile name for the shared network. You can configure the DHCP server to support clients that use the boot file name option in their DHCPREQUEST messages.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the shared network. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// Comment for the shared network, maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether only the DHCP server is allowed to update DNS, regardless of the DHCP clients requests. Note that changes for this field take effect only if ddns_use_option81 is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a shared network object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// By default, the DHCP server does not update DNS when it allocates a fixed address to a client. You can configure the DHCP server to update the A and PTR records of a client with a fixed address. When this feature is enabled and the DHCP server adds A and PTR records for a fixed address, the DHCP server never discards the records.
	DdnsUpdateFixedAddresses *bool `json:"ddns_update_fixed_addresses,omitempty"`
	// The support for DHCP Option 81 at the shared network level.
	DdnsUseOption81 *bool `json:"ddns_use_option81,omitempty"`
	// If set to true, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The percentage of the total DHCP utilization of the networks belonging to the shared network multiplied by 1000. This is the percentage of the total number of available IP addresses from all the networks belonging to the shared network versus the total number of all IP addresses in all of the networks in the shared network.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
	// A string describing the utilization level of the shared network.
	DhcpUtilizationStatus *string `json:"dhcp_utilization_status,omitempty"`
	// Determines whether a shared network is disabled or not. When this is set to False, the shared network is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The total number of DHCP leases issued for the shared network.
	DynamicHosts *int64 `json:"dynamic_hosts,omitempty"`
	// The dynamic DNS updates flag of a shared network object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// If set to true, the client identifier will be ignored.
	IgnoreClientIdentifier *bool `json:"ignore_client_identifier,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Indicates whether the appliance will ignore DHCP client IDs or MAC addresses. Valid values are \"NONE\", \"CLIENT\", or \"MACADDR\". The default is \"NONE\".
	IgnoreId *string `json:"ignore_id,omitempty"`
	// A list of MAC addresses the appliance will ignore.
	IgnoreMacAddresses []string `json:"ignore_mac_addresses,omitempty"`
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *string `json:"lease_scavenge_time,omitempty"`
	// This field contains the logic filters to be applied on the this shared network. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []SharednetworkLogicFilterRules `json:"logic_filter_rules,omitempty"`
	MsAdUserData     *SharednetworkMsAdUserData      `json:"ms_ad_user_data,omitempty"`
	// The name of the IPv6 Shared Network.
	Name *string `json:"name,omitempty"`
	// The name of the network view in which this shared network resides.
	NetworkView *string `json:"network_view,omitempty"`
	// A list of networks belonging to the shared network Each individual list item must be specified as an object containing a '_ref' parameter to a network reference, for example:: [{ \"_ref\": \"network/ZG5zLm5ldHdvcmskMTAuMwLvMTYvMA\", }] if the reference of the wanted network is not known, it is possible to specify search parameters for the network instead in the following way:: [{ \"_ref\": { 'network': '10.0.0.0/8', } }] note that in this case the search must match exactly one network for the assignment to be successful.
	Networks []string `json:"networks,omitempty"`
	// The name in FQDN and/or IPv4 Address of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []SharednetworkOptions `json:"options,omitempty"`
	// The PXE lease time value of a shared network object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// The number of static DHCP addresses configured in the shared network.
	StaticHosts *int64 `json:"static_hosts,omitempty"`
	// The total number of DHCP addresses configured in the shared network.
	TotalHosts *int64 `json:"total_hosts,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: authority
	UseAuthority *bool `json:"use_authority,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: ddns_update_fixed_addresses
	UseDdnsUpdateFixedAddresses *bool `json:"use_ddns_update_fixed_addresses,omitempty"`
	// Use flag for: ddns_use_option81
	UseDdnsUseOption81 *bool `json:"use_ddns_use_option81,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: ignore_client_identifier
	UseIgnoreClientIdentifier *bool `json:"use_ignore_client_identifier,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ignore_id
	UseIgnoreId *bool `json:"use_ignore_id,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
}

// NewSharednetwork instantiates a new Sharednetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharednetwork() *Sharednetwork {
	this := Sharednetwork{}
	return &this
}

// NewSharednetworkWithDefaults instantiates a new Sharednetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharednetworkWithDefaults() *Sharednetwork {
	this := Sharednetwork{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Sharednetwork) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Sharednetwork) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Sharednetwork) SetRef(v string) {
	o.Ref = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Sharednetwork) GetAuthority() bool {
	if o == nil || IsNil(o.Authority) {
		var ret bool
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *Sharednetwork) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given bool and assigns it to the Authority field.
func (o *Sharednetwork) SetAuthority(v bool) {
	o.Authority = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Sharednetwork) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Sharednetwork) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Sharednetwork) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Sharednetwork) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Sharednetwork) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Sharednetwork) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Sharednetwork) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Sharednetwork) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Sharednetwork) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Sharednetwork) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Sharednetwork) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Sharednetwork) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Sharednetwork) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Sharednetwork) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Sharednetwork) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Sharednetwork) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Sharednetwork) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Sharednetwork) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDdnsUpdateFixedAddresses returns the DdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Sharednetwork) GetDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateFixedAddresses
}

// GetDdnsUpdateFixedAddressesOk returns a tuple with the DdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.DdnsUpdateFixedAddresses, true
}

// HasDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Sharednetwork) HasDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.DdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the DdnsUpdateFixedAddresses field.
func (o *Sharednetwork) SetDdnsUpdateFixedAddresses(v bool) {
	o.DdnsUpdateFixedAddresses = &v
}

// GetDdnsUseOption81 returns the DdnsUseOption81 field value if set, zero value otherwise.
func (o *Sharednetwork) GetDdnsUseOption81() bool {
	if o == nil || IsNil(o.DdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.DdnsUseOption81
}

// GetDdnsUseOption81Ok returns a tuple with the DdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseOption81) {
		return nil, false
	}
	return o.DdnsUseOption81, true
}

// HasDdnsUseOption81 returns a boolean if a field has been set.
func (o *Sharednetwork) HasDdnsUseOption81() bool {
	if o != nil && !IsNil(o.DdnsUseOption81) {
		return true
	}

	return false
}

// SetDdnsUseOption81 gets a reference to the given bool and assigns it to the DdnsUseOption81 field.
func (o *Sharednetwork) SetDdnsUseOption81(v bool) {
	o.DdnsUseOption81 = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Sharednetwork) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Sharednetwork) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Sharednetwork) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *Sharednetwork) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *Sharednetwork) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *Sharednetwork) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

// GetDhcpUtilizationStatus returns the DhcpUtilizationStatus field value if set, zero value otherwise.
func (o *Sharednetwork) GetDhcpUtilizationStatus() string {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		var ret string
		return ret
	}
	return *o.DhcpUtilizationStatus
}

// GetDhcpUtilizationStatusOk returns a tuple with the DhcpUtilizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDhcpUtilizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		return nil, false
	}
	return o.DhcpUtilizationStatus, true
}

// HasDhcpUtilizationStatus returns a boolean if a field has been set.
func (o *Sharednetwork) HasDhcpUtilizationStatus() bool {
	if o != nil && !IsNil(o.DhcpUtilizationStatus) {
		return true
	}

	return false
}

// SetDhcpUtilizationStatus gets a reference to the given string and assigns it to the DhcpUtilizationStatus field.
func (o *Sharednetwork) SetDhcpUtilizationStatus(v string) {
	o.DhcpUtilizationStatus = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Sharednetwork) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Sharednetwork) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Sharednetwork) SetDisable(v bool) {
	o.Disable = &v
}

// GetDynamicHosts returns the DynamicHosts field value if set, zero value otherwise.
func (o *Sharednetwork) GetDynamicHosts() int64 {
	if o == nil || IsNil(o.DynamicHosts) {
		var ret int64
		return ret
	}
	return *o.DynamicHosts
}

// GetDynamicHostsOk returns a tuple with the DynamicHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetDynamicHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.DynamicHosts) {
		return nil, false
	}
	return o.DynamicHosts, true
}

// HasDynamicHosts returns a boolean if a field has been set.
func (o *Sharednetwork) HasDynamicHosts() bool {
	if o != nil && !IsNil(o.DynamicHosts) {
		return true
	}

	return false
}

// SetDynamicHosts gets a reference to the given int64 and assigns it to the DynamicHosts field.
func (o *Sharednetwork) SetDynamicHosts(v int64) {
	o.DynamicHosts = &v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Sharednetwork) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Sharednetwork) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Sharednetwork) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Sharednetwork) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Sharednetwork) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Sharednetwork) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Sharednetwork) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Sharednetwork) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Sharednetwork) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIgnoreClientIdentifier returns the IgnoreClientIdentifier field value if set, zero value otherwise.
func (o *Sharednetwork) GetIgnoreClientIdentifier() bool {
	if o == nil || IsNil(o.IgnoreClientIdentifier) {
		var ret bool
		return ret
	}
	return *o.IgnoreClientIdentifier
}

// GetIgnoreClientIdentifierOk returns a tuple with the IgnoreClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetIgnoreClientIdentifierOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreClientIdentifier) {
		return nil, false
	}
	return o.IgnoreClientIdentifier, true
}

// HasIgnoreClientIdentifier returns a boolean if a field has been set.
func (o *Sharednetwork) HasIgnoreClientIdentifier() bool {
	if o != nil && !IsNil(o.IgnoreClientIdentifier) {
		return true
	}

	return false
}

// SetIgnoreClientIdentifier gets a reference to the given bool and assigns it to the IgnoreClientIdentifier field.
func (o *Sharednetwork) SetIgnoreClientIdentifier(v bool) {
	o.IgnoreClientIdentifier = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Sharednetwork) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Sharednetwork) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Sharednetwork) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIgnoreId returns the IgnoreId field value if set, zero value otherwise.
func (o *Sharednetwork) GetIgnoreId() string {
	if o == nil || IsNil(o.IgnoreId) {
		var ret string
		return ret
	}
	return *o.IgnoreId
}

// GetIgnoreIdOk returns a tuple with the IgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetIgnoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreId) {
		return nil, false
	}
	return o.IgnoreId, true
}

// HasIgnoreId returns a boolean if a field has been set.
func (o *Sharednetwork) HasIgnoreId() bool {
	if o != nil && !IsNil(o.IgnoreId) {
		return true
	}

	return false
}

// SetIgnoreId gets a reference to the given string and assigns it to the IgnoreId field.
func (o *Sharednetwork) SetIgnoreId(v string) {
	o.IgnoreId = &v
}

// GetIgnoreMacAddresses returns the IgnoreMacAddresses field value if set, zero value otherwise.
func (o *Sharednetwork) GetIgnoreMacAddresses() []string {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		var ret []string
		return ret
	}
	return o.IgnoreMacAddresses
}

// GetIgnoreMacAddressesOk returns a tuple with the IgnoreMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetIgnoreMacAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		return nil, false
	}
	return o.IgnoreMacAddresses, true
}

// HasIgnoreMacAddresses returns a boolean if a field has been set.
func (o *Sharednetwork) HasIgnoreMacAddresses() bool {
	if o != nil && !IsNil(o.IgnoreMacAddresses) {
		return true
	}

	return false
}

// SetIgnoreMacAddresses gets a reference to the given []string and assigns it to the IgnoreMacAddresses field.
func (o *Sharednetwork) SetIgnoreMacAddresses(v []string) {
	o.IgnoreMacAddresses = v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *Sharednetwork) GetLeaseScavengeTime() string {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret string
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetLeaseScavengeTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *Sharednetwork) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given string and assigns it to the LeaseScavengeTime field.
func (o *Sharednetwork) SetLeaseScavengeTime(v string) {
	o.LeaseScavengeTime = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Sharednetwork) GetLogicFilterRules() []SharednetworkLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []SharednetworkLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetLogicFilterRulesOk() ([]SharednetworkLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Sharednetwork) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []SharednetworkLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Sharednetwork) SetLogicFilterRules(v []SharednetworkLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Sharednetwork) GetMsAdUserData() SharednetworkMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret SharednetworkMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetMsAdUserDataOk() (*SharednetworkMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Sharednetwork) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given SharednetworkMsAdUserData and assigns it to the MsAdUserData field.
func (o *Sharednetwork) SetMsAdUserData(v SharednetworkMsAdUserData) {
	o.MsAdUserData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sharednetwork) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sharednetwork) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sharednetwork) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Sharednetwork) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Sharednetwork) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Sharednetwork) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *Sharednetwork) GetNetworks() []string {
	if o == nil || IsNil(o.Networks) {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *Sharednetwork) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *Sharednetwork) SetNetworks(v []string) {
	o.Networks = v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Sharednetwork) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Sharednetwork) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Sharednetwork) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Sharednetwork) GetOptions() []SharednetworkOptions {
	if o == nil || IsNil(o.Options) {
		var ret []SharednetworkOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetOptionsOk() ([]SharednetworkOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Sharednetwork) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []SharednetworkOptions and assigns it to the Options field.
func (o *Sharednetwork) SetOptions(v []SharednetworkOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Sharednetwork) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Sharednetwork) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Sharednetwork) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetStaticHosts returns the StaticHosts field value if set, zero value otherwise.
func (o *Sharednetwork) GetStaticHosts() int64 {
	if o == nil || IsNil(o.StaticHosts) {
		var ret int64
		return ret
	}
	return *o.StaticHosts
}

// GetStaticHostsOk returns a tuple with the StaticHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetStaticHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.StaticHosts) {
		return nil, false
	}
	return o.StaticHosts, true
}

// HasStaticHosts returns a boolean if a field has been set.
func (o *Sharednetwork) HasStaticHosts() bool {
	if o != nil && !IsNil(o.StaticHosts) {
		return true
	}

	return false
}

// SetStaticHosts gets a reference to the given int64 and assigns it to the StaticHosts field.
func (o *Sharednetwork) SetStaticHosts(v int64) {
	o.StaticHosts = &v
}

// GetTotalHosts returns the TotalHosts field value if set, zero value otherwise.
func (o *Sharednetwork) GetTotalHosts() int64 {
	if o == nil || IsNil(o.TotalHosts) {
		var ret int64
		return ret
	}
	return *o.TotalHosts
}

// GetTotalHostsOk returns a tuple with the TotalHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetTotalHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHosts) {
		return nil, false
	}
	return o.TotalHosts, true
}

// HasTotalHosts returns a boolean if a field has been set.
func (o *Sharednetwork) HasTotalHosts() bool {
	if o != nil && !IsNil(o.TotalHosts) {
		return true
	}

	return false
}

// SetTotalHosts gets a reference to the given int64 and assigns it to the TotalHosts field.
func (o *Sharednetwork) SetTotalHosts(v int64) {
	o.TotalHosts = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Sharednetwork) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Sharednetwork) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Sharednetwork) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseAuthority returns the UseAuthority field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseAuthority() bool {
	if o == nil || IsNil(o.UseAuthority) {
		var ret bool
		return ret
	}
	return *o.UseAuthority
}

// GetUseAuthorityOk returns a tuple with the UseAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAuthority) {
		return nil, false
	}
	return o.UseAuthority, true
}

// HasUseAuthority returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseAuthority() bool {
	if o != nil && !IsNil(o.UseAuthority) {
		return true
	}

	return false
}

// SetUseAuthority gets a reference to the given bool and assigns it to the UseAuthority field.
func (o *Sharednetwork) SetUseAuthority(v bool) {
	o.UseAuthority = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Sharednetwork) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Sharednetwork) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Sharednetwork) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Sharednetwork) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDdnsUpdateFixedAddresses returns the UseDdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUpdateFixedAddresses
}

// GetUseDdnsUpdateFixedAddressesOk returns a tuple with the UseDdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.UseDdnsUpdateFixedAddresses, true
}

// HasUseDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.UseDdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetUseDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the UseDdnsUpdateFixedAddresses field.
func (o *Sharednetwork) SetUseDdnsUpdateFixedAddresses(v bool) {
	o.UseDdnsUpdateFixedAddresses = &v
}

// GetUseDdnsUseOption81 returns the UseDdnsUseOption81 field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseDdnsUseOption81() bool {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUseOption81
}

// GetUseDdnsUseOption81Ok returns a tuple with the UseDdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		return nil, false
	}
	return o.UseDdnsUseOption81, true
}

// HasUseDdnsUseOption81 returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseDdnsUseOption81() bool {
	if o != nil && !IsNil(o.UseDdnsUseOption81) {
		return true
	}

	return false
}

// SetUseDdnsUseOption81 gets a reference to the given bool and assigns it to the UseDdnsUseOption81 field.
func (o *Sharednetwork) SetUseDdnsUseOption81(v bool) {
	o.UseDdnsUseOption81 = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Sharednetwork) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Sharednetwork) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseIgnoreClientIdentifier returns the UseIgnoreClientIdentifier field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseIgnoreClientIdentifier() bool {
	if o == nil || IsNil(o.UseIgnoreClientIdentifier) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreClientIdentifier
}

// GetUseIgnoreClientIdentifierOk returns a tuple with the UseIgnoreClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseIgnoreClientIdentifierOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreClientIdentifier) {
		return nil, false
	}
	return o.UseIgnoreClientIdentifier, true
}

// HasUseIgnoreClientIdentifier returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseIgnoreClientIdentifier() bool {
	if o != nil && !IsNil(o.UseIgnoreClientIdentifier) {
		return true
	}

	return false
}

// SetUseIgnoreClientIdentifier gets a reference to the given bool and assigns it to the UseIgnoreClientIdentifier field.
func (o *Sharednetwork) SetUseIgnoreClientIdentifier(v bool) {
	o.UseIgnoreClientIdentifier = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Sharednetwork) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIgnoreId returns the UseIgnoreId field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseIgnoreId() bool {
	if o == nil || IsNil(o.UseIgnoreId) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreId
}

// GetUseIgnoreIdOk returns a tuple with the UseIgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseIgnoreIdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreId) {
		return nil, false
	}
	return o.UseIgnoreId, true
}

// HasUseIgnoreId returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseIgnoreId() bool {
	if o != nil && !IsNil(o.UseIgnoreId) {
		return true
	}

	return false
}

// SetUseIgnoreId gets a reference to the given bool and assigns it to the UseIgnoreId field.
func (o *Sharednetwork) SetUseIgnoreId(v bool) {
	o.UseIgnoreId = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *Sharednetwork) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Sharednetwork) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Sharednetwork) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Sharednetwork) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Sharednetwork) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Sharednetwork) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Sharednetwork) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Sharednetwork) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharednetwork) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Sharednetwork) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Sharednetwork) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

func (o Sharednetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sharednetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DdnsUpdateFixedAddresses) {
		toSerialize["ddns_update_fixed_addresses"] = o.DdnsUpdateFixedAddresses
	}
	if !IsNil(o.DdnsUseOption81) {
		toSerialize["ddns_use_option81"] = o.DdnsUseOption81
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DhcpUtilizationStatus) {
		toSerialize["dhcp_utilization_status"] = o.DhcpUtilizationStatus
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DynamicHosts) {
		toSerialize["dynamic_hosts"] = o.DynamicHosts
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.IgnoreClientIdentifier) {
		toSerialize["ignore_client_identifier"] = o.IgnoreClientIdentifier
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IgnoreId) {
		toSerialize["ignore_id"] = o.IgnoreId
	}
	if !IsNil(o.IgnoreMacAddresses) {
		toSerialize["ignore_mac_addresses"] = o.IgnoreMacAddresses
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.StaticHosts) {
		toSerialize["static_hosts"] = o.StaticHosts
	}
	if !IsNil(o.TotalHosts) {
		toSerialize["total_hosts"] = o.TotalHosts
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseAuthority) {
		toSerialize["use_authority"] = o.UseAuthority
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDdnsUpdateFixedAddresses) {
		toSerialize["use_ddns_update_fixed_addresses"] = o.UseDdnsUpdateFixedAddresses
	}
	if !IsNil(o.UseDdnsUseOption81) {
		toSerialize["use_ddns_use_option81"] = o.UseDdnsUseOption81
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseIgnoreClientIdentifier) {
		toSerialize["use_ignore_client_identifier"] = o.UseIgnoreClientIdentifier
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIgnoreId) {
		toSerialize["use_ignore_id"] = o.UseIgnoreId
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	return toSerialize, nil
}

type NullableSharednetwork struct {
	value *Sharednetwork
	isSet bool
}

func (v NullableSharednetwork) Get() *Sharednetwork {
	return v.value
}

func (v *NullableSharednetwork) Set(val *Sharednetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableSharednetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableSharednetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharednetwork(val *Sharednetwork) *NullableSharednetwork {
	return &NullableSharednetwork{value: val, isSet: true}
}

func (v NullableSharednetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharednetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
