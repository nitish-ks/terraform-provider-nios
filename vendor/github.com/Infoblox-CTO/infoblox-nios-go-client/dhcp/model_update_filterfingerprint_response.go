/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// UpdateFilterfingerprintResponse - struct for UpdateFilterfingerprintResponse
type UpdateFilterfingerprintResponse struct {
	UpdateFilterfingerprintResponseAsObject *UpdateFilterfingerprintResponseAsObject
	String                                  *string
}

// UpdateFilterfingerprintResponseAsObjectAsUpdateFilterfingerprintResponse is a convenience function that returns UpdateFilterfingerprintResponseAsObject wrapped in UpdateFilterfingerprintResponse
func UpdateFilterfingerprintResponseAsObjectAsUpdateFilterfingerprintResponse(v *UpdateFilterfingerprintResponseAsObject) UpdateFilterfingerprintResponse {
	return UpdateFilterfingerprintResponse{
		UpdateFilterfingerprintResponseAsObject: v,
	}
}

// stringAsUpdateFilterfingerprintResponse is a convenience function that returns string wrapped in UpdateFilterfingerprintResponse
func StringAsUpdateFilterfingerprintResponse(v *string) UpdateFilterfingerprintResponse {
	return UpdateFilterfingerprintResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateFilterfingerprintResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateFilterfingerprintResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateFilterfingerprintResponseAsObject)
	if err == nil {
		jsonUpdateFilterfingerprintResponseAsObject, _ := json.Marshal(dst.UpdateFilterfingerprintResponseAsObject)
		if string(jsonUpdateFilterfingerprintResponseAsObject) == "{}" { // empty struct
			dst.UpdateFilterfingerprintResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateFilterfingerprintResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateFilterfingerprintResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateFilterfingerprintResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateFilterfingerprintResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateFilterfingerprintResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateFilterfingerprintResponseAsObject != nil {
		return json.Marshal(&src.UpdateFilterfingerprintResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateFilterfingerprintResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateFilterfingerprintResponseAsObject != nil {
		return obj.UpdateFilterfingerprintResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateFilterfingerprintResponse struct {
	value *UpdateFilterfingerprintResponse
	isSet bool
}

func (v NullableUpdateFilterfingerprintResponse) Get() *UpdateFilterfingerprintResponse {
	return v.value
}

func (v *NullableUpdateFilterfingerprintResponse) Set(val *UpdateFilterfingerprintResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFilterfingerprintResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFilterfingerprintResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFilterfingerprintResponse(val *UpdateFilterfingerprintResponse) *NullableUpdateFilterfingerprintResponse {
	return &NullableUpdateFilterfingerprintResponse{value: val, isSet: true}
}

func (v NullableUpdateFilterfingerprintResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFilterfingerprintResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
