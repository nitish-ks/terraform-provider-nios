/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the UpdateIpv6rangeResponseAsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIpv6rangeResponseAsObject{}

// UpdateIpv6rangeResponseAsObject The response format to update __Ipv6range__ in object format.
type UpdateIpv6rangeResponseAsObject struct {
	Result               *Ipv6range `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateIpv6rangeResponseAsObject UpdateIpv6rangeResponseAsObject

// NewUpdateIpv6rangeResponseAsObject instantiates a new UpdateIpv6rangeResponseAsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIpv6rangeResponseAsObject() *UpdateIpv6rangeResponseAsObject {
	this := UpdateIpv6rangeResponseAsObject{}
	return &this
}

// NewUpdateIpv6rangeResponseAsObjectWithDefaults instantiates a new UpdateIpv6rangeResponseAsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIpv6rangeResponseAsObjectWithDefaults() *UpdateIpv6rangeResponseAsObject {
	this := UpdateIpv6rangeResponseAsObject{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *UpdateIpv6rangeResponseAsObject) GetResult() Ipv6range {
	if o == nil || IsNil(o.Result) {
		var ret Ipv6range
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpv6rangeResponseAsObject) GetResultOk() (*Ipv6range, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *UpdateIpv6rangeResponseAsObject) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given Ipv6range and assigns it to the Result field.
func (o *UpdateIpv6rangeResponseAsObject) SetResult(v Ipv6range) {
	o.Result = &v
}

func (o UpdateIpv6rangeResponseAsObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIpv6rangeResponseAsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateIpv6rangeResponseAsObject) UnmarshalJSON(data []byte) (err error) {
	varUpdateIpv6rangeResponseAsObject := _UpdateIpv6rangeResponseAsObject{}

	err = json.Unmarshal(data, &varUpdateIpv6rangeResponseAsObject)

	if err != nil {
		return err
	}

	*o = UpdateIpv6rangeResponseAsObject(varUpdateIpv6rangeResponseAsObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateIpv6rangeResponseAsObject struct {
	value *UpdateIpv6rangeResponseAsObject
	isSet bool
}

func (v NullableUpdateIpv6rangeResponseAsObject) Get() *UpdateIpv6rangeResponseAsObject {
	return v.value
}

func (v *NullableUpdateIpv6rangeResponseAsObject) Set(val *UpdateIpv6rangeResponseAsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIpv6rangeResponseAsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIpv6rangeResponseAsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIpv6rangeResponseAsObject(val *UpdateIpv6rangeResponseAsObject) *NullableUpdateIpv6rangeResponseAsObject {
	return &NullableUpdateIpv6rangeResponseAsObject{value: val, isSet: true}
}

func (v NullableUpdateIpv6rangeResponseAsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIpv6rangeResponseAsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
