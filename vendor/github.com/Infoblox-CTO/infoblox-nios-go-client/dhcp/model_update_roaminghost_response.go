/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// UpdateRoaminghostResponse - struct for UpdateRoaminghostResponse
type UpdateRoaminghostResponse struct {
	UpdateRoaminghostResponseAsObject *UpdateRoaminghostResponseAsObject
	String                            *string
}

// UpdateRoaminghostResponseAsObjectAsUpdateRoaminghostResponse is a convenience function that returns UpdateRoaminghostResponseAsObject wrapped in UpdateRoaminghostResponse
func UpdateRoaminghostResponseAsObjectAsUpdateRoaminghostResponse(v *UpdateRoaminghostResponseAsObject) UpdateRoaminghostResponse {
	return UpdateRoaminghostResponse{
		UpdateRoaminghostResponseAsObject: v,
	}
}

// stringAsUpdateRoaminghostResponse is a convenience function that returns string wrapped in UpdateRoaminghostResponse
func StringAsUpdateRoaminghostResponse(v *string) UpdateRoaminghostResponse {
	return UpdateRoaminghostResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRoaminghostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRoaminghostResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRoaminghostResponseAsObject)
	if err == nil {
		jsonUpdateRoaminghostResponseAsObject, _ := json.Marshal(dst.UpdateRoaminghostResponseAsObject)
		if string(jsonUpdateRoaminghostResponseAsObject) == "{}" { // empty struct
			dst.UpdateRoaminghostResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRoaminghostResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRoaminghostResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRoaminghostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRoaminghostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRoaminghostResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRoaminghostResponseAsObject != nil {
		return json.Marshal(&src.UpdateRoaminghostResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRoaminghostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRoaminghostResponseAsObject != nil {
		return obj.UpdateRoaminghostResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRoaminghostResponse struct {
	value *UpdateRoaminghostResponse
	isSet bool
}

func (v NullableUpdateRoaminghostResponse) Get() *UpdateRoaminghostResponse {
	return v.value
}

func (v *NullableUpdateRoaminghostResponse) Set(val *UpdateRoaminghostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRoaminghostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRoaminghostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRoaminghostResponse(val *UpdateRoaminghostResponse) *NullableUpdateRoaminghostResponse {
	return &NullableUpdateRoaminghostResponse{value: val, isSet: true}
}

func (v NullableUpdateRoaminghostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRoaminghostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
