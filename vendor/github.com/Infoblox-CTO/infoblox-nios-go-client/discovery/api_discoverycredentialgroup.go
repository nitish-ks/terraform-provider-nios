/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DiscoverycredentialgroupAPI interface {
	/*
		Get Retrieve discovery:credentialgroup objects

		Returns a list of discovery:credentialgroup objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DiscoverycredentialgroupAPIGetRequest
	*/
	Get(ctx context.Context) DiscoverycredentialgroupAPIGetRequest

	// GetExecute executes the request
	//  @return ListDiscoveryCredentialgroupResponse
	GetExecute(r DiscoverycredentialgroupAPIGetRequest) (*ListDiscoveryCredentialgroupResponse, *http.Response, error)
	/*
		Post Create a discovery:credentialgroup object

		Creates a new discovery:credentialgroup object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DiscoverycredentialgroupAPIPostRequest
	*/
	Post(ctx context.Context) DiscoverycredentialgroupAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDiscoveryCredentialgroupResponse
	PostExecute(r DiscoverycredentialgroupAPIPostRequest) (*CreateDiscoveryCredentialgroupResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a discovery:credentialgroup object

		Deletes a specific discovery:credentialgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the discovery:credentialgroup object
		@return DiscoverycredentialgroupAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DiscoverycredentialgroupAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific discovery:credentialgroup object

		Returns a specific discovery:credentialgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the discovery:credentialgroup object
		@return DiscoverycredentialgroupAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDiscoveryCredentialgroupResponse
	ReferenceGetExecute(r DiscoverycredentialgroupAPIReferenceGetRequest) (*GetDiscoveryCredentialgroupResponse, *http.Response, error)
	/*
		ReferencePut Update a discovery:credentialgroup object

		Updates a specific discovery:credentialgroup object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the discovery:credentialgroup object
		@return DiscoverycredentialgroupAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDiscoveryCredentialgroupResponse
	ReferencePutExecute(r DiscoverycredentialgroupAPIReferencePutRequest) (*UpdateDiscoveryCredentialgroupResponse, *http.Response, error)
}

// DiscoverycredentialgroupAPIService DiscoverycredentialgroupAPI service
type DiscoverycredentialgroupAPIService internal.Service

type DiscoverycredentialgroupAPIGetRequest struct {
	ctx            context.Context
	ApiService     DiscoverycredentialgroupAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DiscoverycredentialgroupAPIGetRequest) ReturnFields(returnFields string) DiscoverycredentialgroupAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverycredentialgroupAPIGetRequest) ReturnFields2(returnFields2 string) DiscoverycredentialgroupAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DiscoverycredentialgroupAPIGetRequest) MaxResults(maxResults int32) DiscoverycredentialgroupAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DiscoverycredentialgroupAPIGetRequest) ReturnAsObject(returnAsObject int32) DiscoverycredentialgroupAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DiscoverycredentialgroupAPIGetRequest) Paging(paging int32) DiscoverycredentialgroupAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DiscoverycredentialgroupAPIGetRequest) PageId(pageId string) DiscoverycredentialgroupAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DiscoverycredentialgroupAPIGetRequest) Filters(filters map[string]interface{}) DiscoverycredentialgroupAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DiscoverycredentialgroupAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DiscoverycredentialgroupAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DiscoverycredentialgroupAPIGetRequest) Execute() (*ListDiscoveryCredentialgroupResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve discovery:credentialgroup objects

Returns a list of discovery:credentialgroup objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DiscoverycredentialgroupAPIGetRequest
*/
func (a *DiscoverycredentialgroupAPIService) Get(ctx context.Context) DiscoverycredentialgroupAPIGetRequest {
	return DiscoverycredentialgroupAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDiscoveryCredentialgroupResponse
func (a *DiscoverycredentialgroupAPIService) GetExecute(r DiscoverycredentialgroupAPIGetRequest) (*ListDiscoveryCredentialgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDiscoveryCredentialgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverycredentialgroupAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:credentialgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscoverycredentialgroupAPIPostRequest struct {
	ctx                      context.Context
	ApiService               DiscoverycredentialgroupAPI
	discoveryCredentialgroup *DiscoveryCredentialgroup
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to create
func (r DiscoverycredentialgroupAPIPostRequest) DiscoveryCredentialgroup(discoveryCredentialgroup DiscoveryCredentialgroup) DiscoverycredentialgroupAPIPostRequest {
	r.discoveryCredentialgroup = &discoveryCredentialgroup
	return r
}

// Enter the field names followed by comma
func (r DiscoverycredentialgroupAPIPostRequest) ReturnFields(returnFields string) DiscoverycredentialgroupAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverycredentialgroupAPIPostRequest) ReturnFields2(returnFields2 string) DiscoverycredentialgroupAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DiscoverycredentialgroupAPIPostRequest) ReturnAsObject(returnAsObject int32) DiscoverycredentialgroupAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DiscoverycredentialgroupAPIPostRequest) Execute() (*CreateDiscoveryCredentialgroupResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a discovery:credentialgroup object

Creates a new discovery:credentialgroup object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DiscoverycredentialgroupAPIPostRequest
*/
func (a *DiscoverycredentialgroupAPIService) Post(ctx context.Context) DiscoverycredentialgroupAPIPostRequest {
	return DiscoverycredentialgroupAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDiscoveryCredentialgroupResponse
func (a *DiscoverycredentialgroupAPIService) PostExecute(r DiscoverycredentialgroupAPIPostRequest) (*CreateDiscoveryCredentialgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDiscoveryCredentialgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverycredentialgroupAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:credentialgroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.discoveryCredentialgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("discoveryCredentialgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.discoveryCredentialgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscoverycredentialgroupAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DiscoverycredentialgroupAPI
	reference  string
}

func (r DiscoverycredentialgroupAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a discovery:credentialgroup object

Deletes a specific discovery:credentialgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the discovery:credentialgroup object
	@return DiscoverycredentialgroupAPIReferenceDeleteRequest
*/
func (a *DiscoverycredentialgroupAPIService) ReferenceDelete(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferenceDeleteRequest {
	return DiscoverycredentialgroupAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DiscoverycredentialgroupAPIService) ReferenceDeleteExecute(r DiscoverycredentialgroupAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverycredentialgroupAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:credentialgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DiscoverycredentialgroupAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DiscoverycredentialgroupAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DiscoverycredentialgroupAPIReferenceGetRequest) ReturnFields(returnFields string) DiscoverycredentialgroupAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverycredentialgroupAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DiscoverycredentialgroupAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DiscoverycredentialgroupAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DiscoverycredentialgroupAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DiscoverycredentialgroupAPIReferenceGetRequest) Execute() (*GetDiscoveryCredentialgroupResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific discovery:credentialgroup object

Returns a specific discovery:credentialgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the discovery:credentialgroup object
	@return DiscoverycredentialgroupAPIReferenceGetRequest
*/
func (a *DiscoverycredentialgroupAPIService) ReferenceGet(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferenceGetRequest {
	return DiscoverycredentialgroupAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDiscoveryCredentialgroupResponse
func (a *DiscoverycredentialgroupAPIService) ReferenceGetExecute(r DiscoverycredentialgroupAPIReferenceGetRequest) (*GetDiscoveryCredentialgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDiscoveryCredentialgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverycredentialgroupAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:credentialgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscoverycredentialgroupAPIReferencePutRequest struct {
	ctx                      context.Context
	ApiService               DiscoverycredentialgroupAPI
	reference                string
	discoveryCredentialgroup *DiscoveryCredentialgroup
	returnFields             *string
	returnFields2            *string
	returnAsObject           *int32
}

// Object data to update
func (r DiscoverycredentialgroupAPIReferencePutRequest) DiscoveryCredentialgroup(discoveryCredentialgroup DiscoveryCredentialgroup) DiscoverycredentialgroupAPIReferencePutRequest {
	r.discoveryCredentialgroup = &discoveryCredentialgroup
	return r
}

// Enter the field names followed by comma
func (r DiscoverycredentialgroupAPIReferencePutRequest) ReturnFields(returnFields string) DiscoverycredentialgroupAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverycredentialgroupAPIReferencePutRequest) ReturnFields2(returnFields2 string) DiscoverycredentialgroupAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DiscoverycredentialgroupAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DiscoverycredentialgroupAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DiscoverycredentialgroupAPIReferencePutRequest) Execute() (*UpdateDiscoveryCredentialgroupResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a discovery:credentialgroup object

Updates a specific discovery:credentialgroup object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the discovery:credentialgroup object
	@return DiscoverycredentialgroupAPIReferencePutRequest
*/
func (a *DiscoverycredentialgroupAPIService) ReferencePut(ctx context.Context, reference string) DiscoverycredentialgroupAPIReferencePutRequest {
	return DiscoverycredentialgroupAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDiscoveryCredentialgroupResponse
func (a *DiscoverycredentialgroupAPIService) ReferencePutExecute(r DiscoverycredentialgroupAPIReferencePutRequest) (*UpdateDiscoveryCredentialgroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDiscoveryCredentialgroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverycredentialgroupAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:credentialgroup/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.discoveryCredentialgroup == nil {
		return localVarReturnValue, nil, internal.ReportError("discoveryCredentialgroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.discoveryCredentialgroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
