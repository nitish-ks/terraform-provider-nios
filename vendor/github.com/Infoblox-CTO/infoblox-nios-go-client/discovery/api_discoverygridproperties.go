/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DiscoverygridpropertiesAPI interface {
	/*
		Get Retrieve discovery:gridproperties objects

		Returns a list of discovery:gridproperties objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DiscoverygridpropertiesAPIGetRequest
	*/
	Get(ctx context.Context) DiscoverygridpropertiesAPIGetRequest

	// GetExecute executes the request
	//  @return ListDiscoveryGridpropertiesResponse
	GetExecute(r DiscoverygridpropertiesAPIGetRequest) (*ListDiscoveryGridpropertiesResponse, *http.Response, error)
	/*
		ReferenceGet Get a specific discovery:gridproperties object

		Returns a specific discovery:gridproperties object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the discovery:gridproperties object
		@return DiscoverygridpropertiesAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DiscoverygridpropertiesAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDiscoveryGridpropertiesResponse
	ReferenceGetExecute(r DiscoverygridpropertiesAPIReferenceGetRequest) (*GetDiscoveryGridpropertiesResponse, *http.Response, error)
	/*
		ReferencePut Update a discovery:gridproperties object

		Updates a specific discovery:gridproperties object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the discovery:gridproperties object
		@return DiscoverygridpropertiesAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DiscoverygridpropertiesAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDiscoveryGridpropertiesResponse
	ReferencePutExecute(r DiscoverygridpropertiesAPIReferencePutRequest) (*UpdateDiscoveryGridpropertiesResponse, *http.Response, error)
}

// DiscoverygridpropertiesAPIService DiscoverygridpropertiesAPI service
type DiscoverygridpropertiesAPIService internal.Service

type DiscoverygridpropertiesAPIGetRequest struct {
	ctx            context.Context
	ApiService     DiscoverygridpropertiesAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DiscoverygridpropertiesAPIGetRequest) ReturnFields(returnFields string) DiscoverygridpropertiesAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverygridpropertiesAPIGetRequest) ReturnFields2(returnFields2 string) DiscoverygridpropertiesAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DiscoverygridpropertiesAPIGetRequest) MaxResults(maxResults int32) DiscoverygridpropertiesAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DiscoverygridpropertiesAPIGetRequest) ReturnAsObject(returnAsObject int32) DiscoverygridpropertiesAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DiscoverygridpropertiesAPIGetRequest) Paging(paging int32) DiscoverygridpropertiesAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DiscoverygridpropertiesAPIGetRequest) PageId(pageId string) DiscoverygridpropertiesAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DiscoverygridpropertiesAPIGetRequest) Filters(filters map[string]interface{}) DiscoverygridpropertiesAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DiscoverygridpropertiesAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DiscoverygridpropertiesAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DiscoverygridpropertiesAPIGetRequest) Execute() (*ListDiscoveryGridpropertiesResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve discovery:gridproperties objects

Returns a list of discovery:gridproperties objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DiscoverygridpropertiesAPIGetRequest
*/
func (a *DiscoverygridpropertiesAPIService) Get(ctx context.Context) DiscoverygridpropertiesAPIGetRequest {
	return DiscoverygridpropertiesAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDiscoveryGridpropertiesResponse
func (a *DiscoverygridpropertiesAPIService) GetExecute(r DiscoverygridpropertiesAPIGetRequest) (*ListDiscoveryGridpropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDiscoveryGridpropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverygridpropertiesAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:gridproperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscoverygridpropertiesAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DiscoverygridpropertiesAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DiscoverygridpropertiesAPIReferenceGetRequest) ReturnFields(returnFields string) DiscoverygridpropertiesAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverygridpropertiesAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DiscoverygridpropertiesAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DiscoverygridpropertiesAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DiscoverygridpropertiesAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DiscoverygridpropertiesAPIReferenceGetRequest) Execute() (*GetDiscoveryGridpropertiesResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific discovery:gridproperties object

Returns a specific discovery:gridproperties object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the discovery:gridproperties object
	@return DiscoverygridpropertiesAPIReferenceGetRequest
*/
func (a *DiscoverygridpropertiesAPIService) ReferenceGet(ctx context.Context, reference string) DiscoverygridpropertiesAPIReferenceGetRequest {
	return DiscoverygridpropertiesAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDiscoveryGridpropertiesResponse
func (a *DiscoverygridpropertiesAPIService) ReferenceGetExecute(r DiscoverygridpropertiesAPIReferenceGetRequest) (*GetDiscoveryGridpropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDiscoveryGridpropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverygridpropertiesAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:gridproperties/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DiscoverygridpropertiesAPIReferencePutRequest struct {
	ctx                     context.Context
	ApiService              DiscoverygridpropertiesAPI
	reference               string
	discoveryGridproperties *DiscoveryGridproperties
	returnFields            *string
	returnFields2           *string
	returnAsObject          *int32
}

// Object data to update
func (r DiscoverygridpropertiesAPIReferencePutRequest) DiscoveryGridproperties(discoveryGridproperties DiscoveryGridproperties) DiscoverygridpropertiesAPIReferencePutRequest {
	r.discoveryGridproperties = &discoveryGridproperties
	return r
}

// Enter the field names followed by comma
func (r DiscoverygridpropertiesAPIReferencePutRequest) ReturnFields(returnFields string) DiscoverygridpropertiesAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DiscoverygridpropertiesAPIReferencePutRequest) ReturnFields2(returnFields2 string) DiscoverygridpropertiesAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DiscoverygridpropertiesAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DiscoverygridpropertiesAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DiscoverygridpropertiesAPIReferencePutRequest) Execute() (*UpdateDiscoveryGridpropertiesResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a discovery:gridproperties object

Updates a specific discovery:gridproperties object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the discovery:gridproperties object
	@return DiscoverygridpropertiesAPIReferencePutRequest
*/
func (a *DiscoverygridpropertiesAPIService) ReferencePut(ctx context.Context, reference string) DiscoverygridpropertiesAPIReferencePutRequest {
	return DiscoverygridpropertiesAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDiscoveryGridpropertiesResponse
func (a *DiscoverygridpropertiesAPIService) ReferencePutExecute(r DiscoverygridpropertiesAPIReferencePutRequest) (*UpdateDiscoveryGridpropertiesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDiscoveryGridpropertiesResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DiscoverygridpropertiesAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/discovery:gridproperties/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.discoveryGridproperties == nil {
		return localVarReturnValue, nil, internal.ReportError("discoveryGridproperties is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.discoveryGridproperties
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
