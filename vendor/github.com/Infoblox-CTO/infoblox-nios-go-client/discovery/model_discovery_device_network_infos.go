/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryDeviceNetworkInfos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryDeviceNetworkInfos{}

// DiscoveryDeviceNetworkInfos struct for DiscoveryDeviceNetworkInfos
type DiscoveryDeviceNetworkInfos struct {
	// The ref to the network to which the management IP address belongs.
	Network *string `json:"network,omitempty"`
	// The Network address in format address/cidr.
	NetworkStr           *string `json:"network_str,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiscoveryDeviceNetworkInfos DiscoveryDeviceNetworkInfos

// NewDiscoveryDeviceNetworkInfos instantiates a new DiscoveryDeviceNetworkInfos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryDeviceNetworkInfos() *DiscoveryDeviceNetworkInfos {
	this := DiscoveryDeviceNetworkInfos{}
	return &this
}

// NewDiscoveryDeviceNetworkInfosWithDefaults instantiates a new DiscoveryDeviceNetworkInfos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryDeviceNetworkInfosWithDefaults() *DiscoveryDeviceNetworkInfos {
	this := DiscoveryDeviceNetworkInfos{}
	return &this
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *DiscoveryDeviceNetworkInfos) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceNetworkInfos) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *DiscoveryDeviceNetworkInfos) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *DiscoveryDeviceNetworkInfos) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkStr returns the NetworkStr field value if set, zero value otherwise.
func (o *DiscoveryDeviceNetworkInfos) GetNetworkStr() string {
	if o == nil || IsNil(o.NetworkStr) {
		var ret string
		return ret
	}
	return *o.NetworkStr
}

// GetNetworkStrOk returns a tuple with the NetworkStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceNetworkInfos) GetNetworkStrOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkStr) {
		return nil, false
	}
	return o.NetworkStr, true
}

// HasNetworkStr returns a boolean if a field has been set.
func (o *DiscoveryDeviceNetworkInfos) HasNetworkStr() bool {
	if o != nil && !IsNil(o.NetworkStr) {
		return true
	}

	return false
}

// SetNetworkStr gets a reference to the given string and assigns it to the NetworkStr field.
func (o *DiscoveryDeviceNetworkInfos) SetNetworkStr(v string) {
	o.NetworkStr = &v
}

func (o DiscoveryDeviceNetworkInfos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryDeviceNetworkInfos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkStr) {
		toSerialize["network_str"] = o.NetworkStr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiscoveryDeviceNetworkInfos) UnmarshalJSON(data []byte) (err error) {
	varDiscoveryDeviceNetworkInfos := _DiscoveryDeviceNetworkInfos{}

	err = json.Unmarshal(data, &varDiscoveryDeviceNetworkInfos)

	if err != nil {
		return err
	}

	*o = DiscoveryDeviceNetworkInfos(varDiscoveryDeviceNetworkInfos)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network")
		delete(additionalProperties, "network_str")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiscoveryDeviceNetworkInfos struct {
	value *DiscoveryDeviceNetworkInfos
	isSet bool
}

func (v NullableDiscoveryDeviceNetworkInfos) Get() *DiscoveryDeviceNetworkInfos {
	return v.value
}

func (v *NullableDiscoveryDeviceNetworkInfos) Set(val *DiscoveryDeviceNetworkInfos) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryDeviceNetworkInfos) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryDeviceNetworkInfos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryDeviceNetworkInfos(val *DiscoveryDeviceNetworkInfos) *NullableDiscoveryDeviceNetworkInfos {
	return &NullableDiscoveryDeviceNetworkInfos{value: val, isSet: true}
}

func (v NullableDiscoveryDeviceNetworkInfos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryDeviceNetworkInfos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
