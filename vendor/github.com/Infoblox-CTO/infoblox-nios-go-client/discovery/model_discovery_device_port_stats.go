/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryDevicePortStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryDevicePortStats{}

// DiscoveryDevicePortStats struct for DiscoveryDevicePortStats
type DiscoveryDevicePortStats struct {
	// The total number of available interfaces on this device.
	InterfacesCount *int64 `json:"interfaces_count,omitempty"`
	// The total number of interfaces which have both administrative and operating states as 'UP'.
	AdminUpOperUpCount *int64 `json:"admin_up_oper_up_count,omitempty"`
	// The total number of interfaces which have administrative state 'UP' and oper state 'DOWN'.
	AdminUpOperDownCount *int64 `json:"admin_up_oper_down_count,omitempty"`
	// The total number of interfaces which have administrative state 'DOWN' and operating state 'DOWN'.
	AdminDownOperDownCount *int64 `json:"admin_down_oper_down_count,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _DiscoveryDevicePortStats DiscoveryDevicePortStats

// NewDiscoveryDevicePortStats instantiates a new DiscoveryDevicePortStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryDevicePortStats() *DiscoveryDevicePortStats {
	this := DiscoveryDevicePortStats{}
	return &this
}

// NewDiscoveryDevicePortStatsWithDefaults instantiates a new DiscoveryDevicePortStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryDevicePortStatsWithDefaults() *DiscoveryDevicePortStats {
	this := DiscoveryDevicePortStats{}
	return &this
}

// GetInterfacesCount returns the InterfacesCount field value if set, zero value otherwise.
func (o *DiscoveryDevicePortStats) GetInterfacesCount() int64 {
	if o == nil || IsNil(o.InterfacesCount) {
		var ret int64
		return ret
	}
	return *o.InterfacesCount
}

// GetInterfacesCountOk returns a tuple with the InterfacesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicePortStats) GetInterfacesCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InterfacesCount) {
		return nil, false
	}
	return o.InterfacesCount, true
}

// HasInterfacesCount returns a boolean if a field has been set.
func (o *DiscoveryDevicePortStats) HasInterfacesCount() bool {
	if o != nil && !IsNil(o.InterfacesCount) {
		return true
	}

	return false
}

// SetInterfacesCount gets a reference to the given int64 and assigns it to the InterfacesCount field.
func (o *DiscoveryDevicePortStats) SetInterfacesCount(v int64) {
	o.InterfacesCount = &v
}

// GetAdminUpOperUpCount returns the AdminUpOperUpCount field value if set, zero value otherwise.
func (o *DiscoveryDevicePortStats) GetAdminUpOperUpCount() int64 {
	if o == nil || IsNil(o.AdminUpOperUpCount) {
		var ret int64
		return ret
	}
	return *o.AdminUpOperUpCount
}

// GetAdminUpOperUpCountOk returns a tuple with the AdminUpOperUpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicePortStats) GetAdminUpOperUpCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AdminUpOperUpCount) {
		return nil, false
	}
	return o.AdminUpOperUpCount, true
}

// HasAdminUpOperUpCount returns a boolean if a field has been set.
func (o *DiscoveryDevicePortStats) HasAdminUpOperUpCount() bool {
	if o != nil && !IsNil(o.AdminUpOperUpCount) {
		return true
	}

	return false
}

// SetAdminUpOperUpCount gets a reference to the given int64 and assigns it to the AdminUpOperUpCount field.
func (o *DiscoveryDevicePortStats) SetAdminUpOperUpCount(v int64) {
	o.AdminUpOperUpCount = &v
}

// GetAdminUpOperDownCount returns the AdminUpOperDownCount field value if set, zero value otherwise.
func (o *DiscoveryDevicePortStats) GetAdminUpOperDownCount() int64 {
	if o == nil || IsNil(o.AdminUpOperDownCount) {
		var ret int64
		return ret
	}
	return *o.AdminUpOperDownCount
}

// GetAdminUpOperDownCountOk returns a tuple with the AdminUpOperDownCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicePortStats) GetAdminUpOperDownCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AdminUpOperDownCount) {
		return nil, false
	}
	return o.AdminUpOperDownCount, true
}

// HasAdminUpOperDownCount returns a boolean if a field has been set.
func (o *DiscoveryDevicePortStats) HasAdminUpOperDownCount() bool {
	if o != nil && !IsNil(o.AdminUpOperDownCount) {
		return true
	}

	return false
}

// SetAdminUpOperDownCount gets a reference to the given int64 and assigns it to the AdminUpOperDownCount field.
func (o *DiscoveryDevicePortStats) SetAdminUpOperDownCount(v int64) {
	o.AdminUpOperDownCount = &v
}

// GetAdminDownOperDownCount returns the AdminDownOperDownCount field value if set, zero value otherwise.
func (o *DiscoveryDevicePortStats) GetAdminDownOperDownCount() int64 {
	if o == nil || IsNil(o.AdminDownOperDownCount) {
		var ret int64
		return ret
	}
	return *o.AdminDownOperDownCount
}

// GetAdminDownOperDownCountOk returns a tuple with the AdminDownOperDownCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicePortStats) GetAdminDownOperDownCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AdminDownOperDownCount) {
		return nil, false
	}
	return o.AdminDownOperDownCount, true
}

// HasAdminDownOperDownCount returns a boolean if a field has been set.
func (o *DiscoveryDevicePortStats) HasAdminDownOperDownCount() bool {
	if o != nil && !IsNil(o.AdminDownOperDownCount) {
		return true
	}

	return false
}

// SetAdminDownOperDownCount gets a reference to the given int64 and assigns it to the AdminDownOperDownCount field.
func (o *DiscoveryDevicePortStats) SetAdminDownOperDownCount(v int64) {
	o.AdminDownOperDownCount = &v
}

func (o DiscoveryDevicePortStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryDevicePortStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfacesCount) {
		toSerialize["interfaces_count"] = o.InterfacesCount
	}
	if !IsNil(o.AdminUpOperUpCount) {
		toSerialize["admin_up_oper_up_count"] = o.AdminUpOperUpCount
	}
	if !IsNil(o.AdminUpOperDownCount) {
		toSerialize["admin_up_oper_down_count"] = o.AdminUpOperDownCount
	}
	if !IsNil(o.AdminDownOperDownCount) {
		toSerialize["admin_down_oper_down_count"] = o.AdminDownOperDownCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiscoveryDevicePortStats) UnmarshalJSON(data []byte) (err error) {
	varDiscoveryDevicePortStats := _DiscoveryDevicePortStats{}

	err = json.Unmarshal(data, &varDiscoveryDevicePortStats)

	if err != nil {
		return err
	}

	*o = DiscoveryDevicePortStats(varDiscoveryDevicePortStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "interfaces_count")
		delete(additionalProperties, "admin_up_oper_up_count")
		delete(additionalProperties, "admin_up_oper_down_count")
		delete(additionalProperties, "admin_down_oper_down_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiscoveryDevicePortStats struct {
	value *DiscoveryDevicePortStats
	isSet bool
}

func (v NullableDiscoveryDevicePortStats) Get() *DiscoveryDevicePortStats {
	return v.value
}

func (v *NullableDiscoveryDevicePortStats) Set(val *DiscoveryDevicePortStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryDevicePortStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryDevicePortStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryDevicePortStats(val *DiscoveryDevicePortStats) *NullableDiscoveryDevicePortStats {
	return &NullableDiscoveryDevicePortStats{value: val, isSet: true}
}

func (v NullableDiscoveryDevicePortStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryDevicePortStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
