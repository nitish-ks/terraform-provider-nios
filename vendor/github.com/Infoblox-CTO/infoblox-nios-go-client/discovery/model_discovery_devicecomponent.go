/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryDevicecomponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryDevicecomponent{}

// DiscoveryDevicecomponent struct for DiscoveryDevicecomponent
type DiscoveryDevicecomponent struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The component name.
	ComponentName *string `json:"component_name,omitempty"`
	// The description of the device component.
	Description *string `json:"description,omitempty"`
	// A reference to a device, to which this component belongs to.
	Device *string `json:"device,omitempty"`
	// The model of the device component.
	Model *string `json:"model,omitempty"`
	// The serial number of the device component.
	Serial *string `json:"serial,omitempty"`
	// The type of device component.
	Type *string `json:"type,omitempty"`
}

// NewDiscoveryDevicecomponent instantiates a new DiscoveryDevicecomponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryDevicecomponent() *DiscoveryDevicecomponent {
	this := DiscoveryDevicecomponent{}
	return &this
}

// NewDiscoveryDevicecomponentWithDefaults instantiates a new DiscoveryDevicecomponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryDevicecomponentWithDefaults() *DiscoveryDevicecomponent {
	this := DiscoveryDevicecomponent{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DiscoveryDevicecomponent) SetRef(v string) {
	o.Ref = &v
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName) {
		var ret string
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentName) {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasComponentName() bool {
	if o != nil && !IsNil(o.ComponentName) {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given string and assigns it to the ComponentName field.
func (o *DiscoveryDevicecomponent) SetComponentName(v string) {
	o.ComponentName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DiscoveryDevicecomponent) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DiscoveryDevicecomponent) SetDevice(v string) {
	o.Device = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DiscoveryDevicecomponent) SetModel(v string) {
	o.Model = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *DiscoveryDevicecomponent) SetSerial(v string) {
	o.Serial = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DiscoveryDevicecomponent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicecomponent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DiscoveryDevicecomponent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DiscoveryDevicecomponent) SetType(v string) {
	o.Type = &v
}

func (o DiscoveryDevicecomponent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryDevicecomponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ComponentName) {
		toSerialize["component_name"] = o.ComponentName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDiscoveryDevicecomponent struct {
	value *DiscoveryDevicecomponent
	isSet bool
}

func (v NullableDiscoveryDevicecomponent) Get() *DiscoveryDevicecomponent {
	return v.value
}

func (v *NullableDiscoveryDevicecomponent) Set(val *DiscoveryDevicecomponent) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryDevicecomponent) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryDevicecomponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryDevicecomponent(val *DiscoveryDevicecomponent) *NullableDiscoveryDevicecomponent {
	return &NullableDiscoveryDevicecomponent{value: val, isSet: true}
}

func (v NullableDiscoveryDevicecomponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryDevicecomponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
