/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryDeviceneighbor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryDeviceneighbor{}

// DiscoveryDeviceneighbor struct for DiscoveryDeviceneighbor
type DiscoveryDeviceneighbor struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IPv4 Address or IPv6 Address of the device neighbor.
	Address *string `json:"address,omitempty"`
	// The ref to the management IP address of the device neighbor.
	AddressRef *string `json:"address_ref,omitempty"`
	// The ref to the device to which the device neighbor belongs.
	Device *string `json:"device,omitempty"`
	// The ref to the interface to which the device neighbor belongs.
	Interface *string `json:"interface,omitempty"`
	// The MAC address of the device neighbor.
	Mac *string `json:"mac,omitempty"`
	// The name of the device neighbor.
	Name *string `json:"name,omitempty"`
	// The list of VLAN information associated with the device neighbor.
	VlanInfos []DiscoveryDeviceneighborVlanInfos `json:"vlan_infos,omitempty"`
}

// NewDiscoveryDeviceneighbor instantiates a new DiscoveryDeviceneighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryDeviceneighbor() *DiscoveryDeviceneighbor {
	this := DiscoveryDeviceneighbor{}
	return &this
}

// NewDiscoveryDeviceneighborWithDefaults instantiates a new DiscoveryDeviceneighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryDeviceneighborWithDefaults() *DiscoveryDeviceneighbor {
	this := DiscoveryDeviceneighbor{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DiscoveryDeviceneighbor) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DiscoveryDeviceneighbor) SetAddress(v string) {
	o.Address = &v
}

// GetAddressRef returns the AddressRef field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetAddressRef() string {
	if o == nil || IsNil(o.AddressRef) {
		var ret string
		return ret
	}
	return *o.AddressRef
}

// GetAddressRefOk returns a tuple with the AddressRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetAddressRefOk() (*string, bool) {
	if o == nil || IsNil(o.AddressRef) {
		return nil, false
	}
	return o.AddressRef, true
}

// HasAddressRef returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasAddressRef() bool {
	if o != nil && !IsNil(o.AddressRef) {
		return true
	}

	return false
}

// SetAddressRef gets a reference to the given string and assigns it to the AddressRef field.
func (o *DiscoveryDeviceneighbor) SetAddressRef(v string) {
	o.AddressRef = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DiscoveryDeviceneighbor) SetDevice(v string) {
	o.Device = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *DiscoveryDeviceneighbor) SetInterface(v string) {
	o.Interface = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *DiscoveryDeviceneighbor) SetMac(v string) {
	o.Mac = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiscoveryDeviceneighbor) SetName(v string) {
	o.Name = &v
}

// GetVlanInfos returns the VlanInfos field value if set, zero value otherwise.
func (o *DiscoveryDeviceneighbor) GetVlanInfos() []DiscoveryDeviceneighborVlanInfos {
	if o == nil || IsNil(o.VlanInfos) {
		var ret []DiscoveryDeviceneighborVlanInfos
		return ret
	}
	return o.VlanInfos
}

// GetVlanInfosOk returns a tuple with the VlanInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDeviceneighbor) GetVlanInfosOk() ([]DiscoveryDeviceneighborVlanInfos, bool) {
	if o == nil || IsNil(o.VlanInfos) {
		return nil, false
	}
	return o.VlanInfos, true
}

// HasVlanInfos returns a boolean if a field has been set.
func (o *DiscoveryDeviceneighbor) HasVlanInfos() bool {
	if o != nil && !IsNil(o.VlanInfos) {
		return true
	}

	return false
}

// SetVlanInfos gets a reference to the given []DiscoveryDeviceneighborVlanInfos and assigns it to the VlanInfos field.
func (o *DiscoveryDeviceneighbor) SetVlanInfos(v []DiscoveryDeviceneighborVlanInfos) {
	o.VlanInfos = v
}

func (o DiscoveryDeviceneighbor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryDeviceneighbor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AddressRef) {
		toSerialize["address_ref"] = o.AddressRef
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VlanInfos) {
		toSerialize["vlan_infos"] = o.VlanInfos
	}
	return toSerialize, nil
}

type NullableDiscoveryDeviceneighbor struct {
	value *DiscoveryDeviceneighbor
	isSet bool
}

func (v NullableDiscoveryDeviceneighbor) Get() *DiscoveryDeviceneighbor {
	return v.value
}

func (v *NullableDiscoveryDeviceneighbor) Set(val *DiscoveryDeviceneighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryDeviceneighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryDeviceneighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryDeviceneighbor(val *DiscoveryDeviceneighbor) *NullableDiscoveryDeviceneighbor {
	return &NullableDiscoveryDeviceneighbor{value: val, isSet: true}
}

func (v NullableDiscoveryDeviceneighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryDeviceneighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
