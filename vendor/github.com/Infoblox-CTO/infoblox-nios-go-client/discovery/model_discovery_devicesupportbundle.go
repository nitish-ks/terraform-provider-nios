/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryDevicesupportbundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryDevicesupportbundle{}

// DiscoveryDevicesupportbundle struct for DiscoveryDevicesupportbundle
type DiscoveryDevicesupportbundle struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The developer of the device support bundle.
	Author *string `json:"author,omitempty"`
	// Determines whether the device support bundle is integrated or imported. Note that integrated support bundles cannot be removed.
	IntegratedInd *bool `json:"integrated_ind,omitempty"`
	// The descriptive device name for the device support bundle.
	Name *string `json:"name,omitempty"`
	// The version of the currently active device support bundle.
	Version *string `json:"version,omitempty"`
}

// NewDiscoveryDevicesupportbundle instantiates a new DiscoveryDevicesupportbundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryDevicesupportbundle() *DiscoveryDevicesupportbundle {
	this := DiscoveryDevicesupportbundle{}
	return &this
}

// NewDiscoveryDevicesupportbundleWithDefaults instantiates a new DiscoveryDevicesupportbundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryDevicesupportbundleWithDefaults() *DiscoveryDevicesupportbundle {
	this := DiscoveryDevicesupportbundle{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DiscoveryDevicesupportbundle) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicesupportbundle) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DiscoveryDevicesupportbundle) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DiscoveryDevicesupportbundle) SetRef(v string) {
	o.Ref = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DiscoveryDevicesupportbundle) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicesupportbundle) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DiscoveryDevicesupportbundle) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *DiscoveryDevicesupportbundle) SetAuthor(v string) {
	o.Author = &v
}

// GetIntegratedInd returns the IntegratedInd field value if set, zero value otherwise.
func (o *DiscoveryDevicesupportbundle) GetIntegratedInd() bool {
	if o == nil || IsNil(o.IntegratedInd) {
		var ret bool
		return ret
	}
	return *o.IntegratedInd
}

// GetIntegratedIndOk returns a tuple with the IntegratedInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicesupportbundle) GetIntegratedIndOk() (*bool, bool) {
	if o == nil || IsNil(o.IntegratedInd) {
		return nil, false
	}
	return o.IntegratedInd, true
}

// HasIntegratedInd returns a boolean if a field has been set.
func (o *DiscoveryDevicesupportbundle) HasIntegratedInd() bool {
	if o != nil && !IsNil(o.IntegratedInd) {
		return true
	}

	return false
}

// SetIntegratedInd gets a reference to the given bool and assigns it to the IntegratedInd field.
func (o *DiscoveryDevicesupportbundle) SetIntegratedInd(v bool) {
	o.IntegratedInd = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiscoveryDevicesupportbundle) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicesupportbundle) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiscoveryDevicesupportbundle) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiscoveryDevicesupportbundle) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DiscoveryDevicesupportbundle) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryDevicesupportbundle) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DiscoveryDevicesupportbundle) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DiscoveryDevicesupportbundle) SetVersion(v string) {
	o.Version = &v
}

func (o DiscoveryDevicesupportbundle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryDevicesupportbundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.IntegratedInd) {
		toSerialize["integrated_ind"] = o.IntegratedInd
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDiscoveryDevicesupportbundle struct {
	value *DiscoveryDevicesupportbundle
	isSet bool
}

func (v NullableDiscoveryDevicesupportbundle) Get() *DiscoveryDevicesupportbundle {
	return v.value
}

func (v *NullableDiscoveryDevicesupportbundle) Set(val *DiscoveryDevicesupportbundle) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryDevicesupportbundle) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryDevicesupportbundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryDevicesupportbundle(val *DiscoveryDevicesupportbundle) *NullableDiscoveryDevicesupportbundle {
	return &NullableDiscoveryDevicesupportbundle{value: val, isSet: true}
}

func (v NullableDiscoveryDevicesupportbundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryDevicesupportbundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
