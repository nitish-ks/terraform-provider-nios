/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtAttrs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtAttrs{}

// ExtAttrs Extensible attributes associated with the object.
type ExtAttrs struct {
	// The value of the extensible attribute.
	Value                interface{} `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _ExtAttrs ExtAttrs

// NewExtAttrs instantiates a new ExtAttrs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtAttrs(value interface{}) *ExtAttrs {
	this := ExtAttrs{}
	this.Value = value
	return &this
}

// NewExtAttrsWithDefaults instantiates a new ExtAttrs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtAttrsWithDefaults() *ExtAttrs {
	this := ExtAttrs{}
	return &this
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ExtAttrs) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtAttrs) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ExtAttrs) SetValue(v interface{}) {
	o.Value = v
}

func (o ExtAttrs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtAttrs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtAttrs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtAttrs := _ExtAttrs{}

	err = json.Unmarshal(data, &varExtAttrs)

	if err != nil {
		return err
	}

	*o = ExtAttrs(varExtAttrs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtAttrs struct {
	value *ExtAttrs
	isSet bool
}

func (v NullableExtAttrs) Get() *ExtAttrs {
	return v.value
}

func (v *NullableExtAttrs) Set(val *ExtAttrs) {
	v.value = val
	v.isSet = true
}

func (v NullableExtAttrs) IsSet() bool {
	return v.isSet
}

func (v *NullableExtAttrs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtAttrs(val *ExtAttrs) *NullableExtAttrs {
	return &NullableExtAttrs{value: val, isSet: true}
}

func (v NullableExtAttrs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtAttrs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
