/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryCredentialgroupResponse - struct for GetDiscoveryCredentialgroupResponse
type GetDiscoveryCredentialgroupResponse struct {
	DiscoveryCredentialgroup                          *DiscoveryCredentialgroup
	GetDiscoveryCredentialgroupResponseObjectAsResult *GetDiscoveryCredentialgroupResponseObjectAsResult
}

// DiscoveryCredentialgroupAsGetDiscoveryCredentialgroupResponse is a convenience function that returns DiscoveryCredentialgroup wrapped in GetDiscoveryCredentialgroupResponse
func DiscoveryCredentialgroupAsGetDiscoveryCredentialgroupResponse(v *DiscoveryCredentialgroup) GetDiscoveryCredentialgroupResponse {
	return GetDiscoveryCredentialgroupResponse{
		DiscoveryCredentialgroup: v,
	}
}

// GetDiscoveryCredentialgroupResponseObjectAsResultAsGetDiscoveryCredentialgroupResponse is a convenience function that returns GetDiscoveryCredentialgroupResponseObjectAsResult wrapped in GetDiscoveryCredentialgroupResponse
func GetDiscoveryCredentialgroupResponseObjectAsResultAsGetDiscoveryCredentialgroupResponse(v *GetDiscoveryCredentialgroupResponseObjectAsResult) GetDiscoveryCredentialgroupResponse {
	return GetDiscoveryCredentialgroupResponse{
		GetDiscoveryCredentialgroupResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryCredentialgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryCredentialgroup
	err = newStrictDecoder(data).Decode(&dst.DiscoveryCredentialgroup)
	if err == nil {
		jsonDiscoveryCredentialgroup, _ := json.Marshal(dst.DiscoveryCredentialgroup)
		if string(jsonDiscoveryCredentialgroup) == "{}" { // empty struct
			dst.DiscoveryCredentialgroup = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryCredentialgroup = nil
	}

	// try to unmarshal data into GetDiscoveryCredentialgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryCredentialgroupResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryCredentialgroupResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryCredentialgroupResponseObjectAsResult)
		if string(jsonGetDiscoveryCredentialgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryCredentialgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryCredentialgroupResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryCredentialgroup = nil
		dst.GetDiscoveryCredentialgroupResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryCredentialgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryCredentialgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryCredentialgroup != nil {
		return json.Marshal(&src.DiscoveryCredentialgroup)
	}

	if src.GetDiscoveryCredentialgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryCredentialgroupResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryCredentialgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryCredentialgroup != nil {
		return obj.DiscoveryCredentialgroup
	}

	if obj.GetDiscoveryCredentialgroupResponseObjectAsResult != nil {
		return obj.GetDiscoveryCredentialgroupResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryCredentialgroupResponse struct {
	value *GetDiscoveryCredentialgroupResponse
	isSet bool
}

func (v NullableGetDiscoveryCredentialgroupResponse) Get() *GetDiscoveryCredentialgroupResponse {
	return v.value
}

func (v *NullableGetDiscoveryCredentialgroupResponse) Set(val *GetDiscoveryCredentialgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryCredentialgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryCredentialgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryCredentialgroupResponse(val *GetDiscoveryCredentialgroupResponse) *NullableGetDiscoveryCredentialgroupResponse {
	return &NullableGetDiscoveryCredentialgroupResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryCredentialgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
