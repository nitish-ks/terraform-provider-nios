/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDeviceResponse - struct for GetDiscoveryDeviceResponse
type GetDiscoveryDeviceResponse struct {
	DiscoveryDevice                          *DiscoveryDevice
	GetDiscoveryDeviceResponseObjectAsResult *GetDiscoveryDeviceResponseObjectAsResult
}

// DiscoveryDeviceAsGetDiscoveryDeviceResponse is a convenience function that returns DiscoveryDevice wrapped in GetDiscoveryDeviceResponse
func DiscoveryDeviceAsGetDiscoveryDeviceResponse(v *DiscoveryDevice) GetDiscoveryDeviceResponse {
	return GetDiscoveryDeviceResponse{
		DiscoveryDevice: v,
	}
}

// GetDiscoveryDeviceResponseObjectAsResultAsGetDiscoveryDeviceResponse is a convenience function that returns GetDiscoveryDeviceResponseObjectAsResult wrapped in GetDiscoveryDeviceResponse
func GetDiscoveryDeviceResponseObjectAsResultAsGetDiscoveryDeviceResponse(v *GetDiscoveryDeviceResponseObjectAsResult) GetDiscoveryDeviceResponse {
	return GetDiscoveryDeviceResponse{
		GetDiscoveryDeviceResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDeviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDevice
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDevice)
	if err == nil {
		jsonDiscoveryDevice, _ := json.Marshal(dst.DiscoveryDevice)
		if string(jsonDiscoveryDevice) == "{}" { // empty struct
			dst.DiscoveryDevice = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDevice = nil
	}

	// try to unmarshal data into GetDiscoveryDeviceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDeviceResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDeviceResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDeviceResponseObjectAsResult)
		if string(jsonGetDiscoveryDeviceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDeviceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDeviceResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDevice = nil
		dst.GetDiscoveryDeviceResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDeviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDeviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDeviceResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDevice != nil {
		return json.Marshal(&src.DiscoveryDevice)
	}

	if src.GetDiscoveryDeviceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDeviceResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDeviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDevice != nil {
		return obj.DiscoveryDevice
	}

	if obj.GetDiscoveryDeviceResponseObjectAsResult != nil {
		return obj.GetDiscoveryDeviceResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDeviceResponse struct {
	value *GetDiscoveryDeviceResponse
	isSet bool
}

func (v NullableGetDiscoveryDeviceResponse) Get() *GetDiscoveryDeviceResponse {
	return v.value
}

func (v *NullableGetDiscoveryDeviceResponse) Set(val *GetDiscoveryDeviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDeviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDeviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDeviceResponse(val *GetDiscoveryDeviceResponse) *NullableGetDiscoveryDeviceResponse {
	return &NullableGetDiscoveryDeviceResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDeviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDeviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
