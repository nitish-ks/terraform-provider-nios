/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDevicecomponentResponse - struct for GetDiscoveryDevicecomponentResponse
type GetDiscoveryDevicecomponentResponse struct {
	DiscoveryDevicecomponent                          *DiscoveryDevicecomponent
	GetDiscoveryDevicecomponentResponseObjectAsResult *GetDiscoveryDevicecomponentResponseObjectAsResult
}

// DiscoveryDevicecomponentAsGetDiscoveryDevicecomponentResponse is a convenience function that returns DiscoveryDevicecomponent wrapped in GetDiscoveryDevicecomponentResponse
func DiscoveryDevicecomponentAsGetDiscoveryDevicecomponentResponse(v *DiscoveryDevicecomponent) GetDiscoveryDevicecomponentResponse {
	return GetDiscoveryDevicecomponentResponse{
		DiscoveryDevicecomponent: v,
	}
}

// GetDiscoveryDevicecomponentResponseObjectAsResultAsGetDiscoveryDevicecomponentResponse is a convenience function that returns GetDiscoveryDevicecomponentResponseObjectAsResult wrapped in GetDiscoveryDevicecomponentResponse
func GetDiscoveryDevicecomponentResponseObjectAsResultAsGetDiscoveryDevicecomponentResponse(v *GetDiscoveryDevicecomponentResponseObjectAsResult) GetDiscoveryDevicecomponentResponse {
	return GetDiscoveryDevicecomponentResponse{
		GetDiscoveryDevicecomponentResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDevicecomponentResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDevicecomponent
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDevicecomponent)
	if err == nil {
		jsonDiscoveryDevicecomponent, _ := json.Marshal(dst.DiscoveryDevicecomponent)
		if string(jsonDiscoveryDevicecomponent) == "{}" { // empty struct
			dst.DiscoveryDevicecomponent = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDevicecomponent = nil
	}

	// try to unmarshal data into GetDiscoveryDevicecomponentResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDevicecomponentResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDevicecomponentResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDevicecomponentResponseObjectAsResult)
		if string(jsonGetDiscoveryDevicecomponentResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDevicecomponentResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDevicecomponentResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDevicecomponent = nil
		dst.GetDiscoveryDevicecomponentResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDevicecomponentResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDevicecomponentResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDevicecomponentResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDevicecomponent != nil {
		return json.Marshal(&src.DiscoveryDevicecomponent)
	}

	if src.GetDiscoveryDevicecomponentResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDevicecomponentResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDevicecomponentResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDevicecomponent != nil {
		return obj.DiscoveryDevicecomponent
	}

	if obj.GetDiscoveryDevicecomponentResponseObjectAsResult != nil {
		return obj.GetDiscoveryDevicecomponentResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDevicecomponentResponse struct {
	value *GetDiscoveryDevicecomponentResponse
	isSet bool
}

func (v NullableGetDiscoveryDevicecomponentResponse) Get() *GetDiscoveryDevicecomponentResponse {
	return v.value
}

func (v *NullableGetDiscoveryDevicecomponentResponse) Set(val *GetDiscoveryDevicecomponentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDevicecomponentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDevicecomponentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDevicecomponentResponse(val *GetDiscoveryDevicecomponentResponse) *NullableGetDiscoveryDevicecomponentResponse {
	return &NullableGetDiscoveryDevicecomponentResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDevicecomponentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDevicecomponentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
