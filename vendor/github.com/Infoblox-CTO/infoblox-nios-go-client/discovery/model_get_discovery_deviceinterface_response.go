/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDeviceinterfaceResponse - struct for GetDiscoveryDeviceinterfaceResponse
type GetDiscoveryDeviceinterfaceResponse struct {
	DiscoveryDeviceinterface                          *DiscoveryDeviceinterface
	GetDiscoveryDeviceinterfaceResponseObjectAsResult *GetDiscoveryDeviceinterfaceResponseObjectAsResult
}

// DiscoveryDeviceinterfaceAsGetDiscoveryDeviceinterfaceResponse is a convenience function that returns DiscoveryDeviceinterface wrapped in GetDiscoveryDeviceinterfaceResponse
func DiscoveryDeviceinterfaceAsGetDiscoveryDeviceinterfaceResponse(v *DiscoveryDeviceinterface) GetDiscoveryDeviceinterfaceResponse {
	return GetDiscoveryDeviceinterfaceResponse{
		DiscoveryDeviceinterface: v,
	}
}

// GetDiscoveryDeviceinterfaceResponseObjectAsResultAsGetDiscoveryDeviceinterfaceResponse is a convenience function that returns GetDiscoveryDeviceinterfaceResponseObjectAsResult wrapped in GetDiscoveryDeviceinterfaceResponse
func GetDiscoveryDeviceinterfaceResponseObjectAsResultAsGetDiscoveryDeviceinterfaceResponse(v *GetDiscoveryDeviceinterfaceResponseObjectAsResult) GetDiscoveryDeviceinterfaceResponse {
	return GetDiscoveryDeviceinterfaceResponse{
		GetDiscoveryDeviceinterfaceResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDeviceinterfaceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDeviceinterface
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDeviceinterface)
	if err == nil {
		jsonDiscoveryDeviceinterface, _ := json.Marshal(dst.DiscoveryDeviceinterface)
		if string(jsonDiscoveryDeviceinterface) == "{}" { // empty struct
			dst.DiscoveryDeviceinterface = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDeviceinterface = nil
	}

	// try to unmarshal data into GetDiscoveryDeviceinterfaceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDeviceinterfaceResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDeviceinterfaceResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDeviceinterfaceResponseObjectAsResult)
		if string(jsonGetDiscoveryDeviceinterfaceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDeviceinterfaceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDeviceinterfaceResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDeviceinterface = nil
		dst.GetDiscoveryDeviceinterfaceResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDeviceinterfaceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDeviceinterfaceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDeviceinterfaceResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDeviceinterface != nil {
		return json.Marshal(&src.DiscoveryDeviceinterface)
	}

	if src.GetDiscoveryDeviceinterfaceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDeviceinterfaceResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDeviceinterfaceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDeviceinterface != nil {
		return obj.DiscoveryDeviceinterface
	}

	if obj.GetDiscoveryDeviceinterfaceResponseObjectAsResult != nil {
		return obj.GetDiscoveryDeviceinterfaceResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDeviceinterfaceResponse struct {
	value *GetDiscoveryDeviceinterfaceResponse
	isSet bool
}

func (v NullableGetDiscoveryDeviceinterfaceResponse) Get() *GetDiscoveryDeviceinterfaceResponse {
	return v.value
}

func (v *NullableGetDiscoveryDeviceinterfaceResponse) Set(val *GetDiscoveryDeviceinterfaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDeviceinterfaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDeviceinterfaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDeviceinterfaceResponse(val *GetDiscoveryDeviceinterfaceResponse) *NullableGetDiscoveryDeviceinterfaceResponse {
	return &NullableGetDiscoveryDeviceinterfaceResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDeviceinterfaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDeviceinterfaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
