/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDeviceneighborResponse - struct for GetDiscoveryDeviceneighborResponse
type GetDiscoveryDeviceneighborResponse struct {
	DiscoveryDeviceneighbor                          *DiscoveryDeviceneighbor
	GetDiscoveryDeviceneighborResponseObjectAsResult *GetDiscoveryDeviceneighborResponseObjectAsResult
}

// DiscoveryDeviceneighborAsGetDiscoveryDeviceneighborResponse is a convenience function that returns DiscoveryDeviceneighbor wrapped in GetDiscoveryDeviceneighborResponse
func DiscoveryDeviceneighborAsGetDiscoveryDeviceneighborResponse(v *DiscoveryDeviceneighbor) GetDiscoveryDeviceneighborResponse {
	return GetDiscoveryDeviceneighborResponse{
		DiscoveryDeviceneighbor: v,
	}
}

// GetDiscoveryDeviceneighborResponseObjectAsResultAsGetDiscoveryDeviceneighborResponse is a convenience function that returns GetDiscoveryDeviceneighborResponseObjectAsResult wrapped in GetDiscoveryDeviceneighborResponse
func GetDiscoveryDeviceneighborResponseObjectAsResultAsGetDiscoveryDeviceneighborResponse(v *GetDiscoveryDeviceneighborResponseObjectAsResult) GetDiscoveryDeviceneighborResponse {
	return GetDiscoveryDeviceneighborResponse{
		GetDiscoveryDeviceneighborResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDeviceneighborResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDeviceneighbor
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDeviceneighbor)
	if err == nil {
		jsonDiscoveryDeviceneighbor, _ := json.Marshal(dst.DiscoveryDeviceneighbor)
		if string(jsonDiscoveryDeviceneighbor) == "{}" { // empty struct
			dst.DiscoveryDeviceneighbor = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDeviceneighbor = nil
	}

	// try to unmarshal data into GetDiscoveryDeviceneighborResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDeviceneighborResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDeviceneighborResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDeviceneighborResponseObjectAsResult)
		if string(jsonGetDiscoveryDeviceneighborResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDeviceneighborResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDeviceneighborResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDeviceneighbor = nil
		dst.GetDiscoveryDeviceneighborResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDeviceneighborResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDeviceneighborResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDeviceneighborResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDeviceneighbor != nil {
		return json.Marshal(&src.DiscoveryDeviceneighbor)
	}

	if src.GetDiscoveryDeviceneighborResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDeviceneighborResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDeviceneighborResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDeviceneighbor != nil {
		return obj.DiscoveryDeviceneighbor
	}

	if obj.GetDiscoveryDeviceneighborResponseObjectAsResult != nil {
		return obj.GetDiscoveryDeviceneighborResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDeviceneighborResponse struct {
	value *GetDiscoveryDeviceneighborResponse
	isSet bool
}

func (v NullableGetDiscoveryDeviceneighborResponse) Get() *GetDiscoveryDeviceneighborResponse {
	return v.value
}

func (v *NullableGetDiscoveryDeviceneighborResponse) Set(val *GetDiscoveryDeviceneighborResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDeviceneighborResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDeviceneighborResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDeviceneighborResponse(val *GetDiscoveryDeviceneighborResponse) *NullableGetDiscoveryDeviceneighborResponse {
	return &NullableGetDiscoveryDeviceneighborResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDeviceneighborResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDeviceneighborResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
