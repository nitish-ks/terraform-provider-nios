/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDevicesupportbundleResponse - struct for GetDiscoveryDevicesupportbundleResponse
type GetDiscoveryDevicesupportbundleResponse struct {
	DiscoveryDevicesupportbundle                          *DiscoveryDevicesupportbundle
	GetDiscoveryDevicesupportbundleResponseObjectAsResult *GetDiscoveryDevicesupportbundleResponseObjectAsResult
}

// DiscoveryDevicesupportbundleAsGetDiscoveryDevicesupportbundleResponse is a convenience function that returns DiscoveryDevicesupportbundle wrapped in GetDiscoveryDevicesupportbundleResponse
func DiscoveryDevicesupportbundleAsGetDiscoveryDevicesupportbundleResponse(v *DiscoveryDevicesupportbundle) GetDiscoveryDevicesupportbundleResponse {
	return GetDiscoveryDevicesupportbundleResponse{
		DiscoveryDevicesupportbundle: v,
	}
}

// GetDiscoveryDevicesupportbundleResponseObjectAsResultAsGetDiscoveryDevicesupportbundleResponse is a convenience function that returns GetDiscoveryDevicesupportbundleResponseObjectAsResult wrapped in GetDiscoveryDevicesupportbundleResponse
func GetDiscoveryDevicesupportbundleResponseObjectAsResultAsGetDiscoveryDevicesupportbundleResponse(v *GetDiscoveryDevicesupportbundleResponseObjectAsResult) GetDiscoveryDevicesupportbundleResponse {
	return GetDiscoveryDevicesupportbundleResponse{
		GetDiscoveryDevicesupportbundleResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDevicesupportbundleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDevicesupportbundle
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDevicesupportbundle)
	if err == nil {
		jsonDiscoveryDevicesupportbundle, _ := json.Marshal(dst.DiscoveryDevicesupportbundle)
		if string(jsonDiscoveryDevicesupportbundle) == "{}" { // empty struct
			dst.DiscoveryDevicesupportbundle = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDevicesupportbundle = nil
	}

	// try to unmarshal data into GetDiscoveryDevicesupportbundleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDevicesupportbundleResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDevicesupportbundleResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDevicesupportbundleResponseObjectAsResult)
		if string(jsonGetDiscoveryDevicesupportbundleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDevicesupportbundleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDevicesupportbundleResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDevicesupportbundle = nil
		dst.GetDiscoveryDevicesupportbundleResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDevicesupportbundleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDevicesupportbundleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDevicesupportbundleResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDevicesupportbundle != nil {
		return json.Marshal(&src.DiscoveryDevicesupportbundle)
	}

	if src.GetDiscoveryDevicesupportbundleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDevicesupportbundleResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDevicesupportbundleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDevicesupportbundle != nil {
		return obj.DiscoveryDevicesupportbundle
	}

	if obj.GetDiscoveryDevicesupportbundleResponseObjectAsResult != nil {
		return obj.GetDiscoveryDevicesupportbundleResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDevicesupportbundleResponse struct {
	value *GetDiscoveryDevicesupportbundleResponse
	isSet bool
}

func (v NullableGetDiscoveryDevicesupportbundleResponse) Get() *GetDiscoveryDevicesupportbundleResponse {
	return v.value
}

func (v *NullableGetDiscoveryDevicesupportbundleResponse) Set(val *GetDiscoveryDevicesupportbundleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDevicesupportbundleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDevicesupportbundleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDevicesupportbundleResponse(val *GetDiscoveryDevicesupportbundleResponse) *NullableGetDiscoveryDevicesupportbundleResponse {
	return &NullableGetDiscoveryDevicesupportbundleResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDevicesupportbundleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDevicesupportbundleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
