/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryDiagnostictaskResponse - struct for GetDiscoveryDiagnostictaskResponse
type GetDiscoveryDiagnostictaskResponse struct {
	DiscoveryDiagnostictask                          *DiscoveryDiagnostictask
	GetDiscoveryDiagnostictaskResponseObjectAsResult *GetDiscoveryDiagnostictaskResponseObjectAsResult
}

// DiscoveryDiagnostictaskAsGetDiscoveryDiagnostictaskResponse is a convenience function that returns DiscoveryDiagnostictask wrapped in GetDiscoveryDiagnostictaskResponse
func DiscoveryDiagnostictaskAsGetDiscoveryDiagnostictaskResponse(v *DiscoveryDiagnostictask) GetDiscoveryDiagnostictaskResponse {
	return GetDiscoveryDiagnostictaskResponse{
		DiscoveryDiagnostictask: v,
	}
}

// GetDiscoveryDiagnostictaskResponseObjectAsResultAsGetDiscoveryDiagnostictaskResponse is a convenience function that returns GetDiscoveryDiagnostictaskResponseObjectAsResult wrapped in GetDiscoveryDiagnostictaskResponse
func GetDiscoveryDiagnostictaskResponseObjectAsResultAsGetDiscoveryDiagnostictaskResponse(v *GetDiscoveryDiagnostictaskResponseObjectAsResult) GetDiscoveryDiagnostictaskResponse {
	return GetDiscoveryDiagnostictaskResponse{
		GetDiscoveryDiagnostictaskResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryDiagnostictaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryDiagnostictask
	err = newStrictDecoder(data).Decode(&dst.DiscoveryDiagnostictask)
	if err == nil {
		jsonDiscoveryDiagnostictask, _ := json.Marshal(dst.DiscoveryDiagnostictask)
		if string(jsonDiscoveryDiagnostictask) == "{}" { // empty struct
			dst.DiscoveryDiagnostictask = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryDiagnostictask = nil
	}

	// try to unmarshal data into GetDiscoveryDiagnostictaskResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryDiagnostictaskResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryDiagnostictaskResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryDiagnostictaskResponseObjectAsResult)
		if string(jsonGetDiscoveryDiagnostictaskResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryDiagnostictaskResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryDiagnostictaskResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryDiagnostictask = nil
		dst.GetDiscoveryDiagnostictaskResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryDiagnostictaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryDiagnostictaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryDiagnostictaskResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryDiagnostictask != nil {
		return json.Marshal(&src.DiscoveryDiagnostictask)
	}

	if src.GetDiscoveryDiagnostictaskResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryDiagnostictaskResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryDiagnostictaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryDiagnostictask != nil {
		return obj.DiscoveryDiagnostictask
	}

	if obj.GetDiscoveryDiagnostictaskResponseObjectAsResult != nil {
		return obj.GetDiscoveryDiagnostictaskResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryDiagnostictaskResponse struct {
	value *GetDiscoveryDiagnostictaskResponse
	isSet bool
}

func (v NullableGetDiscoveryDiagnostictaskResponse) Get() *GetDiscoveryDiagnostictaskResponse {
	return v.value
}

func (v *NullableGetDiscoveryDiagnostictaskResponse) Set(val *GetDiscoveryDiagnostictaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryDiagnostictaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryDiagnostictaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryDiagnostictaskResponse(val *GetDiscoveryDiagnostictaskResponse) *NullableGetDiscoveryDiagnostictaskResponse {
	return &NullableGetDiscoveryDiagnostictaskResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryDiagnostictaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryDiagnostictaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
