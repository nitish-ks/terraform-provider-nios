/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryResponse - struct for GetDiscoveryResponse
type GetDiscoveryResponse struct {
	Discovery                          *Discovery
	GetDiscoveryResponseObjectAsResult *GetDiscoveryResponseObjectAsResult
}

// DiscoveryAsGetDiscoveryResponse is a convenience function that returns Discovery wrapped in GetDiscoveryResponse
func DiscoveryAsGetDiscoveryResponse(v *Discovery) GetDiscoveryResponse {
	return GetDiscoveryResponse{
		Discovery: v,
	}
}

// GetDiscoveryResponseObjectAsResultAsGetDiscoveryResponse is a convenience function that returns GetDiscoveryResponseObjectAsResult wrapped in GetDiscoveryResponse
func GetDiscoveryResponseObjectAsResultAsGetDiscoveryResponse(v *GetDiscoveryResponseObjectAsResult) GetDiscoveryResponse {
	return GetDiscoveryResponse{
		GetDiscoveryResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Discovery
	err = newStrictDecoder(data).Decode(&dst.Discovery)
	if err == nil {
		jsonDiscovery, _ := json.Marshal(dst.Discovery)
		if string(jsonDiscovery) == "{}" { // empty struct
			dst.Discovery = nil
		} else {
			match++
		}
	} else {
		dst.Discovery = nil
	}

	// try to unmarshal data into GetDiscoveryResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryResponseObjectAsResult)
		if string(jsonGetDiscoveryResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Discovery = nil
		dst.GetDiscoveryResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryResponse) MarshalJSON() ([]byte, error) {
	if src.Discovery != nil {
		return json.Marshal(&src.Discovery)
	}

	if src.GetDiscoveryResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Discovery != nil {
		return obj.Discovery
	}

	if obj.GetDiscoveryResponseObjectAsResult != nil {
		return obj.GetDiscoveryResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryResponse struct {
	value *GetDiscoveryResponse
	isSet bool
}

func (v NullableGetDiscoveryResponse) Get() *GetDiscoveryResponse {
	return v.value
}

func (v *NullableGetDiscoveryResponse) Set(val *GetDiscoveryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryResponse(val *GetDiscoveryResponse) *NullableGetDiscoveryResponse {
	return &NullableGetDiscoveryResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
