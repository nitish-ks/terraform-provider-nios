/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// GetDiscoveryVrfResponse - struct for GetDiscoveryVrfResponse
type GetDiscoveryVrfResponse struct {
	DiscoveryVrf                          *DiscoveryVrf
	GetDiscoveryVrfResponseObjectAsResult *GetDiscoveryVrfResponseObjectAsResult
}

// DiscoveryVrfAsGetDiscoveryVrfResponse is a convenience function that returns DiscoveryVrf wrapped in GetDiscoveryVrfResponse
func DiscoveryVrfAsGetDiscoveryVrfResponse(v *DiscoveryVrf) GetDiscoveryVrfResponse {
	return GetDiscoveryVrfResponse{
		DiscoveryVrf: v,
	}
}

// GetDiscoveryVrfResponseObjectAsResultAsGetDiscoveryVrfResponse is a convenience function that returns GetDiscoveryVrfResponseObjectAsResult wrapped in GetDiscoveryVrfResponse
func GetDiscoveryVrfResponseObjectAsResultAsGetDiscoveryVrfResponse(v *GetDiscoveryVrfResponseObjectAsResult) GetDiscoveryVrfResponse {
	return GetDiscoveryVrfResponse{
		GetDiscoveryVrfResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoveryVrfResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DiscoveryVrf
	err = newStrictDecoder(data).Decode(&dst.DiscoveryVrf)
	if err == nil {
		jsonDiscoveryVrf, _ := json.Marshal(dst.DiscoveryVrf)
		if string(jsonDiscoveryVrf) == "{}" { // empty struct
			dst.DiscoveryVrf = nil
		} else {
			match++
		}
	} else {
		dst.DiscoveryVrf = nil
	}

	// try to unmarshal data into GetDiscoveryVrfResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoveryVrfResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoveryVrfResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoveryVrfResponseObjectAsResult)
		if string(jsonGetDiscoveryVrfResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoveryVrfResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoveryVrfResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DiscoveryVrf = nil
		dst.GetDiscoveryVrfResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoveryVrfResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoveryVrfResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoveryVrfResponse) MarshalJSON() ([]byte, error) {
	if src.DiscoveryVrf != nil {
		return json.Marshal(&src.DiscoveryVrf)
	}

	if src.GetDiscoveryVrfResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoveryVrfResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoveryVrfResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DiscoveryVrf != nil {
		return obj.DiscoveryVrf
	}

	if obj.GetDiscoveryVrfResponseObjectAsResult != nil {
		return obj.GetDiscoveryVrfResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoveryVrfResponse struct {
	value *GetDiscoveryVrfResponse
	isSet bool
}

func (v NullableGetDiscoveryVrfResponse) Get() *GetDiscoveryVrfResponse {
	return v.value
}

func (v *NullableGetDiscoveryVrfResponse) Set(val *GetDiscoveryVrfResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoveryVrfResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoveryVrfResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoveryVrfResponse(val *GetDiscoveryVrfResponse) *NullableGetDiscoveryVrfResponse {
	return &NullableGetDiscoveryVrfResponse{value: val, isSet: true}
}

func (v NullableGetDiscoveryVrfResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoveryVrfResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
