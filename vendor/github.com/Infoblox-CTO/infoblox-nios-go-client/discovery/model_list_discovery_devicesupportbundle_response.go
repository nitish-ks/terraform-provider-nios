/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryDevicesupportbundleResponse - struct for ListDiscoveryDevicesupportbundleResponse
type ListDiscoveryDevicesupportbundleResponse struct {
	ListDiscoveryDevicesupportbundleResponseObject *ListDiscoveryDevicesupportbundleResponseObject
	ArrayOfDiscoveryDevicesupportbundle            *[]DiscoveryDevicesupportbundle
}

// ListDiscoveryDevicesupportbundleResponseObjectAsListDiscoveryDevicesupportbundleResponse is a convenience function that returns ListDiscoveryDevicesupportbundleResponseObject wrapped in ListDiscoveryDevicesupportbundleResponse
func ListDiscoveryDevicesupportbundleResponseObjectAsListDiscoveryDevicesupportbundleResponse(v *ListDiscoveryDevicesupportbundleResponseObject) ListDiscoveryDevicesupportbundleResponse {
	return ListDiscoveryDevicesupportbundleResponse{
		ListDiscoveryDevicesupportbundleResponseObject: v,
	}
}

// []DiscoveryDevicesupportbundleAsListDiscoveryDevicesupportbundleResponse is a convenience function that returns []DiscoveryDevicesupportbundle wrapped in ListDiscoveryDevicesupportbundleResponse
func ArrayOfDiscoveryDevicesupportbundleAsListDiscoveryDevicesupportbundleResponse(v *[]DiscoveryDevicesupportbundle) ListDiscoveryDevicesupportbundleResponse {
	return ListDiscoveryDevicesupportbundleResponse{
		ArrayOfDiscoveryDevicesupportbundle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryDevicesupportbundleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryDevicesupportbundleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryDevicesupportbundleResponseObject)
	if err == nil {
		jsonListDiscoveryDevicesupportbundleResponseObject, _ := json.Marshal(dst.ListDiscoveryDevicesupportbundleResponseObject)
		if string(jsonListDiscoveryDevicesupportbundleResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryDevicesupportbundleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryDevicesupportbundleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryDevicesupportbundle
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryDevicesupportbundle)
	if err == nil {
		jsonArrayOfDiscoveryDevicesupportbundle, _ := json.Marshal(dst.ArrayOfDiscoveryDevicesupportbundle)
		if string(jsonArrayOfDiscoveryDevicesupportbundle) == "{}" { // empty struct
			dst.ArrayOfDiscoveryDevicesupportbundle = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryDevicesupportbundle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryDevicesupportbundleResponseObject = nil
		dst.ArrayOfDiscoveryDevicesupportbundle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryDevicesupportbundleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryDevicesupportbundleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryDevicesupportbundleResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryDevicesupportbundleResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryDevicesupportbundleResponseObject)
	}

	if src.ArrayOfDiscoveryDevicesupportbundle != nil {
		return json.Marshal(&src.ArrayOfDiscoveryDevicesupportbundle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryDevicesupportbundleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryDevicesupportbundleResponseObject != nil {
		return obj.ListDiscoveryDevicesupportbundleResponseObject
	}

	if obj.ArrayOfDiscoveryDevicesupportbundle != nil {
		return obj.ArrayOfDiscoveryDevicesupportbundle
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryDevicesupportbundleResponse struct {
	value *ListDiscoveryDevicesupportbundleResponse
	isSet bool
}

func (v NullableListDiscoveryDevicesupportbundleResponse) Get() *ListDiscoveryDevicesupportbundleResponse {
	return v.value
}

func (v *NullableListDiscoveryDevicesupportbundleResponse) Set(val *ListDiscoveryDevicesupportbundleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryDevicesupportbundleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryDevicesupportbundleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryDevicesupportbundleResponse(val *ListDiscoveryDevicesupportbundleResponse) *NullableListDiscoveryDevicesupportbundleResponse {
	return &NullableListDiscoveryDevicesupportbundleResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryDevicesupportbundleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryDevicesupportbundleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
