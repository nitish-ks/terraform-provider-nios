/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryDiagnostictaskResponse - struct for ListDiscoveryDiagnostictaskResponse
type ListDiscoveryDiagnostictaskResponse struct {
	ListDiscoveryDiagnostictaskResponseObject *ListDiscoveryDiagnostictaskResponseObject
	ArrayOfDiscoveryDiagnostictask            *[]DiscoveryDiagnostictask
}

// ListDiscoveryDiagnostictaskResponseObjectAsListDiscoveryDiagnostictaskResponse is a convenience function that returns ListDiscoveryDiagnostictaskResponseObject wrapped in ListDiscoveryDiagnostictaskResponse
func ListDiscoveryDiagnostictaskResponseObjectAsListDiscoveryDiagnostictaskResponse(v *ListDiscoveryDiagnostictaskResponseObject) ListDiscoveryDiagnostictaskResponse {
	return ListDiscoveryDiagnostictaskResponse{
		ListDiscoveryDiagnostictaskResponseObject: v,
	}
}

// []DiscoveryDiagnostictaskAsListDiscoveryDiagnostictaskResponse is a convenience function that returns []DiscoveryDiagnostictask wrapped in ListDiscoveryDiagnostictaskResponse
func ArrayOfDiscoveryDiagnostictaskAsListDiscoveryDiagnostictaskResponse(v *[]DiscoveryDiagnostictask) ListDiscoveryDiagnostictaskResponse {
	return ListDiscoveryDiagnostictaskResponse{
		ArrayOfDiscoveryDiagnostictask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryDiagnostictaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryDiagnostictaskResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryDiagnostictaskResponseObject)
	if err == nil {
		jsonListDiscoveryDiagnostictaskResponseObject, _ := json.Marshal(dst.ListDiscoveryDiagnostictaskResponseObject)
		if string(jsonListDiscoveryDiagnostictaskResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryDiagnostictaskResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryDiagnostictaskResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryDiagnostictask
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryDiagnostictask)
	if err == nil {
		jsonArrayOfDiscoveryDiagnostictask, _ := json.Marshal(dst.ArrayOfDiscoveryDiagnostictask)
		if string(jsonArrayOfDiscoveryDiagnostictask) == "{}" { // empty struct
			dst.ArrayOfDiscoveryDiagnostictask = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryDiagnostictask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryDiagnostictaskResponseObject = nil
		dst.ArrayOfDiscoveryDiagnostictask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryDiagnostictaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryDiagnostictaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryDiagnostictaskResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryDiagnostictaskResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryDiagnostictaskResponseObject)
	}

	if src.ArrayOfDiscoveryDiagnostictask != nil {
		return json.Marshal(&src.ArrayOfDiscoveryDiagnostictask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryDiagnostictaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryDiagnostictaskResponseObject != nil {
		return obj.ListDiscoveryDiagnostictaskResponseObject
	}

	if obj.ArrayOfDiscoveryDiagnostictask != nil {
		return obj.ArrayOfDiscoveryDiagnostictask
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryDiagnostictaskResponse struct {
	value *ListDiscoveryDiagnostictaskResponse
	isSet bool
}

func (v NullableListDiscoveryDiagnostictaskResponse) Get() *ListDiscoveryDiagnostictaskResponse {
	return v.value
}

func (v *NullableListDiscoveryDiagnostictaskResponse) Set(val *ListDiscoveryDiagnostictaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryDiagnostictaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryDiagnostictaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryDiagnostictaskResponse(val *ListDiscoveryDiagnostictaskResponse) *NullableListDiscoveryDiagnostictaskResponse {
	return &NullableListDiscoveryDiagnostictaskResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryDiagnostictaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryDiagnostictaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
