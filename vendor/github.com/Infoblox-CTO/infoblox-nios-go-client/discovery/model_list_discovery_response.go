/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryResponse - struct for ListDiscoveryResponse
type ListDiscoveryResponse struct {
	ListDiscoveryResponseObject *ListDiscoveryResponseObject
	ArrayOfDiscovery            *[]Discovery
}

// ListDiscoveryResponseObjectAsListDiscoveryResponse is a convenience function that returns ListDiscoveryResponseObject wrapped in ListDiscoveryResponse
func ListDiscoveryResponseObjectAsListDiscoveryResponse(v *ListDiscoveryResponseObject) ListDiscoveryResponse {
	return ListDiscoveryResponse{
		ListDiscoveryResponseObject: v,
	}
}

// []DiscoveryAsListDiscoveryResponse is a convenience function that returns []Discovery wrapped in ListDiscoveryResponse
func ArrayOfDiscoveryAsListDiscoveryResponse(v *[]Discovery) ListDiscoveryResponse {
	return ListDiscoveryResponse{
		ArrayOfDiscovery: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryResponseObject)
	if err == nil {
		jsonListDiscoveryResponseObject, _ := json.Marshal(dst.ListDiscoveryResponseObject)
		if string(jsonListDiscoveryResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscovery
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscovery)
	if err == nil {
		jsonArrayOfDiscovery, _ := json.Marshal(dst.ArrayOfDiscovery)
		if string(jsonArrayOfDiscovery) == "{}" { // empty struct
			dst.ArrayOfDiscovery = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscovery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryResponseObject = nil
		dst.ArrayOfDiscovery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryResponseObject)
	}

	if src.ArrayOfDiscovery != nil {
		return json.Marshal(&src.ArrayOfDiscovery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryResponseObject != nil {
		return obj.ListDiscoveryResponseObject
	}

	if obj.ArrayOfDiscovery != nil {
		return obj.ArrayOfDiscovery
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryResponse struct {
	value *ListDiscoveryResponse
	isSet bool
}

func (v NullableListDiscoveryResponse) Get() *ListDiscoveryResponse {
	return v.value
}

func (v *NullableListDiscoveryResponse) Set(val *ListDiscoveryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryResponse(val *ListDiscoveryResponse) *NullableListDiscoveryResponse {
	return &NullableListDiscoveryResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
