/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoverySdnnetworkResponse - struct for ListDiscoverySdnnetworkResponse
type ListDiscoverySdnnetworkResponse struct {
	ListDiscoverySdnnetworkResponseObject *ListDiscoverySdnnetworkResponseObject
	ArrayOfDiscoverySdnnetwork            *[]DiscoverySdnnetwork
}

// ListDiscoverySdnnetworkResponseObjectAsListDiscoverySdnnetworkResponse is a convenience function that returns ListDiscoverySdnnetworkResponseObject wrapped in ListDiscoverySdnnetworkResponse
func ListDiscoverySdnnetworkResponseObjectAsListDiscoverySdnnetworkResponse(v *ListDiscoverySdnnetworkResponseObject) ListDiscoverySdnnetworkResponse {
	return ListDiscoverySdnnetworkResponse{
		ListDiscoverySdnnetworkResponseObject: v,
	}
}

// []DiscoverySdnnetworkAsListDiscoverySdnnetworkResponse is a convenience function that returns []DiscoverySdnnetwork wrapped in ListDiscoverySdnnetworkResponse
func ArrayOfDiscoverySdnnetworkAsListDiscoverySdnnetworkResponse(v *[]DiscoverySdnnetwork) ListDiscoverySdnnetworkResponse {
	return ListDiscoverySdnnetworkResponse{
		ArrayOfDiscoverySdnnetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoverySdnnetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoverySdnnetworkResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoverySdnnetworkResponseObject)
	if err == nil {
		jsonListDiscoverySdnnetworkResponseObject, _ := json.Marshal(dst.ListDiscoverySdnnetworkResponseObject)
		if string(jsonListDiscoverySdnnetworkResponseObject) == "{}" { // empty struct
			dst.ListDiscoverySdnnetworkResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoverySdnnetworkResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoverySdnnetwork
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoverySdnnetwork)
	if err == nil {
		jsonArrayOfDiscoverySdnnetwork, _ := json.Marshal(dst.ArrayOfDiscoverySdnnetwork)
		if string(jsonArrayOfDiscoverySdnnetwork) == "{}" { // empty struct
			dst.ArrayOfDiscoverySdnnetwork = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoverySdnnetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoverySdnnetworkResponseObject = nil
		dst.ArrayOfDiscoverySdnnetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoverySdnnetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoverySdnnetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoverySdnnetworkResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoverySdnnetworkResponseObject != nil {
		return json.Marshal(&src.ListDiscoverySdnnetworkResponseObject)
	}

	if src.ArrayOfDiscoverySdnnetwork != nil {
		return json.Marshal(&src.ArrayOfDiscoverySdnnetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoverySdnnetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoverySdnnetworkResponseObject != nil {
		return obj.ListDiscoverySdnnetworkResponseObject
	}

	if obj.ArrayOfDiscoverySdnnetwork != nil {
		return obj.ArrayOfDiscoverySdnnetwork
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoverySdnnetworkResponse struct {
	value *ListDiscoverySdnnetworkResponse
	isSet bool
}

func (v NullableListDiscoverySdnnetworkResponse) Get() *ListDiscoverySdnnetworkResponse {
	return v.value
}

func (v *NullableListDiscoverySdnnetworkResponse) Set(val *ListDiscoverySdnnetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoverySdnnetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoverySdnnetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoverySdnnetworkResponse(val *ListDiscoverySdnnetworkResponse) *NullableListDiscoverySdnnetworkResponse {
	return &NullableListDiscoverySdnnetworkResponse{value: val, isSet: true}
}

func (v NullableListDiscoverySdnnetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoverySdnnetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
