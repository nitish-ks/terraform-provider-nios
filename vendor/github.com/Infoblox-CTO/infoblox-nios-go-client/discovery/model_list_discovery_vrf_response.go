/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryVrfResponse - struct for ListDiscoveryVrfResponse
type ListDiscoveryVrfResponse struct {
	ListDiscoveryVrfResponseObject *ListDiscoveryVrfResponseObject
	ArrayOfDiscoveryVrf            *[]DiscoveryVrf
}

// ListDiscoveryVrfResponseObjectAsListDiscoveryVrfResponse is a convenience function that returns ListDiscoveryVrfResponseObject wrapped in ListDiscoveryVrfResponse
func ListDiscoveryVrfResponseObjectAsListDiscoveryVrfResponse(v *ListDiscoveryVrfResponseObject) ListDiscoveryVrfResponse {
	return ListDiscoveryVrfResponse{
		ListDiscoveryVrfResponseObject: v,
	}
}

// []DiscoveryVrfAsListDiscoveryVrfResponse is a convenience function that returns []DiscoveryVrf wrapped in ListDiscoveryVrfResponse
func ArrayOfDiscoveryVrfAsListDiscoveryVrfResponse(v *[]DiscoveryVrf) ListDiscoveryVrfResponse {
	return ListDiscoveryVrfResponse{
		ArrayOfDiscoveryVrf: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryVrfResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryVrfResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryVrfResponseObject)
	if err == nil {
		jsonListDiscoveryVrfResponseObject, _ := json.Marshal(dst.ListDiscoveryVrfResponseObject)
		if string(jsonListDiscoveryVrfResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryVrfResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryVrfResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryVrf
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryVrf)
	if err == nil {
		jsonArrayOfDiscoveryVrf, _ := json.Marshal(dst.ArrayOfDiscoveryVrf)
		if string(jsonArrayOfDiscoveryVrf) == "{}" { // empty struct
			dst.ArrayOfDiscoveryVrf = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryVrf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryVrfResponseObject = nil
		dst.ArrayOfDiscoveryVrf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryVrfResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryVrfResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryVrfResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryVrfResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryVrfResponseObject)
	}

	if src.ArrayOfDiscoveryVrf != nil {
		return json.Marshal(&src.ArrayOfDiscoveryVrf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryVrfResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryVrfResponseObject != nil {
		return obj.ListDiscoveryVrfResponseObject
	}

	if obj.ArrayOfDiscoveryVrf != nil {
		return obj.ArrayOfDiscoveryVrf
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryVrfResponse struct {
	value *ListDiscoveryVrfResponse
	isSet bool
}

func (v NullableListDiscoveryVrfResponse) Get() *ListDiscoveryVrfResponse {
	return v.value
}

func (v *NullableListDiscoveryVrfResponse) Set(val *ListDiscoveryVrfResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryVrfResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryVrfResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryVrfResponse(val *ListDiscoveryVrfResponse) *NullableListDiscoveryVrfResponse {
	return &NullableListDiscoveryVrfResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryVrfResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryVrfResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
