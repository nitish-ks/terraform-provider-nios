/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// UpdateDiscoveryCredentialgroupResponse - struct for UpdateDiscoveryCredentialgroupResponse
type UpdateDiscoveryCredentialgroupResponse struct {
	UpdateDiscoveryCredentialgroupResponseAsObject *UpdateDiscoveryCredentialgroupResponseAsObject
	String                                         *string
}

// UpdateDiscoveryCredentialgroupResponseAsObjectAsUpdateDiscoveryCredentialgroupResponse is a convenience function that returns UpdateDiscoveryCredentialgroupResponseAsObject wrapped in UpdateDiscoveryCredentialgroupResponse
func UpdateDiscoveryCredentialgroupResponseAsObjectAsUpdateDiscoveryCredentialgroupResponse(v *UpdateDiscoveryCredentialgroupResponseAsObject) UpdateDiscoveryCredentialgroupResponse {
	return UpdateDiscoveryCredentialgroupResponse{
		UpdateDiscoveryCredentialgroupResponseAsObject: v,
	}
}

// stringAsUpdateDiscoveryCredentialgroupResponse is a convenience function that returns string wrapped in UpdateDiscoveryCredentialgroupResponse
func StringAsUpdateDiscoveryCredentialgroupResponse(v *string) UpdateDiscoveryCredentialgroupResponse {
	return UpdateDiscoveryCredentialgroupResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDiscoveryCredentialgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDiscoveryCredentialgroupResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDiscoveryCredentialgroupResponseAsObject)
	if err == nil {
		jsonUpdateDiscoveryCredentialgroupResponseAsObject, _ := json.Marshal(dst.UpdateDiscoveryCredentialgroupResponseAsObject)
		if string(jsonUpdateDiscoveryCredentialgroupResponseAsObject) == "{}" { // empty struct
			dst.UpdateDiscoveryCredentialgroupResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDiscoveryCredentialgroupResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDiscoveryCredentialgroupResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDiscoveryCredentialgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDiscoveryCredentialgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDiscoveryCredentialgroupResponseAsObject != nil {
		return json.Marshal(&src.UpdateDiscoveryCredentialgroupResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDiscoveryCredentialgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDiscoveryCredentialgroupResponseAsObject != nil {
		return obj.UpdateDiscoveryCredentialgroupResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDiscoveryCredentialgroupResponse struct {
	value *UpdateDiscoveryCredentialgroupResponse
	isSet bool
}

func (v NullableUpdateDiscoveryCredentialgroupResponse) Get() *UpdateDiscoveryCredentialgroupResponse {
	return v.value
}

func (v *NullableUpdateDiscoveryCredentialgroupResponse) Set(val *UpdateDiscoveryCredentialgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDiscoveryCredentialgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDiscoveryCredentialgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDiscoveryCredentialgroupResponse(val *UpdateDiscoveryCredentialgroupResponse) *NullableUpdateDiscoveryCredentialgroupResponse {
	return &NullableUpdateDiscoveryCredentialgroupResponse{value: val, isSet: true}
}

func (v NullableUpdateDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDiscoveryCredentialgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
