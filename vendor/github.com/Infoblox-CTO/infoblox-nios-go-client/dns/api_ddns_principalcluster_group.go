/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DdnsPrincipalclusterGroupAPI interface {
	/*
		Create Create a ddns:principalcluster:group object

		Creates a new ddns:principalcluster:group object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterGroupAPICreateRequest
	*/
	Create(ctx context.Context) DdnsPrincipalclusterGroupAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateDdnsPrincipalclusterGroupResponse
	CreateExecute(r DdnsPrincipalclusterGroupAPICreateRequest) (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		Delete Delete a ddns:principalcluster:group object

		Deletes a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r DdnsPrincipalclusterGroupAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve ddns:principalcluster:group objects

		Returns a list of ddns:principalcluster:group objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DdnsPrincipalclusterGroupAPIListRequest
	*/
	List(ctx context.Context) DdnsPrincipalclusterGroupAPIListRequest

	// ListExecute executes the request
	//  @return ListDdnsPrincipalclusterGroupResponse
	ListExecute(r DdnsPrincipalclusterGroupAPIListRequest) (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		Read Get a specific ddns:principalcluster:group object

		Returns a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIReadRequest
	*/
	Read(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIReadRequest

	// ReadExecute executes the request
	//  @return GetDdnsPrincipalclusterGroupResponse
	ReadExecute(r DdnsPrincipalclusterGroupAPIReadRequest) (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error)
	/*
		Update Update a ddns:principalcluster:group object

		Updates a specific ddns:principalcluster:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ddns:principalcluster:group object
		@return DdnsPrincipalclusterGroupAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateDdnsPrincipalclusterGroupResponse
	UpdateExecute(r DdnsPrincipalclusterGroupAPIUpdateRequest) (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error)
}

// DdnsPrincipalclusterGroupAPIService DdnsPrincipalclusterGroupAPI service
type DdnsPrincipalclusterGroupAPIService internal.Service

type DdnsPrincipalclusterGroupAPICreateRequest struct {
	ctx                       context.Context
	ApiService                DdnsPrincipalclusterGroupAPI
	ddnsPrincipalclusterGroup *DdnsPrincipalclusterGroup
	returnFields              *string
	returnFieldsPlus          *string
	returnAsObject            *int32
}

// Object data to create
func (r DdnsPrincipalclusterGroupAPICreateRequest) DdnsPrincipalclusterGroup(ddnsPrincipalclusterGroup DdnsPrincipalclusterGroup) DdnsPrincipalclusterGroupAPICreateRequest {
	r.ddnsPrincipalclusterGroup = &ddnsPrincipalclusterGroup
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPICreateRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) DdnsPrincipalclusterGroupAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPICreateRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPICreateRequest) Execute() (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a ddns:principalcluster:group object

Creates a new ddns:principalcluster:group object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterGroupAPICreateRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) Create(ctx context.Context) DdnsPrincipalclusterGroupAPICreateRequest {
	return DdnsPrincipalclusterGroupAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) CreateExecute(r DdnsPrincipalclusterGroupAPICreateRequest) (*CreateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalclusterGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalclusterGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalclusterGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIDeleteRequest struct {
	ctx        context.Context
	ApiService DdnsPrincipalclusterGroupAPI
	reference  string
}

func (r DdnsPrincipalclusterGroupAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a ddns:principalcluster:group object

Deletes a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIDeleteRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) Delete(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIDeleteRequest {
	return DdnsPrincipalclusterGroupAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DdnsPrincipalclusterGroupAPIService) DeleteExecute(r DdnsPrincipalclusterGroupAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIListRequest struct {
	ctx              context.Context
	ApiService       DdnsPrincipalclusterGroupAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIListRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) DdnsPrincipalclusterGroupAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r DdnsPrincipalclusterGroupAPIListRequest) MaxResults(maxResults int32) DdnsPrincipalclusterGroupAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIListRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DdnsPrincipalclusterGroupAPIListRequest) Paging(paging int32) DdnsPrincipalclusterGroupAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DdnsPrincipalclusterGroupAPIListRequest) PageId(pageId string) DdnsPrincipalclusterGroupAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r DdnsPrincipalclusterGroupAPIListRequest) Filters(filters map[string]interface{}) DdnsPrincipalclusterGroupAPIListRequest {
	r.filters = &filters
	return r
}

func (r DdnsPrincipalclusterGroupAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) DdnsPrincipalclusterGroupAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DdnsPrincipalclusterGroupAPIListRequest) Execute() (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve ddns:principalcluster:group objects

Returns a list of ddns:principalcluster:group objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DdnsPrincipalclusterGroupAPIListRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) List(ctx context.Context) DdnsPrincipalclusterGroupAPIListRequest {
	return DdnsPrincipalclusterGroupAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) ListExecute(r DdnsPrincipalclusterGroupAPIListRequest) (*ListDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIReadRequest struct {
	ctx              context.Context
	ApiService       DdnsPrincipalclusterGroupAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIReadRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) DdnsPrincipalclusterGroupAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIReadRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPIReadRequest) Execute() (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific ddns:principalcluster:group object

Returns a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIReadRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) Read(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIReadRequest {
	return DdnsPrincipalclusterGroupAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) ReadExecute(r DdnsPrincipalclusterGroupAPIReadRequest) (*GetDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DdnsPrincipalclusterGroupAPIUpdateRequest struct {
	ctx                       context.Context
	ApiService                DdnsPrincipalclusterGroupAPI
	reference                 string
	ddnsPrincipalclusterGroup *DdnsPrincipalclusterGroup
	returnFields              *string
	returnFieldsPlus          *string
	returnAsObject            *int32
}

// Object data to update
func (r DdnsPrincipalclusterGroupAPIUpdateRequest) DdnsPrincipalclusterGroup(ddnsPrincipalclusterGroup DdnsPrincipalclusterGroup) DdnsPrincipalclusterGroupAPIUpdateRequest {
	r.ddnsPrincipalclusterGroup = &ddnsPrincipalclusterGroup
	return r
}

// Enter the field names followed by comma
func (r DdnsPrincipalclusterGroupAPIUpdateRequest) ReturnFields(returnFields string) DdnsPrincipalclusterGroupAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DdnsPrincipalclusterGroupAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) DdnsPrincipalclusterGroupAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DdnsPrincipalclusterGroupAPIUpdateRequest) ReturnAsObject(returnAsObject int32) DdnsPrincipalclusterGroupAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DdnsPrincipalclusterGroupAPIUpdateRequest) Execute() (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a ddns:principalcluster:group object

Updates a specific ddns:principalcluster:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ddns:principalcluster:group object
	@return DdnsPrincipalclusterGroupAPIUpdateRequest
*/
func (a *DdnsPrincipalclusterGroupAPIService) Update(ctx context.Context, reference string) DdnsPrincipalclusterGroupAPIUpdateRequest {
	return DdnsPrincipalclusterGroupAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDdnsPrincipalclusterGroupResponse
func (a *DdnsPrincipalclusterGroupAPIService) UpdateExecute(r DdnsPrincipalclusterGroupAPIUpdateRequest) (*UpdateDdnsPrincipalclusterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDdnsPrincipalclusterGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DdnsPrincipalclusterGroupAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ddns:principalcluster:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ddnsPrincipalclusterGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("ddnsPrincipalclusterGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ddnsPrincipalclusterGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
