/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupDelegationAPI interface {
	/*
		Create Create a nsgroup:delegation object

		Creates a new nsgroup:delegation object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupDelegationAPICreateRequest
	*/
	Create(ctx context.Context) NsgroupDelegationAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateNsgroupDelegationResponse
	CreateExecute(r NsgroupDelegationAPICreateRequest) (*CreateNsgroupDelegationResponse, *http.Response, error)
	/*
		Delete Delete a nsgroup:delegation object

		Deletes a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) NsgroupDelegationAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r NsgroupDelegationAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve nsgroup:delegation objects

		Returns a list of nsgroup:delegation objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupDelegationAPIListRequest
	*/
	List(ctx context.Context) NsgroupDelegationAPIListRequest

	// ListExecute executes the request
	//  @return ListNsgroupDelegationResponse
	ListExecute(r NsgroupDelegationAPIListRequest) (*ListNsgroupDelegationResponse, *http.Response, error)
	/*
		Read Get a specific nsgroup:delegation object

		Returns a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPIReadRequest
	*/
	Read(ctx context.Context, reference string) NsgroupDelegationAPIReadRequest

	// ReadExecute executes the request
	//  @return GetNsgroupDelegationResponse
	ReadExecute(r NsgroupDelegationAPIReadRequest) (*GetNsgroupDelegationResponse, *http.Response, error)
	/*
		Update Update a nsgroup:delegation object

		Updates a specific nsgroup:delegation object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:delegation object
		@return NsgroupDelegationAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) NsgroupDelegationAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateNsgroupDelegationResponse
	UpdateExecute(r NsgroupDelegationAPIUpdateRequest) (*UpdateNsgroupDelegationResponse, *http.Response, error)
}

// NsgroupDelegationAPIService NsgroupDelegationAPI service
type NsgroupDelegationAPIService internal.Service

type NsgroupDelegationAPICreateRequest struct {
	ctx               context.Context
	ApiService        NsgroupDelegationAPI
	nsgroupDelegation *NsgroupDelegation
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to create
func (r NsgroupDelegationAPICreateRequest) NsgroupDelegation(nsgroupDelegation NsgroupDelegation) NsgroupDelegationAPICreateRequest {
	r.nsgroupDelegation = &nsgroupDelegation
	return r
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPICreateRequest) ReturnFields(returnFields string) NsgroupDelegationAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupDelegationAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPICreateRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPICreateRequest) Execute() (*CreateNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a nsgroup:delegation object

Creates a new nsgroup:delegation object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupDelegationAPICreateRequest
*/
func (a *NsgroupDelegationAPIService) Create(ctx context.Context) NsgroupDelegationAPICreateRequest {
	return NsgroupDelegationAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) CreateExecute(r NsgroupDelegationAPICreateRequest) (*CreateNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupDelegation == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupDelegation is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupDelegation != nil {
		if r.nsgroupDelegation.Extattrs == nil {
			r.nsgroupDelegation.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupDelegation.Extattrs)[k]; !ok {
				(*r.nsgroupDelegation.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupDelegation
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPIDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupDelegationAPI
	reference  string
}

func (r NsgroupDelegationAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a nsgroup:delegation object

Deletes a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPIDeleteRequest
*/
func (a *NsgroupDelegationAPIService) Delete(ctx context.Context, reference string) NsgroupDelegationAPIDeleteRequest {
	return NsgroupDelegationAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupDelegationAPIService) DeleteExecute(r NsgroupDelegationAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupDelegationAPIListRequest struct {
	ctx              context.Context
	ApiService       NsgroupDelegationAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPIListRequest) ReturnFields(returnFields string) NsgroupDelegationAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupDelegationAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r NsgroupDelegationAPIListRequest) MaxResults(maxResults int32) NsgroupDelegationAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPIListRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupDelegationAPIListRequest) Paging(paging int32) NsgroupDelegationAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupDelegationAPIListRequest) PageId(pageId string) NsgroupDelegationAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupDelegationAPIListRequest) Filters(filters map[string]interface{}) NsgroupDelegationAPIListRequest {
	r.filters = &filters
	return r
}

func (r NsgroupDelegationAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupDelegationAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupDelegationAPIListRequest) Execute() (*ListNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve nsgroup:delegation objects

Returns a list of nsgroup:delegation objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupDelegationAPIListRequest
*/
func (a *NsgroupDelegationAPIService) List(ctx context.Context) NsgroupDelegationAPIListRequest {
	return NsgroupDelegationAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) ListExecute(r NsgroupDelegationAPIListRequest) (*ListNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPIReadRequest struct {
	ctx              context.Context
	ApiService       NsgroupDelegationAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPIReadRequest) ReturnFields(returnFields string) NsgroupDelegationAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupDelegationAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPIReadRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPIReadRequest) Execute() (*GetNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific nsgroup:delegation object

Returns a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPIReadRequest
*/
func (a *NsgroupDelegationAPIService) Read(ctx context.Context, reference string) NsgroupDelegationAPIReadRequest {
	return NsgroupDelegationAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) ReadExecute(r NsgroupDelegationAPIReadRequest) (*GetNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupDelegationAPIUpdateRequest struct {
	ctx               context.Context
	ApiService        NsgroupDelegationAPI
	reference         string
	nsgroupDelegation *NsgroupDelegation
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to update
func (r NsgroupDelegationAPIUpdateRequest) NsgroupDelegation(nsgroupDelegation NsgroupDelegation) NsgroupDelegationAPIUpdateRequest {
	r.nsgroupDelegation = &nsgroupDelegation
	return r
}

// Enter the field names followed by comma
func (r NsgroupDelegationAPIUpdateRequest) ReturnFields(returnFields string) NsgroupDelegationAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupDelegationAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupDelegationAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupDelegationAPIUpdateRequest) ReturnAsObject(returnAsObject int32) NsgroupDelegationAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupDelegationAPIUpdateRequest) Execute() (*UpdateNsgroupDelegationResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a nsgroup:delegation object

Updates a specific nsgroup:delegation object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:delegation object
	@return NsgroupDelegationAPIUpdateRequest
*/
func (a *NsgroupDelegationAPIService) Update(ctx context.Context, reference string) NsgroupDelegationAPIUpdateRequest {
	return NsgroupDelegationAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupDelegationResponse
func (a *NsgroupDelegationAPIService) UpdateExecute(r NsgroupDelegationAPIUpdateRequest) (*UpdateNsgroupDelegationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupDelegationResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupDelegationAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:delegation/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupDelegation == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupDelegation is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupDelegation != nil {
		if r.nsgroupDelegation.Extattrs == nil {
			r.nsgroupDelegation.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupDelegation.Extattrs)[k]; !ok {
				(*r.nsgroupDelegation.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupDelegation
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
