/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NsgroupForwardingmemberAPI interface {
	/*
		Create Create a nsgroup:forwardingmember object

		Creates a new nsgroup:forwardingmember object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardingmemberAPICreateRequest
	*/
	Create(ctx context.Context) NsgroupForwardingmemberAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateNsgroupForwardingmemberResponse
	CreateExecute(r NsgroupForwardingmemberAPICreateRequest) (*CreateNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		Delete Delete a nsgroup:forwardingmember object

		Deletes a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) NsgroupForwardingmemberAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r NsgroupForwardingmemberAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve nsgroup:forwardingmember objects

		Returns a list of nsgroup:forwardingmember objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NsgroupForwardingmemberAPIListRequest
	*/
	List(ctx context.Context) NsgroupForwardingmemberAPIListRequest

	// ListExecute executes the request
	//  @return ListNsgroupForwardingmemberResponse
	ListExecute(r NsgroupForwardingmemberAPIListRequest) (*ListNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		Read Get a specific nsgroup:forwardingmember object

		Returns a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPIReadRequest
	*/
	Read(ctx context.Context, reference string) NsgroupForwardingmemberAPIReadRequest

	// ReadExecute executes the request
	//  @return GetNsgroupForwardingmemberResponse
	ReadExecute(r NsgroupForwardingmemberAPIReadRequest) (*GetNsgroupForwardingmemberResponse, *http.Response, error)
	/*
		Update Update a nsgroup:forwardingmember object

		Updates a specific nsgroup:forwardingmember object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the nsgroup:forwardingmember object
		@return NsgroupForwardingmemberAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) NsgroupForwardingmemberAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateNsgroupForwardingmemberResponse
	UpdateExecute(r NsgroupForwardingmemberAPIUpdateRequest) (*UpdateNsgroupForwardingmemberResponse, *http.Response, error)
}

// NsgroupForwardingmemberAPIService NsgroupForwardingmemberAPI service
type NsgroupForwardingmemberAPIService internal.Service

type NsgroupForwardingmemberAPICreateRequest struct {
	ctx                     context.Context
	ApiService              NsgroupForwardingmemberAPI
	nsgroupForwardingmember *NsgroupForwardingmember
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to create
func (r NsgroupForwardingmemberAPICreateRequest) NsgroupForwardingmember(nsgroupForwardingmember NsgroupForwardingmember) NsgroupForwardingmemberAPICreateRequest {
	r.nsgroupForwardingmember = &nsgroupForwardingmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPICreateRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupForwardingmemberAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPICreateRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPICreateRequest) Execute() (*CreateNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a nsgroup:forwardingmember object

Creates a new nsgroup:forwardingmember object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardingmemberAPICreateRequest
*/
func (a *NsgroupForwardingmemberAPIService) Create(ctx context.Context) NsgroupForwardingmemberAPICreateRequest {
	return NsgroupForwardingmemberAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) CreateExecute(r NsgroupForwardingmemberAPICreateRequest) (*CreateNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardingmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardingmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardingmember != nil {
		if r.nsgroupForwardingmember.ExtAttrs == nil {
			r.nsgroupForwardingmember.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardingmember.ExtAttrs)[k]; !ok {
				(*r.nsgroupForwardingmember.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardingmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPIDeleteRequest struct {
	ctx        context.Context
	ApiService NsgroupForwardingmemberAPI
	reference  string
}

func (r NsgroupForwardingmemberAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a nsgroup:forwardingmember object

Deletes a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPIDeleteRequest
*/
func (a *NsgroupForwardingmemberAPIService) Delete(ctx context.Context, reference string) NsgroupForwardingmemberAPIDeleteRequest {
	return NsgroupForwardingmemberAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NsgroupForwardingmemberAPIService) DeleteExecute(r NsgroupForwardingmemberAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPIListRequest struct {
	ctx              context.Context
	ApiService       NsgroupForwardingmemberAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPIListRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupForwardingmemberAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r NsgroupForwardingmemberAPIListRequest) MaxResults(maxResults int32) NsgroupForwardingmemberAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPIListRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NsgroupForwardingmemberAPIListRequest) Paging(paging int32) NsgroupForwardingmemberAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NsgroupForwardingmemberAPIListRequest) PageId(pageId string) NsgroupForwardingmemberAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r NsgroupForwardingmemberAPIListRequest) Filters(filters map[string]interface{}) NsgroupForwardingmemberAPIListRequest {
	r.filters = &filters
	return r
}

func (r NsgroupForwardingmemberAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) NsgroupForwardingmemberAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NsgroupForwardingmemberAPIListRequest) Execute() (*ListNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve nsgroup:forwardingmember objects

Returns a list of nsgroup:forwardingmember objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NsgroupForwardingmemberAPIListRequest
*/
func (a *NsgroupForwardingmemberAPIService) List(ctx context.Context) NsgroupForwardingmemberAPIListRequest {
	return NsgroupForwardingmemberAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) ListExecute(r NsgroupForwardingmemberAPIListRequest) (*ListNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPIReadRequest struct {
	ctx              context.Context
	ApiService       NsgroupForwardingmemberAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPIReadRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupForwardingmemberAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPIReadRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPIReadRequest) Execute() (*GetNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific nsgroup:forwardingmember object

Returns a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPIReadRequest
*/
func (a *NsgroupForwardingmemberAPIService) Read(ctx context.Context, reference string) NsgroupForwardingmemberAPIReadRequest {
	return NsgroupForwardingmemberAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) ReadExecute(r NsgroupForwardingmemberAPIReadRequest) (*GetNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NsgroupForwardingmemberAPIUpdateRequest struct {
	ctx                     context.Context
	ApiService              NsgroupForwardingmemberAPI
	reference               string
	nsgroupForwardingmember *NsgroupForwardingmember
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to update
func (r NsgroupForwardingmemberAPIUpdateRequest) NsgroupForwardingmember(nsgroupForwardingmember NsgroupForwardingmember) NsgroupForwardingmemberAPIUpdateRequest {
	r.nsgroupForwardingmember = &nsgroupForwardingmember
	return r
}

// Enter the field names followed by comma
func (r NsgroupForwardingmemberAPIUpdateRequest) ReturnFields(returnFields string) NsgroupForwardingmemberAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NsgroupForwardingmemberAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) NsgroupForwardingmemberAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NsgroupForwardingmemberAPIUpdateRequest) ReturnAsObject(returnAsObject int32) NsgroupForwardingmemberAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NsgroupForwardingmemberAPIUpdateRequest) Execute() (*UpdateNsgroupForwardingmemberResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a nsgroup:forwardingmember object

Updates a specific nsgroup:forwardingmember object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the nsgroup:forwardingmember object
	@return NsgroupForwardingmemberAPIUpdateRequest
*/
func (a *NsgroupForwardingmemberAPIService) Update(ctx context.Context, reference string) NsgroupForwardingmemberAPIUpdateRequest {
	return NsgroupForwardingmemberAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNsgroupForwardingmemberResponse
func (a *NsgroupForwardingmemberAPIService) UpdateExecute(r NsgroupForwardingmemberAPIUpdateRequest) (*UpdateNsgroupForwardingmemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNsgroupForwardingmemberResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NsgroupForwardingmemberAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/nsgroup:forwardingmember/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nsgroupForwardingmember == nil {
		return localVarReturnValue, nil, internal.ReportError("nsgroupForwardingmember is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.nsgroupForwardingmember != nil {
		if r.nsgroupForwardingmember.ExtAttrs == nil {
			r.nsgroupForwardingmember.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.nsgroupForwardingmember.ExtAttrs)[k]; !ok {
				(*r.nsgroupForwardingmember.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.nsgroupForwardingmember
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
