/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordPtrAPI interface {
	/*
		Create Create a record:ptr object

		Creates a new record:ptr object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordPtrAPICreateRequest
	*/
	Create(ctx context.Context) RecordPtrAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateRecordPtrResponse
	CreateExecute(r RecordPtrAPICreateRequest) (*CreateRecordPtrResponse, *http.Response, error)
	/*
		Delete Delete a record:ptr object

		Deletes a specific record:ptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ptr object
		@return RecordPtrAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) RecordPtrAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r RecordPtrAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve record:ptr objects

		Returns a list of record:ptr objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordPtrAPIListRequest
	*/
	List(ctx context.Context) RecordPtrAPIListRequest

	// ListExecute executes the request
	//  @return ListRecordPtrResponse
	ListExecute(r RecordPtrAPIListRequest) (*ListRecordPtrResponse, *http.Response, error)
	/*
		Read Get a specific record:ptr object

		Returns a specific record:ptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ptr object
		@return RecordPtrAPIReadRequest
	*/
	Read(ctx context.Context, reference string) RecordPtrAPIReadRequest

	// ReadExecute executes the request
	//  @return GetRecordPtrResponse
	ReadExecute(r RecordPtrAPIReadRequest) (*GetRecordPtrResponse, *http.Response, error)
	/*
		Update Update a record:ptr object

		Updates a specific record:ptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:ptr object
		@return RecordPtrAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) RecordPtrAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateRecordPtrResponse
	UpdateExecute(r RecordPtrAPIUpdateRequest) (*UpdateRecordPtrResponse, *http.Response, error)
}

// RecordPtrAPIService RecordPtrAPI service
type RecordPtrAPIService internal.Service

type RecordPtrAPICreateRequest struct {
	ctx              context.Context
	ApiService       RecordPtrAPI
	recordPtr        *RecordPtr
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r RecordPtrAPICreateRequest) RecordPtr(recordPtr RecordPtr) RecordPtrAPICreateRequest {
	r.recordPtr = &recordPtr
	return r
}

// Enter the field names followed by comma
func (r RecordPtrAPICreateRequest) ReturnFields(returnFields string) RecordPtrAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordPtrAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordPtrAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordPtrAPICreateRequest) ReturnAsObject(returnAsObject int32) RecordPtrAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordPtrAPICreateRequest) Execute() (*CreateRecordPtrResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a record:ptr object

Creates a new record:ptr object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordPtrAPICreateRequest
*/
func (a *RecordPtrAPIService) Create(ctx context.Context) RecordPtrAPICreateRequest {
	return RecordPtrAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordPtrResponse
func (a *RecordPtrAPIService) CreateExecute(r RecordPtrAPICreateRequest) (*CreateRecordPtrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordPtrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordPtrAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordPtr == nil {
		return localVarReturnValue, nil, internal.ReportError("recordPtr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordPtr != nil {
		if r.recordPtr.ExtAttrs == nil {
			r.recordPtr.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordPtr.ExtAttrs)[k]; !ok {
				(*r.recordPtr.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	if r.recordPtr.FuncCall != nil {
		bodyForFuncCall := r.recordPtr
		if bodyForFuncCall.FuncCall.AttributeName == "" {
			return localVarReturnValue, nil, internal.ReportError("FuncCall.AttributeName is required and must be specified")
		}
		var funcStr string = bodyForFuncCall.FuncCall.AttributeName
		if funcStr == "Ipv4addr" {
			if bodyForFuncCall.Ipv4addr.String != nil {
				return localVarReturnValue, nil, internal.ReportError("Ipv4addr cannot be provided when function call is used")
			} else {

				var l RecordPtrIpv4addr
				var m RecordPtrIpv4addrOneOf
				m.ObjectFunction = bodyForFuncCall.FuncCall.ObjectFunction
				m.Parameters = bodyForFuncCall.FuncCall.Parameters
				m.ResultField = bodyForFuncCall.FuncCall.ResultField
				m.Object = bodyForFuncCall.FuncCall.Object
				m.ObjectParameters = bodyForFuncCall.FuncCall.ObjectParameters

				l.RecordPtrIpv4addrOneOf = &m
				l.String = nil
				bodyForFuncCall.Ipv4addr = &l
				bodyForFuncCall.FuncCall = nil
			}
		}
		r.recordPtr = bodyForFuncCall
	}
	if r.recordPtr.FuncCall != nil {
		bodyForFuncCall := r.recordPtr
		if bodyForFuncCall.FuncCall.AttributeName == "" {
			return localVarReturnValue, nil, internal.ReportError("FuncCall.AttributeName is required and must be specified")
		}
		var funcStr string = bodyForFuncCall.FuncCall.AttributeName
		if funcStr == "Ipv6addr" {
			if bodyForFuncCall.Ipv6addr.String != nil {
				return localVarReturnValue, nil, internal.ReportError("Ipv6addr cannot be provided when function call is used")
			} else {

				var l RecordPtrIpv6addr
				var m RecordPtrIpv6addrOneOf
				m.ObjectFunction = bodyForFuncCall.FuncCall.ObjectFunction
				m.Parameters = bodyForFuncCall.FuncCall.Parameters
				m.ResultField = bodyForFuncCall.FuncCall.ResultField
				m.Object = bodyForFuncCall.FuncCall.Object
				m.ObjectParameters = bodyForFuncCall.FuncCall.ObjectParameters

				l.RecordPtrIpv6addrOneOf = &m
				l.String = nil
				bodyForFuncCall.Ipv6addr = &l
				bodyForFuncCall.FuncCall = nil
			}
		}
		r.recordPtr = bodyForFuncCall
	}
	// body params
	localVarPostBody = r.recordPtr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordPtrAPIDeleteRequest struct {
	ctx        context.Context
	ApiService RecordPtrAPI
	reference  string
}

func (r RecordPtrAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a record:ptr object

Deletes a specific record:ptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ptr object
	@return RecordPtrAPIDeleteRequest
*/
func (a *RecordPtrAPIService) Delete(ctx context.Context, reference string) RecordPtrAPIDeleteRequest {
	return RecordPtrAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordPtrAPIService) DeleteExecute(r RecordPtrAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordPtrAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordPtrAPIListRequest struct {
	ctx              context.Context
	ApiService       RecordPtrAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordPtrAPIListRequest) ReturnFields(returnFields string) RecordPtrAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordPtrAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordPtrAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r RecordPtrAPIListRequest) MaxResults(maxResults int32) RecordPtrAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordPtrAPIListRequest) ReturnAsObject(returnAsObject int32) RecordPtrAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordPtrAPIListRequest) Paging(paging int32) RecordPtrAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordPtrAPIListRequest) PageId(pageId string) RecordPtrAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r RecordPtrAPIListRequest) Filters(filters map[string]interface{}) RecordPtrAPIListRequest {
	r.filters = &filters
	return r
}

func (r RecordPtrAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordPtrAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordPtrAPIListRequest) Execute() (*ListRecordPtrResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve record:ptr objects

Returns a list of record:ptr objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordPtrAPIListRequest
*/
func (a *RecordPtrAPIService) List(ctx context.Context) RecordPtrAPIListRequest {
	return RecordPtrAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordPtrResponse
func (a *RecordPtrAPIService) ListExecute(r RecordPtrAPIListRequest) (*ListRecordPtrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordPtrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordPtrAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordPtrAPIReadRequest struct {
	ctx              context.Context
	ApiService       RecordPtrAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r RecordPtrAPIReadRequest) ReturnFields(returnFields string) RecordPtrAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordPtrAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordPtrAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordPtrAPIReadRequest) ReturnAsObject(returnAsObject int32) RecordPtrAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordPtrAPIReadRequest) Execute() (*GetRecordPtrResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific record:ptr object

Returns a specific record:ptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ptr object
	@return RecordPtrAPIReadRequest
*/
func (a *RecordPtrAPIService) Read(ctx context.Context, reference string) RecordPtrAPIReadRequest {
	return RecordPtrAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordPtrResponse
func (a *RecordPtrAPIService) ReadExecute(r RecordPtrAPIReadRequest) (*GetRecordPtrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordPtrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordPtrAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordPtrAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       RecordPtrAPI
	reference        string
	recordPtr        *RecordPtr
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r RecordPtrAPIUpdateRequest) RecordPtr(recordPtr RecordPtr) RecordPtrAPIUpdateRequest {
	r.recordPtr = &recordPtr
	return r
}

// Enter the field names followed by comma
func (r RecordPtrAPIUpdateRequest) ReturnFields(returnFields string) RecordPtrAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordPtrAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordPtrAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordPtrAPIUpdateRequest) ReturnAsObject(returnAsObject int32) RecordPtrAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordPtrAPIUpdateRequest) Execute() (*UpdateRecordPtrResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a record:ptr object

Updates a specific record:ptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:ptr object
	@return RecordPtrAPIUpdateRequest
*/
func (a *RecordPtrAPIService) Update(ctx context.Context, reference string) RecordPtrAPIUpdateRequest {
	return RecordPtrAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordPtrResponse
func (a *RecordPtrAPIService) UpdateExecute(r RecordPtrAPIUpdateRequest) (*UpdateRecordPtrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordPtrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordPtrAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:ptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordPtr == nil {
		return localVarReturnValue, nil, internal.ReportError("recordPtr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordPtr != nil {
		if r.recordPtr.ExtAttrs == nil {
			r.recordPtr.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordPtr.ExtAttrs)[k]; !ok {
				(*r.recordPtr.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	if r.recordPtr.FuncCall != nil {
		bodyForFuncCall := r.recordPtr
		bodyForFuncCall.FuncCall = nil
		bodyForFuncCall.Ipv4addr = nil
		r.recordPtr = bodyForFuncCall
	}
	if r.recordPtr.FuncCall != nil {
		bodyForFuncCall := r.recordPtr
		bodyForFuncCall.FuncCall = nil
		bodyForFuncCall.Ipv6addr = nil
		r.recordPtr = bodyForFuncCall
	}
	// body params
	localVarPostBody = r.recordPtr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
