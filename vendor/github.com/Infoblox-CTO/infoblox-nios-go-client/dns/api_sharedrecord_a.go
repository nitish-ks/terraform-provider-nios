/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SharedrecordAAPI interface {
	/*
		Create Create a sharedrecord:a object

		Creates a new sharedrecord:a object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAAPICreateRequest
	*/
	Create(ctx context.Context) SharedrecordAAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateSharedrecordAResponse
	CreateExecute(r SharedrecordAAPICreateRequest) (*CreateSharedrecordAResponse, *http.Response, error)
	/*
		Delete Delete a sharedrecord:a object

		Deletes a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) SharedrecordAAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r SharedrecordAAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve sharedrecord:a objects

		Returns a list of sharedrecord:a objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SharedrecordAAPIListRequest
	*/
	List(ctx context.Context) SharedrecordAAPIListRequest

	// ListExecute executes the request
	//  @return ListSharedrecordAResponse
	ListExecute(r SharedrecordAAPIListRequest) (*ListSharedrecordAResponse, *http.Response, error)
	/*
		Read Get a specific sharedrecord:a object

		Returns a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPIReadRequest
	*/
	Read(ctx context.Context, reference string) SharedrecordAAPIReadRequest

	// ReadExecute executes the request
	//  @return GetSharedrecordAResponse
	ReadExecute(r SharedrecordAAPIReadRequest) (*GetSharedrecordAResponse, *http.Response, error)
	/*
		Update Update a sharedrecord:a object

		Updates a specific sharedrecord:a object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the sharedrecord:a object
		@return SharedrecordAAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) SharedrecordAAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateSharedrecordAResponse
	UpdateExecute(r SharedrecordAAPIUpdateRequest) (*UpdateSharedrecordAResponse, *http.Response, error)
}

// SharedrecordAAPIService SharedrecordAAPI service
type SharedrecordAAPIService internal.Service

type SharedrecordAAPICreateRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAAPI
	sharedrecordA    *SharedrecordA
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r SharedrecordAAPICreateRequest) SharedrecordA(sharedrecordA SharedrecordA) SharedrecordAAPICreateRequest {
	r.sharedrecordA = &sharedrecordA
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAAPICreateRequest) ReturnFields(returnFields string) SharedrecordAAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) SharedrecordAAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPICreateRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPICreateRequest) Execute() (*CreateSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a sharedrecord:a object

Creates a new sharedrecord:a object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAAPICreateRequest
*/
func (a *SharedrecordAAPIService) Create(ctx context.Context) SharedrecordAAPICreateRequest {
	return SharedrecordAAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSharedrecordAResponse
func (a *SharedrecordAAPIService) CreateExecute(r SharedrecordAAPICreateRequest) (*CreateSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordA == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordA is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordA != nil {
		if r.sharedrecordA.ExtAttrs == nil {
			r.sharedrecordA.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordA.ExtAttrs)[k]; !ok {
				(*r.sharedrecordA.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordA
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPIDeleteRequest struct {
	ctx        context.Context
	ApiService SharedrecordAAPI
	reference  string
}

func (r SharedrecordAAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a sharedrecord:a object

Deletes a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPIDeleteRequest
*/
func (a *SharedrecordAAPIService) Delete(ctx context.Context, reference string) SharedrecordAAPIDeleteRequest {
	return SharedrecordAAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SharedrecordAAPIService) DeleteExecute(r SharedrecordAAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedrecordAAPIListRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r SharedrecordAAPIListRequest) ReturnFields(returnFields string) SharedrecordAAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) SharedrecordAAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r SharedrecordAAPIListRequest) MaxResults(maxResults int32) SharedrecordAAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPIListRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SharedrecordAAPIListRequest) Paging(paging int32) SharedrecordAAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SharedrecordAAPIListRequest) PageId(pageId string) SharedrecordAAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r SharedrecordAAPIListRequest) Filters(filters map[string]interface{}) SharedrecordAAPIListRequest {
	r.filters = &filters
	return r
}

func (r SharedrecordAAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) SharedrecordAAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SharedrecordAAPIListRequest) Execute() (*ListSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve sharedrecord:a objects

Returns a list of sharedrecord:a objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SharedrecordAAPIListRequest
*/
func (a *SharedrecordAAPIService) List(ctx context.Context) SharedrecordAAPIListRequest {
	return SharedrecordAAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSharedrecordAResponse
func (a *SharedrecordAAPIService) ListExecute(r SharedrecordAAPIListRequest) (*ListSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPIReadRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r SharedrecordAAPIReadRequest) ReturnFields(returnFields string) SharedrecordAAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) SharedrecordAAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPIReadRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPIReadRequest) Execute() (*GetSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific sharedrecord:a object

Returns a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPIReadRequest
*/
func (a *SharedrecordAAPIService) Read(ctx context.Context, reference string) SharedrecordAAPIReadRequest {
	return SharedrecordAAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSharedrecordAResponse
func (a *SharedrecordAAPIService) ReadExecute(r SharedrecordAAPIReadRequest) (*GetSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedrecordAAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       SharedrecordAAPI
	reference        string
	sharedrecordA    *SharedrecordA
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r SharedrecordAAPIUpdateRequest) SharedrecordA(sharedrecordA SharedrecordA) SharedrecordAAPIUpdateRequest {
	r.sharedrecordA = &sharedrecordA
	return r
}

// Enter the field names followed by comma
func (r SharedrecordAAPIUpdateRequest) ReturnFields(returnFields string) SharedrecordAAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SharedrecordAAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) SharedrecordAAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SharedrecordAAPIUpdateRequest) ReturnAsObject(returnAsObject int32) SharedrecordAAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SharedrecordAAPIUpdateRequest) Execute() (*UpdateSharedrecordAResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a sharedrecord:a object

Updates a specific sharedrecord:a object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the sharedrecord:a object
	@return SharedrecordAAPIUpdateRequest
*/
func (a *SharedrecordAAPIService) Update(ctx context.Context, reference string) SharedrecordAAPIUpdateRequest {
	return SharedrecordAAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSharedrecordAResponse
func (a *SharedrecordAAPIService) UpdateExecute(r SharedrecordAAPIUpdateRequest) (*UpdateSharedrecordAResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSharedrecordAResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SharedrecordAAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/sharedrecord:a/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedrecordA == nil {
		return localVarReturnValue, nil, internal.ReportError("sharedrecordA is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.sharedrecordA != nil {
		if r.sharedrecordA.ExtAttrs == nil {
			r.sharedrecordA.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.sharedrecordA.ExtAttrs)[k]; !ok {
				(*r.sharedrecordA.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.sharedrecordA
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
