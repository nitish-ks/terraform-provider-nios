/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the Allrecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allrecords{}

// Allrecords struct for Allrecords
type Allrecords struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The record address.
	Address *string `json:"address,omitempty"`
	// The record comment.
	Comment *string `json:"comment,omitempty"`
	// The record creator.
	Creator *string `json:"creator,omitempty"`
	// The GSS-TSIG principal that owns this record.
	DdnsPrincipal *string `json:"ddns_principal,omitempty"`
	// Determines if the DDNS updates for this record are allowed or not.
	DdnsProtected *bool `json:"ddns_protected,omitempty"`
	// The disable value determines if the record is disabled or not. \"False\" means the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The specific LBDN record.
	DtcObscured *string `json:"dtc_obscured,omitempty"`
	// The name of the record.
	Name *string `json:"name,omitempty"`
	// Determines if the record is reclaimable or not.
	Reclaimable *bool `json:"reclaimable,omitempty"`
	// The record object, if supported by the WAPI. Otherwise, the value is \"None\".
	Record *string `json:"record,omitempty"`
	// The Time To Live (TTL) value for which the record is valid or being cached. The 32-bit unsigned integer represents the duration in seconds. Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// The record type. When searching for an unspecified record type, the search is performed for all records. On retrieval, the appliance returns \"UNSUPPORTED\" for unsupported records.
	Type *string `json:"type,omitempty"`
	// Name of the DNS View in which the record resides.
	View *string `json:"view,omitempty"`
	// Name of the zone in which the record resides.
	Zone *string `json:"zone,omitempty"`
}

// NewAllrecords instantiates a new Allrecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllrecords() *Allrecords {
	this := Allrecords{}
	return &this
}

// NewAllrecordsWithDefaults instantiates a new Allrecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllrecordsWithDefaults() *Allrecords {
	this := Allrecords{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Allrecords) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Allrecords) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Allrecords) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Allrecords) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Allrecords) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Allrecords) SetAddress(v string) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Allrecords) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Allrecords) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Allrecords) SetComment(v string) {
	o.Comment = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Allrecords) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Allrecords) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *Allrecords) SetCreator(v string) {
	o.Creator = &v
}

// GetDdnsPrincipal returns the DdnsPrincipal field value if set, zero value otherwise.
func (o *Allrecords) GetDdnsPrincipal() string {
	if o == nil || IsNil(o.DdnsPrincipal) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipal
}

// GetDdnsPrincipalOk returns a tuple with the DdnsPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetDdnsPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipal) {
		return nil, false
	}
	return o.DdnsPrincipal, true
}

// HasDdnsPrincipal returns a boolean if a field has been set.
func (o *Allrecords) HasDdnsPrincipal() bool {
	if o != nil && !IsNil(o.DdnsPrincipal) {
		return true
	}

	return false
}

// SetDdnsPrincipal gets a reference to the given string and assigns it to the DdnsPrincipal field.
func (o *Allrecords) SetDdnsPrincipal(v string) {
	o.DdnsPrincipal = &v
}

// GetDdnsProtected returns the DdnsProtected field value if set, zero value otherwise.
func (o *Allrecords) GetDdnsProtected() bool {
	if o == nil || IsNil(o.DdnsProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsProtected
}

// GetDdnsProtectedOk returns a tuple with the DdnsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetDdnsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsProtected) {
		return nil, false
	}
	return o.DdnsProtected, true
}

// HasDdnsProtected returns a boolean if a field has been set.
func (o *Allrecords) HasDdnsProtected() bool {
	if o != nil && !IsNil(o.DdnsProtected) {
		return true
	}

	return false
}

// SetDdnsProtected gets a reference to the given bool and assigns it to the DdnsProtected field.
func (o *Allrecords) SetDdnsProtected(v bool) {
	o.DdnsProtected = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Allrecords) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Allrecords) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Allrecords) SetDisable(v bool) {
	o.Disable = &v
}

// GetDtcObscured returns the DtcObscured field value if set, zero value otherwise.
func (o *Allrecords) GetDtcObscured() string {
	if o == nil || IsNil(o.DtcObscured) {
		var ret string
		return ret
	}
	return *o.DtcObscured
}

// GetDtcObscuredOk returns a tuple with the DtcObscured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetDtcObscuredOk() (*string, bool) {
	if o == nil || IsNil(o.DtcObscured) {
		return nil, false
	}
	return o.DtcObscured, true
}

// HasDtcObscured returns a boolean if a field has been set.
func (o *Allrecords) HasDtcObscured() bool {
	if o != nil && !IsNil(o.DtcObscured) {
		return true
	}

	return false
}

// SetDtcObscured gets a reference to the given string and assigns it to the DtcObscured field.
func (o *Allrecords) SetDtcObscured(v string) {
	o.DtcObscured = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Allrecords) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Allrecords) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Allrecords) SetName(v string) {
	o.Name = &v
}

// GetReclaimable returns the Reclaimable field value if set, zero value otherwise.
func (o *Allrecords) GetReclaimable() bool {
	if o == nil || IsNil(o.Reclaimable) {
		var ret bool
		return ret
	}
	return *o.Reclaimable
}

// GetReclaimableOk returns a tuple with the Reclaimable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetReclaimableOk() (*bool, bool) {
	if o == nil || IsNil(o.Reclaimable) {
		return nil, false
	}
	return o.Reclaimable, true
}

// HasReclaimable returns a boolean if a field has been set.
func (o *Allrecords) HasReclaimable() bool {
	if o != nil && !IsNil(o.Reclaimable) {
		return true
	}

	return false
}

// SetReclaimable gets a reference to the given bool and assigns it to the Reclaimable field.
func (o *Allrecords) SetReclaimable(v bool) {
	o.Reclaimable = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *Allrecords) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *Allrecords) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *Allrecords) SetRecord(v string) {
	o.Record = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Allrecords) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Allrecords) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *Allrecords) SetTtl(v int64) {
	o.Ttl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Allrecords) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Allrecords) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Allrecords) SetType(v string) {
	o.Type = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Allrecords) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Allrecords) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *Allrecords) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *Allrecords) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrecords) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *Allrecords) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *Allrecords) SetZone(v string) {
	o.Zone = &v
}

func (o Allrecords) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allrecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DdnsPrincipal) {
		toSerialize["ddns_principal"] = o.DdnsPrincipal
	}
	if !IsNil(o.DdnsProtected) {
		toSerialize["ddns_protected"] = o.DdnsProtected
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DtcObscured) {
		toSerialize["dtc_obscured"] = o.DtcObscured
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Reclaimable) {
		toSerialize["reclaimable"] = o.Reclaimable
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableAllrecords struct {
	value *Allrecords
	isSet bool
}

func (v NullableAllrecords) Get() *Allrecords {
	return v.value
}

func (v *NullableAllrecords) Set(val *Allrecords) {
	v.value = val
	v.isSet = true
}

func (v NullableAllrecords) IsSet() bool {
	return v.isSet
}

func (v *NullableAllrecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllrecords(val *Allrecords) *NullableAllrecords {
	return &NullableAllrecords{value: val, isSet: true}
}

func (v NullableAllrecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllrecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
