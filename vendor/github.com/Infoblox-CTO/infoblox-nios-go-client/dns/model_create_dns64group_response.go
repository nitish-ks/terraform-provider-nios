/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateDns64groupResponse - struct for CreateDns64groupResponse
type CreateDns64groupResponse struct {
	CreateDns64groupResponseAsObject *CreateDns64groupResponseAsObject
	String                           *string
}

// CreateDns64groupResponseAsObjectAsCreateDns64groupResponse is a convenience function that returns CreateDns64groupResponseAsObject wrapped in CreateDns64groupResponse
func CreateDns64groupResponseAsObjectAsCreateDns64groupResponse(v *CreateDns64groupResponseAsObject) CreateDns64groupResponse {
	return CreateDns64groupResponse{
		CreateDns64groupResponseAsObject: v,
	}
}

// stringAsCreateDns64groupResponse is a convenience function that returns string wrapped in CreateDns64groupResponse
func StringAsCreateDns64groupResponse(v *string) CreateDns64groupResponse {
	return CreateDns64groupResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDns64groupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDns64groupResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateDns64groupResponseAsObject)
	if err == nil {
		jsonCreateDns64groupResponseAsObject, _ := json.Marshal(dst.CreateDns64groupResponseAsObject)
		if string(jsonCreateDns64groupResponseAsObject) == "{}" { // empty struct
			dst.CreateDns64groupResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateDns64groupResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDns64groupResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDns64groupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDns64groupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDns64groupResponse) MarshalJSON() ([]byte, error) {
	if src.CreateDns64groupResponseAsObject != nil {
		return json.Marshal(&src.CreateDns64groupResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDns64groupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateDns64groupResponseAsObject != nil {
		return obj.CreateDns64groupResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateDns64groupResponse struct {
	value *CreateDns64groupResponse
	isSet bool
}

func (v NullableCreateDns64groupResponse) Get() *CreateDns64groupResponse {
	return v.value
}

func (v *NullableCreateDns64groupResponse) Set(val *CreateDns64groupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDns64groupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDns64groupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDns64groupResponse(val *CreateDns64groupResponse) *NullableCreateDns64groupResponse {
	return &NullableCreateDns64groupResponse{value: val, isSet: true}
}

func (v NullableCreateDns64groupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDns64groupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
