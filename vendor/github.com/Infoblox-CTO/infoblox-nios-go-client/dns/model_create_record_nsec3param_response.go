/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateRecordNsec3paramResponse - struct for CreateRecordNsec3paramResponse
type CreateRecordNsec3paramResponse struct {
	CreateRecordNsec3paramResponseAsObject *CreateRecordNsec3paramResponseAsObject
	String                                 *string
}

// CreateRecordNsec3paramResponseAsObjectAsCreateRecordNsec3paramResponse is a convenience function that returns CreateRecordNsec3paramResponseAsObject wrapped in CreateRecordNsec3paramResponse
func CreateRecordNsec3paramResponseAsObjectAsCreateRecordNsec3paramResponse(v *CreateRecordNsec3paramResponseAsObject) CreateRecordNsec3paramResponse {
	return CreateRecordNsec3paramResponse{
		CreateRecordNsec3paramResponseAsObject: v,
	}
}

// stringAsCreateRecordNsec3paramResponse is a convenience function that returns string wrapped in CreateRecordNsec3paramResponse
func StringAsCreateRecordNsec3paramResponse(v *string) CreateRecordNsec3paramResponse {
	return CreateRecordNsec3paramResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRecordNsec3paramResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRecordNsec3paramResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRecordNsec3paramResponseAsObject)
	if err == nil {
		jsonCreateRecordNsec3paramResponseAsObject, _ := json.Marshal(dst.CreateRecordNsec3paramResponseAsObject)
		if string(jsonCreateRecordNsec3paramResponseAsObject) == "{}" { // empty struct
			dst.CreateRecordNsec3paramResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRecordNsec3paramResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRecordNsec3paramResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRecordNsec3paramResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRecordNsec3paramResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRecordNsec3paramResponseAsObject != nil {
		return json.Marshal(&src.CreateRecordNsec3paramResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRecordNsec3paramResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRecordNsec3paramResponseAsObject != nil {
		return obj.CreateRecordNsec3paramResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRecordNsec3paramResponse struct {
	value *CreateRecordNsec3paramResponse
	isSet bool
}

func (v NullableCreateRecordNsec3paramResponse) Get() *CreateRecordNsec3paramResponse {
	return v.value
}

func (v *NullableCreateRecordNsec3paramResponse) Set(val *CreateRecordNsec3paramResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordNsec3paramResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordNsec3paramResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordNsec3paramResponse(val *CreateRecordNsec3paramResponse) *NullableCreateRecordNsec3paramResponse {
	return &NullableCreateRecordNsec3paramResponse{value: val, isSet: true}
}

func (v NullableCreateRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordNsec3paramResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
