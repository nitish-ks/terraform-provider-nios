/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateRecordNsecResponse - struct for CreateRecordNsecResponse
type CreateRecordNsecResponse struct {
	CreateRecordNsecResponseAsObject *CreateRecordNsecResponseAsObject
	String                           *string
}

// CreateRecordNsecResponseAsObjectAsCreateRecordNsecResponse is a convenience function that returns CreateRecordNsecResponseAsObject wrapped in CreateRecordNsecResponse
func CreateRecordNsecResponseAsObjectAsCreateRecordNsecResponse(v *CreateRecordNsecResponseAsObject) CreateRecordNsecResponse {
	return CreateRecordNsecResponse{
		CreateRecordNsecResponseAsObject: v,
	}
}

// stringAsCreateRecordNsecResponse is a convenience function that returns string wrapped in CreateRecordNsecResponse
func StringAsCreateRecordNsecResponse(v *string) CreateRecordNsecResponse {
	return CreateRecordNsecResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRecordNsecResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRecordNsecResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRecordNsecResponseAsObject)
	if err == nil {
		jsonCreateRecordNsecResponseAsObject, _ := json.Marshal(dst.CreateRecordNsecResponseAsObject)
		if string(jsonCreateRecordNsecResponseAsObject) == "{}" { // empty struct
			dst.CreateRecordNsecResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRecordNsecResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRecordNsecResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRecordNsecResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRecordNsecResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRecordNsecResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRecordNsecResponseAsObject != nil {
		return json.Marshal(&src.CreateRecordNsecResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRecordNsecResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRecordNsecResponseAsObject != nil {
		return obj.CreateRecordNsecResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRecordNsecResponse struct {
	value *CreateRecordNsecResponse
	isSet bool
}

func (v NullableCreateRecordNsecResponse) Get() *CreateRecordNsecResponse {
	return v.value
}

func (v *NullableCreateRecordNsecResponse) Set(val *CreateRecordNsecResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordNsecResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordNsecResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordNsecResponse(val *CreateRecordNsecResponse) *NullableCreateRecordNsecResponse {
	return &NullableCreateRecordNsecResponse{value: val, isSet: true}
}

func (v NullableCreateRecordNsecResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordNsecResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
