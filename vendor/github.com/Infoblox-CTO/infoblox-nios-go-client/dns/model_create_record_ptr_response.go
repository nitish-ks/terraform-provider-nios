/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateRecordPtrResponse - struct for CreateRecordPtrResponse
type CreateRecordPtrResponse struct {
	CreateRecordPtrResponseAsObject *CreateRecordPtrResponseAsObject
	String                          *string
}

// CreateRecordPtrResponseAsObjectAsCreateRecordPtrResponse is a convenience function that returns CreateRecordPtrResponseAsObject wrapped in CreateRecordPtrResponse
func CreateRecordPtrResponseAsObjectAsCreateRecordPtrResponse(v *CreateRecordPtrResponseAsObject) CreateRecordPtrResponse {
	return CreateRecordPtrResponse{
		CreateRecordPtrResponseAsObject: v,
	}
}

// stringAsCreateRecordPtrResponse is a convenience function that returns string wrapped in CreateRecordPtrResponse
func StringAsCreateRecordPtrResponse(v *string) CreateRecordPtrResponse {
	return CreateRecordPtrResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRecordPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRecordPtrResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRecordPtrResponseAsObject)
	if err == nil {
		jsonCreateRecordPtrResponseAsObject, _ := json.Marshal(dst.CreateRecordPtrResponseAsObject)
		if string(jsonCreateRecordPtrResponseAsObject) == "{}" { // empty struct
			dst.CreateRecordPtrResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRecordPtrResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRecordPtrResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRecordPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRecordPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRecordPtrResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRecordPtrResponseAsObject != nil {
		return json.Marshal(&src.CreateRecordPtrResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRecordPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRecordPtrResponseAsObject != nil {
		return obj.CreateRecordPtrResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRecordPtrResponse struct {
	value *CreateRecordPtrResponse
	isSet bool
}

func (v NullableCreateRecordPtrResponse) Get() *CreateRecordPtrResponse {
	return v.value
}

func (v *NullableCreateRecordPtrResponse) Set(val *CreateRecordPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordPtrResponse(val *CreateRecordPtrResponse) *NullableCreateRecordPtrResponse {
	return &NullableCreateRecordPtrResponse{value: val, isSet: true}
}

func (v NullableCreateRecordPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
