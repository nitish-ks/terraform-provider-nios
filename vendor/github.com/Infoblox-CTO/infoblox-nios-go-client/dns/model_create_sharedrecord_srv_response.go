/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateSharedrecordSrvResponse - struct for CreateSharedrecordSrvResponse
type CreateSharedrecordSrvResponse struct {
	CreateSharedrecordSrvResponseAsObject *CreateSharedrecordSrvResponseAsObject
	String                                *string
}

// CreateSharedrecordSrvResponseAsObjectAsCreateSharedrecordSrvResponse is a convenience function that returns CreateSharedrecordSrvResponseAsObject wrapped in CreateSharedrecordSrvResponse
func CreateSharedrecordSrvResponseAsObjectAsCreateSharedrecordSrvResponse(v *CreateSharedrecordSrvResponseAsObject) CreateSharedrecordSrvResponse {
	return CreateSharedrecordSrvResponse{
		CreateSharedrecordSrvResponseAsObject: v,
	}
}

// stringAsCreateSharedrecordSrvResponse is a convenience function that returns string wrapped in CreateSharedrecordSrvResponse
func StringAsCreateSharedrecordSrvResponse(v *string) CreateSharedrecordSrvResponse {
	return CreateSharedrecordSrvResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSharedrecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateSharedrecordSrvResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateSharedrecordSrvResponseAsObject)
	if err == nil {
		jsonCreateSharedrecordSrvResponseAsObject, _ := json.Marshal(dst.CreateSharedrecordSrvResponseAsObject)
		if string(jsonCreateSharedrecordSrvResponseAsObject) == "{}" { // empty struct
			dst.CreateSharedrecordSrvResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateSharedrecordSrvResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateSharedrecordSrvResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateSharedrecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateSharedrecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.CreateSharedrecordSrvResponseAsObject != nil {
		return json.Marshal(&src.CreateSharedrecordSrvResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSharedrecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateSharedrecordSrvResponseAsObject != nil {
		return obj.CreateSharedrecordSrvResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateSharedrecordSrvResponse struct {
	value *CreateSharedrecordSrvResponse
	isSet bool
}

func (v NullableCreateSharedrecordSrvResponse) Get() *CreateSharedrecordSrvResponse {
	return v.value
}

func (v *NullableCreateSharedrecordSrvResponse) Set(val *CreateSharedrecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSharedrecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSharedrecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSharedrecordSrvResponse(val *CreateSharedrecordSrvResponse) *NullableCreateSharedrecordSrvResponse {
	return &NullableCreateSharedrecordSrvResponse{value: val, isSet: true}
}

func (v NullableCreateSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSharedrecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
