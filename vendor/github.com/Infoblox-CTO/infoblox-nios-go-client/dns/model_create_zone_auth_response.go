/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// CreateZoneAuthResponse - struct for CreateZoneAuthResponse
type CreateZoneAuthResponse struct {
	CreateZoneAuthResponseAsObject *CreateZoneAuthResponseAsObject
	String                         *string
}

// CreateZoneAuthResponseAsObjectAsCreateZoneAuthResponse is a convenience function that returns CreateZoneAuthResponseAsObject wrapped in CreateZoneAuthResponse
func CreateZoneAuthResponseAsObjectAsCreateZoneAuthResponse(v *CreateZoneAuthResponseAsObject) CreateZoneAuthResponse {
	return CreateZoneAuthResponse{
		CreateZoneAuthResponseAsObject: v,
	}
}

// stringAsCreateZoneAuthResponse is a convenience function that returns string wrapped in CreateZoneAuthResponse
func StringAsCreateZoneAuthResponse(v *string) CreateZoneAuthResponse {
	return CreateZoneAuthResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateZoneAuthResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateZoneAuthResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateZoneAuthResponseAsObject)
	if err == nil {
		jsonCreateZoneAuthResponseAsObject, _ := json.Marshal(dst.CreateZoneAuthResponseAsObject)
		if string(jsonCreateZoneAuthResponseAsObject) == "{}" { // empty struct
			dst.CreateZoneAuthResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateZoneAuthResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateZoneAuthResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateZoneAuthResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateZoneAuthResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateZoneAuthResponse) MarshalJSON() ([]byte, error) {
	if src.CreateZoneAuthResponseAsObject != nil {
		return json.Marshal(&src.CreateZoneAuthResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateZoneAuthResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateZoneAuthResponseAsObject != nil {
		return obj.CreateZoneAuthResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateZoneAuthResponse struct {
	value *CreateZoneAuthResponse
	isSet bool
}

func (v NullableCreateZoneAuthResponse) Get() *CreateZoneAuthResponse {
	return v.value
}

func (v *NullableCreateZoneAuthResponse) Set(val *CreateZoneAuthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateZoneAuthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateZoneAuthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateZoneAuthResponse(val *CreateZoneAuthResponse) *NullableCreateZoneAuthResponse {
	return &NullableCreateZoneAuthResponse{value: val, isSet: true}
}

func (v NullableCreateZoneAuthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateZoneAuthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
