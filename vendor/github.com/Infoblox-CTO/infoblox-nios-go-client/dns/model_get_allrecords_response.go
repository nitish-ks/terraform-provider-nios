/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetAllrecordsResponse - struct for GetAllrecordsResponse
type GetAllrecordsResponse struct {
	Allrecords                          *Allrecords
	GetAllrecordsResponseObjectAsResult *GetAllrecordsResponseObjectAsResult
}

// AllrecordsAsGetAllrecordsResponse is a convenience function that returns Allrecords wrapped in GetAllrecordsResponse
func AllrecordsAsGetAllrecordsResponse(v *Allrecords) GetAllrecordsResponse {
	return GetAllrecordsResponse{
		Allrecords: v,
	}
}

// GetAllrecordsResponseObjectAsResultAsGetAllrecordsResponse is a convenience function that returns GetAllrecordsResponseObjectAsResult wrapped in GetAllrecordsResponse
func GetAllrecordsResponseObjectAsResultAsGetAllrecordsResponse(v *GetAllrecordsResponseObjectAsResult) GetAllrecordsResponse {
	return GetAllrecordsResponse{
		GetAllrecordsResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAllrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Allrecords
	err = newStrictDecoder(data).Decode(&dst.Allrecords)
	if err == nil {
		jsonAllrecords, _ := json.Marshal(dst.Allrecords)
		if string(jsonAllrecords) == "{}" { // empty struct
			dst.Allrecords = nil
		} else {
			match++
		}
	} else {
		dst.Allrecords = nil
	}

	// try to unmarshal data into GetAllrecordsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAllrecordsResponseObjectAsResult)
	if err == nil {
		jsonGetAllrecordsResponseObjectAsResult, _ := json.Marshal(dst.GetAllrecordsResponseObjectAsResult)
		if string(jsonGetAllrecordsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAllrecordsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAllrecordsResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Allrecords = nil
		dst.GetAllrecordsResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAllrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAllrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAllrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.Allrecords != nil {
		return json.Marshal(&src.Allrecords)
	}

	if src.GetAllrecordsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAllrecordsResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAllrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Allrecords != nil {
		return obj.Allrecords
	}

	if obj.GetAllrecordsResponseObjectAsResult != nil {
		return obj.GetAllrecordsResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAllrecordsResponse struct {
	value *GetAllrecordsResponse
	isSet bool
}

func (v NullableGetAllrecordsResponse) Get() *GetAllrecordsResponse {
	return v.value
}

func (v *NullableGetAllrecordsResponse) Set(val *GetAllrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllrecordsResponse(val *GetAllrecordsResponse) *NullableGetAllrecordsResponse {
	return &NullableGetAllrecordsResponse{value: val, isSet: true}
}

func (v NullableGetAllrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
