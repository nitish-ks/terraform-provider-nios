/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetNsgroupForwardstubserverResponse - struct for GetNsgroupForwardstubserverResponse
type GetNsgroupForwardstubserverResponse struct {
	GetNsgroupForwardstubserverResponseObjectAsResult *GetNsgroupForwardstubserverResponseObjectAsResult
	NsgroupForwardstubserver                          *NsgroupForwardstubserver
}

// GetNsgroupForwardstubserverResponseObjectAsResultAsGetNsgroupForwardstubserverResponse is a convenience function that returns GetNsgroupForwardstubserverResponseObjectAsResult wrapped in GetNsgroupForwardstubserverResponse
func GetNsgroupForwardstubserverResponseObjectAsResultAsGetNsgroupForwardstubserverResponse(v *GetNsgroupForwardstubserverResponseObjectAsResult) GetNsgroupForwardstubserverResponse {
	return GetNsgroupForwardstubserverResponse{
		GetNsgroupForwardstubserverResponseObjectAsResult: v,
	}
}

// NsgroupForwardstubserverAsGetNsgroupForwardstubserverResponse is a convenience function that returns NsgroupForwardstubserver wrapped in GetNsgroupForwardstubserverResponse
func NsgroupForwardstubserverAsGetNsgroupForwardstubserverResponse(v *NsgroupForwardstubserver) GetNsgroupForwardstubserverResponse {
	return GetNsgroupForwardstubserverResponse{
		NsgroupForwardstubserver: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNsgroupForwardstubserverResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNsgroupForwardstubserverResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNsgroupForwardstubserverResponseObjectAsResult)
	if err == nil {
		jsonGetNsgroupForwardstubserverResponseObjectAsResult, _ := json.Marshal(dst.GetNsgroupForwardstubserverResponseObjectAsResult)
		if string(jsonGetNsgroupForwardstubserverResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNsgroupForwardstubserverResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNsgroupForwardstubserverResponseObjectAsResult = nil
	}

	// try to unmarshal data into NsgroupForwardstubserver
	err = newStrictDecoder(data).Decode(&dst.NsgroupForwardstubserver)
	if err == nil {
		jsonNsgroupForwardstubserver, _ := json.Marshal(dst.NsgroupForwardstubserver)
		if string(jsonNsgroupForwardstubserver) == "{}" { // empty struct
			dst.NsgroupForwardstubserver = nil
		} else {
			match++
		}
	} else {
		dst.NsgroupForwardstubserver = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNsgroupForwardstubserverResponseObjectAsResult = nil
		dst.NsgroupForwardstubserver = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNsgroupForwardstubserverResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNsgroupForwardstubserverResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNsgroupForwardstubserverResponse) MarshalJSON() ([]byte, error) {
	if src.GetNsgroupForwardstubserverResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNsgroupForwardstubserverResponseObjectAsResult)
	}

	if src.NsgroupForwardstubserver != nil {
		return json.Marshal(&src.NsgroupForwardstubserver)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNsgroupForwardstubserverResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNsgroupForwardstubserverResponseObjectAsResult != nil {
		return obj.GetNsgroupForwardstubserverResponseObjectAsResult
	}

	if obj.NsgroupForwardstubserver != nil {
		return obj.NsgroupForwardstubserver
	}

	// all schemas are nil
	return nil
}

type NullableGetNsgroupForwardstubserverResponse struct {
	value *GetNsgroupForwardstubserverResponse
	isSet bool
}

func (v NullableGetNsgroupForwardstubserverResponse) Get() *GetNsgroupForwardstubserverResponse {
	return v.value
}

func (v *NullableGetNsgroupForwardstubserverResponse) Set(val *GetNsgroupForwardstubserverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNsgroupForwardstubserverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNsgroupForwardstubserverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNsgroupForwardstubserverResponse(val *GetNsgroupForwardstubserverResponse) *NullableGetNsgroupForwardstubserverResponse {
	return &NullableGetNsgroupForwardstubserverResponse{value: val, isSet: true}
}

func (v NullableGetNsgroupForwardstubserverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNsgroupForwardstubserverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
