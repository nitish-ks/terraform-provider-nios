/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetNsgroupResponse - struct for GetNsgroupResponse
type GetNsgroupResponse struct {
	GetNsgroupResponseObjectAsResult *GetNsgroupResponseObjectAsResult
	Nsgroup                          *Nsgroup
}

// GetNsgroupResponseObjectAsResultAsGetNsgroupResponse is a convenience function that returns GetNsgroupResponseObjectAsResult wrapped in GetNsgroupResponse
func GetNsgroupResponseObjectAsResultAsGetNsgroupResponse(v *GetNsgroupResponseObjectAsResult) GetNsgroupResponse {
	return GetNsgroupResponse{
		GetNsgroupResponseObjectAsResult: v,
	}
}

// NsgroupAsGetNsgroupResponse is a convenience function that returns Nsgroup wrapped in GetNsgroupResponse
func NsgroupAsGetNsgroupResponse(v *Nsgroup) GetNsgroupResponse {
	return GetNsgroupResponse{
		Nsgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNsgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNsgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNsgroupResponseObjectAsResult)
	if err == nil {
		jsonGetNsgroupResponseObjectAsResult, _ := json.Marshal(dst.GetNsgroupResponseObjectAsResult)
		if string(jsonGetNsgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNsgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNsgroupResponseObjectAsResult = nil
	}

	// try to unmarshal data into Nsgroup
	err = newStrictDecoder(data).Decode(&dst.Nsgroup)
	if err == nil {
		jsonNsgroup, _ := json.Marshal(dst.Nsgroup)
		if string(jsonNsgroup) == "{}" { // empty struct
			dst.Nsgroup = nil
		} else {
			match++
		}
	} else {
		dst.Nsgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNsgroupResponseObjectAsResult = nil
		dst.Nsgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNsgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNsgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNsgroupResponse) MarshalJSON() ([]byte, error) {
	if src.GetNsgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNsgroupResponseObjectAsResult)
	}

	if src.Nsgroup != nil {
		return json.Marshal(&src.Nsgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNsgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNsgroupResponseObjectAsResult != nil {
		return obj.GetNsgroupResponseObjectAsResult
	}

	if obj.Nsgroup != nil {
		return obj.Nsgroup
	}

	// all schemas are nil
	return nil
}

type NullableGetNsgroupResponse struct {
	value *GetNsgroupResponse
	isSet bool
}

func (v NullableGetNsgroupResponse) Get() *GetNsgroupResponse {
	return v.value
}

func (v *NullableGetNsgroupResponse) Set(val *GetNsgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNsgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNsgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNsgroupResponse(val *GetNsgroupResponse) *NullableGetNsgroupResponse {
	return &NullableGetNsgroupResponse{value: val, isSet: true}
}

func (v NullableGetNsgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNsgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
