/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordAResponse - struct for GetRecordAResponse
type GetRecordAResponse struct {
	GetRecordAResponseObjectAsResult *GetRecordAResponseObjectAsResult
	RecordA                          *RecordA
}

// GetRecordAResponseObjectAsResultAsGetRecordAResponse is a convenience function that returns GetRecordAResponseObjectAsResult wrapped in GetRecordAResponse
func GetRecordAResponseObjectAsResultAsGetRecordAResponse(v *GetRecordAResponseObjectAsResult) GetRecordAResponse {
	return GetRecordAResponse{
		GetRecordAResponseObjectAsResult: v,
	}
}

// RecordAAsGetRecordAResponse is a convenience function that returns RecordA wrapped in GetRecordAResponse
func RecordAAsGetRecordAResponse(v *RecordA) GetRecordAResponse {
	return GetRecordAResponse{
		RecordA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordAResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordAResponseObjectAsResult)
	if err == nil {
		jsonGetRecordAResponseObjectAsResult, _ := json.Marshal(dst.GetRecordAResponseObjectAsResult)
		if string(jsonGetRecordAResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordAResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordAResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordA
	err = newStrictDecoder(data).Decode(&dst.RecordA)
	if err == nil {
		jsonRecordA, _ := json.Marshal(dst.RecordA)
		if string(jsonRecordA) == "{}" { // empty struct
			dst.RecordA = nil
		} else {
			match++
		}
	} else {
		dst.RecordA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordAResponseObjectAsResult = nil
		dst.RecordA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordAResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordAResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordAResponseObjectAsResult)
	}

	if src.RecordA != nil {
		return json.Marshal(&src.RecordA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordAResponseObjectAsResult != nil {
		return obj.GetRecordAResponseObjectAsResult
	}

	if obj.RecordA != nil {
		return obj.RecordA
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordAResponse struct {
	value *GetRecordAResponse
	isSet bool
}

func (v NullableGetRecordAResponse) Get() *GetRecordAResponse {
	return v.value
}

func (v *NullableGetRecordAResponse) Set(val *GetRecordAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordAResponse(val *GetRecordAResponse) *NullableGetRecordAResponse {
	return &NullableGetRecordAResponse{value: val, isSet: true}
}

func (v NullableGetRecordAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
