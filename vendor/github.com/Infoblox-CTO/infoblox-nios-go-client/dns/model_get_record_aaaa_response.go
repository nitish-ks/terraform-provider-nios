/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordAaaaResponse - struct for GetRecordAaaaResponse
type GetRecordAaaaResponse struct {
	GetRecordAaaaResponseObjectAsResult *GetRecordAaaaResponseObjectAsResult
	RecordAaaa                          *RecordAaaa
}

// GetRecordAaaaResponseObjectAsResultAsGetRecordAaaaResponse is a convenience function that returns GetRecordAaaaResponseObjectAsResult wrapped in GetRecordAaaaResponse
func GetRecordAaaaResponseObjectAsResultAsGetRecordAaaaResponse(v *GetRecordAaaaResponseObjectAsResult) GetRecordAaaaResponse {
	return GetRecordAaaaResponse{
		GetRecordAaaaResponseObjectAsResult: v,
	}
}

// RecordAaaaAsGetRecordAaaaResponse is a convenience function that returns RecordAaaa wrapped in GetRecordAaaaResponse
func RecordAaaaAsGetRecordAaaaResponse(v *RecordAaaa) GetRecordAaaaResponse {
	return GetRecordAaaaResponse{
		RecordAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordAaaaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordAaaaResponseObjectAsResult)
	if err == nil {
		jsonGetRecordAaaaResponseObjectAsResult, _ := json.Marshal(dst.GetRecordAaaaResponseObjectAsResult)
		if string(jsonGetRecordAaaaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordAaaaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordAaaaResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordAaaa
	err = newStrictDecoder(data).Decode(&dst.RecordAaaa)
	if err == nil {
		jsonRecordAaaa, _ := json.Marshal(dst.RecordAaaa)
		if string(jsonRecordAaaa) == "{}" { // empty struct
			dst.RecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.RecordAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordAaaaResponseObjectAsResult = nil
		dst.RecordAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordAaaaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordAaaaResponseObjectAsResult)
	}

	if src.RecordAaaa != nil {
		return json.Marshal(&src.RecordAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordAaaaResponseObjectAsResult != nil {
		return obj.GetRecordAaaaResponseObjectAsResult
	}

	if obj.RecordAaaa != nil {
		return obj.RecordAaaa
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordAaaaResponse struct {
	value *GetRecordAaaaResponse
	isSet bool
}

func (v NullableGetRecordAaaaResponse) Get() *GetRecordAaaaResponse {
	return v.value
}

func (v *NullableGetRecordAaaaResponse) Set(val *GetRecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordAaaaResponse(val *GetRecordAaaaResponse) *NullableGetRecordAaaaResponse {
	return &NullableGetRecordAaaaResponse{value: val, isSet: true}
}

func (v NullableGetRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
