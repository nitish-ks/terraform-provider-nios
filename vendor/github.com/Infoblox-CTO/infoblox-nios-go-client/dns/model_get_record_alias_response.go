/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordAliasResponse - struct for GetRecordAliasResponse
type GetRecordAliasResponse struct {
	GetRecordAliasResponseObjectAsResult *GetRecordAliasResponseObjectAsResult
	RecordAlias                          *RecordAlias
}

// GetRecordAliasResponseObjectAsResultAsGetRecordAliasResponse is a convenience function that returns GetRecordAliasResponseObjectAsResult wrapped in GetRecordAliasResponse
func GetRecordAliasResponseObjectAsResultAsGetRecordAliasResponse(v *GetRecordAliasResponseObjectAsResult) GetRecordAliasResponse {
	return GetRecordAliasResponse{
		GetRecordAliasResponseObjectAsResult: v,
	}
}

// RecordAliasAsGetRecordAliasResponse is a convenience function that returns RecordAlias wrapped in GetRecordAliasResponse
func RecordAliasAsGetRecordAliasResponse(v *RecordAlias) GetRecordAliasResponse {
	return GetRecordAliasResponse{
		RecordAlias: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordAliasResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordAliasResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordAliasResponseObjectAsResult)
	if err == nil {
		jsonGetRecordAliasResponseObjectAsResult, _ := json.Marshal(dst.GetRecordAliasResponseObjectAsResult)
		if string(jsonGetRecordAliasResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordAliasResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordAliasResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordAlias
	err = newStrictDecoder(data).Decode(&dst.RecordAlias)
	if err == nil {
		jsonRecordAlias, _ := json.Marshal(dst.RecordAlias)
		if string(jsonRecordAlias) == "{}" { // empty struct
			dst.RecordAlias = nil
		} else {
			match++
		}
	} else {
		dst.RecordAlias = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordAliasResponseObjectAsResult = nil
		dst.RecordAlias = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordAliasResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordAliasResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordAliasResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordAliasResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordAliasResponseObjectAsResult)
	}

	if src.RecordAlias != nil {
		return json.Marshal(&src.RecordAlias)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordAliasResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordAliasResponseObjectAsResult != nil {
		return obj.GetRecordAliasResponseObjectAsResult
	}

	if obj.RecordAlias != nil {
		return obj.RecordAlias
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordAliasResponse struct {
	value *GetRecordAliasResponse
	isSet bool
}

func (v NullableGetRecordAliasResponse) Get() *GetRecordAliasResponse {
	return v.value
}

func (v *NullableGetRecordAliasResponse) Set(val *GetRecordAliasResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordAliasResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordAliasResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordAliasResponse(val *GetRecordAliasResponse) *NullableGetRecordAliasResponse {
	return &NullableGetRecordAliasResponse{value: val, isSet: true}
}

func (v NullableGetRecordAliasResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordAliasResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
