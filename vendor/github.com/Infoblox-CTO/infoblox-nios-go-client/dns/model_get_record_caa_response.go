/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordCaaResponse - struct for GetRecordCaaResponse
type GetRecordCaaResponse struct {
	GetRecordCaaResponseObjectAsResult *GetRecordCaaResponseObjectAsResult
	RecordCaa                          *RecordCaa
}

// GetRecordCaaResponseObjectAsResultAsGetRecordCaaResponse is a convenience function that returns GetRecordCaaResponseObjectAsResult wrapped in GetRecordCaaResponse
func GetRecordCaaResponseObjectAsResultAsGetRecordCaaResponse(v *GetRecordCaaResponseObjectAsResult) GetRecordCaaResponse {
	return GetRecordCaaResponse{
		GetRecordCaaResponseObjectAsResult: v,
	}
}

// RecordCaaAsGetRecordCaaResponse is a convenience function that returns RecordCaa wrapped in GetRecordCaaResponse
func RecordCaaAsGetRecordCaaResponse(v *RecordCaa) GetRecordCaaResponse {
	return GetRecordCaaResponse{
		RecordCaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordCaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordCaaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordCaaResponseObjectAsResult)
	if err == nil {
		jsonGetRecordCaaResponseObjectAsResult, _ := json.Marshal(dst.GetRecordCaaResponseObjectAsResult)
		if string(jsonGetRecordCaaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordCaaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordCaaResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordCaa
	err = newStrictDecoder(data).Decode(&dst.RecordCaa)
	if err == nil {
		jsonRecordCaa, _ := json.Marshal(dst.RecordCaa)
		if string(jsonRecordCaa) == "{}" { // empty struct
			dst.RecordCaa = nil
		} else {
			match++
		}
	} else {
		dst.RecordCaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordCaaResponseObjectAsResult = nil
		dst.RecordCaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordCaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordCaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordCaaResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordCaaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordCaaResponseObjectAsResult)
	}

	if src.RecordCaa != nil {
		return json.Marshal(&src.RecordCaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordCaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordCaaResponseObjectAsResult != nil {
		return obj.GetRecordCaaResponseObjectAsResult
	}

	if obj.RecordCaa != nil {
		return obj.RecordCaa
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordCaaResponse struct {
	value *GetRecordCaaResponse
	isSet bool
}

func (v NullableGetRecordCaaResponse) Get() *GetRecordCaaResponse {
	return v.value
}

func (v *NullableGetRecordCaaResponse) Set(val *GetRecordCaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordCaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordCaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordCaaResponse(val *GetRecordCaaResponse) *NullableGetRecordCaaResponse {
	return &NullableGetRecordCaaResponse{value: val, isSet: true}
}

func (v NullableGetRecordCaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordCaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
