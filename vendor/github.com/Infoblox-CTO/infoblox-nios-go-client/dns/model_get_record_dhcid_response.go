/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordDhcidResponse - struct for GetRecordDhcidResponse
type GetRecordDhcidResponse struct {
	GetRecordDhcidResponseObjectAsResult *GetRecordDhcidResponseObjectAsResult
	RecordDhcid                          *RecordDhcid
}

// GetRecordDhcidResponseObjectAsResultAsGetRecordDhcidResponse is a convenience function that returns GetRecordDhcidResponseObjectAsResult wrapped in GetRecordDhcidResponse
func GetRecordDhcidResponseObjectAsResultAsGetRecordDhcidResponse(v *GetRecordDhcidResponseObjectAsResult) GetRecordDhcidResponse {
	return GetRecordDhcidResponse{
		GetRecordDhcidResponseObjectAsResult: v,
	}
}

// RecordDhcidAsGetRecordDhcidResponse is a convenience function that returns RecordDhcid wrapped in GetRecordDhcidResponse
func RecordDhcidAsGetRecordDhcidResponse(v *RecordDhcid) GetRecordDhcidResponse {
	return GetRecordDhcidResponse{
		RecordDhcid: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordDhcidResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordDhcidResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordDhcidResponseObjectAsResult)
	if err == nil {
		jsonGetRecordDhcidResponseObjectAsResult, _ := json.Marshal(dst.GetRecordDhcidResponseObjectAsResult)
		if string(jsonGetRecordDhcidResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordDhcidResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordDhcidResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordDhcid
	err = newStrictDecoder(data).Decode(&dst.RecordDhcid)
	if err == nil {
		jsonRecordDhcid, _ := json.Marshal(dst.RecordDhcid)
		if string(jsonRecordDhcid) == "{}" { // empty struct
			dst.RecordDhcid = nil
		} else {
			match++
		}
	} else {
		dst.RecordDhcid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordDhcidResponseObjectAsResult = nil
		dst.RecordDhcid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordDhcidResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordDhcidResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordDhcidResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordDhcidResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordDhcidResponseObjectAsResult)
	}

	if src.RecordDhcid != nil {
		return json.Marshal(&src.RecordDhcid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordDhcidResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordDhcidResponseObjectAsResult != nil {
		return obj.GetRecordDhcidResponseObjectAsResult
	}

	if obj.RecordDhcid != nil {
		return obj.RecordDhcid
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordDhcidResponse struct {
	value *GetRecordDhcidResponse
	isSet bool
}

func (v NullableGetRecordDhcidResponse) Get() *GetRecordDhcidResponse {
	return v.value
}

func (v *NullableGetRecordDhcidResponse) Set(val *GetRecordDhcidResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordDhcidResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordDhcidResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordDhcidResponse(val *GetRecordDhcidResponse) *NullableGetRecordDhcidResponse {
	return &NullableGetRecordDhcidResponse{value: val, isSet: true}
}

func (v NullableGetRecordDhcidResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordDhcidResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
