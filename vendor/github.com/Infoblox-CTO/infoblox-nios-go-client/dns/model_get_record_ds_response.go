/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordDsResponse - struct for GetRecordDsResponse
type GetRecordDsResponse struct {
	GetRecordDsResponseObjectAsResult *GetRecordDsResponseObjectAsResult
	RecordDs                          *RecordDs
}

// GetRecordDsResponseObjectAsResultAsGetRecordDsResponse is a convenience function that returns GetRecordDsResponseObjectAsResult wrapped in GetRecordDsResponse
func GetRecordDsResponseObjectAsResultAsGetRecordDsResponse(v *GetRecordDsResponseObjectAsResult) GetRecordDsResponse {
	return GetRecordDsResponse{
		GetRecordDsResponseObjectAsResult: v,
	}
}

// RecordDsAsGetRecordDsResponse is a convenience function that returns RecordDs wrapped in GetRecordDsResponse
func RecordDsAsGetRecordDsResponse(v *RecordDs) GetRecordDsResponse {
	return GetRecordDsResponse{
		RecordDs: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordDsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordDsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordDsResponseObjectAsResult)
	if err == nil {
		jsonGetRecordDsResponseObjectAsResult, _ := json.Marshal(dst.GetRecordDsResponseObjectAsResult)
		if string(jsonGetRecordDsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordDsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordDsResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordDs
	err = newStrictDecoder(data).Decode(&dst.RecordDs)
	if err == nil {
		jsonRecordDs, _ := json.Marshal(dst.RecordDs)
		if string(jsonRecordDs) == "{}" { // empty struct
			dst.RecordDs = nil
		} else {
			match++
		}
	} else {
		dst.RecordDs = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordDsResponseObjectAsResult = nil
		dst.RecordDs = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordDsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordDsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordDsResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordDsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordDsResponseObjectAsResult)
	}

	if src.RecordDs != nil {
		return json.Marshal(&src.RecordDs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordDsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordDsResponseObjectAsResult != nil {
		return obj.GetRecordDsResponseObjectAsResult
	}

	if obj.RecordDs != nil {
		return obj.RecordDs
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordDsResponse struct {
	value *GetRecordDsResponse
	isSet bool
}

func (v NullableGetRecordDsResponse) Get() *GetRecordDsResponse {
	return v.value
}

func (v *NullableGetRecordDsResponse) Set(val *GetRecordDsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordDsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordDsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordDsResponse(val *GetRecordDsResponse) *NullableGetRecordDsResponse {
	return &NullableGetRecordDsResponse{value: val, isSet: true}
}

func (v NullableGetRecordDsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordDsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
