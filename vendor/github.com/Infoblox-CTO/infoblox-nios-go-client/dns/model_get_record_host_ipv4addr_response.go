/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordHostIpv4addrResponse - struct for GetRecordHostIpv4addrResponse
type GetRecordHostIpv4addrResponse struct {
	GetRecordHostIpv4addrResponseObjectAsResult *GetRecordHostIpv4addrResponseObjectAsResult
	RecordHostIpv4addr                          *RecordHostIpv4addr
}

// GetRecordHostIpv4addrResponseObjectAsResultAsGetRecordHostIpv4addrResponse is a convenience function that returns GetRecordHostIpv4addrResponseObjectAsResult wrapped in GetRecordHostIpv4addrResponse
func GetRecordHostIpv4addrResponseObjectAsResultAsGetRecordHostIpv4addrResponse(v *GetRecordHostIpv4addrResponseObjectAsResult) GetRecordHostIpv4addrResponse {
	return GetRecordHostIpv4addrResponse{
		GetRecordHostIpv4addrResponseObjectAsResult: v,
	}
}

// RecordHostIpv4addrAsGetRecordHostIpv4addrResponse is a convenience function that returns RecordHostIpv4addr wrapped in GetRecordHostIpv4addrResponse
func RecordHostIpv4addrAsGetRecordHostIpv4addrResponse(v *RecordHostIpv4addr) GetRecordHostIpv4addrResponse {
	return GetRecordHostIpv4addrResponse{
		RecordHostIpv4addr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordHostIpv4addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordHostIpv4addrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordHostIpv4addrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordHostIpv4addrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordHostIpv4addrResponseObjectAsResult)
		if string(jsonGetRecordHostIpv4addrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordHostIpv4addrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordHostIpv4addrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordHostIpv4addr
	err = newStrictDecoder(data).Decode(&dst.RecordHostIpv4addr)
	if err == nil {
		jsonRecordHostIpv4addr, _ := json.Marshal(dst.RecordHostIpv4addr)
		if string(jsonRecordHostIpv4addr) == "{}" { // empty struct
			dst.RecordHostIpv4addr = nil
		} else {
			match++
		}
	} else {
		dst.RecordHostIpv4addr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordHostIpv4addrResponseObjectAsResult = nil
		dst.RecordHostIpv4addr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordHostIpv4addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordHostIpv4addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordHostIpv4addrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordHostIpv4addrResponseObjectAsResult)
	}

	if src.RecordHostIpv4addr != nil {
		return json.Marshal(&src.RecordHostIpv4addr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordHostIpv4addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordHostIpv4addrResponseObjectAsResult != nil {
		return obj.GetRecordHostIpv4addrResponseObjectAsResult
	}

	if obj.RecordHostIpv4addr != nil {
		return obj.RecordHostIpv4addr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordHostIpv4addrResponse struct {
	value *GetRecordHostIpv4addrResponse
	isSet bool
}

func (v NullableGetRecordHostIpv4addrResponse) Get() *GetRecordHostIpv4addrResponse {
	return v.value
}

func (v *NullableGetRecordHostIpv4addrResponse) Set(val *GetRecordHostIpv4addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordHostIpv4addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordHostIpv4addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordHostIpv4addrResponse(val *GetRecordHostIpv4addrResponse) *NullableGetRecordHostIpv4addrResponse {
	return &NullableGetRecordHostIpv4addrResponse{value: val, isSet: true}
}

func (v NullableGetRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordHostIpv4addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
