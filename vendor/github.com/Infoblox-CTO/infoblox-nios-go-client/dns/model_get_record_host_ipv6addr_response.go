/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordHostIpv6addrResponse - struct for GetRecordHostIpv6addrResponse
type GetRecordHostIpv6addrResponse struct {
	GetRecordHostIpv6addrResponseObjectAsResult *GetRecordHostIpv6addrResponseObjectAsResult
	RecordHostIpv6addr                          *RecordHostIpv6addr
}

// GetRecordHostIpv6addrResponseObjectAsResultAsGetRecordHostIpv6addrResponse is a convenience function that returns GetRecordHostIpv6addrResponseObjectAsResult wrapped in GetRecordHostIpv6addrResponse
func GetRecordHostIpv6addrResponseObjectAsResultAsGetRecordHostIpv6addrResponse(v *GetRecordHostIpv6addrResponseObjectAsResult) GetRecordHostIpv6addrResponse {
	return GetRecordHostIpv6addrResponse{
		GetRecordHostIpv6addrResponseObjectAsResult: v,
	}
}

// RecordHostIpv6addrAsGetRecordHostIpv6addrResponse is a convenience function that returns RecordHostIpv6addr wrapped in GetRecordHostIpv6addrResponse
func RecordHostIpv6addrAsGetRecordHostIpv6addrResponse(v *RecordHostIpv6addr) GetRecordHostIpv6addrResponse {
	return GetRecordHostIpv6addrResponse{
		RecordHostIpv6addr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordHostIpv6addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordHostIpv6addrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordHostIpv6addrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordHostIpv6addrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordHostIpv6addrResponseObjectAsResult)
		if string(jsonGetRecordHostIpv6addrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordHostIpv6addrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordHostIpv6addrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordHostIpv6addr
	err = newStrictDecoder(data).Decode(&dst.RecordHostIpv6addr)
	if err == nil {
		jsonRecordHostIpv6addr, _ := json.Marshal(dst.RecordHostIpv6addr)
		if string(jsonRecordHostIpv6addr) == "{}" { // empty struct
			dst.RecordHostIpv6addr = nil
		} else {
			match++
		}
	} else {
		dst.RecordHostIpv6addr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordHostIpv6addrResponseObjectAsResult = nil
		dst.RecordHostIpv6addr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordHostIpv6addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordHostIpv6addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordHostIpv6addrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordHostIpv6addrResponseObjectAsResult)
	}

	if src.RecordHostIpv6addr != nil {
		return json.Marshal(&src.RecordHostIpv6addr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordHostIpv6addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordHostIpv6addrResponseObjectAsResult != nil {
		return obj.GetRecordHostIpv6addrResponseObjectAsResult
	}

	if obj.RecordHostIpv6addr != nil {
		return obj.RecordHostIpv6addr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordHostIpv6addrResponse struct {
	value *GetRecordHostIpv6addrResponse
	isSet bool
}

func (v NullableGetRecordHostIpv6addrResponse) Get() *GetRecordHostIpv6addrResponse {
	return v.value
}

func (v *NullableGetRecordHostIpv6addrResponse) Set(val *GetRecordHostIpv6addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordHostIpv6addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordHostIpv6addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordHostIpv6addrResponse(val *GetRecordHostIpv6addrResponse) *NullableGetRecordHostIpv6addrResponse {
	return &NullableGetRecordHostIpv6addrResponse{value: val, isSet: true}
}

func (v NullableGetRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordHostIpv6addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
