/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordHostResponse - struct for GetRecordHostResponse
type GetRecordHostResponse struct {
	GetRecordHostResponseObjectAsResult *GetRecordHostResponseObjectAsResult
	RecordHost                          *RecordHost
}

// GetRecordHostResponseObjectAsResultAsGetRecordHostResponse is a convenience function that returns GetRecordHostResponseObjectAsResult wrapped in GetRecordHostResponse
func GetRecordHostResponseObjectAsResultAsGetRecordHostResponse(v *GetRecordHostResponseObjectAsResult) GetRecordHostResponse {
	return GetRecordHostResponse{
		GetRecordHostResponseObjectAsResult: v,
	}
}

// RecordHostAsGetRecordHostResponse is a convenience function that returns RecordHost wrapped in GetRecordHostResponse
func RecordHostAsGetRecordHostResponse(v *RecordHost) GetRecordHostResponse {
	return GetRecordHostResponse{
		RecordHost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordHostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordHostResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordHostResponseObjectAsResult)
	if err == nil {
		jsonGetRecordHostResponseObjectAsResult, _ := json.Marshal(dst.GetRecordHostResponseObjectAsResult)
		if string(jsonGetRecordHostResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordHostResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordHostResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordHost
	err = newStrictDecoder(data).Decode(&dst.RecordHost)
	if err == nil {
		jsonRecordHost, _ := json.Marshal(dst.RecordHost)
		if string(jsonRecordHost) == "{}" { // empty struct
			dst.RecordHost = nil
		} else {
			match++
		}
	} else {
		dst.RecordHost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordHostResponseObjectAsResult = nil
		dst.RecordHost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordHostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordHostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordHostResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordHostResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordHostResponseObjectAsResult)
	}

	if src.RecordHost != nil {
		return json.Marshal(&src.RecordHost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordHostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordHostResponseObjectAsResult != nil {
		return obj.GetRecordHostResponseObjectAsResult
	}

	if obj.RecordHost != nil {
		return obj.RecordHost
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordHostResponse struct {
	value *GetRecordHostResponse
	isSet bool
}

func (v NullableGetRecordHostResponse) Get() *GetRecordHostResponse {
	return v.value
}

func (v *NullableGetRecordHostResponse) Set(val *GetRecordHostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordHostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordHostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordHostResponse(val *GetRecordHostResponse) *NullableGetRecordHostResponse {
	return &NullableGetRecordHostResponse{value: val, isSet: true}
}

func (v NullableGetRecordHostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordHostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
