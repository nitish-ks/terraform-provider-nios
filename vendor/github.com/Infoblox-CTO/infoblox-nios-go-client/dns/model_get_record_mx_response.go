/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordMxResponse - struct for GetRecordMxResponse
type GetRecordMxResponse struct {
	GetRecordMxResponseObjectAsResult *GetRecordMxResponseObjectAsResult
	RecordMx                          *RecordMx
}

// GetRecordMxResponseObjectAsResultAsGetRecordMxResponse is a convenience function that returns GetRecordMxResponseObjectAsResult wrapped in GetRecordMxResponse
func GetRecordMxResponseObjectAsResultAsGetRecordMxResponse(v *GetRecordMxResponseObjectAsResult) GetRecordMxResponse {
	return GetRecordMxResponse{
		GetRecordMxResponseObjectAsResult: v,
	}
}

// RecordMxAsGetRecordMxResponse is a convenience function that returns RecordMx wrapped in GetRecordMxResponse
func RecordMxAsGetRecordMxResponse(v *RecordMx) GetRecordMxResponse {
	return GetRecordMxResponse{
		RecordMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordMxResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordMxResponseObjectAsResult)
	if err == nil {
		jsonGetRecordMxResponseObjectAsResult, _ := json.Marshal(dst.GetRecordMxResponseObjectAsResult)
		if string(jsonGetRecordMxResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordMxResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordMxResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordMx
	err = newStrictDecoder(data).Decode(&dst.RecordMx)
	if err == nil {
		jsonRecordMx, _ := json.Marshal(dst.RecordMx)
		if string(jsonRecordMx) == "{}" { // empty struct
			dst.RecordMx = nil
		} else {
			match++
		}
	} else {
		dst.RecordMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordMxResponseObjectAsResult = nil
		dst.RecordMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordMxResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordMxResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordMxResponseObjectAsResult)
	}

	if src.RecordMx != nil {
		return json.Marshal(&src.RecordMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordMxResponseObjectAsResult != nil {
		return obj.GetRecordMxResponseObjectAsResult
	}

	if obj.RecordMx != nil {
		return obj.RecordMx
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordMxResponse struct {
	value *GetRecordMxResponse
	isSet bool
}

func (v NullableGetRecordMxResponse) Get() *GetRecordMxResponse {
	return v.value
}

func (v *NullableGetRecordMxResponse) Set(val *GetRecordMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordMxResponse(val *GetRecordMxResponse) *NullableGetRecordMxResponse {
	return &NullableGetRecordMxResponse{value: val, isSet: true}
}

func (v NullableGetRecordMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
