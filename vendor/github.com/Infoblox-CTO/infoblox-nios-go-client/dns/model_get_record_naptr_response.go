/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordNaptrResponse - struct for GetRecordNaptrResponse
type GetRecordNaptrResponse struct {
	GetRecordNaptrResponseObjectAsResult *GetRecordNaptrResponseObjectAsResult
	RecordNaptr                          *RecordNaptr
}

// GetRecordNaptrResponseObjectAsResultAsGetRecordNaptrResponse is a convenience function that returns GetRecordNaptrResponseObjectAsResult wrapped in GetRecordNaptrResponse
func GetRecordNaptrResponseObjectAsResultAsGetRecordNaptrResponse(v *GetRecordNaptrResponseObjectAsResult) GetRecordNaptrResponse {
	return GetRecordNaptrResponse{
		GetRecordNaptrResponseObjectAsResult: v,
	}
}

// RecordNaptrAsGetRecordNaptrResponse is a convenience function that returns RecordNaptr wrapped in GetRecordNaptrResponse
func RecordNaptrAsGetRecordNaptrResponse(v *RecordNaptr) GetRecordNaptrResponse {
	return GetRecordNaptrResponse{
		RecordNaptr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordNaptrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordNaptrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordNaptrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordNaptrResponseObjectAsResult)
		if string(jsonGetRecordNaptrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordNaptrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordNaptrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordNaptr
	err = newStrictDecoder(data).Decode(&dst.RecordNaptr)
	if err == nil {
		jsonRecordNaptr, _ := json.Marshal(dst.RecordNaptr)
		if string(jsonRecordNaptr) == "{}" { // empty struct
			dst.RecordNaptr = nil
		} else {
			match++
		}
	} else {
		dst.RecordNaptr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordNaptrResponseObjectAsResult = nil
		dst.RecordNaptr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordNaptrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordNaptrResponseObjectAsResult)
	}

	if src.RecordNaptr != nil {
		return json.Marshal(&src.RecordNaptr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordNaptrResponseObjectAsResult != nil {
		return obj.GetRecordNaptrResponseObjectAsResult
	}

	if obj.RecordNaptr != nil {
		return obj.RecordNaptr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordNaptrResponse struct {
	value *GetRecordNaptrResponse
	isSet bool
}

func (v NullableGetRecordNaptrResponse) Get() *GetRecordNaptrResponse {
	return v.value
}

func (v *NullableGetRecordNaptrResponse) Set(val *GetRecordNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordNaptrResponse(val *GetRecordNaptrResponse) *NullableGetRecordNaptrResponse {
	return &NullableGetRecordNaptrResponse{value: val, isSet: true}
}

func (v NullableGetRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
