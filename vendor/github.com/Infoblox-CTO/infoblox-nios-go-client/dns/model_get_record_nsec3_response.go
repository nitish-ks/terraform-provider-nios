/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordNsec3Response - struct for GetRecordNsec3Response
type GetRecordNsec3Response struct {
	GetRecordNsec3ResponseObjectAsResult *GetRecordNsec3ResponseObjectAsResult
	RecordNsec3                          *RecordNsec3
}

// GetRecordNsec3ResponseObjectAsResultAsGetRecordNsec3Response is a convenience function that returns GetRecordNsec3ResponseObjectAsResult wrapped in GetRecordNsec3Response
func GetRecordNsec3ResponseObjectAsResultAsGetRecordNsec3Response(v *GetRecordNsec3ResponseObjectAsResult) GetRecordNsec3Response {
	return GetRecordNsec3Response{
		GetRecordNsec3ResponseObjectAsResult: v,
	}
}

// RecordNsec3AsGetRecordNsec3Response is a convenience function that returns RecordNsec3 wrapped in GetRecordNsec3Response
func RecordNsec3AsGetRecordNsec3Response(v *RecordNsec3) GetRecordNsec3Response {
	return GetRecordNsec3Response{
		RecordNsec3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordNsec3Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordNsec3ResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordNsec3ResponseObjectAsResult)
	if err == nil {
		jsonGetRecordNsec3ResponseObjectAsResult, _ := json.Marshal(dst.GetRecordNsec3ResponseObjectAsResult)
		if string(jsonGetRecordNsec3ResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordNsec3ResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordNsec3ResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordNsec3
	err = newStrictDecoder(data).Decode(&dst.RecordNsec3)
	if err == nil {
		jsonRecordNsec3, _ := json.Marshal(dst.RecordNsec3)
		if string(jsonRecordNsec3) == "{}" { // empty struct
			dst.RecordNsec3 = nil
		} else {
			match++
		}
	} else {
		dst.RecordNsec3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordNsec3ResponseObjectAsResult = nil
		dst.RecordNsec3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordNsec3Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordNsec3Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordNsec3Response) MarshalJSON() ([]byte, error) {
	if src.GetRecordNsec3ResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordNsec3ResponseObjectAsResult)
	}

	if src.RecordNsec3 != nil {
		return json.Marshal(&src.RecordNsec3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordNsec3Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordNsec3ResponseObjectAsResult != nil {
		return obj.GetRecordNsec3ResponseObjectAsResult
	}

	if obj.RecordNsec3 != nil {
		return obj.RecordNsec3
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordNsec3Response struct {
	value *GetRecordNsec3Response
	isSet bool
}

func (v NullableGetRecordNsec3Response) Get() *GetRecordNsec3Response {
	return v.value
}

func (v *NullableGetRecordNsec3Response) Set(val *GetRecordNsec3Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordNsec3Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordNsec3Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordNsec3Response(val *GetRecordNsec3Response) *NullableGetRecordNsec3Response {
	return &NullableGetRecordNsec3Response{value: val, isSet: true}
}

func (v NullableGetRecordNsec3Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordNsec3Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
