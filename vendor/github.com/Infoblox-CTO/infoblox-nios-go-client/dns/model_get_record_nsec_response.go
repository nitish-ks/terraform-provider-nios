/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordNsecResponse - struct for GetRecordNsecResponse
type GetRecordNsecResponse struct {
	GetRecordNsecResponseObjectAsResult *GetRecordNsecResponseObjectAsResult
	RecordNsec                          *RecordNsec
}

// GetRecordNsecResponseObjectAsResultAsGetRecordNsecResponse is a convenience function that returns GetRecordNsecResponseObjectAsResult wrapped in GetRecordNsecResponse
func GetRecordNsecResponseObjectAsResultAsGetRecordNsecResponse(v *GetRecordNsecResponseObjectAsResult) GetRecordNsecResponse {
	return GetRecordNsecResponse{
		GetRecordNsecResponseObjectAsResult: v,
	}
}

// RecordNsecAsGetRecordNsecResponse is a convenience function that returns RecordNsec wrapped in GetRecordNsecResponse
func RecordNsecAsGetRecordNsecResponse(v *RecordNsec) GetRecordNsecResponse {
	return GetRecordNsecResponse{
		RecordNsec: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordNsecResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordNsecResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordNsecResponseObjectAsResult)
	if err == nil {
		jsonGetRecordNsecResponseObjectAsResult, _ := json.Marshal(dst.GetRecordNsecResponseObjectAsResult)
		if string(jsonGetRecordNsecResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordNsecResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordNsecResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordNsec
	err = newStrictDecoder(data).Decode(&dst.RecordNsec)
	if err == nil {
		jsonRecordNsec, _ := json.Marshal(dst.RecordNsec)
		if string(jsonRecordNsec) == "{}" { // empty struct
			dst.RecordNsec = nil
		} else {
			match++
		}
	} else {
		dst.RecordNsec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordNsecResponseObjectAsResult = nil
		dst.RecordNsec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordNsecResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordNsecResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordNsecResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordNsecResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordNsecResponseObjectAsResult)
	}

	if src.RecordNsec != nil {
		return json.Marshal(&src.RecordNsec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordNsecResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordNsecResponseObjectAsResult != nil {
		return obj.GetRecordNsecResponseObjectAsResult
	}

	if obj.RecordNsec != nil {
		return obj.RecordNsec
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordNsecResponse struct {
	value *GetRecordNsecResponse
	isSet bool
}

func (v NullableGetRecordNsecResponse) Get() *GetRecordNsecResponse {
	return v.value
}

func (v *NullableGetRecordNsecResponse) Set(val *GetRecordNsecResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordNsecResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordNsecResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordNsecResponse(val *GetRecordNsecResponse) *NullableGetRecordNsecResponse {
	return &NullableGetRecordNsecResponse{value: val, isSet: true}
}

func (v NullableGetRecordNsecResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordNsecResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
