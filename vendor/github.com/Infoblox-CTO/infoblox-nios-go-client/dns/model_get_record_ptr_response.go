/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordPtrResponse - struct for GetRecordPtrResponse
type GetRecordPtrResponse struct {
	GetRecordPtrResponseObjectAsResult *GetRecordPtrResponseObjectAsResult
	RecordPtr                          *RecordPtr
}

// GetRecordPtrResponseObjectAsResultAsGetRecordPtrResponse is a convenience function that returns GetRecordPtrResponseObjectAsResult wrapped in GetRecordPtrResponse
func GetRecordPtrResponseObjectAsResultAsGetRecordPtrResponse(v *GetRecordPtrResponseObjectAsResult) GetRecordPtrResponse {
	return GetRecordPtrResponse{
		GetRecordPtrResponseObjectAsResult: v,
	}
}

// RecordPtrAsGetRecordPtrResponse is a convenience function that returns RecordPtr wrapped in GetRecordPtrResponse
func RecordPtrAsGetRecordPtrResponse(v *RecordPtr) GetRecordPtrResponse {
	return GetRecordPtrResponse{
		RecordPtr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordPtrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordPtrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordPtrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordPtrResponseObjectAsResult)
		if string(jsonGetRecordPtrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordPtrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordPtrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordPtr
	err = newStrictDecoder(data).Decode(&dst.RecordPtr)
	if err == nil {
		jsonRecordPtr, _ := json.Marshal(dst.RecordPtr)
		if string(jsonRecordPtr) == "{}" { // empty struct
			dst.RecordPtr = nil
		} else {
			match++
		}
	} else {
		dst.RecordPtr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordPtrResponseObjectAsResult = nil
		dst.RecordPtr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordPtrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordPtrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordPtrResponseObjectAsResult)
	}

	if src.RecordPtr != nil {
		return json.Marshal(&src.RecordPtr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordPtrResponseObjectAsResult != nil {
		return obj.GetRecordPtrResponseObjectAsResult
	}

	if obj.RecordPtr != nil {
		return obj.RecordPtr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordPtrResponse struct {
	value *GetRecordPtrResponse
	isSet bool
}

func (v NullableGetRecordPtrResponse) Get() *GetRecordPtrResponse {
	return v.value
}

func (v *NullableGetRecordPtrResponse) Set(val *GetRecordPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordPtrResponse(val *GetRecordPtrResponse) *NullableGetRecordPtrResponse {
	return &NullableGetRecordPtrResponse{value: val, isSet: true}
}

func (v NullableGetRecordPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
