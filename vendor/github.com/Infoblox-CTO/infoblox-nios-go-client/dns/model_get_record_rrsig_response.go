/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordRrsigResponse - struct for GetRecordRrsigResponse
type GetRecordRrsigResponse struct {
	GetRecordRrsigResponseObjectAsResult *GetRecordRrsigResponseObjectAsResult
	RecordRrsig                          *RecordRrsig
}

// GetRecordRrsigResponseObjectAsResultAsGetRecordRrsigResponse is a convenience function that returns GetRecordRrsigResponseObjectAsResult wrapped in GetRecordRrsigResponse
func GetRecordRrsigResponseObjectAsResultAsGetRecordRrsigResponse(v *GetRecordRrsigResponseObjectAsResult) GetRecordRrsigResponse {
	return GetRecordRrsigResponse{
		GetRecordRrsigResponseObjectAsResult: v,
	}
}

// RecordRrsigAsGetRecordRrsigResponse is a convenience function that returns RecordRrsig wrapped in GetRecordRrsigResponse
func RecordRrsigAsGetRecordRrsigResponse(v *RecordRrsig) GetRecordRrsigResponse {
	return GetRecordRrsigResponse{
		RecordRrsig: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRrsigResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRrsigResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRrsigResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRrsigResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRrsigResponseObjectAsResult)
		if string(jsonGetRecordRrsigResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRrsigResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRrsigResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRrsig
	err = newStrictDecoder(data).Decode(&dst.RecordRrsig)
	if err == nil {
		jsonRecordRrsig, _ := json.Marshal(dst.RecordRrsig)
		if string(jsonRecordRrsig) == "{}" { // empty struct
			dst.RecordRrsig = nil
		} else {
			match++
		}
	} else {
		dst.RecordRrsig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRrsigResponseObjectAsResult = nil
		dst.RecordRrsig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRrsigResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRrsigResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRrsigResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRrsigResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRrsigResponseObjectAsResult)
	}

	if src.RecordRrsig != nil {
		return json.Marshal(&src.RecordRrsig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRrsigResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRrsigResponseObjectAsResult != nil {
		return obj.GetRecordRrsigResponseObjectAsResult
	}

	if obj.RecordRrsig != nil {
		return obj.RecordRrsig
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRrsigResponse struct {
	value *GetRecordRrsigResponse
	isSet bool
}

func (v NullableGetRecordRrsigResponse) Get() *GetRecordRrsigResponse {
	return v.value
}

func (v *NullableGetRecordRrsigResponse) Set(val *GetRecordRrsigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRrsigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRrsigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRrsigResponse(val *GetRecordRrsigResponse) *NullableGetRecordRrsigResponse {
	return &NullableGetRecordRrsigResponse{value: val, isSet: true}
}

func (v NullableGetRecordRrsigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRrsigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
