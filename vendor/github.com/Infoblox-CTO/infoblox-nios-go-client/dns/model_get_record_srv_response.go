/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordSrvResponse - struct for GetRecordSrvResponse
type GetRecordSrvResponse struct {
	GetRecordSrvResponseObjectAsResult *GetRecordSrvResponseObjectAsResult
	RecordSrv                          *RecordSrv
}

// GetRecordSrvResponseObjectAsResultAsGetRecordSrvResponse is a convenience function that returns GetRecordSrvResponseObjectAsResult wrapped in GetRecordSrvResponse
func GetRecordSrvResponseObjectAsResultAsGetRecordSrvResponse(v *GetRecordSrvResponseObjectAsResult) GetRecordSrvResponse {
	return GetRecordSrvResponse{
		GetRecordSrvResponseObjectAsResult: v,
	}
}

// RecordSrvAsGetRecordSrvResponse is a convenience function that returns RecordSrv wrapped in GetRecordSrvResponse
func RecordSrvAsGetRecordSrvResponse(v *RecordSrv) GetRecordSrvResponse {
	return GetRecordSrvResponse{
		RecordSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordSrvResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordSrvResponseObjectAsResult)
	if err == nil {
		jsonGetRecordSrvResponseObjectAsResult, _ := json.Marshal(dst.GetRecordSrvResponseObjectAsResult)
		if string(jsonGetRecordSrvResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordSrvResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordSrvResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordSrv
	err = newStrictDecoder(data).Decode(&dst.RecordSrv)
	if err == nil {
		jsonRecordSrv, _ := json.Marshal(dst.RecordSrv)
		if string(jsonRecordSrv) == "{}" { // empty struct
			dst.RecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.RecordSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordSrvResponseObjectAsResult = nil
		dst.RecordSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordSrvResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordSrvResponseObjectAsResult)
	}

	if src.RecordSrv != nil {
		return json.Marshal(&src.RecordSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordSrvResponseObjectAsResult != nil {
		return obj.GetRecordSrvResponseObjectAsResult
	}

	if obj.RecordSrv != nil {
		return obj.RecordSrv
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordSrvResponse struct {
	value *GetRecordSrvResponse
	isSet bool
}

func (v NullableGetRecordSrvResponse) Get() *GetRecordSrvResponse {
	return v.value
}

func (v *NullableGetRecordSrvResponse) Set(val *GetRecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordSrvResponse(val *GetRecordSrvResponse) *NullableGetRecordSrvResponse {
	return &NullableGetRecordSrvResponse{value: val, isSet: true}
}

func (v NullableGetRecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
