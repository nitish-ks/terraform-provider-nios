/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordTxtResponse - struct for GetRecordTxtResponse
type GetRecordTxtResponse struct {
	GetRecordTxtResponseObjectAsResult *GetRecordTxtResponseObjectAsResult
	RecordTxt                          *RecordTxt
}

// GetRecordTxtResponseObjectAsResultAsGetRecordTxtResponse is a convenience function that returns GetRecordTxtResponseObjectAsResult wrapped in GetRecordTxtResponse
func GetRecordTxtResponseObjectAsResultAsGetRecordTxtResponse(v *GetRecordTxtResponseObjectAsResult) GetRecordTxtResponse {
	return GetRecordTxtResponse{
		GetRecordTxtResponseObjectAsResult: v,
	}
}

// RecordTxtAsGetRecordTxtResponse is a convenience function that returns RecordTxt wrapped in GetRecordTxtResponse
func RecordTxtAsGetRecordTxtResponse(v *RecordTxt) GetRecordTxtResponse {
	return GetRecordTxtResponse{
		RecordTxt: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordTxtResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordTxtResponseObjectAsResult)
	if err == nil {
		jsonGetRecordTxtResponseObjectAsResult, _ := json.Marshal(dst.GetRecordTxtResponseObjectAsResult)
		if string(jsonGetRecordTxtResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordTxtResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordTxtResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordTxt
	err = newStrictDecoder(data).Decode(&dst.RecordTxt)
	if err == nil {
		jsonRecordTxt, _ := json.Marshal(dst.RecordTxt)
		if string(jsonRecordTxt) == "{}" { // empty struct
			dst.RecordTxt = nil
		} else {
			match++
		}
	} else {
		dst.RecordTxt = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordTxtResponseObjectAsResult = nil
		dst.RecordTxt = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordTxtResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordTxtResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordTxtResponseObjectAsResult)
	}

	if src.RecordTxt != nil {
		return json.Marshal(&src.RecordTxt)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordTxtResponseObjectAsResult != nil {
		return obj.GetRecordTxtResponseObjectAsResult
	}

	if obj.RecordTxt != nil {
		return obj.RecordTxt
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordTxtResponse struct {
	value *GetRecordTxtResponse
	isSet bool
}

func (v NullableGetRecordTxtResponse) Get() *GetRecordTxtResponse {
	return v.value
}

func (v *NullableGetRecordTxtResponse) Set(val *GetRecordTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordTxtResponse(val *GetRecordTxtResponse) *NullableGetRecordTxtResponse {
	return &NullableGetRecordTxtResponse{value: val, isSet: true}
}

func (v NullableGetRecordTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
