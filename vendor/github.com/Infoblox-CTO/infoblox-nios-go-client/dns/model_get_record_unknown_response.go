/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordUnknownResponse - struct for GetRecordUnknownResponse
type GetRecordUnknownResponse struct {
	GetRecordUnknownResponseObjectAsResult *GetRecordUnknownResponseObjectAsResult
	RecordUnknown                          *RecordUnknown
}

// GetRecordUnknownResponseObjectAsResultAsGetRecordUnknownResponse is a convenience function that returns GetRecordUnknownResponseObjectAsResult wrapped in GetRecordUnknownResponse
func GetRecordUnknownResponseObjectAsResultAsGetRecordUnknownResponse(v *GetRecordUnknownResponseObjectAsResult) GetRecordUnknownResponse {
	return GetRecordUnknownResponse{
		GetRecordUnknownResponseObjectAsResult: v,
	}
}

// RecordUnknownAsGetRecordUnknownResponse is a convenience function that returns RecordUnknown wrapped in GetRecordUnknownResponse
func RecordUnknownAsGetRecordUnknownResponse(v *RecordUnknown) GetRecordUnknownResponse {
	return GetRecordUnknownResponse{
		RecordUnknown: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordUnknownResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordUnknownResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordUnknownResponseObjectAsResult)
	if err == nil {
		jsonGetRecordUnknownResponseObjectAsResult, _ := json.Marshal(dst.GetRecordUnknownResponseObjectAsResult)
		if string(jsonGetRecordUnknownResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordUnknownResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordUnknownResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordUnknown
	err = newStrictDecoder(data).Decode(&dst.RecordUnknown)
	if err == nil {
		jsonRecordUnknown, _ := json.Marshal(dst.RecordUnknown)
		if string(jsonRecordUnknown) == "{}" { // empty struct
			dst.RecordUnknown = nil
		} else {
			match++
		}
	} else {
		dst.RecordUnknown = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordUnknownResponseObjectAsResult = nil
		dst.RecordUnknown = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordUnknownResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordUnknownResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordUnknownResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordUnknownResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordUnknownResponseObjectAsResult)
	}

	if src.RecordUnknown != nil {
		return json.Marshal(&src.RecordUnknown)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordUnknownResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordUnknownResponseObjectAsResult != nil {
		return obj.GetRecordUnknownResponseObjectAsResult
	}

	if obj.RecordUnknown != nil {
		return obj.RecordUnknown
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordUnknownResponse struct {
	value *GetRecordUnknownResponse
	isSet bool
}

func (v NullableGetRecordUnknownResponse) Get() *GetRecordUnknownResponse {
	return v.value
}

func (v *NullableGetRecordUnknownResponse) Set(val *GetRecordUnknownResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordUnknownResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordUnknownResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordUnknownResponse(val *GetRecordUnknownResponse) *NullableGetRecordUnknownResponse {
	return &NullableGetRecordUnknownResponse{value: val, isSet: true}
}

func (v NullableGetRecordUnknownResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordUnknownResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
