/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordnamepolicyResponse - struct for GetRecordnamepolicyResponse
type GetRecordnamepolicyResponse struct {
	GetRecordnamepolicyResponseObjectAsResult *GetRecordnamepolicyResponseObjectAsResult
	Recordnamepolicy                          *Recordnamepolicy
}

// GetRecordnamepolicyResponseObjectAsResultAsGetRecordnamepolicyResponse is a convenience function that returns GetRecordnamepolicyResponseObjectAsResult wrapped in GetRecordnamepolicyResponse
func GetRecordnamepolicyResponseObjectAsResultAsGetRecordnamepolicyResponse(v *GetRecordnamepolicyResponseObjectAsResult) GetRecordnamepolicyResponse {
	return GetRecordnamepolicyResponse{
		GetRecordnamepolicyResponseObjectAsResult: v,
	}
}

// RecordnamepolicyAsGetRecordnamepolicyResponse is a convenience function that returns Recordnamepolicy wrapped in GetRecordnamepolicyResponse
func RecordnamepolicyAsGetRecordnamepolicyResponse(v *Recordnamepolicy) GetRecordnamepolicyResponse {
	return GetRecordnamepolicyResponse{
		Recordnamepolicy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordnamepolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordnamepolicyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordnamepolicyResponseObjectAsResult)
	if err == nil {
		jsonGetRecordnamepolicyResponseObjectAsResult, _ := json.Marshal(dst.GetRecordnamepolicyResponseObjectAsResult)
		if string(jsonGetRecordnamepolicyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordnamepolicyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordnamepolicyResponseObjectAsResult = nil
	}

	// try to unmarshal data into Recordnamepolicy
	err = newStrictDecoder(data).Decode(&dst.Recordnamepolicy)
	if err == nil {
		jsonRecordnamepolicy, _ := json.Marshal(dst.Recordnamepolicy)
		if string(jsonRecordnamepolicy) == "{}" { // empty struct
			dst.Recordnamepolicy = nil
		} else {
			match++
		}
	} else {
		dst.Recordnamepolicy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordnamepolicyResponseObjectAsResult = nil
		dst.Recordnamepolicy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordnamepolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordnamepolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordnamepolicyResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordnamepolicyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordnamepolicyResponseObjectAsResult)
	}

	if src.Recordnamepolicy != nil {
		return json.Marshal(&src.Recordnamepolicy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordnamepolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordnamepolicyResponseObjectAsResult != nil {
		return obj.GetRecordnamepolicyResponseObjectAsResult
	}

	if obj.Recordnamepolicy != nil {
		return obj.Recordnamepolicy
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordnamepolicyResponse struct {
	value *GetRecordnamepolicyResponse
	isSet bool
}

func (v NullableGetRecordnamepolicyResponse) Get() *GetRecordnamepolicyResponse {
	return v.value
}

func (v *NullableGetRecordnamepolicyResponse) Set(val *GetRecordnamepolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordnamepolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordnamepolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordnamepolicyResponse(val *GetRecordnamepolicyResponse) *NullableGetRecordnamepolicyResponse {
	return &NullableGetRecordnamepolicyResponse{value: val, isSet: true}
}

func (v NullableGetRecordnamepolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordnamepolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
