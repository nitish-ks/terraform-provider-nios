/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetSharedrecordAaaaResponse - struct for GetSharedrecordAaaaResponse
type GetSharedrecordAaaaResponse struct {
	GetSharedrecordAaaaResponseObjectAsResult *GetSharedrecordAaaaResponseObjectAsResult
	SharedrecordAaaa                          *SharedrecordAaaa
}

// GetSharedrecordAaaaResponseObjectAsResultAsGetSharedrecordAaaaResponse is a convenience function that returns GetSharedrecordAaaaResponseObjectAsResult wrapped in GetSharedrecordAaaaResponse
func GetSharedrecordAaaaResponseObjectAsResultAsGetSharedrecordAaaaResponse(v *GetSharedrecordAaaaResponseObjectAsResult) GetSharedrecordAaaaResponse {
	return GetSharedrecordAaaaResponse{
		GetSharedrecordAaaaResponseObjectAsResult: v,
	}
}

// SharedrecordAaaaAsGetSharedrecordAaaaResponse is a convenience function that returns SharedrecordAaaa wrapped in GetSharedrecordAaaaResponse
func SharedrecordAaaaAsGetSharedrecordAaaaResponse(v *SharedrecordAaaa) GetSharedrecordAaaaResponse {
	return GetSharedrecordAaaaResponse{
		SharedrecordAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharedrecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharedrecordAaaaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharedrecordAaaaResponseObjectAsResult)
	if err == nil {
		jsonGetSharedrecordAaaaResponseObjectAsResult, _ := json.Marshal(dst.GetSharedrecordAaaaResponseObjectAsResult)
		if string(jsonGetSharedrecordAaaaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharedrecordAaaaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharedrecordAaaaResponseObjectAsResult = nil
	}

	// try to unmarshal data into SharedrecordAaaa
	err = newStrictDecoder(data).Decode(&dst.SharedrecordAaaa)
	if err == nil {
		jsonSharedrecordAaaa, _ := json.Marshal(dst.SharedrecordAaaa)
		if string(jsonSharedrecordAaaa) == "{}" { // empty struct
			dst.SharedrecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.SharedrecordAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharedrecordAaaaResponseObjectAsResult = nil
		dst.SharedrecordAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharedrecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharedrecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharedrecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharedrecordAaaaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharedrecordAaaaResponseObjectAsResult)
	}

	if src.SharedrecordAaaa != nil {
		return json.Marshal(&src.SharedrecordAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharedrecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharedrecordAaaaResponseObjectAsResult != nil {
		return obj.GetSharedrecordAaaaResponseObjectAsResult
	}

	if obj.SharedrecordAaaa != nil {
		return obj.SharedrecordAaaa
	}

	// all schemas are nil
	return nil
}

type NullableGetSharedrecordAaaaResponse struct {
	value *GetSharedrecordAaaaResponse
	isSet bool
}

func (v NullableGetSharedrecordAaaaResponse) Get() *GetSharedrecordAaaaResponse {
	return v.value
}

func (v *NullableGetSharedrecordAaaaResponse) Set(val *GetSharedrecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharedrecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharedrecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharedrecordAaaaResponse(val *GetSharedrecordAaaaResponse) *NullableGetSharedrecordAaaaResponse {
	return &NullableGetSharedrecordAaaaResponse{value: val, isSet: true}
}

func (v NullableGetSharedrecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharedrecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
