/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetSharedrecordMxResponse - struct for GetSharedrecordMxResponse
type GetSharedrecordMxResponse struct {
	GetSharedrecordMxResponseObjectAsResult *GetSharedrecordMxResponseObjectAsResult
	SharedrecordMx                          *SharedrecordMx
}

// GetSharedrecordMxResponseObjectAsResultAsGetSharedrecordMxResponse is a convenience function that returns GetSharedrecordMxResponseObjectAsResult wrapped in GetSharedrecordMxResponse
func GetSharedrecordMxResponseObjectAsResultAsGetSharedrecordMxResponse(v *GetSharedrecordMxResponseObjectAsResult) GetSharedrecordMxResponse {
	return GetSharedrecordMxResponse{
		GetSharedrecordMxResponseObjectAsResult: v,
	}
}

// SharedrecordMxAsGetSharedrecordMxResponse is a convenience function that returns SharedrecordMx wrapped in GetSharedrecordMxResponse
func SharedrecordMxAsGetSharedrecordMxResponse(v *SharedrecordMx) GetSharedrecordMxResponse {
	return GetSharedrecordMxResponse{
		SharedrecordMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharedrecordMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharedrecordMxResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharedrecordMxResponseObjectAsResult)
	if err == nil {
		jsonGetSharedrecordMxResponseObjectAsResult, _ := json.Marshal(dst.GetSharedrecordMxResponseObjectAsResult)
		if string(jsonGetSharedrecordMxResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharedrecordMxResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharedrecordMxResponseObjectAsResult = nil
	}

	// try to unmarshal data into SharedrecordMx
	err = newStrictDecoder(data).Decode(&dst.SharedrecordMx)
	if err == nil {
		jsonSharedrecordMx, _ := json.Marshal(dst.SharedrecordMx)
		if string(jsonSharedrecordMx) == "{}" { // empty struct
			dst.SharedrecordMx = nil
		} else {
			match++
		}
	} else {
		dst.SharedrecordMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharedrecordMxResponseObjectAsResult = nil
		dst.SharedrecordMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharedrecordMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharedrecordMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharedrecordMxResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharedrecordMxResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharedrecordMxResponseObjectAsResult)
	}

	if src.SharedrecordMx != nil {
		return json.Marshal(&src.SharedrecordMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharedrecordMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharedrecordMxResponseObjectAsResult != nil {
		return obj.GetSharedrecordMxResponseObjectAsResult
	}

	if obj.SharedrecordMx != nil {
		return obj.SharedrecordMx
	}

	// all schemas are nil
	return nil
}

type NullableGetSharedrecordMxResponse struct {
	value *GetSharedrecordMxResponse
	isSet bool
}

func (v NullableGetSharedrecordMxResponse) Get() *GetSharedrecordMxResponse {
	return v.value
}

func (v *NullableGetSharedrecordMxResponse) Set(val *GetSharedrecordMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharedrecordMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharedrecordMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharedrecordMxResponse(val *GetSharedrecordMxResponse) *NullableGetSharedrecordMxResponse {
	return &NullableGetSharedrecordMxResponse{value: val, isSet: true}
}

func (v NullableGetSharedrecordMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharedrecordMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
