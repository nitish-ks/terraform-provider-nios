/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetSharedrecordgroupResponse - struct for GetSharedrecordgroupResponse
type GetSharedrecordgroupResponse struct {
	GetSharedrecordgroupResponseObjectAsResult *GetSharedrecordgroupResponseObjectAsResult
	Sharedrecordgroup                          *Sharedrecordgroup
}

// GetSharedrecordgroupResponseObjectAsResultAsGetSharedrecordgroupResponse is a convenience function that returns GetSharedrecordgroupResponseObjectAsResult wrapped in GetSharedrecordgroupResponse
func GetSharedrecordgroupResponseObjectAsResultAsGetSharedrecordgroupResponse(v *GetSharedrecordgroupResponseObjectAsResult) GetSharedrecordgroupResponse {
	return GetSharedrecordgroupResponse{
		GetSharedrecordgroupResponseObjectAsResult: v,
	}
}

// SharedrecordgroupAsGetSharedrecordgroupResponse is a convenience function that returns Sharedrecordgroup wrapped in GetSharedrecordgroupResponse
func SharedrecordgroupAsGetSharedrecordgroupResponse(v *Sharedrecordgroup) GetSharedrecordgroupResponse {
	return GetSharedrecordgroupResponse{
		Sharedrecordgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharedrecordgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharedrecordgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharedrecordgroupResponseObjectAsResult)
	if err == nil {
		jsonGetSharedrecordgroupResponseObjectAsResult, _ := json.Marshal(dst.GetSharedrecordgroupResponseObjectAsResult)
		if string(jsonGetSharedrecordgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharedrecordgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharedrecordgroupResponseObjectAsResult = nil
	}

	// try to unmarshal data into Sharedrecordgroup
	err = newStrictDecoder(data).Decode(&dst.Sharedrecordgroup)
	if err == nil {
		jsonSharedrecordgroup, _ := json.Marshal(dst.Sharedrecordgroup)
		if string(jsonSharedrecordgroup) == "{}" { // empty struct
			dst.Sharedrecordgroup = nil
		} else {
			match++
		}
	} else {
		dst.Sharedrecordgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharedrecordgroupResponseObjectAsResult = nil
		dst.Sharedrecordgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharedrecordgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharedrecordgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharedrecordgroupResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharedrecordgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharedrecordgroupResponseObjectAsResult)
	}

	if src.Sharedrecordgroup != nil {
		return json.Marshal(&src.Sharedrecordgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharedrecordgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharedrecordgroupResponseObjectAsResult != nil {
		return obj.GetSharedrecordgroupResponseObjectAsResult
	}

	if obj.Sharedrecordgroup != nil {
		return obj.Sharedrecordgroup
	}

	// all schemas are nil
	return nil
}

type NullableGetSharedrecordgroupResponse struct {
	value *GetSharedrecordgroupResponse
	isSet bool
}

func (v NullableGetSharedrecordgroupResponse) Get() *GetSharedrecordgroupResponse {
	return v.value
}

func (v *NullableGetSharedrecordgroupResponse) Set(val *GetSharedrecordgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharedrecordgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharedrecordgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharedrecordgroupResponse(val *GetSharedrecordgroupResponse) *NullableGetSharedrecordgroupResponse {
	return &NullableGetSharedrecordgroupResponse{value: val, isSet: true}
}

func (v NullableGetSharedrecordgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharedrecordgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
