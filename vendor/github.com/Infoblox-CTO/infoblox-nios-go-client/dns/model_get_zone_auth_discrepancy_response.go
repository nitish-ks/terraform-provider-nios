/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneAuthDiscrepancyResponse - struct for GetZoneAuthDiscrepancyResponse
type GetZoneAuthDiscrepancyResponse struct {
	GetZoneAuthDiscrepancyResponseObjectAsResult *GetZoneAuthDiscrepancyResponseObjectAsResult
	ZoneAuthDiscrepancy                          *ZoneAuthDiscrepancy
}

// GetZoneAuthDiscrepancyResponseObjectAsResultAsGetZoneAuthDiscrepancyResponse is a convenience function that returns GetZoneAuthDiscrepancyResponseObjectAsResult wrapped in GetZoneAuthDiscrepancyResponse
func GetZoneAuthDiscrepancyResponseObjectAsResultAsGetZoneAuthDiscrepancyResponse(v *GetZoneAuthDiscrepancyResponseObjectAsResult) GetZoneAuthDiscrepancyResponse {
	return GetZoneAuthDiscrepancyResponse{
		GetZoneAuthDiscrepancyResponseObjectAsResult: v,
	}
}

// ZoneAuthDiscrepancyAsGetZoneAuthDiscrepancyResponse is a convenience function that returns ZoneAuthDiscrepancy wrapped in GetZoneAuthDiscrepancyResponse
func ZoneAuthDiscrepancyAsGetZoneAuthDiscrepancyResponse(v *ZoneAuthDiscrepancy) GetZoneAuthDiscrepancyResponse {
	return GetZoneAuthDiscrepancyResponse{
		ZoneAuthDiscrepancy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneAuthDiscrepancyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneAuthDiscrepancyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneAuthDiscrepancyResponseObjectAsResult)
	if err == nil {
		jsonGetZoneAuthDiscrepancyResponseObjectAsResult, _ := json.Marshal(dst.GetZoneAuthDiscrepancyResponseObjectAsResult)
		if string(jsonGetZoneAuthDiscrepancyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneAuthDiscrepancyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneAuthDiscrepancyResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneAuthDiscrepancy
	err = newStrictDecoder(data).Decode(&dst.ZoneAuthDiscrepancy)
	if err == nil {
		jsonZoneAuthDiscrepancy, _ := json.Marshal(dst.ZoneAuthDiscrepancy)
		if string(jsonZoneAuthDiscrepancy) == "{}" { // empty struct
			dst.ZoneAuthDiscrepancy = nil
		} else {
			match++
		}
	} else {
		dst.ZoneAuthDiscrepancy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneAuthDiscrepancyResponseObjectAsResult = nil
		dst.ZoneAuthDiscrepancy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneAuthDiscrepancyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneAuthDiscrepancyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneAuthDiscrepancyResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneAuthDiscrepancyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneAuthDiscrepancyResponseObjectAsResult)
	}

	if src.ZoneAuthDiscrepancy != nil {
		return json.Marshal(&src.ZoneAuthDiscrepancy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneAuthDiscrepancyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneAuthDiscrepancyResponseObjectAsResult != nil {
		return obj.GetZoneAuthDiscrepancyResponseObjectAsResult
	}

	if obj.ZoneAuthDiscrepancy != nil {
		return obj.ZoneAuthDiscrepancy
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneAuthDiscrepancyResponse struct {
	value *GetZoneAuthDiscrepancyResponse
	isSet bool
}

func (v NullableGetZoneAuthDiscrepancyResponse) Get() *GetZoneAuthDiscrepancyResponse {
	return v.value
}

func (v *NullableGetZoneAuthDiscrepancyResponse) Set(val *GetZoneAuthDiscrepancyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneAuthDiscrepancyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneAuthDiscrepancyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneAuthDiscrepancyResponse(val *GetZoneAuthDiscrepancyResponse) *NullableGetZoneAuthDiscrepancyResponse {
	return &NullableGetZoneAuthDiscrepancyResponse{value: val, isSet: true}
}

func (v NullableGetZoneAuthDiscrepancyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneAuthDiscrepancyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
