/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneAuthResponse - struct for GetZoneAuthResponse
type GetZoneAuthResponse struct {
	GetZoneAuthResponseObjectAsResult *GetZoneAuthResponseObjectAsResult
	ZoneAuth                          *ZoneAuth
}

// GetZoneAuthResponseObjectAsResultAsGetZoneAuthResponse is a convenience function that returns GetZoneAuthResponseObjectAsResult wrapped in GetZoneAuthResponse
func GetZoneAuthResponseObjectAsResultAsGetZoneAuthResponse(v *GetZoneAuthResponseObjectAsResult) GetZoneAuthResponse {
	return GetZoneAuthResponse{
		GetZoneAuthResponseObjectAsResult: v,
	}
}

// ZoneAuthAsGetZoneAuthResponse is a convenience function that returns ZoneAuth wrapped in GetZoneAuthResponse
func ZoneAuthAsGetZoneAuthResponse(v *ZoneAuth) GetZoneAuthResponse {
	return GetZoneAuthResponse{
		ZoneAuth: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneAuthResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneAuthResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneAuthResponseObjectAsResult)
	if err == nil {
		jsonGetZoneAuthResponseObjectAsResult, _ := json.Marshal(dst.GetZoneAuthResponseObjectAsResult)
		if string(jsonGetZoneAuthResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneAuthResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneAuthResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneAuth
	err = newStrictDecoder(data).Decode(&dst.ZoneAuth)
	if err == nil {
		jsonZoneAuth, _ := json.Marshal(dst.ZoneAuth)
		if string(jsonZoneAuth) == "{}" { // empty struct
			dst.ZoneAuth = nil
		} else {
			match++
		}
	} else {
		dst.ZoneAuth = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneAuthResponseObjectAsResult = nil
		dst.ZoneAuth = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneAuthResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneAuthResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneAuthResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneAuthResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneAuthResponseObjectAsResult)
	}

	if src.ZoneAuth != nil {
		return json.Marshal(&src.ZoneAuth)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneAuthResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneAuthResponseObjectAsResult != nil {
		return obj.GetZoneAuthResponseObjectAsResult
	}

	if obj.ZoneAuth != nil {
		return obj.ZoneAuth
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneAuthResponse struct {
	value *GetZoneAuthResponse
	isSet bool
}

func (v NullableGetZoneAuthResponse) Get() *GetZoneAuthResponse {
	return v.value
}

func (v *NullableGetZoneAuthResponse) Set(val *GetZoneAuthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneAuthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneAuthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneAuthResponse(val *GetZoneAuthResponse) *NullableGetZoneAuthResponse {
	return &NullableGetZoneAuthResponse{value: val, isSet: true}
}

func (v NullableGetZoneAuthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneAuthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
