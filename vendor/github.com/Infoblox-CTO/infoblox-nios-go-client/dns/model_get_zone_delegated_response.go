/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneDelegatedResponse - struct for GetZoneDelegatedResponse
type GetZoneDelegatedResponse struct {
	GetZoneDelegatedResponseObjectAsResult *GetZoneDelegatedResponseObjectAsResult
	ZoneDelegated                          *ZoneDelegated
}

// GetZoneDelegatedResponseObjectAsResultAsGetZoneDelegatedResponse is a convenience function that returns GetZoneDelegatedResponseObjectAsResult wrapped in GetZoneDelegatedResponse
func GetZoneDelegatedResponseObjectAsResultAsGetZoneDelegatedResponse(v *GetZoneDelegatedResponseObjectAsResult) GetZoneDelegatedResponse {
	return GetZoneDelegatedResponse{
		GetZoneDelegatedResponseObjectAsResult: v,
	}
}

// ZoneDelegatedAsGetZoneDelegatedResponse is a convenience function that returns ZoneDelegated wrapped in GetZoneDelegatedResponse
func ZoneDelegatedAsGetZoneDelegatedResponse(v *ZoneDelegated) GetZoneDelegatedResponse {
	return GetZoneDelegatedResponse{
		ZoneDelegated: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneDelegatedResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneDelegatedResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneDelegatedResponseObjectAsResult)
	if err == nil {
		jsonGetZoneDelegatedResponseObjectAsResult, _ := json.Marshal(dst.GetZoneDelegatedResponseObjectAsResult)
		if string(jsonGetZoneDelegatedResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneDelegatedResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneDelegatedResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneDelegated
	err = newStrictDecoder(data).Decode(&dst.ZoneDelegated)
	if err == nil {
		jsonZoneDelegated, _ := json.Marshal(dst.ZoneDelegated)
		if string(jsonZoneDelegated) == "{}" { // empty struct
			dst.ZoneDelegated = nil
		} else {
			match++
		}
	} else {
		dst.ZoneDelegated = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneDelegatedResponseObjectAsResult = nil
		dst.ZoneDelegated = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneDelegatedResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneDelegatedResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneDelegatedResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneDelegatedResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneDelegatedResponseObjectAsResult)
	}

	if src.ZoneDelegated != nil {
		return json.Marshal(&src.ZoneDelegated)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneDelegatedResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneDelegatedResponseObjectAsResult != nil {
		return obj.GetZoneDelegatedResponseObjectAsResult
	}

	if obj.ZoneDelegated != nil {
		return obj.ZoneDelegated
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneDelegatedResponse struct {
	value *GetZoneDelegatedResponse
	isSet bool
}

func (v NullableGetZoneDelegatedResponse) Get() *GetZoneDelegatedResponse {
	return v.value
}

func (v *NullableGetZoneDelegatedResponse) Set(val *GetZoneDelegatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneDelegatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneDelegatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneDelegatedResponse(val *GetZoneDelegatedResponse) *NullableGetZoneDelegatedResponse {
	return &NullableGetZoneDelegatedResponse{value: val, isSet: true}
}

func (v NullableGetZoneDelegatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneDelegatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
