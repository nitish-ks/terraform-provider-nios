/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneForwardResponse - struct for GetZoneForwardResponse
type GetZoneForwardResponse struct {
	GetZoneForwardResponseObjectAsResult *GetZoneForwardResponseObjectAsResult
	ZoneForward                          *ZoneForward
}

// GetZoneForwardResponseObjectAsResultAsGetZoneForwardResponse is a convenience function that returns GetZoneForwardResponseObjectAsResult wrapped in GetZoneForwardResponse
func GetZoneForwardResponseObjectAsResultAsGetZoneForwardResponse(v *GetZoneForwardResponseObjectAsResult) GetZoneForwardResponse {
	return GetZoneForwardResponse{
		GetZoneForwardResponseObjectAsResult: v,
	}
}

// ZoneForwardAsGetZoneForwardResponse is a convenience function that returns ZoneForward wrapped in GetZoneForwardResponse
func ZoneForwardAsGetZoneForwardResponse(v *ZoneForward) GetZoneForwardResponse {
	return GetZoneForwardResponse{
		ZoneForward: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneForwardResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneForwardResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneForwardResponseObjectAsResult)
	if err == nil {
		jsonGetZoneForwardResponseObjectAsResult, _ := json.Marshal(dst.GetZoneForwardResponseObjectAsResult)
		if string(jsonGetZoneForwardResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneForwardResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneForwardResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneForward
	err = newStrictDecoder(data).Decode(&dst.ZoneForward)
	if err == nil {
		jsonZoneForward, _ := json.Marshal(dst.ZoneForward)
		if string(jsonZoneForward) == "{}" { // empty struct
			dst.ZoneForward = nil
		} else {
			match++
		}
	} else {
		dst.ZoneForward = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneForwardResponseObjectAsResult = nil
		dst.ZoneForward = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneForwardResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneForwardResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneForwardResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneForwardResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneForwardResponseObjectAsResult)
	}

	if src.ZoneForward != nil {
		return json.Marshal(&src.ZoneForward)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneForwardResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneForwardResponseObjectAsResult != nil {
		return obj.GetZoneForwardResponseObjectAsResult
	}

	if obj.ZoneForward != nil {
		return obj.ZoneForward
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneForwardResponse struct {
	value *GetZoneForwardResponse
	isSet bool
}

func (v NullableGetZoneForwardResponse) Get() *GetZoneForwardResponse {
	return v.value
}

func (v *NullableGetZoneForwardResponse) Set(val *GetZoneForwardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneForwardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneForwardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneForwardResponse(val *GetZoneForwardResponse) *NullableGetZoneForwardResponse {
	return &NullableGetZoneForwardResponse{value: val, isSet: true}
}

func (v NullableGetZoneForwardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneForwardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
