/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneRpResponse - struct for GetZoneRpResponse
type GetZoneRpResponse struct {
	GetZoneRpResponseObjectAsResult *GetZoneRpResponseObjectAsResult
	ZoneRp                          *ZoneRp
}

// GetZoneRpResponseObjectAsResultAsGetZoneRpResponse is a convenience function that returns GetZoneRpResponseObjectAsResult wrapped in GetZoneRpResponse
func GetZoneRpResponseObjectAsResultAsGetZoneRpResponse(v *GetZoneRpResponseObjectAsResult) GetZoneRpResponse {
	return GetZoneRpResponse{
		GetZoneRpResponseObjectAsResult: v,
	}
}

// ZoneRpAsGetZoneRpResponse is a convenience function that returns ZoneRp wrapped in GetZoneRpResponse
func ZoneRpAsGetZoneRpResponse(v *ZoneRp) GetZoneRpResponse {
	return GetZoneRpResponse{
		ZoneRp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneRpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneRpResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneRpResponseObjectAsResult)
	if err == nil {
		jsonGetZoneRpResponseObjectAsResult, _ := json.Marshal(dst.GetZoneRpResponseObjectAsResult)
		if string(jsonGetZoneRpResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneRpResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneRpResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneRp
	err = newStrictDecoder(data).Decode(&dst.ZoneRp)
	if err == nil {
		jsonZoneRp, _ := json.Marshal(dst.ZoneRp)
		if string(jsonZoneRp) == "{}" { // empty struct
			dst.ZoneRp = nil
		} else {
			match++
		}
	} else {
		dst.ZoneRp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneRpResponseObjectAsResult = nil
		dst.ZoneRp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneRpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneRpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneRpResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneRpResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneRpResponseObjectAsResult)
	}

	if src.ZoneRp != nil {
		return json.Marshal(&src.ZoneRp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneRpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneRpResponseObjectAsResult != nil {
		return obj.GetZoneRpResponseObjectAsResult
	}

	if obj.ZoneRp != nil {
		return obj.ZoneRp
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneRpResponse struct {
	value *GetZoneRpResponse
	isSet bool
}

func (v NullableGetZoneRpResponse) Get() *GetZoneRpResponse {
	return v.value
}

func (v *NullableGetZoneRpResponse) Set(val *GetZoneRpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneRpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneRpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneRpResponse(val *GetZoneRpResponse) *NullableGetZoneRpResponse {
	return &NullableGetZoneRpResponse{value: val, isSet: true}
}

func (v NullableGetZoneRpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneRpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
