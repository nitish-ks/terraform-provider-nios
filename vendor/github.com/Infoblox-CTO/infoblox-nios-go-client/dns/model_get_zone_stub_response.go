/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetZoneStubResponse - struct for GetZoneStubResponse
type GetZoneStubResponse struct {
	GetZoneStubResponseObjectAsResult *GetZoneStubResponseObjectAsResult
	ZoneStub                          *ZoneStub
}

// GetZoneStubResponseObjectAsResultAsGetZoneStubResponse is a convenience function that returns GetZoneStubResponseObjectAsResult wrapped in GetZoneStubResponse
func GetZoneStubResponseObjectAsResultAsGetZoneStubResponse(v *GetZoneStubResponseObjectAsResult) GetZoneStubResponse {
	return GetZoneStubResponse{
		GetZoneStubResponseObjectAsResult: v,
	}
}

// ZoneStubAsGetZoneStubResponse is a convenience function that returns ZoneStub wrapped in GetZoneStubResponse
func ZoneStubAsGetZoneStubResponse(v *ZoneStub) GetZoneStubResponse {
	return GetZoneStubResponse{
		ZoneStub: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetZoneStubResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetZoneStubResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetZoneStubResponseObjectAsResult)
	if err == nil {
		jsonGetZoneStubResponseObjectAsResult, _ := json.Marshal(dst.GetZoneStubResponseObjectAsResult)
		if string(jsonGetZoneStubResponseObjectAsResult) == "{}" { // empty struct
			dst.GetZoneStubResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetZoneStubResponseObjectAsResult = nil
	}

	// try to unmarshal data into ZoneStub
	err = newStrictDecoder(data).Decode(&dst.ZoneStub)
	if err == nil {
		jsonZoneStub, _ := json.Marshal(dst.ZoneStub)
		if string(jsonZoneStub) == "{}" { // empty struct
			dst.ZoneStub = nil
		} else {
			match++
		}
	} else {
		dst.ZoneStub = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetZoneStubResponseObjectAsResult = nil
		dst.ZoneStub = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetZoneStubResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetZoneStubResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetZoneStubResponse) MarshalJSON() ([]byte, error) {
	if src.GetZoneStubResponseObjectAsResult != nil {
		return json.Marshal(&src.GetZoneStubResponseObjectAsResult)
	}

	if src.ZoneStub != nil {
		return json.Marshal(&src.ZoneStub)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetZoneStubResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetZoneStubResponseObjectAsResult != nil {
		return obj.GetZoneStubResponseObjectAsResult
	}

	if obj.ZoneStub != nil {
		return obj.ZoneStub
	}

	// all schemas are nil
	return nil
}

type NullableGetZoneStubResponse struct {
	value *GetZoneStubResponse
	isSet bool
}

func (v NullableGetZoneStubResponse) Get() *GetZoneStubResponse {
	return v.value
}

func (v *NullableGetZoneStubResponse) Set(val *GetZoneStubResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetZoneStubResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetZoneStubResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetZoneStubResponse(val *GetZoneStubResponse) *NullableGetZoneStubResponse {
	return &NullableGetZoneStubResponse{value: val, isSet: true}
}

func (v NullableGetZoneStubResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetZoneStubResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
