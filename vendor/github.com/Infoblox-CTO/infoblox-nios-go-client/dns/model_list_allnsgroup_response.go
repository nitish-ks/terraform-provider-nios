/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListAllnsgroupResponse - struct for ListAllnsgroupResponse
type ListAllnsgroupResponse struct {
	ListAllnsgroupResponseObject *ListAllnsgroupResponseObject
	ArrayOfAllnsgroup            *[]Allnsgroup
}

// ListAllnsgroupResponseObjectAsListAllnsgroupResponse is a convenience function that returns ListAllnsgroupResponseObject wrapped in ListAllnsgroupResponse
func ListAllnsgroupResponseObjectAsListAllnsgroupResponse(v *ListAllnsgroupResponseObject) ListAllnsgroupResponse {
	return ListAllnsgroupResponse{
		ListAllnsgroupResponseObject: v,
	}
}

// []AllnsgroupAsListAllnsgroupResponse is a convenience function that returns []Allnsgroup wrapped in ListAllnsgroupResponse
func ArrayOfAllnsgroupAsListAllnsgroupResponse(v *[]Allnsgroup) ListAllnsgroupResponse {
	return ListAllnsgroupResponse{
		ArrayOfAllnsgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAllnsgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAllnsgroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAllnsgroupResponseObject)
	if err == nil {
		jsonListAllnsgroupResponseObject, _ := json.Marshal(dst.ListAllnsgroupResponseObject)
		if string(jsonListAllnsgroupResponseObject) == "{}" { // empty struct
			dst.ListAllnsgroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAllnsgroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAllnsgroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAllnsgroup)
	if err == nil {
		jsonArrayOfAllnsgroup, _ := json.Marshal(dst.ArrayOfAllnsgroup)
		if string(jsonArrayOfAllnsgroup) == "{}" { // empty struct
			dst.ArrayOfAllnsgroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAllnsgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAllnsgroupResponseObject = nil
		dst.ArrayOfAllnsgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAllnsgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAllnsgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAllnsgroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListAllnsgroupResponseObject != nil {
		return json.Marshal(&src.ListAllnsgroupResponseObject)
	}

	if src.ArrayOfAllnsgroup != nil {
		return json.Marshal(&src.ArrayOfAllnsgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAllnsgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAllnsgroupResponseObject != nil {
		return obj.ListAllnsgroupResponseObject
	}

	if obj.ArrayOfAllnsgroup != nil {
		return obj.ArrayOfAllnsgroup
	}

	// all schemas are nil
	return nil
}

type NullableListAllnsgroupResponse struct {
	value *ListAllnsgroupResponse
	isSet bool
}

func (v NullableListAllnsgroupResponse) Get() *ListAllnsgroupResponse {
	return v.value
}

func (v *NullableListAllnsgroupResponse) Set(val *ListAllnsgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllnsgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllnsgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllnsgroupResponse(val *ListAllnsgroupResponse) *NullableListAllnsgroupResponse {
	return &NullableListAllnsgroupResponse{value: val, isSet: true}
}

func (v NullableListAllnsgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllnsgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
