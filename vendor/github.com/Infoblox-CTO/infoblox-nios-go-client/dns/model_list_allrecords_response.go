/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListAllrecordsResponse - struct for ListAllrecordsResponse
type ListAllrecordsResponse struct {
	ListAllrecordsResponseObject *ListAllrecordsResponseObject
	ArrayOfAllrecords            *[]Allrecords
}

// ListAllrecordsResponseObjectAsListAllrecordsResponse is a convenience function that returns ListAllrecordsResponseObject wrapped in ListAllrecordsResponse
func ListAllrecordsResponseObjectAsListAllrecordsResponse(v *ListAllrecordsResponseObject) ListAllrecordsResponse {
	return ListAllrecordsResponse{
		ListAllrecordsResponseObject: v,
	}
}

// []AllrecordsAsListAllrecordsResponse is a convenience function that returns []Allrecords wrapped in ListAllrecordsResponse
func ArrayOfAllrecordsAsListAllrecordsResponse(v *[]Allrecords) ListAllrecordsResponse {
	return ListAllrecordsResponse{
		ArrayOfAllrecords: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAllrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAllrecordsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAllrecordsResponseObject)
	if err == nil {
		jsonListAllrecordsResponseObject, _ := json.Marshal(dst.ListAllrecordsResponseObject)
		if string(jsonListAllrecordsResponseObject) == "{}" { // empty struct
			dst.ListAllrecordsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAllrecordsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAllrecords
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAllrecords)
	if err == nil {
		jsonArrayOfAllrecords, _ := json.Marshal(dst.ArrayOfAllrecords)
		if string(jsonArrayOfAllrecords) == "{}" { // empty struct
			dst.ArrayOfAllrecords = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAllrecords = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAllrecordsResponseObject = nil
		dst.ArrayOfAllrecords = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAllrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAllrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAllrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.ListAllrecordsResponseObject != nil {
		return json.Marshal(&src.ListAllrecordsResponseObject)
	}

	if src.ArrayOfAllrecords != nil {
		return json.Marshal(&src.ArrayOfAllrecords)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAllrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAllrecordsResponseObject != nil {
		return obj.ListAllrecordsResponseObject
	}

	if obj.ArrayOfAllrecords != nil {
		return obj.ArrayOfAllrecords
	}

	// all schemas are nil
	return nil
}

type NullableListAllrecordsResponse struct {
	value *ListAllrecordsResponse
	isSet bool
}

func (v NullableListAllrecordsResponse) Get() *ListAllrecordsResponse {
	return v.value
}

func (v *NullableListAllrecordsResponse) Set(val *ListAllrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllrecordsResponse(val *ListAllrecordsResponse) *NullableListAllrecordsResponse {
	return &NullableListAllrecordsResponse{value: val, isSet: true}
}

func (v NullableListAllrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
