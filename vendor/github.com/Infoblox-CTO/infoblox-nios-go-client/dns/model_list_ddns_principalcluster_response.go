/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListDdnsPrincipalclusterResponse - struct for ListDdnsPrincipalclusterResponse
type ListDdnsPrincipalclusterResponse struct {
	ListDdnsPrincipalclusterResponseObject *ListDdnsPrincipalclusterResponseObject
	ArrayOfDdnsPrincipalcluster            *[]DdnsPrincipalcluster
}

// ListDdnsPrincipalclusterResponseObjectAsListDdnsPrincipalclusterResponse is a convenience function that returns ListDdnsPrincipalclusterResponseObject wrapped in ListDdnsPrincipalclusterResponse
func ListDdnsPrincipalclusterResponseObjectAsListDdnsPrincipalclusterResponse(v *ListDdnsPrincipalclusterResponseObject) ListDdnsPrincipalclusterResponse {
	return ListDdnsPrincipalclusterResponse{
		ListDdnsPrincipalclusterResponseObject: v,
	}
}

// []DdnsPrincipalclusterAsListDdnsPrincipalclusterResponse is a convenience function that returns []DdnsPrincipalcluster wrapped in ListDdnsPrincipalclusterResponse
func ArrayOfDdnsPrincipalclusterAsListDdnsPrincipalclusterResponse(v *[]DdnsPrincipalcluster) ListDdnsPrincipalclusterResponse {
	return ListDdnsPrincipalclusterResponse{
		ArrayOfDdnsPrincipalcluster: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDdnsPrincipalclusterResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDdnsPrincipalclusterResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDdnsPrincipalclusterResponseObject)
	if err == nil {
		jsonListDdnsPrincipalclusterResponseObject, _ := json.Marshal(dst.ListDdnsPrincipalclusterResponseObject)
		if string(jsonListDdnsPrincipalclusterResponseObject) == "{}" { // empty struct
			dst.ListDdnsPrincipalclusterResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDdnsPrincipalclusterResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDdnsPrincipalcluster
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDdnsPrincipalcluster)
	if err == nil {
		jsonArrayOfDdnsPrincipalcluster, _ := json.Marshal(dst.ArrayOfDdnsPrincipalcluster)
		if string(jsonArrayOfDdnsPrincipalcluster) == "{}" { // empty struct
			dst.ArrayOfDdnsPrincipalcluster = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDdnsPrincipalcluster = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDdnsPrincipalclusterResponseObject = nil
		dst.ArrayOfDdnsPrincipalcluster = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDdnsPrincipalclusterResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDdnsPrincipalclusterResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	if src.ListDdnsPrincipalclusterResponseObject != nil {
		return json.Marshal(&src.ListDdnsPrincipalclusterResponseObject)
	}

	if src.ArrayOfDdnsPrincipalcluster != nil {
		return json.Marshal(&src.ArrayOfDdnsPrincipalcluster)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDdnsPrincipalclusterResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDdnsPrincipalclusterResponseObject != nil {
		return obj.ListDdnsPrincipalclusterResponseObject
	}

	if obj.ArrayOfDdnsPrincipalcluster != nil {
		return obj.ArrayOfDdnsPrincipalcluster
	}

	// all schemas are nil
	return nil
}

type NullableListDdnsPrincipalclusterResponse struct {
	value *ListDdnsPrincipalclusterResponse
	isSet bool
}

func (v NullableListDdnsPrincipalclusterResponse) Get() *ListDdnsPrincipalclusterResponse {
	return v.value
}

func (v *NullableListDdnsPrincipalclusterResponse) Set(val *ListDdnsPrincipalclusterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDdnsPrincipalclusterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDdnsPrincipalclusterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDdnsPrincipalclusterResponse(val *ListDdnsPrincipalclusterResponse) *NullableListDdnsPrincipalclusterResponse {
	return &NullableListDdnsPrincipalclusterResponse{value: val, isSet: true}
}

func (v NullableListDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDdnsPrincipalclusterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
