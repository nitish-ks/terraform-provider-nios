/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListDns64groupResponse - struct for ListDns64groupResponse
type ListDns64groupResponse struct {
	ListDns64groupResponseObject *ListDns64groupResponseObject
	ArrayOfDns64group            *[]Dns64group
}

// ListDns64groupResponseObjectAsListDns64groupResponse is a convenience function that returns ListDns64groupResponseObject wrapped in ListDns64groupResponse
func ListDns64groupResponseObjectAsListDns64groupResponse(v *ListDns64groupResponseObject) ListDns64groupResponse {
	return ListDns64groupResponse{
		ListDns64groupResponseObject: v,
	}
}

// []Dns64groupAsListDns64groupResponse is a convenience function that returns []Dns64group wrapped in ListDns64groupResponse
func ArrayOfDns64groupAsListDns64groupResponse(v *[]Dns64group) ListDns64groupResponse {
	return ListDns64groupResponse{
		ArrayOfDns64group: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDns64groupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDns64groupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDns64groupResponseObject)
	if err == nil {
		jsonListDns64groupResponseObject, _ := json.Marshal(dst.ListDns64groupResponseObject)
		if string(jsonListDns64groupResponseObject) == "{}" { // empty struct
			dst.ListDns64groupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDns64groupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDns64group
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDns64group)
	if err == nil {
		jsonArrayOfDns64group, _ := json.Marshal(dst.ArrayOfDns64group)
		if string(jsonArrayOfDns64group) == "{}" { // empty struct
			dst.ArrayOfDns64group = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDns64group = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDns64groupResponseObject = nil
		dst.ArrayOfDns64group = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDns64groupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDns64groupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDns64groupResponse) MarshalJSON() ([]byte, error) {
	if src.ListDns64groupResponseObject != nil {
		return json.Marshal(&src.ListDns64groupResponseObject)
	}

	if src.ArrayOfDns64group != nil {
		return json.Marshal(&src.ArrayOfDns64group)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDns64groupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDns64groupResponseObject != nil {
		return obj.ListDns64groupResponseObject
	}

	if obj.ArrayOfDns64group != nil {
		return obj.ArrayOfDns64group
	}

	// all schemas are nil
	return nil
}

type NullableListDns64groupResponse struct {
	value *ListDns64groupResponse
	isSet bool
}

func (v NullableListDns64groupResponse) Get() *ListDns64groupResponse {
	return v.value
}

func (v *NullableListDns64groupResponse) Set(val *ListDns64groupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDns64groupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDns64groupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDns64groupResponse(val *ListDns64groupResponse) *NullableListDns64groupResponse {
	return &NullableListDns64groupResponse{value: val, isSet: true}
}

func (v NullableListDns64groupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDns64groupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
