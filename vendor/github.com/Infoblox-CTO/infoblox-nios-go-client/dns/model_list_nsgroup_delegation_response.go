/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListNsgroupDelegationResponse - struct for ListNsgroupDelegationResponse
type ListNsgroupDelegationResponse struct {
	ListNsgroupDelegationResponseObject *ListNsgroupDelegationResponseObject
	ArrayOfNsgroupDelegation            *[]NsgroupDelegation
}

// ListNsgroupDelegationResponseObjectAsListNsgroupDelegationResponse is a convenience function that returns ListNsgroupDelegationResponseObject wrapped in ListNsgroupDelegationResponse
func ListNsgroupDelegationResponseObjectAsListNsgroupDelegationResponse(v *ListNsgroupDelegationResponseObject) ListNsgroupDelegationResponse {
	return ListNsgroupDelegationResponse{
		ListNsgroupDelegationResponseObject: v,
	}
}

// []NsgroupDelegationAsListNsgroupDelegationResponse is a convenience function that returns []NsgroupDelegation wrapped in ListNsgroupDelegationResponse
func ArrayOfNsgroupDelegationAsListNsgroupDelegationResponse(v *[]NsgroupDelegation) ListNsgroupDelegationResponse {
	return ListNsgroupDelegationResponse{
		ArrayOfNsgroupDelegation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNsgroupDelegationResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNsgroupDelegationResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNsgroupDelegationResponseObject)
	if err == nil {
		jsonListNsgroupDelegationResponseObject, _ := json.Marshal(dst.ListNsgroupDelegationResponseObject)
		if string(jsonListNsgroupDelegationResponseObject) == "{}" { // empty struct
			dst.ListNsgroupDelegationResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNsgroupDelegationResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNsgroupDelegation
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNsgroupDelegation)
	if err == nil {
		jsonArrayOfNsgroupDelegation, _ := json.Marshal(dst.ArrayOfNsgroupDelegation)
		if string(jsonArrayOfNsgroupDelegation) == "{}" { // empty struct
			dst.ArrayOfNsgroupDelegation = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNsgroupDelegation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNsgroupDelegationResponseObject = nil
		dst.ArrayOfNsgroupDelegation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNsgroupDelegationResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNsgroupDelegationResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNsgroupDelegationResponse) MarshalJSON() ([]byte, error) {
	if src.ListNsgroupDelegationResponseObject != nil {
		return json.Marshal(&src.ListNsgroupDelegationResponseObject)
	}

	if src.ArrayOfNsgroupDelegation != nil {
		return json.Marshal(&src.ArrayOfNsgroupDelegation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNsgroupDelegationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNsgroupDelegationResponseObject != nil {
		return obj.ListNsgroupDelegationResponseObject
	}

	if obj.ArrayOfNsgroupDelegation != nil {
		return obj.ArrayOfNsgroupDelegation
	}

	// all schemas are nil
	return nil
}

type NullableListNsgroupDelegationResponse struct {
	value *ListNsgroupDelegationResponse
	isSet bool
}

func (v NullableListNsgroupDelegationResponse) Get() *ListNsgroupDelegationResponse {
	return v.value
}

func (v *NullableListNsgroupDelegationResponse) Set(val *ListNsgroupDelegationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNsgroupDelegationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNsgroupDelegationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNsgroupDelegationResponse(val *ListNsgroupDelegationResponse) *NullableListNsgroupDelegationResponse {
	return &NullableListNsgroupDelegationResponse{value: val, isSet: true}
}

func (v NullableListNsgroupDelegationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNsgroupDelegationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
