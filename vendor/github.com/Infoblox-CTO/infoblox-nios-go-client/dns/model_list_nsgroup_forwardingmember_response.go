/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListNsgroupForwardingmemberResponse - struct for ListNsgroupForwardingmemberResponse
type ListNsgroupForwardingmemberResponse struct {
	ListNsgroupForwardingmemberResponseObject *ListNsgroupForwardingmemberResponseObject
	ArrayOfNsgroupForwardingmember            *[]NsgroupForwardingmember
}

// ListNsgroupForwardingmemberResponseObjectAsListNsgroupForwardingmemberResponse is a convenience function that returns ListNsgroupForwardingmemberResponseObject wrapped in ListNsgroupForwardingmemberResponse
func ListNsgroupForwardingmemberResponseObjectAsListNsgroupForwardingmemberResponse(v *ListNsgroupForwardingmemberResponseObject) ListNsgroupForwardingmemberResponse {
	return ListNsgroupForwardingmemberResponse{
		ListNsgroupForwardingmemberResponseObject: v,
	}
}

// []NsgroupForwardingmemberAsListNsgroupForwardingmemberResponse is a convenience function that returns []NsgroupForwardingmember wrapped in ListNsgroupForwardingmemberResponse
func ArrayOfNsgroupForwardingmemberAsListNsgroupForwardingmemberResponse(v *[]NsgroupForwardingmember) ListNsgroupForwardingmemberResponse {
	return ListNsgroupForwardingmemberResponse{
		ArrayOfNsgroupForwardingmember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNsgroupForwardingmemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNsgroupForwardingmemberResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNsgroupForwardingmemberResponseObject)
	if err == nil {
		jsonListNsgroupForwardingmemberResponseObject, _ := json.Marshal(dst.ListNsgroupForwardingmemberResponseObject)
		if string(jsonListNsgroupForwardingmemberResponseObject) == "{}" { // empty struct
			dst.ListNsgroupForwardingmemberResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNsgroupForwardingmemberResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNsgroupForwardingmember
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNsgroupForwardingmember)
	if err == nil {
		jsonArrayOfNsgroupForwardingmember, _ := json.Marshal(dst.ArrayOfNsgroupForwardingmember)
		if string(jsonArrayOfNsgroupForwardingmember) == "{}" { // empty struct
			dst.ArrayOfNsgroupForwardingmember = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNsgroupForwardingmember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNsgroupForwardingmemberResponseObject = nil
		dst.ArrayOfNsgroupForwardingmember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNsgroupForwardingmemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNsgroupForwardingmemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNsgroupForwardingmemberResponse) MarshalJSON() ([]byte, error) {
	if src.ListNsgroupForwardingmemberResponseObject != nil {
		return json.Marshal(&src.ListNsgroupForwardingmemberResponseObject)
	}

	if src.ArrayOfNsgroupForwardingmember != nil {
		return json.Marshal(&src.ArrayOfNsgroupForwardingmember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNsgroupForwardingmemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNsgroupForwardingmemberResponseObject != nil {
		return obj.ListNsgroupForwardingmemberResponseObject
	}

	if obj.ArrayOfNsgroupForwardingmember != nil {
		return obj.ArrayOfNsgroupForwardingmember
	}

	// all schemas are nil
	return nil
}

type NullableListNsgroupForwardingmemberResponse struct {
	value *ListNsgroupForwardingmemberResponse
	isSet bool
}

func (v NullableListNsgroupForwardingmemberResponse) Get() *ListNsgroupForwardingmemberResponse {
	return v.value
}

func (v *NullableListNsgroupForwardingmemberResponse) Set(val *ListNsgroupForwardingmemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNsgroupForwardingmemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNsgroupForwardingmemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNsgroupForwardingmemberResponse(val *ListNsgroupForwardingmemberResponse) *NullableListNsgroupForwardingmemberResponse {
	return &NullableListNsgroupForwardingmemberResponse{value: val, isSet: true}
}

func (v NullableListNsgroupForwardingmemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNsgroupForwardingmemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
