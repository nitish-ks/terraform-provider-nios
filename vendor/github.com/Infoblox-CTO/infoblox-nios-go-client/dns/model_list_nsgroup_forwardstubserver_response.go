/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListNsgroupForwardstubserverResponse - struct for ListNsgroupForwardstubserverResponse
type ListNsgroupForwardstubserverResponse struct {
	ListNsgroupForwardstubserverResponseObject *ListNsgroupForwardstubserverResponseObject
	ArrayOfNsgroupForwardstubserver            *[]NsgroupForwardstubserver
}

// ListNsgroupForwardstubserverResponseObjectAsListNsgroupForwardstubserverResponse is a convenience function that returns ListNsgroupForwardstubserverResponseObject wrapped in ListNsgroupForwardstubserverResponse
func ListNsgroupForwardstubserverResponseObjectAsListNsgroupForwardstubserverResponse(v *ListNsgroupForwardstubserverResponseObject) ListNsgroupForwardstubserverResponse {
	return ListNsgroupForwardstubserverResponse{
		ListNsgroupForwardstubserverResponseObject: v,
	}
}

// []NsgroupForwardstubserverAsListNsgroupForwardstubserverResponse is a convenience function that returns []NsgroupForwardstubserver wrapped in ListNsgroupForwardstubserverResponse
func ArrayOfNsgroupForwardstubserverAsListNsgroupForwardstubserverResponse(v *[]NsgroupForwardstubserver) ListNsgroupForwardstubserverResponse {
	return ListNsgroupForwardstubserverResponse{
		ArrayOfNsgroupForwardstubserver: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNsgroupForwardstubserverResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNsgroupForwardstubserverResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNsgroupForwardstubserverResponseObject)
	if err == nil {
		jsonListNsgroupForwardstubserverResponseObject, _ := json.Marshal(dst.ListNsgroupForwardstubserverResponseObject)
		if string(jsonListNsgroupForwardstubserverResponseObject) == "{}" { // empty struct
			dst.ListNsgroupForwardstubserverResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNsgroupForwardstubserverResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNsgroupForwardstubserver
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNsgroupForwardstubserver)
	if err == nil {
		jsonArrayOfNsgroupForwardstubserver, _ := json.Marshal(dst.ArrayOfNsgroupForwardstubserver)
		if string(jsonArrayOfNsgroupForwardstubserver) == "{}" { // empty struct
			dst.ArrayOfNsgroupForwardstubserver = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNsgroupForwardstubserver = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNsgroupForwardstubserverResponseObject = nil
		dst.ArrayOfNsgroupForwardstubserver = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNsgroupForwardstubserverResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNsgroupForwardstubserverResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNsgroupForwardstubserverResponse) MarshalJSON() ([]byte, error) {
	if src.ListNsgroupForwardstubserverResponseObject != nil {
		return json.Marshal(&src.ListNsgroupForwardstubserverResponseObject)
	}

	if src.ArrayOfNsgroupForwardstubserver != nil {
		return json.Marshal(&src.ArrayOfNsgroupForwardstubserver)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNsgroupForwardstubserverResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNsgroupForwardstubserverResponseObject != nil {
		return obj.ListNsgroupForwardstubserverResponseObject
	}

	if obj.ArrayOfNsgroupForwardstubserver != nil {
		return obj.ArrayOfNsgroupForwardstubserver
	}

	// all schemas are nil
	return nil
}

type NullableListNsgroupForwardstubserverResponse struct {
	value *ListNsgroupForwardstubserverResponse
	isSet bool
}

func (v NullableListNsgroupForwardstubserverResponse) Get() *ListNsgroupForwardstubserverResponse {
	return v.value
}

func (v *NullableListNsgroupForwardstubserverResponse) Set(val *ListNsgroupForwardstubserverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNsgroupForwardstubserverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNsgroupForwardstubserverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNsgroupForwardstubserverResponse(val *ListNsgroupForwardstubserverResponse) *NullableListNsgroupForwardstubserverResponse {
	return &NullableListNsgroupForwardstubserverResponse{value: val, isSet: true}
}

func (v NullableListNsgroupForwardstubserverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNsgroupForwardstubserverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
