/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListNsgroupStubmemberResponse - struct for ListNsgroupStubmemberResponse
type ListNsgroupStubmemberResponse struct {
	ListNsgroupStubmemberResponseObject *ListNsgroupStubmemberResponseObject
	ArrayOfNsgroupStubmember            *[]NsgroupStubmember
}

// ListNsgroupStubmemberResponseObjectAsListNsgroupStubmemberResponse is a convenience function that returns ListNsgroupStubmemberResponseObject wrapped in ListNsgroupStubmemberResponse
func ListNsgroupStubmemberResponseObjectAsListNsgroupStubmemberResponse(v *ListNsgroupStubmemberResponseObject) ListNsgroupStubmemberResponse {
	return ListNsgroupStubmemberResponse{
		ListNsgroupStubmemberResponseObject: v,
	}
}

// []NsgroupStubmemberAsListNsgroupStubmemberResponse is a convenience function that returns []NsgroupStubmember wrapped in ListNsgroupStubmemberResponse
func ArrayOfNsgroupStubmemberAsListNsgroupStubmemberResponse(v *[]NsgroupStubmember) ListNsgroupStubmemberResponse {
	return ListNsgroupStubmemberResponse{
		ArrayOfNsgroupStubmember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNsgroupStubmemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNsgroupStubmemberResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNsgroupStubmemberResponseObject)
	if err == nil {
		jsonListNsgroupStubmemberResponseObject, _ := json.Marshal(dst.ListNsgroupStubmemberResponseObject)
		if string(jsonListNsgroupStubmemberResponseObject) == "{}" { // empty struct
			dst.ListNsgroupStubmemberResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNsgroupStubmemberResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNsgroupStubmember
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNsgroupStubmember)
	if err == nil {
		jsonArrayOfNsgroupStubmember, _ := json.Marshal(dst.ArrayOfNsgroupStubmember)
		if string(jsonArrayOfNsgroupStubmember) == "{}" { // empty struct
			dst.ArrayOfNsgroupStubmember = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNsgroupStubmember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNsgroupStubmemberResponseObject = nil
		dst.ArrayOfNsgroupStubmember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNsgroupStubmemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNsgroupStubmemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNsgroupStubmemberResponse) MarshalJSON() ([]byte, error) {
	if src.ListNsgroupStubmemberResponseObject != nil {
		return json.Marshal(&src.ListNsgroupStubmemberResponseObject)
	}

	if src.ArrayOfNsgroupStubmember != nil {
		return json.Marshal(&src.ArrayOfNsgroupStubmember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNsgroupStubmemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNsgroupStubmemberResponseObject != nil {
		return obj.ListNsgroupStubmemberResponseObject
	}

	if obj.ArrayOfNsgroupStubmember != nil {
		return obj.ArrayOfNsgroupStubmember
	}

	// all schemas are nil
	return nil
}

type NullableListNsgroupStubmemberResponse struct {
	value *ListNsgroupStubmemberResponse
	isSet bool
}

func (v NullableListNsgroupStubmemberResponse) Get() *ListNsgroupStubmemberResponse {
	return v.value
}

func (v *NullableListNsgroupStubmemberResponse) Set(val *ListNsgroupStubmemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNsgroupStubmemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNsgroupStubmemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNsgroupStubmemberResponse(val *ListNsgroupStubmemberResponse) *NullableListNsgroupStubmemberResponse {
	return &NullableListNsgroupStubmemberResponse{value: val, isSet: true}
}

func (v NullableListNsgroupStubmemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNsgroupStubmemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
