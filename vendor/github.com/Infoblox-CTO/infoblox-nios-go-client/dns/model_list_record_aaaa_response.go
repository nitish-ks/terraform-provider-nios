/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordAaaaResponse - struct for ListRecordAaaaResponse
type ListRecordAaaaResponse struct {
	ListRecordAaaaResponseObject *ListRecordAaaaResponseObject
	ArrayOfRecordAaaa            *[]RecordAaaa
}

// ListRecordAaaaResponseObjectAsListRecordAaaaResponse is a convenience function that returns ListRecordAaaaResponseObject wrapped in ListRecordAaaaResponse
func ListRecordAaaaResponseObjectAsListRecordAaaaResponse(v *ListRecordAaaaResponseObject) ListRecordAaaaResponse {
	return ListRecordAaaaResponse{
		ListRecordAaaaResponseObject: v,
	}
}

// []RecordAaaaAsListRecordAaaaResponse is a convenience function that returns []RecordAaaa wrapped in ListRecordAaaaResponse
func ArrayOfRecordAaaaAsListRecordAaaaResponse(v *[]RecordAaaa) ListRecordAaaaResponse {
	return ListRecordAaaaResponse{
		ArrayOfRecordAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordAaaaResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordAaaaResponseObject)
	if err == nil {
		jsonListRecordAaaaResponseObject, _ := json.Marshal(dst.ListRecordAaaaResponseObject)
		if string(jsonListRecordAaaaResponseObject) == "{}" { // empty struct
			dst.ListRecordAaaaResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordAaaaResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordAaaa
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordAaaa)
	if err == nil {
		jsonArrayOfRecordAaaa, _ := json.Marshal(dst.ArrayOfRecordAaaa)
		if string(jsonArrayOfRecordAaaa) == "{}" { // empty struct
			dst.ArrayOfRecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordAaaaResponseObject = nil
		dst.ArrayOfRecordAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordAaaaResponseObject != nil {
		return json.Marshal(&src.ListRecordAaaaResponseObject)
	}

	if src.ArrayOfRecordAaaa != nil {
		return json.Marshal(&src.ArrayOfRecordAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordAaaaResponseObject != nil {
		return obj.ListRecordAaaaResponseObject
	}

	if obj.ArrayOfRecordAaaa != nil {
		return obj.ArrayOfRecordAaaa
	}

	// all schemas are nil
	return nil
}

type NullableListRecordAaaaResponse struct {
	value *ListRecordAaaaResponse
	isSet bool
}

func (v NullableListRecordAaaaResponse) Get() *ListRecordAaaaResponse {
	return v.value
}

func (v *NullableListRecordAaaaResponse) Set(val *ListRecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordAaaaResponse(val *ListRecordAaaaResponse) *NullableListRecordAaaaResponse {
	return &NullableListRecordAaaaResponse{value: val, isSet: true}
}

func (v NullableListRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
