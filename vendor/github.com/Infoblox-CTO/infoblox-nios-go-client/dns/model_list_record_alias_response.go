/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordAliasResponse - struct for ListRecordAliasResponse
type ListRecordAliasResponse struct {
	ListRecordAliasResponseObject *ListRecordAliasResponseObject
	ArrayOfRecordAlias            *[]RecordAlias
}

// ListRecordAliasResponseObjectAsListRecordAliasResponse is a convenience function that returns ListRecordAliasResponseObject wrapped in ListRecordAliasResponse
func ListRecordAliasResponseObjectAsListRecordAliasResponse(v *ListRecordAliasResponseObject) ListRecordAliasResponse {
	return ListRecordAliasResponse{
		ListRecordAliasResponseObject: v,
	}
}

// []RecordAliasAsListRecordAliasResponse is a convenience function that returns []RecordAlias wrapped in ListRecordAliasResponse
func ArrayOfRecordAliasAsListRecordAliasResponse(v *[]RecordAlias) ListRecordAliasResponse {
	return ListRecordAliasResponse{
		ArrayOfRecordAlias: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordAliasResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordAliasResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordAliasResponseObject)
	if err == nil {
		jsonListRecordAliasResponseObject, _ := json.Marshal(dst.ListRecordAliasResponseObject)
		if string(jsonListRecordAliasResponseObject) == "{}" { // empty struct
			dst.ListRecordAliasResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordAliasResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordAlias
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordAlias)
	if err == nil {
		jsonArrayOfRecordAlias, _ := json.Marshal(dst.ArrayOfRecordAlias)
		if string(jsonArrayOfRecordAlias) == "{}" { // empty struct
			dst.ArrayOfRecordAlias = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordAlias = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordAliasResponseObject = nil
		dst.ArrayOfRecordAlias = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordAliasResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordAliasResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordAliasResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordAliasResponseObject != nil {
		return json.Marshal(&src.ListRecordAliasResponseObject)
	}

	if src.ArrayOfRecordAlias != nil {
		return json.Marshal(&src.ArrayOfRecordAlias)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordAliasResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordAliasResponseObject != nil {
		return obj.ListRecordAliasResponseObject
	}

	if obj.ArrayOfRecordAlias != nil {
		return obj.ArrayOfRecordAlias
	}

	// all schemas are nil
	return nil
}

type NullableListRecordAliasResponse struct {
	value *ListRecordAliasResponse
	isSet bool
}

func (v NullableListRecordAliasResponse) Get() *ListRecordAliasResponse {
	return v.value
}

func (v *NullableListRecordAliasResponse) Set(val *ListRecordAliasResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordAliasResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordAliasResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordAliasResponse(val *ListRecordAliasResponse) *NullableListRecordAliasResponse {
	return &NullableListRecordAliasResponse{value: val, isSet: true}
}

func (v NullableListRecordAliasResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordAliasResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
