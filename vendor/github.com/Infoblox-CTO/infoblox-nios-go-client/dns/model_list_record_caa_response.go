/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordCaaResponse - struct for ListRecordCaaResponse
type ListRecordCaaResponse struct {
	ListRecordCaaResponseObject *ListRecordCaaResponseObject
	ArrayOfRecordCaa            *[]RecordCaa
}

// ListRecordCaaResponseObjectAsListRecordCaaResponse is a convenience function that returns ListRecordCaaResponseObject wrapped in ListRecordCaaResponse
func ListRecordCaaResponseObjectAsListRecordCaaResponse(v *ListRecordCaaResponseObject) ListRecordCaaResponse {
	return ListRecordCaaResponse{
		ListRecordCaaResponseObject: v,
	}
}

// []RecordCaaAsListRecordCaaResponse is a convenience function that returns []RecordCaa wrapped in ListRecordCaaResponse
func ArrayOfRecordCaaAsListRecordCaaResponse(v *[]RecordCaa) ListRecordCaaResponse {
	return ListRecordCaaResponse{
		ArrayOfRecordCaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordCaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordCaaResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordCaaResponseObject)
	if err == nil {
		jsonListRecordCaaResponseObject, _ := json.Marshal(dst.ListRecordCaaResponseObject)
		if string(jsonListRecordCaaResponseObject) == "{}" { // empty struct
			dst.ListRecordCaaResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordCaaResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordCaa
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordCaa)
	if err == nil {
		jsonArrayOfRecordCaa, _ := json.Marshal(dst.ArrayOfRecordCaa)
		if string(jsonArrayOfRecordCaa) == "{}" { // empty struct
			dst.ArrayOfRecordCaa = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordCaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordCaaResponseObject = nil
		dst.ArrayOfRecordCaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordCaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordCaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordCaaResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordCaaResponseObject != nil {
		return json.Marshal(&src.ListRecordCaaResponseObject)
	}

	if src.ArrayOfRecordCaa != nil {
		return json.Marshal(&src.ArrayOfRecordCaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordCaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordCaaResponseObject != nil {
		return obj.ListRecordCaaResponseObject
	}

	if obj.ArrayOfRecordCaa != nil {
		return obj.ArrayOfRecordCaa
	}

	// all schemas are nil
	return nil
}

type NullableListRecordCaaResponse struct {
	value *ListRecordCaaResponse
	isSet bool
}

func (v NullableListRecordCaaResponse) Get() *ListRecordCaaResponse {
	return v.value
}

func (v *NullableListRecordCaaResponse) Set(val *ListRecordCaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordCaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordCaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordCaaResponse(val *ListRecordCaaResponse) *NullableListRecordCaaResponse {
	return &NullableListRecordCaaResponse{value: val, isSet: true}
}

func (v NullableListRecordCaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordCaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
