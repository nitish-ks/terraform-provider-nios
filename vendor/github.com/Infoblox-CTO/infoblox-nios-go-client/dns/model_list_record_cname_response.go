/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordCnameResponse - struct for ListRecordCnameResponse
type ListRecordCnameResponse struct {
	ListRecordCnameResponseObject *ListRecordCnameResponseObject
	ArrayOfRecordCname            *[]RecordCname
}

// ListRecordCnameResponseObjectAsListRecordCnameResponse is a convenience function that returns ListRecordCnameResponseObject wrapped in ListRecordCnameResponse
func ListRecordCnameResponseObjectAsListRecordCnameResponse(v *ListRecordCnameResponseObject) ListRecordCnameResponse {
	return ListRecordCnameResponse{
		ListRecordCnameResponseObject: v,
	}
}

// []RecordCnameAsListRecordCnameResponse is a convenience function that returns []RecordCname wrapped in ListRecordCnameResponse
func ArrayOfRecordCnameAsListRecordCnameResponse(v *[]RecordCname) ListRecordCnameResponse {
	return ListRecordCnameResponse{
		ArrayOfRecordCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordCnameResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordCnameResponseObject)
	if err == nil {
		jsonListRecordCnameResponseObject, _ := json.Marshal(dst.ListRecordCnameResponseObject)
		if string(jsonListRecordCnameResponseObject) == "{}" { // empty struct
			dst.ListRecordCnameResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordCnameResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordCname
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordCname)
	if err == nil {
		jsonArrayOfRecordCname, _ := json.Marshal(dst.ArrayOfRecordCname)
		if string(jsonArrayOfRecordCname) == "{}" { // empty struct
			dst.ArrayOfRecordCname = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordCnameResponseObject = nil
		dst.ArrayOfRecordCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordCnameResponseObject != nil {
		return json.Marshal(&src.ListRecordCnameResponseObject)
	}

	if src.ArrayOfRecordCname != nil {
		return json.Marshal(&src.ArrayOfRecordCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordCnameResponseObject != nil {
		return obj.ListRecordCnameResponseObject
	}

	if obj.ArrayOfRecordCname != nil {
		return obj.ArrayOfRecordCname
	}

	// all schemas are nil
	return nil
}

type NullableListRecordCnameResponse struct {
	value *ListRecordCnameResponse
	isSet bool
}

func (v NullableListRecordCnameResponse) Get() *ListRecordCnameResponse {
	return v.value
}

func (v *NullableListRecordCnameResponse) Set(val *ListRecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordCnameResponse(val *ListRecordCnameResponse) *NullableListRecordCnameResponse {
	return &NullableListRecordCnameResponse{value: val, isSet: true}
}

func (v NullableListRecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
