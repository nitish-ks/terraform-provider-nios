/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordDhcidResponse - struct for ListRecordDhcidResponse
type ListRecordDhcidResponse struct {
	ListRecordDhcidResponseObject *ListRecordDhcidResponseObject
	ArrayOfRecordDhcid            *[]RecordDhcid
}

// ListRecordDhcidResponseObjectAsListRecordDhcidResponse is a convenience function that returns ListRecordDhcidResponseObject wrapped in ListRecordDhcidResponse
func ListRecordDhcidResponseObjectAsListRecordDhcidResponse(v *ListRecordDhcidResponseObject) ListRecordDhcidResponse {
	return ListRecordDhcidResponse{
		ListRecordDhcidResponseObject: v,
	}
}

// []RecordDhcidAsListRecordDhcidResponse is a convenience function that returns []RecordDhcid wrapped in ListRecordDhcidResponse
func ArrayOfRecordDhcidAsListRecordDhcidResponse(v *[]RecordDhcid) ListRecordDhcidResponse {
	return ListRecordDhcidResponse{
		ArrayOfRecordDhcid: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordDhcidResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordDhcidResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordDhcidResponseObject)
	if err == nil {
		jsonListRecordDhcidResponseObject, _ := json.Marshal(dst.ListRecordDhcidResponseObject)
		if string(jsonListRecordDhcidResponseObject) == "{}" { // empty struct
			dst.ListRecordDhcidResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordDhcidResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordDhcid
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordDhcid)
	if err == nil {
		jsonArrayOfRecordDhcid, _ := json.Marshal(dst.ArrayOfRecordDhcid)
		if string(jsonArrayOfRecordDhcid) == "{}" { // empty struct
			dst.ArrayOfRecordDhcid = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordDhcid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordDhcidResponseObject = nil
		dst.ArrayOfRecordDhcid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordDhcidResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordDhcidResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordDhcidResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordDhcidResponseObject != nil {
		return json.Marshal(&src.ListRecordDhcidResponseObject)
	}

	if src.ArrayOfRecordDhcid != nil {
		return json.Marshal(&src.ArrayOfRecordDhcid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordDhcidResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordDhcidResponseObject != nil {
		return obj.ListRecordDhcidResponseObject
	}

	if obj.ArrayOfRecordDhcid != nil {
		return obj.ArrayOfRecordDhcid
	}

	// all schemas are nil
	return nil
}

type NullableListRecordDhcidResponse struct {
	value *ListRecordDhcidResponse
	isSet bool
}

func (v NullableListRecordDhcidResponse) Get() *ListRecordDhcidResponse {
	return v.value
}

func (v *NullableListRecordDhcidResponse) Set(val *ListRecordDhcidResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordDhcidResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordDhcidResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordDhcidResponse(val *ListRecordDhcidResponse) *NullableListRecordDhcidResponse {
	return &NullableListRecordDhcidResponse{value: val, isSet: true}
}

func (v NullableListRecordDhcidResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordDhcidResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
