/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordDnameResponse - struct for ListRecordDnameResponse
type ListRecordDnameResponse struct {
	ListRecordDnameResponseObject *ListRecordDnameResponseObject
	ArrayOfRecordDname            *[]RecordDname
}

// ListRecordDnameResponseObjectAsListRecordDnameResponse is a convenience function that returns ListRecordDnameResponseObject wrapped in ListRecordDnameResponse
func ListRecordDnameResponseObjectAsListRecordDnameResponse(v *ListRecordDnameResponseObject) ListRecordDnameResponse {
	return ListRecordDnameResponse{
		ListRecordDnameResponseObject: v,
	}
}

// []RecordDnameAsListRecordDnameResponse is a convenience function that returns []RecordDname wrapped in ListRecordDnameResponse
func ArrayOfRecordDnameAsListRecordDnameResponse(v *[]RecordDname) ListRecordDnameResponse {
	return ListRecordDnameResponse{
		ArrayOfRecordDname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordDnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordDnameResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordDnameResponseObject)
	if err == nil {
		jsonListRecordDnameResponseObject, _ := json.Marshal(dst.ListRecordDnameResponseObject)
		if string(jsonListRecordDnameResponseObject) == "{}" { // empty struct
			dst.ListRecordDnameResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordDnameResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordDname
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordDname)
	if err == nil {
		jsonArrayOfRecordDname, _ := json.Marshal(dst.ArrayOfRecordDname)
		if string(jsonArrayOfRecordDname) == "{}" { // empty struct
			dst.ArrayOfRecordDname = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordDname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordDnameResponseObject = nil
		dst.ArrayOfRecordDname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordDnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordDnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordDnameResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordDnameResponseObject != nil {
		return json.Marshal(&src.ListRecordDnameResponseObject)
	}

	if src.ArrayOfRecordDname != nil {
		return json.Marshal(&src.ArrayOfRecordDname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordDnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordDnameResponseObject != nil {
		return obj.ListRecordDnameResponseObject
	}

	if obj.ArrayOfRecordDname != nil {
		return obj.ArrayOfRecordDname
	}

	// all schemas are nil
	return nil
}

type NullableListRecordDnameResponse struct {
	value *ListRecordDnameResponse
	isSet bool
}

func (v NullableListRecordDnameResponse) Get() *ListRecordDnameResponse {
	return v.value
}

func (v *NullableListRecordDnameResponse) Set(val *ListRecordDnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordDnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordDnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordDnameResponse(val *ListRecordDnameResponse) *NullableListRecordDnameResponse {
	return &NullableListRecordDnameResponse{value: val, isSet: true}
}

func (v NullableListRecordDnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordDnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
