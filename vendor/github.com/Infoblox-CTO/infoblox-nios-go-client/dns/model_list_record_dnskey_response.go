/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordDnskeyResponse - struct for ListRecordDnskeyResponse
type ListRecordDnskeyResponse struct {
	ListRecordDnskeyResponseObject *ListRecordDnskeyResponseObject
	ArrayOfRecordDnskey            *[]RecordDnskey
}

// ListRecordDnskeyResponseObjectAsListRecordDnskeyResponse is a convenience function that returns ListRecordDnskeyResponseObject wrapped in ListRecordDnskeyResponse
func ListRecordDnskeyResponseObjectAsListRecordDnskeyResponse(v *ListRecordDnskeyResponseObject) ListRecordDnskeyResponse {
	return ListRecordDnskeyResponse{
		ListRecordDnskeyResponseObject: v,
	}
}

// []RecordDnskeyAsListRecordDnskeyResponse is a convenience function that returns []RecordDnskey wrapped in ListRecordDnskeyResponse
func ArrayOfRecordDnskeyAsListRecordDnskeyResponse(v *[]RecordDnskey) ListRecordDnskeyResponse {
	return ListRecordDnskeyResponse{
		ArrayOfRecordDnskey: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordDnskeyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordDnskeyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordDnskeyResponseObject)
	if err == nil {
		jsonListRecordDnskeyResponseObject, _ := json.Marshal(dst.ListRecordDnskeyResponseObject)
		if string(jsonListRecordDnskeyResponseObject) == "{}" { // empty struct
			dst.ListRecordDnskeyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordDnskeyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordDnskey
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordDnskey)
	if err == nil {
		jsonArrayOfRecordDnskey, _ := json.Marshal(dst.ArrayOfRecordDnskey)
		if string(jsonArrayOfRecordDnskey) == "{}" { // empty struct
			dst.ArrayOfRecordDnskey = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordDnskey = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordDnskeyResponseObject = nil
		dst.ArrayOfRecordDnskey = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordDnskeyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordDnskeyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordDnskeyResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordDnskeyResponseObject != nil {
		return json.Marshal(&src.ListRecordDnskeyResponseObject)
	}

	if src.ArrayOfRecordDnskey != nil {
		return json.Marshal(&src.ArrayOfRecordDnskey)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordDnskeyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordDnskeyResponseObject != nil {
		return obj.ListRecordDnskeyResponseObject
	}

	if obj.ArrayOfRecordDnskey != nil {
		return obj.ArrayOfRecordDnskey
	}

	// all schemas are nil
	return nil
}

type NullableListRecordDnskeyResponse struct {
	value *ListRecordDnskeyResponse
	isSet bool
}

func (v NullableListRecordDnskeyResponse) Get() *ListRecordDnskeyResponse {
	return v.value
}

func (v *NullableListRecordDnskeyResponse) Set(val *ListRecordDnskeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordDnskeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordDnskeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordDnskeyResponse(val *ListRecordDnskeyResponse) *NullableListRecordDnskeyResponse {
	return &NullableListRecordDnskeyResponse{value: val, isSet: true}
}

func (v NullableListRecordDnskeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordDnskeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
