/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordDsResponse - struct for ListRecordDsResponse
type ListRecordDsResponse struct {
	ListRecordDsResponseObject *ListRecordDsResponseObject
	ArrayOfRecordDs            *[]RecordDs
}

// ListRecordDsResponseObjectAsListRecordDsResponse is a convenience function that returns ListRecordDsResponseObject wrapped in ListRecordDsResponse
func ListRecordDsResponseObjectAsListRecordDsResponse(v *ListRecordDsResponseObject) ListRecordDsResponse {
	return ListRecordDsResponse{
		ListRecordDsResponseObject: v,
	}
}

// []RecordDsAsListRecordDsResponse is a convenience function that returns []RecordDs wrapped in ListRecordDsResponse
func ArrayOfRecordDsAsListRecordDsResponse(v *[]RecordDs) ListRecordDsResponse {
	return ListRecordDsResponse{
		ArrayOfRecordDs: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordDsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordDsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordDsResponseObject)
	if err == nil {
		jsonListRecordDsResponseObject, _ := json.Marshal(dst.ListRecordDsResponseObject)
		if string(jsonListRecordDsResponseObject) == "{}" { // empty struct
			dst.ListRecordDsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordDsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordDs
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordDs)
	if err == nil {
		jsonArrayOfRecordDs, _ := json.Marshal(dst.ArrayOfRecordDs)
		if string(jsonArrayOfRecordDs) == "{}" { // empty struct
			dst.ArrayOfRecordDs = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordDs = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordDsResponseObject = nil
		dst.ArrayOfRecordDs = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordDsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordDsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordDsResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordDsResponseObject != nil {
		return json.Marshal(&src.ListRecordDsResponseObject)
	}

	if src.ArrayOfRecordDs != nil {
		return json.Marshal(&src.ArrayOfRecordDs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordDsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordDsResponseObject != nil {
		return obj.ListRecordDsResponseObject
	}

	if obj.ArrayOfRecordDs != nil {
		return obj.ArrayOfRecordDs
	}

	// all schemas are nil
	return nil
}

type NullableListRecordDsResponse struct {
	value *ListRecordDsResponse
	isSet bool
}

func (v NullableListRecordDsResponse) Get() *ListRecordDsResponse {
	return v.value
}

func (v *NullableListRecordDsResponse) Set(val *ListRecordDsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordDsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordDsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordDsResponse(val *ListRecordDsResponse) *NullableListRecordDsResponse {
	return &NullableListRecordDsResponse{value: val, isSet: true}
}

func (v NullableListRecordDsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordDsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
