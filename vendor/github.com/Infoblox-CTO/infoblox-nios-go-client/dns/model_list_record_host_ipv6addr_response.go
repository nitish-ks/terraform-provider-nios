/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordHostIpv6addrResponse - struct for ListRecordHostIpv6addrResponse
type ListRecordHostIpv6addrResponse struct {
	ListRecordHostIpv6addrResponseObject *ListRecordHostIpv6addrResponseObject
	ArrayOfRecordHostIpv6addr            *[]RecordHostIpv6addr
}

// ListRecordHostIpv6addrResponseObjectAsListRecordHostIpv6addrResponse is a convenience function that returns ListRecordHostIpv6addrResponseObject wrapped in ListRecordHostIpv6addrResponse
func ListRecordHostIpv6addrResponseObjectAsListRecordHostIpv6addrResponse(v *ListRecordHostIpv6addrResponseObject) ListRecordHostIpv6addrResponse {
	return ListRecordHostIpv6addrResponse{
		ListRecordHostIpv6addrResponseObject: v,
	}
}

// []RecordHostIpv6addrAsListRecordHostIpv6addrResponse is a convenience function that returns []RecordHostIpv6addr wrapped in ListRecordHostIpv6addrResponse
func ArrayOfRecordHostIpv6addrAsListRecordHostIpv6addrResponse(v *[]RecordHostIpv6addr) ListRecordHostIpv6addrResponse {
	return ListRecordHostIpv6addrResponse{
		ArrayOfRecordHostIpv6addr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordHostIpv6addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordHostIpv6addrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordHostIpv6addrResponseObject)
	if err == nil {
		jsonListRecordHostIpv6addrResponseObject, _ := json.Marshal(dst.ListRecordHostIpv6addrResponseObject)
		if string(jsonListRecordHostIpv6addrResponseObject) == "{}" { // empty struct
			dst.ListRecordHostIpv6addrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordHostIpv6addrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordHostIpv6addr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordHostIpv6addr)
	if err == nil {
		jsonArrayOfRecordHostIpv6addr, _ := json.Marshal(dst.ArrayOfRecordHostIpv6addr)
		if string(jsonArrayOfRecordHostIpv6addr) == "{}" { // empty struct
			dst.ArrayOfRecordHostIpv6addr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordHostIpv6addr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordHostIpv6addrResponseObject = nil
		dst.ArrayOfRecordHostIpv6addr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordHostIpv6addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordHostIpv6addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordHostIpv6addrResponseObject != nil {
		return json.Marshal(&src.ListRecordHostIpv6addrResponseObject)
	}

	if src.ArrayOfRecordHostIpv6addr != nil {
		return json.Marshal(&src.ArrayOfRecordHostIpv6addr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordHostIpv6addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordHostIpv6addrResponseObject != nil {
		return obj.ListRecordHostIpv6addrResponseObject
	}

	if obj.ArrayOfRecordHostIpv6addr != nil {
		return obj.ArrayOfRecordHostIpv6addr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordHostIpv6addrResponse struct {
	value *ListRecordHostIpv6addrResponse
	isSet bool
}

func (v NullableListRecordHostIpv6addrResponse) Get() *ListRecordHostIpv6addrResponse {
	return v.value
}

func (v *NullableListRecordHostIpv6addrResponse) Set(val *ListRecordHostIpv6addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordHostIpv6addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordHostIpv6addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordHostIpv6addrResponse(val *ListRecordHostIpv6addrResponse) *NullableListRecordHostIpv6addrResponse {
	return &NullableListRecordHostIpv6addrResponse{value: val, isSet: true}
}

func (v NullableListRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordHostIpv6addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
