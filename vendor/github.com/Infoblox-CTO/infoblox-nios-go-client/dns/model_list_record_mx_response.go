/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordMxResponse - struct for ListRecordMxResponse
type ListRecordMxResponse struct {
	ListRecordMxResponseObject *ListRecordMxResponseObject
	ArrayOfRecordMx            *[]RecordMx
}

// ListRecordMxResponseObjectAsListRecordMxResponse is a convenience function that returns ListRecordMxResponseObject wrapped in ListRecordMxResponse
func ListRecordMxResponseObjectAsListRecordMxResponse(v *ListRecordMxResponseObject) ListRecordMxResponse {
	return ListRecordMxResponse{
		ListRecordMxResponseObject: v,
	}
}

// []RecordMxAsListRecordMxResponse is a convenience function that returns []RecordMx wrapped in ListRecordMxResponse
func ArrayOfRecordMxAsListRecordMxResponse(v *[]RecordMx) ListRecordMxResponse {
	return ListRecordMxResponse{
		ArrayOfRecordMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordMxResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordMxResponseObject)
	if err == nil {
		jsonListRecordMxResponseObject, _ := json.Marshal(dst.ListRecordMxResponseObject)
		if string(jsonListRecordMxResponseObject) == "{}" { // empty struct
			dst.ListRecordMxResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordMxResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordMx
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordMx)
	if err == nil {
		jsonArrayOfRecordMx, _ := json.Marshal(dst.ArrayOfRecordMx)
		if string(jsonArrayOfRecordMx) == "{}" { // empty struct
			dst.ArrayOfRecordMx = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordMxResponseObject = nil
		dst.ArrayOfRecordMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordMxResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordMxResponseObject != nil {
		return json.Marshal(&src.ListRecordMxResponseObject)
	}

	if src.ArrayOfRecordMx != nil {
		return json.Marshal(&src.ArrayOfRecordMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordMxResponseObject != nil {
		return obj.ListRecordMxResponseObject
	}

	if obj.ArrayOfRecordMx != nil {
		return obj.ArrayOfRecordMx
	}

	// all schemas are nil
	return nil
}

type NullableListRecordMxResponse struct {
	value *ListRecordMxResponse
	isSet bool
}

func (v NullableListRecordMxResponse) Get() *ListRecordMxResponse {
	return v.value
}

func (v *NullableListRecordMxResponse) Set(val *ListRecordMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordMxResponse(val *ListRecordMxResponse) *NullableListRecordMxResponse {
	return &NullableListRecordMxResponse{value: val, isSet: true}
}

func (v NullableListRecordMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
