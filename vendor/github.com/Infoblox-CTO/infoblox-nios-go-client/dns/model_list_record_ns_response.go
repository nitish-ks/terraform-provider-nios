/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordNsResponse - struct for ListRecordNsResponse
type ListRecordNsResponse struct {
	ListRecordNsResponseObject *ListRecordNsResponseObject
	ArrayOfRecordNs            *[]RecordNs
}

// ListRecordNsResponseObjectAsListRecordNsResponse is a convenience function that returns ListRecordNsResponseObject wrapped in ListRecordNsResponse
func ListRecordNsResponseObjectAsListRecordNsResponse(v *ListRecordNsResponseObject) ListRecordNsResponse {
	return ListRecordNsResponse{
		ListRecordNsResponseObject: v,
	}
}

// []RecordNsAsListRecordNsResponse is a convenience function that returns []RecordNs wrapped in ListRecordNsResponse
func ArrayOfRecordNsAsListRecordNsResponse(v *[]RecordNs) ListRecordNsResponse {
	return ListRecordNsResponse{
		ArrayOfRecordNs: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordNsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordNsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordNsResponseObject)
	if err == nil {
		jsonListRecordNsResponseObject, _ := json.Marshal(dst.ListRecordNsResponseObject)
		if string(jsonListRecordNsResponseObject) == "{}" { // empty struct
			dst.ListRecordNsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordNsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordNs
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordNs)
	if err == nil {
		jsonArrayOfRecordNs, _ := json.Marshal(dst.ArrayOfRecordNs)
		if string(jsonArrayOfRecordNs) == "{}" { // empty struct
			dst.ArrayOfRecordNs = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordNs = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordNsResponseObject = nil
		dst.ArrayOfRecordNs = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordNsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordNsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordNsResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordNsResponseObject != nil {
		return json.Marshal(&src.ListRecordNsResponseObject)
	}

	if src.ArrayOfRecordNs != nil {
		return json.Marshal(&src.ArrayOfRecordNs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordNsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordNsResponseObject != nil {
		return obj.ListRecordNsResponseObject
	}

	if obj.ArrayOfRecordNs != nil {
		return obj.ArrayOfRecordNs
	}

	// all schemas are nil
	return nil
}

type NullableListRecordNsResponse struct {
	value *ListRecordNsResponse
	isSet bool
}

func (v NullableListRecordNsResponse) Get() *ListRecordNsResponse {
	return v.value
}

func (v *NullableListRecordNsResponse) Set(val *ListRecordNsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordNsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordNsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordNsResponse(val *ListRecordNsResponse) *NullableListRecordNsResponse {
	return &NullableListRecordNsResponse{value: val, isSet: true}
}

func (v NullableListRecordNsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordNsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
