/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordNsecResponse - struct for ListRecordNsecResponse
type ListRecordNsecResponse struct {
	ListRecordNsecResponseObject *ListRecordNsecResponseObject
	ArrayOfRecordNsec            *[]RecordNsec
}

// ListRecordNsecResponseObjectAsListRecordNsecResponse is a convenience function that returns ListRecordNsecResponseObject wrapped in ListRecordNsecResponse
func ListRecordNsecResponseObjectAsListRecordNsecResponse(v *ListRecordNsecResponseObject) ListRecordNsecResponse {
	return ListRecordNsecResponse{
		ListRecordNsecResponseObject: v,
	}
}

// []RecordNsecAsListRecordNsecResponse is a convenience function that returns []RecordNsec wrapped in ListRecordNsecResponse
func ArrayOfRecordNsecAsListRecordNsecResponse(v *[]RecordNsec) ListRecordNsecResponse {
	return ListRecordNsecResponse{
		ArrayOfRecordNsec: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordNsecResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordNsecResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordNsecResponseObject)
	if err == nil {
		jsonListRecordNsecResponseObject, _ := json.Marshal(dst.ListRecordNsecResponseObject)
		if string(jsonListRecordNsecResponseObject) == "{}" { // empty struct
			dst.ListRecordNsecResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordNsecResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordNsec
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordNsec)
	if err == nil {
		jsonArrayOfRecordNsec, _ := json.Marshal(dst.ArrayOfRecordNsec)
		if string(jsonArrayOfRecordNsec) == "{}" { // empty struct
			dst.ArrayOfRecordNsec = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordNsec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordNsecResponseObject = nil
		dst.ArrayOfRecordNsec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordNsecResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordNsecResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordNsecResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordNsecResponseObject != nil {
		return json.Marshal(&src.ListRecordNsecResponseObject)
	}

	if src.ArrayOfRecordNsec != nil {
		return json.Marshal(&src.ArrayOfRecordNsec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordNsecResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordNsecResponseObject != nil {
		return obj.ListRecordNsecResponseObject
	}

	if obj.ArrayOfRecordNsec != nil {
		return obj.ArrayOfRecordNsec
	}

	// all schemas are nil
	return nil
}

type NullableListRecordNsecResponse struct {
	value *ListRecordNsecResponse
	isSet bool
}

func (v NullableListRecordNsecResponse) Get() *ListRecordNsecResponse {
	return v.value
}

func (v *NullableListRecordNsecResponse) Set(val *ListRecordNsecResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordNsecResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordNsecResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordNsecResponse(val *ListRecordNsecResponse) *NullableListRecordNsecResponse {
	return &NullableListRecordNsecResponse{value: val, isSet: true}
}

func (v NullableListRecordNsecResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordNsecResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
