/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordPtrResponse - struct for ListRecordPtrResponse
type ListRecordPtrResponse struct {
	ListRecordPtrResponseObject *ListRecordPtrResponseObject
	ArrayOfRecordPtr            *[]RecordPtr
}

// ListRecordPtrResponseObjectAsListRecordPtrResponse is a convenience function that returns ListRecordPtrResponseObject wrapped in ListRecordPtrResponse
func ListRecordPtrResponseObjectAsListRecordPtrResponse(v *ListRecordPtrResponseObject) ListRecordPtrResponse {
	return ListRecordPtrResponse{
		ListRecordPtrResponseObject: v,
	}
}

// []RecordPtrAsListRecordPtrResponse is a convenience function that returns []RecordPtr wrapped in ListRecordPtrResponse
func ArrayOfRecordPtrAsListRecordPtrResponse(v *[]RecordPtr) ListRecordPtrResponse {
	return ListRecordPtrResponse{
		ArrayOfRecordPtr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordPtrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordPtrResponseObject)
	if err == nil {
		jsonListRecordPtrResponseObject, _ := json.Marshal(dst.ListRecordPtrResponseObject)
		if string(jsonListRecordPtrResponseObject) == "{}" { // empty struct
			dst.ListRecordPtrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordPtrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordPtr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordPtr)
	if err == nil {
		jsonArrayOfRecordPtr, _ := json.Marshal(dst.ArrayOfRecordPtr)
		if string(jsonArrayOfRecordPtr) == "{}" { // empty struct
			dst.ArrayOfRecordPtr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordPtr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordPtrResponseObject = nil
		dst.ArrayOfRecordPtr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordPtrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordPtrResponseObject != nil {
		return json.Marshal(&src.ListRecordPtrResponseObject)
	}

	if src.ArrayOfRecordPtr != nil {
		return json.Marshal(&src.ArrayOfRecordPtr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordPtrResponseObject != nil {
		return obj.ListRecordPtrResponseObject
	}

	if obj.ArrayOfRecordPtr != nil {
		return obj.ArrayOfRecordPtr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordPtrResponse struct {
	value *ListRecordPtrResponse
	isSet bool
}

func (v NullableListRecordPtrResponse) Get() *ListRecordPtrResponse {
	return v.value
}

func (v *NullableListRecordPtrResponse) Set(val *ListRecordPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordPtrResponse(val *ListRecordPtrResponse) *NullableListRecordPtrResponse {
	return &NullableListRecordPtrResponse{value: val, isSet: true}
}

func (v NullableListRecordPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
