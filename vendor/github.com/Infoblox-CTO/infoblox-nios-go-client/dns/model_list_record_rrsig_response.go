/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordRrsigResponse - struct for ListRecordRrsigResponse
type ListRecordRrsigResponse struct {
	ListRecordRrsigResponseObject *ListRecordRrsigResponseObject
	ArrayOfRecordRrsig            *[]RecordRrsig
}

// ListRecordRrsigResponseObjectAsListRecordRrsigResponse is a convenience function that returns ListRecordRrsigResponseObject wrapped in ListRecordRrsigResponse
func ListRecordRrsigResponseObjectAsListRecordRrsigResponse(v *ListRecordRrsigResponseObject) ListRecordRrsigResponse {
	return ListRecordRrsigResponse{
		ListRecordRrsigResponseObject: v,
	}
}

// []RecordRrsigAsListRecordRrsigResponse is a convenience function that returns []RecordRrsig wrapped in ListRecordRrsigResponse
func ArrayOfRecordRrsigAsListRecordRrsigResponse(v *[]RecordRrsig) ListRecordRrsigResponse {
	return ListRecordRrsigResponse{
		ArrayOfRecordRrsig: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRrsigResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRrsigResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRrsigResponseObject)
	if err == nil {
		jsonListRecordRrsigResponseObject, _ := json.Marshal(dst.ListRecordRrsigResponseObject)
		if string(jsonListRecordRrsigResponseObject) == "{}" { // empty struct
			dst.ListRecordRrsigResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRrsigResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRrsig
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRrsig)
	if err == nil {
		jsonArrayOfRecordRrsig, _ := json.Marshal(dst.ArrayOfRecordRrsig)
		if string(jsonArrayOfRecordRrsig) == "{}" { // empty struct
			dst.ArrayOfRecordRrsig = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRrsig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRrsigResponseObject = nil
		dst.ArrayOfRecordRrsig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRrsigResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRrsigResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRrsigResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRrsigResponseObject != nil {
		return json.Marshal(&src.ListRecordRrsigResponseObject)
	}

	if src.ArrayOfRecordRrsig != nil {
		return json.Marshal(&src.ArrayOfRecordRrsig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRrsigResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRrsigResponseObject != nil {
		return obj.ListRecordRrsigResponseObject
	}

	if obj.ArrayOfRecordRrsig != nil {
		return obj.ArrayOfRecordRrsig
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRrsigResponse struct {
	value *ListRecordRrsigResponse
	isSet bool
}

func (v NullableListRecordRrsigResponse) Get() *ListRecordRrsigResponse {
	return v.value
}

func (v *NullableListRecordRrsigResponse) Set(val *ListRecordRrsigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRrsigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRrsigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRrsigResponse(val *ListRecordRrsigResponse) *NullableListRecordRrsigResponse {
	return &NullableListRecordRrsigResponse{value: val, isSet: true}
}

func (v NullableListRecordRrsigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRrsigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
