/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordSrvResponse - struct for ListRecordSrvResponse
type ListRecordSrvResponse struct {
	ListRecordSrvResponseObject *ListRecordSrvResponseObject
	ArrayOfRecordSrv            *[]RecordSrv
}

// ListRecordSrvResponseObjectAsListRecordSrvResponse is a convenience function that returns ListRecordSrvResponseObject wrapped in ListRecordSrvResponse
func ListRecordSrvResponseObjectAsListRecordSrvResponse(v *ListRecordSrvResponseObject) ListRecordSrvResponse {
	return ListRecordSrvResponse{
		ListRecordSrvResponseObject: v,
	}
}

// []RecordSrvAsListRecordSrvResponse is a convenience function that returns []RecordSrv wrapped in ListRecordSrvResponse
func ArrayOfRecordSrvAsListRecordSrvResponse(v *[]RecordSrv) ListRecordSrvResponse {
	return ListRecordSrvResponse{
		ArrayOfRecordSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordSrvResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordSrvResponseObject)
	if err == nil {
		jsonListRecordSrvResponseObject, _ := json.Marshal(dst.ListRecordSrvResponseObject)
		if string(jsonListRecordSrvResponseObject) == "{}" { // empty struct
			dst.ListRecordSrvResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordSrvResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordSrv
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordSrv)
	if err == nil {
		jsonArrayOfRecordSrv, _ := json.Marshal(dst.ArrayOfRecordSrv)
		if string(jsonArrayOfRecordSrv) == "{}" { // empty struct
			dst.ArrayOfRecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordSrvResponseObject = nil
		dst.ArrayOfRecordSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordSrvResponseObject != nil {
		return json.Marshal(&src.ListRecordSrvResponseObject)
	}

	if src.ArrayOfRecordSrv != nil {
		return json.Marshal(&src.ArrayOfRecordSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordSrvResponseObject != nil {
		return obj.ListRecordSrvResponseObject
	}

	if obj.ArrayOfRecordSrv != nil {
		return obj.ArrayOfRecordSrv
	}

	// all schemas are nil
	return nil
}

type NullableListRecordSrvResponse struct {
	value *ListRecordSrvResponse
	isSet bool
}

func (v NullableListRecordSrvResponse) Get() *ListRecordSrvResponse {
	return v.value
}

func (v *NullableListRecordSrvResponse) Set(val *ListRecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordSrvResponse(val *ListRecordSrvResponse) *NullableListRecordSrvResponse {
	return &NullableListRecordSrvResponse{value: val, isSet: true}
}

func (v NullableListRecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
