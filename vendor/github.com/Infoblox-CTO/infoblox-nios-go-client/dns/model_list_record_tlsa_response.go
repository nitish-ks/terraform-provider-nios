/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordTlsaResponse - struct for ListRecordTlsaResponse
type ListRecordTlsaResponse struct {
	ListRecordTlsaResponseObject *ListRecordTlsaResponseObject
	ArrayOfRecordTlsa            *[]RecordTlsa
}

// ListRecordTlsaResponseObjectAsListRecordTlsaResponse is a convenience function that returns ListRecordTlsaResponseObject wrapped in ListRecordTlsaResponse
func ListRecordTlsaResponseObjectAsListRecordTlsaResponse(v *ListRecordTlsaResponseObject) ListRecordTlsaResponse {
	return ListRecordTlsaResponse{
		ListRecordTlsaResponseObject: v,
	}
}

// []RecordTlsaAsListRecordTlsaResponse is a convenience function that returns []RecordTlsa wrapped in ListRecordTlsaResponse
func ArrayOfRecordTlsaAsListRecordTlsaResponse(v *[]RecordTlsa) ListRecordTlsaResponse {
	return ListRecordTlsaResponse{
		ArrayOfRecordTlsa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordTlsaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordTlsaResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordTlsaResponseObject)
	if err == nil {
		jsonListRecordTlsaResponseObject, _ := json.Marshal(dst.ListRecordTlsaResponseObject)
		if string(jsonListRecordTlsaResponseObject) == "{}" { // empty struct
			dst.ListRecordTlsaResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordTlsaResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordTlsa
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordTlsa)
	if err == nil {
		jsonArrayOfRecordTlsa, _ := json.Marshal(dst.ArrayOfRecordTlsa)
		if string(jsonArrayOfRecordTlsa) == "{}" { // empty struct
			dst.ArrayOfRecordTlsa = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordTlsa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordTlsaResponseObject = nil
		dst.ArrayOfRecordTlsa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordTlsaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordTlsaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordTlsaResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordTlsaResponseObject != nil {
		return json.Marshal(&src.ListRecordTlsaResponseObject)
	}

	if src.ArrayOfRecordTlsa != nil {
		return json.Marshal(&src.ArrayOfRecordTlsa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordTlsaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordTlsaResponseObject != nil {
		return obj.ListRecordTlsaResponseObject
	}

	if obj.ArrayOfRecordTlsa != nil {
		return obj.ArrayOfRecordTlsa
	}

	// all schemas are nil
	return nil
}

type NullableListRecordTlsaResponse struct {
	value *ListRecordTlsaResponse
	isSet bool
}

func (v NullableListRecordTlsaResponse) Get() *ListRecordTlsaResponse {
	return v.value
}

func (v *NullableListRecordTlsaResponse) Set(val *ListRecordTlsaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordTlsaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordTlsaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordTlsaResponse(val *ListRecordTlsaResponse) *NullableListRecordTlsaResponse {
	return &NullableListRecordTlsaResponse{value: val, isSet: true}
}

func (v NullableListRecordTlsaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordTlsaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
