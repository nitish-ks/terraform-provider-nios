/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordTxtResponse - struct for ListRecordTxtResponse
type ListRecordTxtResponse struct {
	ListRecordTxtResponseObject *ListRecordTxtResponseObject
	ArrayOfRecordTxt            *[]RecordTxt
}

// ListRecordTxtResponseObjectAsListRecordTxtResponse is a convenience function that returns ListRecordTxtResponseObject wrapped in ListRecordTxtResponse
func ListRecordTxtResponseObjectAsListRecordTxtResponse(v *ListRecordTxtResponseObject) ListRecordTxtResponse {
	return ListRecordTxtResponse{
		ListRecordTxtResponseObject: v,
	}
}

// []RecordTxtAsListRecordTxtResponse is a convenience function that returns []RecordTxt wrapped in ListRecordTxtResponse
func ArrayOfRecordTxtAsListRecordTxtResponse(v *[]RecordTxt) ListRecordTxtResponse {
	return ListRecordTxtResponse{
		ArrayOfRecordTxt: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordTxtResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordTxtResponseObject)
	if err == nil {
		jsonListRecordTxtResponseObject, _ := json.Marshal(dst.ListRecordTxtResponseObject)
		if string(jsonListRecordTxtResponseObject) == "{}" { // empty struct
			dst.ListRecordTxtResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordTxtResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordTxt
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordTxt)
	if err == nil {
		jsonArrayOfRecordTxt, _ := json.Marshal(dst.ArrayOfRecordTxt)
		if string(jsonArrayOfRecordTxt) == "{}" { // empty struct
			dst.ArrayOfRecordTxt = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordTxt = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordTxtResponseObject = nil
		dst.ArrayOfRecordTxt = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordTxtResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordTxtResponseObject != nil {
		return json.Marshal(&src.ListRecordTxtResponseObject)
	}

	if src.ArrayOfRecordTxt != nil {
		return json.Marshal(&src.ArrayOfRecordTxt)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordTxtResponseObject != nil {
		return obj.ListRecordTxtResponseObject
	}

	if obj.ArrayOfRecordTxt != nil {
		return obj.ArrayOfRecordTxt
	}

	// all schemas are nil
	return nil
}

type NullableListRecordTxtResponse struct {
	value *ListRecordTxtResponse
	isSet bool
}

func (v NullableListRecordTxtResponse) Get() *ListRecordTxtResponse {
	return v.value
}

func (v *NullableListRecordTxtResponse) Set(val *ListRecordTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordTxtResponse(val *ListRecordTxtResponse) *NullableListRecordTxtResponse {
	return &NullableListRecordTxtResponse{value: val, isSet: true}
}

func (v NullableListRecordTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
