/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordAaaaResponse - struct for ListSharedrecordAaaaResponse
type ListSharedrecordAaaaResponse struct {
	ListSharedrecordAaaaResponseObject *ListSharedrecordAaaaResponseObject
	ArrayOfSharedrecordAaaa            *[]SharedrecordAaaa
}

// ListSharedrecordAaaaResponseObjectAsListSharedrecordAaaaResponse is a convenience function that returns ListSharedrecordAaaaResponseObject wrapped in ListSharedrecordAaaaResponse
func ListSharedrecordAaaaResponseObjectAsListSharedrecordAaaaResponse(v *ListSharedrecordAaaaResponseObject) ListSharedrecordAaaaResponse {
	return ListSharedrecordAaaaResponse{
		ListSharedrecordAaaaResponseObject: v,
	}
}

// []SharedrecordAaaaAsListSharedrecordAaaaResponse is a convenience function that returns []SharedrecordAaaa wrapped in ListSharedrecordAaaaResponse
func ArrayOfSharedrecordAaaaAsListSharedrecordAaaaResponse(v *[]SharedrecordAaaa) ListSharedrecordAaaaResponse {
	return ListSharedrecordAaaaResponse{
		ArrayOfSharedrecordAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordAaaaResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordAaaaResponseObject)
	if err == nil {
		jsonListSharedrecordAaaaResponseObject, _ := json.Marshal(dst.ListSharedrecordAaaaResponseObject)
		if string(jsonListSharedrecordAaaaResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordAaaaResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordAaaaResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordAaaa
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordAaaa)
	if err == nil {
		jsonArrayOfSharedrecordAaaa, _ := json.Marshal(dst.ArrayOfSharedrecordAaaa)
		if string(jsonArrayOfSharedrecordAaaa) == "{}" { // empty struct
			dst.ArrayOfSharedrecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordAaaaResponseObject = nil
		dst.ArrayOfSharedrecordAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordAaaaResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordAaaaResponseObject)
	}

	if src.ArrayOfSharedrecordAaaa != nil {
		return json.Marshal(&src.ArrayOfSharedrecordAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordAaaaResponseObject != nil {
		return obj.ListSharedrecordAaaaResponseObject
	}

	if obj.ArrayOfSharedrecordAaaa != nil {
		return obj.ArrayOfSharedrecordAaaa
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordAaaaResponse struct {
	value *ListSharedrecordAaaaResponse
	isSet bool
}

func (v NullableListSharedrecordAaaaResponse) Get() *ListSharedrecordAaaaResponse {
	return v.value
}

func (v *NullableListSharedrecordAaaaResponse) Set(val *ListSharedrecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordAaaaResponse(val *ListSharedrecordAaaaResponse) *NullableListSharedrecordAaaaResponse {
	return &NullableListSharedrecordAaaaResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
