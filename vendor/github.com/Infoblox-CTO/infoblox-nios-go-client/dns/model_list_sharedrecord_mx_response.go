/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordMxResponse - struct for ListSharedrecordMxResponse
type ListSharedrecordMxResponse struct {
	ListSharedrecordMxResponseObject *ListSharedrecordMxResponseObject
	ArrayOfSharedrecordMx            *[]SharedrecordMx
}

// ListSharedrecordMxResponseObjectAsListSharedrecordMxResponse is a convenience function that returns ListSharedrecordMxResponseObject wrapped in ListSharedrecordMxResponse
func ListSharedrecordMxResponseObjectAsListSharedrecordMxResponse(v *ListSharedrecordMxResponseObject) ListSharedrecordMxResponse {
	return ListSharedrecordMxResponse{
		ListSharedrecordMxResponseObject: v,
	}
}

// []SharedrecordMxAsListSharedrecordMxResponse is a convenience function that returns []SharedrecordMx wrapped in ListSharedrecordMxResponse
func ArrayOfSharedrecordMxAsListSharedrecordMxResponse(v *[]SharedrecordMx) ListSharedrecordMxResponse {
	return ListSharedrecordMxResponse{
		ArrayOfSharedrecordMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordMxResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordMxResponseObject)
	if err == nil {
		jsonListSharedrecordMxResponseObject, _ := json.Marshal(dst.ListSharedrecordMxResponseObject)
		if string(jsonListSharedrecordMxResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordMxResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordMxResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordMx
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordMx)
	if err == nil {
		jsonArrayOfSharedrecordMx, _ := json.Marshal(dst.ArrayOfSharedrecordMx)
		if string(jsonArrayOfSharedrecordMx) == "{}" { // empty struct
			dst.ArrayOfSharedrecordMx = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordMxResponseObject = nil
		dst.ArrayOfSharedrecordMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordMxResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordMxResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordMxResponseObject)
	}

	if src.ArrayOfSharedrecordMx != nil {
		return json.Marshal(&src.ArrayOfSharedrecordMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordMxResponseObject != nil {
		return obj.ListSharedrecordMxResponseObject
	}

	if obj.ArrayOfSharedrecordMx != nil {
		return obj.ArrayOfSharedrecordMx
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordMxResponse struct {
	value *ListSharedrecordMxResponse
	isSet bool
}

func (v NullableListSharedrecordMxResponse) Get() *ListSharedrecordMxResponse {
	return v.value
}

func (v *NullableListSharedrecordMxResponse) Set(val *ListSharedrecordMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordMxResponse(val *ListSharedrecordMxResponse) *NullableListSharedrecordMxResponse {
	return &NullableListSharedrecordMxResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
