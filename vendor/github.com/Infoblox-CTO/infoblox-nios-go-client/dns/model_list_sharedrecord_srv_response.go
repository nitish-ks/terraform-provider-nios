/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordSrvResponse - struct for ListSharedrecordSrvResponse
type ListSharedrecordSrvResponse struct {
	ListSharedrecordSrvResponseObject *ListSharedrecordSrvResponseObject
	ArrayOfSharedrecordSrv            *[]SharedrecordSrv
}

// ListSharedrecordSrvResponseObjectAsListSharedrecordSrvResponse is a convenience function that returns ListSharedrecordSrvResponseObject wrapped in ListSharedrecordSrvResponse
func ListSharedrecordSrvResponseObjectAsListSharedrecordSrvResponse(v *ListSharedrecordSrvResponseObject) ListSharedrecordSrvResponse {
	return ListSharedrecordSrvResponse{
		ListSharedrecordSrvResponseObject: v,
	}
}

// []SharedrecordSrvAsListSharedrecordSrvResponse is a convenience function that returns []SharedrecordSrv wrapped in ListSharedrecordSrvResponse
func ArrayOfSharedrecordSrvAsListSharedrecordSrvResponse(v *[]SharedrecordSrv) ListSharedrecordSrvResponse {
	return ListSharedrecordSrvResponse{
		ArrayOfSharedrecordSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordSrvResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordSrvResponseObject)
	if err == nil {
		jsonListSharedrecordSrvResponseObject, _ := json.Marshal(dst.ListSharedrecordSrvResponseObject)
		if string(jsonListSharedrecordSrvResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordSrvResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordSrvResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordSrv
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordSrv)
	if err == nil {
		jsonArrayOfSharedrecordSrv, _ := json.Marshal(dst.ArrayOfSharedrecordSrv)
		if string(jsonArrayOfSharedrecordSrv) == "{}" { // empty struct
			dst.ArrayOfSharedrecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordSrvResponseObject = nil
		dst.ArrayOfSharedrecordSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordSrvResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordSrvResponseObject)
	}

	if src.ArrayOfSharedrecordSrv != nil {
		return json.Marshal(&src.ArrayOfSharedrecordSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordSrvResponseObject != nil {
		return obj.ListSharedrecordSrvResponseObject
	}

	if obj.ArrayOfSharedrecordSrv != nil {
		return obj.ArrayOfSharedrecordSrv
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordSrvResponse struct {
	value *ListSharedrecordSrvResponse
	isSet bool
}

func (v NullableListSharedrecordSrvResponse) Get() *ListSharedrecordSrvResponse {
	return v.value
}

func (v *NullableListSharedrecordSrvResponse) Set(val *ListSharedrecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordSrvResponse(val *ListSharedrecordSrvResponse) *NullableListSharedrecordSrvResponse {
	return &NullableListSharedrecordSrvResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
