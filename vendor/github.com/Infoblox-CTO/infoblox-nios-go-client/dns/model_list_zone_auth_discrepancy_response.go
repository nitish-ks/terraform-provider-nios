/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneAuthDiscrepancyResponse - struct for ListZoneAuthDiscrepancyResponse
type ListZoneAuthDiscrepancyResponse struct {
	ListZoneAuthDiscrepancyResponseObject *ListZoneAuthDiscrepancyResponseObject
	ArrayOfZoneAuthDiscrepancy            *[]ZoneAuthDiscrepancy
}

// ListZoneAuthDiscrepancyResponseObjectAsListZoneAuthDiscrepancyResponse is a convenience function that returns ListZoneAuthDiscrepancyResponseObject wrapped in ListZoneAuthDiscrepancyResponse
func ListZoneAuthDiscrepancyResponseObjectAsListZoneAuthDiscrepancyResponse(v *ListZoneAuthDiscrepancyResponseObject) ListZoneAuthDiscrepancyResponse {
	return ListZoneAuthDiscrepancyResponse{
		ListZoneAuthDiscrepancyResponseObject: v,
	}
}

// []ZoneAuthDiscrepancyAsListZoneAuthDiscrepancyResponse is a convenience function that returns []ZoneAuthDiscrepancy wrapped in ListZoneAuthDiscrepancyResponse
func ArrayOfZoneAuthDiscrepancyAsListZoneAuthDiscrepancyResponse(v *[]ZoneAuthDiscrepancy) ListZoneAuthDiscrepancyResponse {
	return ListZoneAuthDiscrepancyResponse{
		ArrayOfZoneAuthDiscrepancy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneAuthDiscrepancyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneAuthDiscrepancyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneAuthDiscrepancyResponseObject)
	if err == nil {
		jsonListZoneAuthDiscrepancyResponseObject, _ := json.Marshal(dst.ListZoneAuthDiscrepancyResponseObject)
		if string(jsonListZoneAuthDiscrepancyResponseObject) == "{}" { // empty struct
			dst.ListZoneAuthDiscrepancyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneAuthDiscrepancyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneAuthDiscrepancy
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneAuthDiscrepancy)
	if err == nil {
		jsonArrayOfZoneAuthDiscrepancy, _ := json.Marshal(dst.ArrayOfZoneAuthDiscrepancy)
		if string(jsonArrayOfZoneAuthDiscrepancy) == "{}" { // empty struct
			dst.ArrayOfZoneAuthDiscrepancy = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneAuthDiscrepancy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneAuthDiscrepancyResponseObject = nil
		dst.ArrayOfZoneAuthDiscrepancy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneAuthDiscrepancyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneAuthDiscrepancyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneAuthDiscrepancyResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneAuthDiscrepancyResponseObject != nil {
		return json.Marshal(&src.ListZoneAuthDiscrepancyResponseObject)
	}

	if src.ArrayOfZoneAuthDiscrepancy != nil {
		return json.Marshal(&src.ArrayOfZoneAuthDiscrepancy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneAuthDiscrepancyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneAuthDiscrepancyResponseObject != nil {
		return obj.ListZoneAuthDiscrepancyResponseObject
	}

	if obj.ArrayOfZoneAuthDiscrepancy != nil {
		return obj.ArrayOfZoneAuthDiscrepancy
	}

	// all schemas are nil
	return nil
}

type NullableListZoneAuthDiscrepancyResponse struct {
	value *ListZoneAuthDiscrepancyResponse
	isSet bool
}

func (v NullableListZoneAuthDiscrepancyResponse) Get() *ListZoneAuthDiscrepancyResponse {
	return v.value
}

func (v *NullableListZoneAuthDiscrepancyResponse) Set(val *ListZoneAuthDiscrepancyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneAuthDiscrepancyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneAuthDiscrepancyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneAuthDiscrepancyResponse(val *ListZoneAuthDiscrepancyResponse) *NullableListZoneAuthDiscrepancyResponse {
	return &NullableListZoneAuthDiscrepancyResponse{value: val, isSet: true}
}

func (v NullableListZoneAuthDiscrepancyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneAuthDiscrepancyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
