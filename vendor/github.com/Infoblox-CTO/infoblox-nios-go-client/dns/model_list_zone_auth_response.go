/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneAuthResponse - struct for ListZoneAuthResponse
type ListZoneAuthResponse struct {
	ListZoneAuthResponseObject *ListZoneAuthResponseObject
	ArrayOfZoneAuth            *[]ZoneAuth
}

// ListZoneAuthResponseObjectAsListZoneAuthResponse is a convenience function that returns ListZoneAuthResponseObject wrapped in ListZoneAuthResponse
func ListZoneAuthResponseObjectAsListZoneAuthResponse(v *ListZoneAuthResponseObject) ListZoneAuthResponse {
	return ListZoneAuthResponse{
		ListZoneAuthResponseObject: v,
	}
}

// []ZoneAuthAsListZoneAuthResponse is a convenience function that returns []ZoneAuth wrapped in ListZoneAuthResponse
func ArrayOfZoneAuthAsListZoneAuthResponse(v *[]ZoneAuth) ListZoneAuthResponse {
	return ListZoneAuthResponse{
		ArrayOfZoneAuth: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneAuthResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneAuthResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneAuthResponseObject)
	if err == nil {
		jsonListZoneAuthResponseObject, _ := json.Marshal(dst.ListZoneAuthResponseObject)
		if string(jsonListZoneAuthResponseObject) == "{}" { // empty struct
			dst.ListZoneAuthResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneAuthResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneAuth
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneAuth)
	if err == nil {
		jsonArrayOfZoneAuth, _ := json.Marshal(dst.ArrayOfZoneAuth)
		if string(jsonArrayOfZoneAuth) == "{}" { // empty struct
			dst.ArrayOfZoneAuth = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneAuth = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneAuthResponseObject = nil
		dst.ArrayOfZoneAuth = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneAuthResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneAuthResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneAuthResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneAuthResponseObject != nil {
		return json.Marshal(&src.ListZoneAuthResponseObject)
	}

	if src.ArrayOfZoneAuth != nil {
		return json.Marshal(&src.ArrayOfZoneAuth)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneAuthResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneAuthResponseObject != nil {
		return obj.ListZoneAuthResponseObject
	}

	if obj.ArrayOfZoneAuth != nil {
		return obj.ArrayOfZoneAuth
	}

	// all schemas are nil
	return nil
}

type NullableListZoneAuthResponse struct {
	value *ListZoneAuthResponse
	isSet bool
}

func (v NullableListZoneAuthResponse) Get() *ListZoneAuthResponse {
	return v.value
}

func (v *NullableListZoneAuthResponse) Set(val *ListZoneAuthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneAuthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneAuthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneAuthResponse(val *ListZoneAuthResponse) *NullableListZoneAuthResponse {
	return &NullableListZoneAuthResponse{value: val, isSet: true}
}

func (v NullableListZoneAuthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneAuthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
