/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneForwardResponse - struct for ListZoneForwardResponse
type ListZoneForwardResponse struct {
	ListZoneForwardResponseObject *ListZoneForwardResponseObject
	ArrayOfZoneForward            *[]ZoneForward
}

// ListZoneForwardResponseObjectAsListZoneForwardResponse is a convenience function that returns ListZoneForwardResponseObject wrapped in ListZoneForwardResponse
func ListZoneForwardResponseObjectAsListZoneForwardResponse(v *ListZoneForwardResponseObject) ListZoneForwardResponse {
	return ListZoneForwardResponse{
		ListZoneForwardResponseObject: v,
	}
}

// []ZoneForwardAsListZoneForwardResponse is a convenience function that returns []ZoneForward wrapped in ListZoneForwardResponse
func ArrayOfZoneForwardAsListZoneForwardResponse(v *[]ZoneForward) ListZoneForwardResponse {
	return ListZoneForwardResponse{
		ArrayOfZoneForward: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneForwardResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneForwardResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneForwardResponseObject)
	if err == nil {
		jsonListZoneForwardResponseObject, _ := json.Marshal(dst.ListZoneForwardResponseObject)
		if string(jsonListZoneForwardResponseObject) == "{}" { // empty struct
			dst.ListZoneForwardResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneForwardResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneForward
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneForward)
	if err == nil {
		jsonArrayOfZoneForward, _ := json.Marshal(dst.ArrayOfZoneForward)
		if string(jsonArrayOfZoneForward) == "{}" { // empty struct
			dst.ArrayOfZoneForward = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneForward = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneForwardResponseObject = nil
		dst.ArrayOfZoneForward = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneForwardResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneForwardResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneForwardResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneForwardResponseObject != nil {
		return json.Marshal(&src.ListZoneForwardResponseObject)
	}

	if src.ArrayOfZoneForward != nil {
		return json.Marshal(&src.ArrayOfZoneForward)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneForwardResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneForwardResponseObject != nil {
		return obj.ListZoneForwardResponseObject
	}

	if obj.ArrayOfZoneForward != nil {
		return obj.ArrayOfZoneForward
	}

	// all schemas are nil
	return nil
}

type NullableListZoneForwardResponse struct {
	value *ListZoneForwardResponse
	isSet bool
}

func (v NullableListZoneForwardResponse) Get() *ListZoneForwardResponse {
	return v.value
}

func (v *NullableListZoneForwardResponse) Set(val *ListZoneForwardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneForwardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneForwardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneForwardResponse(val *ListZoneForwardResponse) *NullableListZoneForwardResponse {
	return &NullableListZoneForwardResponse{value: val, isSet: true}
}

func (v NullableListZoneForwardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneForwardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
