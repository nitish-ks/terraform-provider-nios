/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneStubResponse - struct for ListZoneStubResponse
type ListZoneStubResponse struct {
	ListZoneStubResponseObject *ListZoneStubResponseObject
	ArrayOfZoneStub            *[]ZoneStub
}

// ListZoneStubResponseObjectAsListZoneStubResponse is a convenience function that returns ListZoneStubResponseObject wrapped in ListZoneStubResponse
func ListZoneStubResponseObjectAsListZoneStubResponse(v *ListZoneStubResponseObject) ListZoneStubResponse {
	return ListZoneStubResponse{
		ListZoneStubResponseObject: v,
	}
}

// []ZoneStubAsListZoneStubResponse is a convenience function that returns []ZoneStub wrapped in ListZoneStubResponse
func ArrayOfZoneStubAsListZoneStubResponse(v *[]ZoneStub) ListZoneStubResponse {
	return ListZoneStubResponse{
		ArrayOfZoneStub: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneStubResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneStubResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneStubResponseObject)
	if err == nil {
		jsonListZoneStubResponseObject, _ := json.Marshal(dst.ListZoneStubResponseObject)
		if string(jsonListZoneStubResponseObject) == "{}" { // empty struct
			dst.ListZoneStubResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneStubResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneStub
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneStub)
	if err == nil {
		jsonArrayOfZoneStub, _ := json.Marshal(dst.ArrayOfZoneStub)
		if string(jsonArrayOfZoneStub) == "{}" { // empty struct
			dst.ArrayOfZoneStub = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneStub = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneStubResponseObject = nil
		dst.ArrayOfZoneStub = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneStubResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneStubResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneStubResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneStubResponseObject != nil {
		return json.Marshal(&src.ListZoneStubResponseObject)
	}

	if src.ArrayOfZoneStub != nil {
		return json.Marshal(&src.ArrayOfZoneStub)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneStubResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneStubResponseObject != nil {
		return obj.ListZoneStubResponseObject
	}

	if obj.ArrayOfZoneStub != nil {
		return obj.ArrayOfZoneStub
	}

	// all schemas are nil
	return nil
}

type NullableListZoneStubResponse struct {
	value *ListZoneStubResponse
	isSet bool
}

func (v NullableListZoneStubResponse) Get() *ListZoneStubResponse {
	return v.value
}

func (v *NullableListZoneStubResponse) Set(val *ListZoneStubResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneStubResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneStubResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneStubResponse(val *ListZoneStubResponse) *NullableListZoneStubResponse {
	return &NullableListZoneStubResponse{value: val, isSet: true}
}

func (v NullableListZoneStubResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneStubResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
