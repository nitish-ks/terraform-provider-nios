/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the NsgroupDelegation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NsgroupDelegation{}

// NsgroupDelegation struct for NsgroupDelegation
type NsgroupDelegation struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The comment for the delegated NS group.
	Comment *string `json:"comment,omitempty"`
	// The list of delegated servers for the delegated NS group.
	DelegateTo []NsgroupDelegationDelegateTo `json:"delegate_to,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of the delegated NS group.
	Name *string `json:"name,omitempty"`
}

// NewNsgroupDelegation instantiates a new NsgroupDelegation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNsgroupDelegation() *NsgroupDelegation {
	this := NsgroupDelegation{}
	return &this
}

// NewNsgroupDelegationWithDefaults instantiates a new NsgroupDelegation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNsgroupDelegationWithDefaults() *NsgroupDelegation {
	this := NsgroupDelegation{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *NsgroupDelegation) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupDelegation) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *NsgroupDelegation) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *NsgroupDelegation) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NsgroupDelegation) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupDelegation) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NsgroupDelegation) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NsgroupDelegation) SetComment(v string) {
	o.Comment = &v
}

// GetDelegateTo returns the DelegateTo field value if set, zero value otherwise.
func (o *NsgroupDelegation) GetDelegateTo() []NsgroupDelegationDelegateTo {
	if o == nil || IsNil(o.DelegateTo) {
		var ret []NsgroupDelegationDelegateTo
		return ret
	}
	return o.DelegateTo
}

// GetDelegateToOk returns a tuple with the DelegateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupDelegation) GetDelegateToOk() ([]NsgroupDelegationDelegateTo, bool) {
	if o == nil || IsNil(o.DelegateTo) {
		return nil, false
	}
	return o.DelegateTo, true
}

// HasDelegateTo returns a boolean if a field has been set.
func (o *NsgroupDelegation) HasDelegateTo() bool {
	if o != nil && !IsNil(o.DelegateTo) {
		return true
	}

	return false
}

// SetDelegateTo gets a reference to the given []NsgroupDelegationDelegateTo and assigns it to the DelegateTo field.
func (o *NsgroupDelegation) SetDelegateTo(v []NsgroupDelegationDelegateTo) {
	o.DelegateTo = v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *NsgroupDelegation) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupDelegation) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *NsgroupDelegation) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *NsgroupDelegation) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NsgroupDelegation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupDelegation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NsgroupDelegation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NsgroupDelegation) SetName(v string) {
	o.Name = &v
}

func (o NsgroupDelegation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NsgroupDelegation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DelegateTo) {
		toSerialize["delegate_to"] = o.DelegateTo
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableNsgroupDelegation struct {
	value *NsgroupDelegation
	isSet bool
}

func (v NullableNsgroupDelegation) Get() *NsgroupDelegation {
	return v.value
}

func (v *NullableNsgroupDelegation) Set(val *NsgroupDelegation) {
	v.value = val
	v.isSet = true
}

func (v NullableNsgroupDelegation) IsSet() bool {
	return v.isSet
}

func (v *NullableNsgroupDelegation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNsgroupDelegation(val *NsgroupDelegation) *NullableNsgroupDelegation {
	return &NullableNsgroupDelegation{value: val, isSet: true}
}

func (v NullableNsgroupDelegation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNsgroupDelegation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
