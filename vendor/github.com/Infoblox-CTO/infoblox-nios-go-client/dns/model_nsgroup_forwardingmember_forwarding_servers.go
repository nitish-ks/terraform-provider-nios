/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the NsgroupForwardingmemberForwardingServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NsgroupForwardingmemberForwardingServers{}

// NsgroupForwardingmemberForwardingServers struct for NsgroupForwardingmemberForwardingServers
type NsgroupForwardingmemberForwardingServers struct {
	// The name of this Grid member in FQDN format.
	Name *string `json:"name,omitempty"`
	// Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// The information for the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
	ForwardTo []NsgroupforwardingmemberforwardingserversForwardTo `json:"forward_to,omitempty"`
	// Use flag for: forward_to
	UseOverrideForwarders *bool `json:"use_override_forwarders,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _NsgroupForwardingmemberForwardingServers NsgroupForwardingmemberForwardingServers

// NewNsgroupForwardingmemberForwardingServers instantiates a new NsgroupForwardingmemberForwardingServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNsgroupForwardingmemberForwardingServers() *NsgroupForwardingmemberForwardingServers {
	this := NsgroupForwardingmemberForwardingServers{}
	return &this
}

// NewNsgroupForwardingmemberForwardingServersWithDefaults instantiates a new NsgroupForwardingmemberForwardingServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNsgroupForwardingmemberForwardingServersWithDefaults() *NsgroupForwardingmemberForwardingServers {
	this := NsgroupForwardingmemberForwardingServers{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NsgroupForwardingmemberForwardingServers) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupForwardingmemberForwardingServers) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NsgroupForwardingmemberForwardingServers) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NsgroupForwardingmemberForwardingServers) SetName(v string) {
	o.Name = &v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *NsgroupForwardingmemberForwardingServers) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupForwardingmemberForwardingServers) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *NsgroupForwardingmemberForwardingServers) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *NsgroupForwardingmemberForwardingServers) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetForwardTo returns the ForwardTo field value if set, zero value otherwise.
func (o *NsgroupForwardingmemberForwardingServers) GetForwardTo() []NsgroupforwardingmemberforwardingserversForwardTo {
	if o == nil || IsNil(o.ForwardTo) {
		var ret []NsgroupforwardingmemberforwardingserversForwardTo
		return ret
	}
	return o.ForwardTo
}

// GetForwardToOk returns a tuple with the ForwardTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupForwardingmemberForwardingServers) GetForwardToOk() ([]NsgroupforwardingmemberforwardingserversForwardTo, bool) {
	if o == nil || IsNil(o.ForwardTo) {
		return nil, false
	}
	return o.ForwardTo, true
}

// HasForwardTo returns a boolean if a field has been set.
func (o *NsgroupForwardingmemberForwardingServers) HasForwardTo() bool {
	if o != nil && !IsNil(o.ForwardTo) {
		return true
	}

	return false
}

// SetForwardTo gets a reference to the given []NsgroupforwardingmemberforwardingserversForwardTo and assigns it to the ForwardTo field.
func (o *NsgroupForwardingmemberForwardingServers) SetForwardTo(v []NsgroupforwardingmemberforwardingserversForwardTo) {
	o.ForwardTo = v
}

// GetUseOverrideForwarders returns the UseOverrideForwarders field value if set, zero value otherwise.
func (o *NsgroupForwardingmemberForwardingServers) GetUseOverrideForwarders() bool {
	if o == nil || IsNil(o.UseOverrideForwarders) {
		var ret bool
		return ret
	}
	return *o.UseOverrideForwarders
}

// GetUseOverrideForwardersOk returns a tuple with the UseOverrideForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupForwardingmemberForwardingServers) GetUseOverrideForwardersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOverrideForwarders) {
		return nil, false
	}
	return o.UseOverrideForwarders, true
}

// HasUseOverrideForwarders returns a boolean if a field has been set.
func (o *NsgroupForwardingmemberForwardingServers) HasUseOverrideForwarders() bool {
	if o != nil && !IsNil(o.UseOverrideForwarders) {
		return true
	}

	return false
}

// SetUseOverrideForwarders gets a reference to the given bool and assigns it to the UseOverrideForwarders field.
func (o *NsgroupForwardingmemberForwardingServers) SetUseOverrideForwarders(v bool) {
	o.UseOverrideForwarders = &v
}

func (o NsgroupForwardingmemberForwardingServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NsgroupForwardingmemberForwardingServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.ForwardTo) {
		toSerialize["forward_to"] = o.ForwardTo
	}
	if !IsNil(o.UseOverrideForwarders) {
		toSerialize["use_override_forwarders"] = o.UseOverrideForwarders
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NsgroupForwardingmemberForwardingServers) UnmarshalJSON(data []byte) (err error) {
	varNsgroupForwardingmemberForwardingServers := _NsgroupForwardingmemberForwardingServers{}

	err = json.Unmarshal(data, &varNsgroupForwardingmemberForwardingServers)

	if err != nil {
		return err
	}

	*o = NsgroupForwardingmemberForwardingServers(varNsgroupForwardingmemberForwardingServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "forwarders_only")
		delete(additionalProperties, "forward_to")
		delete(additionalProperties, "use_override_forwarders")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNsgroupForwardingmemberForwardingServers struct {
	value *NsgroupForwardingmemberForwardingServers
	isSet bool
}

func (v NullableNsgroupForwardingmemberForwardingServers) Get() *NsgroupForwardingmemberForwardingServers {
	return v.value
}

func (v *NullableNsgroupForwardingmemberForwardingServers) Set(val *NsgroupForwardingmemberForwardingServers) {
	v.value = val
	v.isSet = true
}

func (v NullableNsgroupForwardingmemberForwardingServers) IsSet() bool {
	return v.isSet
}

func (v *NullableNsgroupForwardingmemberForwardingServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNsgroupForwardingmemberForwardingServers(val *NsgroupForwardingmemberForwardingServers) *NullableNsgroupForwardingmemberForwardingServers {
	return &NullableNsgroupForwardingmemberForwardingServers{value: val, isSet: true}
}

func (v NullableNsgroupForwardingmemberForwardingServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNsgroupForwardingmemberForwardingServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
