/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the NsgroupStubmember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NsgroupStubmember{}

// NsgroupStubmember struct for NsgroupStubmember
type NsgroupStubmember struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for the Stub Member Name Server Group; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of the Stub Member Name Server Group.
	Name *string `json:"name,omitempty"`
	// The Grid member servers of this stub zone. Note that the lead/stealth/grid_replicate/ preferred_primaries/override_preferred_primaries fields of the struct will be ignored when set in this field.
	StubMembers []NsgroupStubmemberStubMembers `json:"stub_members,omitempty"`
}

// NewNsgroupStubmember instantiates a new NsgroupStubmember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNsgroupStubmember() *NsgroupStubmember {
	this := NsgroupStubmember{}
	return &this
}

// NewNsgroupStubmemberWithDefaults instantiates a new NsgroupStubmember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNsgroupStubmemberWithDefaults() *NsgroupStubmember {
	this := NsgroupStubmember{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *NsgroupStubmember) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupStubmember) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *NsgroupStubmember) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *NsgroupStubmember) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NsgroupStubmember) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupStubmember) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NsgroupStubmember) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NsgroupStubmember) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *NsgroupStubmember) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupStubmember) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *NsgroupStubmember) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *NsgroupStubmember) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NsgroupStubmember) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupStubmember) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NsgroupStubmember) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NsgroupStubmember) SetName(v string) {
	o.Name = &v
}

// GetStubMembers returns the StubMembers field value if set, zero value otherwise.
func (o *NsgroupStubmember) GetStubMembers() []NsgroupStubmemberStubMembers {
	if o == nil || IsNil(o.StubMembers) {
		var ret []NsgroupStubmemberStubMembers
		return ret
	}
	return o.StubMembers
}

// GetStubMembersOk returns a tuple with the StubMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NsgroupStubmember) GetStubMembersOk() ([]NsgroupStubmemberStubMembers, bool) {
	if o == nil || IsNil(o.StubMembers) {
		return nil, false
	}
	return o.StubMembers, true
}

// HasStubMembers returns a boolean if a field has been set.
func (o *NsgroupStubmember) HasStubMembers() bool {
	if o != nil && !IsNil(o.StubMembers) {
		return true
	}

	return false
}

// SetStubMembers gets a reference to the given []NsgroupStubmemberStubMembers and assigns it to the StubMembers field.
func (o *NsgroupStubmember) SetStubMembers(v []NsgroupStubmemberStubMembers) {
	o.StubMembers = v
}

func (o NsgroupStubmember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NsgroupStubmember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StubMembers) {
		toSerialize["stub_members"] = o.StubMembers
	}
	return toSerialize, nil
}

type NullableNsgroupStubmember struct {
	value *NsgroupStubmember
	isSet bool
}

func (v NullableNsgroupStubmember) Get() *NsgroupStubmember {
	return v.value
}

func (v *NullableNsgroupStubmember) Set(val *NsgroupStubmember) {
	v.value = val
	v.isSet = true
}

func (v NullableNsgroupStubmember) IsSet() bool {
	return v.isSet
}

func (v *NullableNsgroupStubmember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNsgroupStubmember(val *NsgroupStubmember) *NullableNsgroupStubmember {
	return &NullableNsgroupStubmember{value: val, isSet: true}
}

func (v NullableNsgroupStubmember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNsgroupStubmember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
