/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordAlias{}

// RecordAlias struct for RecordAlias
type RecordAlias struct {
	// The reference to the object.
	Ref                *string                        `json:"_ref,omitempty"`
	AwsRte53RecordInfo *RecordAliasAwsRte53RecordInfo `json:"aws_rte53_record_info,omitempty"`
	CloudInfo          *RecordAliasCloudInfo          `json:"cloud_info,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The record creator.
	Creator *string `json:"creator,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The name for an Alias record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Target name in punycode format.
	DnsTargetName *string `json:"dns_target_name,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The name for an Alias record in FQDN format. This value can be in unicode format. Regular expression search is not supported for unicode values.
	Name *string `json:"name,omitempty"`
	// Target name in FQDN format. This value can be in unicode format.
	TargetName *string `json:"target_name,omitempty"`
	// Target type.
	TargetType *string `json:"target_type,omitempty"`
	// The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordAlias instantiates a new RecordAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordAlias() *RecordAlias {
	this := RecordAlias{}
	return &this
}

// NewRecordAliasWithDefaults instantiates a new RecordAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordAliasWithDefaults() *RecordAlias {
	this := RecordAlias{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordAlias) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordAlias) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordAlias) SetRef(v string) {
	o.Ref = &v
}

// GetAwsRte53RecordInfo returns the AwsRte53RecordInfo field value if set, zero value otherwise.
func (o *RecordAlias) GetAwsRte53RecordInfo() RecordAliasAwsRte53RecordInfo {
	if o == nil || IsNil(o.AwsRte53RecordInfo) {
		var ret RecordAliasAwsRte53RecordInfo
		return ret
	}
	return *o.AwsRte53RecordInfo
}

// GetAwsRte53RecordInfoOk returns a tuple with the AwsRte53RecordInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetAwsRte53RecordInfoOk() (*RecordAliasAwsRte53RecordInfo, bool) {
	if o == nil || IsNil(o.AwsRte53RecordInfo) {
		return nil, false
	}
	return o.AwsRte53RecordInfo, true
}

// HasAwsRte53RecordInfo returns a boolean if a field has been set.
func (o *RecordAlias) HasAwsRte53RecordInfo() bool {
	if o != nil && !IsNil(o.AwsRte53RecordInfo) {
		return true
	}

	return false
}

// SetAwsRte53RecordInfo gets a reference to the given RecordAliasAwsRte53RecordInfo and assigns it to the AwsRte53RecordInfo field.
func (o *RecordAlias) SetAwsRte53RecordInfo(v RecordAliasAwsRte53RecordInfo) {
	o.AwsRte53RecordInfo = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordAlias) GetCloudInfo() RecordAliasCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordAliasCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetCloudInfoOk() (*RecordAliasCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordAlias) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordAliasCloudInfo and assigns it to the CloudInfo field.
func (o *RecordAlias) SetCloudInfo(v RecordAliasCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordAlias) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordAlias) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordAlias) SetComment(v string) {
	o.Comment = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordAlias) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordAlias) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordAlias) SetCreator(v string) {
	o.Creator = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordAlias) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordAlias) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordAlias) SetDisable(v bool) {
	o.Disable = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordAlias) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordAlias) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordAlias) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDnsTargetName returns the DnsTargetName field value if set, zero value otherwise.
func (o *RecordAlias) GetDnsTargetName() string {
	if o == nil || IsNil(o.DnsTargetName) {
		var ret string
		return ret
	}
	return *o.DnsTargetName
}

// GetDnsTargetNameOk returns a tuple with the DnsTargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetDnsTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsTargetName) {
		return nil, false
	}
	return o.DnsTargetName, true
}

// HasDnsTargetName returns a boolean if a field has been set.
func (o *RecordAlias) HasDnsTargetName() bool {
	if o != nil && !IsNil(o.DnsTargetName) {
		return true
	}

	return false
}

// SetDnsTargetName gets a reference to the given string and assigns it to the DnsTargetName field.
func (o *RecordAlias) SetDnsTargetName(v string) {
	o.DnsTargetName = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordAlias) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordAlias) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordAlias) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordAlias) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordAlias) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordAlias) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordAlias) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordAlias) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordAlias) SetName(v string) {
	o.Name = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *RecordAlias) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *RecordAlias) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *RecordAlias) SetTargetName(v string) {
	o.TargetName = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *RecordAlias) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *RecordAlias) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *RecordAlias) SetTargetType(v string) {
	o.TargetType = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordAlias) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordAlias) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordAlias) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordAlias) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordAlias) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordAlias) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordAlias) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordAlias) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordAlias) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordAlias) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordAlias) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordAlias) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordAlias) SetZone(v string) {
	o.Zone = &v
}

func (o RecordAlias) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AwsRte53RecordInfo) {
		toSerialize["aws_rte53_record_info"] = o.AwsRte53RecordInfo
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DnsTargetName) {
		toSerialize["dns_target_name"] = o.DnsTargetName
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TargetName) {
		toSerialize["target_name"] = o.TargetName
	}
	if !IsNil(o.TargetType) {
		toSerialize["target_type"] = o.TargetType
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordAlias struct {
	value *RecordAlias
	isSet bool
}

func (v NullableRecordAlias) Get() *RecordAlias {
	return v.value
}

func (v *NullableRecordAlias) Set(val *RecordAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordAlias(val *RecordAlias) *NullableRecordAlias {
	return &NullableRecordAlias{value: val, isSet: true}
}

func (v NullableRecordAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
