/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordHost{}

// RecordHost struct for RecordHost
type RecordHost struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This is a list of aliases for the host. The aliases must be in FQDN format. This value can be in unicode format.
	Aliases []string `json:"aliases,omitempty"`
	// This field controls whether the credential is used for both the Telnet and SSH credentials. If set to False, the credential is used only for SSH.
	AllowTelnet *bool `json:"allow_telnet,omitempty"`
	// The CLI credentials for the host record.
	CliCredentials []RecordHostCliCredentials `json:"cli_credentials,omitempty"`
	CloudInfo      *RecordHostCloudInfo       `json:"cloud_info,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// When configure_for_dns is false, the host does not have parent zone information.
	ConfigureForDns *bool `json:"configure_for_dns,omitempty"`
	// The time of the record creation in Epoch seconds format.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// Determines if the DDNS updates for this record are allowed or not.
	DdnsProtected *bool `json:"ddns_protected,omitempty"`
	// The description of the device.
	DeviceDescription *string `json:"device_description,omitempty"`
	// The location of the device.
	DeviceLocation *string `json:"device_location,omitempty"`
	// The type of the device.
	DeviceType *string `json:"device_type,omitempty"`
	// The vendor of the device.
	DeviceVendor *string `json:"device_vendor,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines if the discovery for the record is disabled or not. False means that the discovery is enabled.
	DisableDiscovery *bool `json:"disable_discovery,omitempty"`
	// The list of aliases for the host in punycode format.
	DnsAliases []string `json:"dns_aliases,omitempty"`
	// The name for a host record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Determines if the discovery for the record should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// This is a list of IPv4 Addresses for the host.
	Ipv4addrs []map[string]interface{} `json:"ipv4addrs,omitempty"`
	// This is a list of IPv6 Addresses for the host.
	Ipv6addrs []map[string]interface{} `json:"ipv6addrs,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried  *int64                  `json:"last_queried,omitempty"`
	MsAdUserData *RecordHostMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The host name in FQDN format This value can be in unicode format. Regular expression search is not supported for unicode values.
	Name *string `json:"name,omitempty"`
	// The name of the network view in which the host record resides.
	NetworkView *string `json:"network_view,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// The value of this field specifies the order in which resource record sets are returned. The possible values are \"cyclic\", \"random\" and \"fixed\".
	RrsetOrder      *string                    `json:"rrset_order,omitempty"`
	Snmp3Credential *RecordHostSnmp3Credential `json:"snmp3_credential,omitempty"`
	SnmpCredential  *RecordHostSnmpCredential  `json:"snmp_credential,omitempty"`
	// The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// If set to true, the CLI credential will override member-level settings.
	UseCliCredentials *bool `json:"use_cli_credentials,omitempty"`
	// When use_dns_ea_inheritance is True, the EA is inherited from associated zone.
	UseDnsEaInheritance *bool `json:"use_dns_ea_inheritance,omitempty"`
	// Determines if the SNMPv3 credential should be used for the record.
	UseSnmp3Credential *bool `json:"use_snmp3_credential,omitempty"`
	// If set to true, the SNMP credential will override member-level settings.
	UseSnmpCredential *bool `json:"use_snmp_credential,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS view in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordHost instantiates a new RecordHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordHost() *RecordHost {
	this := RecordHost{}
	return &this
}

// NewRecordHostWithDefaults instantiates a new RecordHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordHostWithDefaults() *RecordHost {
	this := RecordHost{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordHost) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordHost) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordHost) SetRef(v string) {
	o.Ref = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *RecordHost) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *RecordHost) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *RecordHost) SetAliases(v []string) {
	o.Aliases = v
}

// GetAllowTelnet returns the AllowTelnet field value if set, zero value otherwise.
func (o *RecordHost) GetAllowTelnet() bool {
	if o == nil || IsNil(o.AllowTelnet) {
		var ret bool
		return ret
	}
	return *o.AllowTelnet
}

// GetAllowTelnetOk returns a tuple with the AllowTelnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetAllowTelnetOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTelnet) {
		return nil, false
	}
	return o.AllowTelnet, true
}

// HasAllowTelnet returns a boolean if a field has been set.
func (o *RecordHost) HasAllowTelnet() bool {
	if o != nil && !IsNil(o.AllowTelnet) {
		return true
	}

	return false
}

// SetAllowTelnet gets a reference to the given bool and assigns it to the AllowTelnet field.
func (o *RecordHost) SetAllowTelnet(v bool) {
	o.AllowTelnet = &v
}

// GetCliCredentials returns the CliCredentials field value if set, zero value otherwise.
func (o *RecordHost) GetCliCredentials() []RecordHostCliCredentials {
	if o == nil || IsNil(o.CliCredentials) {
		var ret []RecordHostCliCredentials
		return ret
	}
	return o.CliCredentials
}

// GetCliCredentialsOk returns a tuple with the CliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetCliCredentialsOk() ([]RecordHostCliCredentials, bool) {
	if o == nil || IsNil(o.CliCredentials) {
		return nil, false
	}
	return o.CliCredentials, true
}

// HasCliCredentials returns a boolean if a field has been set.
func (o *RecordHost) HasCliCredentials() bool {
	if o != nil && !IsNil(o.CliCredentials) {
		return true
	}

	return false
}

// SetCliCredentials gets a reference to the given []RecordHostCliCredentials and assigns it to the CliCredentials field.
func (o *RecordHost) SetCliCredentials(v []RecordHostCliCredentials) {
	o.CliCredentials = v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordHost) GetCloudInfo() RecordHostCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordHostCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetCloudInfoOk() (*RecordHostCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordHost) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordHostCloudInfo and assigns it to the CloudInfo field.
func (o *RecordHost) SetCloudInfo(v RecordHostCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordHost) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordHost) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordHost) SetComment(v string) {
	o.Comment = &v
}

// GetConfigureForDns returns the ConfigureForDns field value if set, zero value otherwise.
func (o *RecordHost) GetConfigureForDns() bool {
	if o == nil || IsNil(o.ConfigureForDns) {
		var ret bool
		return ret
	}
	return *o.ConfigureForDns
}

// GetConfigureForDnsOk returns a tuple with the ConfigureForDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetConfigureForDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigureForDns) {
		return nil, false
	}
	return o.ConfigureForDns, true
}

// HasConfigureForDns returns a boolean if a field has been set.
func (o *RecordHost) HasConfigureForDns() bool {
	if o != nil && !IsNil(o.ConfigureForDns) {
		return true
	}

	return false
}

// SetConfigureForDns gets a reference to the given bool and assigns it to the ConfigureForDns field.
func (o *RecordHost) SetConfigureForDns(v bool) {
	o.ConfigureForDns = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordHost) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordHost) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordHost) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetDdnsProtected returns the DdnsProtected field value if set, zero value otherwise.
func (o *RecordHost) GetDdnsProtected() bool {
	if o == nil || IsNil(o.DdnsProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsProtected
}

// GetDdnsProtectedOk returns a tuple with the DdnsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDdnsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsProtected) {
		return nil, false
	}
	return o.DdnsProtected, true
}

// HasDdnsProtected returns a boolean if a field has been set.
func (o *RecordHost) HasDdnsProtected() bool {
	if o != nil && !IsNil(o.DdnsProtected) {
		return true
	}

	return false
}

// SetDdnsProtected gets a reference to the given bool and assigns it to the DdnsProtected field.
func (o *RecordHost) SetDdnsProtected(v bool) {
	o.DdnsProtected = &v
}

// GetDeviceDescription returns the DeviceDescription field value if set, zero value otherwise.
func (o *RecordHost) GetDeviceDescription() string {
	if o == nil || IsNil(o.DeviceDescription) {
		var ret string
		return ret
	}
	return *o.DeviceDescription
}

// GetDeviceDescriptionOk returns a tuple with the DeviceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDeviceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceDescription) {
		return nil, false
	}
	return o.DeviceDescription, true
}

// HasDeviceDescription returns a boolean if a field has been set.
func (o *RecordHost) HasDeviceDescription() bool {
	if o != nil && !IsNil(o.DeviceDescription) {
		return true
	}

	return false
}

// SetDeviceDescription gets a reference to the given string and assigns it to the DeviceDescription field.
func (o *RecordHost) SetDeviceDescription(v string) {
	o.DeviceDescription = &v
}

// GetDeviceLocation returns the DeviceLocation field value if set, zero value otherwise.
func (o *RecordHost) GetDeviceLocation() string {
	if o == nil || IsNil(o.DeviceLocation) {
		var ret string
		return ret
	}
	return *o.DeviceLocation
}

// GetDeviceLocationOk returns a tuple with the DeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDeviceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocation) {
		return nil, false
	}
	return o.DeviceLocation, true
}

// HasDeviceLocation returns a boolean if a field has been set.
func (o *RecordHost) HasDeviceLocation() bool {
	if o != nil && !IsNil(o.DeviceLocation) {
		return true
	}

	return false
}

// SetDeviceLocation gets a reference to the given string and assigns it to the DeviceLocation field.
func (o *RecordHost) SetDeviceLocation(v string) {
	o.DeviceLocation = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *RecordHost) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *RecordHost) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *RecordHost) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceVendor returns the DeviceVendor field value if set, zero value otherwise.
func (o *RecordHost) GetDeviceVendor() string {
	if o == nil || IsNil(o.DeviceVendor) {
		var ret string
		return ret
	}
	return *o.DeviceVendor
}

// GetDeviceVendorOk returns a tuple with the DeviceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDeviceVendorOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVendor) {
		return nil, false
	}
	return o.DeviceVendor, true
}

// HasDeviceVendor returns a boolean if a field has been set.
func (o *RecordHost) HasDeviceVendor() bool {
	if o != nil && !IsNil(o.DeviceVendor) {
		return true
	}

	return false
}

// SetDeviceVendor gets a reference to the given string and assigns it to the DeviceVendor field.
func (o *RecordHost) SetDeviceVendor(v string) {
	o.DeviceVendor = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordHost) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordHost) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordHost) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableDiscovery returns the DisableDiscovery field value if set, zero value otherwise.
func (o *RecordHost) GetDisableDiscovery() bool {
	if o == nil || IsNil(o.DisableDiscovery) {
		var ret bool
		return ret
	}
	return *o.DisableDiscovery
}

// GetDisableDiscoveryOk returns a tuple with the DisableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDisableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDiscovery) {
		return nil, false
	}
	return o.DisableDiscovery, true
}

// HasDisableDiscovery returns a boolean if a field has been set.
func (o *RecordHost) HasDisableDiscovery() bool {
	if o != nil && !IsNil(o.DisableDiscovery) {
		return true
	}

	return false
}

// SetDisableDiscovery gets a reference to the given bool and assigns it to the DisableDiscovery field.
func (o *RecordHost) SetDisableDiscovery(v bool) {
	o.DisableDiscovery = &v
}

// GetDnsAliases returns the DnsAliases field value if set, zero value otherwise.
func (o *RecordHost) GetDnsAliases() []string {
	if o == nil || IsNil(o.DnsAliases) {
		var ret []string
		return ret
	}
	return o.DnsAliases
}

// GetDnsAliasesOk returns a tuple with the DnsAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDnsAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsAliases) {
		return nil, false
	}
	return o.DnsAliases, true
}

// HasDnsAliases returns a boolean if a field has been set.
func (o *RecordHost) HasDnsAliases() bool {
	if o != nil && !IsNil(o.DnsAliases) {
		return true
	}

	return false
}

// SetDnsAliases gets a reference to the given []string and assigns it to the DnsAliases field.
func (o *RecordHost) SetDnsAliases(v []string) {
	o.DnsAliases = v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordHost) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordHost) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordHost) SetDnsName(v string) {
	o.DnsName = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *RecordHost) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *RecordHost) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *RecordHost) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordHost) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordHost) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordHost) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIpv4addrs returns the Ipv4addrs field value if set, zero value otherwise.
func (o *RecordHost) GetIpv4addrs() []map[string]interface{} {
	if o == nil || IsNil(o.Ipv4addrs) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Ipv4addrs
}

// GetIpv4addrsOk returns a tuple with the Ipv4addrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetIpv4addrsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Ipv4addrs) {
		return nil, false
	}
	return o.Ipv4addrs, true
}

// HasIpv4addrs returns a boolean if a field has been set.
func (o *RecordHost) HasIpv4addrs() bool {
	if o != nil && !IsNil(o.Ipv4addrs) {
		return true
	}

	return false
}

// SetIpv4addrs gets a reference to the given []map[string]interface{} and assigns it to the Ipv4addrs field.
func (o *RecordHost) SetIpv4addrs(v []map[string]interface{}) {
	o.Ipv4addrs = v
}

// GetIpv6addrs returns the Ipv6addrs field value if set, zero value otherwise.
func (o *RecordHost) GetIpv6addrs() []map[string]interface{} {
	if o == nil || IsNil(o.Ipv6addrs) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Ipv6addrs
}

// GetIpv6addrsOk returns a tuple with the Ipv6addrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetIpv6addrsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Ipv6addrs) {
		return nil, false
	}
	return o.Ipv6addrs, true
}

// HasIpv6addrs returns a boolean if a field has been set.
func (o *RecordHost) HasIpv6addrs() bool {
	if o != nil && !IsNil(o.Ipv6addrs) {
		return true
	}

	return false
}

// SetIpv6addrs gets a reference to the given []map[string]interface{} and assigns it to the Ipv6addrs field.
func (o *RecordHost) SetIpv6addrs(v []map[string]interface{}) {
	o.Ipv6addrs = v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordHost) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordHost) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordHost) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *RecordHost) GetMsAdUserData() RecordHostMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret RecordHostMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetMsAdUserDataOk() (*RecordHostMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *RecordHost) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given RecordHostMsAdUserData and assigns it to the MsAdUserData field.
func (o *RecordHost) SetMsAdUserData(v RecordHostMsAdUserData) {
	o.MsAdUserData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordHost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordHost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordHost) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *RecordHost) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *RecordHost) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *RecordHost) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *RecordHost) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *RecordHost) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *RecordHost) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetRrsetOrder returns the RrsetOrder field value if set, zero value otherwise.
func (o *RecordHost) GetRrsetOrder() string {
	if o == nil || IsNil(o.RrsetOrder) {
		var ret string
		return ret
	}
	return *o.RrsetOrder
}

// GetRrsetOrderOk returns a tuple with the RrsetOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetRrsetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.RrsetOrder) {
		return nil, false
	}
	return o.RrsetOrder, true
}

// HasRrsetOrder returns a boolean if a field has been set.
func (o *RecordHost) HasRrsetOrder() bool {
	if o != nil && !IsNil(o.RrsetOrder) {
		return true
	}

	return false
}

// SetRrsetOrder gets a reference to the given string and assigns it to the RrsetOrder field.
func (o *RecordHost) SetRrsetOrder(v string) {
	o.RrsetOrder = &v
}

// GetSnmp3Credential returns the Snmp3Credential field value if set, zero value otherwise.
func (o *RecordHost) GetSnmp3Credential() RecordHostSnmp3Credential {
	if o == nil || IsNil(o.Snmp3Credential) {
		var ret RecordHostSnmp3Credential
		return ret
	}
	return *o.Snmp3Credential
}

// GetSnmp3CredentialOk returns a tuple with the Snmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetSnmp3CredentialOk() (*RecordHostSnmp3Credential, bool) {
	if o == nil || IsNil(o.Snmp3Credential) {
		return nil, false
	}
	return o.Snmp3Credential, true
}

// HasSnmp3Credential returns a boolean if a field has been set.
func (o *RecordHost) HasSnmp3Credential() bool {
	if o != nil && !IsNil(o.Snmp3Credential) {
		return true
	}

	return false
}

// SetSnmp3Credential gets a reference to the given RecordHostSnmp3Credential and assigns it to the Snmp3Credential field.
func (o *RecordHost) SetSnmp3Credential(v RecordHostSnmp3Credential) {
	o.Snmp3Credential = &v
}

// GetSnmpCredential returns the SnmpCredential field value if set, zero value otherwise.
func (o *RecordHost) GetSnmpCredential() RecordHostSnmpCredential {
	if o == nil || IsNil(o.SnmpCredential) {
		var ret RecordHostSnmpCredential
		return ret
	}
	return *o.SnmpCredential
}

// GetSnmpCredentialOk returns a tuple with the SnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetSnmpCredentialOk() (*RecordHostSnmpCredential, bool) {
	if o == nil || IsNil(o.SnmpCredential) {
		return nil, false
	}
	return o.SnmpCredential, true
}

// HasSnmpCredential returns a boolean if a field has been set.
func (o *RecordHost) HasSnmpCredential() bool {
	if o != nil && !IsNil(o.SnmpCredential) {
		return true
	}

	return false
}

// SetSnmpCredential gets a reference to the given RecordHostSnmpCredential and assigns it to the SnmpCredential field.
func (o *RecordHost) SetSnmpCredential(v RecordHostSnmpCredential) {
	o.SnmpCredential = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordHost) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordHost) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordHost) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseCliCredentials returns the UseCliCredentials field value if set, zero value otherwise.
func (o *RecordHost) GetUseCliCredentials() bool {
	if o == nil || IsNil(o.UseCliCredentials) {
		var ret bool
		return ret
	}
	return *o.UseCliCredentials
}

// GetUseCliCredentialsOk returns a tuple with the UseCliCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetUseCliCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCliCredentials) {
		return nil, false
	}
	return o.UseCliCredentials, true
}

// HasUseCliCredentials returns a boolean if a field has been set.
func (o *RecordHost) HasUseCliCredentials() bool {
	if o != nil && !IsNil(o.UseCliCredentials) {
		return true
	}

	return false
}

// SetUseCliCredentials gets a reference to the given bool and assigns it to the UseCliCredentials field.
func (o *RecordHost) SetUseCliCredentials(v bool) {
	o.UseCliCredentials = &v
}

// GetUseDnsEaInheritance returns the UseDnsEaInheritance field value if set, zero value otherwise.
func (o *RecordHost) GetUseDnsEaInheritance() bool {
	if o == nil || IsNil(o.UseDnsEaInheritance) {
		var ret bool
		return ret
	}
	return *o.UseDnsEaInheritance
}

// GetUseDnsEaInheritanceOk returns a tuple with the UseDnsEaInheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetUseDnsEaInheritanceOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnsEaInheritance) {
		return nil, false
	}
	return o.UseDnsEaInheritance, true
}

// HasUseDnsEaInheritance returns a boolean if a field has been set.
func (o *RecordHost) HasUseDnsEaInheritance() bool {
	if o != nil && !IsNil(o.UseDnsEaInheritance) {
		return true
	}

	return false
}

// SetUseDnsEaInheritance gets a reference to the given bool and assigns it to the UseDnsEaInheritance field.
func (o *RecordHost) SetUseDnsEaInheritance(v bool) {
	o.UseDnsEaInheritance = &v
}

// GetUseSnmp3Credential returns the UseSnmp3Credential field value if set, zero value otherwise.
func (o *RecordHost) GetUseSnmp3Credential() bool {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		var ret bool
		return ret
	}
	return *o.UseSnmp3Credential
}

// GetUseSnmp3CredentialOk returns a tuple with the UseSnmp3Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetUseSnmp3CredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmp3Credential) {
		return nil, false
	}
	return o.UseSnmp3Credential, true
}

// HasUseSnmp3Credential returns a boolean if a field has been set.
func (o *RecordHost) HasUseSnmp3Credential() bool {
	if o != nil && !IsNil(o.UseSnmp3Credential) {
		return true
	}

	return false
}

// SetUseSnmp3Credential gets a reference to the given bool and assigns it to the UseSnmp3Credential field.
func (o *RecordHost) SetUseSnmp3Credential(v bool) {
	o.UseSnmp3Credential = &v
}

// GetUseSnmpCredential returns the UseSnmpCredential field value if set, zero value otherwise.
func (o *RecordHost) GetUseSnmpCredential() bool {
	if o == nil || IsNil(o.UseSnmpCredential) {
		var ret bool
		return ret
	}
	return *o.UseSnmpCredential
}

// GetUseSnmpCredentialOk returns a tuple with the UseSnmpCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetUseSnmpCredentialOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmpCredential) {
		return nil, false
	}
	return o.UseSnmpCredential, true
}

// HasUseSnmpCredential returns a boolean if a field has been set.
func (o *RecordHost) HasUseSnmpCredential() bool {
	if o != nil && !IsNil(o.UseSnmpCredential) {
		return true
	}

	return false
}

// SetUseSnmpCredential gets a reference to the given bool and assigns it to the UseSnmpCredential field.
func (o *RecordHost) SetUseSnmpCredential(v bool) {
	o.UseSnmpCredential = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordHost) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordHost) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordHost) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordHost) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordHost) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordHost) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordHost) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHost) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordHost) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordHost) SetZone(v string) {
	o.Zone = &v
}

func (o RecordHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.AllowTelnet) {
		toSerialize["allow_telnet"] = o.AllowTelnet
	}
	if !IsNil(o.CliCredentials) {
		toSerialize["cli_credentials"] = o.CliCredentials
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ConfigureForDns) {
		toSerialize["configure_for_dns"] = o.ConfigureForDns
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.DdnsProtected) {
		toSerialize["ddns_protected"] = o.DdnsProtected
	}
	if !IsNil(o.DeviceDescription) {
		toSerialize["device_description"] = o.DeviceDescription
	}
	if !IsNil(o.DeviceLocation) {
		toSerialize["device_location"] = o.DeviceLocation
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.DeviceVendor) {
		toSerialize["device_vendor"] = o.DeviceVendor
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableDiscovery) {
		toSerialize["disable_discovery"] = o.DisableDiscovery
	}
	if !IsNil(o.DnsAliases) {
		toSerialize["dns_aliases"] = o.DnsAliases
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Ipv4addrs) {
		toSerialize["ipv4addrs"] = o.Ipv4addrs
	}
	if !IsNil(o.Ipv6addrs) {
		toSerialize["ipv6addrs"] = o.Ipv6addrs
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.RrsetOrder) {
		toSerialize["rrset_order"] = o.RrsetOrder
	}
	if !IsNil(o.Snmp3Credential) {
		toSerialize["snmp3_credential"] = o.Snmp3Credential
	}
	if !IsNil(o.SnmpCredential) {
		toSerialize["snmp_credential"] = o.SnmpCredential
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseCliCredentials) {
		toSerialize["use_cli_credentials"] = o.UseCliCredentials
	}
	if !IsNil(o.UseDnsEaInheritance) {
		toSerialize["use_dns_ea_inheritance"] = o.UseDnsEaInheritance
	}
	if !IsNil(o.UseSnmp3Credential) {
		toSerialize["use_snmp3_credential"] = o.UseSnmp3Credential
	}
	if !IsNil(o.UseSnmpCredential) {
		toSerialize["use_snmp_credential"] = o.UseSnmpCredential
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordHost struct {
	value *RecordHost
	isSet bool
}

func (v NullableRecordHost) Get() *RecordHost {
	return v.value
}

func (v *NullableRecordHost) Set(val *RecordHost) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHost) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHost(val *RecordHost) *NullableRecordHost {
	return &NullableRecordHost{value: val, isSet: true}
}

func (v NullableRecordHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
