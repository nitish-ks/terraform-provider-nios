/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordHostIpv4addr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordHostIpv4addr{}

// RecordHostIpv4addr struct for RecordHostIpv4addr
type RecordHostIpv4addr struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The name of the boot file the client must download.
	Bootfile *string `json:"bootfile,omitempty"`
	// The IP address or hostname of the boot file server where the boot file is stored.
	Bootserver *string `json:"bootserver,omitempty"`
	// Set this to True to enable the DHCP configuration for this host address.
	ConfigureForDhcp *bool `json:"configure_for_dhcp,omitempty"`
	// Set this to True to disable the BOOTP settings and deny BOOTP boot requests.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The discovery status of this Host Address.
	DiscoverNowStatus *string                           `json:"discover_now_status,omitempty"`
	DiscoveredData    *RecordHostIpv4addrDiscoveredData `json:"discovered_data,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients. You can specify the duration of time it takes a host to connect to a boot server, such as a TFTP server, and download the file it needs to boot. For example, set a longer lease time if the client downloads an OS (operating system) or configuration file, or set a shorter lease time if the client downloads only configuration changes. Enter the lease time for the preboot execution environment for hosts to boot remotely from a server.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// The host to which the host address belongs, in FQDN format. It is only present when the host address object is not returned as part of a host.
	Host *string `json:"host,omitempty"`
	// If this field is set to false, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreClientRequestedOptions *bool `json:"ignore_client_requested_options,omitempty"`
	// The IPv4 Address of the host.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// This flag reflects whether the MAC address for this host address is invalid.
	IsInvalidMac *bool `json:"is_invalid_mac,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// This field contains the logic filters to be applied on the this host address. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []RecordHostIpv4addrLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The MAC address for this host address.
	Mac *string `json:"mac,omitempty"`
	// Set this to 'MAC_ADDRESS' to assign the IP address to the selected host, provided that the MAC address of the requesting host matches the MAC address that you specify in the field. Set this to 'RESERVED' to reserve this particular IP address for future use, or if the IP address is statically configured on a system (the Infoblox server does not assign the address from a DHCP request).
	MatchClient  *string                         `json:"match_client,omitempty"`
	MsAdUserData *RecordHostIpv4addrMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The network of the host address, in FQDN/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which the host address resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The name in FQDN format and/or IPv4 Address of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []RecordHostIpv4addrOptions `json:"options,omitempty"`
	// The lease time for PXE clients, see *enable_pxe_lease_time* for more information.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// The reference to the reserved interface to which the device belongs.
	ReservedInterface *string `json:"reserved_interface,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Set this to True when using this host address for EA inheritance.
	UseForEaInheritance *bool `json:"use_for_ea_inheritance,omitempty"`
	// Use flag for: ignore_client_requested_options
	UseIgnoreClientRequestedOptions *bool `json:"use_ignore_client_requested_options,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
}

// NewRecordHostIpv4addr instantiates a new RecordHostIpv4addr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordHostIpv4addr() *RecordHostIpv4addr {
	this := RecordHostIpv4addr{}
	return &this
}

// NewRecordHostIpv4addrWithDefaults instantiates a new RecordHostIpv4addr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordHostIpv4addrWithDefaults() *RecordHostIpv4addr {
	this := RecordHostIpv4addr{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordHostIpv4addr) SetRef(v string) {
	o.Ref = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *RecordHostIpv4addr) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *RecordHostIpv4addr) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetConfigureForDhcp returns the ConfigureForDhcp field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetConfigureForDhcp() bool {
	if o == nil || IsNil(o.ConfigureForDhcp) {
		var ret bool
		return ret
	}
	return *o.ConfigureForDhcp
}

// GetConfigureForDhcpOk returns a tuple with the ConfigureForDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetConfigureForDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigureForDhcp) {
		return nil, false
	}
	return o.ConfigureForDhcp, true
}

// HasConfigureForDhcp returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasConfigureForDhcp() bool {
	if o != nil && !IsNil(o.ConfigureForDhcp) {
		return true
	}

	return false
}

// SetConfigureForDhcp gets a reference to the given bool and assigns it to the ConfigureForDhcp field.
func (o *RecordHostIpv4addr) SetConfigureForDhcp(v bool) {
	o.ConfigureForDhcp = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *RecordHostIpv4addr) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *RecordHostIpv4addr) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetDiscoveredData() RecordHostIpv4addrDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret RecordHostIpv4addrDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetDiscoveredDataOk() (*RecordHostIpv4addrDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given RecordHostIpv4addrDiscoveredData and assigns it to the DiscoveredData field.
func (o *RecordHostIpv4addr) SetDiscoveredData(v RecordHostIpv4addrDiscoveredData) {
	o.DiscoveredData = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *RecordHostIpv4addr) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RecordHostIpv4addr) SetHost(v string) {
	o.Host = &v
}

// GetIgnoreClientRequestedOptions returns the IgnoreClientRequestedOptions field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetIgnoreClientRequestedOptions() bool {
	if o == nil || IsNil(o.IgnoreClientRequestedOptions) {
		var ret bool
		return ret
	}
	return *o.IgnoreClientRequestedOptions
}

// GetIgnoreClientRequestedOptionsOk returns a tuple with the IgnoreClientRequestedOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetIgnoreClientRequestedOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreClientRequestedOptions) {
		return nil, false
	}
	return o.IgnoreClientRequestedOptions, true
}

// HasIgnoreClientRequestedOptions returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasIgnoreClientRequestedOptions() bool {
	if o != nil && !IsNil(o.IgnoreClientRequestedOptions) {
		return true
	}

	return false
}

// SetIgnoreClientRequestedOptions gets a reference to the given bool and assigns it to the IgnoreClientRequestedOptions field.
func (o *RecordHostIpv4addr) SetIgnoreClientRequestedOptions(v bool) {
	o.IgnoreClientRequestedOptions = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *RecordHostIpv4addr) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIsInvalidMac returns the IsInvalidMac field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetIsInvalidMac() bool {
	if o == nil || IsNil(o.IsInvalidMac) {
		var ret bool
		return ret
	}
	return *o.IsInvalidMac
}

// GetIsInvalidMacOk returns a tuple with the IsInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetIsInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInvalidMac) {
		return nil, false
	}
	return o.IsInvalidMac, true
}

// HasIsInvalidMac returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasIsInvalidMac() bool {
	if o != nil && !IsNil(o.IsInvalidMac) {
		return true
	}

	return false
}

// SetIsInvalidMac gets a reference to the given bool and assigns it to the IsInvalidMac field.
func (o *RecordHostIpv4addr) SetIsInvalidMac(v bool) {
	o.IsInvalidMac = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordHostIpv4addr) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetLogicFilterRules() []RecordHostIpv4addrLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []RecordHostIpv4addrLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetLogicFilterRulesOk() ([]RecordHostIpv4addrLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []RecordHostIpv4addrLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *RecordHostIpv4addr) SetLogicFilterRules(v []RecordHostIpv4addrLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *RecordHostIpv4addr) SetMac(v string) {
	o.Mac = &v
}

// GetMatchClient returns the MatchClient field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetMatchClient() string {
	if o == nil || IsNil(o.MatchClient) {
		var ret string
		return ret
	}
	return *o.MatchClient
}

// GetMatchClientOk returns a tuple with the MatchClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetMatchClientOk() (*string, bool) {
	if o == nil || IsNil(o.MatchClient) {
		return nil, false
	}
	return o.MatchClient, true
}

// HasMatchClient returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasMatchClient() bool {
	if o != nil && !IsNil(o.MatchClient) {
		return true
	}

	return false
}

// SetMatchClient gets a reference to the given string and assigns it to the MatchClient field.
func (o *RecordHostIpv4addr) SetMatchClient(v string) {
	o.MatchClient = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetMsAdUserData() RecordHostIpv4addrMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret RecordHostIpv4addrMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetMsAdUserDataOk() (*RecordHostIpv4addrMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given RecordHostIpv4addrMsAdUserData and assigns it to the MsAdUserData field.
func (o *RecordHostIpv4addr) SetMsAdUserData(v RecordHostIpv4addrMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RecordHostIpv4addr) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *RecordHostIpv4addr) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *RecordHostIpv4addr) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetOptions() []RecordHostIpv4addrOptions {
	if o == nil || IsNil(o.Options) {
		var ret []RecordHostIpv4addrOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetOptionsOk() ([]RecordHostIpv4addrOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []RecordHostIpv4addrOptions and assigns it to the Options field.
func (o *RecordHostIpv4addr) SetOptions(v []RecordHostIpv4addrOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *RecordHostIpv4addr) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetReservedInterface returns the ReservedInterface field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetReservedInterface() string {
	if o == nil || IsNil(o.ReservedInterface) {
		var ret string
		return ret
	}
	return *o.ReservedInterface
}

// GetReservedInterfaceOk returns a tuple with the ReservedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetReservedInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedInterface) {
		return nil, false
	}
	return o.ReservedInterface, true
}

// HasReservedInterface returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasReservedInterface() bool {
	if o != nil && !IsNil(o.ReservedInterface) {
		return true
	}

	return false
}

// SetReservedInterface gets a reference to the given string and assigns it to the ReservedInterface field.
func (o *RecordHostIpv4addr) SetReservedInterface(v string) {
	o.ReservedInterface = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *RecordHostIpv4addr) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *RecordHostIpv4addr) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *RecordHostIpv4addr) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseForEaInheritance returns the UseForEaInheritance field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseForEaInheritance() bool {
	if o == nil || IsNil(o.UseForEaInheritance) {
		var ret bool
		return ret
	}
	return *o.UseForEaInheritance
}

// GetUseForEaInheritanceOk returns a tuple with the UseForEaInheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseForEaInheritanceOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForEaInheritance) {
		return nil, false
	}
	return o.UseForEaInheritance, true
}

// HasUseForEaInheritance returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseForEaInheritance() bool {
	if o != nil && !IsNil(o.UseForEaInheritance) {
		return true
	}

	return false
}

// SetUseForEaInheritance gets a reference to the given bool and assigns it to the UseForEaInheritance field.
func (o *RecordHostIpv4addr) SetUseForEaInheritance(v bool) {
	o.UseForEaInheritance = &v
}

// GetUseIgnoreClientRequestedOptions returns the UseIgnoreClientRequestedOptions field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseIgnoreClientRequestedOptions() bool {
	if o == nil || IsNil(o.UseIgnoreClientRequestedOptions) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreClientRequestedOptions
}

// GetUseIgnoreClientRequestedOptionsOk returns a tuple with the UseIgnoreClientRequestedOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseIgnoreClientRequestedOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreClientRequestedOptions) {
		return nil, false
	}
	return o.UseIgnoreClientRequestedOptions, true
}

// HasUseIgnoreClientRequestedOptions returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseIgnoreClientRequestedOptions() bool {
	if o != nil && !IsNil(o.UseIgnoreClientRequestedOptions) {
		return true
	}

	return false
}

// SetUseIgnoreClientRequestedOptions gets a reference to the given bool and assigns it to the UseIgnoreClientRequestedOptions field.
func (o *RecordHostIpv4addr) SetUseIgnoreClientRequestedOptions(v bool) {
	o.UseIgnoreClientRequestedOptions = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *RecordHostIpv4addr) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *RecordHostIpv4addr) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *RecordHostIpv4addr) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *RecordHostIpv4addr) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv4addr) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *RecordHostIpv4addr) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *RecordHostIpv4addr) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

func (o RecordHostIpv4addr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordHostIpv4addr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.ConfigureForDhcp) {
		toSerialize["configure_for_dhcp"] = o.ConfigureForDhcp
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.IgnoreClientRequestedOptions) {
		toSerialize["ignore_client_requested_options"] = o.IgnoreClientRequestedOptions
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.IsInvalidMac) {
		toSerialize["is_invalid_mac"] = o.IsInvalidMac
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MatchClient) {
		toSerialize["match_client"] = o.MatchClient
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.ReservedInterface) {
		toSerialize["reserved_interface"] = o.ReservedInterface
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseForEaInheritance) {
		toSerialize["use_for_ea_inheritance"] = o.UseForEaInheritance
	}
	if !IsNil(o.UseIgnoreClientRequestedOptions) {
		toSerialize["use_ignore_client_requested_options"] = o.UseIgnoreClientRequestedOptions
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	return toSerialize, nil
}

type NullableRecordHostIpv4addr struct {
	value *RecordHostIpv4addr
	isSet bool
}

func (v NullableRecordHostIpv4addr) Get() *RecordHostIpv4addr {
	return v.value
}

func (v *NullableRecordHostIpv4addr) Set(val *RecordHostIpv4addr) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHostIpv4addr) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHostIpv4addr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHostIpv4addr(val *RecordHostIpv4addr) *NullableRecordHostIpv4addr {
	return &NullableRecordHostIpv4addr{value: val, isSet: true}
}

func (v NullableRecordHostIpv4addr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHostIpv4addr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
