/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordHostIpv6addrLogicFilterRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordHostIpv6addrLogicFilterRules{}

// RecordHostIpv6addrLogicFilterRules struct for RecordHostIpv6addrLogicFilterRules
type RecordHostIpv6addrLogicFilterRules struct {
	// The filter name.
	Filter *string `json:"filter,omitempty"`
	// The filter type. Valid values are: * MAC * NAC * Option
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecordHostIpv6addrLogicFilterRules RecordHostIpv6addrLogicFilterRules

// NewRecordHostIpv6addrLogicFilterRules instantiates a new RecordHostIpv6addrLogicFilterRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordHostIpv6addrLogicFilterRules() *RecordHostIpv6addrLogicFilterRules {
	this := RecordHostIpv6addrLogicFilterRules{}
	return &this
}

// NewRecordHostIpv6addrLogicFilterRulesWithDefaults instantiates a new RecordHostIpv6addrLogicFilterRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordHostIpv6addrLogicFilterRulesWithDefaults() *RecordHostIpv6addrLogicFilterRules {
	this := RecordHostIpv6addrLogicFilterRules{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *RecordHostIpv6addrLogicFilterRules) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addrLogicFilterRules) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *RecordHostIpv6addrLogicFilterRules) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *RecordHostIpv6addrLogicFilterRules) SetFilter(v string) {
	o.Filter = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecordHostIpv6addrLogicFilterRules) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addrLogicFilterRules) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecordHostIpv6addrLogicFilterRules) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RecordHostIpv6addrLogicFilterRules) SetType(v string) {
	o.Type = &v
}

func (o RecordHostIpv6addrLogicFilterRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordHostIpv6addrLogicFilterRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecordHostIpv6addrLogicFilterRules) UnmarshalJSON(data []byte) (err error) {
	varRecordHostIpv6addrLogicFilterRules := _RecordHostIpv6addrLogicFilterRules{}

	err = json.Unmarshal(data, &varRecordHostIpv6addrLogicFilterRules)

	if err != nil {
		return err
	}

	*o = RecordHostIpv6addrLogicFilterRules(varRecordHostIpv6addrLogicFilterRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecordHostIpv6addrLogicFilterRules struct {
	value *RecordHostIpv6addrLogicFilterRules
	isSet bool
}

func (v NullableRecordHostIpv6addrLogicFilterRules) Get() *RecordHostIpv6addrLogicFilterRules {
	return v.value
}

func (v *NullableRecordHostIpv6addrLogicFilterRules) Set(val *RecordHostIpv6addrLogicFilterRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHostIpv6addrLogicFilterRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHostIpv6addrLogicFilterRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHostIpv6addrLogicFilterRules(val *RecordHostIpv6addrLogicFilterRules) *NullableRecordHostIpv6addrLogicFilterRules {
	return &NullableRecordHostIpv6addrLogicFilterRules{value: val, isSet: true}
}

func (v NullableRecordHostIpv6addrLogicFilterRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHostIpv6addrLogicFilterRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
