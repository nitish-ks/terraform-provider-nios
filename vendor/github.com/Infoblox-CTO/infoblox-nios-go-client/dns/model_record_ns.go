/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordNs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordNs{}

// RecordNs struct for RecordNs
type RecordNs struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The list of zone name servers.
	Addresses []RecordNsAddresses `json:"addresses,omitempty"`
	CloudInfo *RecordNsCloudInfo  `json:"cloud_info,omitempty"`
	// The record creator.
	Creator *string `json:"creator,omitempty"`
	// The name of the NS record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The MS delegation point name.
	MsDelegationName *string `json:"ms_delegation_name,omitempty"`
	// The name of the NS record in FQDN format. This value can be in unicode format.
	Name *string `json:"name,omitempty"`
	// The domain name of an authoritative server for the redirected zone.
	Nameserver *string `json:"nameserver,omitempty"`
	// The host name policy for the record.
	Policy *string `json:"policy,omitempty"`
	// The name of the DNS view in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordNs instantiates a new RecordNs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordNs() *RecordNs {
	this := RecordNs{}
	return &this
}

// NewRecordNsWithDefaults instantiates a new RecordNs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordNsWithDefaults() *RecordNs {
	this := RecordNs{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordNs) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordNs) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordNs) SetRef(v string) {
	o.Ref = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *RecordNs) GetAddresses() []RecordNsAddresses {
	if o == nil || IsNil(o.Addresses) {
		var ret []RecordNsAddresses
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetAddressesOk() ([]RecordNsAddresses, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *RecordNs) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []RecordNsAddresses and assigns it to the Addresses field.
func (o *RecordNs) SetAddresses(v []RecordNsAddresses) {
	o.Addresses = v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordNs) GetCloudInfo() RecordNsCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordNsCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetCloudInfoOk() (*RecordNsCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordNs) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordNsCloudInfo and assigns it to the CloudInfo field.
func (o *RecordNs) SetCloudInfo(v RecordNsCloudInfo) {
	o.CloudInfo = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordNs) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordNs) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordNs) SetCreator(v string) {
	o.Creator = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordNs) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordNs) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordNs) SetDnsName(v string) {
	o.DnsName = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordNs) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordNs) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordNs) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetMsDelegationName returns the MsDelegationName field value if set, zero value otherwise.
func (o *RecordNs) GetMsDelegationName() string {
	if o == nil || IsNil(o.MsDelegationName) {
		var ret string
		return ret
	}
	return *o.MsDelegationName
}

// GetMsDelegationNameOk returns a tuple with the MsDelegationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetMsDelegationNameOk() (*string, bool) {
	if o == nil || IsNil(o.MsDelegationName) {
		return nil, false
	}
	return o.MsDelegationName, true
}

// HasMsDelegationName returns a boolean if a field has been set.
func (o *RecordNs) HasMsDelegationName() bool {
	if o != nil && !IsNil(o.MsDelegationName) {
		return true
	}

	return false
}

// SetMsDelegationName gets a reference to the given string and assigns it to the MsDelegationName field.
func (o *RecordNs) SetMsDelegationName(v string) {
	o.MsDelegationName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordNs) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordNs) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordNs) SetName(v string) {
	o.Name = &v
}

// GetNameserver returns the Nameserver field value if set, zero value otherwise.
func (o *RecordNs) GetNameserver() string {
	if o == nil || IsNil(o.Nameserver) {
		var ret string
		return ret
	}
	return *o.Nameserver
}

// GetNameserverOk returns a tuple with the Nameserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetNameserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nameserver) {
		return nil, false
	}
	return o.Nameserver, true
}

// HasNameserver returns a boolean if a field has been set.
func (o *RecordNs) HasNameserver() bool {
	if o != nil && !IsNil(o.Nameserver) {
		return true
	}

	return false
}

// SetNameserver gets a reference to the given string and assigns it to the Nameserver field.
func (o *RecordNs) SetNameserver(v string) {
	o.Nameserver = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *RecordNs) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *RecordNs) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *RecordNs) SetPolicy(v string) {
	o.Policy = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordNs) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordNs) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordNs) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordNs) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNs) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordNs) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordNs) SetZone(v string) {
	o.Zone = &v
}

func (o RecordNs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordNs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.MsDelegationName) {
		toSerialize["ms_delegation_name"] = o.MsDelegationName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nameserver) {
		toSerialize["nameserver"] = o.Nameserver
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordNs struct {
	value *RecordNs
	isSet bool
}

func (v NullableRecordNs) Get() *RecordNs {
	return v.value
}

func (v *NullableRecordNs) Set(val *RecordNs) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordNs) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordNs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordNs(val *RecordNs) *NullableRecordNs {
	return &NullableRecordNs{value: val, isSet: true}
}

func (v NullableRecordNs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordNs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
