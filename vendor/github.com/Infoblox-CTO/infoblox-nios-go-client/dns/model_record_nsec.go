/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordNsec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordNsec{}

// RecordNsec struct for RecordNsec
type RecordNsec struct {
	// The reference to the object.
	Ref       *string              `json:"_ref,omitempty"`
	CloudInfo *RecordNsecCloudInfo `json:"cloud_info,omitempty"`
	// Time that the record was created.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// Creator of the record.
	Creator *string `json:"creator,omitempty"`
	// Name for an NSEC record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Name of the next owner in punycode format.
	DnsNextOwnerName *string `json:"dns_next_owner_name,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The name of the NSEC record in FQDN format.
	Name *string `json:"name,omitempty"`
	// Name of the next owner that has authoritative data or that contains a delegation point NS record.
	NextOwnerName *string `json:"next_owner_name,omitempty"`
	// The RRSet types that exist at the original owner name of the NSEC RR.
	RrsetTypes []string `json:"rrset_types,omitempty"`
	// The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordNsec instantiates a new RecordNsec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordNsec() *RecordNsec {
	this := RecordNsec{}
	return &this
}

// NewRecordNsecWithDefaults instantiates a new RecordNsec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordNsecWithDefaults() *RecordNsec {
	this := RecordNsec{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordNsec) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordNsec) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordNsec) SetRef(v string) {
	o.Ref = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordNsec) GetCloudInfo() RecordNsecCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordNsecCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetCloudInfoOk() (*RecordNsecCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordNsec) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordNsecCloudInfo and assigns it to the CloudInfo field.
func (o *RecordNsec) SetCloudInfo(v RecordNsecCloudInfo) {
	o.CloudInfo = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordNsec) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordNsec) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordNsec) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordNsec) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordNsec) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordNsec) SetCreator(v string) {
	o.Creator = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordNsec) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordNsec) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordNsec) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDnsNextOwnerName returns the DnsNextOwnerName field value if set, zero value otherwise.
func (o *RecordNsec) GetDnsNextOwnerName() string {
	if o == nil || IsNil(o.DnsNextOwnerName) {
		var ret string
		return ret
	}
	return *o.DnsNextOwnerName
}

// GetDnsNextOwnerNameOk returns a tuple with the DnsNextOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetDnsNextOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsNextOwnerName) {
		return nil, false
	}
	return o.DnsNextOwnerName, true
}

// HasDnsNextOwnerName returns a boolean if a field has been set.
func (o *RecordNsec) HasDnsNextOwnerName() bool {
	if o != nil && !IsNil(o.DnsNextOwnerName) {
		return true
	}

	return false
}

// SetDnsNextOwnerName gets a reference to the given string and assigns it to the DnsNextOwnerName field.
func (o *RecordNsec) SetDnsNextOwnerName(v string) {
	o.DnsNextOwnerName = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordNsec) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordNsec) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordNsec) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordNsec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordNsec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordNsec) SetName(v string) {
	o.Name = &v
}

// GetNextOwnerName returns the NextOwnerName field value if set, zero value otherwise.
func (o *RecordNsec) GetNextOwnerName() string {
	if o == nil || IsNil(o.NextOwnerName) {
		var ret string
		return ret
	}
	return *o.NextOwnerName
}

// GetNextOwnerNameOk returns a tuple with the NextOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetNextOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.NextOwnerName) {
		return nil, false
	}
	return o.NextOwnerName, true
}

// HasNextOwnerName returns a boolean if a field has been set.
func (o *RecordNsec) HasNextOwnerName() bool {
	if o != nil && !IsNil(o.NextOwnerName) {
		return true
	}

	return false
}

// SetNextOwnerName gets a reference to the given string and assigns it to the NextOwnerName field.
func (o *RecordNsec) SetNextOwnerName(v string) {
	o.NextOwnerName = &v
}

// GetRrsetTypes returns the RrsetTypes field value if set, zero value otherwise.
func (o *RecordNsec) GetRrsetTypes() []string {
	if o == nil || IsNil(o.RrsetTypes) {
		var ret []string
		return ret
	}
	return o.RrsetTypes
}

// GetRrsetTypesOk returns a tuple with the RrsetTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetRrsetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RrsetTypes) {
		return nil, false
	}
	return o.RrsetTypes, true
}

// HasRrsetTypes returns a boolean if a field has been set.
func (o *RecordNsec) HasRrsetTypes() bool {
	if o != nil && !IsNil(o.RrsetTypes) {
		return true
	}

	return false
}

// SetRrsetTypes gets a reference to the given []string and assigns it to the RrsetTypes field.
func (o *RecordNsec) SetRrsetTypes(v []string) {
	o.RrsetTypes = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordNsec) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordNsec) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordNsec) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordNsec) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordNsec) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordNsec) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordNsec) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordNsec) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordNsec) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordNsec) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordNsec) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordNsec) SetZone(v string) {
	o.Zone = &v
}

func (o RecordNsec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordNsec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DnsNextOwnerName) {
		toSerialize["dns_next_owner_name"] = o.DnsNextOwnerName
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextOwnerName) {
		toSerialize["next_owner_name"] = o.NextOwnerName
	}
	if !IsNil(o.RrsetTypes) {
		toSerialize["rrset_types"] = o.RrsetTypes
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordNsec struct {
	value *RecordNsec
	isSet bool
}

func (v NullableRecordNsec) Get() *RecordNsec {
	return v.value
}

func (v *NullableRecordNsec) Set(val *RecordNsec) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordNsec) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordNsec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordNsec(val *RecordNsec) *NullableRecordNsec {
	return &NullableRecordNsec{value: val, isSet: true}
}

func (v NullableRecordNsec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordNsec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
