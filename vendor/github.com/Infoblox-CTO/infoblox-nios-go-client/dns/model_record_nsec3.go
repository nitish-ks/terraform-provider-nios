/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordNsec3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordNsec3{}

// RecordNsec3 struct for RecordNsec3
type RecordNsec3 struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The hash algorithm that was used.
	Algorithm *string               `json:"algorithm,omitempty"`
	CloudInfo *RecordNsec3CloudInfo `json:"cloud_info,omitempty"`
	// The creation time of the record.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// Creator of the record.
	Creator *string `json:"creator,omitempty"`
	// Name for an NSEC3 record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// The set of 8 one-bit flags, of which only one flag, the Opt-Out flag, is defined by RFC 5155. The Opt-Out flag indicates whether the NSEC3 record covers unsigned delegations.
	Flags *int64 `json:"flags,omitempty"`
	// The number of times the hash function was performed.
	Iterations *int64 `json:"iterations,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The name of the NSEC3 record in FQDN format.
	Name *string `json:"name,omitempty"`
	// The hashed next owner name that has authoritative data or that contains a delegation point NS record.
	NextOwnerName *string `json:"next_owner_name,omitempty"`
	// The RRSet types that exist at the original owner name of the NSEC3 RR.
	RrsetTypes []string `json:"rrset_types,omitempty"`
	// A series of case-insensitive hexadecimal digits. It is appended to the original owner name as protection against pre-calculated dictionary attacks. A new salt value is generated when ZSK rolls over. You can control the period of the rollover. For random salt values, the selected length is between one and 15 octets.
	Salt *string `json:"salt,omitempty"`
	// The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordNsec3 instantiates a new RecordNsec3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordNsec3() *RecordNsec3 {
	this := RecordNsec3{}
	return &this
}

// NewRecordNsec3WithDefaults instantiates a new RecordNsec3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordNsec3WithDefaults() *RecordNsec3 {
	this := RecordNsec3{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordNsec3) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordNsec3) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordNsec3) SetRef(v string) {
	o.Ref = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *RecordNsec3) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *RecordNsec3) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *RecordNsec3) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordNsec3) GetCloudInfo() RecordNsec3CloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordNsec3CloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetCloudInfoOk() (*RecordNsec3CloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordNsec3) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordNsec3CloudInfo and assigns it to the CloudInfo field.
func (o *RecordNsec3) SetCloudInfo(v RecordNsec3CloudInfo) {
	o.CloudInfo = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordNsec3) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordNsec3) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordNsec3) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordNsec3) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordNsec3) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordNsec3) SetCreator(v string) {
	o.Creator = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordNsec3) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordNsec3) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordNsec3) SetDnsName(v string) {
	o.DnsName = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *RecordNsec3) GetFlags() int64 {
	if o == nil || IsNil(o.Flags) {
		var ret int64
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetFlagsOk() (*int64, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *RecordNsec3) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given int64 and assigns it to the Flags field.
func (o *RecordNsec3) SetFlags(v int64) {
	o.Flags = &v
}

// GetIterations returns the Iterations field value if set, zero value otherwise.
func (o *RecordNsec3) GetIterations() int64 {
	if o == nil || IsNil(o.Iterations) {
		var ret int64
		return ret
	}
	return *o.Iterations
}

// GetIterationsOk returns a tuple with the Iterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetIterationsOk() (*int64, bool) {
	if o == nil || IsNil(o.Iterations) {
		return nil, false
	}
	return o.Iterations, true
}

// HasIterations returns a boolean if a field has been set.
func (o *RecordNsec3) HasIterations() bool {
	if o != nil && !IsNil(o.Iterations) {
		return true
	}

	return false
}

// SetIterations gets a reference to the given int64 and assigns it to the Iterations field.
func (o *RecordNsec3) SetIterations(v int64) {
	o.Iterations = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordNsec3) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordNsec3) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordNsec3) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordNsec3) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordNsec3) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordNsec3) SetName(v string) {
	o.Name = &v
}

// GetNextOwnerName returns the NextOwnerName field value if set, zero value otherwise.
func (o *RecordNsec3) GetNextOwnerName() string {
	if o == nil || IsNil(o.NextOwnerName) {
		var ret string
		return ret
	}
	return *o.NextOwnerName
}

// GetNextOwnerNameOk returns a tuple with the NextOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetNextOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.NextOwnerName) {
		return nil, false
	}
	return o.NextOwnerName, true
}

// HasNextOwnerName returns a boolean if a field has been set.
func (o *RecordNsec3) HasNextOwnerName() bool {
	if o != nil && !IsNil(o.NextOwnerName) {
		return true
	}

	return false
}

// SetNextOwnerName gets a reference to the given string and assigns it to the NextOwnerName field.
func (o *RecordNsec3) SetNextOwnerName(v string) {
	o.NextOwnerName = &v
}

// GetRrsetTypes returns the RrsetTypes field value if set, zero value otherwise.
func (o *RecordNsec3) GetRrsetTypes() []string {
	if o == nil || IsNil(o.RrsetTypes) {
		var ret []string
		return ret
	}
	return o.RrsetTypes
}

// GetRrsetTypesOk returns a tuple with the RrsetTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetRrsetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RrsetTypes) {
		return nil, false
	}
	return o.RrsetTypes, true
}

// HasRrsetTypes returns a boolean if a field has been set.
func (o *RecordNsec3) HasRrsetTypes() bool {
	if o != nil && !IsNil(o.RrsetTypes) {
		return true
	}

	return false
}

// SetRrsetTypes gets a reference to the given []string and assigns it to the RrsetTypes field.
func (o *RecordNsec3) SetRrsetTypes(v []string) {
	o.RrsetTypes = v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *RecordNsec3) GetSalt() string {
	if o == nil || IsNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetSaltOk() (*string, bool) {
	if o == nil || IsNil(o.Salt) {
		return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *RecordNsec3) HasSalt() bool {
	if o != nil && !IsNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *RecordNsec3) SetSalt(v string) {
	o.Salt = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordNsec3) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordNsec3) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordNsec3) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordNsec3) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordNsec3) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordNsec3) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordNsec3) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordNsec3) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordNsec3) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordNsec3) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNsec3) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordNsec3) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordNsec3) SetZone(v string) {
	o.Zone = &v
}

func (o RecordNsec3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordNsec3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.Iterations) {
		toSerialize["iterations"] = o.Iterations
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextOwnerName) {
		toSerialize["next_owner_name"] = o.NextOwnerName
	}
	if !IsNil(o.RrsetTypes) {
		toSerialize["rrset_types"] = o.RrsetTypes
	}
	if !IsNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordNsec3 struct {
	value *RecordNsec3
	isSet bool
}

func (v NullableRecordNsec3) Get() *RecordNsec3 {
	return v.value
}

func (v *NullableRecordNsec3) Set(val *RecordNsec3) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordNsec3) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordNsec3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordNsec3(val *RecordNsec3) *NullableRecordNsec3 {
	return &NullableRecordNsec3{value: val, isSet: true}
}

func (v NullableRecordNsec3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordNsec3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
