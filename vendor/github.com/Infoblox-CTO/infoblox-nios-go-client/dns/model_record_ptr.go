/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordPtr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordPtr{}

// RecordPtr struct for RecordPtr
type RecordPtr struct {
	// The reference to the object.
	Ref                *string                      `json:"_ref,omitempty"`
	AwsRte53RecordInfo *RecordPtrAwsRte53RecordInfo `json:"aws_rte53_record_info,omitempty"`
	CloudInfo          *RecordPtrCloudInfo          `json:"cloud_info,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The time of the record creation in Epoch seconds format.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.
	Creator *string `json:"creator,omitempty"`
	// The GSS-TSIG principal that owns this record.
	DdnsPrincipal *string `json:"ddns_principal,omitempty"`
	// Determines if the DDNS updates for this record are allowed or not.
	DdnsProtected *bool `json:"ddns_protected,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable        *bool                    `json:"disable,omitempty"`
	DiscoveredData *RecordPtrDiscoveredData `json:"discovered_data,omitempty"`
	// The name for a DNS PTR record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// The domain name of the DNS PTR record in punycode format.
	DnsPtrdname *string `json:"dns_ptrdname,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Determines if the reclamation is allowed for the record or not.
	ForbidReclamation *bool              `json:"forbid_reclamation,omitempty"`
	Ipv4addr          *RecordPtrIpv4addr `json:"ipv4addr,omitempty"`
	FuncCall          *FuncCall          `json:"func_call,omitempty"`
	Ipv6addr          *RecordPtrIpv6addr `json:"ipv6addr,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried  *int64                 `json:"last_queried,omitempty"`
	MsAdUserData *RecordPtrMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The name of the DNS PTR record in FQDN format.
	Name *string `json:"name,omitempty"`
	// The domain name of the DNS PTR record in FQDN format.
	Ptrdname *string `json:"ptrdname,omitempty"`
	// Determines if the record is reclaimable or not.
	Reclaimable *bool `json:"reclaimable,omitempty"`
	// The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.
	SharedRecordGroup *string `json:"shared_record_group,omitempty"`
	// Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, that the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// Name of the DNS View in which the record resides, for example \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. For example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordPtr instantiates a new RecordPtr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordPtr() *RecordPtr {
	this := RecordPtr{}
	return &this
}

// NewRecordPtrWithDefaults instantiates a new RecordPtr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordPtrWithDefaults() *RecordPtr {
	this := RecordPtr{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordPtr) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordPtr) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordPtr) SetRef(v string) {
	o.Ref = &v
}

// GetAwsRte53RecordInfo returns the AwsRte53RecordInfo field value if set, zero value otherwise.
func (o *RecordPtr) GetAwsRte53RecordInfo() RecordPtrAwsRte53RecordInfo {
	if o == nil || IsNil(o.AwsRte53RecordInfo) {
		var ret RecordPtrAwsRte53RecordInfo
		return ret
	}
	return *o.AwsRte53RecordInfo
}

// GetAwsRte53RecordInfoOk returns a tuple with the AwsRte53RecordInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetAwsRte53RecordInfoOk() (*RecordPtrAwsRte53RecordInfo, bool) {
	if o == nil || IsNil(o.AwsRte53RecordInfo) {
		return nil, false
	}
	return o.AwsRte53RecordInfo, true
}

// HasAwsRte53RecordInfo returns a boolean if a field has been set.
func (o *RecordPtr) HasAwsRte53RecordInfo() bool {
	if o != nil && !IsNil(o.AwsRte53RecordInfo) {
		return true
	}

	return false
}

// SetAwsRte53RecordInfo gets a reference to the given RecordPtrAwsRte53RecordInfo and assigns it to the AwsRte53RecordInfo field.
func (o *RecordPtr) SetAwsRte53RecordInfo(v RecordPtrAwsRte53RecordInfo) {
	o.AwsRte53RecordInfo = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordPtr) GetCloudInfo() RecordPtrCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordPtrCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetCloudInfoOk() (*RecordPtrCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordPtr) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordPtrCloudInfo and assigns it to the CloudInfo field.
func (o *RecordPtr) SetCloudInfo(v RecordPtrCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordPtr) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordPtr) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordPtr) SetComment(v string) {
	o.Comment = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordPtr) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordPtr) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordPtr) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordPtr) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordPtr) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordPtr) SetCreator(v string) {
	o.Creator = &v
}

// GetDdnsPrincipal returns the DdnsPrincipal field value if set, zero value otherwise.
func (o *RecordPtr) GetDdnsPrincipal() string {
	if o == nil || IsNil(o.DdnsPrincipal) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipal
}

// GetDdnsPrincipalOk returns a tuple with the DdnsPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDdnsPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipal) {
		return nil, false
	}
	return o.DdnsPrincipal, true
}

// HasDdnsPrincipal returns a boolean if a field has been set.
func (o *RecordPtr) HasDdnsPrincipal() bool {
	if o != nil && !IsNil(o.DdnsPrincipal) {
		return true
	}

	return false
}

// SetDdnsPrincipal gets a reference to the given string and assigns it to the DdnsPrincipal field.
func (o *RecordPtr) SetDdnsPrincipal(v string) {
	o.DdnsPrincipal = &v
}

// GetDdnsProtected returns the DdnsProtected field value if set, zero value otherwise.
func (o *RecordPtr) GetDdnsProtected() bool {
	if o == nil || IsNil(o.DdnsProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsProtected
}

// GetDdnsProtectedOk returns a tuple with the DdnsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDdnsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsProtected) {
		return nil, false
	}
	return o.DdnsProtected, true
}

// HasDdnsProtected returns a boolean if a field has been set.
func (o *RecordPtr) HasDdnsProtected() bool {
	if o != nil && !IsNil(o.DdnsProtected) {
		return true
	}

	return false
}

// SetDdnsProtected gets a reference to the given bool and assigns it to the DdnsProtected field.
func (o *RecordPtr) SetDdnsProtected(v bool) {
	o.DdnsProtected = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordPtr) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordPtr) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordPtr) SetDisable(v bool) {
	o.Disable = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *RecordPtr) GetDiscoveredData() RecordPtrDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret RecordPtrDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDiscoveredDataOk() (*RecordPtrDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *RecordPtr) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given RecordPtrDiscoveredData and assigns it to the DiscoveredData field.
func (o *RecordPtr) SetDiscoveredData(v RecordPtrDiscoveredData) {
	o.DiscoveredData = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordPtr) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordPtr) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordPtr) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDnsPtrdname returns the DnsPtrdname field value if set, zero value otherwise.
func (o *RecordPtr) GetDnsPtrdname() string {
	if o == nil || IsNil(o.DnsPtrdname) {
		var ret string
		return ret
	}
	return *o.DnsPtrdname
}

// GetDnsPtrdnameOk returns a tuple with the DnsPtrdname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetDnsPtrdnameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsPtrdname) {
		return nil, false
	}
	return o.DnsPtrdname, true
}

// HasDnsPtrdname returns a boolean if a field has been set.
func (o *RecordPtr) HasDnsPtrdname() bool {
	if o != nil && !IsNil(o.DnsPtrdname) {
		return true
	}

	return false
}

// SetDnsPtrdname gets a reference to the given string and assigns it to the DnsPtrdname field.
func (o *RecordPtr) SetDnsPtrdname(v string) {
	o.DnsPtrdname = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordPtr) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordPtr) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordPtr) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetForbidReclamation returns the ForbidReclamation field value if set, zero value otherwise.
func (o *RecordPtr) GetForbidReclamation() bool {
	if o == nil || IsNil(o.ForbidReclamation) {
		var ret bool
		return ret
	}
	return *o.ForbidReclamation
}

// GetForbidReclamationOk returns a tuple with the ForbidReclamation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetForbidReclamationOk() (*bool, bool) {
	if o == nil || IsNil(o.ForbidReclamation) {
		return nil, false
	}
	return o.ForbidReclamation, true
}

// HasForbidReclamation returns a boolean if a field has been set.
func (o *RecordPtr) HasForbidReclamation() bool {
	if o != nil && !IsNil(o.ForbidReclamation) {
		return true
	}

	return false
}

// SetForbidReclamation gets a reference to the given bool and assigns it to the ForbidReclamation field.
func (o *RecordPtr) SetForbidReclamation(v bool) {
	o.ForbidReclamation = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *RecordPtr) GetIpv4addr() RecordPtrIpv4addr {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret RecordPtrIpv4addr
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetIpv4addrOk() (*RecordPtrIpv4addr, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *RecordPtr) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given RecordPtrIpv4addr and assigns it to the Ipv4addr field.
func (o *RecordPtr) SetIpv4addr(v RecordPtrIpv4addr) {
	o.Ipv4addr = &v
}

// GetFuncCall returns the FuncCall field value if set, zero value otherwise.
func (o *RecordPtr) GetFuncCall() FuncCall {
	if o == nil || IsNil(o.FuncCall) {
		var ret FuncCall
		return ret
	}
	return *o.FuncCall
}

// GetFuncCallOk returns a tuple with the FuncCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetFuncCallOk() (*FuncCall, bool) {
	if o == nil || IsNil(o.FuncCall) {
		return nil, false
	}
	return o.FuncCall, true
}

// HasFuncCall returns a boolean if a field has been set.
func (o *RecordPtr) HasFuncCall() bool {
	if o != nil && !IsNil(o.FuncCall) {
		return true
	}

	return false
}

// SetFuncCall gets a reference to the given FuncCall and assigns it to the FuncCall field.
func (o *RecordPtr) SetFuncCall(v FuncCall) {
	o.FuncCall = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *RecordPtr) GetIpv6addr() RecordPtrIpv6addr {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret RecordPtrIpv6addr
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetIpv6addrOk() (*RecordPtrIpv6addr, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *RecordPtr) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given RecordPtrIpv6addr and assigns it to the Ipv6addr field.
func (o *RecordPtr) SetIpv6addr(v RecordPtrIpv6addr) {
	o.Ipv6addr = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordPtr) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordPtr) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordPtr) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *RecordPtr) GetMsAdUserData() RecordPtrMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret RecordPtrMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetMsAdUserDataOk() (*RecordPtrMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *RecordPtr) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given RecordPtrMsAdUserData and assigns it to the MsAdUserData field.
func (o *RecordPtr) SetMsAdUserData(v RecordPtrMsAdUserData) {
	o.MsAdUserData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordPtr) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordPtr) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordPtr) SetName(v string) {
	o.Name = &v
}

// GetPtrdname returns the Ptrdname field value if set, zero value otherwise.
func (o *RecordPtr) GetPtrdname() string {
	if o == nil || IsNil(o.Ptrdname) {
		var ret string
		return ret
	}
	return *o.Ptrdname
}

// GetPtrdnameOk returns a tuple with the Ptrdname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetPtrdnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ptrdname) {
		return nil, false
	}
	return o.Ptrdname, true
}

// HasPtrdname returns a boolean if a field has been set.
func (o *RecordPtr) HasPtrdname() bool {
	if o != nil && !IsNil(o.Ptrdname) {
		return true
	}

	return false
}

// SetPtrdname gets a reference to the given string and assigns it to the Ptrdname field.
func (o *RecordPtr) SetPtrdname(v string) {
	o.Ptrdname = &v
}

// GetReclaimable returns the Reclaimable field value if set, zero value otherwise.
func (o *RecordPtr) GetReclaimable() bool {
	if o == nil || IsNil(o.Reclaimable) {
		var ret bool
		return ret
	}
	return *o.Reclaimable
}

// GetReclaimableOk returns a tuple with the Reclaimable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetReclaimableOk() (*bool, bool) {
	if o == nil || IsNil(o.Reclaimable) {
		return nil, false
	}
	return o.Reclaimable, true
}

// HasReclaimable returns a boolean if a field has been set.
func (o *RecordPtr) HasReclaimable() bool {
	if o != nil && !IsNil(o.Reclaimable) {
		return true
	}

	return false
}

// SetReclaimable gets a reference to the given bool and assigns it to the Reclaimable field.
func (o *RecordPtr) SetReclaimable(v bool) {
	o.Reclaimable = &v
}

// GetSharedRecordGroup returns the SharedRecordGroup field value if set, zero value otherwise.
func (o *RecordPtr) GetSharedRecordGroup() string {
	if o == nil || IsNil(o.SharedRecordGroup) {
		var ret string
		return ret
	}
	return *o.SharedRecordGroup
}

// GetSharedRecordGroupOk returns a tuple with the SharedRecordGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetSharedRecordGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SharedRecordGroup) {
		return nil, false
	}
	return o.SharedRecordGroup, true
}

// HasSharedRecordGroup returns a boolean if a field has been set.
func (o *RecordPtr) HasSharedRecordGroup() bool {
	if o != nil && !IsNil(o.SharedRecordGroup) {
		return true
	}

	return false
}

// SetSharedRecordGroup gets a reference to the given string and assigns it to the SharedRecordGroup field.
func (o *RecordPtr) SetSharedRecordGroup(v string) {
	o.SharedRecordGroup = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordPtr) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordPtr) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordPtr) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordPtr) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordPtr) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordPtr) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordPtr) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordPtr) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordPtr) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordPtr) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtr) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordPtr) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordPtr) SetZone(v string) {
	o.Zone = &v
}

func (o RecordPtr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordPtr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AwsRte53RecordInfo) {
		toSerialize["aws_rte53_record_info"] = o.AwsRte53RecordInfo
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DdnsPrincipal) {
		toSerialize["ddns_principal"] = o.DdnsPrincipal
	}
	if !IsNil(o.DdnsProtected) {
		toSerialize["ddns_protected"] = o.DdnsProtected
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DnsPtrdname) {
		toSerialize["dns_ptrdname"] = o.DnsPtrdname
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.ForbidReclamation) {
		toSerialize["forbid_reclamation"] = o.ForbidReclamation
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.FuncCall) {
		toSerialize["func_call"] = o.FuncCall
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ptrdname) {
		toSerialize["ptrdname"] = o.Ptrdname
	}
	if !IsNil(o.Reclaimable) {
		toSerialize["reclaimable"] = o.Reclaimable
	}
	if !IsNil(o.SharedRecordGroup) {
		toSerialize["shared_record_group"] = o.SharedRecordGroup
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordPtr struct {
	value *RecordPtr
	isSet bool
}

func (v NullableRecordPtr) Get() *RecordPtr {
	return v.value
}

func (v *NullableRecordPtr) Set(val *RecordPtr) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordPtr) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordPtr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordPtr(val *RecordPtr) *NullableRecordPtr {
	return &NullableRecordPtr{value: val, isSet: true}
}

func (v NullableRecordPtr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordPtr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
