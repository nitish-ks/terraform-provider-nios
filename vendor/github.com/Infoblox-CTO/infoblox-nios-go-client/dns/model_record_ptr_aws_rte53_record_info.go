/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordPtrAwsRte53RecordInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordPtrAwsRte53RecordInfo{}

// RecordPtrAwsRte53RecordInfo struct for RecordPtrAwsRte53RecordInfo
type RecordPtrAwsRte53RecordInfo struct {
	// DNS name of the alias target.
	AliasTargetDnsName *string `json:"alias_target_dns_name,omitempty"`
	// Hosted zone ID of the alias target.
	AliasTargetHostedZoneId *string `json:"alias_target_hosted_zone_id,omitempty"`
	// Indicates if Amazon Route 53 evaluates the health of the alias target.
	AliasTargetEvaluateTargetHealth *bool `json:"alias_target_evaluate_target_health,omitempty"`
	// Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.
	Failover *string `json:"failover,omitempty"`
	// Continent code for Amazon Route 53 geolocation routing.
	GeolocationContinentCode *string `json:"geolocation_continent_code,omitempty"`
	// Country code for Amazon Route 53 geolocation routing.
	GeolocationCountryCode *string `json:"geolocation_country_code,omitempty"`
	// Subdivision code for Amazon Route 53 geolocation routing.
	GeolocationSubdivisionCode *string `json:"geolocation_subdivision_code,omitempty"`
	// ID of the health check that Amazon Route 53 performs for this resource record.
	HealthCheckId *string `json:"health_check_id,omitempty"`
	// Amazon EC2 region where this resource record resides for latency routing.
	Region *string `json:"region,omitempty"`
	// An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.
	SetIdentifier *string `json:"set_identifier,omitempty"`
	// Type of Amazon Route 53 resource record.
	Type *string `json:"type,omitempty"`
	// Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.
	Weight               *int64 `json:"weight,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecordPtrAwsRte53RecordInfo RecordPtrAwsRte53RecordInfo

// NewRecordPtrAwsRte53RecordInfo instantiates a new RecordPtrAwsRte53RecordInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordPtrAwsRte53RecordInfo() *RecordPtrAwsRte53RecordInfo {
	this := RecordPtrAwsRte53RecordInfo{}
	return &this
}

// NewRecordPtrAwsRte53RecordInfoWithDefaults instantiates a new RecordPtrAwsRte53RecordInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordPtrAwsRte53RecordInfoWithDefaults() *RecordPtrAwsRte53RecordInfo {
	this := RecordPtrAwsRte53RecordInfo{}
	return &this
}

// GetAliasTargetDnsName returns the AliasTargetDnsName field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetDnsName() string {
	if o == nil || IsNil(o.AliasTargetDnsName) {
		var ret string
		return ret
	}
	return *o.AliasTargetDnsName
}

// GetAliasTargetDnsNameOk returns a tuple with the AliasTargetDnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.AliasTargetDnsName) {
		return nil, false
	}
	return o.AliasTargetDnsName, true
}

// HasAliasTargetDnsName returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasAliasTargetDnsName() bool {
	if o != nil && !IsNil(o.AliasTargetDnsName) {
		return true
	}

	return false
}

// SetAliasTargetDnsName gets a reference to the given string and assigns it to the AliasTargetDnsName field.
func (o *RecordPtrAwsRte53RecordInfo) SetAliasTargetDnsName(v string) {
	o.AliasTargetDnsName = &v
}

// GetAliasTargetHostedZoneId returns the AliasTargetHostedZoneId field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetHostedZoneId() string {
	if o == nil || IsNil(o.AliasTargetHostedZoneId) {
		var ret string
		return ret
	}
	return *o.AliasTargetHostedZoneId
}

// GetAliasTargetHostedZoneIdOk returns a tuple with the AliasTargetHostedZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetHostedZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.AliasTargetHostedZoneId) {
		return nil, false
	}
	return o.AliasTargetHostedZoneId, true
}

// HasAliasTargetHostedZoneId returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasAliasTargetHostedZoneId() bool {
	if o != nil && !IsNil(o.AliasTargetHostedZoneId) {
		return true
	}

	return false
}

// SetAliasTargetHostedZoneId gets a reference to the given string and assigns it to the AliasTargetHostedZoneId field.
func (o *RecordPtrAwsRte53RecordInfo) SetAliasTargetHostedZoneId(v string) {
	o.AliasTargetHostedZoneId = &v
}

// GetAliasTargetEvaluateTargetHealth returns the AliasTargetEvaluateTargetHealth field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetEvaluateTargetHealth() bool {
	if o == nil || IsNil(o.AliasTargetEvaluateTargetHealth) {
		var ret bool
		return ret
	}
	return *o.AliasTargetEvaluateTargetHealth
}

// GetAliasTargetEvaluateTargetHealthOk returns a tuple with the AliasTargetEvaluateTargetHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetAliasTargetEvaluateTargetHealthOk() (*bool, bool) {
	if o == nil || IsNil(o.AliasTargetEvaluateTargetHealth) {
		return nil, false
	}
	return o.AliasTargetEvaluateTargetHealth, true
}

// HasAliasTargetEvaluateTargetHealth returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasAliasTargetEvaluateTargetHealth() bool {
	if o != nil && !IsNil(o.AliasTargetEvaluateTargetHealth) {
		return true
	}

	return false
}

// SetAliasTargetEvaluateTargetHealth gets a reference to the given bool and assigns it to the AliasTargetEvaluateTargetHealth field.
func (o *RecordPtrAwsRte53RecordInfo) SetAliasTargetEvaluateTargetHealth(v bool) {
	o.AliasTargetEvaluateTargetHealth = &v
}

// GetFailover returns the Failover field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetFailover() string {
	if o == nil || IsNil(o.Failover) {
		var ret string
		return ret
	}
	return *o.Failover
}

// GetFailoverOk returns a tuple with the Failover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetFailoverOk() (*string, bool) {
	if o == nil || IsNil(o.Failover) {
		return nil, false
	}
	return o.Failover, true
}

// HasFailover returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasFailover() bool {
	if o != nil && !IsNil(o.Failover) {
		return true
	}

	return false
}

// SetFailover gets a reference to the given string and assigns it to the Failover field.
func (o *RecordPtrAwsRte53RecordInfo) SetFailover(v string) {
	o.Failover = &v
}

// GetGeolocationContinentCode returns the GeolocationContinentCode field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationContinentCode() string {
	if o == nil || IsNil(o.GeolocationContinentCode) {
		var ret string
		return ret
	}
	return *o.GeolocationContinentCode
}

// GetGeolocationContinentCodeOk returns a tuple with the GeolocationContinentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationContinentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GeolocationContinentCode) {
		return nil, false
	}
	return o.GeolocationContinentCode, true
}

// HasGeolocationContinentCode returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasGeolocationContinentCode() bool {
	if o != nil && !IsNil(o.GeolocationContinentCode) {
		return true
	}

	return false
}

// SetGeolocationContinentCode gets a reference to the given string and assigns it to the GeolocationContinentCode field.
func (o *RecordPtrAwsRte53RecordInfo) SetGeolocationContinentCode(v string) {
	o.GeolocationContinentCode = &v
}

// GetGeolocationCountryCode returns the GeolocationCountryCode field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationCountryCode() string {
	if o == nil || IsNil(o.GeolocationCountryCode) {
		var ret string
		return ret
	}
	return *o.GeolocationCountryCode
}

// GetGeolocationCountryCodeOk returns a tuple with the GeolocationCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GeolocationCountryCode) {
		return nil, false
	}
	return o.GeolocationCountryCode, true
}

// HasGeolocationCountryCode returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasGeolocationCountryCode() bool {
	if o != nil && !IsNil(o.GeolocationCountryCode) {
		return true
	}

	return false
}

// SetGeolocationCountryCode gets a reference to the given string and assigns it to the GeolocationCountryCode field.
func (o *RecordPtrAwsRte53RecordInfo) SetGeolocationCountryCode(v string) {
	o.GeolocationCountryCode = &v
}

// GetGeolocationSubdivisionCode returns the GeolocationSubdivisionCode field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationSubdivisionCode() string {
	if o == nil || IsNil(o.GeolocationSubdivisionCode) {
		var ret string
		return ret
	}
	return *o.GeolocationSubdivisionCode
}

// GetGeolocationSubdivisionCodeOk returns a tuple with the GeolocationSubdivisionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetGeolocationSubdivisionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GeolocationSubdivisionCode) {
		return nil, false
	}
	return o.GeolocationSubdivisionCode, true
}

// HasGeolocationSubdivisionCode returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasGeolocationSubdivisionCode() bool {
	if o != nil && !IsNil(o.GeolocationSubdivisionCode) {
		return true
	}

	return false
}

// SetGeolocationSubdivisionCode gets a reference to the given string and assigns it to the GeolocationSubdivisionCode field.
func (o *RecordPtrAwsRte53RecordInfo) SetGeolocationSubdivisionCode(v string) {
	o.GeolocationSubdivisionCode = &v
}

// GetHealthCheckId returns the HealthCheckId field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetHealthCheckId() string {
	if o == nil || IsNil(o.HealthCheckId) {
		var ret string
		return ret
	}
	return *o.HealthCheckId
}

// GetHealthCheckIdOk returns a tuple with the HealthCheckId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetHealthCheckIdOk() (*string, bool) {
	if o == nil || IsNil(o.HealthCheckId) {
		return nil, false
	}
	return o.HealthCheckId, true
}

// HasHealthCheckId returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasHealthCheckId() bool {
	if o != nil && !IsNil(o.HealthCheckId) {
		return true
	}

	return false
}

// SetHealthCheckId gets a reference to the given string and assigns it to the HealthCheckId field.
func (o *RecordPtrAwsRte53RecordInfo) SetHealthCheckId(v string) {
	o.HealthCheckId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *RecordPtrAwsRte53RecordInfo) SetRegion(v string) {
	o.Region = &v
}

// GetSetIdentifier returns the SetIdentifier field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetSetIdentifier() string {
	if o == nil || IsNil(o.SetIdentifier) {
		var ret string
		return ret
	}
	return *o.SetIdentifier
}

// GetSetIdentifierOk returns a tuple with the SetIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetSetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.SetIdentifier) {
		return nil, false
	}
	return o.SetIdentifier, true
}

// HasSetIdentifier returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasSetIdentifier() bool {
	if o != nil && !IsNil(o.SetIdentifier) {
		return true
	}

	return false
}

// SetSetIdentifier gets a reference to the given string and assigns it to the SetIdentifier field.
func (o *RecordPtrAwsRte53RecordInfo) SetSetIdentifier(v string) {
	o.SetIdentifier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RecordPtrAwsRte53RecordInfo) SetType(v string) {
	o.Type = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *RecordPtrAwsRte53RecordInfo) GetWeight() int64 {
	if o == nil || IsNil(o.Weight) {
		var ret int64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordPtrAwsRte53RecordInfo) GetWeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *RecordPtrAwsRte53RecordInfo) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int64 and assigns it to the Weight field.
func (o *RecordPtrAwsRte53RecordInfo) SetWeight(v int64) {
	o.Weight = &v
}

func (o RecordPtrAwsRte53RecordInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordPtrAwsRte53RecordInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AliasTargetDnsName) {
		toSerialize["alias_target_dns_name"] = o.AliasTargetDnsName
	}
	if !IsNil(o.AliasTargetHostedZoneId) {
		toSerialize["alias_target_hosted_zone_id"] = o.AliasTargetHostedZoneId
	}
	if !IsNil(o.AliasTargetEvaluateTargetHealth) {
		toSerialize["alias_target_evaluate_target_health"] = o.AliasTargetEvaluateTargetHealth
	}
	if !IsNil(o.Failover) {
		toSerialize["failover"] = o.Failover
	}
	if !IsNil(o.GeolocationContinentCode) {
		toSerialize["geolocation_continent_code"] = o.GeolocationContinentCode
	}
	if !IsNil(o.GeolocationCountryCode) {
		toSerialize["geolocation_country_code"] = o.GeolocationCountryCode
	}
	if !IsNil(o.GeolocationSubdivisionCode) {
		toSerialize["geolocation_subdivision_code"] = o.GeolocationSubdivisionCode
	}
	if !IsNil(o.HealthCheckId) {
		toSerialize["health_check_id"] = o.HealthCheckId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.SetIdentifier) {
		toSerialize["set_identifier"] = o.SetIdentifier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecordPtrAwsRte53RecordInfo) UnmarshalJSON(data []byte) (err error) {
	varRecordPtrAwsRte53RecordInfo := _RecordPtrAwsRte53RecordInfo{}

	err = json.Unmarshal(data, &varRecordPtrAwsRte53RecordInfo)

	if err != nil {
		return err
	}

	*o = RecordPtrAwsRte53RecordInfo(varRecordPtrAwsRte53RecordInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alias_target_dns_name")
		delete(additionalProperties, "alias_target_hosted_zone_id")
		delete(additionalProperties, "alias_target_evaluate_target_health")
		delete(additionalProperties, "failover")
		delete(additionalProperties, "geolocation_continent_code")
		delete(additionalProperties, "geolocation_country_code")
		delete(additionalProperties, "geolocation_subdivision_code")
		delete(additionalProperties, "health_check_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "set_identifier")
		delete(additionalProperties, "type")
		delete(additionalProperties, "weight")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecordPtrAwsRte53RecordInfo struct {
	value *RecordPtrAwsRte53RecordInfo
	isSet bool
}

func (v NullableRecordPtrAwsRte53RecordInfo) Get() *RecordPtrAwsRte53RecordInfo {
	return v.value
}

func (v *NullableRecordPtrAwsRte53RecordInfo) Set(val *RecordPtrAwsRte53RecordInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordPtrAwsRte53RecordInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordPtrAwsRte53RecordInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordPtrAwsRte53RecordInfo(val *RecordPtrAwsRte53RecordInfo) *NullableRecordPtrAwsRte53RecordInfo {
	return &NullableRecordPtrAwsRte53RecordInfo{value: val, isSet: true}
}

func (v NullableRecordPtrAwsRte53RecordInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordPtrAwsRte53RecordInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
