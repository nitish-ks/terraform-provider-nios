/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordRrsig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordRrsig{}

// RecordRrsig struct for RecordRrsig
type RecordRrsig struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The cryptographic algorithm that was used to create the signature. It uses the same algorithm types as the DNSKEY record indicated in the key tag field.
	Algorithm *string               `json:"algorithm,omitempty"`
	CloudInfo *RecordRrsigCloudInfo `json:"cloud_info,omitempty"`
	// The creation time of the record.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// The record creator.
	Creator *string `json:"creator,omitempty"`
	// Name for an RRSIG record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// The domain name, in punycode format, of the zone that contains the signed RRset.
	DnsSignerName *string `json:"dns_signer_name,omitempty"`
	// The expiry time of an RRSIG record in Epoch seconds format.
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	// The inception time of an RRSIG record in Epoch seconds format.
	InceptionTime *int64 `json:"inception_time,omitempty"`
	// The key tag value of the DNSKEY RR that validates the signature.
	KeyTag *int64 `json:"key_tag,omitempty"`
	// The number of labels in the name of the RRset signed with the RRSIG object.
	Labels *int64 `json:"labels,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The name of the RRSIG record in FQDN format.
	Name *string `json:"name,omitempty"`
	// The TTL value of the RRset covered by the RRSIG record.
	OriginalTtl *int64 `json:"original_ttl,omitempty"`
	// The Base64 encoded cryptographic signature that covers the RRSIG RDATA of the RRSIG Record object.
	Signature *string `json:"signature,omitempty"`
	// The domain name of the zone in FQDN format that contains the signed RRset.
	SignerName *string `json:"signer_name,omitempty"`
	// The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// The RR type covered by the RRSIG record.
	TypeCovered *string `json:"type_covered,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordRrsig instantiates a new RecordRrsig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordRrsig() *RecordRrsig {
	this := RecordRrsig{}
	return &this
}

// NewRecordRrsigWithDefaults instantiates a new RecordRrsig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordRrsigWithDefaults() *RecordRrsig {
	this := RecordRrsig{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordRrsig) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordRrsig) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordRrsig) SetRef(v string) {
	o.Ref = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *RecordRrsig) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *RecordRrsig) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *RecordRrsig) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordRrsig) GetCloudInfo() RecordRrsigCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordRrsigCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetCloudInfoOk() (*RecordRrsigCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordRrsig) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordRrsigCloudInfo and assigns it to the CloudInfo field.
func (o *RecordRrsig) SetCloudInfo(v RecordRrsigCloudInfo) {
	o.CloudInfo = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordRrsig) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordRrsig) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordRrsig) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordRrsig) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordRrsig) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordRrsig) SetCreator(v string) {
	o.Creator = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordRrsig) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordRrsig) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordRrsig) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDnsSignerName returns the DnsSignerName field value if set, zero value otherwise.
func (o *RecordRrsig) GetDnsSignerName() string {
	if o == nil || IsNil(o.DnsSignerName) {
		var ret string
		return ret
	}
	return *o.DnsSignerName
}

// GetDnsSignerNameOk returns a tuple with the DnsSignerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetDnsSignerNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSignerName) {
		return nil, false
	}
	return o.DnsSignerName, true
}

// HasDnsSignerName returns a boolean if a field has been set.
func (o *RecordRrsig) HasDnsSignerName() bool {
	if o != nil && !IsNil(o.DnsSignerName) {
		return true
	}

	return false
}

// SetDnsSignerName gets a reference to the given string and assigns it to the DnsSignerName field.
func (o *RecordRrsig) SetDnsSignerName(v string) {
	o.DnsSignerName = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *RecordRrsig) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *RecordRrsig) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *RecordRrsig) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetInceptionTime returns the InceptionTime field value if set, zero value otherwise.
func (o *RecordRrsig) GetInceptionTime() int64 {
	if o == nil || IsNil(o.InceptionTime) {
		var ret int64
		return ret
	}
	return *o.InceptionTime
}

// GetInceptionTimeOk returns a tuple with the InceptionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetInceptionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.InceptionTime) {
		return nil, false
	}
	return o.InceptionTime, true
}

// HasInceptionTime returns a boolean if a field has been set.
func (o *RecordRrsig) HasInceptionTime() bool {
	if o != nil && !IsNil(o.InceptionTime) {
		return true
	}

	return false
}

// SetInceptionTime gets a reference to the given int64 and assigns it to the InceptionTime field.
func (o *RecordRrsig) SetInceptionTime(v int64) {
	o.InceptionTime = &v
}

// GetKeyTag returns the KeyTag field value if set, zero value otherwise.
func (o *RecordRrsig) GetKeyTag() int64 {
	if o == nil || IsNil(o.KeyTag) {
		var ret int64
		return ret
	}
	return *o.KeyTag
}

// GetKeyTagOk returns a tuple with the KeyTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetKeyTagOk() (*int64, bool) {
	if o == nil || IsNil(o.KeyTag) {
		return nil, false
	}
	return o.KeyTag, true
}

// HasKeyTag returns a boolean if a field has been set.
func (o *RecordRrsig) HasKeyTag() bool {
	if o != nil && !IsNil(o.KeyTag) {
		return true
	}

	return false
}

// SetKeyTag gets a reference to the given int64 and assigns it to the KeyTag field.
func (o *RecordRrsig) SetKeyTag(v int64) {
	o.KeyTag = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RecordRrsig) GetLabels() int64 {
	if o == nil || IsNil(o.Labels) {
		var ret int64
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetLabelsOk() (*int64, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RecordRrsig) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given int64 and assigns it to the Labels field.
func (o *RecordRrsig) SetLabels(v int64) {
	o.Labels = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordRrsig) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordRrsig) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordRrsig) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordRrsig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordRrsig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordRrsig) SetName(v string) {
	o.Name = &v
}

// GetOriginalTtl returns the OriginalTtl field value if set, zero value otherwise.
func (o *RecordRrsig) GetOriginalTtl() int64 {
	if o == nil || IsNil(o.OriginalTtl) {
		var ret int64
		return ret
	}
	return *o.OriginalTtl
}

// GetOriginalTtlOk returns a tuple with the OriginalTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetOriginalTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.OriginalTtl) {
		return nil, false
	}
	return o.OriginalTtl, true
}

// HasOriginalTtl returns a boolean if a field has been set.
func (o *RecordRrsig) HasOriginalTtl() bool {
	if o != nil && !IsNil(o.OriginalTtl) {
		return true
	}

	return false
}

// SetOriginalTtl gets a reference to the given int64 and assigns it to the OriginalTtl field.
func (o *RecordRrsig) SetOriginalTtl(v int64) {
	o.OriginalTtl = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *RecordRrsig) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *RecordRrsig) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *RecordRrsig) SetSignature(v string) {
	o.Signature = &v
}

// GetSignerName returns the SignerName field value if set, zero value otherwise.
func (o *RecordRrsig) GetSignerName() string {
	if o == nil || IsNil(o.SignerName) {
		var ret string
		return ret
	}
	return *o.SignerName
}

// GetSignerNameOk returns a tuple with the SignerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetSignerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SignerName) {
		return nil, false
	}
	return o.SignerName, true
}

// HasSignerName returns a boolean if a field has been set.
func (o *RecordRrsig) HasSignerName() bool {
	if o != nil && !IsNil(o.SignerName) {
		return true
	}

	return false
}

// SetSignerName gets a reference to the given string and assigns it to the SignerName field.
func (o *RecordRrsig) SetSignerName(v string) {
	o.SignerName = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordRrsig) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordRrsig) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordRrsig) SetTtl(v int64) {
	o.Ttl = &v
}

// GetTypeCovered returns the TypeCovered field value if set, zero value otherwise.
func (o *RecordRrsig) GetTypeCovered() string {
	if o == nil || IsNil(o.TypeCovered) {
		var ret string
		return ret
	}
	return *o.TypeCovered
}

// GetTypeCoveredOk returns a tuple with the TypeCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetTypeCoveredOk() (*string, bool) {
	if o == nil || IsNil(o.TypeCovered) {
		return nil, false
	}
	return o.TypeCovered, true
}

// HasTypeCovered returns a boolean if a field has been set.
func (o *RecordRrsig) HasTypeCovered() bool {
	if o != nil && !IsNil(o.TypeCovered) {
		return true
	}

	return false
}

// SetTypeCovered gets a reference to the given string and assigns it to the TypeCovered field.
func (o *RecordRrsig) SetTypeCovered(v string) {
	o.TypeCovered = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordRrsig) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordRrsig) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordRrsig) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordRrsig) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordRrsig) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordRrsig) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordRrsig) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRrsig) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordRrsig) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordRrsig) SetZone(v string) {
	o.Zone = &v
}

func (o RecordRrsig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordRrsig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DnsSignerName) {
		toSerialize["dns_signer_name"] = o.DnsSignerName
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.InceptionTime) {
		toSerialize["inception_time"] = o.InceptionTime
	}
	if !IsNil(o.KeyTag) {
		toSerialize["key_tag"] = o.KeyTag
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OriginalTtl) {
		toSerialize["original_ttl"] = o.OriginalTtl
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.SignerName) {
		toSerialize["signer_name"] = o.SignerName
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.TypeCovered) {
		toSerialize["type_covered"] = o.TypeCovered
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordRrsig struct {
	value *RecordRrsig
	isSet bool
}

func (v NullableRecordRrsig) Get() *RecordRrsig {
	return v.value
}

func (v *NullableRecordRrsig) Set(val *RecordRrsig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordRrsig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordRrsig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordRrsig(val *RecordRrsig) *NullableRecordRrsig {
	return &NullableRecordRrsig{value: val, isSet: true}
}

func (v NullableRecordRrsig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordRrsig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
