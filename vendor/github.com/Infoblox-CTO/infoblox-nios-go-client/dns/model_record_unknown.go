/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordUnknown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordUnknown{}

// RecordUnknown struct for RecordUnknown
type RecordUnknown struct {
	// The reference to the object.
	Ref       *string                 `json:"_ref,omitempty"`
	CloudInfo *RecordUnknownCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.
	Creator *string `json:"creator,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Standard textual representation of the RDATA.
	DisplayRdata *string `json:"display_rdata,omitempty"`
	// The name of the unknown record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Determines if host name policy is applicable for the record.
	EnableHostNamePolicy *bool `json:"enable_host_name_policy,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The Unknown record name in FQDN format. This value can be in unicode format.
	Name *string `json:"name,omitempty"`
	// The host name policy for the record.
	Policy *string `json:"policy,omitempty"`
	// Specifies type of unknown resource record.
	RecordType *string `json:"record_type,omitempty"`
	// The list of rdata subfield values of unknown resource record.
	SubfieldValues []RecordUnknownSubfieldValues `json:"subfield_values,omitempty"`
	// The Time to Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS view in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordUnknown instantiates a new RecordUnknown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordUnknown() *RecordUnknown {
	this := RecordUnknown{}
	return &this
}

// NewRecordUnknownWithDefaults instantiates a new RecordUnknown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordUnknownWithDefaults() *RecordUnknown {
	this := RecordUnknown{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordUnknown) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordUnknown) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordUnknown) SetRef(v string) {
	o.Ref = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordUnknown) GetCloudInfo() RecordUnknownCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordUnknownCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetCloudInfoOk() (*RecordUnknownCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordUnknown) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordUnknownCloudInfo and assigns it to the CloudInfo field.
func (o *RecordUnknown) SetCloudInfo(v RecordUnknownCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordUnknown) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordUnknown) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordUnknown) SetComment(v string) {
	o.Comment = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordUnknown) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordUnknown) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordUnknown) SetCreator(v string) {
	o.Creator = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordUnknown) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordUnknown) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordUnknown) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisplayRdata returns the DisplayRdata field value if set, zero value otherwise.
func (o *RecordUnknown) GetDisplayRdata() string {
	if o == nil || IsNil(o.DisplayRdata) {
		var ret string
		return ret
	}
	return *o.DisplayRdata
}

// GetDisplayRdataOk returns a tuple with the DisplayRdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetDisplayRdataOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayRdata) {
		return nil, false
	}
	return o.DisplayRdata, true
}

// HasDisplayRdata returns a boolean if a field has been set.
func (o *RecordUnknown) HasDisplayRdata() bool {
	if o != nil && !IsNil(o.DisplayRdata) {
		return true
	}

	return false
}

// SetDisplayRdata gets a reference to the given string and assigns it to the DisplayRdata field.
func (o *RecordUnknown) SetDisplayRdata(v string) {
	o.DisplayRdata = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordUnknown) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordUnknown) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordUnknown) SetDnsName(v string) {
	o.DnsName = &v
}

// GetEnableHostNamePolicy returns the EnableHostNamePolicy field value if set, zero value otherwise.
func (o *RecordUnknown) GetEnableHostNamePolicy() bool {
	if o == nil || IsNil(o.EnableHostNamePolicy) {
		var ret bool
		return ret
	}
	return *o.EnableHostNamePolicy
}

// GetEnableHostNamePolicyOk returns a tuple with the EnableHostNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetEnableHostNamePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHostNamePolicy) {
		return nil, false
	}
	return o.EnableHostNamePolicy, true
}

// HasEnableHostNamePolicy returns a boolean if a field has been set.
func (o *RecordUnknown) HasEnableHostNamePolicy() bool {
	if o != nil && !IsNil(o.EnableHostNamePolicy) {
		return true
	}

	return false
}

// SetEnableHostNamePolicy gets a reference to the given bool and assigns it to the EnableHostNamePolicy field.
func (o *RecordUnknown) SetEnableHostNamePolicy(v bool) {
	o.EnableHostNamePolicy = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordUnknown) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordUnknown) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordUnknown) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordUnknown) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordUnknown) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordUnknown) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordUnknown) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordUnknown) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordUnknown) SetName(v string) {
	o.Name = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *RecordUnknown) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *RecordUnknown) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *RecordUnknown) SetPolicy(v string) {
	o.Policy = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RecordUnknown) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RecordUnknown) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RecordUnknown) SetRecordType(v string) {
	o.RecordType = &v
}

// GetSubfieldValues returns the SubfieldValues field value if set, zero value otherwise.
func (o *RecordUnknown) GetSubfieldValues() []RecordUnknownSubfieldValues {
	if o == nil || IsNil(o.SubfieldValues) {
		var ret []RecordUnknownSubfieldValues
		return ret
	}
	return o.SubfieldValues
}

// GetSubfieldValuesOk returns a tuple with the SubfieldValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetSubfieldValuesOk() ([]RecordUnknownSubfieldValues, bool) {
	if o == nil || IsNil(o.SubfieldValues) {
		return nil, false
	}
	return o.SubfieldValues, true
}

// HasSubfieldValues returns a boolean if a field has been set.
func (o *RecordUnknown) HasSubfieldValues() bool {
	if o != nil && !IsNil(o.SubfieldValues) {
		return true
	}

	return false
}

// SetSubfieldValues gets a reference to the given []RecordUnknownSubfieldValues and assigns it to the SubfieldValues field.
func (o *RecordUnknown) SetSubfieldValues(v []RecordUnknownSubfieldValues) {
	o.SubfieldValues = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordUnknown) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordUnknown) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordUnknown) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordUnknown) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordUnknown) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordUnknown) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordUnknown) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordUnknown) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordUnknown) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordUnknown) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknown) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordUnknown) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordUnknown) SetZone(v string) {
	o.Zone = &v
}

func (o RecordUnknown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordUnknown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisplayRdata) {
		toSerialize["display_rdata"] = o.DisplayRdata
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.EnableHostNamePolicy) {
		toSerialize["enable_host_name_policy"] = o.EnableHostNamePolicy
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	if !IsNil(o.SubfieldValues) {
		toSerialize["subfield_values"] = o.SubfieldValues
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordUnknown struct {
	value *RecordUnknown
	isSet bool
}

func (v NullableRecordUnknown) Get() *RecordUnknown {
	return v.value
}

func (v *NullableRecordUnknown) Set(val *RecordUnknown) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordUnknown) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordUnknown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordUnknown(val *RecordUnknown) *NullableRecordUnknown {
	return &NullableRecordUnknown{value: val, isSet: true}
}

func (v NullableRecordUnknown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordUnknown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
