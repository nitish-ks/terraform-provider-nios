/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordUnknownSubfieldValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordUnknownSubfieldValues{}

// RecordUnknownSubfieldValues struct for RecordUnknownSubfieldValues
type RecordUnknownSubfieldValues struct {
	// String representation of subfield value.
	FieldValue *string `json:"field_value,omitempty"`
	// Type of field. \"B\": unsigned 8-bit integer, \"S\": unsigned 16-bit integer, \"I\": unsigned 32-bit integer. \"H\": BASE64, \"6\": an IPv6 address, \"4\": an IPv4 address, \"N\": a domain name, \"T\": text string, \"X\": opaque binary data
	FieldType *string `json:"field_type,omitempty"`
	// The 'size of 'length' sub-sub field to be included in RDATA.
	IncludeLength        *string `json:"include_length,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecordUnknownSubfieldValues RecordUnknownSubfieldValues

// NewRecordUnknownSubfieldValues instantiates a new RecordUnknownSubfieldValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordUnknownSubfieldValues() *RecordUnknownSubfieldValues {
	this := RecordUnknownSubfieldValues{}
	return &this
}

// NewRecordUnknownSubfieldValuesWithDefaults instantiates a new RecordUnknownSubfieldValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordUnknownSubfieldValuesWithDefaults() *RecordUnknownSubfieldValues {
	this := RecordUnknownSubfieldValues{}
	return &this
}

// GetFieldValue returns the FieldValue field value if set, zero value otherwise.
func (o *RecordUnknownSubfieldValues) GetFieldValue() string {
	if o == nil || IsNil(o.FieldValue) {
		var ret string
		return ret
	}
	return *o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknownSubfieldValues) GetFieldValueOk() (*string, bool) {
	if o == nil || IsNil(o.FieldValue) {
		return nil, false
	}
	return o.FieldValue, true
}

// HasFieldValue returns a boolean if a field has been set.
func (o *RecordUnknownSubfieldValues) HasFieldValue() bool {
	if o != nil && !IsNil(o.FieldValue) {
		return true
	}

	return false
}

// SetFieldValue gets a reference to the given string and assigns it to the FieldValue field.
func (o *RecordUnknownSubfieldValues) SetFieldValue(v string) {
	o.FieldValue = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *RecordUnknownSubfieldValues) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknownSubfieldValues) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *RecordUnknownSubfieldValues) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *RecordUnknownSubfieldValues) SetFieldType(v string) {
	o.FieldType = &v
}

// GetIncludeLength returns the IncludeLength field value if set, zero value otherwise.
func (o *RecordUnknownSubfieldValues) GetIncludeLength() string {
	if o == nil || IsNil(o.IncludeLength) {
		var ret string
		return ret
	}
	return *o.IncludeLength
}

// GetIncludeLengthOk returns a tuple with the IncludeLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUnknownSubfieldValues) GetIncludeLengthOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeLength) {
		return nil, false
	}
	return o.IncludeLength, true
}

// HasIncludeLength returns a boolean if a field has been set.
func (o *RecordUnknownSubfieldValues) HasIncludeLength() bool {
	if o != nil && !IsNil(o.IncludeLength) {
		return true
	}

	return false
}

// SetIncludeLength gets a reference to the given string and assigns it to the IncludeLength field.
func (o *RecordUnknownSubfieldValues) SetIncludeLength(v string) {
	o.IncludeLength = &v
}

func (o RecordUnknownSubfieldValues) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordUnknownSubfieldValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldValue) {
		toSerialize["field_value"] = o.FieldValue
	}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	if !IsNil(o.IncludeLength) {
		toSerialize["include_length"] = o.IncludeLength
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecordUnknownSubfieldValues) UnmarshalJSON(data []byte) (err error) {
	varRecordUnknownSubfieldValues := _RecordUnknownSubfieldValues{}

	err = json.Unmarshal(data, &varRecordUnknownSubfieldValues)

	if err != nil {
		return err
	}

	*o = RecordUnknownSubfieldValues(varRecordUnknownSubfieldValues)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "field_value")
		delete(additionalProperties, "field_type")
		delete(additionalProperties, "include_length")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecordUnknownSubfieldValues struct {
	value *RecordUnknownSubfieldValues
	isSet bool
}

func (v NullableRecordUnknownSubfieldValues) Get() *RecordUnknownSubfieldValues {
	return v.value
}

func (v *NullableRecordUnknownSubfieldValues) Set(val *RecordUnknownSubfieldValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordUnknownSubfieldValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordUnknownSubfieldValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordUnknownSubfieldValues(val *RecordUnknownSubfieldValues) *NullableRecordUnknownSubfieldValues {
	return &NullableRecordUnknownSubfieldValues{value: val, isSet: true}
}

func (v NullableRecordUnknownSubfieldValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordUnknownSubfieldValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
