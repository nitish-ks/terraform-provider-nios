/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecorddscloudinfoDelegatedMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecorddscloudinfoDelegatedMember{}

// RecorddscloudinfoDelegatedMember struct for RecorddscloudinfoDelegatedMember
type RecorddscloudinfoDelegatedMember struct {
	// The IPv4 Address of the Grid Member.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// The IPv6 Address of the Grid Member.
	Ipv6addr *string `json:"ipv6addr,omitempty"`
	// The Grid member name
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecorddscloudinfoDelegatedMember RecorddscloudinfoDelegatedMember

// NewRecorddscloudinfoDelegatedMember instantiates a new RecorddscloudinfoDelegatedMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecorddscloudinfoDelegatedMember() *RecorddscloudinfoDelegatedMember {
	this := RecorddscloudinfoDelegatedMember{}
	return &this
}

// NewRecorddscloudinfoDelegatedMemberWithDefaults instantiates a new RecorddscloudinfoDelegatedMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecorddscloudinfoDelegatedMemberWithDefaults() *RecorddscloudinfoDelegatedMember {
	this := RecorddscloudinfoDelegatedMember{}
	return &this
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *RecorddscloudinfoDelegatedMember) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecorddscloudinfoDelegatedMember) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *RecorddscloudinfoDelegatedMember) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *RecorddscloudinfoDelegatedMember) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *RecorddscloudinfoDelegatedMember) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecorddscloudinfoDelegatedMember) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *RecorddscloudinfoDelegatedMember) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *RecorddscloudinfoDelegatedMember) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecorddscloudinfoDelegatedMember) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecorddscloudinfoDelegatedMember) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecorddscloudinfoDelegatedMember) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecorddscloudinfoDelegatedMember) SetName(v string) {
	o.Name = &v
}

func (o RecorddscloudinfoDelegatedMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecorddscloudinfoDelegatedMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecorddscloudinfoDelegatedMember) UnmarshalJSON(data []byte) (err error) {
	varRecorddscloudinfoDelegatedMember := _RecorddscloudinfoDelegatedMember{}

	err = json.Unmarshal(data, &varRecorddscloudinfoDelegatedMember)

	if err != nil {
		return err
	}

	*o = RecorddscloudinfoDelegatedMember(varRecorddscloudinfoDelegatedMember)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4addr")
		delete(additionalProperties, "ipv6addr")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecorddscloudinfoDelegatedMember struct {
	value *RecorddscloudinfoDelegatedMember
	isSet bool
}

func (v NullableRecorddscloudinfoDelegatedMember) Get() *RecorddscloudinfoDelegatedMember {
	return v.value
}

func (v *NullableRecorddscloudinfoDelegatedMember) Set(val *RecorddscloudinfoDelegatedMember) {
	v.value = val
	v.isSet = true
}

func (v NullableRecorddscloudinfoDelegatedMember) IsSet() bool {
	return v.isSet
}

func (v *NullableRecorddscloudinfoDelegatedMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecorddscloudinfoDelegatedMember(val *RecorddscloudinfoDelegatedMember) *NullableRecorddscloudinfoDelegatedMember {
	return &NullableRecorddscloudinfoDelegatedMember{value: val, isSet: true}
}

func (v NullableRecorddscloudinfoDelegatedMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecorddscloudinfoDelegatedMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
