/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the SharedrecordA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedrecordA{}

// SharedrecordA struct for SharedrecordA
type SharedrecordA struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for this shared record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if this shared record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The name for this shared record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The IPv4 Address of the shared record.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// Name for this shared record. This value can be in unicode format.
	Name *string `json:"name,omitempty"`
	// The name of the shared record group in which the record resides.
	SharedRecordGroup *string `json:"shared_record_group,omitempty"`
	// The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewSharedrecordA instantiates a new SharedrecordA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedrecordA() *SharedrecordA {
	this := SharedrecordA{}
	return &this
}

// NewSharedrecordAWithDefaults instantiates a new SharedrecordA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedrecordAWithDefaults() *SharedrecordA {
	this := SharedrecordA{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SharedrecordA) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SharedrecordA) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SharedrecordA) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SharedrecordA) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SharedrecordA) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SharedrecordA) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *SharedrecordA) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *SharedrecordA) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *SharedrecordA) SetDisable(v bool) {
	o.Disable = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *SharedrecordA) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *SharedrecordA) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *SharedrecordA) SetDnsName(v string) {
	o.DnsName = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *SharedrecordA) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *SharedrecordA) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *SharedrecordA) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *SharedrecordA) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *SharedrecordA) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *SharedrecordA) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharedrecordA) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharedrecordA) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharedrecordA) SetName(v string) {
	o.Name = &v
}

// GetSharedRecordGroup returns the SharedRecordGroup field value if set, zero value otherwise.
func (o *SharedrecordA) GetSharedRecordGroup() string {
	if o == nil || IsNil(o.SharedRecordGroup) {
		var ret string
		return ret
	}
	return *o.SharedRecordGroup
}

// GetSharedRecordGroupOk returns a tuple with the SharedRecordGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetSharedRecordGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SharedRecordGroup) {
		return nil, false
	}
	return o.SharedRecordGroup, true
}

// HasSharedRecordGroup returns a boolean if a field has been set.
func (o *SharedrecordA) HasSharedRecordGroup() bool {
	if o != nil && !IsNil(o.SharedRecordGroup) {
		return true
	}

	return false
}

// SetSharedRecordGroup gets a reference to the given string and assigns it to the SharedRecordGroup field.
func (o *SharedrecordA) SetSharedRecordGroup(v string) {
	o.SharedRecordGroup = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *SharedrecordA) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *SharedrecordA) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *SharedrecordA) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *SharedrecordA) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordA) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *SharedrecordA) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *SharedrecordA) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o SharedrecordA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedrecordA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SharedRecordGroup) {
		toSerialize["shared_record_group"] = o.SharedRecordGroup
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableSharedrecordA struct {
	value *SharedrecordA
	isSet bool
}

func (v NullableSharedrecordA) Get() *SharedrecordA {
	return v.value
}

func (v *NullableSharedrecordA) Set(val *SharedrecordA) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedrecordA) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedrecordA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedrecordA(val *SharedrecordA) *NullableSharedrecordA {
	return &NullableSharedrecordA{value: val, isSet: true}
}

func (v NullableSharedrecordA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedrecordA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
