/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the SharedrecordAaaa type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedrecordAaaa{}

// SharedrecordAaaa struct for SharedrecordAaaa
type SharedrecordAaaa struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for this shared record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if this shared record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The name for this shared record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The IPv6 Address of the shared record.
	Ipv6addr *string `json:"ipv6addr,omitempty"`
	// Name for this shared record. This value can be in unicode format.
	Name *string `json:"name,omitempty"`
	// The name of the shared record group in which the record resides.
	SharedRecordGroup *string `json:"shared_record_group,omitempty"`
	// The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewSharedrecordAaaa instantiates a new SharedrecordAaaa object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedrecordAaaa() *SharedrecordAaaa {
	this := SharedrecordAaaa{}
	return &this
}

// NewSharedrecordAaaaWithDefaults instantiates a new SharedrecordAaaa object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedrecordAaaaWithDefaults() *SharedrecordAaaa {
	this := SharedrecordAaaa{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SharedrecordAaaa) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SharedrecordAaaa) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *SharedrecordAaaa) SetDisable(v bool) {
	o.Disable = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *SharedrecordAaaa) SetDnsName(v string) {
	o.DnsName = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *SharedrecordAaaa) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *SharedrecordAaaa) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharedrecordAaaa) SetName(v string) {
	o.Name = &v
}

// GetSharedRecordGroup returns the SharedRecordGroup field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetSharedRecordGroup() string {
	if o == nil || IsNil(o.SharedRecordGroup) {
		var ret string
		return ret
	}
	return *o.SharedRecordGroup
}

// GetSharedRecordGroupOk returns a tuple with the SharedRecordGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetSharedRecordGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SharedRecordGroup) {
		return nil, false
	}
	return o.SharedRecordGroup, true
}

// HasSharedRecordGroup returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasSharedRecordGroup() bool {
	if o != nil && !IsNil(o.SharedRecordGroup) {
		return true
	}

	return false
}

// SetSharedRecordGroup gets a reference to the given string and assigns it to the SharedRecordGroup field.
func (o *SharedrecordAaaa) SetSharedRecordGroup(v string) {
	o.SharedRecordGroup = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *SharedrecordAaaa) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *SharedrecordAaaa) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedrecordAaaa) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *SharedrecordAaaa) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *SharedrecordAaaa) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o SharedrecordAaaa) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedrecordAaaa) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SharedRecordGroup) {
		toSerialize["shared_record_group"] = o.SharedRecordGroup
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableSharedrecordAaaa struct {
	value *SharedrecordAaaa
	isSet bool
}

func (v NullableSharedrecordAaaa) Get() *SharedrecordAaaa {
	return v.value
}

func (v *NullableSharedrecordAaaa) Set(val *SharedrecordAaaa) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedrecordAaaa) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedrecordAaaa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedrecordAaaa(val *SharedrecordAaaa) *NullableSharedrecordAaaa {
	return &NullableSharedrecordAaaa{value: val, isSet: true}
}

func (v NullableSharedrecordAaaa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedrecordAaaa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
