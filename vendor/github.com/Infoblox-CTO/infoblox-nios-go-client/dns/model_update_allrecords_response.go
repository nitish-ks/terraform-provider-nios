/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateAllrecordsResponse - struct for UpdateAllrecordsResponse
type UpdateAllrecordsResponse struct {
	UpdateAllrecordsResponseAsObject *UpdateAllrecordsResponseAsObject
	String                           *string
}

// UpdateAllrecordsResponseAsObjectAsUpdateAllrecordsResponse is a convenience function that returns UpdateAllrecordsResponseAsObject wrapped in UpdateAllrecordsResponse
func UpdateAllrecordsResponseAsObjectAsUpdateAllrecordsResponse(v *UpdateAllrecordsResponseAsObject) UpdateAllrecordsResponse {
	return UpdateAllrecordsResponse{
		UpdateAllrecordsResponseAsObject: v,
	}
}

// stringAsUpdateAllrecordsResponse is a convenience function that returns string wrapped in UpdateAllrecordsResponse
func StringAsUpdateAllrecordsResponse(v *string) UpdateAllrecordsResponse {
	return UpdateAllrecordsResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateAllrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateAllrecordsResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateAllrecordsResponseAsObject)
	if err == nil {
		jsonUpdateAllrecordsResponseAsObject, _ := json.Marshal(dst.UpdateAllrecordsResponseAsObject)
		if string(jsonUpdateAllrecordsResponseAsObject) == "{}" { // empty struct
			dst.UpdateAllrecordsResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateAllrecordsResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateAllrecordsResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateAllrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateAllrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateAllrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateAllrecordsResponseAsObject != nil {
		return json.Marshal(&src.UpdateAllrecordsResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateAllrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateAllrecordsResponseAsObject != nil {
		return obj.UpdateAllrecordsResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateAllrecordsResponse struct {
	value *UpdateAllrecordsResponse
	isSet bool
}

func (v NullableUpdateAllrecordsResponse) Get() *UpdateAllrecordsResponse {
	return v.value
}

func (v *NullableUpdateAllrecordsResponse) Set(val *UpdateAllrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAllrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAllrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAllrecordsResponse(val *UpdateAllrecordsResponse) *NullableUpdateAllrecordsResponse {
	return &NullableUpdateAllrecordsResponse{value: val, isSet: true}
}

func (v NullableUpdateAllrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAllrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
