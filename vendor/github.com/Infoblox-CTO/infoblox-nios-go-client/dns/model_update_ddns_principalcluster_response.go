/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateDdnsPrincipalclusterResponse - struct for UpdateDdnsPrincipalclusterResponse
type UpdateDdnsPrincipalclusterResponse struct {
	UpdateDdnsPrincipalclusterResponseAsObject *UpdateDdnsPrincipalclusterResponseAsObject
	String                                     *string
}

// UpdateDdnsPrincipalclusterResponseAsObjectAsUpdateDdnsPrincipalclusterResponse is a convenience function that returns UpdateDdnsPrincipalclusterResponseAsObject wrapped in UpdateDdnsPrincipalclusterResponse
func UpdateDdnsPrincipalclusterResponseAsObjectAsUpdateDdnsPrincipalclusterResponse(v *UpdateDdnsPrincipalclusterResponseAsObject) UpdateDdnsPrincipalclusterResponse {
	return UpdateDdnsPrincipalclusterResponse{
		UpdateDdnsPrincipalclusterResponseAsObject: v,
	}
}

// stringAsUpdateDdnsPrincipalclusterResponse is a convenience function that returns string wrapped in UpdateDdnsPrincipalclusterResponse
func StringAsUpdateDdnsPrincipalclusterResponse(v *string) UpdateDdnsPrincipalclusterResponse {
	return UpdateDdnsPrincipalclusterResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDdnsPrincipalclusterResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDdnsPrincipalclusterResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDdnsPrincipalclusterResponseAsObject)
	if err == nil {
		jsonUpdateDdnsPrincipalclusterResponseAsObject, _ := json.Marshal(dst.UpdateDdnsPrincipalclusterResponseAsObject)
		if string(jsonUpdateDdnsPrincipalclusterResponseAsObject) == "{}" { // empty struct
			dst.UpdateDdnsPrincipalclusterResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDdnsPrincipalclusterResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDdnsPrincipalclusterResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDdnsPrincipalclusterResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDdnsPrincipalclusterResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDdnsPrincipalclusterResponseAsObject != nil {
		return json.Marshal(&src.UpdateDdnsPrincipalclusterResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDdnsPrincipalclusterResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDdnsPrincipalclusterResponseAsObject != nil {
		return obj.UpdateDdnsPrincipalclusterResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDdnsPrincipalclusterResponse struct {
	value *UpdateDdnsPrincipalclusterResponse
	isSet bool
}

func (v NullableUpdateDdnsPrincipalclusterResponse) Get() *UpdateDdnsPrincipalclusterResponse {
	return v.value
}

func (v *NullableUpdateDdnsPrincipalclusterResponse) Set(val *UpdateDdnsPrincipalclusterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDdnsPrincipalclusterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDdnsPrincipalclusterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDdnsPrincipalclusterResponse(val *UpdateDdnsPrincipalclusterResponse) *NullableUpdateDdnsPrincipalclusterResponse {
	return &NullableUpdateDdnsPrincipalclusterResponse{value: val, isSet: true}
}

func (v NullableUpdateDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDdnsPrincipalclusterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
