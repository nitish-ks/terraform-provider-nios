/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateDns64groupResponse - struct for UpdateDns64groupResponse
type UpdateDns64groupResponse struct {
	UpdateDns64groupResponseAsObject *UpdateDns64groupResponseAsObject
	String                           *string
}

// UpdateDns64groupResponseAsObjectAsUpdateDns64groupResponse is a convenience function that returns UpdateDns64groupResponseAsObject wrapped in UpdateDns64groupResponse
func UpdateDns64groupResponseAsObjectAsUpdateDns64groupResponse(v *UpdateDns64groupResponseAsObject) UpdateDns64groupResponse {
	return UpdateDns64groupResponse{
		UpdateDns64groupResponseAsObject: v,
	}
}

// stringAsUpdateDns64groupResponse is a convenience function that returns string wrapped in UpdateDns64groupResponse
func StringAsUpdateDns64groupResponse(v *string) UpdateDns64groupResponse {
	return UpdateDns64groupResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDns64groupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDns64groupResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDns64groupResponseAsObject)
	if err == nil {
		jsonUpdateDns64groupResponseAsObject, _ := json.Marshal(dst.UpdateDns64groupResponseAsObject)
		if string(jsonUpdateDns64groupResponseAsObject) == "{}" { // empty struct
			dst.UpdateDns64groupResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDns64groupResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDns64groupResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDns64groupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDns64groupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDns64groupResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDns64groupResponseAsObject != nil {
		return json.Marshal(&src.UpdateDns64groupResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDns64groupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDns64groupResponseAsObject != nil {
		return obj.UpdateDns64groupResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDns64groupResponse struct {
	value *UpdateDns64groupResponse
	isSet bool
}

func (v NullableUpdateDns64groupResponse) Get() *UpdateDns64groupResponse {
	return v.value
}

func (v *NullableUpdateDns64groupResponse) Set(val *UpdateDns64groupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDns64groupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDns64groupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDns64groupResponse(val *UpdateDns64groupResponse) *NullableUpdateDns64groupResponse {
	return &NullableUpdateDns64groupResponse{value: val, isSet: true}
}

func (v NullableUpdateDns64groupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDns64groupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
