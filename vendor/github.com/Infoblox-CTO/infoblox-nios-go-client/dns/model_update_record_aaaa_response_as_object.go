/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the UpdateRecordAaaaResponseAsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRecordAaaaResponseAsObject{}

// UpdateRecordAaaaResponseAsObject The response format to update __RecordAaaa__ in object format.
type UpdateRecordAaaaResponseAsObject struct {
	Result               *RecordAaaa `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRecordAaaaResponseAsObject UpdateRecordAaaaResponseAsObject

// NewUpdateRecordAaaaResponseAsObject instantiates a new UpdateRecordAaaaResponseAsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecordAaaaResponseAsObject() *UpdateRecordAaaaResponseAsObject {
	this := UpdateRecordAaaaResponseAsObject{}
	return &this
}

// NewUpdateRecordAaaaResponseAsObjectWithDefaults instantiates a new UpdateRecordAaaaResponseAsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecordAaaaResponseAsObjectWithDefaults() *UpdateRecordAaaaResponseAsObject {
	this := UpdateRecordAaaaResponseAsObject{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *UpdateRecordAaaaResponseAsObject) GetResult() RecordAaaa {
	if o == nil || IsNil(o.Result) {
		var ret RecordAaaa
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecordAaaaResponseAsObject) GetResultOk() (*RecordAaaa, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *UpdateRecordAaaaResponseAsObject) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given RecordAaaa and assigns it to the Result field.
func (o *UpdateRecordAaaaResponseAsObject) SetResult(v RecordAaaa) {
	o.Result = &v
}

func (o UpdateRecordAaaaResponseAsObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRecordAaaaResponseAsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRecordAaaaResponseAsObject) UnmarshalJSON(data []byte) (err error) {
	varUpdateRecordAaaaResponseAsObject := _UpdateRecordAaaaResponseAsObject{}

	err = json.Unmarshal(data, &varUpdateRecordAaaaResponseAsObject)

	if err != nil {
		return err
	}

	*o = UpdateRecordAaaaResponseAsObject(varUpdateRecordAaaaResponseAsObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRecordAaaaResponseAsObject struct {
	value *UpdateRecordAaaaResponseAsObject
	isSet bool
}

func (v NullableUpdateRecordAaaaResponseAsObject) Get() *UpdateRecordAaaaResponseAsObject {
	return v.value
}

func (v *NullableUpdateRecordAaaaResponseAsObject) Set(val *UpdateRecordAaaaResponseAsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordAaaaResponseAsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordAaaaResponseAsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordAaaaResponseAsObject(val *UpdateRecordAaaaResponseAsObject) *NullableUpdateRecordAaaaResponseAsObject {
	return &NullableUpdateRecordAaaaResponseAsObject{value: val, isSet: true}
}

func (v NullableUpdateRecordAaaaResponseAsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordAaaaResponseAsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
