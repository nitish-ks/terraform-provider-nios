/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateRecordHostIpv6addrResponse - struct for UpdateRecordHostIpv6addrResponse
type UpdateRecordHostIpv6addrResponse struct {
	UpdateRecordHostIpv6addrResponseAsObject *UpdateRecordHostIpv6addrResponseAsObject
	String                                   *string
}

// UpdateRecordHostIpv6addrResponseAsObjectAsUpdateRecordHostIpv6addrResponse is a convenience function that returns UpdateRecordHostIpv6addrResponseAsObject wrapped in UpdateRecordHostIpv6addrResponse
func UpdateRecordHostIpv6addrResponseAsObjectAsUpdateRecordHostIpv6addrResponse(v *UpdateRecordHostIpv6addrResponseAsObject) UpdateRecordHostIpv6addrResponse {
	return UpdateRecordHostIpv6addrResponse{
		UpdateRecordHostIpv6addrResponseAsObject: v,
	}
}

// stringAsUpdateRecordHostIpv6addrResponse is a convenience function that returns string wrapped in UpdateRecordHostIpv6addrResponse
func StringAsUpdateRecordHostIpv6addrResponse(v *string) UpdateRecordHostIpv6addrResponse {
	return UpdateRecordHostIpv6addrResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRecordHostIpv6addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRecordHostIpv6addrResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRecordHostIpv6addrResponseAsObject)
	if err == nil {
		jsonUpdateRecordHostIpv6addrResponseAsObject, _ := json.Marshal(dst.UpdateRecordHostIpv6addrResponseAsObject)
		if string(jsonUpdateRecordHostIpv6addrResponseAsObject) == "{}" { // empty struct
			dst.UpdateRecordHostIpv6addrResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRecordHostIpv6addrResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRecordHostIpv6addrResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRecordHostIpv6addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRecordHostIpv6addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRecordHostIpv6addrResponseAsObject != nil {
		return json.Marshal(&src.UpdateRecordHostIpv6addrResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRecordHostIpv6addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRecordHostIpv6addrResponseAsObject != nil {
		return obj.UpdateRecordHostIpv6addrResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRecordHostIpv6addrResponse struct {
	value *UpdateRecordHostIpv6addrResponse
	isSet bool
}

func (v NullableUpdateRecordHostIpv6addrResponse) Get() *UpdateRecordHostIpv6addrResponse {
	return v.value
}

func (v *NullableUpdateRecordHostIpv6addrResponse) Set(val *UpdateRecordHostIpv6addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordHostIpv6addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordHostIpv6addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordHostIpv6addrResponse(val *UpdateRecordHostIpv6addrResponse) *NullableUpdateRecordHostIpv6addrResponse {
	return &NullableUpdateRecordHostIpv6addrResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordHostIpv6addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordHostIpv6addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
