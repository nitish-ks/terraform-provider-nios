/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateRecordNsResponse - struct for UpdateRecordNsResponse
type UpdateRecordNsResponse struct {
	UpdateRecordNsResponseAsObject *UpdateRecordNsResponseAsObject
	String                         *string
}

// UpdateRecordNsResponseAsObjectAsUpdateRecordNsResponse is a convenience function that returns UpdateRecordNsResponseAsObject wrapped in UpdateRecordNsResponse
func UpdateRecordNsResponseAsObjectAsUpdateRecordNsResponse(v *UpdateRecordNsResponseAsObject) UpdateRecordNsResponse {
	return UpdateRecordNsResponse{
		UpdateRecordNsResponseAsObject: v,
	}
}

// stringAsUpdateRecordNsResponse is a convenience function that returns string wrapped in UpdateRecordNsResponse
func StringAsUpdateRecordNsResponse(v *string) UpdateRecordNsResponse {
	return UpdateRecordNsResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRecordNsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRecordNsResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRecordNsResponseAsObject)
	if err == nil {
		jsonUpdateRecordNsResponseAsObject, _ := json.Marshal(dst.UpdateRecordNsResponseAsObject)
		if string(jsonUpdateRecordNsResponseAsObject) == "{}" { // empty struct
			dst.UpdateRecordNsResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRecordNsResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRecordNsResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRecordNsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRecordNsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRecordNsResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRecordNsResponseAsObject != nil {
		return json.Marshal(&src.UpdateRecordNsResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRecordNsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRecordNsResponseAsObject != nil {
		return obj.UpdateRecordNsResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRecordNsResponse struct {
	value *UpdateRecordNsResponse
	isSet bool
}

func (v NullableUpdateRecordNsResponse) Get() *UpdateRecordNsResponse {
	return v.value
}

func (v *NullableUpdateRecordNsResponse) Set(val *UpdateRecordNsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordNsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordNsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordNsResponse(val *UpdateRecordNsResponse) *NullableUpdateRecordNsResponse {
	return &NullableUpdateRecordNsResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordNsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordNsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
