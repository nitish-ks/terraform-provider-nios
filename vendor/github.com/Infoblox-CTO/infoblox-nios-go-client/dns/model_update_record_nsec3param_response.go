/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateRecordNsec3paramResponse - struct for UpdateRecordNsec3paramResponse
type UpdateRecordNsec3paramResponse struct {
	UpdateRecordNsec3paramResponseAsObject *UpdateRecordNsec3paramResponseAsObject
	String                                 *string
}

// UpdateRecordNsec3paramResponseAsObjectAsUpdateRecordNsec3paramResponse is a convenience function that returns UpdateRecordNsec3paramResponseAsObject wrapped in UpdateRecordNsec3paramResponse
func UpdateRecordNsec3paramResponseAsObjectAsUpdateRecordNsec3paramResponse(v *UpdateRecordNsec3paramResponseAsObject) UpdateRecordNsec3paramResponse {
	return UpdateRecordNsec3paramResponse{
		UpdateRecordNsec3paramResponseAsObject: v,
	}
}

// stringAsUpdateRecordNsec3paramResponse is a convenience function that returns string wrapped in UpdateRecordNsec3paramResponse
func StringAsUpdateRecordNsec3paramResponse(v *string) UpdateRecordNsec3paramResponse {
	return UpdateRecordNsec3paramResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRecordNsec3paramResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRecordNsec3paramResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRecordNsec3paramResponseAsObject)
	if err == nil {
		jsonUpdateRecordNsec3paramResponseAsObject, _ := json.Marshal(dst.UpdateRecordNsec3paramResponseAsObject)
		if string(jsonUpdateRecordNsec3paramResponseAsObject) == "{}" { // empty struct
			dst.UpdateRecordNsec3paramResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRecordNsec3paramResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRecordNsec3paramResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRecordNsec3paramResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRecordNsec3paramResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRecordNsec3paramResponseAsObject != nil {
		return json.Marshal(&src.UpdateRecordNsec3paramResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRecordNsec3paramResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRecordNsec3paramResponseAsObject != nil {
		return obj.UpdateRecordNsec3paramResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRecordNsec3paramResponse struct {
	value *UpdateRecordNsec3paramResponse
	isSet bool
}

func (v NullableUpdateRecordNsec3paramResponse) Get() *UpdateRecordNsec3paramResponse {
	return v.value
}

func (v *NullableUpdateRecordNsec3paramResponse) Set(val *UpdateRecordNsec3paramResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordNsec3paramResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordNsec3paramResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordNsec3paramResponse(val *UpdateRecordNsec3paramResponse) *NullableUpdateRecordNsec3paramResponse {
	return &NullableUpdateRecordNsec3paramResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordNsec3paramResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
