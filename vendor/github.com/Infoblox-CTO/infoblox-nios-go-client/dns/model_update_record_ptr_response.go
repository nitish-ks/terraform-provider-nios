/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateRecordPtrResponse - struct for UpdateRecordPtrResponse
type UpdateRecordPtrResponse struct {
	UpdateRecordPtrResponseAsObject *UpdateRecordPtrResponseAsObject
	String                          *string
}

// UpdateRecordPtrResponseAsObjectAsUpdateRecordPtrResponse is a convenience function that returns UpdateRecordPtrResponseAsObject wrapped in UpdateRecordPtrResponse
func UpdateRecordPtrResponseAsObjectAsUpdateRecordPtrResponse(v *UpdateRecordPtrResponseAsObject) UpdateRecordPtrResponse {
	return UpdateRecordPtrResponse{
		UpdateRecordPtrResponseAsObject: v,
	}
}

// stringAsUpdateRecordPtrResponse is a convenience function that returns string wrapped in UpdateRecordPtrResponse
func StringAsUpdateRecordPtrResponse(v *string) UpdateRecordPtrResponse {
	return UpdateRecordPtrResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRecordPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRecordPtrResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRecordPtrResponseAsObject)
	if err == nil {
		jsonUpdateRecordPtrResponseAsObject, _ := json.Marshal(dst.UpdateRecordPtrResponseAsObject)
		if string(jsonUpdateRecordPtrResponseAsObject) == "{}" { // empty struct
			dst.UpdateRecordPtrResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRecordPtrResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRecordPtrResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRecordPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRecordPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRecordPtrResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRecordPtrResponseAsObject != nil {
		return json.Marshal(&src.UpdateRecordPtrResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRecordPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRecordPtrResponseAsObject != nil {
		return obj.UpdateRecordPtrResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRecordPtrResponse struct {
	value *UpdateRecordPtrResponse
	isSet bool
}

func (v NullableUpdateRecordPtrResponse) Get() *UpdateRecordPtrResponse {
	return v.value
}

func (v *NullableUpdateRecordPtrResponse) Set(val *UpdateRecordPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordPtrResponse(val *UpdateRecordPtrResponse) *NullableUpdateRecordPtrResponse {
	return &NullableUpdateRecordPtrResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
