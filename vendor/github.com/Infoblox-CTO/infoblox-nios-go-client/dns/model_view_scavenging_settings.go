/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ViewScavengingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewScavengingSettings{}

// ViewScavengingSettings struct for ViewScavengingSettings
type ViewScavengingSettings struct {
	// This flag indicates if the resource record scavenging is enabled or not.
	EnableScavenging *bool `json:"enable_scavenging,omitempty"`
	// This flag indicates if the recurrent resource record scavenging is enabled or not.
	EnableRecurrentScavenging *bool `json:"enable_recurrent_scavenging,omitempty"`
	// This flag indicates if the automatic resource record scavenging is enabled or not.
	EnableAutoReclamation *bool `json:"enable_auto_reclamation,omitempty"`
	// This flag indicates if the resource record last queried monitoring in affected zones is enabled or not.
	EnableRrLastQueried *bool `json:"enable_rr_last_queried,omitempty"`
	// This flag indicates if the last queried monitoring for affected zones is enabled or not.
	EnableZoneLastQueried *bool `json:"enable_zone_last_queried,omitempty"`
	// This flag indicates if the associated resource record scavenging is enabled or not.
	ReclaimAssociatedRecords *bool                                     `json:"reclaim_associated_records,omitempty"`
	ScavengingSchedule       *ViewscavengingsettingsScavengingSchedule `json:"scavenging_schedule,omitempty"`
	// The expression list. The particular record is treated as reclaimable if expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.
	ExpressionList []ViewscavengingsettingsExpressionList `json:"expression_list,omitempty"`
	// The extensible attributes expression list. The particular record is treated as reclaimable if extensible attributes expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.
	EaExpressionList     []ViewscavengingsettingsEaExpressionList `json:"ea_expression_list,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViewScavengingSettings ViewScavengingSettings

// NewViewScavengingSettings instantiates a new ViewScavengingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewScavengingSettings() *ViewScavengingSettings {
	this := ViewScavengingSettings{}
	return &this
}

// NewViewScavengingSettingsWithDefaults instantiates a new ViewScavengingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewScavengingSettingsWithDefaults() *ViewScavengingSettings {
	this := ViewScavengingSettings{}
	return &this
}

// GetEnableScavenging returns the EnableScavenging field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEnableScavenging() bool {
	if o == nil || IsNil(o.EnableScavenging) {
		var ret bool
		return ret
	}
	return *o.EnableScavenging
}

// GetEnableScavengingOk returns a tuple with the EnableScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEnableScavengingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableScavenging) {
		return nil, false
	}
	return o.EnableScavenging, true
}

// HasEnableScavenging returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEnableScavenging() bool {
	if o != nil && !IsNil(o.EnableScavenging) {
		return true
	}

	return false
}

// SetEnableScavenging gets a reference to the given bool and assigns it to the EnableScavenging field.
func (o *ViewScavengingSettings) SetEnableScavenging(v bool) {
	o.EnableScavenging = &v
}

// GetEnableRecurrentScavenging returns the EnableRecurrentScavenging field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEnableRecurrentScavenging() bool {
	if o == nil || IsNil(o.EnableRecurrentScavenging) {
		var ret bool
		return ret
	}
	return *o.EnableRecurrentScavenging
}

// GetEnableRecurrentScavengingOk returns a tuple with the EnableRecurrentScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEnableRecurrentScavengingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRecurrentScavenging) {
		return nil, false
	}
	return o.EnableRecurrentScavenging, true
}

// HasEnableRecurrentScavenging returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEnableRecurrentScavenging() bool {
	if o != nil && !IsNil(o.EnableRecurrentScavenging) {
		return true
	}

	return false
}

// SetEnableRecurrentScavenging gets a reference to the given bool and assigns it to the EnableRecurrentScavenging field.
func (o *ViewScavengingSettings) SetEnableRecurrentScavenging(v bool) {
	o.EnableRecurrentScavenging = &v
}

// GetEnableAutoReclamation returns the EnableAutoReclamation field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEnableAutoReclamation() bool {
	if o == nil || IsNil(o.EnableAutoReclamation) {
		var ret bool
		return ret
	}
	return *o.EnableAutoReclamation
}

// GetEnableAutoReclamationOk returns a tuple with the EnableAutoReclamation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEnableAutoReclamationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutoReclamation) {
		return nil, false
	}
	return o.EnableAutoReclamation, true
}

// HasEnableAutoReclamation returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEnableAutoReclamation() bool {
	if o != nil && !IsNil(o.EnableAutoReclamation) {
		return true
	}

	return false
}

// SetEnableAutoReclamation gets a reference to the given bool and assigns it to the EnableAutoReclamation field.
func (o *ViewScavengingSettings) SetEnableAutoReclamation(v bool) {
	o.EnableAutoReclamation = &v
}

// GetEnableRrLastQueried returns the EnableRrLastQueried field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEnableRrLastQueried() bool {
	if o == nil || IsNil(o.EnableRrLastQueried) {
		var ret bool
		return ret
	}
	return *o.EnableRrLastQueried
}

// GetEnableRrLastQueriedOk returns a tuple with the EnableRrLastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEnableRrLastQueriedOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRrLastQueried) {
		return nil, false
	}
	return o.EnableRrLastQueried, true
}

// HasEnableRrLastQueried returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEnableRrLastQueried() bool {
	if o != nil && !IsNil(o.EnableRrLastQueried) {
		return true
	}

	return false
}

// SetEnableRrLastQueried gets a reference to the given bool and assigns it to the EnableRrLastQueried field.
func (o *ViewScavengingSettings) SetEnableRrLastQueried(v bool) {
	o.EnableRrLastQueried = &v
}

// GetEnableZoneLastQueried returns the EnableZoneLastQueried field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEnableZoneLastQueried() bool {
	if o == nil || IsNil(o.EnableZoneLastQueried) {
		var ret bool
		return ret
	}
	return *o.EnableZoneLastQueried
}

// GetEnableZoneLastQueriedOk returns a tuple with the EnableZoneLastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEnableZoneLastQueriedOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableZoneLastQueried) {
		return nil, false
	}
	return o.EnableZoneLastQueried, true
}

// HasEnableZoneLastQueried returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEnableZoneLastQueried() bool {
	if o != nil && !IsNil(o.EnableZoneLastQueried) {
		return true
	}

	return false
}

// SetEnableZoneLastQueried gets a reference to the given bool and assigns it to the EnableZoneLastQueried field.
func (o *ViewScavengingSettings) SetEnableZoneLastQueried(v bool) {
	o.EnableZoneLastQueried = &v
}

// GetReclaimAssociatedRecords returns the ReclaimAssociatedRecords field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetReclaimAssociatedRecords() bool {
	if o == nil || IsNil(o.ReclaimAssociatedRecords) {
		var ret bool
		return ret
	}
	return *o.ReclaimAssociatedRecords
}

// GetReclaimAssociatedRecordsOk returns a tuple with the ReclaimAssociatedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetReclaimAssociatedRecordsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReclaimAssociatedRecords) {
		return nil, false
	}
	return o.ReclaimAssociatedRecords, true
}

// HasReclaimAssociatedRecords returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasReclaimAssociatedRecords() bool {
	if o != nil && !IsNil(o.ReclaimAssociatedRecords) {
		return true
	}

	return false
}

// SetReclaimAssociatedRecords gets a reference to the given bool and assigns it to the ReclaimAssociatedRecords field.
func (o *ViewScavengingSettings) SetReclaimAssociatedRecords(v bool) {
	o.ReclaimAssociatedRecords = &v
}

// GetScavengingSchedule returns the ScavengingSchedule field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetScavengingSchedule() ViewscavengingsettingsScavengingSchedule {
	if o == nil || IsNil(o.ScavengingSchedule) {
		var ret ViewscavengingsettingsScavengingSchedule
		return ret
	}
	return *o.ScavengingSchedule
}

// GetScavengingScheduleOk returns a tuple with the ScavengingSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetScavengingScheduleOk() (*ViewscavengingsettingsScavengingSchedule, bool) {
	if o == nil || IsNil(o.ScavengingSchedule) {
		return nil, false
	}
	return o.ScavengingSchedule, true
}

// HasScavengingSchedule returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasScavengingSchedule() bool {
	if o != nil && !IsNil(o.ScavengingSchedule) {
		return true
	}

	return false
}

// SetScavengingSchedule gets a reference to the given ViewscavengingsettingsScavengingSchedule and assigns it to the ScavengingSchedule field.
func (o *ViewScavengingSettings) SetScavengingSchedule(v ViewscavengingsettingsScavengingSchedule) {
	o.ScavengingSchedule = &v
}

// GetExpressionList returns the ExpressionList field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetExpressionList() []ViewscavengingsettingsExpressionList {
	if o == nil || IsNil(o.ExpressionList) {
		var ret []ViewscavengingsettingsExpressionList
		return ret
	}
	return o.ExpressionList
}

// GetExpressionListOk returns a tuple with the ExpressionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetExpressionListOk() ([]ViewscavengingsettingsExpressionList, bool) {
	if o == nil || IsNil(o.ExpressionList) {
		return nil, false
	}
	return o.ExpressionList, true
}

// HasExpressionList returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasExpressionList() bool {
	if o != nil && !IsNil(o.ExpressionList) {
		return true
	}

	return false
}

// SetExpressionList gets a reference to the given []ViewscavengingsettingsExpressionList and assigns it to the ExpressionList field.
func (o *ViewScavengingSettings) SetExpressionList(v []ViewscavengingsettingsExpressionList) {
	o.ExpressionList = v
}

// GetEaExpressionList returns the EaExpressionList field value if set, zero value otherwise.
func (o *ViewScavengingSettings) GetEaExpressionList() []ViewscavengingsettingsEaExpressionList {
	if o == nil || IsNil(o.EaExpressionList) {
		var ret []ViewscavengingsettingsEaExpressionList
		return ret
	}
	return o.EaExpressionList
}

// GetEaExpressionListOk returns a tuple with the EaExpressionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewScavengingSettings) GetEaExpressionListOk() ([]ViewscavengingsettingsEaExpressionList, bool) {
	if o == nil || IsNil(o.EaExpressionList) {
		return nil, false
	}
	return o.EaExpressionList, true
}

// HasEaExpressionList returns a boolean if a field has been set.
func (o *ViewScavengingSettings) HasEaExpressionList() bool {
	if o != nil && !IsNil(o.EaExpressionList) {
		return true
	}

	return false
}

// SetEaExpressionList gets a reference to the given []ViewscavengingsettingsEaExpressionList and assigns it to the EaExpressionList field.
func (o *ViewScavengingSettings) SetEaExpressionList(v []ViewscavengingsettingsEaExpressionList) {
	o.EaExpressionList = v
}

func (o ViewScavengingSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewScavengingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableScavenging) {
		toSerialize["enable_scavenging"] = o.EnableScavenging
	}
	if !IsNil(o.EnableRecurrentScavenging) {
		toSerialize["enable_recurrent_scavenging"] = o.EnableRecurrentScavenging
	}
	if !IsNil(o.EnableAutoReclamation) {
		toSerialize["enable_auto_reclamation"] = o.EnableAutoReclamation
	}
	if !IsNil(o.EnableRrLastQueried) {
		toSerialize["enable_rr_last_queried"] = o.EnableRrLastQueried
	}
	if !IsNil(o.EnableZoneLastQueried) {
		toSerialize["enable_zone_last_queried"] = o.EnableZoneLastQueried
	}
	if !IsNil(o.ReclaimAssociatedRecords) {
		toSerialize["reclaim_associated_records"] = o.ReclaimAssociatedRecords
	}
	if !IsNil(o.ScavengingSchedule) {
		toSerialize["scavenging_schedule"] = o.ScavengingSchedule
	}
	if !IsNil(o.ExpressionList) {
		toSerialize["expression_list"] = o.ExpressionList
	}
	if !IsNil(o.EaExpressionList) {
		toSerialize["ea_expression_list"] = o.EaExpressionList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViewScavengingSettings) UnmarshalJSON(data []byte) (err error) {
	varViewScavengingSettings := _ViewScavengingSettings{}

	err = json.Unmarshal(data, &varViewScavengingSettings)

	if err != nil {
		return err
	}

	*o = ViewScavengingSettings(varViewScavengingSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable_scavenging")
		delete(additionalProperties, "enable_recurrent_scavenging")
		delete(additionalProperties, "enable_auto_reclamation")
		delete(additionalProperties, "enable_rr_last_queried")
		delete(additionalProperties, "enable_zone_last_queried")
		delete(additionalProperties, "reclaim_associated_records")
		delete(additionalProperties, "scavenging_schedule")
		delete(additionalProperties, "expression_list")
		delete(additionalProperties, "ea_expression_list")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViewScavengingSettings struct {
	value *ViewScavengingSettings
	isSet bool
}

func (v NullableViewScavengingSettings) Get() *ViewScavengingSettings {
	return v.value
}

func (v *NullableViewScavengingSettings) Set(val *ViewScavengingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableViewScavengingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableViewScavengingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewScavengingSettings(val *ViewScavengingSettings) *NullableViewScavengingSettings {
	return &NullableViewScavengingSettings{value: val, isSet: true}
}

func (v NullableViewScavengingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewScavengingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
