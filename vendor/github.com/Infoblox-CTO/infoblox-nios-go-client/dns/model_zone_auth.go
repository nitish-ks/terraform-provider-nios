/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneAuth{}

// ZoneAuth struct for ZoneAuth
type ZoneAuth struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IP address of the server that is serving this zone.
	Address *string `json:"address,omitempty"`
	// This field allows the zone to receive GSS-TSIG authenticated DDNS updates from DHCP clients and servers in an AD domain. Note that addresses specified in this field ignore the permission set in the struct which will be set to 'ALLOW'.
	AllowActiveDir []ZoneAuthAllowActiveDir `json:"allow_active_dir,omitempty"`
	// The flag that allows to enable or disable fixed RRset ordering for authoritative forward-mapping zones.
	AllowFixedRrsetOrder *bool `json:"allow_fixed_rrset_order,omitempty"`
	// The flag that allows DHCP clients to perform GSS-TSIG signed updates for underscore zones.
	AllowGssTsigForUnderscoreZone *bool `json:"allow_gss_tsig_for_underscore_zone,omitempty"`
	// The flag that enables or disables the zone for GSS-TSIG updates.
	AllowGssTsigZoneUpdates *bool `json:"allow_gss_tsig_zone_updates,omitempty"`
	// Determines whether DNS queries are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.
	AllowQuery []ZoneAuthAllowQuery `json:"allow_query,omitempty"`
	// Determines whether zone transfers are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.
	AllowTransfer []ZoneAuthAllowTransfer `json:"allow_transfer,omitempty"`
	// Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.
	AllowUpdate []ZoneAuthAllowUpdate `json:"allow_update,omitempty"`
	// The list with IP addresses, networks or TSIG keys for clients, from which forwarded dynamic updates are allowed.
	AllowUpdateForwarding *bool                     `json:"allow_update_forwarding,omitempty"`
	AwsRte53ZoneInfo      *ZoneAuthAwsRte53ZoneInfo `json:"aws_rte53_zone_info,omitempty"`
	CloudInfo             *ZoneAuthCloudInfo        `json:"cloud_info,omitempty"`
	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// If this flag is set to True then copy allowed IPs from Allow Transfer to Also Notify.
	CopyXferToNotify *bool `json:"copy_xfer_to_notify,omitempty"`
	// Determines if PTR records are created for hosts automatically, if necessary, when the zone data is imported. This field is meaningful only when import_from is set.
	CreatePtrForBulkHosts *bool `json:"create_ptr_for_bulk_hosts,omitempty"`
	// Determines if PTR records are created for hosts automatically, if necessary, when the zone data is imported. This field is meaningful only when import_from is set.
	CreatePtrForHosts *bool `json:"create_ptr_for_hosts,omitempty"`
	// Determines whether automatic creation of subzones is enabled or not.
	CreateUnderscoreZones *bool `json:"create_underscore_zones,omitempty"`
	// Defines whether creation timestamp of RR should be updated ' when DDNS update happens even if there is no change to ' the RR.
	DdnsForceCreationTimestampUpdate *bool `json:"ddns_force_creation_timestamp_update,omitempty"`
	// The DDNS Principal cluster group name.
	DdnsPrincipalGroup *string `json:"ddns_principal_group,omitempty"`
	// The flag that indicates whether the DDNS principal track is enabled or disabled.
	DdnsPrincipalTracking *bool `json:"ddns_principal_tracking,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request based on FQDN patterns is enabled or disabled.
	DdnsRestrictPatterns *bool `json:"ddns_restrict_patterns,omitempty"`
	// The unordered list of restriction patterns for an option of to restrict DDNS updates based on FQDN patterns.
	DdnsRestrictPatternsList []string `json:"ddns_restrict_patterns_list,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request to protected resource records is enabled or disabled.
	DdnsRestrictProtected *bool `json:"ddns_restrict_protected,omitempty"`
	// The flag that indicates whether DDNS update request for principal other than target resource record's principal is restricted.
	DdnsRestrictSecure *bool `json:"ddns_restrict_secure,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request to resource records which are marked as 'STATIC' is enabled or disabled.
	DdnsRestrictStatic *bool `json:"ddns_restrict_static,omitempty"`
	// Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines whether the name servers that host the zone should forward queries (ended with the domain name of the zone) to any configured forwarders.
	DisableForwarding *bool `json:"disable_forwarding,omitempty"`
	// The displayed name of the DNS zone.
	DisplayDomain *string `json:"display_domain,omitempty"`
	// The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.
	DnsFqdn *string `json:"dns_fqdn,omitempty"`
	// If this is set to True, DNS integrity check is enabled for this zone.
	DnsIntegrityEnable *bool `json:"dns_integrity_enable,omitempty"`
	// The frequency, in seconds, of DNS integrity checks for this zone.
	DnsIntegrityFrequency *int64 `json:"dns_integrity_frequency,omitempty"`
	// The Grid member that performs DNS integrity checks for this zone.
	DnsIntegrityMember *string `json:"dns_integrity_member,omitempty"`
	// If this is set to True, more information is logged for DNS integrity checks for this zone.
	DnsIntegrityVerboseLogging *bool `json:"dns_integrity_verbose_logging,omitempty"`
	// The SOA email for the zone in punycode format.
	DnsSoaEmail     *string                  `json:"dns_soa_email,omitempty"`
	DnssecKeyParams *ZoneAuthDnssecKeyParams `json:"dnssec_key_params,omitempty"`
	// A list of DNSSEC keys for the zone.
	DnssecKeys []ZoneAuthDnssecKeys `json:"dnssec_keys,omitempty"`
	// The rollover date for the Key Signing Key.
	DnssecKskRolloverDate *int64 `json:"dnssec_ksk_rollover_date,omitempty"`
	// The rollover date for the Zone Signing Key.
	DnssecZskRolloverDate *int64 `json:"dnssec_zsk_rollover_date,omitempty"`
	// Determines if hosts and bulk hosts are automatically created when the zone data is imported. This field is meaningful only when import_from is set.
	DoHostAbstraction *bool `json:"do_host_abstraction,omitempty"`
	// The value of the check names policy, which indicates the action the appliance takes when it encounters host names that do not comply with the Strict Hostname Checking policy. This value applies only if the host name restriction policy is set to \"Strict Hostname Checking\".
	EffectiveCheckNamesPolicy *string `json:"effective_check_names_policy,omitempty"`
	// The selected hostname policy for records under this zone.
	EffectiveRecordNamePolicy *string `json:"effective_record_name_policy,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of external primary servers.
	ExternalPrimaries []ZoneAuthExternalPrimaries `json:"external_primaries,omitempty"`
	// The list of external secondary servers.
	ExternalSecondaries []ZoneAuthExternalSecondaries `json:"external_secondaries,omitempty"`
	// The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	Fqdn *string `json:"fqdn,omitempty"`
	// The grid primary servers for this zone.
	GridPrimary []ZoneAuthGridPrimary `json:"grid_primary,omitempty"`
	// Determines if the server is duplicated with parent delegation.
	GridPrimarySharedWithMsParentDelegation *bool `json:"grid_primary_shared_with_ms_parent_delegation,omitempty"`
	// The list with Grid members that are secondary servers for this zone.
	GridSecondaries []ZoneAuthGridSecondaries `json:"grid_secondaries,omitempty"`
	// The IP address of the Infoblox appliance from which zone data is imported. Setting this address to '255.255.255.255' and do_host_abstraction to 'true' will create Host records from A records in this zone without importing zone data.
	ImportFrom *string `json:"import_from,omitempty"`
	// This flag is set to True if DNSSEC is enabled for the zone.
	IsDnssecEnabled *bool `json:"is_dnssec_enabled,omitempty"`
	// Determines if the zone is DNSSEC signed.
	IsDnssecSigned *bool `json:"is_dnssec_signed,omitempty"`
	// Determines if multi-master DNS is enabled for the zone.
	IsMultimaster *bool `json:"is_multimaster,omitempty"`
	// The time the zone was last queried on.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// Determines last queried ACL for the specified IPv4 or IPv6 addresses and networks in scavenging settings.
	LastQueriedAcl []ZoneAuthLastQueriedAcl `json:"last_queried_acl,omitempty"`
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.
	Locked *bool `json:"locked,omitempty"`
	// The name of a superuser or the administrator who locked this zone.
	LockedBy *string `json:"locked_by,omitempty"`
	// IPv4 Netmask or IPv6 prefix for this zone.
	MaskPrefix *string `json:"mask_prefix,omitempty"`
	// The list of per-member SOA MNAME information.
	MemberSoaMnames []ZoneAuthMemberSoaMnames `json:"member_soa_mnames,omitempty"`
	// The list of per-member SOA serial information.
	MemberSoaSerials []ZoneAuthMemberSoaSerials `json:"member_soa_serials,omitempty"`
	// The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".
	MsAdIntegrated *bool `json:"ms_ad_integrated,omitempty"`
	// The list of DNS clients that are allowed to perform zone transfers from a Microsoft DNS server. This setting applies only to zones with Microsoft DNS servers that are either primary or secondary servers. This setting does not inherit any value from the Grid or from any member that defines an allow_transfer value. This setting does not apply to any grid member. Use the allow_transfer field to control which DNS clients are allowed to perform zone transfers on Grid members.
	MsAllowTransfer []ZoneAuthMsAllowTransfer `json:"ms_allow_transfer,omitempty"`
	// Determines which DNS clients are allowed to perform zone transfers from a Microsoft DNS server. Valid values are: \"ADDRESS_AC\", to use ms_allow_transfer field for specifying IP addresses, networks and Transaction Signature (TSIG) keys for clients that are allowed to do zone transfers. \"ANY\", to allow any client. \"ANY_NS\", to allow only the nameservers listed in this zone. \"NONE\", to deny all zone transfer requests.
	MsAllowTransferMode *string `json:"ms_allow_transfer_mode,omitempty"`
	// The list of domain controllers that are allowed to create NS records for authoritative zones.
	MsDcNsRecordCreation []ZoneAuthMsDcNsRecordCreation `json:"ms_dc_ns_record_creation,omitempty"`
	// Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.
	MsDdnsMode *string `json:"ms_ddns_mode,omitempty"`
	// The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.
	MsManaged *string `json:"ms_managed,omitempty"`
	// The list with the Microsoft DNS servers that are primary servers for the zone. Although a zone typically has just one primary name server, you can specify up to ten independent servers for a single zone.
	MsPrimaries []ZoneAuthMsPrimaries `json:"ms_primaries,omitempty"`
	// Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.
	MsReadOnly *bool `json:"ms_read_only,omitempty"`
	// The list with the Microsoft DNS servers that are secondary servers for the zone.
	MsSecondaries []ZoneAuthMsSecondaries `json:"ms_secondaries,omitempty"`
	// This flag controls whether this zone is synchronized with Microsoft DNS servers.
	MsSyncDisabled *bool `json:"ms_sync_disabled,omitempty"`
	// The name of MS synchronization master for this zone.
	MsSyncMasterName *string `json:"ms_sync_master_name,omitempty"`
	// The list with the associated network/network container information.
	NetworkAssociations []string `json:"network_associations,omitempty"`
	// The name of the network view in which this zone resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The number of seconds in delay with which notify messages are sent to secondaries.
	NotifyDelay *int64 `json:"notify_delay,omitempty"`
	// The name server group that serves DNS for this zone.
	NsGroup *string `json:"ns_group,omitempty"`
	// The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.
	Parent *string `json:"parent,omitempty"`
	// The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.
	Prefix *string `json:"prefix,omitempty"`
	// The type of the primary server.
	PrimaryType *string `json:"primary_type,omitempty"`
	// The hostname policy for records under this zone.
	RecordNamePolicy *string `json:"record_name_policy,omitempty"`
	// Determines if this zone is also monitoring resource records.
	RecordsMonitored *bool `json:"records_monitored,omitempty"`
	// Remove subzones delete option. Determines whether all child objects should be removed alongside with the parent zone or child objects should be assigned to another parental zone. By default child objects are deleted with the parent zone.
	RemoveSubzones *bool `json:"remove_subzones,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// The time data collection for Not Queried Resource Record was enabled for this zone.
	RrNotQueriedEnabledTime *int64                      `json:"rr_not_queried_enabled_time,omitempty"`
	ScavengingSettings      *ZoneAuthScavengingSettings `json:"scavenging_settings,omitempty"`
	// The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.
	SetSoaSerialNumber *bool `json:"set_soa_serial_number,omitempty"`
	// The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
	SoaDefaultTtl *int64 `json:"soa_default_ttl,omitempty"`
	// The SOA email value for this zone. This value can be in unicode format.
	SoaEmail *string `json:"soa_email,omitempty"`
	// This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
	SoaExpire *int64 `json:"soa_expire,omitempty"`
	// The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for \"Does Not Respond\" responses.
	SoaNegativeTtl *int64 `json:"soa_negative_ttl,omitempty"`
	// This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
	SoaRefresh *int64 `json:"soa_refresh,omitempty"`
	// This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
	SoaRetry *int64 `json:"soa_retry,omitempty"`
	// The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.
	SoaSerial *int64 `json:"soa_serial_number,omitempty"`
	// The associated shared record groups of a DNS zone. If a shared record group is associated with a zone, then all shared records in a shared record group will be shared in the zone.
	Srgs []string `json:"srgs,omitempty"`
	// Use this field to allow or deny dynamic DNS updates that are forwarded from specific IPv4/IPv6 addresses, networks, or a named ACL. You can also provide TSIG keys for clients that are allowed or denied to perform zone updates. This setting overrides the member-level setting.
	UpdateForwarding []ZoneAuthUpdateForwarding `json:"update_forwarding,omitempty"`
	// Use flag for: allow_active_dir
	UseAllowActiveDir *bool `json:"use_allow_active_dir,omitempty"`
	// Use flag for: allow_query
	UseAllowQuery *bool `json:"use_allow_query,omitempty"`
	// Use flag for: allow_transfer
	UseAllowTransfer *bool `json:"use_allow_transfer,omitempty"`
	// Use flag for: allow_update
	UseAllowUpdate *bool `json:"use_allow_update,omitempty"`
	// Use flag for: allow_update_forwarding
	UseAllowUpdateForwarding *bool `json:"use_allow_update_forwarding,omitempty"`
	// Apply policy to dynamic updates and inbound zone transfers (This value applies only if the host name restriction policy is set to \"Strict Hostname Checking\".)
	UseCheckNamesPolicy *bool `json:"use_check_names_policy,omitempty"`
	// Use flag for: copy_xfer_to_notify
	UseCopyXferToNotify *bool `json:"use_copy_xfer_to_notify,omitempty"`
	// Use flag for: ddns_force_creation_timestamp_update
	UseDdnsForceCreationTimestampUpdate *bool `json:"use_ddns_force_creation_timestamp_update,omitempty"`
	// Use flag for: ddns_restrict_patterns_list , ddns_restrict_patterns
	UseDdnsPatternsRestriction *bool `json:"use_ddns_patterns_restriction,omitempty"`
	// Use flag for: ddns_restrict_secure , ddns_principal_tracking, ddns_principal_group
	UseDdnsPrincipalSecurity *bool `json:"use_ddns_principal_security,omitempty"`
	// Use flag for: ddns_restrict_protected
	UseDdnsRestrictProtected *bool `json:"use_ddns_restrict_protected,omitempty"`
	// Use flag for: ddns_restrict_static
	UseDdnsRestrictStatic *bool `json:"use_ddns_restrict_static,omitempty"`
	// Use flag for: dnssec_key_params
	UseDnssecKeyParams *bool `json:"use_dnssec_key_params,omitempty"`
	// This flag controls whether the zone is using an external primary.
	UseExternalPrimary *bool `json:"use_external_primary,omitempty"`
	// Use flag for: soa_default_ttl , soa_expire, soa_negative_ttl, soa_refresh, soa_retry
	UseGridZoneTimer *bool `json:"use_grid_zone_timer,omitempty"`
	// Use flag for: import_from
	UseImportFrom *bool `json:"use_import_from,omitempty"`
	// Use flag for: notify_delay
	UseNotifyDelay *bool `json:"use_notify_delay,omitempty"`
	// Use flag for: record_name_policy
	UseRecordNamePolicy *bool `json:"use_record_name_policy,omitempty"`
	// Use flag for: scavenging_settings , last_queried_acl
	UseScavengingSettings *bool `json:"use_scavenging_settings,omitempty"`
	// Use flag for: soa_email
	UseSoaEmail *bool `json:"use_soa_email,omitempty"`
	// This is true if the zone is associated with a shared record group.
	UsingSrgAssociations *bool `json:"using_srg_associations,omitempty"`
	// The name of the DNS view in which the zone resides. Example \"external\".
	View *string `json:"view,omitempty"`
	// Determines the format of this zone.
	ZoneFormat *string `json:"zone_format,omitempty"`
	// The time when \"DNS Zones Last Queried\" was turned on for this zone.
	ZoneNotQueriedEnabledTime *int64 `json:"zone_not_queried_enabled_time,omitempty"`
}

// NewZoneAuth instantiates a new ZoneAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneAuth() *ZoneAuth {
	this := ZoneAuth{}
	return &this
}

// NewZoneAuthWithDefaults instantiates a new ZoneAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneAuthWithDefaults() *ZoneAuth {
	this := ZoneAuth{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ZoneAuth) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ZoneAuth) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ZoneAuth) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ZoneAuth) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ZoneAuth) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ZoneAuth) SetAddress(v string) {
	o.Address = &v
}

// GetAllowActiveDir returns the AllowActiveDir field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowActiveDir() []ZoneAuthAllowActiveDir {
	if o == nil || IsNil(o.AllowActiveDir) {
		var ret []ZoneAuthAllowActiveDir
		return ret
	}
	return o.AllowActiveDir
}

// GetAllowActiveDirOk returns a tuple with the AllowActiveDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowActiveDirOk() ([]ZoneAuthAllowActiveDir, bool) {
	if o == nil || IsNil(o.AllowActiveDir) {
		return nil, false
	}
	return o.AllowActiveDir, true
}

// HasAllowActiveDir returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowActiveDir() bool {
	if o != nil && !IsNil(o.AllowActiveDir) {
		return true
	}

	return false
}

// SetAllowActiveDir gets a reference to the given []ZoneAuthAllowActiveDir and assigns it to the AllowActiveDir field.
func (o *ZoneAuth) SetAllowActiveDir(v []ZoneAuthAllowActiveDir) {
	o.AllowActiveDir = v
}

// GetAllowFixedRrsetOrder returns the AllowFixedRrsetOrder field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowFixedRrsetOrder() bool {
	if o == nil || IsNil(o.AllowFixedRrsetOrder) {
		var ret bool
		return ret
	}
	return *o.AllowFixedRrsetOrder
}

// GetAllowFixedRrsetOrderOk returns a tuple with the AllowFixedRrsetOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowFixedRrsetOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowFixedRrsetOrder) {
		return nil, false
	}
	return o.AllowFixedRrsetOrder, true
}

// HasAllowFixedRrsetOrder returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowFixedRrsetOrder() bool {
	if o != nil && !IsNil(o.AllowFixedRrsetOrder) {
		return true
	}

	return false
}

// SetAllowFixedRrsetOrder gets a reference to the given bool and assigns it to the AllowFixedRrsetOrder field.
func (o *ZoneAuth) SetAllowFixedRrsetOrder(v bool) {
	o.AllowFixedRrsetOrder = &v
}

// GetAllowGssTsigForUnderscoreZone returns the AllowGssTsigForUnderscoreZone field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowGssTsigForUnderscoreZone() bool {
	if o == nil || IsNil(o.AllowGssTsigForUnderscoreZone) {
		var ret bool
		return ret
	}
	return *o.AllowGssTsigForUnderscoreZone
}

// GetAllowGssTsigForUnderscoreZoneOk returns a tuple with the AllowGssTsigForUnderscoreZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowGssTsigForUnderscoreZoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGssTsigForUnderscoreZone) {
		return nil, false
	}
	return o.AllowGssTsigForUnderscoreZone, true
}

// HasAllowGssTsigForUnderscoreZone returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowGssTsigForUnderscoreZone() bool {
	if o != nil && !IsNil(o.AllowGssTsigForUnderscoreZone) {
		return true
	}

	return false
}

// SetAllowGssTsigForUnderscoreZone gets a reference to the given bool and assigns it to the AllowGssTsigForUnderscoreZone field.
func (o *ZoneAuth) SetAllowGssTsigForUnderscoreZone(v bool) {
	o.AllowGssTsigForUnderscoreZone = &v
}

// GetAllowGssTsigZoneUpdates returns the AllowGssTsigZoneUpdates field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowGssTsigZoneUpdates() bool {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		var ret bool
		return ret
	}
	return *o.AllowGssTsigZoneUpdates
}

// GetAllowGssTsigZoneUpdatesOk returns a tuple with the AllowGssTsigZoneUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowGssTsigZoneUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		return nil, false
	}
	return o.AllowGssTsigZoneUpdates, true
}

// HasAllowGssTsigZoneUpdates returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowGssTsigZoneUpdates() bool {
	if o != nil && !IsNil(o.AllowGssTsigZoneUpdates) {
		return true
	}

	return false
}

// SetAllowGssTsigZoneUpdates gets a reference to the given bool and assigns it to the AllowGssTsigZoneUpdates field.
func (o *ZoneAuth) SetAllowGssTsigZoneUpdates(v bool) {
	o.AllowGssTsigZoneUpdates = &v
}

// GetAllowQuery returns the AllowQuery field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowQuery() []ZoneAuthAllowQuery {
	if o == nil || IsNil(o.AllowQuery) {
		var ret []ZoneAuthAllowQuery
		return ret
	}
	return o.AllowQuery
}

// GetAllowQueryOk returns a tuple with the AllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowQueryOk() ([]ZoneAuthAllowQuery, bool) {
	if o == nil || IsNil(o.AllowQuery) {
		return nil, false
	}
	return o.AllowQuery, true
}

// HasAllowQuery returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowQuery() bool {
	if o != nil && !IsNil(o.AllowQuery) {
		return true
	}

	return false
}

// SetAllowQuery gets a reference to the given []ZoneAuthAllowQuery and assigns it to the AllowQuery field.
func (o *ZoneAuth) SetAllowQuery(v []ZoneAuthAllowQuery) {
	o.AllowQuery = v
}

// GetAllowTransfer returns the AllowTransfer field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowTransfer() []ZoneAuthAllowTransfer {
	if o == nil || IsNil(o.AllowTransfer) {
		var ret []ZoneAuthAllowTransfer
		return ret
	}
	return o.AllowTransfer
}

// GetAllowTransferOk returns a tuple with the AllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowTransferOk() ([]ZoneAuthAllowTransfer, bool) {
	if o == nil || IsNil(o.AllowTransfer) {
		return nil, false
	}
	return o.AllowTransfer, true
}

// HasAllowTransfer returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowTransfer() bool {
	if o != nil && !IsNil(o.AllowTransfer) {
		return true
	}

	return false
}

// SetAllowTransfer gets a reference to the given []ZoneAuthAllowTransfer and assigns it to the AllowTransfer field.
func (o *ZoneAuth) SetAllowTransfer(v []ZoneAuthAllowTransfer) {
	o.AllowTransfer = v
}

// GetAllowUpdate returns the AllowUpdate field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowUpdate() []ZoneAuthAllowUpdate {
	if o == nil || IsNil(o.AllowUpdate) {
		var ret []ZoneAuthAllowUpdate
		return ret
	}
	return o.AllowUpdate
}

// GetAllowUpdateOk returns a tuple with the AllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowUpdateOk() ([]ZoneAuthAllowUpdate, bool) {
	if o == nil || IsNil(o.AllowUpdate) {
		return nil, false
	}
	return o.AllowUpdate, true
}

// HasAllowUpdate returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowUpdate() bool {
	if o != nil && !IsNil(o.AllowUpdate) {
		return true
	}

	return false
}

// SetAllowUpdate gets a reference to the given []ZoneAuthAllowUpdate and assigns it to the AllowUpdate field.
func (o *ZoneAuth) SetAllowUpdate(v []ZoneAuthAllowUpdate) {
	o.AllowUpdate = v
}

// GetAllowUpdateForwarding returns the AllowUpdateForwarding field value if set, zero value otherwise.
func (o *ZoneAuth) GetAllowUpdateForwarding() bool {
	if o == nil || IsNil(o.AllowUpdateForwarding) {
		var ret bool
		return ret
	}
	return *o.AllowUpdateForwarding
}

// GetAllowUpdateForwardingOk returns a tuple with the AllowUpdateForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAllowUpdateForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpdateForwarding) {
		return nil, false
	}
	return o.AllowUpdateForwarding, true
}

// HasAllowUpdateForwarding returns a boolean if a field has been set.
func (o *ZoneAuth) HasAllowUpdateForwarding() bool {
	if o != nil && !IsNil(o.AllowUpdateForwarding) {
		return true
	}

	return false
}

// SetAllowUpdateForwarding gets a reference to the given bool and assigns it to the AllowUpdateForwarding field.
func (o *ZoneAuth) SetAllowUpdateForwarding(v bool) {
	o.AllowUpdateForwarding = &v
}

// GetAwsRte53ZoneInfo returns the AwsRte53ZoneInfo field value if set, zero value otherwise.
func (o *ZoneAuth) GetAwsRte53ZoneInfo() ZoneAuthAwsRte53ZoneInfo {
	if o == nil || IsNil(o.AwsRte53ZoneInfo) {
		var ret ZoneAuthAwsRte53ZoneInfo
		return ret
	}
	return *o.AwsRte53ZoneInfo
}

// GetAwsRte53ZoneInfoOk returns a tuple with the AwsRte53ZoneInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetAwsRte53ZoneInfoOk() (*ZoneAuthAwsRte53ZoneInfo, bool) {
	if o == nil || IsNil(o.AwsRte53ZoneInfo) {
		return nil, false
	}
	return o.AwsRte53ZoneInfo, true
}

// HasAwsRte53ZoneInfo returns a boolean if a field has been set.
func (o *ZoneAuth) HasAwsRte53ZoneInfo() bool {
	if o != nil && !IsNil(o.AwsRte53ZoneInfo) {
		return true
	}

	return false
}

// SetAwsRte53ZoneInfo gets a reference to the given ZoneAuthAwsRte53ZoneInfo and assigns it to the AwsRte53ZoneInfo field.
func (o *ZoneAuth) SetAwsRte53ZoneInfo(v ZoneAuthAwsRte53ZoneInfo) {
	o.AwsRte53ZoneInfo = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *ZoneAuth) GetCloudInfo() ZoneAuthCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret ZoneAuthCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCloudInfoOk() (*ZoneAuthCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *ZoneAuth) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given ZoneAuthCloudInfo and assigns it to the CloudInfo field.
func (o *ZoneAuth) SetCloudInfo(v ZoneAuthCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneAuth) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneAuth) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneAuth) SetComment(v string) {
	o.Comment = &v
}

// GetCopyXferToNotify returns the CopyXferToNotify field value if set, zero value otherwise.
func (o *ZoneAuth) GetCopyXferToNotify() bool {
	if o == nil || IsNil(o.CopyXferToNotify) {
		var ret bool
		return ret
	}
	return *o.CopyXferToNotify
}

// GetCopyXferToNotifyOk returns a tuple with the CopyXferToNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCopyXferToNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyXferToNotify) {
		return nil, false
	}
	return o.CopyXferToNotify, true
}

// HasCopyXferToNotify returns a boolean if a field has been set.
func (o *ZoneAuth) HasCopyXferToNotify() bool {
	if o != nil && !IsNil(o.CopyXferToNotify) {
		return true
	}

	return false
}

// SetCopyXferToNotify gets a reference to the given bool and assigns it to the CopyXferToNotify field.
func (o *ZoneAuth) SetCopyXferToNotify(v bool) {
	o.CopyXferToNotify = &v
}

// GetCreatePtrForBulkHosts returns the CreatePtrForBulkHosts field value if set, zero value otherwise.
func (o *ZoneAuth) GetCreatePtrForBulkHosts() bool {
	if o == nil || IsNil(o.CreatePtrForBulkHosts) {
		var ret bool
		return ret
	}
	return *o.CreatePtrForBulkHosts
}

// GetCreatePtrForBulkHostsOk returns a tuple with the CreatePtrForBulkHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCreatePtrForBulkHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreatePtrForBulkHosts) {
		return nil, false
	}
	return o.CreatePtrForBulkHosts, true
}

// HasCreatePtrForBulkHosts returns a boolean if a field has been set.
func (o *ZoneAuth) HasCreatePtrForBulkHosts() bool {
	if o != nil && !IsNil(o.CreatePtrForBulkHosts) {
		return true
	}

	return false
}

// SetCreatePtrForBulkHosts gets a reference to the given bool and assigns it to the CreatePtrForBulkHosts field.
func (o *ZoneAuth) SetCreatePtrForBulkHosts(v bool) {
	o.CreatePtrForBulkHosts = &v
}

// GetCreatePtrForHosts returns the CreatePtrForHosts field value if set, zero value otherwise.
func (o *ZoneAuth) GetCreatePtrForHosts() bool {
	if o == nil || IsNil(o.CreatePtrForHosts) {
		var ret bool
		return ret
	}
	return *o.CreatePtrForHosts
}

// GetCreatePtrForHostsOk returns a tuple with the CreatePtrForHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCreatePtrForHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreatePtrForHosts) {
		return nil, false
	}
	return o.CreatePtrForHosts, true
}

// HasCreatePtrForHosts returns a boolean if a field has been set.
func (o *ZoneAuth) HasCreatePtrForHosts() bool {
	if o != nil && !IsNil(o.CreatePtrForHosts) {
		return true
	}

	return false
}

// SetCreatePtrForHosts gets a reference to the given bool and assigns it to the CreatePtrForHosts field.
func (o *ZoneAuth) SetCreatePtrForHosts(v bool) {
	o.CreatePtrForHosts = &v
}

// GetCreateUnderscoreZones returns the CreateUnderscoreZones field value if set, zero value otherwise.
func (o *ZoneAuth) GetCreateUnderscoreZones() bool {
	if o == nil || IsNil(o.CreateUnderscoreZones) {
		var ret bool
		return ret
	}
	return *o.CreateUnderscoreZones
}

// GetCreateUnderscoreZonesOk returns a tuple with the CreateUnderscoreZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetCreateUnderscoreZonesOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateUnderscoreZones) {
		return nil, false
	}
	return o.CreateUnderscoreZones, true
}

// HasCreateUnderscoreZones returns a boolean if a field has been set.
func (o *ZoneAuth) HasCreateUnderscoreZones() bool {
	if o != nil && !IsNil(o.CreateUnderscoreZones) {
		return true
	}

	return false
}

// SetCreateUnderscoreZones gets a reference to the given bool and assigns it to the CreateUnderscoreZones field.
func (o *ZoneAuth) SetCreateUnderscoreZones(v bool) {
	o.CreateUnderscoreZones = &v
}

// GetDdnsForceCreationTimestampUpdate returns the DdnsForceCreationTimestampUpdate field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsForceCreationTimestampUpdate() bool {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		var ret bool
		return ret
	}
	return *o.DdnsForceCreationTimestampUpdate
}

// GetDdnsForceCreationTimestampUpdateOk returns a tuple with the DdnsForceCreationTimestampUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsForceCreationTimestampUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		return nil, false
	}
	return o.DdnsForceCreationTimestampUpdate, true
}

// HasDdnsForceCreationTimestampUpdate returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsForceCreationTimestampUpdate() bool {
	if o != nil && !IsNil(o.DdnsForceCreationTimestampUpdate) {
		return true
	}

	return false
}

// SetDdnsForceCreationTimestampUpdate gets a reference to the given bool and assigns it to the DdnsForceCreationTimestampUpdate field.
func (o *ZoneAuth) SetDdnsForceCreationTimestampUpdate(v bool) {
	o.DdnsForceCreationTimestampUpdate = &v
}

// GetDdnsPrincipalGroup returns the DdnsPrincipalGroup field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsPrincipalGroup() string {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipalGroup
}

// GetDdnsPrincipalGroupOk returns a tuple with the DdnsPrincipalGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsPrincipalGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		return nil, false
	}
	return o.DdnsPrincipalGroup, true
}

// HasDdnsPrincipalGroup returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsPrincipalGroup() bool {
	if o != nil && !IsNil(o.DdnsPrincipalGroup) {
		return true
	}

	return false
}

// SetDdnsPrincipalGroup gets a reference to the given string and assigns it to the DdnsPrincipalGroup field.
func (o *ZoneAuth) SetDdnsPrincipalGroup(v string) {
	o.DdnsPrincipalGroup = &v
}

// GetDdnsPrincipalTracking returns the DdnsPrincipalTracking field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsPrincipalTracking() bool {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		var ret bool
		return ret
	}
	return *o.DdnsPrincipalTracking
}

// GetDdnsPrincipalTrackingOk returns a tuple with the DdnsPrincipalTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsPrincipalTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		return nil, false
	}
	return o.DdnsPrincipalTracking, true
}

// HasDdnsPrincipalTracking returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsPrincipalTracking() bool {
	if o != nil && !IsNil(o.DdnsPrincipalTracking) {
		return true
	}

	return false
}

// SetDdnsPrincipalTracking gets a reference to the given bool and assigns it to the DdnsPrincipalTracking field.
func (o *ZoneAuth) SetDdnsPrincipalTracking(v bool) {
	o.DdnsPrincipalTracking = &v
}

// GetDdnsRestrictPatterns returns the DdnsRestrictPatterns field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsRestrictPatterns() bool {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictPatterns
}

// GetDdnsRestrictPatternsOk returns a tuple with the DdnsRestrictPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsRestrictPatternsOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		return nil, false
	}
	return o.DdnsRestrictPatterns, true
}

// HasDdnsRestrictPatterns returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsRestrictPatterns() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatterns) {
		return true
	}

	return false
}

// SetDdnsRestrictPatterns gets a reference to the given bool and assigns it to the DdnsRestrictPatterns field.
func (o *ZoneAuth) SetDdnsRestrictPatterns(v bool) {
	o.DdnsRestrictPatterns = &v
}

// GetDdnsRestrictPatternsList returns the DdnsRestrictPatternsList field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsRestrictPatternsList() []string {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		var ret []string
		return ret
	}
	return o.DdnsRestrictPatternsList
}

// GetDdnsRestrictPatternsListOk returns a tuple with the DdnsRestrictPatternsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsRestrictPatternsListOk() ([]string, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		return nil, false
	}
	return o.DdnsRestrictPatternsList, true
}

// HasDdnsRestrictPatternsList returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsRestrictPatternsList() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatternsList) {
		return true
	}

	return false
}

// SetDdnsRestrictPatternsList gets a reference to the given []string and assigns it to the DdnsRestrictPatternsList field.
func (o *ZoneAuth) SetDdnsRestrictPatternsList(v []string) {
	o.DdnsRestrictPatternsList = v
}

// GetDdnsRestrictProtected returns the DdnsRestrictProtected field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsRestrictProtected() bool {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictProtected
}

// GetDdnsRestrictProtectedOk returns a tuple with the DdnsRestrictProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsRestrictProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		return nil, false
	}
	return o.DdnsRestrictProtected, true
}

// HasDdnsRestrictProtected returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsRestrictProtected() bool {
	if o != nil && !IsNil(o.DdnsRestrictProtected) {
		return true
	}

	return false
}

// SetDdnsRestrictProtected gets a reference to the given bool and assigns it to the DdnsRestrictProtected field.
func (o *ZoneAuth) SetDdnsRestrictProtected(v bool) {
	o.DdnsRestrictProtected = &v
}

// GetDdnsRestrictSecure returns the DdnsRestrictSecure field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsRestrictSecure() bool {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictSecure
}

// GetDdnsRestrictSecureOk returns a tuple with the DdnsRestrictSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsRestrictSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		return nil, false
	}
	return o.DdnsRestrictSecure, true
}

// HasDdnsRestrictSecure returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsRestrictSecure() bool {
	if o != nil && !IsNil(o.DdnsRestrictSecure) {
		return true
	}

	return false
}

// SetDdnsRestrictSecure gets a reference to the given bool and assigns it to the DdnsRestrictSecure field.
func (o *ZoneAuth) SetDdnsRestrictSecure(v bool) {
	o.DdnsRestrictSecure = &v
}

// GetDdnsRestrictStatic returns the DdnsRestrictStatic field value if set, zero value otherwise.
func (o *ZoneAuth) GetDdnsRestrictStatic() bool {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictStatic
}

// GetDdnsRestrictStaticOk returns a tuple with the DdnsRestrictStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDdnsRestrictStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		return nil, false
	}
	return o.DdnsRestrictStatic, true
}

// HasDdnsRestrictStatic returns a boolean if a field has been set.
func (o *ZoneAuth) HasDdnsRestrictStatic() bool {
	if o != nil && !IsNil(o.DdnsRestrictStatic) {
		return true
	}

	return false
}

// SetDdnsRestrictStatic gets a reference to the given bool and assigns it to the DdnsRestrictStatic field.
func (o *ZoneAuth) SetDdnsRestrictStatic(v bool) {
	o.DdnsRestrictStatic = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *ZoneAuth) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *ZoneAuth) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *ZoneAuth) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableForwarding returns the DisableForwarding field value if set, zero value otherwise.
func (o *ZoneAuth) GetDisableForwarding() bool {
	if o == nil || IsNil(o.DisableForwarding) {
		var ret bool
		return ret
	}
	return *o.DisableForwarding
}

// GetDisableForwardingOk returns a tuple with the DisableForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDisableForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableForwarding) {
		return nil, false
	}
	return o.DisableForwarding, true
}

// HasDisableForwarding returns a boolean if a field has been set.
func (o *ZoneAuth) HasDisableForwarding() bool {
	if o != nil && !IsNil(o.DisableForwarding) {
		return true
	}

	return false
}

// SetDisableForwarding gets a reference to the given bool and assigns it to the DisableForwarding field.
func (o *ZoneAuth) SetDisableForwarding(v bool) {
	o.DisableForwarding = &v
}

// GetDisplayDomain returns the DisplayDomain field value if set, zero value otherwise.
func (o *ZoneAuth) GetDisplayDomain() string {
	if o == nil || IsNil(o.DisplayDomain) {
		var ret string
		return ret
	}
	return *o.DisplayDomain
}

// GetDisplayDomainOk returns a tuple with the DisplayDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDisplayDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomain) {
		return nil, false
	}
	return o.DisplayDomain, true
}

// HasDisplayDomain returns a boolean if a field has been set.
func (o *ZoneAuth) HasDisplayDomain() bool {
	if o != nil && !IsNil(o.DisplayDomain) {
		return true
	}

	return false
}

// SetDisplayDomain gets a reference to the given string and assigns it to the DisplayDomain field.
func (o *ZoneAuth) SetDisplayDomain(v string) {
	o.DisplayDomain = &v
}

// GetDnsFqdn returns the DnsFqdn field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsFqdn() string {
	if o == nil || IsNil(o.DnsFqdn) {
		var ret string
		return ret
	}
	return *o.DnsFqdn
}

// GetDnsFqdnOk returns a tuple with the DnsFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.DnsFqdn) {
		return nil, false
	}
	return o.DnsFqdn, true
}

// HasDnsFqdn returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsFqdn() bool {
	if o != nil && !IsNil(o.DnsFqdn) {
		return true
	}

	return false
}

// SetDnsFqdn gets a reference to the given string and assigns it to the DnsFqdn field.
func (o *ZoneAuth) SetDnsFqdn(v string) {
	o.DnsFqdn = &v
}

// GetDnsIntegrityEnable returns the DnsIntegrityEnable field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsIntegrityEnable() bool {
	if o == nil || IsNil(o.DnsIntegrityEnable) {
		var ret bool
		return ret
	}
	return *o.DnsIntegrityEnable
}

// GetDnsIntegrityEnableOk returns a tuple with the DnsIntegrityEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsIntegrityEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsIntegrityEnable) {
		return nil, false
	}
	return o.DnsIntegrityEnable, true
}

// HasDnsIntegrityEnable returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsIntegrityEnable() bool {
	if o != nil && !IsNil(o.DnsIntegrityEnable) {
		return true
	}

	return false
}

// SetDnsIntegrityEnable gets a reference to the given bool and assigns it to the DnsIntegrityEnable field.
func (o *ZoneAuth) SetDnsIntegrityEnable(v bool) {
	o.DnsIntegrityEnable = &v
}

// GetDnsIntegrityFrequency returns the DnsIntegrityFrequency field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsIntegrityFrequency() int64 {
	if o == nil || IsNil(o.DnsIntegrityFrequency) {
		var ret int64
		return ret
	}
	return *o.DnsIntegrityFrequency
}

// GetDnsIntegrityFrequencyOk returns a tuple with the DnsIntegrityFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsIntegrityFrequencyOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsIntegrityFrequency) {
		return nil, false
	}
	return o.DnsIntegrityFrequency, true
}

// HasDnsIntegrityFrequency returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsIntegrityFrequency() bool {
	if o != nil && !IsNil(o.DnsIntegrityFrequency) {
		return true
	}

	return false
}

// SetDnsIntegrityFrequency gets a reference to the given int64 and assigns it to the DnsIntegrityFrequency field.
func (o *ZoneAuth) SetDnsIntegrityFrequency(v int64) {
	o.DnsIntegrityFrequency = &v
}

// GetDnsIntegrityMember returns the DnsIntegrityMember field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsIntegrityMember() string {
	if o == nil || IsNil(o.DnsIntegrityMember) {
		var ret string
		return ret
	}
	return *o.DnsIntegrityMember
}

// GetDnsIntegrityMemberOk returns a tuple with the DnsIntegrityMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsIntegrityMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DnsIntegrityMember) {
		return nil, false
	}
	return o.DnsIntegrityMember, true
}

// HasDnsIntegrityMember returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsIntegrityMember() bool {
	if o != nil && !IsNil(o.DnsIntegrityMember) {
		return true
	}

	return false
}

// SetDnsIntegrityMember gets a reference to the given string and assigns it to the DnsIntegrityMember field.
func (o *ZoneAuth) SetDnsIntegrityMember(v string) {
	o.DnsIntegrityMember = &v
}

// GetDnsIntegrityVerboseLogging returns the DnsIntegrityVerboseLogging field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsIntegrityVerboseLogging() bool {
	if o == nil || IsNil(o.DnsIntegrityVerboseLogging) {
		var ret bool
		return ret
	}
	return *o.DnsIntegrityVerboseLogging
}

// GetDnsIntegrityVerboseLoggingOk returns a tuple with the DnsIntegrityVerboseLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsIntegrityVerboseLoggingOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsIntegrityVerboseLogging) {
		return nil, false
	}
	return o.DnsIntegrityVerboseLogging, true
}

// HasDnsIntegrityVerboseLogging returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsIntegrityVerboseLogging() bool {
	if o != nil && !IsNil(o.DnsIntegrityVerboseLogging) {
		return true
	}

	return false
}

// SetDnsIntegrityVerboseLogging gets a reference to the given bool and assigns it to the DnsIntegrityVerboseLogging field.
func (o *ZoneAuth) SetDnsIntegrityVerboseLogging(v bool) {
	o.DnsIntegrityVerboseLogging = &v
}

// GetDnsSoaEmail returns the DnsSoaEmail field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnsSoaEmail() string {
	if o == nil || IsNil(o.DnsSoaEmail) {
		var ret string
		return ret
	}
	return *o.DnsSoaEmail
}

// GetDnsSoaEmailOk returns a tuple with the DnsSoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnsSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSoaEmail) {
		return nil, false
	}
	return o.DnsSoaEmail, true
}

// HasDnsSoaEmail returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnsSoaEmail() bool {
	if o != nil && !IsNil(o.DnsSoaEmail) {
		return true
	}

	return false
}

// SetDnsSoaEmail gets a reference to the given string and assigns it to the DnsSoaEmail field.
func (o *ZoneAuth) SetDnsSoaEmail(v string) {
	o.DnsSoaEmail = &v
}

// GetDnssecKeyParams returns the DnssecKeyParams field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnssecKeyParams() ZoneAuthDnssecKeyParams {
	if o == nil || IsNil(o.DnssecKeyParams) {
		var ret ZoneAuthDnssecKeyParams
		return ret
	}
	return *o.DnssecKeyParams
}

// GetDnssecKeyParamsOk returns a tuple with the DnssecKeyParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnssecKeyParamsOk() (*ZoneAuthDnssecKeyParams, bool) {
	if o == nil || IsNil(o.DnssecKeyParams) {
		return nil, false
	}
	return o.DnssecKeyParams, true
}

// HasDnssecKeyParams returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnssecKeyParams() bool {
	if o != nil && !IsNil(o.DnssecKeyParams) {
		return true
	}

	return false
}

// SetDnssecKeyParams gets a reference to the given ZoneAuthDnssecKeyParams and assigns it to the DnssecKeyParams field.
func (o *ZoneAuth) SetDnssecKeyParams(v ZoneAuthDnssecKeyParams) {
	o.DnssecKeyParams = &v
}

// GetDnssecKeys returns the DnssecKeys field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnssecKeys() []ZoneAuthDnssecKeys {
	if o == nil || IsNil(o.DnssecKeys) {
		var ret []ZoneAuthDnssecKeys
		return ret
	}
	return o.DnssecKeys
}

// GetDnssecKeysOk returns a tuple with the DnssecKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnssecKeysOk() ([]ZoneAuthDnssecKeys, bool) {
	if o == nil || IsNil(o.DnssecKeys) {
		return nil, false
	}
	return o.DnssecKeys, true
}

// HasDnssecKeys returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnssecKeys() bool {
	if o != nil && !IsNil(o.DnssecKeys) {
		return true
	}

	return false
}

// SetDnssecKeys gets a reference to the given []ZoneAuthDnssecKeys and assigns it to the DnssecKeys field.
func (o *ZoneAuth) SetDnssecKeys(v []ZoneAuthDnssecKeys) {
	o.DnssecKeys = v
}

// GetDnssecKskRolloverDate returns the DnssecKskRolloverDate field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnssecKskRolloverDate() int64 {
	if o == nil || IsNil(o.DnssecKskRolloverDate) {
		var ret int64
		return ret
	}
	return *o.DnssecKskRolloverDate
}

// GetDnssecKskRolloverDateOk returns a tuple with the DnssecKskRolloverDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnssecKskRolloverDateOk() (*int64, bool) {
	if o == nil || IsNil(o.DnssecKskRolloverDate) {
		return nil, false
	}
	return o.DnssecKskRolloverDate, true
}

// HasDnssecKskRolloverDate returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnssecKskRolloverDate() bool {
	if o != nil && !IsNil(o.DnssecKskRolloverDate) {
		return true
	}

	return false
}

// SetDnssecKskRolloverDate gets a reference to the given int64 and assigns it to the DnssecKskRolloverDate field.
func (o *ZoneAuth) SetDnssecKskRolloverDate(v int64) {
	o.DnssecKskRolloverDate = &v
}

// GetDnssecZskRolloverDate returns the DnssecZskRolloverDate field value if set, zero value otherwise.
func (o *ZoneAuth) GetDnssecZskRolloverDate() int64 {
	if o == nil || IsNil(o.DnssecZskRolloverDate) {
		var ret int64
		return ret
	}
	return *o.DnssecZskRolloverDate
}

// GetDnssecZskRolloverDateOk returns a tuple with the DnssecZskRolloverDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDnssecZskRolloverDateOk() (*int64, bool) {
	if o == nil || IsNil(o.DnssecZskRolloverDate) {
		return nil, false
	}
	return o.DnssecZskRolloverDate, true
}

// HasDnssecZskRolloverDate returns a boolean if a field has been set.
func (o *ZoneAuth) HasDnssecZskRolloverDate() bool {
	if o != nil && !IsNil(o.DnssecZskRolloverDate) {
		return true
	}

	return false
}

// SetDnssecZskRolloverDate gets a reference to the given int64 and assigns it to the DnssecZskRolloverDate field.
func (o *ZoneAuth) SetDnssecZskRolloverDate(v int64) {
	o.DnssecZskRolloverDate = &v
}

// GetDoHostAbstraction returns the DoHostAbstraction field value if set, zero value otherwise.
func (o *ZoneAuth) GetDoHostAbstraction() bool {
	if o == nil || IsNil(o.DoHostAbstraction) {
		var ret bool
		return ret
	}
	return *o.DoHostAbstraction
}

// GetDoHostAbstractionOk returns a tuple with the DoHostAbstraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetDoHostAbstractionOk() (*bool, bool) {
	if o == nil || IsNil(o.DoHostAbstraction) {
		return nil, false
	}
	return o.DoHostAbstraction, true
}

// HasDoHostAbstraction returns a boolean if a field has been set.
func (o *ZoneAuth) HasDoHostAbstraction() bool {
	if o != nil && !IsNil(o.DoHostAbstraction) {
		return true
	}

	return false
}

// SetDoHostAbstraction gets a reference to the given bool and assigns it to the DoHostAbstraction field.
func (o *ZoneAuth) SetDoHostAbstraction(v bool) {
	o.DoHostAbstraction = &v
}

// GetEffectiveCheckNamesPolicy returns the EffectiveCheckNamesPolicy field value if set, zero value otherwise.
func (o *ZoneAuth) GetEffectiveCheckNamesPolicy() string {
	if o == nil || IsNil(o.EffectiveCheckNamesPolicy) {
		var ret string
		return ret
	}
	return *o.EffectiveCheckNamesPolicy
}

// GetEffectiveCheckNamesPolicyOk returns a tuple with the EffectiveCheckNamesPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetEffectiveCheckNamesPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveCheckNamesPolicy) {
		return nil, false
	}
	return o.EffectiveCheckNamesPolicy, true
}

// HasEffectiveCheckNamesPolicy returns a boolean if a field has been set.
func (o *ZoneAuth) HasEffectiveCheckNamesPolicy() bool {
	if o != nil && !IsNil(o.EffectiveCheckNamesPolicy) {
		return true
	}

	return false
}

// SetEffectiveCheckNamesPolicy gets a reference to the given string and assigns it to the EffectiveCheckNamesPolicy field.
func (o *ZoneAuth) SetEffectiveCheckNamesPolicy(v string) {
	o.EffectiveCheckNamesPolicy = &v
}

// GetEffectiveRecordNamePolicy returns the EffectiveRecordNamePolicy field value if set, zero value otherwise.
func (o *ZoneAuth) GetEffectiveRecordNamePolicy() string {
	if o == nil || IsNil(o.EffectiveRecordNamePolicy) {
		var ret string
		return ret
	}
	return *o.EffectiveRecordNamePolicy
}

// GetEffectiveRecordNamePolicyOk returns a tuple with the EffectiveRecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetEffectiveRecordNamePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveRecordNamePolicy) {
		return nil, false
	}
	return o.EffectiveRecordNamePolicy, true
}

// HasEffectiveRecordNamePolicy returns a boolean if a field has been set.
func (o *ZoneAuth) HasEffectiveRecordNamePolicy() bool {
	if o != nil && !IsNil(o.EffectiveRecordNamePolicy) {
		return true
	}

	return false
}

// SetEffectiveRecordNamePolicy gets a reference to the given string and assigns it to the EffectiveRecordNamePolicy field.
func (o *ZoneAuth) SetEffectiveRecordNamePolicy(v string) {
	o.EffectiveRecordNamePolicy = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *ZoneAuth) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *ZoneAuth) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *ZoneAuth) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *ZoneAuth) GetExternalPrimaries() []ZoneAuthExternalPrimaries {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ZoneAuthExternalPrimaries
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetExternalPrimariesOk() ([]ZoneAuthExternalPrimaries, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *ZoneAuth) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ZoneAuthExternalPrimaries and assigns it to the ExternalPrimaries field.
func (o *ZoneAuth) SetExternalPrimaries(v []ZoneAuthExternalPrimaries) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *ZoneAuth) GetExternalSecondaries() []ZoneAuthExternalSecondaries {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ZoneAuthExternalSecondaries
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetExternalSecondariesOk() ([]ZoneAuthExternalSecondaries, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *ZoneAuth) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ZoneAuthExternalSecondaries and assigns it to the ExternalSecondaries field.
func (o *ZoneAuth) SetExternalSecondaries(v []ZoneAuthExternalSecondaries) {
	o.ExternalSecondaries = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ZoneAuth) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ZoneAuth) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ZoneAuth) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetGridPrimary returns the GridPrimary field value if set, zero value otherwise.
func (o *ZoneAuth) GetGridPrimary() []ZoneAuthGridPrimary {
	if o == nil || IsNil(o.GridPrimary) {
		var ret []ZoneAuthGridPrimary
		return ret
	}
	return o.GridPrimary
}

// GetGridPrimaryOk returns a tuple with the GridPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetGridPrimaryOk() ([]ZoneAuthGridPrimary, bool) {
	if o == nil || IsNil(o.GridPrimary) {
		return nil, false
	}
	return o.GridPrimary, true
}

// HasGridPrimary returns a boolean if a field has been set.
func (o *ZoneAuth) HasGridPrimary() bool {
	if o != nil && !IsNil(o.GridPrimary) {
		return true
	}

	return false
}

// SetGridPrimary gets a reference to the given []ZoneAuthGridPrimary and assigns it to the GridPrimary field.
func (o *ZoneAuth) SetGridPrimary(v []ZoneAuthGridPrimary) {
	o.GridPrimary = v
}

// GetGridPrimarySharedWithMsParentDelegation returns the GridPrimarySharedWithMsParentDelegation field value if set, zero value otherwise.
func (o *ZoneAuth) GetGridPrimarySharedWithMsParentDelegation() bool {
	if o == nil || IsNil(o.GridPrimarySharedWithMsParentDelegation) {
		var ret bool
		return ret
	}
	return *o.GridPrimarySharedWithMsParentDelegation
}

// GetGridPrimarySharedWithMsParentDelegationOk returns a tuple with the GridPrimarySharedWithMsParentDelegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetGridPrimarySharedWithMsParentDelegationOk() (*bool, bool) {
	if o == nil || IsNil(o.GridPrimarySharedWithMsParentDelegation) {
		return nil, false
	}
	return o.GridPrimarySharedWithMsParentDelegation, true
}

// HasGridPrimarySharedWithMsParentDelegation returns a boolean if a field has been set.
func (o *ZoneAuth) HasGridPrimarySharedWithMsParentDelegation() bool {
	if o != nil && !IsNil(o.GridPrimarySharedWithMsParentDelegation) {
		return true
	}

	return false
}

// SetGridPrimarySharedWithMsParentDelegation gets a reference to the given bool and assigns it to the GridPrimarySharedWithMsParentDelegation field.
func (o *ZoneAuth) SetGridPrimarySharedWithMsParentDelegation(v bool) {
	o.GridPrimarySharedWithMsParentDelegation = &v
}

// GetGridSecondaries returns the GridSecondaries field value if set, zero value otherwise.
func (o *ZoneAuth) GetGridSecondaries() []ZoneAuthGridSecondaries {
	if o == nil || IsNil(o.GridSecondaries) {
		var ret []ZoneAuthGridSecondaries
		return ret
	}
	return o.GridSecondaries
}

// GetGridSecondariesOk returns a tuple with the GridSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetGridSecondariesOk() ([]ZoneAuthGridSecondaries, bool) {
	if o == nil || IsNil(o.GridSecondaries) {
		return nil, false
	}
	return o.GridSecondaries, true
}

// HasGridSecondaries returns a boolean if a field has been set.
func (o *ZoneAuth) HasGridSecondaries() bool {
	if o != nil && !IsNil(o.GridSecondaries) {
		return true
	}

	return false
}

// SetGridSecondaries gets a reference to the given []ZoneAuthGridSecondaries and assigns it to the GridSecondaries field.
func (o *ZoneAuth) SetGridSecondaries(v []ZoneAuthGridSecondaries) {
	o.GridSecondaries = v
}

// GetImportFrom returns the ImportFrom field value if set, zero value otherwise.
func (o *ZoneAuth) GetImportFrom() string {
	if o == nil || IsNil(o.ImportFrom) {
		var ret string
		return ret
	}
	return *o.ImportFrom
}

// GetImportFromOk returns a tuple with the ImportFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetImportFromOk() (*string, bool) {
	if o == nil || IsNil(o.ImportFrom) {
		return nil, false
	}
	return o.ImportFrom, true
}

// HasImportFrom returns a boolean if a field has been set.
func (o *ZoneAuth) HasImportFrom() bool {
	if o != nil && !IsNil(o.ImportFrom) {
		return true
	}

	return false
}

// SetImportFrom gets a reference to the given string and assigns it to the ImportFrom field.
func (o *ZoneAuth) SetImportFrom(v string) {
	o.ImportFrom = &v
}

// GetIsDnssecEnabled returns the IsDnssecEnabled field value if set, zero value otherwise.
func (o *ZoneAuth) GetIsDnssecEnabled() bool {
	if o == nil || IsNil(o.IsDnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.IsDnssecEnabled
}

// GetIsDnssecEnabledOk returns a tuple with the IsDnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetIsDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDnssecEnabled) {
		return nil, false
	}
	return o.IsDnssecEnabled, true
}

// HasIsDnssecEnabled returns a boolean if a field has been set.
func (o *ZoneAuth) HasIsDnssecEnabled() bool {
	if o != nil && !IsNil(o.IsDnssecEnabled) {
		return true
	}

	return false
}

// SetIsDnssecEnabled gets a reference to the given bool and assigns it to the IsDnssecEnabled field.
func (o *ZoneAuth) SetIsDnssecEnabled(v bool) {
	o.IsDnssecEnabled = &v
}

// GetIsDnssecSigned returns the IsDnssecSigned field value if set, zero value otherwise.
func (o *ZoneAuth) GetIsDnssecSigned() bool {
	if o == nil || IsNil(o.IsDnssecSigned) {
		var ret bool
		return ret
	}
	return *o.IsDnssecSigned
}

// GetIsDnssecSignedOk returns a tuple with the IsDnssecSigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetIsDnssecSignedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDnssecSigned) {
		return nil, false
	}
	return o.IsDnssecSigned, true
}

// HasIsDnssecSigned returns a boolean if a field has been set.
func (o *ZoneAuth) HasIsDnssecSigned() bool {
	if o != nil && !IsNil(o.IsDnssecSigned) {
		return true
	}

	return false
}

// SetIsDnssecSigned gets a reference to the given bool and assigns it to the IsDnssecSigned field.
func (o *ZoneAuth) SetIsDnssecSigned(v bool) {
	o.IsDnssecSigned = &v
}

// GetIsMultimaster returns the IsMultimaster field value if set, zero value otherwise.
func (o *ZoneAuth) GetIsMultimaster() bool {
	if o == nil || IsNil(o.IsMultimaster) {
		var ret bool
		return ret
	}
	return *o.IsMultimaster
}

// GetIsMultimasterOk returns a tuple with the IsMultimaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetIsMultimasterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMultimaster) {
		return nil, false
	}
	return o.IsMultimaster, true
}

// HasIsMultimaster returns a boolean if a field has been set.
func (o *ZoneAuth) HasIsMultimaster() bool {
	if o != nil && !IsNil(o.IsMultimaster) {
		return true
	}

	return false
}

// SetIsMultimaster gets a reference to the given bool and assigns it to the IsMultimaster field.
func (o *ZoneAuth) SetIsMultimaster(v bool) {
	o.IsMultimaster = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *ZoneAuth) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *ZoneAuth) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *ZoneAuth) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetLastQueriedAcl returns the LastQueriedAcl field value if set, zero value otherwise.
func (o *ZoneAuth) GetLastQueriedAcl() []ZoneAuthLastQueriedAcl {
	if o == nil || IsNil(o.LastQueriedAcl) {
		var ret []ZoneAuthLastQueriedAcl
		return ret
	}
	return o.LastQueriedAcl
}

// GetLastQueriedAclOk returns a tuple with the LastQueriedAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetLastQueriedAclOk() ([]ZoneAuthLastQueriedAcl, bool) {
	if o == nil || IsNil(o.LastQueriedAcl) {
		return nil, false
	}
	return o.LastQueriedAcl, true
}

// HasLastQueriedAcl returns a boolean if a field has been set.
func (o *ZoneAuth) HasLastQueriedAcl() bool {
	if o != nil && !IsNil(o.LastQueriedAcl) {
		return true
	}

	return false
}

// SetLastQueriedAcl gets a reference to the given []ZoneAuthLastQueriedAcl and assigns it to the LastQueriedAcl field.
func (o *ZoneAuth) SetLastQueriedAcl(v []ZoneAuthLastQueriedAcl) {
	o.LastQueriedAcl = v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ZoneAuth) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ZoneAuth) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ZoneAuth) SetLocked(v bool) {
	o.Locked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *ZoneAuth) GetLockedBy() string {
	if o == nil || IsNil(o.LockedBy) {
		var ret string
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetLockedByOk() (*string, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *ZoneAuth) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given string and assigns it to the LockedBy field.
func (o *ZoneAuth) SetLockedBy(v string) {
	o.LockedBy = &v
}

// GetMaskPrefix returns the MaskPrefix field value if set, zero value otherwise.
func (o *ZoneAuth) GetMaskPrefix() string {
	if o == nil || IsNil(o.MaskPrefix) {
		var ret string
		return ret
	}
	return *o.MaskPrefix
}

// GetMaskPrefixOk returns a tuple with the MaskPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMaskPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MaskPrefix) {
		return nil, false
	}
	return o.MaskPrefix, true
}

// HasMaskPrefix returns a boolean if a field has been set.
func (o *ZoneAuth) HasMaskPrefix() bool {
	if o != nil && !IsNil(o.MaskPrefix) {
		return true
	}

	return false
}

// SetMaskPrefix gets a reference to the given string and assigns it to the MaskPrefix field.
func (o *ZoneAuth) SetMaskPrefix(v string) {
	o.MaskPrefix = &v
}

// GetMemberSoaMnames returns the MemberSoaMnames field value if set, zero value otherwise.
func (o *ZoneAuth) GetMemberSoaMnames() []ZoneAuthMemberSoaMnames {
	if o == nil || IsNil(o.MemberSoaMnames) {
		var ret []ZoneAuthMemberSoaMnames
		return ret
	}
	return o.MemberSoaMnames
}

// GetMemberSoaMnamesOk returns a tuple with the MemberSoaMnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMemberSoaMnamesOk() ([]ZoneAuthMemberSoaMnames, bool) {
	if o == nil || IsNil(o.MemberSoaMnames) {
		return nil, false
	}
	return o.MemberSoaMnames, true
}

// HasMemberSoaMnames returns a boolean if a field has been set.
func (o *ZoneAuth) HasMemberSoaMnames() bool {
	if o != nil && !IsNil(o.MemberSoaMnames) {
		return true
	}

	return false
}

// SetMemberSoaMnames gets a reference to the given []ZoneAuthMemberSoaMnames and assigns it to the MemberSoaMnames field.
func (o *ZoneAuth) SetMemberSoaMnames(v []ZoneAuthMemberSoaMnames) {
	o.MemberSoaMnames = v
}

// GetMemberSoaSerials returns the MemberSoaSerials field value if set, zero value otherwise.
func (o *ZoneAuth) GetMemberSoaSerials() []ZoneAuthMemberSoaSerials {
	if o == nil || IsNil(o.MemberSoaSerials) {
		var ret []ZoneAuthMemberSoaSerials
		return ret
	}
	return o.MemberSoaSerials
}

// GetMemberSoaSerialsOk returns a tuple with the MemberSoaSerials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMemberSoaSerialsOk() ([]ZoneAuthMemberSoaSerials, bool) {
	if o == nil || IsNil(o.MemberSoaSerials) {
		return nil, false
	}
	return o.MemberSoaSerials, true
}

// HasMemberSoaSerials returns a boolean if a field has been set.
func (o *ZoneAuth) HasMemberSoaSerials() bool {
	if o != nil && !IsNil(o.MemberSoaSerials) {
		return true
	}

	return false
}

// SetMemberSoaSerials gets a reference to the given []ZoneAuthMemberSoaSerials and assigns it to the MemberSoaSerials field.
func (o *ZoneAuth) SetMemberSoaSerials(v []ZoneAuthMemberSoaSerials) {
	o.MemberSoaSerials = v
}

// GetMsAdIntegrated returns the MsAdIntegrated field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsAdIntegrated() bool {
	if o == nil || IsNil(o.MsAdIntegrated) {
		var ret bool
		return ret
	}
	return *o.MsAdIntegrated
}

// GetMsAdIntegratedOk returns a tuple with the MsAdIntegrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsAdIntegratedOk() (*bool, bool) {
	if o == nil || IsNil(o.MsAdIntegrated) {
		return nil, false
	}
	return o.MsAdIntegrated, true
}

// HasMsAdIntegrated returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsAdIntegrated() bool {
	if o != nil && !IsNil(o.MsAdIntegrated) {
		return true
	}

	return false
}

// SetMsAdIntegrated gets a reference to the given bool and assigns it to the MsAdIntegrated field.
func (o *ZoneAuth) SetMsAdIntegrated(v bool) {
	o.MsAdIntegrated = &v
}

// GetMsAllowTransfer returns the MsAllowTransfer field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsAllowTransfer() []ZoneAuthMsAllowTransfer {
	if o == nil || IsNil(o.MsAllowTransfer) {
		var ret []ZoneAuthMsAllowTransfer
		return ret
	}
	return o.MsAllowTransfer
}

// GetMsAllowTransferOk returns a tuple with the MsAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsAllowTransferOk() ([]ZoneAuthMsAllowTransfer, bool) {
	if o == nil || IsNil(o.MsAllowTransfer) {
		return nil, false
	}
	return o.MsAllowTransfer, true
}

// HasMsAllowTransfer returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsAllowTransfer() bool {
	if o != nil && !IsNil(o.MsAllowTransfer) {
		return true
	}

	return false
}

// SetMsAllowTransfer gets a reference to the given []ZoneAuthMsAllowTransfer and assigns it to the MsAllowTransfer field.
func (o *ZoneAuth) SetMsAllowTransfer(v []ZoneAuthMsAllowTransfer) {
	o.MsAllowTransfer = v
}

// GetMsAllowTransferMode returns the MsAllowTransferMode field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsAllowTransferMode() string {
	if o == nil || IsNil(o.MsAllowTransferMode) {
		var ret string
		return ret
	}
	return *o.MsAllowTransferMode
}

// GetMsAllowTransferModeOk returns a tuple with the MsAllowTransferMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsAllowTransferModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsAllowTransferMode) {
		return nil, false
	}
	return o.MsAllowTransferMode, true
}

// HasMsAllowTransferMode returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsAllowTransferMode() bool {
	if o != nil && !IsNil(o.MsAllowTransferMode) {
		return true
	}

	return false
}

// SetMsAllowTransferMode gets a reference to the given string and assigns it to the MsAllowTransferMode field.
func (o *ZoneAuth) SetMsAllowTransferMode(v string) {
	o.MsAllowTransferMode = &v
}

// GetMsDcNsRecordCreation returns the MsDcNsRecordCreation field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsDcNsRecordCreation() []ZoneAuthMsDcNsRecordCreation {
	if o == nil || IsNil(o.MsDcNsRecordCreation) {
		var ret []ZoneAuthMsDcNsRecordCreation
		return ret
	}
	return o.MsDcNsRecordCreation
}

// GetMsDcNsRecordCreationOk returns a tuple with the MsDcNsRecordCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsDcNsRecordCreationOk() ([]ZoneAuthMsDcNsRecordCreation, bool) {
	if o == nil || IsNil(o.MsDcNsRecordCreation) {
		return nil, false
	}
	return o.MsDcNsRecordCreation, true
}

// HasMsDcNsRecordCreation returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsDcNsRecordCreation() bool {
	if o != nil && !IsNil(o.MsDcNsRecordCreation) {
		return true
	}

	return false
}

// SetMsDcNsRecordCreation gets a reference to the given []ZoneAuthMsDcNsRecordCreation and assigns it to the MsDcNsRecordCreation field.
func (o *ZoneAuth) SetMsDcNsRecordCreation(v []ZoneAuthMsDcNsRecordCreation) {
	o.MsDcNsRecordCreation = v
}

// GetMsDdnsMode returns the MsDdnsMode field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsDdnsMode() string {
	if o == nil || IsNil(o.MsDdnsMode) {
		var ret string
		return ret
	}
	return *o.MsDdnsMode
}

// GetMsDdnsModeOk returns a tuple with the MsDdnsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsDdnsModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsDdnsMode) {
		return nil, false
	}
	return o.MsDdnsMode, true
}

// HasMsDdnsMode returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsDdnsMode() bool {
	if o != nil && !IsNil(o.MsDdnsMode) {
		return true
	}

	return false
}

// SetMsDdnsMode gets a reference to the given string and assigns it to the MsDdnsMode field.
func (o *ZoneAuth) SetMsDdnsMode(v string) {
	o.MsDdnsMode = &v
}

// GetMsManaged returns the MsManaged field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsManaged() string {
	if o == nil || IsNil(o.MsManaged) {
		var ret string
		return ret
	}
	return *o.MsManaged
}

// GetMsManagedOk returns a tuple with the MsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsManagedOk() (*string, bool) {
	if o == nil || IsNil(o.MsManaged) {
		return nil, false
	}
	return o.MsManaged, true
}

// HasMsManaged returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsManaged() bool {
	if o != nil && !IsNil(o.MsManaged) {
		return true
	}

	return false
}

// SetMsManaged gets a reference to the given string and assigns it to the MsManaged field.
func (o *ZoneAuth) SetMsManaged(v string) {
	o.MsManaged = &v
}

// GetMsPrimaries returns the MsPrimaries field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsPrimaries() []ZoneAuthMsPrimaries {
	if o == nil || IsNil(o.MsPrimaries) {
		var ret []ZoneAuthMsPrimaries
		return ret
	}
	return o.MsPrimaries
}

// GetMsPrimariesOk returns a tuple with the MsPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsPrimariesOk() ([]ZoneAuthMsPrimaries, bool) {
	if o == nil || IsNil(o.MsPrimaries) {
		return nil, false
	}
	return o.MsPrimaries, true
}

// HasMsPrimaries returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsPrimaries() bool {
	if o != nil && !IsNil(o.MsPrimaries) {
		return true
	}

	return false
}

// SetMsPrimaries gets a reference to the given []ZoneAuthMsPrimaries and assigns it to the MsPrimaries field.
func (o *ZoneAuth) SetMsPrimaries(v []ZoneAuthMsPrimaries) {
	o.MsPrimaries = v
}

// GetMsReadOnly returns the MsReadOnly field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsReadOnly() bool {
	if o == nil || IsNil(o.MsReadOnly) {
		var ret bool
		return ret
	}
	return *o.MsReadOnly
}

// GetMsReadOnlyOk returns a tuple with the MsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MsReadOnly) {
		return nil, false
	}
	return o.MsReadOnly, true
}

// HasMsReadOnly returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsReadOnly() bool {
	if o != nil && !IsNil(o.MsReadOnly) {
		return true
	}

	return false
}

// SetMsReadOnly gets a reference to the given bool and assigns it to the MsReadOnly field.
func (o *ZoneAuth) SetMsReadOnly(v bool) {
	o.MsReadOnly = &v
}

// GetMsSecondaries returns the MsSecondaries field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsSecondaries() []ZoneAuthMsSecondaries {
	if o == nil || IsNil(o.MsSecondaries) {
		var ret []ZoneAuthMsSecondaries
		return ret
	}
	return o.MsSecondaries
}

// GetMsSecondariesOk returns a tuple with the MsSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsSecondariesOk() ([]ZoneAuthMsSecondaries, bool) {
	if o == nil || IsNil(o.MsSecondaries) {
		return nil, false
	}
	return o.MsSecondaries, true
}

// HasMsSecondaries returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsSecondaries() bool {
	if o != nil && !IsNil(o.MsSecondaries) {
		return true
	}

	return false
}

// SetMsSecondaries gets a reference to the given []ZoneAuthMsSecondaries and assigns it to the MsSecondaries field.
func (o *ZoneAuth) SetMsSecondaries(v []ZoneAuthMsSecondaries) {
	o.MsSecondaries = v
}

// GetMsSyncDisabled returns the MsSyncDisabled field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsSyncDisabled() bool {
	if o == nil || IsNil(o.MsSyncDisabled) {
		var ret bool
		return ret
	}
	return *o.MsSyncDisabled
}

// GetMsSyncDisabledOk returns a tuple with the MsSyncDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsSyncDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MsSyncDisabled) {
		return nil, false
	}
	return o.MsSyncDisabled, true
}

// HasMsSyncDisabled returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsSyncDisabled() bool {
	if o != nil && !IsNil(o.MsSyncDisabled) {
		return true
	}

	return false
}

// SetMsSyncDisabled gets a reference to the given bool and assigns it to the MsSyncDisabled field.
func (o *ZoneAuth) SetMsSyncDisabled(v bool) {
	o.MsSyncDisabled = &v
}

// GetMsSyncMasterName returns the MsSyncMasterName field value if set, zero value otherwise.
func (o *ZoneAuth) GetMsSyncMasterName() string {
	if o == nil || IsNil(o.MsSyncMasterName) {
		var ret string
		return ret
	}
	return *o.MsSyncMasterName
}

// GetMsSyncMasterNameOk returns a tuple with the MsSyncMasterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetMsSyncMasterNameOk() (*string, bool) {
	if o == nil || IsNil(o.MsSyncMasterName) {
		return nil, false
	}
	return o.MsSyncMasterName, true
}

// HasMsSyncMasterName returns a boolean if a field has been set.
func (o *ZoneAuth) HasMsSyncMasterName() bool {
	if o != nil && !IsNil(o.MsSyncMasterName) {
		return true
	}

	return false
}

// SetMsSyncMasterName gets a reference to the given string and assigns it to the MsSyncMasterName field.
func (o *ZoneAuth) SetMsSyncMasterName(v string) {
	o.MsSyncMasterName = &v
}

// GetNetworkAssociations returns the NetworkAssociations field value if set, zero value otherwise.
func (o *ZoneAuth) GetNetworkAssociations() []string {
	if o == nil || IsNil(o.NetworkAssociations) {
		var ret []string
		return ret
	}
	return o.NetworkAssociations
}

// GetNetworkAssociationsOk returns a tuple with the NetworkAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetNetworkAssociationsOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkAssociations) {
		return nil, false
	}
	return o.NetworkAssociations, true
}

// HasNetworkAssociations returns a boolean if a field has been set.
func (o *ZoneAuth) HasNetworkAssociations() bool {
	if o != nil && !IsNil(o.NetworkAssociations) {
		return true
	}

	return false
}

// SetNetworkAssociations gets a reference to the given []string and assigns it to the NetworkAssociations field.
func (o *ZoneAuth) SetNetworkAssociations(v []string) {
	o.NetworkAssociations = v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *ZoneAuth) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *ZoneAuth) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *ZoneAuth) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNotifyDelay returns the NotifyDelay field value if set, zero value otherwise.
func (o *ZoneAuth) GetNotifyDelay() int64 {
	if o == nil || IsNil(o.NotifyDelay) {
		var ret int64
		return ret
	}
	return *o.NotifyDelay
}

// GetNotifyDelayOk returns a tuple with the NotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetNotifyDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifyDelay) {
		return nil, false
	}
	return o.NotifyDelay, true
}

// HasNotifyDelay returns a boolean if a field has been set.
func (o *ZoneAuth) HasNotifyDelay() bool {
	if o != nil && !IsNil(o.NotifyDelay) {
		return true
	}

	return false
}

// SetNotifyDelay gets a reference to the given int64 and assigns it to the NotifyDelay field.
func (o *ZoneAuth) SetNotifyDelay(v int64) {
	o.NotifyDelay = &v
}

// GetNsGroup returns the NsGroup field value if set, zero value otherwise.
func (o *ZoneAuth) GetNsGroup() string {
	if o == nil || IsNil(o.NsGroup) {
		var ret string
		return ret
	}
	return *o.NsGroup
}

// GetNsGroupOk returns a tuple with the NsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetNsGroupOk() (*string, bool) {
	if o == nil || IsNil(o.NsGroup) {
		return nil, false
	}
	return o.NsGroup, true
}

// HasNsGroup returns a boolean if a field has been set.
func (o *ZoneAuth) HasNsGroup() bool {
	if o != nil && !IsNil(o.NsGroup) {
		return true
	}

	return false
}

// SetNsGroup gets a reference to the given string and assigns it to the NsGroup field.
func (o *ZoneAuth) SetNsGroup(v string) {
	o.NsGroup = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ZoneAuth) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ZoneAuth) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *ZoneAuth) SetParent(v string) {
	o.Parent = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ZoneAuth) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ZoneAuth) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ZoneAuth) SetPrefix(v string) {
	o.Prefix = &v
}

// GetPrimaryType returns the PrimaryType field value if set, zero value otherwise.
func (o *ZoneAuth) GetPrimaryType() string {
	if o == nil || IsNil(o.PrimaryType) {
		var ret string
		return ret
	}
	return *o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetPrimaryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryType) {
		return nil, false
	}
	return o.PrimaryType, true
}

// HasPrimaryType returns a boolean if a field has been set.
func (o *ZoneAuth) HasPrimaryType() bool {
	if o != nil && !IsNil(o.PrimaryType) {
		return true
	}

	return false
}

// SetPrimaryType gets a reference to the given string and assigns it to the PrimaryType field.
func (o *ZoneAuth) SetPrimaryType(v string) {
	o.PrimaryType = &v
}

// GetRecordNamePolicy returns the RecordNamePolicy field value if set, zero value otherwise.
func (o *ZoneAuth) GetRecordNamePolicy() string {
	if o == nil || IsNil(o.RecordNamePolicy) {
		var ret string
		return ret
	}
	return *o.RecordNamePolicy
}

// GetRecordNamePolicyOk returns a tuple with the RecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRecordNamePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RecordNamePolicy) {
		return nil, false
	}
	return o.RecordNamePolicy, true
}

// HasRecordNamePolicy returns a boolean if a field has been set.
func (o *ZoneAuth) HasRecordNamePolicy() bool {
	if o != nil && !IsNil(o.RecordNamePolicy) {
		return true
	}

	return false
}

// SetRecordNamePolicy gets a reference to the given string and assigns it to the RecordNamePolicy field.
func (o *ZoneAuth) SetRecordNamePolicy(v string) {
	o.RecordNamePolicy = &v
}

// GetRecordsMonitored returns the RecordsMonitored field value if set, zero value otherwise.
func (o *ZoneAuth) GetRecordsMonitored() bool {
	if o == nil || IsNil(o.RecordsMonitored) {
		var ret bool
		return ret
	}
	return *o.RecordsMonitored
}

// GetRecordsMonitoredOk returns a tuple with the RecordsMonitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRecordsMonitoredOk() (*bool, bool) {
	if o == nil || IsNil(o.RecordsMonitored) {
		return nil, false
	}
	return o.RecordsMonitored, true
}

// HasRecordsMonitored returns a boolean if a field has been set.
func (o *ZoneAuth) HasRecordsMonitored() bool {
	if o != nil && !IsNil(o.RecordsMonitored) {
		return true
	}

	return false
}

// SetRecordsMonitored gets a reference to the given bool and assigns it to the RecordsMonitored field.
func (o *ZoneAuth) SetRecordsMonitored(v bool) {
	o.RecordsMonitored = &v
}

// GetRemoveSubzones returns the RemoveSubzones field value if set, zero value otherwise.
func (o *ZoneAuth) GetRemoveSubzones() bool {
	if o == nil || IsNil(o.RemoveSubzones) {
		var ret bool
		return ret
	}
	return *o.RemoveSubzones
}

// GetRemoveSubzonesOk returns a tuple with the RemoveSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRemoveSubzonesOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveSubzones) {
		return nil, false
	}
	return o.RemoveSubzones, true
}

// HasRemoveSubzones returns a boolean if a field has been set.
func (o *ZoneAuth) HasRemoveSubzones() bool {
	if o != nil && !IsNil(o.RemoveSubzones) {
		return true
	}

	return false
}

// SetRemoveSubzones gets a reference to the given bool and assigns it to the RemoveSubzones field.
func (o *ZoneAuth) SetRemoveSubzones(v bool) {
	o.RemoveSubzones = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *ZoneAuth) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *ZoneAuth) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *ZoneAuth) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetRrNotQueriedEnabledTime returns the RrNotQueriedEnabledTime field value if set, zero value otherwise.
func (o *ZoneAuth) GetRrNotQueriedEnabledTime() int64 {
	if o == nil || IsNil(o.RrNotQueriedEnabledTime) {
		var ret int64
		return ret
	}
	return *o.RrNotQueriedEnabledTime
}

// GetRrNotQueriedEnabledTimeOk returns a tuple with the RrNotQueriedEnabledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetRrNotQueriedEnabledTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RrNotQueriedEnabledTime) {
		return nil, false
	}
	return o.RrNotQueriedEnabledTime, true
}

// HasRrNotQueriedEnabledTime returns a boolean if a field has been set.
func (o *ZoneAuth) HasRrNotQueriedEnabledTime() bool {
	if o != nil && !IsNil(o.RrNotQueriedEnabledTime) {
		return true
	}

	return false
}

// SetRrNotQueriedEnabledTime gets a reference to the given int64 and assigns it to the RrNotQueriedEnabledTime field.
func (o *ZoneAuth) SetRrNotQueriedEnabledTime(v int64) {
	o.RrNotQueriedEnabledTime = &v
}

// GetScavengingSettings returns the ScavengingSettings field value if set, zero value otherwise.
func (o *ZoneAuth) GetScavengingSettings() ZoneAuthScavengingSettings {
	if o == nil || IsNil(o.ScavengingSettings) {
		var ret ZoneAuthScavengingSettings
		return ret
	}
	return *o.ScavengingSettings
}

// GetScavengingSettingsOk returns a tuple with the ScavengingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetScavengingSettingsOk() (*ZoneAuthScavengingSettings, bool) {
	if o == nil || IsNil(o.ScavengingSettings) {
		return nil, false
	}
	return o.ScavengingSettings, true
}

// HasScavengingSettings returns a boolean if a field has been set.
func (o *ZoneAuth) HasScavengingSettings() bool {
	if o != nil && !IsNil(o.ScavengingSettings) {
		return true
	}

	return false
}

// SetScavengingSettings gets a reference to the given ZoneAuthScavengingSettings and assigns it to the ScavengingSettings field.
func (o *ZoneAuth) SetScavengingSettings(v ZoneAuthScavengingSettings) {
	o.ScavengingSettings = &v
}

// GetSetSoaSerialNumber returns the SetSoaSerialNumber field value if set, zero value otherwise.
func (o *ZoneAuth) GetSetSoaSerialNumber() bool {
	if o == nil || IsNil(o.SetSoaSerialNumber) {
		var ret bool
		return ret
	}
	return *o.SetSoaSerialNumber
}

// GetSetSoaSerialNumberOk returns a tuple with the SetSoaSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSetSoaSerialNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSoaSerialNumber) {
		return nil, false
	}
	return o.SetSoaSerialNumber, true
}

// HasSetSoaSerialNumber returns a boolean if a field has been set.
func (o *ZoneAuth) HasSetSoaSerialNumber() bool {
	if o != nil && !IsNil(o.SetSoaSerialNumber) {
		return true
	}

	return false
}

// SetSetSoaSerialNumber gets a reference to the given bool and assigns it to the SetSoaSerialNumber field.
func (o *ZoneAuth) SetSetSoaSerialNumber(v bool) {
	o.SetSoaSerialNumber = &v
}

// GetSoaDefaultTtl returns the SoaDefaultTtl field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaDefaultTtl() int64 {
	if o == nil || IsNil(o.SoaDefaultTtl) {
		var ret int64
		return ret
	}
	return *o.SoaDefaultTtl
}

// GetSoaDefaultTtlOk returns a tuple with the SoaDefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaDefaultTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaDefaultTtl) {
		return nil, false
	}
	return o.SoaDefaultTtl, true
}

// HasSoaDefaultTtl returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaDefaultTtl() bool {
	if o != nil && !IsNil(o.SoaDefaultTtl) {
		return true
	}

	return false
}

// SetSoaDefaultTtl gets a reference to the given int64 and assigns it to the SoaDefaultTtl field.
func (o *ZoneAuth) SetSoaDefaultTtl(v int64) {
	o.SoaDefaultTtl = &v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *ZoneAuth) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetSoaExpire returns the SoaExpire field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaExpire() int64 {
	if o == nil || IsNil(o.SoaExpire) {
		var ret int64
		return ret
	}
	return *o.SoaExpire
}

// GetSoaExpireOk returns a tuple with the SoaExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaExpireOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaExpire) {
		return nil, false
	}
	return o.SoaExpire, true
}

// HasSoaExpire returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaExpire() bool {
	if o != nil && !IsNil(o.SoaExpire) {
		return true
	}

	return false
}

// SetSoaExpire gets a reference to the given int64 and assigns it to the SoaExpire field.
func (o *ZoneAuth) SetSoaExpire(v int64) {
	o.SoaExpire = &v
}

// GetSoaNegativeTtl returns the SoaNegativeTtl field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaNegativeTtl() int64 {
	if o == nil || IsNil(o.SoaNegativeTtl) {
		var ret int64
		return ret
	}
	return *o.SoaNegativeTtl
}

// GetSoaNegativeTtlOk returns a tuple with the SoaNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaNegativeTtl) {
		return nil, false
	}
	return o.SoaNegativeTtl, true
}

// HasSoaNegativeTtl returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaNegativeTtl() bool {
	if o != nil && !IsNil(o.SoaNegativeTtl) {
		return true
	}

	return false
}

// SetSoaNegativeTtl gets a reference to the given int64 and assigns it to the SoaNegativeTtl field.
func (o *ZoneAuth) SetSoaNegativeTtl(v int64) {
	o.SoaNegativeTtl = &v
}

// GetSoaRefresh returns the SoaRefresh field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaRefresh() int64 {
	if o == nil || IsNil(o.SoaRefresh) {
		var ret int64
		return ret
	}
	return *o.SoaRefresh
}

// GetSoaRefreshOk returns a tuple with the SoaRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaRefreshOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaRefresh) {
		return nil, false
	}
	return o.SoaRefresh, true
}

// HasSoaRefresh returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaRefresh() bool {
	if o != nil && !IsNil(o.SoaRefresh) {
		return true
	}

	return false
}

// SetSoaRefresh gets a reference to the given int64 and assigns it to the SoaRefresh field.
func (o *ZoneAuth) SetSoaRefresh(v int64) {
	o.SoaRefresh = &v
}

// GetSoaRetry returns the SoaRetry field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaRetry() int64 {
	if o == nil || IsNil(o.SoaRetry) {
		var ret int64
		return ret
	}
	return *o.SoaRetry
}

// GetSoaRetryOk returns a tuple with the SoaRetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaRetryOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaRetry) {
		return nil, false
	}
	return o.SoaRetry, true
}

// HasSoaRetry returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaRetry() bool {
	if o != nil && !IsNil(o.SoaRetry) {
		return true
	}

	return false
}

// SetSoaRetry gets a reference to the given int64 and assigns it to the SoaRetry field.
func (o *ZoneAuth) SetSoaRetry(v int64) {
	o.SoaRetry = &v
}

// GetSoaSerial returns the SoaSerial field value if set, zero value otherwise.
func (o *ZoneAuth) GetSoaSerial() int64 {
	if o == nil || IsNil(o.SoaSerial) {
		var ret int64
		return ret
	}
	return *o.SoaSerial
}

// GetSoaSerialOk returns a tuple with the SoaSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSoaSerialOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaSerial) {
		return nil, false
	}
	return o.SoaSerial, true
}

// HasSoaSerial returns a boolean if a field has been set.
func (o *ZoneAuth) HasSoaSerial() bool {
	if o != nil && !IsNil(o.SoaSerial) {
		return true
	}

	return false
}

// SetSoaSerial gets a reference to the given int64 and assigns it to the SoaSerial field.
func (o *ZoneAuth) SetSoaSerial(v int64) {
	o.SoaSerial = &v
}

// GetSrgs returns the Srgs field value if set, zero value otherwise.
func (o *ZoneAuth) GetSrgs() []string {
	if o == nil || IsNil(o.Srgs) {
		var ret []string
		return ret
	}
	return o.Srgs
}

// GetSrgsOk returns a tuple with the Srgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetSrgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Srgs) {
		return nil, false
	}
	return o.Srgs, true
}

// HasSrgs returns a boolean if a field has been set.
func (o *ZoneAuth) HasSrgs() bool {
	if o != nil && !IsNil(o.Srgs) {
		return true
	}

	return false
}

// SetSrgs gets a reference to the given []string and assigns it to the Srgs field.
func (o *ZoneAuth) SetSrgs(v []string) {
	o.Srgs = v
}

// GetUpdateForwarding returns the UpdateForwarding field value if set, zero value otherwise.
func (o *ZoneAuth) GetUpdateForwarding() []ZoneAuthUpdateForwarding {
	if o == nil || IsNil(o.UpdateForwarding) {
		var ret []ZoneAuthUpdateForwarding
		return ret
	}
	return o.UpdateForwarding
}

// GetUpdateForwardingOk returns a tuple with the UpdateForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUpdateForwardingOk() ([]ZoneAuthUpdateForwarding, bool) {
	if o == nil || IsNil(o.UpdateForwarding) {
		return nil, false
	}
	return o.UpdateForwarding, true
}

// HasUpdateForwarding returns a boolean if a field has been set.
func (o *ZoneAuth) HasUpdateForwarding() bool {
	if o != nil && !IsNil(o.UpdateForwarding) {
		return true
	}

	return false
}

// SetUpdateForwarding gets a reference to the given []ZoneAuthUpdateForwarding and assigns it to the UpdateForwarding field.
func (o *ZoneAuth) SetUpdateForwarding(v []ZoneAuthUpdateForwarding) {
	o.UpdateForwarding = v
}

// GetUseAllowActiveDir returns the UseAllowActiveDir field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseAllowActiveDir() bool {
	if o == nil || IsNil(o.UseAllowActiveDir) {
		var ret bool
		return ret
	}
	return *o.UseAllowActiveDir
}

// GetUseAllowActiveDirOk returns a tuple with the UseAllowActiveDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseAllowActiveDirOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowActiveDir) {
		return nil, false
	}
	return o.UseAllowActiveDir, true
}

// HasUseAllowActiveDir returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseAllowActiveDir() bool {
	if o != nil && !IsNil(o.UseAllowActiveDir) {
		return true
	}

	return false
}

// SetUseAllowActiveDir gets a reference to the given bool and assigns it to the UseAllowActiveDir field.
func (o *ZoneAuth) SetUseAllowActiveDir(v bool) {
	o.UseAllowActiveDir = &v
}

// GetUseAllowQuery returns the UseAllowQuery field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseAllowQuery() bool {
	if o == nil || IsNil(o.UseAllowQuery) {
		var ret bool
		return ret
	}
	return *o.UseAllowQuery
}

// GetUseAllowQueryOk returns a tuple with the UseAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseAllowQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowQuery) {
		return nil, false
	}
	return o.UseAllowQuery, true
}

// HasUseAllowQuery returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseAllowQuery() bool {
	if o != nil && !IsNil(o.UseAllowQuery) {
		return true
	}

	return false
}

// SetUseAllowQuery gets a reference to the given bool and assigns it to the UseAllowQuery field.
func (o *ZoneAuth) SetUseAllowQuery(v bool) {
	o.UseAllowQuery = &v
}

// GetUseAllowTransfer returns the UseAllowTransfer field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseAllowTransfer() bool {
	if o == nil || IsNil(o.UseAllowTransfer) {
		var ret bool
		return ret
	}
	return *o.UseAllowTransfer
}

// GetUseAllowTransferOk returns a tuple with the UseAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseAllowTransferOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowTransfer) {
		return nil, false
	}
	return o.UseAllowTransfer, true
}

// HasUseAllowTransfer returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseAllowTransfer() bool {
	if o != nil && !IsNil(o.UseAllowTransfer) {
		return true
	}

	return false
}

// SetUseAllowTransfer gets a reference to the given bool and assigns it to the UseAllowTransfer field.
func (o *ZoneAuth) SetUseAllowTransfer(v bool) {
	o.UseAllowTransfer = &v
}

// GetUseAllowUpdate returns the UseAllowUpdate field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseAllowUpdate() bool {
	if o == nil || IsNil(o.UseAllowUpdate) {
		var ret bool
		return ret
	}
	return *o.UseAllowUpdate
}

// GetUseAllowUpdateOk returns a tuple with the UseAllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseAllowUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowUpdate) {
		return nil, false
	}
	return o.UseAllowUpdate, true
}

// HasUseAllowUpdate returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseAllowUpdate() bool {
	if o != nil && !IsNil(o.UseAllowUpdate) {
		return true
	}

	return false
}

// SetUseAllowUpdate gets a reference to the given bool and assigns it to the UseAllowUpdate field.
func (o *ZoneAuth) SetUseAllowUpdate(v bool) {
	o.UseAllowUpdate = &v
}

// GetUseAllowUpdateForwarding returns the UseAllowUpdateForwarding field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseAllowUpdateForwarding() bool {
	if o == nil || IsNil(o.UseAllowUpdateForwarding) {
		var ret bool
		return ret
	}
	return *o.UseAllowUpdateForwarding
}

// GetUseAllowUpdateForwardingOk returns a tuple with the UseAllowUpdateForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseAllowUpdateForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowUpdateForwarding) {
		return nil, false
	}
	return o.UseAllowUpdateForwarding, true
}

// HasUseAllowUpdateForwarding returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseAllowUpdateForwarding() bool {
	if o != nil && !IsNil(o.UseAllowUpdateForwarding) {
		return true
	}

	return false
}

// SetUseAllowUpdateForwarding gets a reference to the given bool and assigns it to the UseAllowUpdateForwarding field.
func (o *ZoneAuth) SetUseAllowUpdateForwarding(v bool) {
	o.UseAllowUpdateForwarding = &v
}

// GetUseCheckNamesPolicy returns the UseCheckNamesPolicy field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseCheckNamesPolicy() bool {
	if o == nil || IsNil(o.UseCheckNamesPolicy) {
		var ret bool
		return ret
	}
	return *o.UseCheckNamesPolicy
}

// GetUseCheckNamesPolicyOk returns a tuple with the UseCheckNamesPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseCheckNamesPolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCheckNamesPolicy) {
		return nil, false
	}
	return o.UseCheckNamesPolicy, true
}

// HasUseCheckNamesPolicy returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseCheckNamesPolicy() bool {
	if o != nil && !IsNil(o.UseCheckNamesPolicy) {
		return true
	}

	return false
}

// SetUseCheckNamesPolicy gets a reference to the given bool and assigns it to the UseCheckNamesPolicy field.
func (o *ZoneAuth) SetUseCheckNamesPolicy(v bool) {
	o.UseCheckNamesPolicy = &v
}

// GetUseCopyXferToNotify returns the UseCopyXferToNotify field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseCopyXferToNotify() bool {
	if o == nil || IsNil(o.UseCopyXferToNotify) {
		var ret bool
		return ret
	}
	return *o.UseCopyXferToNotify
}

// GetUseCopyXferToNotifyOk returns a tuple with the UseCopyXferToNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseCopyXferToNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCopyXferToNotify) {
		return nil, false
	}
	return o.UseCopyXferToNotify, true
}

// HasUseCopyXferToNotify returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseCopyXferToNotify() bool {
	if o != nil && !IsNil(o.UseCopyXferToNotify) {
		return true
	}

	return false
}

// SetUseCopyXferToNotify gets a reference to the given bool and assigns it to the UseCopyXferToNotify field.
func (o *ZoneAuth) SetUseCopyXferToNotify(v bool) {
	o.UseCopyXferToNotify = &v
}

// GetUseDdnsForceCreationTimestampUpdate returns the UseDdnsForceCreationTimestampUpdate field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDdnsForceCreationTimestampUpdate() bool {
	if o == nil || IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		var ret bool
		return ret
	}
	return *o.UseDdnsForceCreationTimestampUpdate
}

// GetUseDdnsForceCreationTimestampUpdateOk returns a tuple with the UseDdnsForceCreationTimestampUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDdnsForceCreationTimestampUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		return nil, false
	}
	return o.UseDdnsForceCreationTimestampUpdate, true
}

// HasUseDdnsForceCreationTimestampUpdate returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDdnsForceCreationTimestampUpdate() bool {
	if o != nil && !IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		return true
	}

	return false
}

// SetUseDdnsForceCreationTimestampUpdate gets a reference to the given bool and assigns it to the UseDdnsForceCreationTimestampUpdate field.
func (o *ZoneAuth) SetUseDdnsForceCreationTimestampUpdate(v bool) {
	o.UseDdnsForceCreationTimestampUpdate = &v
}

// GetUseDdnsPatternsRestriction returns the UseDdnsPatternsRestriction field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDdnsPatternsRestriction() bool {
	if o == nil || IsNil(o.UseDdnsPatternsRestriction) {
		var ret bool
		return ret
	}
	return *o.UseDdnsPatternsRestriction
}

// GetUseDdnsPatternsRestrictionOk returns a tuple with the UseDdnsPatternsRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDdnsPatternsRestrictionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsPatternsRestriction) {
		return nil, false
	}
	return o.UseDdnsPatternsRestriction, true
}

// HasUseDdnsPatternsRestriction returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDdnsPatternsRestriction() bool {
	if o != nil && !IsNil(o.UseDdnsPatternsRestriction) {
		return true
	}

	return false
}

// SetUseDdnsPatternsRestriction gets a reference to the given bool and assigns it to the UseDdnsPatternsRestriction field.
func (o *ZoneAuth) SetUseDdnsPatternsRestriction(v bool) {
	o.UseDdnsPatternsRestriction = &v
}

// GetUseDdnsPrincipalSecurity returns the UseDdnsPrincipalSecurity field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDdnsPrincipalSecurity() bool {
	if o == nil || IsNil(o.UseDdnsPrincipalSecurity) {
		var ret bool
		return ret
	}
	return *o.UseDdnsPrincipalSecurity
}

// GetUseDdnsPrincipalSecurityOk returns a tuple with the UseDdnsPrincipalSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDdnsPrincipalSecurityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsPrincipalSecurity) {
		return nil, false
	}
	return o.UseDdnsPrincipalSecurity, true
}

// HasUseDdnsPrincipalSecurity returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDdnsPrincipalSecurity() bool {
	if o != nil && !IsNil(o.UseDdnsPrincipalSecurity) {
		return true
	}

	return false
}

// SetUseDdnsPrincipalSecurity gets a reference to the given bool and assigns it to the UseDdnsPrincipalSecurity field.
func (o *ZoneAuth) SetUseDdnsPrincipalSecurity(v bool) {
	o.UseDdnsPrincipalSecurity = &v
}

// GetUseDdnsRestrictProtected returns the UseDdnsRestrictProtected field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDdnsRestrictProtected() bool {
	if o == nil || IsNil(o.UseDdnsRestrictProtected) {
		var ret bool
		return ret
	}
	return *o.UseDdnsRestrictProtected
}

// GetUseDdnsRestrictProtectedOk returns a tuple with the UseDdnsRestrictProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDdnsRestrictProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsRestrictProtected) {
		return nil, false
	}
	return o.UseDdnsRestrictProtected, true
}

// HasUseDdnsRestrictProtected returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDdnsRestrictProtected() bool {
	if o != nil && !IsNil(o.UseDdnsRestrictProtected) {
		return true
	}

	return false
}

// SetUseDdnsRestrictProtected gets a reference to the given bool and assigns it to the UseDdnsRestrictProtected field.
func (o *ZoneAuth) SetUseDdnsRestrictProtected(v bool) {
	o.UseDdnsRestrictProtected = &v
}

// GetUseDdnsRestrictStatic returns the UseDdnsRestrictStatic field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDdnsRestrictStatic() bool {
	if o == nil || IsNil(o.UseDdnsRestrictStatic) {
		var ret bool
		return ret
	}
	return *o.UseDdnsRestrictStatic
}

// GetUseDdnsRestrictStaticOk returns a tuple with the UseDdnsRestrictStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDdnsRestrictStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsRestrictStatic) {
		return nil, false
	}
	return o.UseDdnsRestrictStatic, true
}

// HasUseDdnsRestrictStatic returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDdnsRestrictStatic() bool {
	if o != nil && !IsNil(o.UseDdnsRestrictStatic) {
		return true
	}

	return false
}

// SetUseDdnsRestrictStatic gets a reference to the given bool and assigns it to the UseDdnsRestrictStatic field.
func (o *ZoneAuth) SetUseDdnsRestrictStatic(v bool) {
	o.UseDdnsRestrictStatic = &v
}

// GetUseDnssecKeyParams returns the UseDnssecKeyParams field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseDnssecKeyParams() bool {
	if o == nil || IsNil(o.UseDnssecKeyParams) {
		var ret bool
		return ret
	}
	return *o.UseDnssecKeyParams
}

// GetUseDnssecKeyParamsOk returns a tuple with the UseDnssecKeyParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseDnssecKeyParamsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnssecKeyParams) {
		return nil, false
	}
	return o.UseDnssecKeyParams, true
}

// HasUseDnssecKeyParams returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseDnssecKeyParams() bool {
	if o != nil && !IsNil(o.UseDnssecKeyParams) {
		return true
	}

	return false
}

// SetUseDnssecKeyParams gets a reference to the given bool and assigns it to the UseDnssecKeyParams field.
func (o *ZoneAuth) SetUseDnssecKeyParams(v bool) {
	o.UseDnssecKeyParams = &v
}

// GetUseExternalPrimary returns the UseExternalPrimary field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseExternalPrimary() bool {
	if o == nil || IsNil(o.UseExternalPrimary) {
		var ret bool
		return ret
	}
	return *o.UseExternalPrimary
}

// GetUseExternalPrimaryOk returns a tuple with the UseExternalPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseExternalPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseExternalPrimary) {
		return nil, false
	}
	return o.UseExternalPrimary, true
}

// HasUseExternalPrimary returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseExternalPrimary() bool {
	if o != nil && !IsNil(o.UseExternalPrimary) {
		return true
	}

	return false
}

// SetUseExternalPrimary gets a reference to the given bool and assigns it to the UseExternalPrimary field.
func (o *ZoneAuth) SetUseExternalPrimary(v bool) {
	o.UseExternalPrimary = &v
}

// GetUseGridZoneTimer returns the UseGridZoneTimer field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseGridZoneTimer() bool {
	if o == nil || IsNil(o.UseGridZoneTimer) {
		var ret bool
		return ret
	}
	return *o.UseGridZoneTimer
}

// GetUseGridZoneTimerOk returns a tuple with the UseGridZoneTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseGridZoneTimerOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGridZoneTimer) {
		return nil, false
	}
	return o.UseGridZoneTimer, true
}

// HasUseGridZoneTimer returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseGridZoneTimer() bool {
	if o != nil && !IsNil(o.UseGridZoneTimer) {
		return true
	}

	return false
}

// SetUseGridZoneTimer gets a reference to the given bool and assigns it to the UseGridZoneTimer field.
func (o *ZoneAuth) SetUseGridZoneTimer(v bool) {
	o.UseGridZoneTimer = &v
}

// GetUseImportFrom returns the UseImportFrom field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseImportFrom() bool {
	if o == nil || IsNil(o.UseImportFrom) {
		var ret bool
		return ret
	}
	return *o.UseImportFrom
}

// GetUseImportFromOk returns a tuple with the UseImportFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseImportFromOk() (*bool, bool) {
	if o == nil || IsNil(o.UseImportFrom) {
		return nil, false
	}
	return o.UseImportFrom, true
}

// HasUseImportFrom returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseImportFrom() bool {
	if o != nil && !IsNil(o.UseImportFrom) {
		return true
	}

	return false
}

// SetUseImportFrom gets a reference to the given bool and assigns it to the UseImportFrom field.
func (o *ZoneAuth) SetUseImportFrom(v bool) {
	o.UseImportFrom = &v
}

// GetUseNotifyDelay returns the UseNotifyDelay field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseNotifyDelay() bool {
	if o == nil || IsNil(o.UseNotifyDelay) {
		var ret bool
		return ret
	}
	return *o.UseNotifyDelay
}

// GetUseNotifyDelayOk returns a tuple with the UseNotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseNotifyDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNotifyDelay) {
		return nil, false
	}
	return o.UseNotifyDelay, true
}

// HasUseNotifyDelay returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseNotifyDelay() bool {
	if o != nil && !IsNil(o.UseNotifyDelay) {
		return true
	}

	return false
}

// SetUseNotifyDelay gets a reference to the given bool and assigns it to the UseNotifyDelay field.
func (o *ZoneAuth) SetUseNotifyDelay(v bool) {
	o.UseNotifyDelay = &v
}

// GetUseRecordNamePolicy returns the UseRecordNamePolicy field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseRecordNamePolicy() bool {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		var ret bool
		return ret
	}
	return *o.UseRecordNamePolicy
}

// GetUseRecordNamePolicyOk returns a tuple with the UseRecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseRecordNamePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		return nil, false
	}
	return o.UseRecordNamePolicy, true
}

// HasUseRecordNamePolicy returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseRecordNamePolicy() bool {
	if o != nil && !IsNil(o.UseRecordNamePolicy) {
		return true
	}

	return false
}

// SetUseRecordNamePolicy gets a reference to the given bool and assigns it to the UseRecordNamePolicy field.
func (o *ZoneAuth) SetUseRecordNamePolicy(v bool) {
	o.UseRecordNamePolicy = &v
}

// GetUseScavengingSettings returns the UseScavengingSettings field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseScavengingSettings() bool {
	if o == nil || IsNil(o.UseScavengingSettings) {
		var ret bool
		return ret
	}
	return *o.UseScavengingSettings
}

// GetUseScavengingSettingsOk returns a tuple with the UseScavengingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseScavengingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseScavengingSettings) {
		return nil, false
	}
	return o.UseScavengingSettings, true
}

// HasUseScavengingSettings returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseScavengingSettings() bool {
	if o != nil && !IsNil(o.UseScavengingSettings) {
		return true
	}

	return false
}

// SetUseScavengingSettings gets a reference to the given bool and assigns it to the UseScavengingSettings field.
func (o *ZoneAuth) SetUseScavengingSettings(v bool) {
	o.UseScavengingSettings = &v
}

// GetUseSoaEmail returns the UseSoaEmail field value if set, zero value otherwise.
func (o *ZoneAuth) GetUseSoaEmail() bool {
	if o == nil || IsNil(o.UseSoaEmail) {
		var ret bool
		return ret
	}
	return *o.UseSoaEmail
}

// GetUseSoaEmailOk returns a tuple with the UseSoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUseSoaEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSoaEmail) {
		return nil, false
	}
	return o.UseSoaEmail, true
}

// HasUseSoaEmail returns a boolean if a field has been set.
func (o *ZoneAuth) HasUseSoaEmail() bool {
	if o != nil && !IsNil(o.UseSoaEmail) {
		return true
	}

	return false
}

// SetUseSoaEmail gets a reference to the given bool and assigns it to the UseSoaEmail field.
func (o *ZoneAuth) SetUseSoaEmail(v bool) {
	o.UseSoaEmail = &v
}

// GetUsingSrgAssociations returns the UsingSrgAssociations field value if set, zero value otherwise.
func (o *ZoneAuth) GetUsingSrgAssociations() bool {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		var ret bool
		return ret
	}
	return *o.UsingSrgAssociations
}

// GetUsingSrgAssociationsOk returns a tuple with the UsingSrgAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetUsingSrgAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		return nil, false
	}
	return o.UsingSrgAssociations, true
}

// HasUsingSrgAssociations returns a boolean if a field has been set.
func (o *ZoneAuth) HasUsingSrgAssociations() bool {
	if o != nil && !IsNil(o.UsingSrgAssociations) {
		return true
	}

	return false
}

// SetUsingSrgAssociations gets a reference to the given bool and assigns it to the UsingSrgAssociations field.
func (o *ZoneAuth) SetUsingSrgAssociations(v bool) {
	o.UsingSrgAssociations = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ZoneAuth) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ZoneAuth) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *ZoneAuth) SetView(v string) {
	o.View = &v
}

// GetZoneFormat returns the ZoneFormat field value if set, zero value otherwise.
func (o *ZoneAuth) GetZoneFormat() string {
	if o == nil || IsNil(o.ZoneFormat) {
		var ret string
		return ret
	}
	return *o.ZoneFormat
}

// GetZoneFormatOk returns a tuple with the ZoneFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetZoneFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneFormat) {
		return nil, false
	}
	return o.ZoneFormat, true
}

// HasZoneFormat returns a boolean if a field has been set.
func (o *ZoneAuth) HasZoneFormat() bool {
	if o != nil && !IsNil(o.ZoneFormat) {
		return true
	}

	return false
}

// SetZoneFormat gets a reference to the given string and assigns it to the ZoneFormat field.
func (o *ZoneAuth) SetZoneFormat(v string) {
	o.ZoneFormat = &v
}

// GetZoneNotQueriedEnabledTime returns the ZoneNotQueriedEnabledTime field value if set, zero value otherwise.
func (o *ZoneAuth) GetZoneNotQueriedEnabledTime() int64 {
	if o == nil || IsNil(o.ZoneNotQueriedEnabledTime) {
		var ret int64
		return ret
	}
	return *o.ZoneNotQueriedEnabledTime
}

// GetZoneNotQueriedEnabledTimeOk returns a tuple with the ZoneNotQueriedEnabledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuth) GetZoneNotQueriedEnabledTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ZoneNotQueriedEnabledTime) {
		return nil, false
	}
	return o.ZoneNotQueriedEnabledTime, true
}

// HasZoneNotQueriedEnabledTime returns a boolean if a field has been set.
func (o *ZoneAuth) HasZoneNotQueriedEnabledTime() bool {
	if o != nil && !IsNil(o.ZoneNotQueriedEnabledTime) {
		return true
	}

	return false
}

// SetZoneNotQueriedEnabledTime gets a reference to the given int64 and assigns it to the ZoneNotQueriedEnabledTime field.
func (o *ZoneAuth) SetZoneNotQueriedEnabledTime(v int64) {
	o.ZoneNotQueriedEnabledTime = &v
}

func (o ZoneAuth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AllowActiveDir) {
		toSerialize["allow_active_dir"] = o.AllowActiveDir
	}
	if !IsNil(o.AllowFixedRrsetOrder) {
		toSerialize["allow_fixed_rrset_order"] = o.AllowFixedRrsetOrder
	}
	if !IsNil(o.AllowGssTsigForUnderscoreZone) {
		toSerialize["allow_gss_tsig_for_underscore_zone"] = o.AllowGssTsigForUnderscoreZone
	}
	if !IsNil(o.AllowGssTsigZoneUpdates) {
		toSerialize["allow_gss_tsig_zone_updates"] = o.AllowGssTsigZoneUpdates
	}
	if !IsNil(o.AllowQuery) {
		toSerialize["allow_query"] = o.AllowQuery
	}
	if !IsNil(o.AllowTransfer) {
		toSerialize["allow_transfer"] = o.AllowTransfer
	}
	if !IsNil(o.AllowUpdate) {
		toSerialize["allow_update"] = o.AllowUpdate
	}
	if !IsNil(o.AllowUpdateForwarding) {
		toSerialize["allow_update_forwarding"] = o.AllowUpdateForwarding
	}
	if !IsNil(o.AwsRte53ZoneInfo) {
		toSerialize["aws_rte53_zone_info"] = o.AwsRte53ZoneInfo
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CopyXferToNotify) {
		toSerialize["copy_xfer_to_notify"] = o.CopyXferToNotify
	}
	if !IsNil(o.CreatePtrForBulkHosts) {
		toSerialize["create_ptr_for_bulk_hosts"] = o.CreatePtrForBulkHosts
	}
	if !IsNil(o.CreatePtrForHosts) {
		toSerialize["create_ptr_for_hosts"] = o.CreatePtrForHosts
	}
	if !IsNil(o.CreateUnderscoreZones) {
		toSerialize["create_underscore_zones"] = o.CreateUnderscoreZones
	}
	if !IsNil(o.DdnsForceCreationTimestampUpdate) {
		toSerialize["ddns_force_creation_timestamp_update"] = o.DdnsForceCreationTimestampUpdate
	}
	if !IsNil(o.DdnsPrincipalGroup) {
		toSerialize["ddns_principal_group"] = o.DdnsPrincipalGroup
	}
	if !IsNil(o.DdnsPrincipalTracking) {
		toSerialize["ddns_principal_tracking"] = o.DdnsPrincipalTracking
	}
	if !IsNil(o.DdnsRestrictPatterns) {
		toSerialize["ddns_restrict_patterns"] = o.DdnsRestrictPatterns
	}
	if !IsNil(o.DdnsRestrictPatternsList) {
		toSerialize["ddns_restrict_patterns_list"] = o.DdnsRestrictPatternsList
	}
	if !IsNil(o.DdnsRestrictProtected) {
		toSerialize["ddns_restrict_protected"] = o.DdnsRestrictProtected
	}
	if !IsNil(o.DdnsRestrictSecure) {
		toSerialize["ddns_restrict_secure"] = o.DdnsRestrictSecure
	}
	if !IsNil(o.DdnsRestrictStatic) {
		toSerialize["ddns_restrict_static"] = o.DdnsRestrictStatic
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableForwarding) {
		toSerialize["disable_forwarding"] = o.DisableForwarding
	}
	if !IsNil(o.DisplayDomain) {
		toSerialize["display_domain"] = o.DisplayDomain
	}
	if !IsNil(o.DnsFqdn) {
		toSerialize["dns_fqdn"] = o.DnsFqdn
	}
	if !IsNil(o.DnsIntegrityEnable) {
		toSerialize["dns_integrity_enable"] = o.DnsIntegrityEnable
	}
	if !IsNil(o.DnsIntegrityFrequency) {
		toSerialize["dns_integrity_frequency"] = o.DnsIntegrityFrequency
	}
	if !IsNil(o.DnsIntegrityMember) {
		toSerialize["dns_integrity_member"] = o.DnsIntegrityMember
	}
	if !IsNil(o.DnsIntegrityVerboseLogging) {
		toSerialize["dns_integrity_verbose_logging"] = o.DnsIntegrityVerboseLogging
	}
	if !IsNil(o.DnsSoaEmail) {
		toSerialize["dns_soa_email"] = o.DnsSoaEmail
	}
	if !IsNil(o.DnssecKeyParams) {
		toSerialize["dnssec_key_params"] = o.DnssecKeyParams
	}
	if !IsNil(o.DnssecKeys) {
		toSerialize["dnssec_keys"] = o.DnssecKeys
	}
	if !IsNil(o.DnssecKskRolloverDate) {
		toSerialize["dnssec_ksk_rollover_date"] = o.DnssecKskRolloverDate
	}
	if !IsNil(o.DnssecZskRolloverDate) {
		toSerialize["dnssec_zsk_rollover_date"] = o.DnssecZskRolloverDate
	}
	if !IsNil(o.DoHostAbstraction) {
		toSerialize["do_host_abstraction"] = o.DoHostAbstraction
	}
	if !IsNil(o.EffectiveCheckNamesPolicy) {
		toSerialize["effective_check_names_policy"] = o.EffectiveCheckNamesPolicy
	}
	if !IsNil(o.EffectiveRecordNamePolicy) {
		toSerialize["effective_record_name_policy"] = o.EffectiveRecordNamePolicy
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.GridPrimary) {
		toSerialize["grid_primary"] = o.GridPrimary
	}
	if !IsNil(o.GridPrimarySharedWithMsParentDelegation) {
		toSerialize["grid_primary_shared_with_ms_parent_delegation"] = o.GridPrimarySharedWithMsParentDelegation
	}
	if !IsNil(o.GridSecondaries) {
		toSerialize["grid_secondaries"] = o.GridSecondaries
	}
	if !IsNil(o.ImportFrom) {
		toSerialize["import_from"] = o.ImportFrom
	}
	if !IsNil(o.IsDnssecEnabled) {
		toSerialize["is_dnssec_enabled"] = o.IsDnssecEnabled
	}
	if !IsNil(o.IsDnssecSigned) {
		toSerialize["is_dnssec_signed"] = o.IsDnssecSigned
	}
	if !IsNil(o.IsMultimaster) {
		toSerialize["is_multimaster"] = o.IsMultimaster
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.LastQueriedAcl) {
		toSerialize["last_queried_acl"] = o.LastQueriedAcl
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.MaskPrefix) {
		toSerialize["mask_prefix"] = o.MaskPrefix
	}
	if !IsNil(o.MemberSoaMnames) {
		toSerialize["member_soa_mnames"] = o.MemberSoaMnames
	}
	if !IsNil(o.MemberSoaSerials) {
		toSerialize["member_soa_serials"] = o.MemberSoaSerials
	}
	if !IsNil(o.MsAdIntegrated) {
		toSerialize["ms_ad_integrated"] = o.MsAdIntegrated
	}
	if !IsNil(o.MsAllowTransfer) {
		toSerialize["ms_allow_transfer"] = o.MsAllowTransfer
	}
	if !IsNil(o.MsAllowTransferMode) {
		toSerialize["ms_allow_transfer_mode"] = o.MsAllowTransferMode
	}
	if !IsNil(o.MsDcNsRecordCreation) {
		toSerialize["ms_dc_ns_record_creation"] = o.MsDcNsRecordCreation
	}
	if !IsNil(o.MsDdnsMode) {
		toSerialize["ms_ddns_mode"] = o.MsDdnsMode
	}
	if !IsNil(o.MsManaged) {
		toSerialize["ms_managed"] = o.MsManaged
	}
	if !IsNil(o.MsPrimaries) {
		toSerialize["ms_primaries"] = o.MsPrimaries
	}
	if !IsNil(o.MsReadOnly) {
		toSerialize["ms_read_only"] = o.MsReadOnly
	}
	if !IsNil(o.MsSecondaries) {
		toSerialize["ms_secondaries"] = o.MsSecondaries
	}
	if !IsNil(o.MsSyncDisabled) {
		toSerialize["ms_sync_disabled"] = o.MsSyncDisabled
	}
	if !IsNil(o.MsSyncMasterName) {
		toSerialize["ms_sync_master_name"] = o.MsSyncMasterName
	}
	if !IsNil(o.NetworkAssociations) {
		toSerialize["network_associations"] = o.NetworkAssociations
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NotifyDelay) {
		toSerialize["notify_delay"] = o.NotifyDelay
	}
	if !IsNil(o.NsGroup) {
		toSerialize["ns_group"] = o.NsGroup
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.PrimaryType) {
		toSerialize["primary_type"] = o.PrimaryType
	}
	if !IsNil(o.RecordNamePolicy) {
		toSerialize["record_name_policy"] = o.RecordNamePolicy
	}
	if !IsNil(o.RecordsMonitored) {
		toSerialize["records_monitored"] = o.RecordsMonitored
	}
	if !IsNil(o.RemoveSubzones) {
		toSerialize["remove_subzones"] = o.RemoveSubzones
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.RrNotQueriedEnabledTime) {
		toSerialize["rr_not_queried_enabled_time"] = o.RrNotQueriedEnabledTime
	}
	if !IsNil(o.ScavengingSettings) {
		toSerialize["scavenging_settings"] = o.ScavengingSettings
	}
	if !IsNil(o.SetSoaSerialNumber) {
		toSerialize["set_soa_serial_number"] = o.SetSoaSerialNumber
	}
	if !IsNil(o.SoaDefaultTtl) {
		toSerialize["soa_default_ttl"] = o.SoaDefaultTtl
	}
	if !IsNil(o.SoaEmail) {
		toSerialize["soa_email"] = o.SoaEmail
	}
	if !IsNil(o.SoaExpire) {
		toSerialize["soa_expire"] = o.SoaExpire
	}
	if !IsNil(o.SoaNegativeTtl) {
		toSerialize["soa_negative_ttl"] = o.SoaNegativeTtl
	}
	if !IsNil(o.SoaRefresh) {
		toSerialize["soa_refresh"] = o.SoaRefresh
	}
	if !IsNil(o.SoaRetry) {
		toSerialize["soa_retry"] = o.SoaRetry
	}
	if !IsNil(o.SoaSerial) {
		toSerialize["soa_serial_number"] = o.SoaSerial
	}
	if !IsNil(o.Srgs) {
		toSerialize["srgs"] = o.Srgs
	}
	if !IsNil(o.UpdateForwarding) {
		toSerialize["update_forwarding"] = o.UpdateForwarding
	}
	if !IsNil(o.UseAllowActiveDir) {
		toSerialize["use_allow_active_dir"] = o.UseAllowActiveDir
	}
	if !IsNil(o.UseAllowQuery) {
		toSerialize["use_allow_query"] = o.UseAllowQuery
	}
	if !IsNil(o.UseAllowTransfer) {
		toSerialize["use_allow_transfer"] = o.UseAllowTransfer
	}
	if !IsNil(o.UseAllowUpdate) {
		toSerialize["use_allow_update"] = o.UseAllowUpdate
	}
	if !IsNil(o.UseAllowUpdateForwarding) {
		toSerialize["use_allow_update_forwarding"] = o.UseAllowUpdateForwarding
	}
	if !IsNil(o.UseCheckNamesPolicy) {
		toSerialize["use_check_names_policy"] = o.UseCheckNamesPolicy
	}
	if !IsNil(o.UseCopyXferToNotify) {
		toSerialize["use_copy_xfer_to_notify"] = o.UseCopyXferToNotify
	}
	if !IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		toSerialize["use_ddns_force_creation_timestamp_update"] = o.UseDdnsForceCreationTimestampUpdate
	}
	if !IsNil(o.UseDdnsPatternsRestriction) {
		toSerialize["use_ddns_patterns_restriction"] = o.UseDdnsPatternsRestriction
	}
	if !IsNil(o.UseDdnsPrincipalSecurity) {
		toSerialize["use_ddns_principal_security"] = o.UseDdnsPrincipalSecurity
	}
	if !IsNil(o.UseDdnsRestrictProtected) {
		toSerialize["use_ddns_restrict_protected"] = o.UseDdnsRestrictProtected
	}
	if !IsNil(o.UseDdnsRestrictStatic) {
		toSerialize["use_ddns_restrict_static"] = o.UseDdnsRestrictStatic
	}
	if !IsNil(o.UseDnssecKeyParams) {
		toSerialize["use_dnssec_key_params"] = o.UseDnssecKeyParams
	}
	if !IsNil(o.UseExternalPrimary) {
		toSerialize["use_external_primary"] = o.UseExternalPrimary
	}
	if !IsNil(o.UseGridZoneTimer) {
		toSerialize["use_grid_zone_timer"] = o.UseGridZoneTimer
	}
	if !IsNil(o.UseImportFrom) {
		toSerialize["use_import_from"] = o.UseImportFrom
	}
	if !IsNil(o.UseNotifyDelay) {
		toSerialize["use_notify_delay"] = o.UseNotifyDelay
	}
	if !IsNil(o.UseRecordNamePolicy) {
		toSerialize["use_record_name_policy"] = o.UseRecordNamePolicy
	}
	if !IsNil(o.UseScavengingSettings) {
		toSerialize["use_scavenging_settings"] = o.UseScavengingSettings
	}
	if !IsNil(o.UseSoaEmail) {
		toSerialize["use_soa_email"] = o.UseSoaEmail
	}
	if !IsNil(o.UsingSrgAssociations) {
		toSerialize["using_srg_associations"] = o.UsingSrgAssociations
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.ZoneFormat) {
		toSerialize["zone_format"] = o.ZoneFormat
	}
	if !IsNil(o.ZoneNotQueriedEnabledTime) {
		toSerialize["zone_not_queried_enabled_time"] = o.ZoneNotQueriedEnabledTime
	}
	return toSerialize, nil
}

type NullableZoneAuth struct {
	value *ZoneAuth
	isSet bool
}

func (v NullableZoneAuth) Get() *ZoneAuth {
	return v.value
}

func (v *NullableZoneAuth) Set(val *ZoneAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneAuth(val *ZoneAuth) *NullableZoneAuth {
	return &NullableZoneAuth{value: val, isSet: true}
}

func (v NullableZoneAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
