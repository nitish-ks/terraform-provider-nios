/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneAuthDnssecKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneAuthDnssecKeys{}

// ZoneAuthDnssecKeys struct for ZoneAuthDnssecKeys
type ZoneAuthDnssecKeys struct {
	// The tag of the key for the zone.
	Tag *int64 `json:"tag,omitempty"`
	// The status of the key for the zone.
	Status *string `json:"status,omitempty"`
	// The next event date for the key, the rollover date for an active key or the removal date for an already rolled one.
	NextEventDate *int64 `json:"next_event_date,omitempty"`
	// The key type.
	Type *string `json:"type,omitempty"`
	// The public-key encryption algorithm. Values 1, 3 and 6 are deprecated from NIOS 9.0.
	Algorithm *string `json:"algorithm,omitempty"`
	// The Base-64 encoding of the public key.
	PublicKey            *string `json:"public_key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZoneAuthDnssecKeys ZoneAuthDnssecKeys

// NewZoneAuthDnssecKeys instantiates a new ZoneAuthDnssecKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneAuthDnssecKeys() *ZoneAuthDnssecKeys {
	this := ZoneAuthDnssecKeys{}
	return &this
}

// NewZoneAuthDnssecKeysWithDefaults instantiates a new ZoneAuthDnssecKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneAuthDnssecKeysWithDefaults() *ZoneAuthDnssecKeys {
	this := ZoneAuthDnssecKeys{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetTag() int64 {
	if o == nil || IsNil(o.Tag) {
		var ret int64
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetTagOk() (*int64, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given int64 and assigns it to the Tag field.
func (o *ZoneAuthDnssecKeys) SetTag(v int64) {
	o.Tag = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ZoneAuthDnssecKeys) SetStatus(v string) {
	o.Status = &v
}

// GetNextEventDate returns the NextEventDate field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetNextEventDate() int64 {
	if o == nil || IsNil(o.NextEventDate) {
		var ret int64
		return ret
	}
	return *o.NextEventDate
}

// GetNextEventDateOk returns a tuple with the NextEventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetNextEventDateOk() (*int64, bool) {
	if o == nil || IsNil(o.NextEventDate) {
		return nil, false
	}
	return o.NextEventDate, true
}

// HasNextEventDate returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasNextEventDate() bool {
	if o != nil && !IsNil(o.NextEventDate) {
		return true
	}

	return false
}

// SetNextEventDate gets a reference to the given int64 and assigns it to the NextEventDate field.
func (o *ZoneAuthDnssecKeys) SetNextEventDate(v int64) {
	o.NextEventDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ZoneAuthDnssecKeys) SetType(v string) {
	o.Type = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *ZoneAuthDnssecKeys) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *ZoneAuthDnssecKeys) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDnssecKeys) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *ZoneAuthDnssecKeys) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *ZoneAuthDnssecKeys) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o ZoneAuthDnssecKeys) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneAuthDnssecKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.NextEventDate) {
		toSerialize["next_event_date"] = o.NextEventDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneAuthDnssecKeys) UnmarshalJSON(data []byte) (err error) {
	varZoneAuthDnssecKeys := _ZoneAuthDnssecKeys{}

	err = json.Unmarshal(data, &varZoneAuthDnssecKeys)

	if err != nil {
		return err
	}

	*o = ZoneAuthDnssecKeys(varZoneAuthDnssecKeys)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tag")
		delete(additionalProperties, "status")
		delete(additionalProperties, "next_event_date")
		delete(additionalProperties, "type")
		delete(additionalProperties, "algorithm")
		delete(additionalProperties, "public_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneAuthDnssecKeys struct {
	value *ZoneAuthDnssecKeys
	isSet bool
}

func (v NullableZoneAuthDnssecKeys) Get() *ZoneAuthDnssecKeys {
	return v.value
}

func (v *NullableZoneAuthDnssecKeys) Set(val *ZoneAuthDnssecKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneAuthDnssecKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneAuthDnssecKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneAuthDnssecKeys(val *ZoneAuthDnssecKeys) *NullableZoneAuthDnssecKeys {
	return &NullableZoneAuthDnssecKeys{value: val, isSet: true}
}

func (v NullableZoneAuthDnssecKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneAuthDnssecKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
