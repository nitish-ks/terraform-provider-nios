/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneAuthMemberSoaMnames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneAuthMemberSoaMnames{}

// ZoneAuthMemberSoaMnames struct for ZoneAuthMemberSoaMnames
type ZoneAuthMemberSoaMnames struct {
	// The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.
	GridPrimary *string `json:"grid_primary,omitempty"`
	// The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.
	MsServerPrimary *string `json:"ms_server_primary,omitempty"`
	// Master's SOA MNAME. This value can be in unicode format.
	Mname *string `json:"mname,omitempty"`
	// Master's SOA MNAME in punycode format.
	DnsMname             *string `json:"dns_mname,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZoneAuthMemberSoaMnames ZoneAuthMemberSoaMnames

// NewZoneAuthMemberSoaMnames instantiates a new ZoneAuthMemberSoaMnames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneAuthMemberSoaMnames() *ZoneAuthMemberSoaMnames {
	this := ZoneAuthMemberSoaMnames{}
	return &this
}

// NewZoneAuthMemberSoaMnamesWithDefaults instantiates a new ZoneAuthMemberSoaMnames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneAuthMemberSoaMnamesWithDefaults() *ZoneAuthMemberSoaMnames {
	this := ZoneAuthMemberSoaMnames{}
	return &this
}

// GetGridPrimary returns the GridPrimary field value if set, zero value otherwise.
func (o *ZoneAuthMemberSoaMnames) GetGridPrimary() string {
	if o == nil || IsNil(o.GridPrimary) {
		var ret string
		return ret
	}
	return *o.GridPrimary
}

// GetGridPrimaryOk returns a tuple with the GridPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthMemberSoaMnames) GetGridPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.GridPrimary) {
		return nil, false
	}
	return o.GridPrimary, true
}

// HasGridPrimary returns a boolean if a field has been set.
func (o *ZoneAuthMemberSoaMnames) HasGridPrimary() bool {
	if o != nil && !IsNil(o.GridPrimary) {
		return true
	}

	return false
}

// SetGridPrimary gets a reference to the given string and assigns it to the GridPrimary field.
func (o *ZoneAuthMemberSoaMnames) SetGridPrimary(v string) {
	o.GridPrimary = &v
}

// GetMsServerPrimary returns the MsServerPrimary field value if set, zero value otherwise.
func (o *ZoneAuthMemberSoaMnames) GetMsServerPrimary() string {
	if o == nil || IsNil(o.MsServerPrimary) {
		var ret string
		return ret
	}
	return *o.MsServerPrimary
}

// GetMsServerPrimaryOk returns a tuple with the MsServerPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthMemberSoaMnames) GetMsServerPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.MsServerPrimary) {
		return nil, false
	}
	return o.MsServerPrimary, true
}

// HasMsServerPrimary returns a boolean if a field has been set.
func (o *ZoneAuthMemberSoaMnames) HasMsServerPrimary() bool {
	if o != nil && !IsNil(o.MsServerPrimary) {
		return true
	}

	return false
}

// SetMsServerPrimary gets a reference to the given string and assigns it to the MsServerPrimary field.
func (o *ZoneAuthMemberSoaMnames) SetMsServerPrimary(v string) {
	o.MsServerPrimary = &v
}

// GetMname returns the Mname field value if set, zero value otherwise.
func (o *ZoneAuthMemberSoaMnames) GetMname() string {
	if o == nil || IsNil(o.Mname) {
		var ret string
		return ret
	}
	return *o.Mname
}

// GetMnameOk returns a tuple with the Mname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthMemberSoaMnames) GetMnameOk() (*string, bool) {
	if o == nil || IsNil(o.Mname) {
		return nil, false
	}
	return o.Mname, true
}

// HasMname returns a boolean if a field has been set.
func (o *ZoneAuthMemberSoaMnames) HasMname() bool {
	if o != nil && !IsNil(o.Mname) {
		return true
	}

	return false
}

// SetMname gets a reference to the given string and assigns it to the Mname field.
func (o *ZoneAuthMemberSoaMnames) SetMname(v string) {
	o.Mname = &v
}

// GetDnsMname returns the DnsMname field value if set, zero value otherwise.
func (o *ZoneAuthMemberSoaMnames) GetDnsMname() string {
	if o == nil || IsNil(o.DnsMname) {
		var ret string
		return ret
	}
	return *o.DnsMname
}

// GetDnsMnameOk returns a tuple with the DnsMname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthMemberSoaMnames) GetDnsMnameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsMname) {
		return nil, false
	}
	return o.DnsMname, true
}

// HasDnsMname returns a boolean if a field has been set.
func (o *ZoneAuthMemberSoaMnames) HasDnsMname() bool {
	if o != nil && !IsNil(o.DnsMname) {
		return true
	}

	return false
}

// SetDnsMname gets a reference to the given string and assigns it to the DnsMname field.
func (o *ZoneAuthMemberSoaMnames) SetDnsMname(v string) {
	o.DnsMname = &v
}

func (o ZoneAuthMemberSoaMnames) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneAuthMemberSoaMnames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GridPrimary) {
		toSerialize["grid_primary"] = o.GridPrimary
	}
	if !IsNil(o.MsServerPrimary) {
		toSerialize["ms_server_primary"] = o.MsServerPrimary
	}
	if !IsNil(o.Mname) {
		toSerialize["mname"] = o.Mname
	}
	if !IsNil(o.DnsMname) {
		toSerialize["dns_mname"] = o.DnsMname
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneAuthMemberSoaMnames) UnmarshalJSON(data []byte) (err error) {
	varZoneAuthMemberSoaMnames := _ZoneAuthMemberSoaMnames{}

	err = json.Unmarshal(data, &varZoneAuthMemberSoaMnames)

	if err != nil {
		return err
	}

	*o = ZoneAuthMemberSoaMnames(varZoneAuthMemberSoaMnames)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "grid_primary")
		delete(additionalProperties, "ms_server_primary")
		delete(additionalProperties, "mname")
		delete(additionalProperties, "dns_mname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneAuthMemberSoaMnames struct {
	value *ZoneAuthMemberSoaMnames
	isSet bool
}

func (v NullableZoneAuthMemberSoaMnames) Get() *ZoneAuthMemberSoaMnames {
	return v.value
}

func (v *NullableZoneAuthMemberSoaMnames) Set(val *ZoneAuthMemberSoaMnames) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneAuthMemberSoaMnames) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneAuthMemberSoaMnames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneAuthMemberSoaMnames(val *ZoneAuthMemberSoaMnames) *NullableZoneAuthMemberSoaMnames {
	return &NullableZoneAuthMemberSoaMnames{value: val, isSet: true}
}

func (v NullableZoneAuthMemberSoaMnames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneAuthMemberSoaMnames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
