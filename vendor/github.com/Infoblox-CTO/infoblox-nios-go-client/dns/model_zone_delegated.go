/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneDelegated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneDelegated{}

// ZoneDelegated struct for ZoneDelegated
type ZoneDelegated struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IP address of the server that is serving this zone.
	Address *string `json:"address,omitempty"`
	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// This provides information for the remote name server that maintains data for the delegated zone. The Infoblox appliance redirects queries for data for the delegated zone to this remote name server.
	DelegateTo []ZoneDelegatedDelegateTo `json:"delegate_to,omitempty"`
	// You can specify the Time to Live (TTL) values of auto-generated NS and glue records for a delegated zone. This value is the number of seconds that data is cached.
	DelegatedTtl *int64 `json:"delegated_ttl,omitempty"`
	// Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The displayed name of the DNS zone.
	DisplayDomain *string `json:"display_domain,omitempty"`
	// The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.
	DnsFqdn *string `json:"dns_fqdn,omitempty"`
	// This flag controls whether automatic generation of RFC 2317 CNAMEs for delegated reverse zones overwrite existing PTR records. The default behavior is to overwrite all the existing records in the range; this corresponds to \"allow_ptr_creation_in_parent\" set to False. However, when this flag is set to True the existing PTR records are not overwritten.
	EnableRfc2317Exclusion *bool `json:"enable_rfc2317_exclusion,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	Fqdn *string `json:"fqdn,omitempty"`
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.
	Locked *bool `json:"locked,omitempty"`
	// The name of a superuser or the administrator who locked this zone.
	LockedBy *string `json:"locked_by,omitempty"`
	// IPv4 Netmask or IPv6 prefix for this zone.
	MaskPrefix *string `json:"mask_prefix,omitempty"`
	// The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".
	MsAdIntegrated *bool `json:"ms_ad_integrated,omitempty"`
	// Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.
	MsDdnsMode *string `json:"ms_ddns_mode,omitempty"`
	// The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.
	MsManaged *string `json:"ms_managed,omitempty"`
	// Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.
	MsReadOnly *bool `json:"ms_read_only,omitempty"`
	// The name of MS synchronization master for this zone.
	MsSyncMasterName *string `json:"ms_sync_master_name,omitempty"`
	// The delegation NS group bound with delegated zone.
	NsGroup *string `json:"ns_group,omitempty"`
	// The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.
	Parent *string `json:"parent,omitempty"`
	// The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.
	Prefix *string `json:"prefix,omitempty"`
	// Use flag for: delegated_ttl
	UseDelegatedTtl *bool `json:"use_delegated_ttl,omitempty"`
	// This is true if the zone is associated with a shared record group.
	UsingSrgAssociations *bool `json:"using_srg_associations,omitempty"`
	// The name of the DNS view in which the zone resides. Example \"external\".
	View *string `json:"view,omitempty"`
	// Determines the format of this zone.
	ZoneFormat *string `json:"zone_format,omitempty"`
}

// NewZoneDelegated instantiates a new ZoneDelegated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneDelegated() *ZoneDelegated {
	this := ZoneDelegated{}
	return &this
}

// NewZoneDelegatedWithDefaults instantiates a new ZoneDelegated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneDelegatedWithDefaults() *ZoneDelegated {
	this := ZoneDelegated{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ZoneDelegated) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ZoneDelegated) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ZoneDelegated) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ZoneDelegated) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ZoneDelegated) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ZoneDelegated) SetAddress(v string) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneDelegated) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneDelegated) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneDelegated) SetComment(v string) {
	o.Comment = &v
}

// GetDelegateTo returns the DelegateTo field value if set, zero value otherwise.
func (o *ZoneDelegated) GetDelegateTo() []ZoneDelegatedDelegateTo {
	if o == nil || IsNil(o.DelegateTo) {
		var ret []ZoneDelegatedDelegateTo
		return ret
	}
	return o.DelegateTo
}

// GetDelegateToOk returns a tuple with the DelegateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetDelegateToOk() ([]ZoneDelegatedDelegateTo, bool) {
	if o == nil || IsNil(o.DelegateTo) {
		return nil, false
	}
	return o.DelegateTo, true
}

// HasDelegateTo returns a boolean if a field has been set.
func (o *ZoneDelegated) HasDelegateTo() bool {
	if o != nil && !IsNil(o.DelegateTo) {
		return true
	}

	return false
}

// SetDelegateTo gets a reference to the given []ZoneDelegatedDelegateTo and assigns it to the DelegateTo field.
func (o *ZoneDelegated) SetDelegateTo(v []ZoneDelegatedDelegateTo) {
	o.DelegateTo = v
}

// GetDelegatedTtl returns the DelegatedTtl field value if set, zero value otherwise.
func (o *ZoneDelegated) GetDelegatedTtl() int64 {
	if o == nil || IsNil(o.DelegatedTtl) {
		var ret int64
		return ret
	}
	return *o.DelegatedTtl
}

// GetDelegatedTtlOk returns a tuple with the DelegatedTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetDelegatedTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DelegatedTtl) {
		return nil, false
	}
	return o.DelegatedTtl, true
}

// HasDelegatedTtl returns a boolean if a field has been set.
func (o *ZoneDelegated) HasDelegatedTtl() bool {
	if o != nil && !IsNil(o.DelegatedTtl) {
		return true
	}

	return false
}

// SetDelegatedTtl gets a reference to the given int64 and assigns it to the DelegatedTtl field.
func (o *ZoneDelegated) SetDelegatedTtl(v int64) {
	o.DelegatedTtl = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *ZoneDelegated) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *ZoneDelegated) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *ZoneDelegated) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisplayDomain returns the DisplayDomain field value if set, zero value otherwise.
func (o *ZoneDelegated) GetDisplayDomain() string {
	if o == nil || IsNil(o.DisplayDomain) {
		var ret string
		return ret
	}
	return *o.DisplayDomain
}

// GetDisplayDomainOk returns a tuple with the DisplayDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetDisplayDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomain) {
		return nil, false
	}
	return o.DisplayDomain, true
}

// HasDisplayDomain returns a boolean if a field has been set.
func (o *ZoneDelegated) HasDisplayDomain() bool {
	if o != nil && !IsNil(o.DisplayDomain) {
		return true
	}

	return false
}

// SetDisplayDomain gets a reference to the given string and assigns it to the DisplayDomain field.
func (o *ZoneDelegated) SetDisplayDomain(v string) {
	o.DisplayDomain = &v
}

// GetDnsFqdn returns the DnsFqdn field value if set, zero value otherwise.
func (o *ZoneDelegated) GetDnsFqdn() string {
	if o == nil || IsNil(o.DnsFqdn) {
		var ret string
		return ret
	}
	return *o.DnsFqdn
}

// GetDnsFqdnOk returns a tuple with the DnsFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetDnsFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.DnsFqdn) {
		return nil, false
	}
	return o.DnsFqdn, true
}

// HasDnsFqdn returns a boolean if a field has been set.
func (o *ZoneDelegated) HasDnsFqdn() bool {
	if o != nil && !IsNil(o.DnsFqdn) {
		return true
	}

	return false
}

// SetDnsFqdn gets a reference to the given string and assigns it to the DnsFqdn field.
func (o *ZoneDelegated) SetDnsFqdn(v string) {
	o.DnsFqdn = &v
}

// GetEnableRfc2317Exclusion returns the EnableRfc2317Exclusion field value if set, zero value otherwise.
func (o *ZoneDelegated) GetEnableRfc2317Exclusion() bool {
	if o == nil || IsNil(o.EnableRfc2317Exclusion) {
		var ret bool
		return ret
	}
	return *o.EnableRfc2317Exclusion
}

// GetEnableRfc2317ExclusionOk returns a tuple with the EnableRfc2317Exclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetEnableRfc2317ExclusionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRfc2317Exclusion) {
		return nil, false
	}
	return o.EnableRfc2317Exclusion, true
}

// HasEnableRfc2317Exclusion returns a boolean if a field has been set.
func (o *ZoneDelegated) HasEnableRfc2317Exclusion() bool {
	if o != nil && !IsNil(o.EnableRfc2317Exclusion) {
		return true
	}

	return false
}

// SetEnableRfc2317Exclusion gets a reference to the given bool and assigns it to the EnableRfc2317Exclusion field.
func (o *ZoneDelegated) SetEnableRfc2317Exclusion(v bool) {
	o.EnableRfc2317Exclusion = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *ZoneDelegated) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *ZoneDelegated) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *ZoneDelegated) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ZoneDelegated) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ZoneDelegated) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ZoneDelegated) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ZoneDelegated) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ZoneDelegated) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ZoneDelegated) SetLocked(v bool) {
	o.Locked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *ZoneDelegated) GetLockedBy() string {
	if o == nil || IsNil(o.LockedBy) {
		var ret string
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetLockedByOk() (*string, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *ZoneDelegated) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given string and assigns it to the LockedBy field.
func (o *ZoneDelegated) SetLockedBy(v string) {
	o.LockedBy = &v
}

// GetMaskPrefix returns the MaskPrefix field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMaskPrefix() string {
	if o == nil || IsNil(o.MaskPrefix) {
		var ret string
		return ret
	}
	return *o.MaskPrefix
}

// GetMaskPrefixOk returns a tuple with the MaskPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMaskPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MaskPrefix) {
		return nil, false
	}
	return o.MaskPrefix, true
}

// HasMaskPrefix returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMaskPrefix() bool {
	if o != nil && !IsNil(o.MaskPrefix) {
		return true
	}

	return false
}

// SetMaskPrefix gets a reference to the given string and assigns it to the MaskPrefix field.
func (o *ZoneDelegated) SetMaskPrefix(v string) {
	o.MaskPrefix = &v
}

// GetMsAdIntegrated returns the MsAdIntegrated field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMsAdIntegrated() bool {
	if o == nil || IsNil(o.MsAdIntegrated) {
		var ret bool
		return ret
	}
	return *o.MsAdIntegrated
}

// GetMsAdIntegratedOk returns a tuple with the MsAdIntegrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMsAdIntegratedOk() (*bool, bool) {
	if o == nil || IsNil(o.MsAdIntegrated) {
		return nil, false
	}
	return o.MsAdIntegrated, true
}

// HasMsAdIntegrated returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMsAdIntegrated() bool {
	if o != nil && !IsNil(o.MsAdIntegrated) {
		return true
	}

	return false
}

// SetMsAdIntegrated gets a reference to the given bool and assigns it to the MsAdIntegrated field.
func (o *ZoneDelegated) SetMsAdIntegrated(v bool) {
	o.MsAdIntegrated = &v
}

// GetMsDdnsMode returns the MsDdnsMode field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMsDdnsMode() string {
	if o == nil || IsNil(o.MsDdnsMode) {
		var ret string
		return ret
	}
	return *o.MsDdnsMode
}

// GetMsDdnsModeOk returns a tuple with the MsDdnsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMsDdnsModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsDdnsMode) {
		return nil, false
	}
	return o.MsDdnsMode, true
}

// HasMsDdnsMode returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMsDdnsMode() bool {
	if o != nil && !IsNil(o.MsDdnsMode) {
		return true
	}

	return false
}

// SetMsDdnsMode gets a reference to the given string and assigns it to the MsDdnsMode field.
func (o *ZoneDelegated) SetMsDdnsMode(v string) {
	o.MsDdnsMode = &v
}

// GetMsManaged returns the MsManaged field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMsManaged() string {
	if o == nil || IsNil(o.MsManaged) {
		var ret string
		return ret
	}
	return *o.MsManaged
}

// GetMsManagedOk returns a tuple with the MsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMsManagedOk() (*string, bool) {
	if o == nil || IsNil(o.MsManaged) {
		return nil, false
	}
	return o.MsManaged, true
}

// HasMsManaged returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMsManaged() bool {
	if o != nil && !IsNil(o.MsManaged) {
		return true
	}

	return false
}

// SetMsManaged gets a reference to the given string and assigns it to the MsManaged field.
func (o *ZoneDelegated) SetMsManaged(v string) {
	o.MsManaged = &v
}

// GetMsReadOnly returns the MsReadOnly field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMsReadOnly() bool {
	if o == nil || IsNil(o.MsReadOnly) {
		var ret bool
		return ret
	}
	return *o.MsReadOnly
}

// GetMsReadOnlyOk returns a tuple with the MsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MsReadOnly) {
		return nil, false
	}
	return o.MsReadOnly, true
}

// HasMsReadOnly returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMsReadOnly() bool {
	if o != nil && !IsNil(o.MsReadOnly) {
		return true
	}

	return false
}

// SetMsReadOnly gets a reference to the given bool and assigns it to the MsReadOnly field.
func (o *ZoneDelegated) SetMsReadOnly(v bool) {
	o.MsReadOnly = &v
}

// GetMsSyncMasterName returns the MsSyncMasterName field value if set, zero value otherwise.
func (o *ZoneDelegated) GetMsSyncMasterName() string {
	if o == nil || IsNil(o.MsSyncMasterName) {
		var ret string
		return ret
	}
	return *o.MsSyncMasterName
}

// GetMsSyncMasterNameOk returns a tuple with the MsSyncMasterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetMsSyncMasterNameOk() (*string, bool) {
	if o == nil || IsNil(o.MsSyncMasterName) {
		return nil, false
	}
	return o.MsSyncMasterName, true
}

// HasMsSyncMasterName returns a boolean if a field has been set.
func (o *ZoneDelegated) HasMsSyncMasterName() bool {
	if o != nil && !IsNil(o.MsSyncMasterName) {
		return true
	}

	return false
}

// SetMsSyncMasterName gets a reference to the given string and assigns it to the MsSyncMasterName field.
func (o *ZoneDelegated) SetMsSyncMasterName(v string) {
	o.MsSyncMasterName = &v
}

// GetNsGroup returns the NsGroup field value if set, zero value otherwise.
func (o *ZoneDelegated) GetNsGroup() string {
	if o == nil || IsNil(o.NsGroup) {
		var ret string
		return ret
	}
	return *o.NsGroup
}

// GetNsGroupOk returns a tuple with the NsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetNsGroupOk() (*string, bool) {
	if o == nil || IsNil(o.NsGroup) {
		return nil, false
	}
	return o.NsGroup, true
}

// HasNsGroup returns a boolean if a field has been set.
func (o *ZoneDelegated) HasNsGroup() bool {
	if o != nil && !IsNil(o.NsGroup) {
		return true
	}

	return false
}

// SetNsGroup gets a reference to the given string and assigns it to the NsGroup field.
func (o *ZoneDelegated) SetNsGroup(v string) {
	o.NsGroup = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ZoneDelegated) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ZoneDelegated) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *ZoneDelegated) SetParent(v string) {
	o.Parent = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ZoneDelegated) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ZoneDelegated) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ZoneDelegated) SetPrefix(v string) {
	o.Prefix = &v
}

// GetUseDelegatedTtl returns the UseDelegatedTtl field value if set, zero value otherwise.
func (o *ZoneDelegated) GetUseDelegatedTtl() bool {
	if o == nil || IsNil(o.UseDelegatedTtl) {
		var ret bool
		return ret
	}
	return *o.UseDelegatedTtl
}

// GetUseDelegatedTtlOk returns a tuple with the UseDelegatedTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetUseDelegatedTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDelegatedTtl) {
		return nil, false
	}
	return o.UseDelegatedTtl, true
}

// HasUseDelegatedTtl returns a boolean if a field has been set.
func (o *ZoneDelegated) HasUseDelegatedTtl() bool {
	if o != nil && !IsNil(o.UseDelegatedTtl) {
		return true
	}

	return false
}

// SetUseDelegatedTtl gets a reference to the given bool and assigns it to the UseDelegatedTtl field.
func (o *ZoneDelegated) SetUseDelegatedTtl(v bool) {
	o.UseDelegatedTtl = &v
}

// GetUsingSrgAssociations returns the UsingSrgAssociations field value if set, zero value otherwise.
func (o *ZoneDelegated) GetUsingSrgAssociations() bool {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		var ret bool
		return ret
	}
	return *o.UsingSrgAssociations
}

// GetUsingSrgAssociationsOk returns a tuple with the UsingSrgAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetUsingSrgAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		return nil, false
	}
	return o.UsingSrgAssociations, true
}

// HasUsingSrgAssociations returns a boolean if a field has been set.
func (o *ZoneDelegated) HasUsingSrgAssociations() bool {
	if o != nil && !IsNil(o.UsingSrgAssociations) {
		return true
	}

	return false
}

// SetUsingSrgAssociations gets a reference to the given bool and assigns it to the UsingSrgAssociations field.
func (o *ZoneDelegated) SetUsingSrgAssociations(v bool) {
	o.UsingSrgAssociations = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ZoneDelegated) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ZoneDelegated) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *ZoneDelegated) SetView(v string) {
	o.View = &v
}

// GetZoneFormat returns the ZoneFormat field value if set, zero value otherwise.
func (o *ZoneDelegated) GetZoneFormat() string {
	if o == nil || IsNil(o.ZoneFormat) {
		var ret string
		return ret
	}
	return *o.ZoneFormat
}

// GetZoneFormatOk returns a tuple with the ZoneFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDelegated) GetZoneFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneFormat) {
		return nil, false
	}
	return o.ZoneFormat, true
}

// HasZoneFormat returns a boolean if a field has been set.
func (o *ZoneDelegated) HasZoneFormat() bool {
	if o != nil && !IsNil(o.ZoneFormat) {
		return true
	}

	return false
}

// SetZoneFormat gets a reference to the given string and assigns it to the ZoneFormat field.
func (o *ZoneDelegated) SetZoneFormat(v string) {
	o.ZoneFormat = &v
}

func (o ZoneDelegated) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneDelegated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DelegateTo) {
		toSerialize["delegate_to"] = o.DelegateTo
	}
	if !IsNil(o.DelegatedTtl) {
		toSerialize["delegated_ttl"] = o.DelegatedTtl
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisplayDomain) {
		toSerialize["display_domain"] = o.DisplayDomain
	}
	if !IsNil(o.DnsFqdn) {
		toSerialize["dns_fqdn"] = o.DnsFqdn
	}
	if !IsNil(o.EnableRfc2317Exclusion) {
		toSerialize["enable_rfc2317_exclusion"] = o.EnableRfc2317Exclusion
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.MaskPrefix) {
		toSerialize["mask_prefix"] = o.MaskPrefix
	}
	if !IsNil(o.MsAdIntegrated) {
		toSerialize["ms_ad_integrated"] = o.MsAdIntegrated
	}
	if !IsNil(o.MsDdnsMode) {
		toSerialize["ms_ddns_mode"] = o.MsDdnsMode
	}
	if !IsNil(o.MsManaged) {
		toSerialize["ms_managed"] = o.MsManaged
	}
	if !IsNil(o.MsReadOnly) {
		toSerialize["ms_read_only"] = o.MsReadOnly
	}
	if !IsNil(o.MsSyncMasterName) {
		toSerialize["ms_sync_master_name"] = o.MsSyncMasterName
	}
	if !IsNil(o.NsGroup) {
		toSerialize["ns_group"] = o.NsGroup
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.UseDelegatedTtl) {
		toSerialize["use_delegated_ttl"] = o.UseDelegatedTtl
	}
	if !IsNil(o.UsingSrgAssociations) {
		toSerialize["using_srg_associations"] = o.UsingSrgAssociations
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.ZoneFormat) {
		toSerialize["zone_format"] = o.ZoneFormat
	}
	return toSerialize, nil
}

type NullableZoneDelegated struct {
	value *ZoneDelegated
	isSet bool
}

func (v NullableZoneDelegated) Get() *ZoneDelegated {
	return v.value
}

func (v *NullableZoneDelegated) Set(val *ZoneDelegated) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneDelegated) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneDelegated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneDelegated(val *ZoneDelegated) *NullableZoneDelegated {
	return &NullableZoneDelegated{value: val, isSet: true}
}

func (v NullableZoneDelegated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneDelegated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
