/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneForward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneForward{}

// ZoneForward struct for ZoneForward
type ZoneForward struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IP address of the server that is serving this zone.
	Address *string `json:"address,omitempty"`
	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines whether a auto-generation of NS records in parent zone is disabled or not. When this is set to False, the auto-generation is enabled.
	DisableNsGeneration *bool `json:"disable_ns_generation,omitempty"`
	// The displayed name of the DNS zone.
	DisplayDomain *string `json:"display_domain,omitempty"`
	// The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.
	DnsFqdn *string `json:"dns_fqdn,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// A forward stub server name server group.
	ExternalNsGroup *string `json:"external_ns_group,omitempty"`
	// The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified domain name.
	ForwardTo []ZoneForwardForwardTo `json:"forward_to,omitempty"`
	// Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// The information for the Grid members to which you want the Infoblox appliance to forward queries for a specified domain name.
	ForwardingServers []ZoneForwardForwardingServers `json:"forwarding_servers,omitempty"`
	// The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.
	Fqdn           *string                `json:"fqdn,omitempty"`
	LockUnlockZone map[string]interface{} `json:"lock_unlock_zone,omitempty"`
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.
	Locked *bool `json:"locked,omitempty"`
	// The name of a superuser or the administrator who locked this zone.
	LockedBy *string `json:"locked_by,omitempty"`
	// IPv4 Netmask or IPv6 prefix for this zone.
	MaskPrefix *string `json:"mask_prefix,omitempty"`
	// The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".
	MsAdIntegrated *bool `json:"ms_ad_integrated,omitempty"`
	// Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.
	MsDdnsMode *string `json:"ms_ddns_mode,omitempty"`
	// The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.
	MsManaged *string `json:"ms_managed,omitempty"`
	// Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.
	MsReadOnly *bool `json:"ms_read_only,omitempty"`
	// The name of MS synchronization master for this zone.
	MsSyncMasterName *string `json:"ms_sync_master_name,omitempty"`
	// A forwarding member name server group.
	NsGroup *string `json:"ns_group,omitempty"`
	// The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.
	Parent *string `json:"parent,omitempty"`
	// The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.
	Prefix *string `json:"prefix,omitempty"`
	// This is true if the zone is associated with a shared record group.
	UsingSrgAssociations *bool `json:"using_srg_associations,omitempty"`
	// The name of the DNS view in which the zone resides. Example \"external\".
	View *string `json:"view,omitempty"`
	// Determines the format of this zone.
	ZoneFormat *string `json:"zone_format,omitempty"`
}

// NewZoneForward instantiates a new ZoneForward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneForward() *ZoneForward {
	this := ZoneForward{}
	return &this
}

// NewZoneForwardWithDefaults instantiates a new ZoneForward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneForwardWithDefaults() *ZoneForward {
	this := ZoneForward{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ZoneForward) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ZoneForward) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ZoneForward) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ZoneForward) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ZoneForward) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ZoneForward) SetAddress(v string) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneForward) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneForward) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneForward) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *ZoneForward) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *ZoneForward) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *ZoneForward) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableNsGeneration returns the DisableNsGeneration field value if set, zero value otherwise.
func (o *ZoneForward) GetDisableNsGeneration() bool {
	if o == nil || IsNil(o.DisableNsGeneration) {
		var ret bool
		return ret
	}
	return *o.DisableNsGeneration
}

// GetDisableNsGenerationOk returns a tuple with the DisableNsGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetDisableNsGenerationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableNsGeneration) {
		return nil, false
	}
	return o.DisableNsGeneration, true
}

// HasDisableNsGeneration returns a boolean if a field has been set.
func (o *ZoneForward) HasDisableNsGeneration() bool {
	if o != nil && !IsNil(o.DisableNsGeneration) {
		return true
	}

	return false
}

// SetDisableNsGeneration gets a reference to the given bool and assigns it to the DisableNsGeneration field.
func (o *ZoneForward) SetDisableNsGeneration(v bool) {
	o.DisableNsGeneration = &v
}

// GetDisplayDomain returns the DisplayDomain field value if set, zero value otherwise.
func (o *ZoneForward) GetDisplayDomain() string {
	if o == nil || IsNil(o.DisplayDomain) {
		var ret string
		return ret
	}
	return *o.DisplayDomain
}

// GetDisplayDomainOk returns a tuple with the DisplayDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetDisplayDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomain) {
		return nil, false
	}
	return o.DisplayDomain, true
}

// HasDisplayDomain returns a boolean if a field has been set.
func (o *ZoneForward) HasDisplayDomain() bool {
	if o != nil && !IsNil(o.DisplayDomain) {
		return true
	}

	return false
}

// SetDisplayDomain gets a reference to the given string and assigns it to the DisplayDomain field.
func (o *ZoneForward) SetDisplayDomain(v string) {
	o.DisplayDomain = &v
}

// GetDnsFqdn returns the DnsFqdn field value if set, zero value otherwise.
func (o *ZoneForward) GetDnsFqdn() string {
	if o == nil || IsNil(o.DnsFqdn) {
		var ret string
		return ret
	}
	return *o.DnsFqdn
}

// GetDnsFqdnOk returns a tuple with the DnsFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetDnsFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.DnsFqdn) {
		return nil, false
	}
	return o.DnsFqdn, true
}

// HasDnsFqdn returns a boolean if a field has been set.
func (o *ZoneForward) HasDnsFqdn() bool {
	if o != nil && !IsNil(o.DnsFqdn) {
		return true
	}

	return false
}

// SetDnsFqdn gets a reference to the given string and assigns it to the DnsFqdn field.
func (o *ZoneForward) SetDnsFqdn(v string) {
	o.DnsFqdn = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *ZoneForward) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *ZoneForward) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *ZoneForward) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetExternalNsGroup returns the ExternalNsGroup field value if set, zero value otherwise.
func (o *ZoneForward) GetExternalNsGroup() string {
	if o == nil || IsNil(o.ExternalNsGroup) {
		var ret string
		return ret
	}
	return *o.ExternalNsGroup
}

// GetExternalNsGroupOk returns a tuple with the ExternalNsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetExternalNsGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNsGroup) {
		return nil, false
	}
	return o.ExternalNsGroup, true
}

// HasExternalNsGroup returns a boolean if a field has been set.
func (o *ZoneForward) HasExternalNsGroup() bool {
	if o != nil && !IsNil(o.ExternalNsGroup) {
		return true
	}

	return false
}

// SetExternalNsGroup gets a reference to the given string and assigns it to the ExternalNsGroup field.
func (o *ZoneForward) SetExternalNsGroup(v string) {
	o.ExternalNsGroup = &v
}

// GetForwardTo returns the ForwardTo field value if set, zero value otherwise.
func (o *ZoneForward) GetForwardTo() []ZoneForwardForwardTo {
	if o == nil || IsNil(o.ForwardTo) {
		var ret []ZoneForwardForwardTo
		return ret
	}
	return o.ForwardTo
}

// GetForwardToOk returns a tuple with the ForwardTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetForwardToOk() ([]ZoneForwardForwardTo, bool) {
	if o == nil || IsNil(o.ForwardTo) {
		return nil, false
	}
	return o.ForwardTo, true
}

// HasForwardTo returns a boolean if a field has been set.
func (o *ZoneForward) HasForwardTo() bool {
	if o != nil && !IsNil(o.ForwardTo) {
		return true
	}

	return false
}

// SetForwardTo gets a reference to the given []ZoneForwardForwardTo and assigns it to the ForwardTo field.
func (o *ZoneForward) SetForwardTo(v []ZoneForwardForwardTo) {
	o.ForwardTo = v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *ZoneForward) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *ZoneForward) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *ZoneForward) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetForwardingServers returns the ForwardingServers field value if set, zero value otherwise.
func (o *ZoneForward) GetForwardingServers() []ZoneForwardForwardingServers {
	if o == nil || IsNil(o.ForwardingServers) {
		var ret []ZoneForwardForwardingServers
		return ret
	}
	return o.ForwardingServers
}

// GetForwardingServersOk returns a tuple with the ForwardingServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetForwardingServersOk() ([]ZoneForwardForwardingServers, bool) {
	if o == nil || IsNil(o.ForwardingServers) {
		return nil, false
	}
	return o.ForwardingServers, true
}

// HasForwardingServers returns a boolean if a field has been set.
func (o *ZoneForward) HasForwardingServers() bool {
	if o != nil && !IsNil(o.ForwardingServers) {
		return true
	}

	return false
}

// SetForwardingServers gets a reference to the given []ZoneForwardForwardingServers and assigns it to the ForwardingServers field.
func (o *ZoneForward) SetForwardingServers(v []ZoneForwardForwardingServers) {
	o.ForwardingServers = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ZoneForward) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ZoneForward) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ZoneForward) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetLockUnlockZone returns the LockUnlockZone field value if set, zero value otherwise.
func (o *ZoneForward) GetLockUnlockZone() map[string]interface{} {
	if o == nil || IsNil(o.LockUnlockZone) {
		var ret map[string]interface{}
		return ret
	}
	return o.LockUnlockZone
}

// GetLockUnlockZoneOk returns a tuple with the LockUnlockZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetLockUnlockZoneOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LockUnlockZone) {
		return map[string]interface{}{}, false
	}
	return o.LockUnlockZone, true
}

// HasLockUnlockZone returns a boolean if a field has been set.
func (o *ZoneForward) HasLockUnlockZone() bool {
	if o != nil && !IsNil(o.LockUnlockZone) {
		return true
	}

	return false
}

// SetLockUnlockZone gets a reference to the given map[string]interface{} and assigns it to the LockUnlockZone field.
func (o *ZoneForward) SetLockUnlockZone(v map[string]interface{}) {
	o.LockUnlockZone = v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ZoneForward) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ZoneForward) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ZoneForward) SetLocked(v bool) {
	o.Locked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *ZoneForward) GetLockedBy() string {
	if o == nil || IsNil(o.LockedBy) {
		var ret string
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetLockedByOk() (*string, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *ZoneForward) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given string and assigns it to the LockedBy field.
func (o *ZoneForward) SetLockedBy(v string) {
	o.LockedBy = &v
}

// GetMaskPrefix returns the MaskPrefix field value if set, zero value otherwise.
func (o *ZoneForward) GetMaskPrefix() string {
	if o == nil || IsNil(o.MaskPrefix) {
		var ret string
		return ret
	}
	return *o.MaskPrefix
}

// GetMaskPrefixOk returns a tuple with the MaskPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMaskPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MaskPrefix) {
		return nil, false
	}
	return o.MaskPrefix, true
}

// HasMaskPrefix returns a boolean if a field has been set.
func (o *ZoneForward) HasMaskPrefix() bool {
	if o != nil && !IsNil(o.MaskPrefix) {
		return true
	}

	return false
}

// SetMaskPrefix gets a reference to the given string and assigns it to the MaskPrefix field.
func (o *ZoneForward) SetMaskPrefix(v string) {
	o.MaskPrefix = &v
}

// GetMsAdIntegrated returns the MsAdIntegrated field value if set, zero value otherwise.
func (o *ZoneForward) GetMsAdIntegrated() bool {
	if o == nil || IsNil(o.MsAdIntegrated) {
		var ret bool
		return ret
	}
	return *o.MsAdIntegrated
}

// GetMsAdIntegratedOk returns a tuple with the MsAdIntegrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMsAdIntegratedOk() (*bool, bool) {
	if o == nil || IsNil(o.MsAdIntegrated) {
		return nil, false
	}
	return o.MsAdIntegrated, true
}

// HasMsAdIntegrated returns a boolean if a field has been set.
func (o *ZoneForward) HasMsAdIntegrated() bool {
	if o != nil && !IsNil(o.MsAdIntegrated) {
		return true
	}

	return false
}

// SetMsAdIntegrated gets a reference to the given bool and assigns it to the MsAdIntegrated field.
func (o *ZoneForward) SetMsAdIntegrated(v bool) {
	o.MsAdIntegrated = &v
}

// GetMsDdnsMode returns the MsDdnsMode field value if set, zero value otherwise.
func (o *ZoneForward) GetMsDdnsMode() string {
	if o == nil || IsNil(o.MsDdnsMode) {
		var ret string
		return ret
	}
	return *o.MsDdnsMode
}

// GetMsDdnsModeOk returns a tuple with the MsDdnsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMsDdnsModeOk() (*string, bool) {
	if o == nil || IsNil(o.MsDdnsMode) {
		return nil, false
	}
	return o.MsDdnsMode, true
}

// HasMsDdnsMode returns a boolean if a field has been set.
func (o *ZoneForward) HasMsDdnsMode() bool {
	if o != nil && !IsNil(o.MsDdnsMode) {
		return true
	}

	return false
}

// SetMsDdnsMode gets a reference to the given string and assigns it to the MsDdnsMode field.
func (o *ZoneForward) SetMsDdnsMode(v string) {
	o.MsDdnsMode = &v
}

// GetMsManaged returns the MsManaged field value if set, zero value otherwise.
func (o *ZoneForward) GetMsManaged() string {
	if o == nil || IsNil(o.MsManaged) {
		var ret string
		return ret
	}
	return *o.MsManaged
}

// GetMsManagedOk returns a tuple with the MsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMsManagedOk() (*string, bool) {
	if o == nil || IsNil(o.MsManaged) {
		return nil, false
	}
	return o.MsManaged, true
}

// HasMsManaged returns a boolean if a field has been set.
func (o *ZoneForward) HasMsManaged() bool {
	if o != nil && !IsNil(o.MsManaged) {
		return true
	}

	return false
}

// SetMsManaged gets a reference to the given string and assigns it to the MsManaged field.
func (o *ZoneForward) SetMsManaged(v string) {
	o.MsManaged = &v
}

// GetMsReadOnly returns the MsReadOnly field value if set, zero value otherwise.
func (o *ZoneForward) GetMsReadOnly() bool {
	if o == nil || IsNil(o.MsReadOnly) {
		var ret bool
		return ret
	}
	return *o.MsReadOnly
}

// GetMsReadOnlyOk returns a tuple with the MsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MsReadOnly) {
		return nil, false
	}
	return o.MsReadOnly, true
}

// HasMsReadOnly returns a boolean if a field has been set.
func (o *ZoneForward) HasMsReadOnly() bool {
	if o != nil && !IsNil(o.MsReadOnly) {
		return true
	}

	return false
}

// SetMsReadOnly gets a reference to the given bool and assigns it to the MsReadOnly field.
func (o *ZoneForward) SetMsReadOnly(v bool) {
	o.MsReadOnly = &v
}

// GetMsSyncMasterName returns the MsSyncMasterName field value if set, zero value otherwise.
func (o *ZoneForward) GetMsSyncMasterName() string {
	if o == nil || IsNil(o.MsSyncMasterName) {
		var ret string
		return ret
	}
	return *o.MsSyncMasterName
}

// GetMsSyncMasterNameOk returns a tuple with the MsSyncMasterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetMsSyncMasterNameOk() (*string, bool) {
	if o == nil || IsNil(o.MsSyncMasterName) {
		return nil, false
	}
	return o.MsSyncMasterName, true
}

// HasMsSyncMasterName returns a boolean if a field has been set.
func (o *ZoneForward) HasMsSyncMasterName() bool {
	if o != nil && !IsNil(o.MsSyncMasterName) {
		return true
	}

	return false
}

// SetMsSyncMasterName gets a reference to the given string and assigns it to the MsSyncMasterName field.
func (o *ZoneForward) SetMsSyncMasterName(v string) {
	o.MsSyncMasterName = &v
}

// GetNsGroup returns the NsGroup field value if set, zero value otherwise.
func (o *ZoneForward) GetNsGroup() string {
	if o == nil || IsNil(o.NsGroup) {
		var ret string
		return ret
	}
	return *o.NsGroup
}

// GetNsGroupOk returns a tuple with the NsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetNsGroupOk() (*string, bool) {
	if o == nil || IsNil(o.NsGroup) {
		return nil, false
	}
	return o.NsGroup, true
}

// HasNsGroup returns a boolean if a field has been set.
func (o *ZoneForward) HasNsGroup() bool {
	if o != nil && !IsNil(o.NsGroup) {
		return true
	}

	return false
}

// SetNsGroup gets a reference to the given string and assigns it to the NsGroup field.
func (o *ZoneForward) SetNsGroup(v string) {
	o.NsGroup = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ZoneForward) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ZoneForward) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *ZoneForward) SetParent(v string) {
	o.Parent = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ZoneForward) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ZoneForward) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ZoneForward) SetPrefix(v string) {
	o.Prefix = &v
}

// GetUsingSrgAssociations returns the UsingSrgAssociations field value if set, zero value otherwise.
func (o *ZoneForward) GetUsingSrgAssociations() bool {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		var ret bool
		return ret
	}
	return *o.UsingSrgAssociations
}

// GetUsingSrgAssociationsOk returns a tuple with the UsingSrgAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetUsingSrgAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsingSrgAssociations) {
		return nil, false
	}
	return o.UsingSrgAssociations, true
}

// HasUsingSrgAssociations returns a boolean if a field has been set.
func (o *ZoneForward) HasUsingSrgAssociations() bool {
	if o != nil && !IsNil(o.UsingSrgAssociations) {
		return true
	}

	return false
}

// SetUsingSrgAssociations gets a reference to the given bool and assigns it to the UsingSrgAssociations field.
func (o *ZoneForward) SetUsingSrgAssociations(v bool) {
	o.UsingSrgAssociations = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ZoneForward) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ZoneForward) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *ZoneForward) SetView(v string) {
	o.View = &v
}

// GetZoneFormat returns the ZoneFormat field value if set, zero value otherwise.
func (o *ZoneForward) GetZoneFormat() string {
	if o == nil || IsNil(o.ZoneFormat) {
		var ret string
		return ret
	}
	return *o.ZoneFormat
}

// GetZoneFormatOk returns a tuple with the ZoneFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForward) GetZoneFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneFormat) {
		return nil, false
	}
	return o.ZoneFormat, true
}

// HasZoneFormat returns a boolean if a field has been set.
func (o *ZoneForward) HasZoneFormat() bool {
	if o != nil && !IsNil(o.ZoneFormat) {
		return true
	}

	return false
}

// SetZoneFormat gets a reference to the given string and assigns it to the ZoneFormat field.
func (o *ZoneForward) SetZoneFormat(v string) {
	o.ZoneFormat = &v
}

func (o ZoneForward) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneForward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableNsGeneration) {
		toSerialize["disable_ns_generation"] = o.DisableNsGeneration
	}
	if !IsNil(o.DisplayDomain) {
		toSerialize["display_domain"] = o.DisplayDomain
	}
	if !IsNil(o.DnsFqdn) {
		toSerialize["dns_fqdn"] = o.DnsFqdn
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.ExternalNsGroup) {
		toSerialize["external_ns_group"] = o.ExternalNsGroup
	}
	if !IsNil(o.ForwardTo) {
		toSerialize["forward_to"] = o.ForwardTo
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.ForwardingServers) {
		toSerialize["forwarding_servers"] = o.ForwardingServers
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.LockUnlockZone) {
		toSerialize["lock_unlock_zone"] = o.LockUnlockZone
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.MaskPrefix) {
		toSerialize["mask_prefix"] = o.MaskPrefix
	}
	if !IsNil(o.MsAdIntegrated) {
		toSerialize["ms_ad_integrated"] = o.MsAdIntegrated
	}
	if !IsNil(o.MsDdnsMode) {
		toSerialize["ms_ddns_mode"] = o.MsDdnsMode
	}
	if !IsNil(o.MsManaged) {
		toSerialize["ms_managed"] = o.MsManaged
	}
	if !IsNil(o.MsReadOnly) {
		toSerialize["ms_read_only"] = o.MsReadOnly
	}
	if !IsNil(o.MsSyncMasterName) {
		toSerialize["ms_sync_master_name"] = o.MsSyncMasterName
	}
	if !IsNil(o.NsGroup) {
		toSerialize["ns_group"] = o.NsGroup
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.UsingSrgAssociations) {
		toSerialize["using_srg_associations"] = o.UsingSrgAssociations
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.ZoneFormat) {
		toSerialize["zone_format"] = o.ZoneFormat
	}
	return toSerialize, nil
}

type NullableZoneForward struct {
	value *ZoneForward
	isSet bool
}

func (v NullableZoneForward) Get() *ZoneForward {
	return v.value
}

func (v *NullableZoneForward) Set(val *ZoneForward) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneForward) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneForward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneForward(val *ZoneForward) *NullableZoneForward {
	return &NullableZoneForward{value: val, isSet: true}
}

func (v NullableZoneForward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneForward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
