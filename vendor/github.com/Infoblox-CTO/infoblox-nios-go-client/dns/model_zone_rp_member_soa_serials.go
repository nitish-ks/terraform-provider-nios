/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneRpMemberSoaSerials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneRpMemberSoaSerials{}

// ZoneRpMemberSoaSerials struct for ZoneRpMemberSoaSerials
type ZoneRpMemberSoaSerials struct {
	// The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.
	GridPrimary *string `json:"grid_primary,omitempty"`
	// The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.
	MsServerPrimary *string `json:"ms_server_primary,omitempty"`
	// The SOA serial number.
	Serial               *int64 `json:"serial,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZoneRpMemberSoaSerials ZoneRpMemberSoaSerials

// NewZoneRpMemberSoaSerials instantiates a new ZoneRpMemberSoaSerials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneRpMemberSoaSerials() *ZoneRpMemberSoaSerials {
	this := ZoneRpMemberSoaSerials{}
	return &this
}

// NewZoneRpMemberSoaSerialsWithDefaults instantiates a new ZoneRpMemberSoaSerials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneRpMemberSoaSerialsWithDefaults() *ZoneRpMemberSoaSerials {
	this := ZoneRpMemberSoaSerials{}
	return &this
}

// GetGridPrimary returns the GridPrimary field value if set, zero value otherwise.
func (o *ZoneRpMemberSoaSerials) GetGridPrimary() string {
	if o == nil || IsNil(o.GridPrimary) {
		var ret string
		return ret
	}
	return *o.GridPrimary
}

// GetGridPrimaryOk returns a tuple with the GridPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpMemberSoaSerials) GetGridPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.GridPrimary) {
		return nil, false
	}
	return o.GridPrimary, true
}

// HasGridPrimary returns a boolean if a field has been set.
func (o *ZoneRpMemberSoaSerials) HasGridPrimary() bool {
	if o != nil && !IsNil(o.GridPrimary) {
		return true
	}

	return false
}

// SetGridPrimary gets a reference to the given string and assigns it to the GridPrimary field.
func (o *ZoneRpMemberSoaSerials) SetGridPrimary(v string) {
	o.GridPrimary = &v
}

// GetMsServerPrimary returns the MsServerPrimary field value if set, zero value otherwise.
func (o *ZoneRpMemberSoaSerials) GetMsServerPrimary() string {
	if o == nil || IsNil(o.MsServerPrimary) {
		var ret string
		return ret
	}
	return *o.MsServerPrimary
}

// GetMsServerPrimaryOk returns a tuple with the MsServerPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpMemberSoaSerials) GetMsServerPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.MsServerPrimary) {
		return nil, false
	}
	return o.MsServerPrimary, true
}

// HasMsServerPrimary returns a boolean if a field has been set.
func (o *ZoneRpMemberSoaSerials) HasMsServerPrimary() bool {
	if o != nil && !IsNil(o.MsServerPrimary) {
		return true
	}

	return false
}

// SetMsServerPrimary gets a reference to the given string and assigns it to the MsServerPrimary field.
func (o *ZoneRpMemberSoaSerials) SetMsServerPrimary(v string) {
	o.MsServerPrimary = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *ZoneRpMemberSoaSerials) GetSerial() int64 {
	if o == nil || IsNil(o.Serial) {
		var ret int64
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpMemberSoaSerials) GetSerialOk() (*int64, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *ZoneRpMemberSoaSerials) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given int64 and assigns it to the Serial field.
func (o *ZoneRpMemberSoaSerials) SetSerial(v int64) {
	o.Serial = &v
}

func (o ZoneRpMemberSoaSerials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneRpMemberSoaSerials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GridPrimary) {
		toSerialize["grid_primary"] = o.GridPrimary
	}
	if !IsNil(o.MsServerPrimary) {
		toSerialize["ms_server_primary"] = o.MsServerPrimary
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneRpMemberSoaSerials) UnmarshalJSON(data []byte) (err error) {
	varZoneRpMemberSoaSerials := _ZoneRpMemberSoaSerials{}

	err = json.Unmarshal(data, &varZoneRpMemberSoaSerials)

	if err != nil {
		return err
	}

	*o = ZoneRpMemberSoaSerials(varZoneRpMemberSoaSerials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "grid_primary")
		delete(additionalProperties, "ms_server_primary")
		delete(additionalProperties, "serial")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneRpMemberSoaSerials struct {
	value *ZoneRpMemberSoaSerials
	isSet bool
}

func (v NullableZoneRpMemberSoaSerials) Get() *ZoneRpMemberSoaSerials {
	return v.value
}

func (v *NullableZoneRpMemberSoaSerials) Set(val *ZoneRpMemberSoaSerials) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRpMemberSoaSerials) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRpMemberSoaSerials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRpMemberSoaSerials(val *ZoneRpMemberSoaSerials) *NullableZoneRpMemberSoaSerials {
	return &NullableZoneRpMemberSoaSerials{value: val, isSet: true}
}

func (v NullableZoneRpMemberSoaSerials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRpMemberSoaSerials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
