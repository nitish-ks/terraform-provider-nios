/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneStubStubMembers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneStubStubMembers{}

// ZoneStubStubMembers struct for ZoneStubStubMembers
type ZoneStubStubMembers struct {
	// The grid member name.
	Name *string `json:"name,omitempty"`
	// This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.
	Stealth *bool `json:"stealth,omitempty"`
	// The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.
	GridReplicate *bool `json:"grid_replicate,omitempty"`
	// This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.
	Lead               *bool                                  `json:"lead,omitempty"`
	PreferredPrimaries *ZonestubstubmembersPreferredPrimaries `json:"preferred_primaries,omitempty"`
	// This flag represents whether the preferred_primaries field values of this member are used.
	EnablePreferredPrimaries *bool `json:"enable_preferred_primaries,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _ZoneStubStubMembers ZoneStubStubMembers

// NewZoneStubStubMembers instantiates a new ZoneStubStubMembers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneStubStubMembers() *ZoneStubStubMembers {
	this := ZoneStubStubMembers{}
	return &this
}

// NewZoneStubStubMembersWithDefaults instantiates a new ZoneStubStubMembers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneStubStubMembersWithDefaults() *ZoneStubStubMembers {
	this := ZoneStubStubMembers{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ZoneStubStubMembers) SetName(v string) {
	o.Name = &v
}

// GetStealth returns the Stealth field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetStealth() bool {
	if o == nil || IsNil(o.Stealth) {
		var ret bool
		return ret
	}
	return *o.Stealth
}

// GetStealthOk returns a tuple with the Stealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetStealthOk() (*bool, bool) {
	if o == nil || IsNil(o.Stealth) {
		return nil, false
	}
	return o.Stealth, true
}

// HasStealth returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasStealth() bool {
	if o != nil && !IsNil(o.Stealth) {
		return true
	}

	return false
}

// SetStealth gets a reference to the given bool and assigns it to the Stealth field.
func (o *ZoneStubStubMembers) SetStealth(v bool) {
	o.Stealth = &v
}

// GetGridReplicate returns the GridReplicate field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetGridReplicate() bool {
	if o == nil || IsNil(o.GridReplicate) {
		var ret bool
		return ret
	}
	return *o.GridReplicate
}

// GetGridReplicateOk returns a tuple with the GridReplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetGridReplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.GridReplicate) {
		return nil, false
	}
	return o.GridReplicate, true
}

// HasGridReplicate returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasGridReplicate() bool {
	if o != nil && !IsNil(o.GridReplicate) {
		return true
	}

	return false
}

// SetGridReplicate gets a reference to the given bool and assigns it to the GridReplicate field.
func (o *ZoneStubStubMembers) SetGridReplicate(v bool) {
	o.GridReplicate = &v
}

// GetLead returns the Lead field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetLead() bool {
	if o == nil || IsNil(o.Lead) {
		var ret bool
		return ret
	}
	return *o.Lead
}

// GetLeadOk returns a tuple with the Lead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetLeadOk() (*bool, bool) {
	if o == nil || IsNil(o.Lead) {
		return nil, false
	}
	return o.Lead, true
}

// HasLead returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasLead() bool {
	if o != nil && !IsNil(o.Lead) {
		return true
	}

	return false
}

// SetLead gets a reference to the given bool and assigns it to the Lead field.
func (o *ZoneStubStubMembers) SetLead(v bool) {
	o.Lead = &v
}

// GetPreferredPrimaries returns the PreferredPrimaries field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetPreferredPrimaries() ZonestubstubmembersPreferredPrimaries {
	if o == nil || IsNil(o.PreferredPrimaries) {
		var ret ZonestubstubmembersPreferredPrimaries
		return ret
	}
	return *o.PreferredPrimaries
}

// GetPreferredPrimariesOk returns a tuple with the PreferredPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetPreferredPrimariesOk() (*ZonestubstubmembersPreferredPrimaries, bool) {
	if o == nil || IsNil(o.PreferredPrimaries) {
		return nil, false
	}
	return o.PreferredPrimaries, true
}

// HasPreferredPrimaries returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasPreferredPrimaries() bool {
	if o != nil && !IsNil(o.PreferredPrimaries) {
		return true
	}

	return false
}

// SetPreferredPrimaries gets a reference to the given ZonestubstubmembersPreferredPrimaries and assigns it to the PreferredPrimaries field.
func (o *ZoneStubStubMembers) SetPreferredPrimaries(v ZonestubstubmembersPreferredPrimaries) {
	o.PreferredPrimaries = &v
}

// GetEnablePreferredPrimaries returns the EnablePreferredPrimaries field value if set, zero value otherwise.
func (o *ZoneStubStubMembers) GetEnablePreferredPrimaries() bool {
	if o == nil || IsNil(o.EnablePreferredPrimaries) {
		var ret bool
		return ret
	}
	return *o.EnablePreferredPrimaries
}

// GetEnablePreferredPrimariesOk returns a tuple with the EnablePreferredPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMembers) GetEnablePreferredPrimariesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePreferredPrimaries) {
		return nil, false
	}
	return o.EnablePreferredPrimaries, true
}

// HasEnablePreferredPrimaries returns a boolean if a field has been set.
func (o *ZoneStubStubMembers) HasEnablePreferredPrimaries() bool {
	if o != nil && !IsNil(o.EnablePreferredPrimaries) {
		return true
	}

	return false
}

// SetEnablePreferredPrimaries gets a reference to the given bool and assigns it to the EnablePreferredPrimaries field.
func (o *ZoneStubStubMembers) SetEnablePreferredPrimaries(v bool) {
	o.EnablePreferredPrimaries = &v
}

func (o ZoneStubStubMembers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneStubStubMembers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Stealth) {
		toSerialize["stealth"] = o.Stealth
	}
	if !IsNil(o.GridReplicate) {
		toSerialize["grid_replicate"] = o.GridReplicate
	}
	if !IsNil(o.Lead) {
		toSerialize["lead"] = o.Lead
	}
	if !IsNil(o.PreferredPrimaries) {
		toSerialize["preferred_primaries"] = o.PreferredPrimaries
	}
	if !IsNil(o.EnablePreferredPrimaries) {
		toSerialize["enable_preferred_primaries"] = o.EnablePreferredPrimaries
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneStubStubMembers) UnmarshalJSON(data []byte) (err error) {
	varZoneStubStubMembers := _ZoneStubStubMembers{}

	err = json.Unmarshal(data, &varZoneStubStubMembers)

	if err != nil {
		return err
	}

	*o = ZoneStubStubMembers(varZoneStubStubMembers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "stealth")
		delete(additionalProperties, "grid_replicate")
		delete(additionalProperties, "lead")
		delete(additionalProperties, "preferred_primaries")
		delete(additionalProperties, "enable_preferred_primaries")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneStubStubMembers struct {
	value *ZoneStubStubMembers
	isSet bool
}

func (v NullableZoneStubStubMembers) Get() *ZoneStubStubMembers {
	return v.value
}

func (v *NullableZoneStubStubMembers) Set(val *ZoneStubStubMembers) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneStubStubMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneStubStubMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneStubStubMembers(val *ZoneStubStubMembers) *NullableZoneStubStubMembers {
	return &NullableZoneStubStubMembers{value: val, isSet: true}
}

func (v NullableZoneStubStubMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneStubStubMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
