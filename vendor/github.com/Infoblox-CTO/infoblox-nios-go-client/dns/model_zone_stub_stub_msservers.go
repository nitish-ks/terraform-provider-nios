/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneStubStubMsservers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneStubStubMsservers{}

// ZoneStubStubMsservers struct for ZoneStubStubMsservers
type ZoneStubStubMsservers struct {
	// The address of the server.
	Address *string `json:"address,omitempty"`
	// This flag indicates if this server is a synchronization master.
	IsMaster *bool `json:"is_master,omitempty"`
	// This address is used when generating the NS record in the zone, which can be different in case of multihomed hosts.
	NsIp *string `json:"ns_ip,omitempty"`
	// This name is used when generating the NS record in the zone, which can be different in case of multihomed hosts.
	NsName *string `json:"ns_name,omitempty"`
	// Set this flag to hide the NS record for the primary name server from DNS queries.
	Stealth *bool `json:"stealth,omitempty"`
	// This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.
	SharedWithMsParentDelegation *bool `json:"shared_with_ms_parent_delegation,omitempty"`
	AdditionalProperties         map[string]interface{}
}

type _ZoneStubStubMsservers ZoneStubStubMsservers

// NewZoneStubStubMsservers instantiates a new ZoneStubStubMsservers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneStubStubMsservers() *ZoneStubStubMsservers {
	this := ZoneStubStubMsservers{}
	return &this
}

// NewZoneStubStubMsserversWithDefaults instantiates a new ZoneStubStubMsservers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneStubStubMsserversWithDefaults() *ZoneStubStubMsservers {
	this := ZoneStubStubMsservers{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ZoneStubStubMsservers) SetAddress(v string) {
	o.Address = &v
}

// GetIsMaster returns the IsMaster field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetIsMaster() bool {
	if o == nil || IsNil(o.IsMaster) {
		var ret bool
		return ret
	}
	return *o.IsMaster
}

// GetIsMasterOk returns a tuple with the IsMaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetIsMasterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMaster) {
		return nil, false
	}
	return o.IsMaster, true
}

// HasIsMaster returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasIsMaster() bool {
	if o != nil && !IsNil(o.IsMaster) {
		return true
	}

	return false
}

// SetIsMaster gets a reference to the given bool and assigns it to the IsMaster field.
func (o *ZoneStubStubMsservers) SetIsMaster(v bool) {
	o.IsMaster = &v
}

// GetNsIp returns the NsIp field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetNsIp() string {
	if o == nil || IsNil(o.NsIp) {
		var ret string
		return ret
	}
	return *o.NsIp
}

// GetNsIpOk returns a tuple with the NsIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetNsIpOk() (*string, bool) {
	if o == nil || IsNil(o.NsIp) {
		return nil, false
	}
	return o.NsIp, true
}

// HasNsIp returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasNsIp() bool {
	if o != nil && !IsNil(o.NsIp) {
		return true
	}

	return false
}

// SetNsIp gets a reference to the given string and assigns it to the NsIp field.
func (o *ZoneStubStubMsservers) SetNsIp(v string) {
	o.NsIp = &v
}

// GetNsName returns the NsName field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetNsName() string {
	if o == nil || IsNil(o.NsName) {
		var ret string
		return ret
	}
	return *o.NsName
}

// GetNsNameOk returns a tuple with the NsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetNsNameOk() (*string, bool) {
	if o == nil || IsNil(o.NsName) {
		return nil, false
	}
	return o.NsName, true
}

// HasNsName returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasNsName() bool {
	if o != nil && !IsNil(o.NsName) {
		return true
	}

	return false
}

// SetNsName gets a reference to the given string and assigns it to the NsName field.
func (o *ZoneStubStubMsservers) SetNsName(v string) {
	o.NsName = &v
}

// GetStealth returns the Stealth field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetStealth() bool {
	if o == nil || IsNil(o.Stealth) {
		var ret bool
		return ret
	}
	return *o.Stealth
}

// GetStealthOk returns a tuple with the Stealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetStealthOk() (*bool, bool) {
	if o == nil || IsNil(o.Stealth) {
		return nil, false
	}
	return o.Stealth, true
}

// HasStealth returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasStealth() bool {
	if o != nil && !IsNil(o.Stealth) {
		return true
	}

	return false
}

// SetStealth gets a reference to the given bool and assigns it to the Stealth field.
func (o *ZoneStubStubMsservers) SetStealth(v bool) {
	o.Stealth = &v
}

// GetSharedWithMsParentDelegation returns the SharedWithMsParentDelegation field value if set, zero value otherwise.
func (o *ZoneStubStubMsservers) GetSharedWithMsParentDelegation() bool {
	if o == nil || IsNil(o.SharedWithMsParentDelegation) {
		var ret bool
		return ret
	}
	return *o.SharedWithMsParentDelegation
}

// GetSharedWithMsParentDelegationOk returns a tuple with the SharedWithMsParentDelegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneStubStubMsservers) GetSharedWithMsParentDelegationOk() (*bool, bool) {
	if o == nil || IsNil(o.SharedWithMsParentDelegation) {
		return nil, false
	}
	return o.SharedWithMsParentDelegation, true
}

// HasSharedWithMsParentDelegation returns a boolean if a field has been set.
func (o *ZoneStubStubMsservers) HasSharedWithMsParentDelegation() bool {
	if o != nil && !IsNil(o.SharedWithMsParentDelegation) {
		return true
	}

	return false
}

// SetSharedWithMsParentDelegation gets a reference to the given bool and assigns it to the SharedWithMsParentDelegation field.
func (o *ZoneStubStubMsservers) SetSharedWithMsParentDelegation(v bool) {
	o.SharedWithMsParentDelegation = &v
}

func (o ZoneStubStubMsservers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneStubStubMsservers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.IsMaster) {
		toSerialize["is_master"] = o.IsMaster
	}
	if !IsNil(o.NsIp) {
		toSerialize["ns_ip"] = o.NsIp
	}
	if !IsNil(o.NsName) {
		toSerialize["ns_name"] = o.NsName
	}
	if !IsNil(o.Stealth) {
		toSerialize["stealth"] = o.Stealth
	}
	if !IsNil(o.SharedWithMsParentDelegation) {
		toSerialize["shared_with_ms_parent_delegation"] = o.SharedWithMsParentDelegation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneStubStubMsservers) UnmarshalJSON(data []byte) (err error) {
	varZoneStubStubMsservers := _ZoneStubStubMsservers{}

	err = json.Unmarshal(data, &varZoneStubStubMsservers)

	if err != nil {
		return err
	}

	*o = ZoneStubStubMsservers(varZoneStubStubMsservers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "is_master")
		delete(additionalProperties, "ns_ip")
		delete(additionalProperties, "ns_name")
		delete(additionalProperties, "stealth")
		delete(additionalProperties, "shared_with_ms_parent_delegation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneStubStubMsservers struct {
	value *ZoneStubStubMsservers
	isSet bool
}

func (v NullableZoneStubStubMsservers) Get() *ZoneStubStubMsservers {
	return v.value
}

func (v *NullableZoneStubStubMsservers) Set(val *ZoneStubStubMsservers) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneStubStubMsservers) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneStubStubMsservers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneStubStubMsservers(val *ZoneStubStubMsservers) *NullableZoneStubStubMsservers {
	return &NullableZoneStubStubMsservers{value: val, isSet: true}
}

func (v NullableZoneStubStubMsservers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneStubStubMsservers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
