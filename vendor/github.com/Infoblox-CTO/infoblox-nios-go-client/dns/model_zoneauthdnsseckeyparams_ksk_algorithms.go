/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneauthdnsseckeyparamsKskAlgorithms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneauthdnsseckeyparamsKskAlgorithms{}

// ZoneauthdnsseckeyparamsKskAlgorithms struct for ZoneauthdnsseckeyparamsKskAlgorithms
type ZoneauthdnsseckeyparamsKskAlgorithms struct {
	// The signing key algorithm.
	Algorithm *string `json:"algorithm,omitempty"`
	// The signing key size, in bits.
	Size                 *int64 `json:"size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZoneauthdnsseckeyparamsKskAlgorithms ZoneauthdnsseckeyparamsKskAlgorithms

// NewZoneauthdnsseckeyparamsKskAlgorithms instantiates a new ZoneauthdnsseckeyparamsKskAlgorithms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneauthdnsseckeyparamsKskAlgorithms() *ZoneauthdnsseckeyparamsKskAlgorithms {
	this := ZoneauthdnsseckeyparamsKskAlgorithms{}
	return &this
}

// NewZoneauthdnsseckeyparamsKskAlgorithmsWithDefaults instantiates a new ZoneauthdnsseckeyparamsKskAlgorithms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneauthdnsseckeyparamsKskAlgorithmsWithDefaults() *ZoneauthdnsseckeyparamsKskAlgorithms {
	this := ZoneauthdnsseckeyparamsKskAlgorithms{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ZoneauthdnsseckeyparamsKskAlgorithms) SetSize(v int64) {
	o.Size = &v
}

func (o ZoneauthdnsseckeyparamsKskAlgorithms) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneauthdnsseckeyparamsKskAlgorithms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneauthdnsseckeyparamsKskAlgorithms) UnmarshalJSON(data []byte) (err error) {
	varZoneauthdnsseckeyparamsKskAlgorithms := _ZoneauthdnsseckeyparamsKskAlgorithms{}

	err = json.Unmarshal(data, &varZoneauthdnsseckeyparamsKskAlgorithms)

	if err != nil {
		return err
	}

	*o = ZoneauthdnsseckeyparamsKskAlgorithms(varZoneauthdnsseckeyparamsKskAlgorithms)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "algorithm")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneauthdnsseckeyparamsKskAlgorithms struct {
	value *ZoneauthdnsseckeyparamsKskAlgorithms
	isSet bool
}

func (v NullableZoneauthdnsseckeyparamsKskAlgorithms) Get() *ZoneauthdnsseckeyparamsKskAlgorithms {
	return v.value
}

func (v *NullableZoneauthdnsseckeyparamsKskAlgorithms) Set(val *ZoneauthdnsseckeyparamsKskAlgorithms) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneauthdnsseckeyparamsKskAlgorithms) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneauthdnsseckeyparamsKskAlgorithms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneauthdnsseckeyparamsKskAlgorithms(val *ZoneauthdnsseckeyparamsKskAlgorithms) *NullableZoneauthdnsseckeyparamsKskAlgorithms {
	return &NullableZoneauthdnsseckeyparamsKskAlgorithms{value: val, isSet: true}
}

func (v NullableZoneauthdnsseckeyparamsKskAlgorithms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneauthdnsseckeyparamsKskAlgorithms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
