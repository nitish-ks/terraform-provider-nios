/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZonerpfireeyerulemappingFireeyeAlertMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZonerpfireeyerulemappingFireeyeAlertMapping{}

// ZonerpfireeyerulemappingFireeyeAlertMapping struct for ZonerpfireeyerulemappingFireeyeAlertMapping
type ZonerpfireeyerulemappingFireeyeAlertMapping struct {
	// The type of Fireeye Alert.
	AlertType *string `json:"alert_type,omitempty"`
	// The RPZ rule for the alert.
	RpzRule *string `json:"rpz_rule,omitempty"`
	// The expiration Lifetime of alert type. The 32-bit unsigned integer represents the amount of seconds this alert type will live for. 0 means the alert will never expire.
	Lifetime             *int64 `json:"lifetime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZonerpfireeyerulemappingFireeyeAlertMapping ZonerpfireeyerulemappingFireeyeAlertMapping

// NewZonerpfireeyerulemappingFireeyeAlertMapping instantiates a new ZonerpfireeyerulemappingFireeyeAlertMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZonerpfireeyerulemappingFireeyeAlertMapping() *ZonerpfireeyerulemappingFireeyeAlertMapping {
	this := ZonerpfireeyerulemappingFireeyeAlertMapping{}
	return &this
}

// NewZonerpfireeyerulemappingFireeyeAlertMappingWithDefaults instantiates a new ZonerpfireeyerulemappingFireeyeAlertMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZonerpfireeyerulemappingFireeyeAlertMappingWithDefaults() *ZonerpfireeyerulemappingFireeyeAlertMapping {
	this := ZonerpfireeyerulemappingFireeyeAlertMapping{}
	return &this
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetAlertType() string {
	if o == nil || IsNil(o.AlertType) {
		var ret string
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetAlertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given string and assigns it to the AlertType field.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) SetAlertType(v string) {
	o.AlertType = &v
}

// GetRpzRule returns the RpzRule field value if set, zero value otherwise.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetRpzRule() string {
	if o == nil || IsNil(o.RpzRule) {
		var ret string
		return ret
	}
	return *o.RpzRule
}

// GetRpzRuleOk returns a tuple with the RpzRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetRpzRuleOk() (*string, bool) {
	if o == nil || IsNil(o.RpzRule) {
		return nil, false
	}
	return o.RpzRule, true
}

// HasRpzRule returns a boolean if a field has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) HasRpzRule() bool {
	if o != nil && !IsNil(o.RpzRule) {
		return true
	}

	return false
}

// SetRpzRule gets a reference to the given string and assigns it to the RpzRule field.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) SetRpzRule(v string) {
	o.RpzRule = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetLifetime() int64 {
	if o == nil || IsNil(o.Lifetime) {
		var ret int64
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) GetLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) HasLifetime() bool {
	if o != nil && !IsNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given int64 and assigns it to the Lifetime field.
func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) SetLifetime(v int64) {
	o.Lifetime = &v
}

func (o ZonerpfireeyerulemappingFireeyeAlertMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZonerpfireeyerulemappingFireeyeAlertMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertType) {
		toSerialize["alert_type"] = o.AlertType
	}
	if !IsNil(o.RpzRule) {
		toSerialize["rpz_rule"] = o.RpzRule
	}
	if !IsNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZonerpfireeyerulemappingFireeyeAlertMapping) UnmarshalJSON(data []byte) (err error) {
	varZonerpfireeyerulemappingFireeyeAlertMapping := _ZonerpfireeyerulemappingFireeyeAlertMapping{}

	err = json.Unmarshal(data, &varZonerpfireeyerulemappingFireeyeAlertMapping)

	if err != nil {
		return err
	}

	*o = ZonerpfireeyerulemappingFireeyeAlertMapping(varZonerpfireeyerulemappingFireeyeAlertMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alert_type")
		delete(additionalProperties, "rpz_rule")
		delete(additionalProperties, "lifetime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZonerpfireeyerulemappingFireeyeAlertMapping struct {
	value *ZonerpfireeyerulemappingFireeyeAlertMapping
	isSet bool
}

func (v NullableZonerpfireeyerulemappingFireeyeAlertMapping) Get() *ZonerpfireeyerulemappingFireeyeAlertMapping {
	return v.value
}

func (v *NullableZonerpfireeyerulemappingFireeyeAlertMapping) Set(val *ZonerpfireeyerulemappingFireeyeAlertMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableZonerpfireeyerulemappingFireeyeAlertMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableZonerpfireeyerulemappingFireeyeAlertMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZonerpfireeyerulemappingFireeyeAlertMapping(val *ZonerpfireeyerulemappingFireeyeAlertMapping) *NullableZonerpfireeyerulemappingFireeyeAlertMapping {
	return &NullableZonerpfireeyerulemappingFireeyeAlertMapping{value: val, isSet: true}
}

func (v NullableZonerpfireeyerulemappingFireeyeAlertMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZonerpfireeyerulemappingFireeyeAlertMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
