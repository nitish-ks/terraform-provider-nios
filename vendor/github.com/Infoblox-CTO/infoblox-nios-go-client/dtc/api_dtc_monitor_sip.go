/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcMonitorSipAPI interface {
	/*
		Create Create a dtc:monitor:sip object

		Creates a new dtc:monitor:sip object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorSipAPICreateRequest
	*/
	Create(ctx context.Context) DtcMonitorSipAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateDtcMonitorSipResponse
	CreateExecute(r DtcMonitorSipAPICreateRequest) (*CreateDtcMonitorSipResponse, *http.Response, error)
	/*
		Delete Delete a dtc:monitor:sip object

		Deletes a specific dtc:monitor:sip object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:sip object
		@return DtcMonitorSipAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) DtcMonitorSipAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r DtcMonitorSipAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve dtc:monitor:sip objects

		Returns a list of dtc:monitor:sip objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcMonitorSipAPIListRequest
	*/
	List(ctx context.Context) DtcMonitorSipAPIListRequest

	// ListExecute executes the request
	//  @return ListDtcMonitorSipResponse
	ListExecute(r DtcMonitorSipAPIListRequest) (*ListDtcMonitorSipResponse, *http.Response, error)
	/*
		Read Get a specific dtc:monitor:sip object

		Returns a specific dtc:monitor:sip object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:sip object
		@return DtcMonitorSipAPIReadRequest
	*/
	Read(ctx context.Context, reference string) DtcMonitorSipAPIReadRequest

	// ReadExecute executes the request
	//  @return GetDtcMonitorSipResponse
	ReadExecute(r DtcMonitorSipAPIReadRequest) (*GetDtcMonitorSipResponse, *http.Response, error)
	/*
		Update Update a dtc:monitor:sip object

		Updates a specific dtc:monitor:sip object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:sip object
		@return DtcMonitorSipAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) DtcMonitorSipAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateDtcMonitorSipResponse
	UpdateExecute(r DtcMonitorSipAPIUpdateRequest) (*UpdateDtcMonitorSipResponse, *http.Response, error)
}

// DtcMonitorSipAPIService DtcMonitorSipAPI service
type DtcMonitorSipAPIService internal.Service

type DtcMonitorSipAPICreateRequest struct {
	ctx              context.Context
	ApiService       DtcMonitorSipAPI
	dtcMonitorSip    *DtcMonitorSip
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r DtcMonitorSipAPICreateRequest) DtcMonitorSip(dtcMonitorSip DtcMonitorSip) DtcMonitorSipAPICreateRequest {
	r.dtcMonitorSip = &dtcMonitorSip
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorSipAPICreateRequest) ReturnFields(returnFields string) DtcMonitorSipAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSipAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) DtcMonitorSipAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSipAPICreateRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSipAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSipAPICreateRequest) Execute() (*CreateDtcMonitorSipResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a dtc:monitor:sip object

Creates a new dtc:monitor:sip object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorSipAPICreateRequest
*/
func (a *DtcMonitorSipAPIService) Create(ctx context.Context) DtcMonitorSipAPICreateRequest {
	return DtcMonitorSipAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcMonitorSipResponse
func (a *DtcMonitorSipAPIService) CreateExecute(r DtcMonitorSipAPICreateRequest) (*CreateDtcMonitorSipResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcMonitorSipResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSipAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:sip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorSip == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorSip is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorSip != nil {
		if r.dtcMonitorSip.ExtAttrs == nil {
			r.dtcMonitorSip.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorSip.ExtAttrs)[k]; !ok {
				(*r.dtcMonitorSip.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorSip
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSipAPIDeleteRequest struct {
	ctx        context.Context
	ApiService DtcMonitorSipAPI
	reference  string
}

func (r DtcMonitorSipAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a dtc:monitor:sip object

Deletes a specific dtc:monitor:sip object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:sip object
	@return DtcMonitorSipAPIDeleteRequest
*/
func (a *DtcMonitorSipAPIService) Delete(ctx context.Context, reference string) DtcMonitorSipAPIDeleteRequest {
	return DtcMonitorSipAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcMonitorSipAPIService) DeleteExecute(r DtcMonitorSipAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSipAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:sip/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcMonitorSipAPIListRequest struct {
	ctx              context.Context
	ApiService       DtcMonitorSipAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcMonitorSipAPIListRequest) ReturnFields(returnFields string) DtcMonitorSipAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSipAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) DtcMonitorSipAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r DtcMonitorSipAPIListRequest) MaxResults(maxResults int32) DtcMonitorSipAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSipAPIListRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSipAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcMonitorSipAPIListRequest) Paging(paging int32) DtcMonitorSipAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcMonitorSipAPIListRequest) PageId(pageId string) DtcMonitorSipAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r DtcMonitorSipAPIListRequest) Filters(filters map[string]interface{}) DtcMonitorSipAPIListRequest {
	r.filters = &filters
	return r
}

func (r DtcMonitorSipAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcMonitorSipAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcMonitorSipAPIListRequest) Execute() (*ListDtcMonitorSipResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve dtc:monitor:sip objects

Returns a list of dtc:monitor:sip objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcMonitorSipAPIListRequest
*/
func (a *DtcMonitorSipAPIService) List(ctx context.Context) DtcMonitorSipAPIListRequest {
	return DtcMonitorSipAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcMonitorSipResponse
func (a *DtcMonitorSipAPIService) ListExecute(r DtcMonitorSipAPIListRequest) (*ListDtcMonitorSipResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcMonitorSipResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSipAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:sip"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSipAPIReadRequest struct {
	ctx              context.Context
	ApiService       DtcMonitorSipAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r DtcMonitorSipAPIReadRequest) ReturnFields(returnFields string) DtcMonitorSipAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSipAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) DtcMonitorSipAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSipAPIReadRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSipAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSipAPIReadRequest) Execute() (*GetDtcMonitorSipResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific dtc:monitor:sip object

Returns a specific dtc:monitor:sip object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:sip object
	@return DtcMonitorSipAPIReadRequest
*/
func (a *DtcMonitorSipAPIService) Read(ctx context.Context, reference string) DtcMonitorSipAPIReadRequest {
	return DtcMonitorSipAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcMonitorSipResponse
func (a *DtcMonitorSipAPIService) ReadExecute(r DtcMonitorSipAPIReadRequest) (*GetDtcMonitorSipResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcMonitorSipResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSipAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:sip/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcMonitorSipAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       DtcMonitorSipAPI
	reference        string
	dtcMonitorSip    *DtcMonitorSip
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r DtcMonitorSipAPIUpdateRequest) DtcMonitorSip(dtcMonitorSip DtcMonitorSip) DtcMonitorSipAPIUpdateRequest {
	r.dtcMonitorSip = &dtcMonitorSip
	return r
}

// Enter the field names followed by comma
func (r DtcMonitorSipAPIUpdateRequest) ReturnFields(returnFields string) DtcMonitorSipAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcMonitorSipAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) DtcMonitorSipAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r DtcMonitorSipAPIUpdateRequest) ReturnAsObject(returnAsObject int32) DtcMonitorSipAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcMonitorSipAPIUpdateRequest) Execute() (*UpdateDtcMonitorSipResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a dtc:monitor:sip object

Updates a specific dtc:monitor:sip object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:sip object
	@return DtcMonitorSipAPIUpdateRequest
*/
func (a *DtcMonitorSipAPIService) Update(ctx context.Context, reference string) DtcMonitorSipAPIUpdateRequest {
	return DtcMonitorSipAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcMonitorSipResponse
func (a *DtcMonitorSipAPIService) UpdateExecute(r DtcMonitorSipAPIUpdateRequest) (*UpdateDtcMonitorSipResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcMonitorSipResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcMonitorSipAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:sip/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorSip == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorSip is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorSip != nil {
		if r.dtcMonitorSip.ExtAttrs == nil {
			r.dtcMonitorSip.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorSip.ExtAttrs)[k]; !ok {
				(*r.dtcMonitorSip.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorSip
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
