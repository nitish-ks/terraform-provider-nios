/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcmonitortcpAPI interface {
	/*
		Get Retrieve dtc:monitor:tcp objects

		Returns a list of dtc:monitor:tcp objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcmonitortcpAPIGetRequest
	*/
	Get(ctx context.Context) DtcmonitortcpAPIGetRequest

	// GetExecute executes the request
	//  @return ListDtcMonitorTcpResponse
	GetExecute(r DtcmonitortcpAPIGetRequest) (*ListDtcMonitorTcpResponse, *http.Response, error)
	/*
		Post Create a dtc:monitor:tcp object

		Creates a new dtc:monitor:tcp object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcmonitortcpAPIPostRequest
	*/
	Post(ctx context.Context) DtcmonitortcpAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDtcMonitorTcpResponse
	PostExecute(r DtcmonitortcpAPIPostRequest) (*CreateDtcMonitorTcpResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a dtc:monitor:tcp object

		Deletes a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcmonitortcpAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DtcmonitortcpAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DtcmonitortcpAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific dtc:monitor:tcp object

		Returns a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcmonitortcpAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DtcmonitortcpAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDtcMonitorTcpResponse
	ReferenceGetExecute(r DtcmonitortcpAPIReferenceGetRequest) (*GetDtcMonitorTcpResponse, *http.Response, error)
	/*
		ReferencePut Update a dtc:monitor:tcp object

		Updates a specific dtc:monitor:tcp object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:monitor:tcp object
		@return DtcmonitortcpAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DtcmonitortcpAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDtcMonitorTcpResponse
	ReferencePutExecute(r DtcmonitortcpAPIReferencePutRequest) (*UpdateDtcMonitorTcpResponse, *http.Response, error)
}

// DtcmonitortcpAPIService DtcmonitortcpAPI service
type DtcmonitortcpAPIService internal.Service

type DtcmonitortcpAPIGetRequest struct {
	ctx            context.Context
	ApiService     DtcmonitortcpAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcmonitortcpAPIGetRequest) ReturnFields(returnFields string) DtcmonitortcpAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcmonitortcpAPIGetRequest) ReturnFields2(returnFields2 string) DtcmonitortcpAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcmonitortcpAPIGetRequest) MaxResults(maxResults int32) DtcmonitortcpAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcmonitortcpAPIGetRequest) ReturnAsObject(returnAsObject int32) DtcmonitortcpAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcmonitortcpAPIGetRequest) Paging(paging int32) DtcmonitortcpAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcmonitortcpAPIGetRequest) PageId(pageId string) DtcmonitortcpAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcmonitortcpAPIGetRequest) Filters(filters map[string]interface{}) DtcmonitortcpAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DtcmonitortcpAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcmonitortcpAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcmonitortcpAPIGetRequest) Execute() (*ListDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve dtc:monitor:tcp objects

Returns a list of dtc:monitor:tcp objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcmonitortcpAPIGetRequest
*/
func (a *DtcmonitortcpAPIService) Get(ctx context.Context) DtcmonitortcpAPIGetRequest {
	return DtcmonitortcpAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcMonitorTcpResponse
func (a *DtcmonitortcpAPIService) GetExecute(r DtcmonitortcpAPIGetRequest) (*ListDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcmonitortcpAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcmonitortcpAPIPostRequest struct {
	ctx            context.Context
	ApiService     DtcmonitortcpAPI
	dtcMonitorTcp  *DtcMonitorTcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcmonitortcpAPIPostRequest) DtcMonitorTcp(dtcMonitorTcp DtcMonitorTcp) DtcmonitortcpAPIPostRequest {
	r.dtcMonitorTcp = &dtcMonitorTcp
	return r
}

// Enter the field names followed by comma
func (r DtcmonitortcpAPIPostRequest) ReturnFields(returnFields string) DtcmonitortcpAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcmonitortcpAPIPostRequest) ReturnFields2(returnFields2 string) DtcmonitortcpAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcmonitortcpAPIPostRequest) ReturnAsObject(returnAsObject int32) DtcmonitortcpAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcmonitortcpAPIPostRequest) Execute() (*CreateDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a dtc:monitor:tcp object

Creates a new dtc:monitor:tcp object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcmonitortcpAPIPostRequest
*/
func (a *DtcmonitortcpAPIService) Post(ctx context.Context) DtcmonitortcpAPIPostRequest {
	return DtcmonitortcpAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcMonitorTcpResponse
func (a *DtcmonitortcpAPIService) PostExecute(r DtcmonitortcpAPIPostRequest) (*CreateDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcmonitortcpAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorTcp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorTcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorTcp != nil {
		if r.dtcMonitorTcp.Extattrs == nil {
			r.dtcMonitorTcp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorTcp.Extattrs)[k]; !ok {
				(*r.dtcMonitorTcp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorTcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcmonitortcpAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcmonitortcpAPI
	reference  string
}

func (r DtcmonitortcpAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a dtc:monitor:tcp object

Deletes a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcmonitortcpAPIReferenceDeleteRequest
*/
func (a *DtcmonitortcpAPIService) ReferenceDelete(ctx context.Context, reference string) DtcmonitortcpAPIReferenceDeleteRequest {
	return DtcmonitortcpAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcmonitortcpAPIService) ReferenceDeleteExecute(r DtcmonitortcpAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcmonitortcpAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcmonitortcpAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcmonitortcpAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcmonitortcpAPIReferenceGetRequest) ReturnFields(returnFields string) DtcmonitortcpAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcmonitortcpAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DtcmonitortcpAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcmonitortcpAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcmonitortcpAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcmonitortcpAPIReferenceGetRequest) Execute() (*GetDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific dtc:monitor:tcp object

Returns a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcmonitortcpAPIReferenceGetRequest
*/
func (a *DtcmonitortcpAPIService) ReferenceGet(ctx context.Context, reference string) DtcmonitortcpAPIReferenceGetRequest {
	return DtcmonitortcpAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcMonitorTcpResponse
func (a *DtcmonitortcpAPIService) ReferenceGetExecute(r DtcmonitortcpAPIReferenceGetRequest) (*GetDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcmonitortcpAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcmonitortcpAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcmonitortcpAPI
	reference      string
	dtcMonitorTcp  *DtcMonitorTcp
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcmonitortcpAPIReferencePutRequest) DtcMonitorTcp(dtcMonitorTcp DtcMonitorTcp) DtcmonitortcpAPIReferencePutRequest {
	r.dtcMonitorTcp = &dtcMonitorTcp
	return r
}

// Enter the field names followed by comma
func (r DtcmonitortcpAPIReferencePutRequest) ReturnFields(returnFields string) DtcmonitortcpAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcmonitortcpAPIReferencePutRequest) ReturnFields2(returnFields2 string) DtcmonitortcpAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcmonitortcpAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcmonitortcpAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcmonitortcpAPIReferencePutRequest) Execute() (*UpdateDtcMonitorTcpResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a dtc:monitor:tcp object

Updates a specific dtc:monitor:tcp object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:monitor:tcp object
	@return DtcmonitortcpAPIReferencePutRequest
*/
func (a *DtcmonitortcpAPIService) ReferencePut(ctx context.Context, reference string) DtcmonitortcpAPIReferencePutRequest {
	return DtcmonitortcpAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcMonitorTcpResponse
func (a *DtcmonitortcpAPIService) ReferencePutExecute(r DtcmonitortcpAPIReferencePutRequest) (*UpdateDtcMonitorTcpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcMonitorTcpResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcmonitortcpAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:monitor:tcp/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcMonitorTcp == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcMonitorTcp is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcMonitorTcp != nil {
		if r.dtcMonitorTcp.Extattrs == nil {
			r.dtcMonitorTcp.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcMonitorTcp.Extattrs)[k]; !ok {
				(*r.dtcMonitorTcp.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcMonitorTcp
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
