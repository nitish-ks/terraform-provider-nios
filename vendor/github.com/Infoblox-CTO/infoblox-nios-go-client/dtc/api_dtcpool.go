/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcpoolAPI interface {
	/*
		Get Retrieve dtc:pool objects

		Returns a list of dtc:pool objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcpoolAPIGetRequest
	*/
	Get(ctx context.Context) DtcpoolAPIGetRequest

	// GetExecute executes the request
	//  @return ListDtcPoolResponse
	GetExecute(r DtcpoolAPIGetRequest) (*ListDtcPoolResponse, *http.Response, error)
	/*
		Post Create a dtc:pool object

		Creates a new dtc:pool object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcpoolAPIPostRequest
	*/
	Post(ctx context.Context) DtcpoolAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDtcPoolResponse
	PostExecute(r DtcpoolAPIPostRequest) (*CreateDtcPoolResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a dtc:pool object

		Deletes a specific dtc:pool object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:pool object
		@return DtcpoolAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DtcpoolAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DtcpoolAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific dtc:pool object

		Returns a specific dtc:pool object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:pool object
		@return DtcpoolAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DtcpoolAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDtcPoolResponse
	ReferenceGetExecute(r DtcpoolAPIReferenceGetRequest) (*GetDtcPoolResponse, *http.Response, error)
	/*
		ReferencePut Update a dtc:pool object

		Updates a specific dtc:pool object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:pool object
		@return DtcpoolAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DtcpoolAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDtcPoolResponse
	ReferencePutExecute(r DtcpoolAPIReferencePutRequest) (*UpdateDtcPoolResponse, *http.Response, error)
}

// DtcpoolAPIService DtcpoolAPI service
type DtcpoolAPIService internal.Service

type DtcpoolAPIGetRequest struct {
	ctx            context.Context
	ApiService     DtcpoolAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcpoolAPIGetRequest) ReturnFields(returnFields string) DtcpoolAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcpoolAPIGetRequest) ReturnFields2(returnFields2 string) DtcpoolAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcpoolAPIGetRequest) MaxResults(maxResults int32) DtcpoolAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcpoolAPIGetRequest) ReturnAsObject(returnAsObject int32) DtcpoolAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcpoolAPIGetRequest) Paging(paging int32) DtcpoolAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcpoolAPIGetRequest) PageId(pageId string) DtcpoolAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcpoolAPIGetRequest) Filters(filters map[string]interface{}) DtcpoolAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DtcpoolAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcpoolAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcpoolAPIGetRequest) Execute() (*ListDtcPoolResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve dtc:pool objects

Returns a list of dtc:pool objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcpoolAPIGetRequest
*/
func (a *DtcpoolAPIService) Get(ctx context.Context) DtcpoolAPIGetRequest {
	return DtcpoolAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcPoolResponse
func (a *DtcpoolAPIService) GetExecute(r DtcpoolAPIGetRequest) (*ListDtcPoolResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcPoolResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcpoolAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:pool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcpoolAPIPostRequest struct {
	ctx            context.Context
	ApiService     DtcpoolAPI
	dtcPool        *DtcPool
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcpoolAPIPostRequest) DtcPool(dtcPool DtcPool) DtcpoolAPIPostRequest {
	r.dtcPool = &dtcPool
	return r
}

// Enter the field names followed by comma
func (r DtcpoolAPIPostRequest) ReturnFields(returnFields string) DtcpoolAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcpoolAPIPostRequest) ReturnFields2(returnFields2 string) DtcpoolAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcpoolAPIPostRequest) ReturnAsObject(returnAsObject int32) DtcpoolAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcpoolAPIPostRequest) Execute() (*CreateDtcPoolResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a dtc:pool object

Creates a new dtc:pool object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcpoolAPIPostRequest
*/
func (a *DtcpoolAPIService) Post(ctx context.Context) DtcpoolAPIPostRequest {
	return DtcpoolAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcPoolResponse
func (a *DtcpoolAPIService) PostExecute(r DtcpoolAPIPostRequest) (*CreateDtcPoolResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcPoolResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcpoolAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:pool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcPool == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcPool is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcPool != nil {
		if r.dtcPool.Extattrs == nil {
			r.dtcPool.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcPool.Extattrs)[k]; !ok {
				(*r.dtcPool.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcPool
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcpoolAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcpoolAPI
	reference  string
}

func (r DtcpoolAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a dtc:pool object

Deletes a specific dtc:pool object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:pool object
	@return DtcpoolAPIReferenceDeleteRequest
*/
func (a *DtcpoolAPIService) ReferenceDelete(ctx context.Context, reference string) DtcpoolAPIReferenceDeleteRequest {
	return DtcpoolAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcpoolAPIService) ReferenceDeleteExecute(r DtcpoolAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcpoolAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:pool/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcpoolAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcpoolAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcpoolAPIReferenceGetRequest) ReturnFields(returnFields string) DtcpoolAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcpoolAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DtcpoolAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcpoolAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcpoolAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcpoolAPIReferenceGetRequest) Execute() (*GetDtcPoolResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific dtc:pool object

Returns a specific dtc:pool object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:pool object
	@return DtcpoolAPIReferenceGetRequest
*/
func (a *DtcpoolAPIService) ReferenceGet(ctx context.Context, reference string) DtcpoolAPIReferenceGetRequest {
	return DtcpoolAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcPoolResponse
func (a *DtcpoolAPIService) ReferenceGetExecute(r DtcpoolAPIReferenceGetRequest) (*GetDtcPoolResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcPoolResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcpoolAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:pool/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcpoolAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcpoolAPI
	reference      string
	dtcPool        *DtcPool
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcpoolAPIReferencePutRequest) DtcPool(dtcPool DtcPool) DtcpoolAPIReferencePutRequest {
	r.dtcPool = &dtcPool
	return r
}

// Enter the field names followed by comma
func (r DtcpoolAPIReferencePutRequest) ReturnFields(returnFields string) DtcpoolAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcpoolAPIReferencePutRequest) ReturnFields2(returnFields2 string) DtcpoolAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcpoolAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcpoolAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcpoolAPIReferencePutRequest) Execute() (*UpdateDtcPoolResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a dtc:pool object

Updates a specific dtc:pool object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:pool object
	@return DtcpoolAPIReferencePutRequest
*/
func (a *DtcpoolAPIService) ReferencePut(ctx context.Context, reference string) DtcpoolAPIReferencePutRequest {
	return DtcpoolAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcPoolResponse
func (a *DtcpoolAPIService) ReferencePutExecute(r DtcpoolAPIReferencePutRequest) (*UpdateDtcPoolResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcPoolResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcpoolAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:pool/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcPool == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcPool is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.dtcPool != nil {
		if r.dtcPool.Extattrs == nil {
			r.dtcPool.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.dtcPool.Extattrs)[k]; !ok {
				(*r.dtcPool.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.dtcPool
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
