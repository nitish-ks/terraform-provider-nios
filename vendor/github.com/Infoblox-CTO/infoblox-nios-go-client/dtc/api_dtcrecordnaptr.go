/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type DtcrecordnaptrAPI interface {
	/*
		Get Retrieve dtc:record:naptr objects

		Returns a list of dtc:record:naptr objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcrecordnaptrAPIGetRequest
	*/
	Get(ctx context.Context) DtcrecordnaptrAPIGetRequest

	// GetExecute executes the request
	//  @return ListDtcRecordNaptrResponse
	GetExecute(r DtcrecordnaptrAPIGetRequest) (*ListDtcRecordNaptrResponse, *http.Response, error)
	/*
		Post Create a dtc:record:naptr object

		Creates a new dtc:record:naptr object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DtcrecordnaptrAPIPostRequest
	*/
	Post(ctx context.Context) DtcrecordnaptrAPIPostRequest

	// PostExecute executes the request
	//  @return CreateDtcRecordNaptrResponse
	PostExecute(r DtcrecordnaptrAPIPostRequest) (*CreateDtcRecordNaptrResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a dtc:record:naptr object

		Deletes a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcrecordnaptrAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) DtcrecordnaptrAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r DtcrecordnaptrAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific dtc:record:naptr object

		Returns a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcrecordnaptrAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) DtcrecordnaptrAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetDtcRecordNaptrResponse
	ReferenceGetExecute(r DtcrecordnaptrAPIReferenceGetRequest) (*GetDtcRecordNaptrResponse, *http.Response, error)
	/*
		ReferencePut Update a dtc:record:naptr object

		Updates a specific dtc:record:naptr object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the dtc:record:naptr object
		@return DtcrecordnaptrAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) DtcrecordnaptrAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateDtcRecordNaptrResponse
	ReferencePutExecute(r DtcrecordnaptrAPIReferencePutRequest) (*UpdateDtcRecordNaptrResponse, *http.Response, error)
}

// DtcrecordnaptrAPIService DtcrecordnaptrAPI service
type DtcrecordnaptrAPIService internal.Service

type DtcrecordnaptrAPIGetRequest struct {
	ctx            context.Context
	ApiService     DtcrecordnaptrAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r DtcrecordnaptrAPIGetRequest) ReturnFields(returnFields string) DtcrecordnaptrAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcrecordnaptrAPIGetRequest) ReturnFields2(returnFields2 string) DtcrecordnaptrAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r DtcrecordnaptrAPIGetRequest) MaxResults(maxResults int32) DtcrecordnaptrAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r DtcrecordnaptrAPIGetRequest) ReturnAsObject(returnAsObject int32) DtcrecordnaptrAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r DtcrecordnaptrAPIGetRequest) Paging(paging int32) DtcrecordnaptrAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r DtcrecordnaptrAPIGetRequest) PageId(pageId string) DtcrecordnaptrAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r DtcrecordnaptrAPIGetRequest) Filters(filters map[string]interface{}) DtcrecordnaptrAPIGetRequest {
	r.filters = &filters
	return r
}

func (r DtcrecordnaptrAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) DtcrecordnaptrAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r DtcrecordnaptrAPIGetRequest) Execute() (*ListDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve dtc:record:naptr objects

Returns a list of dtc:record:naptr objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcrecordnaptrAPIGetRequest
*/
func (a *DtcrecordnaptrAPIService) Get(ctx context.Context) DtcrecordnaptrAPIGetRequest {
	return DtcrecordnaptrAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListDtcRecordNaptrResponse
func (a *DtcrecordnaptrAPIService) GetExecute(r DtcrecordnaptrAPIGetRequest) (*ListDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcrecordnaptrAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcrecordnaptrAPIPostRequest struct {
	ctx            context.Context
	ApiService     DtcrecordnaptrAPI
	dtcRecordNaptr *DtcRecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r DtcrecordnaptrAPIPostRequest) DtcRecordNaptr(dtcRecordNaptr DtcRecordNaptr) DtcrecordnaptrAPIPostRequest {
	r.dtcRecordNaptr = &dtcRecordNaptr
	return r
}

// Enter the field names followed by comma
func (r DtcrecordnaptrAPIPostRequest) ReturnFields(returnFields string) DtcrecordnaptrAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcrecordnaptrAPIPostRequest) ReturnFields2(returnFields2 string) DtcrecordnaptrAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcrecordnaptrAPIPostRequest) ReturnAsObject(returnAsObject int32) DtcrecordnaptrAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcrecordnaptrAPIPostRequest) Execute() (*CreateDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a dtc:record:naptr object

Creates a new dtc:record:naptr object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DtcrecordnaptrAPIPostRequest
*/
func (a *DtcrecordnaptrAPIService) Post(ctx context.Context) DtcrecordnaptrAPIPostRequest {
	return DtcrecordnaptrAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDtcRecordNaptrResponse
func (a *DtcrecordnaptrAPIService) PostExecute(r DtcrecordnaptrAPIPostRequest) (*CreateDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcrecordnaptrAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcrecordnaptrAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService DtcrecordnaptrAPI
	reference  string
}

func (r DtcrecordnaptrAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a dtc:record:naptr object

Deletes a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcrecordnaptrAPIReferenceDeleteRequest
*/
func (a *DtcrecordnaptrAPIService) ReferenceDelete(ctx context.Context, reference string) DtcrecordnaptrAPIReferenceDeleteRequest {
	return DtcrecordnaptrAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *DtcrecordnaptrAPIService) ReferenceDeleteExecute(r DtcrecordnaptrAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcrecordnaptrAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DtcrecordnaptrAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     DtcrecordnaptrAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r DtcrecordnaptrAPIReferenceGetRequest) ReturnFields(returnFields string) DtcrecordnaptrAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcrecordnaptrAPIReferenceGetRequest) ReturnFields2(returnFields2 string) DtcrecordnaptrAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcrecordnaptrAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) DtcrecordnaptrAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcrecordnaptrAPIReferenceGetRequest) Execute() (*GetDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific dtc:record:naptr object

Returns a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcrecordnaptrAPIReferenceGetRequest
*/
func (a *DtcrecordnaptrAPIService) ReferenceGet(ctx context.Context, reference string) DtcrecordnaptrAPIReferenceGetRequest {
	return DtcrecordnaptrAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetDtcRecordNaptrResponse
func (a *DtcrecordnaptrAPIService) ReferenceGetExecute(r DtcrecordnaptrAPIReferenceGetRequest) (*GetDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcrecordnaptrAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type DtcrecordnaptrAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     DtcrecordnaptrAPI
	reference      string
	dtcRecordNaptr *DtcRecordNaptr
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r DtcrecordnaptrAPIReferencePutRequest) DtcRecordNaptr(dtcRecordNaptr DtcRecordNaptr) DtcrecordnaptrAPIReferencePutRequest {
	r.dtcRecordNaptr = &dtcRecordNaptr
	return r
}

// Enter the field names followed by comma
func (r DtcrecordnaptrAPIReferencePutRequest) ReturnFields(returnFields string) DtcrecordnaptrAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r DtcrecordnaptrAPIReferencePutRequest) ReturnFields2(returnFields2 string) DtcrecordnaptrAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r DtcrecordnaptrAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) DtcrecordnaptrAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r DtcrecordnaptrAPIReferencePutRequest) Execute() (*UpdateDtcRecordNaptrResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a dtc:record:naptr object

Updates a specific dtc:record:naptr object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the dtc:record:naptr object
	@return DtcrecordnaptrAPIReferencePutRequest
*/
func (a *DtcrecordnaptrAPIService) ReferencePut(ctx context.Context, reference string) DtcrecordnaptrAPIReferencePutRequest {
	return DtcrecordnaptrAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateDtcRecordNaptrResponse
func (a *DtcrecordnaptrAPIService) ReferencePutExecute(r DtcrecordnaptrAPIReferencePutRequest) (*UpdateDtcRecordNaptrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateDtcRecordNaptrResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "DtcrecordnaptrAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dtc:record:naptr/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtcRecordNaptr == nil {
		return localVarReturnValue, nil, internal.ReportError("dtcRecordNaptr is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtcRecordNaptr
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
