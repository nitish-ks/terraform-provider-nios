/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
	"github.com/Infoblox-CTO/infoblox-nios-go-client/option"
)

const serviceBasePath = "/wapi/v2.13.6"

// APIClient manages communication with the Infoblox DTC API 2.13.6
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
	DtcAPI DtcAPI
	DtcAllrecordsAPI DtcAllrecordsAPI
	DtcCertificateAPI DtcCertificateAPI
	DtcLbdnAPI DtcLbdnAPI
	DtcMonitorAPI DtcMonitorAPI
	DtcMonitorHttpAPI DtcMonitorHttpAPI
	DtcMonitorIcmpAPI DtcMonitorIcmpAPI
	DtcMonitorPdpAPI DtcMonitorPdpAPI
	DtcMonitorSipAPI DtcMonitorSipAPI
	DtcMonitorSnmpAPI DtcMonitorSnmpAPI
	DtcMonitorTcpAPI DtcMonitorTcpAPI
	DtcObjectAPI DtcObjectAPI
	DtcPoolAPI DtcPoolAPI
	DtcRecordAAPI DtcRecordAAPI
	DtcRecordAaaaAPI DtcRecordAaaaAPI
	DtcRecordCnameAPI DtcRecordCnameAPI
	DtcRecordNaptrAPI DtcRecordNaptrAPI
	DtcRecordSrvAPI DtcRecordSrvAPI
	DtcServerAPI DtcServerAPI
	DtcTopologyAPI DtcTopologyAPI
	DtcTopologyLabelAPI DtcTopologyLabelAPI
	DtcTopologyRuleAPI DtcTopologyRuleAPI
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithNIOSHostUrl(string) sets the URL for NIOS Portal.
// - WithNIOSUsername(string) sets the Username for the NIOS Portal.
// - WithNIOSPassword(string) sets the Password for the NIOS Portal.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultExtAttrs(map[string]struct{ Value string }) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

	// API Services
	c.DtcAPI = (*DtcAPIService)(&c.Common)
	c.DtcAllrecordsAPI = (*DtcAllrecordsAPIService)(&c.Common)
	c.DtcCertificateAPI = (*DtcCertificateAPIService)(&c.Common)
	c.DtcLbdnAPI = (*DtcLbdnAPIService)(&c.Common)
	c.DtcMonitorAPI = (*DtcMonitorAPIService)(&c.Common)
	c.DtcMonitorHttpAPI = (*DtcMonitorHttpAPIService)(&c.Common)
	c.DtcMonitorIcmpAPI = (*DtcMonitorIcmpAPIService)(&c.Common)
	c.DtcMonitorPdpAPI = (*DtcMonitorPdpAPIService)(&c.Common)
	c.DtcMonitorSipAPI = (*DtcMonitorSipAPIService)(&c.Common)
	c.DtcMonitorSnmpAPI = (*DtcMonitorSnmpAPIService)(&c.Common)
	c.DtcMonitorTcpAPI = (*DtcMonitorTcpAPIService)(&c.Common)
	c.DtcObjectAPI = (*DtcObjectAPIService)(&c.Common)
	c.DtcPoolAPI = (*DtcPoolAPIService)(&c.Common)
	c.DtcRecordAAPI = (*DtcRecordAAPIService)(&c.Common)
	c.DtcRecordAaaaAPI = (*DtcRecordAaaaAPIService)(&c.Common)
	c.DtcRecordCnameAPI = (*DtcRecordCnameAPIService)(&c.Common)
	c.DtcRecordNaptrAPI = (*DtcRecordNaptrAPIService)(&c.Common)
	c.DtcRecordSrvAPI = (*DtcRecordSrvAPIService)(&c.Common)
	c.DtcServerAPI = (*DtcServerAPIService)(&c.Common)
	c.DtcTopologyAPI = (*DtcTopologyAPIService)(&c.Common)
	c.DtcTopologyLabelAPI = (*DtcTopologyLabelAPIService)(&c.Common)
	c.DtcTopologyRuleAPI = (*DtcTopologyRuleAPIService)(&c.Common)

	return c
}