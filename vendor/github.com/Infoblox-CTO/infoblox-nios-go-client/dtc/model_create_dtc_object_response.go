/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// CreateDtcObjectResponse - struct for CreateDtcObjectResponse
type CreateDtcObjectResponse struct {
	CreateDtcObjectResponseAsObject *CreateDtcObjectResponseAsObject
	String                          *string
}

// CreateDtcObjectResponseAsObjectAsCreateDtcObjectResponse is a convenience function that returns CreateDtcObjectResponseAsObject wrapped in CreateDtcObjectResponse
func CreateDtcObjectResponseAsObjectAsCreateDtcObjectResponse(v *CreateDtcObjectResponseAsObject) CreateDtcObjectResponse {
	return CreateDtcObjectResponse{
		CreateDtcObjectResponseAsObject: v,
	}
}

// stringAsCreateDtcObjectResponse is a convenience function that returns string wrapped in CreateDtcObjectResponse
func StringAsCreateDtcObjectResponse(v *string) CreateDtcObjectResponse {
	return CreateDtcObjectResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDtcObjectResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDtcObjectResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateDtcObjectResponseAsObject)
	if err == nil {
		jsonCreateDtcObjectResponseAsObject, _ := json.Marshal(dst.CreateDtcObjectResponseAsObject)
		if string(jsonCreateDtcObjectResponseAsObject) == "{}" { // empty struct
			dst.CreateDtcObjectResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateDtcObjectResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDtcObjectResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDtcObjectResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDtcObjectResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDtcObjectResponse) MarshalJSON() ([]byte, error) {
	if src.CreateDtcObjectResponseAsObject != nil {
		return json.Marshal(&src.CreateDtcObjectResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDtcObjectResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateDtcObjectResponseAsObject != nil {
		return obj.CreateDtcObjectResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateDtcObjectResponse struct {
	value *CreateDtcObjectResponse
	isSet bool
}

func (v NullableCreateDtcObjectResponse) Get() *CreateDtcObjectResponse {
	return v.value
}

func (v *NullableCreateDtcObjectResponse) Set(val *CreateDtcObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDtcObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDtcObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDtcObjectResponse(val *CreateDtcObjectResponse) *NullableCreateDtcObjectResponse {
	return &NullableCreateDtcObjectResponse{value: val, isSet: true}
}

func (v NullableCreateDtcObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDtcObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
