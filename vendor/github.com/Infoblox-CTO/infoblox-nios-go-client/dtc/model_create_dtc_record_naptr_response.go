/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// CreateDtcRecordNaptrResponse - struct for CreateDtcRecordNaptrResponse
type CreateDtcRecordNaptrResponse struct {
	CreateDtcRecordNaptrResponseAsObject *CreateDtcRecordNaptrResponseAsObject
	String                               *string
}

// CreateDtcRecordNaptrResponseAsObjectAsCreateDtcRecordNaptrResponse is a convenience function that returns CreateDtcRecordNaptrResponseAsObject wrapped in CreateDtcRecordNaptrResponse
func CreateDtcRecordNaptrResponseAsObjectAsCreateDtcRecordNaptrResponse(v *CreateDtcRecordNaptrResponseAsObject) CreateDtcRecordNaptrResponse {
	return CreateDtcRecordNaptrResponse{
		CreateDtcRecordNaptrResponseAsObject: v,
	}
}

// stringAsCreateDtcRecordNaptrResponse is a convenience function that returns string wrapped in CreateDtcRecordNaptrResponse
func StringAsCreateDtcRecordNaptrResponse(v *string) CreateDtcRecordNaptrResponse {
	return CreateDtcRecordNaptrResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDtcRecordNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDtcRecordNaptrResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateDtcRecordNaptrResponseAsObject)
	if err == nil {
		jsonCreateDtcRecordNaptrResponseAsObject, _ := json.Marshal(dst.CreateDtcRecordNaptrResponseAsObject)
		if string(jsonCreateDtcRecordNaptrResponseAsObject) == "{}" { // empty struct
			dst.CreateDtcRecordNaptrResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateDtcRecordNaptrResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDtcRecordNaptrResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDtcRecordNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDtcRecordNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.CreateDtcRecordNaptrResponseAsObject != nil {
		return json.Marshal(&src.CreateDtcRecordNaptrResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDtcRecordNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateDtcRecordNaptrResponseAsObject != nil {
		return obj.CreateDtcRecordNaptrResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateDtcRecordNaptrResponse struct {
	value *CreateDtcRecordNaptrResponse
	isSet bool
}

func (v NullableCreateDtcRecordNaptrResponse) Get() *CreateDtcRecordNaptrResponse {
	return v.value
}

func (v *NullableCreateDtcRecordNaptrResponse) Set(val *CreateDtcRecordNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDtcRecordNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDtcRecordNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDtcRecordNaptrResponse(val *CreateDtcRecordNaptrResponse) *NullableCreateDtcRecordNaptrResponse {
	return &NullableCreateDtcRecordNaptrResponse{value: val, isSet: true}
}

func (v NullableCreateDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDtcRecordNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
