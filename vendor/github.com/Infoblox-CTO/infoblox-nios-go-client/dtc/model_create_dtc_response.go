/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// CreateDtcResponse - struct for CreateDtcResponse
type CreateDtcResponse struct {
	CreateDtcResponseAsObject *CreateDtcResponseAsObject
	String                    *string
}

// CreateDtcResponseAsObjectAsCreateDtcResponse is a convenience function that returns CreateDtcResponseAsObject wrapped in CreateDtcResponse
func CreateDtcResponseAsObjectAsCreateDtcResponse(v *CreateDtcResponseAsObject) CreateDtcResponse {
	return CreateDtcResponse{
		CreateDtcResponseAsObject: v,
	}
}

// stringAsCreateDtcResponse is a convenience function that returns string wrapped in CreateDtcResponse
func StringAsCreateDtcResponse(v *string) CreateDtcResponse {
	return CreateDtcResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDtcResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDtcResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateDtcResponseAsObject)
	if err == nil {
		jsonCreateDtcResponseAsObject, _ := json.Marshal(dst.CreateDtcResponseAsObject)
		if string(jsonCreateDtcResponseAsObject) == "{}" { // empty struct
			dst.CreateDtcResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateDtcResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDtcResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDtcResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDtcResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDtcResponse) MarshalJSON() ([]byte, error) {
	if src.CreateDtcResponseAsObject != nil {
		return json.Marshal(&src.CreateDtcResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDtcResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateDtcResponseAsObject != nil {
		return obj.CreateDtcResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateDtcResponse struct {
	value *CreateDtcResponse
	isSet bool
}

func (v NullableCreateDtcResponse) Get() *CreateDtcResponse {
	return v.value
}

func (v *NullableCreateDtcResponse) Set(val *CreateDtcResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDtcResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDtcResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDtcResponse(val *CreateDtcResponse) *NullableCreateDtcResponse {
	return &NullableCreateDtcResponse{value: val, isSet: true}
}

func (v NullableCreateDtcResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDtcResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
