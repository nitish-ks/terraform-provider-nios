/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the Dtc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dtc{}

// Dtc struct for Dtc
type Dtc struct {
	// The reference to the object.
	Ref                   *string                `json:"_ref,omitempty"`
	AddCertificate        map[string]interface{} `json:"add_certificate,omitempty"`
	DtcGetObjectGridState map[string]interface{} `json:"dtc_get_object_grid_state,omitempty"`
	DtcObjectDisable      map[string]interface{} `json:"dtc_object_disable,omitempty"`
	DtcObjectEnable       map[string]interface{} `json:"dtc_object_enable,omitempty"`
	GenerateEaTopologyDb  map[string]interface{} `json:"generate_ea_topology_db,omitempty"`
	ImportMaxminddb       map[string]interface{} `json:"import_maxminddb,omitempty"`
	Query                 map[string]interface{} `json:"query,omitempty"`
}

// NewDtc instantiates a new Dtc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtc() *Dtc {
	this := Dtc{}
	return &this
}

// NewDtcWithDefaults instantiates a new Dtc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcWithDefaults() *Dtc {
	this := Dtc{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dtc) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dtc) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dtc) SetRef(v string) {
	o.Ref = &v
}

// GetAddCertificate returns the AddCertificate field value if set, zero value otherwise.
func (o *Dtc) GetAddCertificate() map[string]interface{} {
	if o == nil || IsNil(o.AddCertificate) {
		var ret map[string]interface{}
		return ret
	}
	return o.AddCertificate
}

// GetAddCertificateOk returns a tuple with the AddCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetAddCertificateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AddCertificate) {
		return map[string]interface{}{}, false
	}
	return o.AddCertificate, true
}

// HasAddCertificate returns a boolean if a field has been set.
func (o *Dtc) HasAddCertificate() bool {
	if o != nil && !IsNil(o.AddCertificate) {
		return true
	}

	return false
}

// SetAddCertificate gets a reference to the given map[string]interface{} and assigns it to the AddCertificate field.
func (o *Dtc) SetAddCertificate(v map[string]interface{}) {
	o.AddCertificate = v
}

// GetDtcGetObjectGridState returns the DtcGetObjectGridState field value if set, zero value otherwise.
func (o *Dtc) GetDtcGetObjectGridState() map[string]interface{} {
	if o == nil || IsNil(o.DtcGetObjectGridState) {
		var ret map[string]interface{}
		return ret
	}
	return o.DtcGetObjectGridState
}

// GetDtcGetObjectGridStateOk returns a tuple with the DtcGetObjectGridState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetDtcGetObjectGridStateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DtcGetObjectGridState) {
		return map[string]interface{}{}, false
	}
	return o.DtcGetObjectGridState, true
}

// HasDtcGetObjectGridState returns a boolean if a field has been set.
func (o *Dtc) HasDtcGetObjectGridState() bool {
	if o != nil && !IsNil(o.DtcGetObjectGridState) {
		return true
	}

	return false
}

// SetDtcGetObjectGridState gets a reference to the given map[string]interface{} and assigns it to the DtcGetObjectGridState field.
func (o *Dtc) SetDtcGetObjectGridState(v map[string]interface{}) {
	o.DtcGetObjectGridState = v
}

// GetDtcObjectDisable returns the DtcObjectDisable field value if set, zero value otherwise.
func (o *Dtc) GetDtcObjectDisable() map[string]interface{} {
	if o == nil || IsNil(o.DtcObjectDisable) {
		var ret map[string]interface{}
		return ret
	}
	return o.DtcObjectDisable
}

// GetDtcObjectDisableOk returns a tuple with the DtcObjectDisable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetDtcObjectDisableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DtcObjectDisable) {
		return map[string]interface{}{}, false
	}
	return o.DtcObjectDisable, true
}

// HasDtcObjectDisable returns a boolean if a field has been set.
func (o *Dtc) HasDtcObjectDisable() bool {
	if o != nil && !IsNil(o.DtcObjectDisable) {
		return true
	}

	return false
}

// SetDtcObjectDisable gets a reference to the given map[string]interface{} and assigns it to the DtcObjectDisable field.
func (o *Dtc) SetDtcObjectDisable(v map[string]interface{}) {
	o.DtcObjectDisable = v
}

// GetDtcObjectEnable returns the DtcObjectEnable field value if set, zero value otherwise.
func (o *Dtc) GetDtcObjectEnable() map[string]interface{} {
	if o == nil || IsNil(o.DtcObjectEnable) {
		var ret map[string]interface{}
		return ret
	}
	return o.DtcObjectEnable
}

// GetDtcObjectEnableOk returns a tuple with the DtcObjectEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetDtcObjectEnableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DtcObjectEnable) {
		return map[string]interface{}{}, false
	}
	return o.DtcObjectEnable, true
}

// HasDtcObjectEnable returns a boolean if a field has been set.
func (o *Dtc) HasDtcObjectEnable() bool {
	if o != nil && !IsNil(o.DtcObjectEnable) {
		return true
	}

	return false
}

// SetDtcObjectEnable gets a reference to the given map[string]interface{} and assigns it to the DtcObjectEnable field.
func (o *Dtc) SetDtcObjectEnable(v map[string]interface{}) {
	o.DtcObjectEnable = v
}

// GetGenerateEaTopologyDb returns the GenerateEaTopologyDb field value if set, zero value otherwise.
func (o *Dtc) GetGenerateEaTopologyDb() map[string]interface{} {
	if o == nil || IsNil(o.GenerateEaTopologyDb) {
		var ret map[string]interface{}
		return ret
	}
	return o.GenerateEaTopologyDb
}

// GetGenerateEaTopologyDbOk returns a tuple with the GenerateEaTopologyDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetGenerateEaTopologyDbOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GenerateEaTopologyDb) {
		return map[string]interface{}{}, false
	}
	return o.GenerateEaTopologyDb, true
}

// HasGenerateEaTopologyDb returns a boolean if a field has been set.
func (o *Dtc) HasGenerateEaTopologyDb() bool {
	if o != nil && !IsNil(o.GenerateEaTopologyDb) {
		return true
	}

	return false
}

// SetGenerateEaTopologyDb gets a reference to the given map[string]interface{} and assigns it to the GenerateEaTopologyDb field.
func (o *Dtc) SetGenerateEaTopologyDb(v map[string]interface{}) {
	o.GenerateEaTopologyDb = v
}

// GetImportMaxminddb returns the ImportMaxminddb field value if set, zero value otherwise.
func (o *Dtc) GetImportMaxminddb() map[string]interface{} {
	if o == nil || IsNil(o.ImportMaxminddb) {
		var ret map[string]interface{}
		return ret
	}
	return o.ImportMaxminddb
}

// GetImportMaxminddbOk returns a tuple with the ImportMaxminddb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetImportMaxminddbOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ImportMaxminddb) {
		return map[string]interface{}{}, false
	}
	return o.ImportMaxminddb, true
}

// HasImportMaxminddb returns a boolean if a field has been set.
func (o *Dtc) HasImportMaxminddb() bool {
	if o != nil && !IsNil(o.ImportMaxminddb) {
		return true
	}

	return false
}

// SetImportMaxminddb gets a reference to the given map[string]interface{} and assigns it to the ImportMaxminddb field.
func (o *Dtc) SetImportMaxminddb(v map[string]interface{}) {
	o.ImportMaxminddb = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Dtc) GetQuery() map[string]interface{} {
	if o == nil || IsNil(o.Query) {
		var ret map[string]interface{}
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Query) {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Dtc) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]interface{} and assigns it to the Query field.
func (o *Dtc) SetQuery(v map[string]interface{}) {
	o.Query = v
}

func (o Dtc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dtc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddCertificate) {
		toSerialize["add_certificate"] = o.AddCertificate
	}
	if !IsNil(o.DtcGetObjectGridState) {
		toSerialize["dtc_get_object_grid_state"] = o.DtcGetObjectGridState
	}
	if !IsNil(o.DtcObjectDisable) {
		toSerialize["dtc_object_disable"] = o.DtcObjectDisable
	}
	if !IsNil(o.DtcObjectEnable) {
		toSerialize["dtc_object_enable"] = o.DtcObjectEnable
	}
	if !IsNil(o.GenerateEaTopologyDb) {
		toSerialize["generate_ea_topology_db"] = o.GenerateEaTopologyDb
	}
	if !IsNil(o.ImportMaxminddb) {
		toSerialize["import_maxminddb"] = o.ImportMaxminddb
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableDtc struct {
	value *Dtc
	isSet bool
}

func (v NullableDtc) Get() *Dtc {
	return v.value
}

func (v *NullableDtc) Set(val *Dtc) {
	v.value = val
	v.isSet = true
}

func (v NullableDtc) IsSet() bool {
	return v.isSet
}

func (v *NullableDtc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtc(val *Dtc) *NullableDtc {
	return &NullableDtc{value: val, isSet: true}
}

func (v NullableDtc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
