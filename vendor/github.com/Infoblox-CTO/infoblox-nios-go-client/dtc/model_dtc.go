/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the Dtc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dtc{}

// Dtc struct for Dtc
type Dtc struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
}

// NewDtc instantiates a new Dtc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtc() *Dtc {
	this := Dtc{}
	return &this
}

// NewDtcWithDefaults instantiates a new Dtc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcWithDefaults() *Dtc {
	this := Dtc{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dtc) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dtc) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dtc) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dtc) SetRef(v string) {
	o.Ref = &v
}

func (o Dtc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dtc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullableDtc struct {
	value *Dtc
	isSet bool
}

func (v NullableDtc) Get() *Dtc {
	return v.value
}

func (v *NullableDtc) Set(val *Dtc) {
	v.value = val
	v.isSet = true
}

func (v NullableDtc) IsSet() bool {
	return v.isSet
}

func (v *NullableDtc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtc(val *Dtc) *NullableDtc {
	return &NullableDtc{value: val, isSet: true}
}

func (v NullableDtc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
