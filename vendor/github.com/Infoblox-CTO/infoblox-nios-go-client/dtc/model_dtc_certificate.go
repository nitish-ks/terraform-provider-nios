/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcCertificate{}

// DtcCertificate struct for DtcCertificate
type DtcCertificate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Reference to underlying X509Certificate.
	Certificate *string `json:"certificate,omitempty"`
	// Determines whether the certificate is in use or not.
	InUse *bool `json:"in_use,omitempty"`
}

// NewDtcCertificate instantiates a new DtcCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcCertificate() *DtcCertificate {
	this := DtcCertificate{}
	return &this
}

// NewDtcCertificateWithDefaults instantiates a new DtcCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcCertificateWithDefaults() *DtcCertificate {
	this := DtcCertificate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcCertificate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcCertificate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcCertificate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcCertificate) SetRef(v string) {
	o.Ref = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *DtcCertificate) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcCertificate) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *DtcCertificate) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *DtcCertificate) SetCertificate(v string) {
	o.Certificate = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *DtcCertificate) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcCertificate) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *DtcCertificate) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *DtcCertificate) SetInUse(v bool) {
	o.InUse = &v
}

func (o DtcCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.InUse) {
		toSerialize["in_use"] = o.InUse
	}
	return toSerialize, nil
}

type NullableDtcCertificate struct {
	value *DtcCertificate
	isSet bool
}

func (v NullableDtcCertificate) Get() *DtcCertificate {
	return v.value
}

func (v *NullableDtcCertificate) Set(val *DtcCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcCertificate(val *DtcCertificate) *NullableDtcCertificate {
	return &NullableDtcCertificate{value: val, isSet: true}
}

func (v NullableDtcCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
