/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcLbdn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcLbdn{}

// DtcLbdn struct for DtcLbdn
type DtcLbdn struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// List of linked auth zones.
	AuthZones []string `json:"auth_zones,omitempty"`
	// Flag for enabling auto managing DTC Consolidated Monitors on related DTC Pools.
	AutoConsolidatedMonitors *bool `json:"auto_consolidated_monitors,omitempty"`
	// Comment for the DTC LBDN; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether the DTC LBDN is disabled or not. When this is set to False, the fixed address is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	Health   *DtcLbdnHealth       `json:"health,omitempty"`
	// The load balancing method. Used to select pool.
	LbMethod *string `json:"lb_method,omitempty"`
	// The display name of the DTC LBDN, not DNS related.
	Name *string `json:"name,omitempty"`
	// LBDN wildcards for pattern match.
	Patterns []string `json:"patterns,omitempty"`
	// Maximum time, in seconds, for which client specific LBDN responses will be cached. Zero specifies no caching.
	Persistence *int64 `json:"persistence,omitempty"`
	// The maximum time, in seconds, for which client specific LBDN responses will be cached. Zero specifies no caching.
	Pools []DtcLbdnPools `json:"pools,omitempty"`
	// The LBDN pattern match priority for \"overlapping\" DTC LBDN objects. LBDNs are \"overlapping\" if they are simultaneously assigned to a zone and have patterns that can match the same FQDN. The matching LBDN with highest priority (lowest ordinal) will be used.
	Priority *int64 `json:"priority,omitempty"`
	// The topology rules for TOPOLOGY method.
	Topology *string `json:"topology,omitempty"`
	// The Time To Live (TTL) value for the DTC LBDN. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// The list of resource record types supported by LBDN.
	Types []string `json:"types,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewDtcLbdn instantiates a new DtcLbdn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcLbdn() *DtcLbdn {
	this := DtcLbdn{}
	return &this
}

// NewDtcLbdnWithDefaults instantiates a new DtcLbdn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcLbdnWithDefaults() *DtcLbdn {
	this := DtcLbdn{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcLbdn) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcLbdn) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcLbdn) SetRef(v string) {
	o.Ref = &v
}

// GetAuthZones returns the AuthZones field value if set, zero value otherwise.
func (o *DtcLbdn) GetAuthZones() []string {
	if o == nil || IsNil(o.AuthZones) {
		var ret []string
		return ret
	}
	return o.AuthZones
}

// GetAuthZonesOk returns a tuple with the AuthZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetAuthZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthZones) {
		return nil, false
	}
	return o.AuthZones, true
}

// HasAuthZones returns a boolean if a field has been set.
func (o *DtcLbdn) HasAuthZones() bool {
	if o != nil && !IsNil(o.AuthZones) {
		return true
	}

	return false
}

// SetAuthZones gets a reference to the given []string and assigns it to the AuthZones field.
func (o *DtcLbdn) SetAuthZones(v []string) {
	o.AuthZones = v
}

// GetAutoConsolidatedMonitors returns the AutoConsolidatedMonitors field value if set, zero value otherwise.
func (o *DtcLbdn) GetAutoConsolidatedMonitors() bool {
	if o == nil || IsNil(o.AutoConsolidatedMonitors) {
		var ret bool
		return ret
	}
	return *o.AutoConsolidatedMonitors
}

// GetAutoConsolidatedMonitorsOk returns a tuple with the AutoConsolidatedMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetAutoConsolidatedMonitorsOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoConsolidatedMonitors) {
		return nil, false
	}
	return o.AutoConsolidatedMonitors, true
}

// HasAutoConsolidatedMonitors returns a boolean if a field has been set.
func (o *DtcLbdn) HasAutoConsolidatedMonitors() bool {
	if o != nil && !IsNil(o.AutoConsolidatedMonitors) {
		return true
	}

	return false
}

// SetAutoConsolidatedMonitors gets a reference to the given bool and assigns it to the AutoConsolidatedMonitors field.
func (o *DtcLbdn) SetAutoConsolidatedMonitors(v bool) {
	o.AutoConsolidatedMonitors = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcLbdn) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcLbdn) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcLbdn) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DtcLbdn) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DtcLbdn) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DtcLbdn) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcLbdn) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcLbdn) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcLbdn) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *DtcLbdn) GetHealth() DtcLbdnHealth {
	if o == nil || IsNil(o.Health) {
		var ret DtcLbdnHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetHealthOk() (*DtcLbdnHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *DtcLbdn) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given DtcLbdnHealth and assigns it to the Health field.
func (o *DtcLbdn) SetHealth(v DtcLbdnHealth) {
	o.Health = &v
}

// GetLbMethod returns the LbMethod field value if set, zero value otherwise.
func (o *DtcLbdn) GetLbMethod() string {
	if o == nil || IsNil(o.LbMethod) {
		var ret string
		return ret
	}
	return *o.LbMethod
}

// GetLbMethodOk returns a tuple with the LbMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetLbMethodOk() (*string, bool) {
	if o == nil || IsNil(o.LbMethod) {
		return nil, false
	}
	return o.LbMethod, true
}

// HasLbMethod returns a boolean if a field has been set.
func (o *DtcLbdn) HasLbMethod() bool {
	if o != nil && !IsNil(o.LbMethod) {
		return true
	}

	return false
}

// SetLbMethod gets a reference to the given string and assigns it to the LbMethod field.
func (o *DtcLbdn) SetLbMethod(v string) {
	o.LbMethod = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcLbdn) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcLbdn) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcLbdn) SetName(v string) {
	o.Name = &v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *DtcLbdn) GetPatterns() []string {
	if o == nil || IsNil(o.Patterns) {
		var ret []string
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *DtcLbdn) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []string and assigns it to the Patterns field.
func (o *DtcLbdn) SetPatterns(v []string) {
	o.Patterns = v
}

// GetPersistence returns the Persistence field value if set, zero value otherwise.
func (o *DtcLbdn) GetPersistence() int64 {
	if o == nil || IsNil(o.Persistence) {
		var ret int64
		return ret
	}
	return *o.Persistence
}

// GetPersistenceOk returns a tuple with the Persistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetPersistenceOk() (*int64, bool) {
	if o == nil || IsNil(o.Persistence) {
		return nil, false
	}
	return o.Persistence, true
}

// HasPersistence returns a boolean if a field has been set.
func (o *DtcLbdn) HasPersistence() bool {
	if o != nil && !IsNil(o.Persistence) {
		return true
	}

	return false
}

// SetPersistence gets a reference to the given int64 and assigns it to the Persistence field.
func (o *DtcLbdn) SetPersistence(v int64) {
	o.Persistence = &v
}

// GetPools returns the Pools field value if set, zero value otherwise.
func (o *DtcLbdn) GetPools() []DtcLbdnPools {
	if o == nil || IsNil(o.Pools) {
		var ret []DtcLbdnPools
		return ret
	}
	return o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetPoolsOk() ([]DtcLbdnPools, bool) {
	if o == nil || IsNil(o.Pools) {
		return nil, false
	}
	return o.Pools, true
}

// HasPools returns a boolean if a field has been set.
func (o *DtcLbdn) HasPools() bool {
	if o != nil && !IsNil(o.Pools) {
		return true
	}

	return false
}

// SetPools gets a reference to the given []DtcLbdnPools and assigns it to the Pools field.
func (o *DtcLbdn) SetPools(v []DtcLbdnPools) {
	o.Pools = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *DtcLbdn) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *DtcLbdn) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *DtcLbdn) SetPriority(v int64) {
	o.Priority = &v
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *DtcLbdn) GetTopology() string {
	if o == nil || IsNil(o.Topology) {
		var ret string
		return ret
	}
	return *o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.Topology) {
		return nil, false
	}
	return o.Topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *DtcLbdn) HasTopology() bool {
	if o != nil && !IsNil(o.Topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given string and assigns it to the Topology field.
func (o *DtcLbdn) SetTopology(v string) {
	o.Topology = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DtcLbdn) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DtcLbdn) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DtcLbdn) SetTtl(v int64) {
	o.Ttl = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *DtcLbdn) GetTypes() []string {
	if o == nil || IsNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *DtcLbdn) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *DtcLbdn) SetTypes(v []string) {
	o.Types = v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *DtcLbdn) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdn) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *DtcLbdn) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *DtcLbdn) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o DtcLbdn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcLbdn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AuthZones) {
		toSerialize["auth_zones"] = o.AuthZones
	}
	if !IsNil(o.AutoConsolidatedMonitors) {
		toSerialize["auto_consolidated_monitors"] = o.AutoConsolidatedMonitors
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.LbMethod) {
		toSerialize["lb_method"] = o.LbMethod
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	if !IsNil(o.Persistence) {
		toSerialize["persistence"] = o.Persistence
	}
	if !IsNil(o.Pools) {
		toSerialize["pools"] = o.Pools
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Topology) {
		toSerialize["topology"] = o.Topology
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableDtcLbdn struct {
	value *DtcLbdn
	isSet bool
}

func (v NullableDtcLbdn) Get() *DtcLbdn {
	return v.value
}

func (v *NullableDtcLbdn) Set(val *DtcLbdn) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcLbdn) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcLbdn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcLbdn(val *DtcLbdn) *NullableDtcLbdn {
	return &NullableDtcLbdn{value: val, isSet: true}
}

func (v NullableDtcLbdn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcLbdn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
