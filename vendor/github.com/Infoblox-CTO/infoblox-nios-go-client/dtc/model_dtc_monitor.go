/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcMonitor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcMonitor{}

// DtcMonitor struct for DtcMonitor
type DtcMonitor struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for this DTC monitor; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The interval for a health check.
	Interval *int64 `json:"interval,omitempty"`
	// The actual monitor object.
	Monitor *string `json:"monitor,omitempty"`
	// The display name for this DTC monitor.
	Name *string `json:"name,omitempty"`
	// The health monitor port value.
	Port *int64 `json:"port,omitempty"`
	// The number of how many times the server should appear as \"DOWN\" to be treated as dead after it was alive.
	RetryDown *int64 `json:"retry_down,omitempty"`
	// The number of many times the server should appear as \"UP\" to be treated as alive after it was dead.
	RetryUp *int64 `json:"retry_up,omitempty"`
	// The timeout for a health check.
	Timeout *int64 `json:"timeout,omitempty"`
	// The request transport type.
	Type *string `json:"type,omitempty"`
}

// NewDtcMonitor instantiates a new DtcMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcMonitor() *DtcMonitor {
	this := DtcMonitor{}
	return &this
}

// NewDtcMonitorWithDefaults instantiates a new DtcMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcMonitorWithDefaults() *DtcMonitor {
	this := DtcMonitor{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcMonitor) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcMonitor) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcMonitor) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcMonitor) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcMonitor) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcMonitor) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcMonitor) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcMonitor) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcMonitor) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DtcMonitor) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DtcMonitor) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DtcMonitor) SetInterval(v int64) {
	o.Interval = &v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *DtcMonitor) GetMonitor() string {
	if o == nil || IsNil(o.Monitor) {
		var ret string
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetMonitorOk() (*string, bool) {
	if o == nil || IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *DtcMonitor) HasMonitor() bool {
	if o != nil && !IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given string and assigns it to the Monitor field.
func (o *DtcMonitor) SetMonitor(v string) {
	o.Monitor = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcMonitor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcMonitor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcMonitor) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DtcMonitor) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DtcMonitor) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DtcMonitor) SetPort(v int64) {
	o.Port = &v
}

// GetRetryDown returns the RetryDown field value if set, zero value otherwise.
func (o *DtcMonitor) GetRetryDown() int64 {
	if o == nil || IsNil(o.RetryDown) {
		var ret int64
		return ret
	}
	return *o.RetryDown
}

// GetRetryDownOk returns a tuple with the RetryDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetRetryDownOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryDown) {
		return nil, false
	}
	return o.RetryDown, true
}

// HasRetryDown returns a boolean if a field has been set.
func (o *DtcMonitor) HasRetryDown() bool {
	if o != nil && !IsNil(o.RetryDown) {
		return true
	}

	return false
}

// SetRetryDown gets a reference to the given int64 and assigns it to the RetryDown field.
func (o *DtcMonitor) SetRetryDown(v int64) {
	o.RetryDown = &v
}

// GetRetryUp returns the RetryUp field value if set, zero value otherwise.
func (o *DtcMonitor) GetRetryUp() int64 {
	if o == nil || IsNil(o.RetryUp) {
		var ret int64
		return ret
	}
	return *o.RetryUp
}

// GetRetryUpOk returns a tuple with the RetryUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetRetryUpOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryUp) {
		return nil, false
	}
	return o.RetryUp, true
}

// HasRetryUp returns a boolean if a field has been set.
func (o *DtcMonitor) HasRetryUp() bool {
	if o != nil && !IsNil(o.RetryUp) {
		return true
	}

	return false
}

// SetRetryUp gets a reference to the given int64 and assigns it to the RetryUp field.
func (o *DtcMonitor) SetRetryUp(v int64) {
	o.RetryUp = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DtcMonitor) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DtcMonitor) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *DtcMonitor) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DtcMonitor) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitor) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DtcMonitor) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DtcMonitor) SetType(v string) {
	o.Type = &v
}

func (o DtcMonitor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcMonitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.RetryDown) {
		toSerialize["retry_down"] = o.RetryDown
	}
	if !IsNil(o.RetryUp) {
		toSerialize["retry_up"] = o.RetryUp
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDtcMonitor struct {
	value *DtcMonitor
	isSet bool
}

func (v NullableDtcMonitor) Get() *DtcMonitor {
	return v.value
}

func (v *NullableDtcMonitor) Set(val *DtcMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcMonitor(val *DtcMonitor) *NullableDtcMonitor {
	return &NullableDtcMonitor{value: val, isSet: true}
}

func (v NullableDtcMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
