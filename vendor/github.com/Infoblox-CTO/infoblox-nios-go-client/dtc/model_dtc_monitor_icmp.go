/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcMonitorIcmp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcMonitorIcmp{}

// DtcMonitorIcmp struct for DtcMonitorIcmp
type DtcMonitorIcmp struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for this DTC monitor; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The interval for TCP health check.
	Interval *int64 `json:"interval,omitempty"`
	// The display name for this DTC monitor.
	Name *string `json:"name,omitempty"`
	// The value of how many times the server should appear as down to be treated as dead after it was alive.
	RetryDown *int64 `json:"retry_down,omitempty"`
	// The value of how many times the server should appear as up to be treated as alive after it was dead.
	RetryUp *int64 `json:"retry_up,omitempty"`
	// The timeout for TCP health check in seconds.
	Timeout *int64 `json:"timeout,omitempty"`
}

// NewDtcMonitorIcmp instantiates a new DtcMonitorIcmp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcMonitorIcmp() *DtcMonitorIcmp {
	this := DtcMonitorIcmp{}
	return &this
}

// NewDtcMonitorIcmpWithDefaults instantiates a new DtcMonitorIcmp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcMonitorIcmpWithDefaults() *DtcMonitorIcmp {
	this := DtcMonitorIcmp{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcMonitorIcmp) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcMonitorIcmp) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcMonitorIcmp) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DtcMonitorIcmp) SetInterval(v int64) {
	o.Interval = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcMonitorIcmp) SetName(v string) {
	o.Name = &v
}

// GetRetryDown returns the RetryDown field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetRetryDown() int64 {
	if o == nil || IsNil(o.RetryDown) {
		var ret int64
		return ret
	}
	return *o.RetryDown
}

// GetRetryDownOk returns a tuple with the RetryDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetRetryDownOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryDown) {
		return nil, false
	}
	return o.RetryDown, true
}

// HasRetryDown returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasRetryDown() bool {
	if o != nil && !IsNil(o.RetryDown) {
		return true
	}

	return false
}

// SetRetryDown gets a reference to the given int64 and assigns it to the RetryDown field.
func (o *DtcMonitorIcmp) SetRetryDown(v int64) {
	o.RetryDown = &v
}

// GetRetryUp returns the RetryUp field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetRetryUp() int64 {
	if o == nil || IsNil(o.RetryUp) {
		var ret int64
		return ret
	}
	return *o.RetryUp
}

// GetRetryUpOk returns a tuple with the RetryUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetRetryUpOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryUp) {
		return nil, false
	}
	return o.RetryUp, true
}

// HasRetryUp returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasRetryUp() bool {
	if o != nil && !IsNil(o.RetryUp) {
		return true
	}

	return false
}

// SetRetryUp gets a reference to the given int64 and assigns it to the RetryUp field.
func (o *DtcMonitorIcmp) SetRetryUp(v int64) {
	o.RetryUp = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DtcMonitorIcmp) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorIcmp) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DtcMonitorIcmp) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *DtcMonitorIcmp) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o DtcMonitorIcmp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcMonitorIcmp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RetryDown) {
		toSerialize["retry_down"] = o.RetryDown
	}
	if !IsNil(o.RetryUp) {
		toSerialize["retry_up"] = o.RetryUp
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableDtcMonitorIcmp struct {
	value *DtcMonitorIcmp
	isSet bool
}

func (v NullableDtcMonitorIcmp) Get() *DtcMonitorIcmp {
	return v.value
}

func (v *NullableDtcMonitorIcmp) Set(val *DtcMonitorIcmp) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcMonitorIcmp) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcMonitorIcmp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcMonitorIcmp(val *DtcMonitorIcmp) *NullableDtcMonitorIcmp {
	return &NullableDtcMonitorIcmp{value: val, isSet: true}
}

func (v NullableDtcMonitorIcmp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcMonitorIcmp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
