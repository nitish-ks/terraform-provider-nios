/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcMonitorSip type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcMonitorSip{}

// DtcMonitorSip struct for DtcMonitorSip
type DtcMonitorSip struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// An optional cipher list for secure TLS/SIPS connection.
	Ciphers *string `json:"ciphers,omitempty"`
	// An optional client certificate, supplied in TLS and SIPS mode if present.
	ClientCert *string `json:"client_cert,omitempty"`
	// Comment for this DTC monitor; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The interval for TCP health check.
	Interval *int64 `json:"interval,omitempty"`
	// The display name for this DTC monitor.
	Name *string `json:"name,omitempty"`
	// The port value for SIP requests.
	Port *int64 `json:"port,omitempty"`
	// A SIP request to send
	Request *string `json:"request,omitempty"`
	// The type of an expected result.
	Result *string `json:"result,omitempty"`
	// The expected return code value.
	ResultCode *int64 `json:"result_code,omitempty"`
	// The value of how many times the server should appear as down to be treated as dead after it was alive.
	RetryDown *int64 `json:"retry_down,omitempty"`
	// The value of how many times the server should appear as up to be treated as alive after it was dead.
	RetryUp *int64 `json:"retry_up,omitempty"`
	// The timeout for TCP health check in seconds.
	Timeout *int64 `json:"timeout,omitempty"`
	// The transport layer protocol to use for SIP check.
	Transport *string `json:"transport,omitempty"`
	// Determines whether the validation of the remote server's certificate is enabled.
	ValidateCert *bool `json:"validate_cert,omitempty"`
}

// NewDtcMonitorSip instantiates a new DtcMonitorSip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcMonitorSip() *DtcMonitorSip {
	this := DtcMonitorSip{}
	return &this
}

// NewDtcMonitorSipWithDefaults instantiates a new DtcMonitorSip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcMonitorSipWithDefaults() *DtcMonitorSip {
	this := DtcMonitorSip{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcMonitorSip) SetRef(v string) {
	o.Ref = &v
}

// GetCiphers returns the Ciphers field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetCiphers() string {
	if o == nil || IsNil(o.Ciphers) {
		var ret string
		return ret
	}
	return *o.Ciphers
}

// GetCiphersOk returns a tuple with the Ciphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetCiphersOk() (*string, bool) {
	if o == nil || IsNil(o.Ciphers) {
		return nil, false
	}
	return o.Ciphers, true
}

// HasCiphers returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasCiphers() bool {
	if o != nil && !IsNil(o.Ciphers) {
		return true
	}

	return false
}

// SetCiphers gets a reference to the given string and assigns it to the Ciphers field.
func (o *DtcMonitorSip) SetCiphers(v string) {
	o.Ciphers = &v
}

// GetClientCert returns the ClientCert field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetClientCert() string {
	if o == nil || IsNil(o.ClientCert) {
		var ret string
		return ret
	}
	return *o.ClientCert
}

// GetClientCertOk returns a tuple with the ClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetClientCertOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCert) {
		return nil, false
	}
	return o.ClientCert, true
}

// HasClientCert returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasClientCert() bool {
	if o != nil && !IsNil(o.ClientCert) {
		return true
	}

	return false
}

// SetClientCert gets a reference to the given string and assigns it to the ClientCert field.
func (o *DtcMonitorSip) SetClientCert(v string) {
	o.ClientCert = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcMonitorSip) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcMonitorSip) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DtcMonitorSip) SetInterval(v int64) {
	o.Interval = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcMonitorSip) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DtcMonitorSip) SetPort(v int64) {
	o.Port = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetRequest() string {
	if o == nil || IsNil(o.Request) {
		var ret string
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetRequestOk() (*string, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given string and assigns it to the Request field.
func (o *DtcMonitorSip) SetRequest(v string) {
	o.Request = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *DtcMonitorSip) SetResult(v string) {
	o.Result = &v
}

// GetResultCode returns the ResultCode field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetResultCode() int64 {
	if o == nil || IsNil(o.ResultCode) {
		var ret int64
		return ret
	}
	return *o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetResultCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.ResultCode) {
		return nil, false
	}
	return o.ResultCode, true
}

// HasResultCode returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasResultCode() bool {
	if o != nil && !IsNil(o.ResultCode) {
		return true
	}

	return false
}

// SetResultCode gets a reference to the given int64 and assigns it to the ResultCode field.
func (o *DtcMonitorSip) SetResultCode(v int64) {
	o.ResultCode = &v
}

// GetRetryDown returns the RetryDown field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetRetryDown() int64 {
	if o == nil || IsNil(o.RetryDown) {
		var ret int64
		return ret
	}
	return *o.RetryDown
}

// GetRetryDownOk returns a tuple with the RetryDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetRetryDownOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryDown) {
		return nil, false
	}
	return o.RetryDown, true
}

// HasRetryDown returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasRetryDown() bool {
	if o != nil && !IsNil(o.RetryDown) {
		return true
	}

	return false
}

// SetRetryDown gets a reference to the given int64 and assigns it to the RetryDown field.
func (o *DtcMonitorSip) SetRetryDown(v int64) {
	o.RetryDown = &v
}

// GetRetryUp returns the RetryUp field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetRetryUp() int64 {
	if o == nil || IsNil(o.RetryUp) {
		var ret int64
		return ret
	}
	return *o.RetryUp
}

// GetRetryUpOk returns a tuple with the RetryUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetRetryUpOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryUp) {
		return nil, false
	}
	return o.RetryUp, true
}

// HasRetryUp returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasRetryUp() bool {
	if o != nil && !IsNil(o.RetryUp) {
		return true
	}

	return false
}

// SetRetryUp gets a reference to the given int64 and assigns it to the RetryUp field.
func (o *DtcMonitorSip) SetRetryUp(v int64) {
	o.RetryUp = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *DtcMonitorSip) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetTransport() string {
	if o == nil || IsNil(o.Transport) {
		var ret string
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetTransportOk() (*string, bool) {
	if o == nil || IsNil(o.Transport) {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasTransport() bool {
	if o != nil && !IsNil(o.Transport) {
		return true
	}

	return false
}

// SetTransport gets a reference to the given string and assigns it to the Transport field.
func (o *DtcMonitorSip) SetTransport(v string) {
	o.Transport = &v
}

// GetValidateCert returns the ValidateCert field value if set, zero value otherwise.
func (o *DtcMonitorSip) GetValidateCert() bool {
	if o == nil || IsNil(o.ValidateCert) {
		var ret bool
		return ret
	}
	return *o.ValidateCert
}

// GetValidateCertOk returns a tuple with the ValidateCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSip) GetValidateCertOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateCert) {
		return nil, false
	}
	return o.ValidateCert, true
}

// HasValidateCert returns a boolean if a field has been set.
func (o *DtcMonitorSip) HasValidateCert() bool {
	if o != nil && !IsNil(o.ValidateCert) {
		return true
	}

	return false
}

// SetValidateCert gets a reference to the given bool and assigns it to the ValidateCert field.
func (o *DtcMonitorSip) SetValidateCert(v bool) {
	o.ValidateCert = &v
}

func (o DtcMonitorSip) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcMonitorSip) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Ciphers) {
		toSerialize["ciphers"] = o.Ciphers
	}
	if !IsNil(o.ClientCert) {
		toSerialize["client_cert"] = o.ClientCert
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.ResultCode) {
		toSerialize["result_code"] = o.ResultCode
	}
	if !IsNil(o.RetryDown) {
		toSerialize["retry_down"] = o.RetryDown
	}
	if !IsNil(o.RetryUp) {
		toSerialize["retry_up"] = o.RetryUp
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Transport) {
		toSerialize["transport"] = o.Transport
	}
	if !IsNil(o.ValidateCert) {
		toSerialize["validate_cert"] = o.ValidateCert
	}
	return toSerialize, nil
}

type NullableDtcMonitorSip struct {
	value *DtcMonitorSip
	isSet bool
}

func (v NullableDtcMonitorSip) Get() *DtcMonitorSip {
	return v.value
}

func (v *NullableDtcMonitorSip) Set(val *DtcMonitorSip) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcMonitorSip) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcMonitorSip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcMonitorSip(val *DtcMonitorSip) *NullableDtcMonitorSip {
	return &NullableDtcMonitorSip{value: val, isSet: true}
}

func (v NullableDtcMonitorSip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcMonitorSip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
