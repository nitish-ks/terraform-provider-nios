/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcMonitorSnmp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcMonitorSnmp{}

// DtcMonitorSnmp struct for DtcMonitorSnmp
type DtcMonitorSnmp struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for this DTC monitor; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The SNMP community string for SNMP authentication.
	Community *string `json:"community,omitempty"`
	// The SNMPv3 context.
	Context *string `json:"context,omitempty"`
	// The SNMPv3 engine identifier.
	EngineId *string `json:"engine_id,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The interval for TCP health check.
	Interval *int64 `json:"interval,omitempty"`
	// The display name for this DTC monitor.
	Name *string `json:"name,omitempty"`
	// A list of OIDs for SNMP monitoring.
	Oids []DtcMonitorSnmpOids `json:"oids,omitempty"`
	// The port value for SNMP requests.
	Port *int64 `json:"port,omitempty"`
	// The value of how many times the server should appear as down to be treated as dead after it was alive.
	RetryDown *int64 `json:"retry_down,omitempty"`
	// The value of how many times the server should appear as up to be treated as alive after it was dead.
	RetryUp *int64 `json:"retry_up,omitempty"`
	// The timeout for TCP health check in seconds.
	Timeout *int64 `json:"timeout,omitempty"`
	// The SNMPv3 user setting.
	User *string `json:"user,omitempty"`
	// The SNMP protocol version for the SNMP health check.
	Version *string `json:"version,omitempty"`
}

// NewDtcMonitorSnmp instantiates a new DtcMonitorSnmp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcMonitorSnmp() *DtcMonitorSnmp {
	this := DtcMonitorSnmp{}
	return &this
}

// NewDtcMonitorSnmpWithDefaults instantiates a new DtcMonitorSnmp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcMonitorSnmpWithDefaults() *DtcMonitorSnmp {
	this := DtcMonitorSnmp{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcMonitorSnmp) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcMonitorSnmp) SetComment(v string) {
	o.Comment = &v
}

// GetCommunity returns the Community field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetCommunity() string {
	if o == nil || IsNil(o.Community) {
		var ret string
		return ret
	}
	return *o.Community
}

// GetCommunityOk returns a tuple with the Community field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetCommunityOk() (*string, bool) {
	if o == nil || IsNil(o.Community) {
		return nil, false
	}
	return o.Community, true
}

// HasCommunity returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasCommunity() bool {
	if o != nil && !IsNil(o.Community) {
		return true
	}

	return false
}

// SetCommunity gets a reference to the given string and assigns it to the Community field.
func (o *DtcMonitorSnmp) SetCommunity(v string) {
	o.Community = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *DtcMonitorSnmp) SetContext(v string) {
	o.Context = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *DtcMonitorSnmp) SetEngineId(v string) {
	o.EngineId = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcMonitorSnmp) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DtcMonitorSnmp) SetInterval(v int64) {
	o.Interval = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcMonitorSnmp) SetName(v string) {
	o.Name = &v
}

// GetOids returns the Oids field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetOids() []DtcMonitorSnmpOids {
	if o == nil || IsNil(o.Oids) {
		var ret []DtcMonitorSnmpOids
		return ret
	}
	return o.Oids
}

// GetOidsOk returns a tuple with the Oids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetOidsOk() ([]DtcMonitorSnmpOids, bool) {
	if o == nil || IsNil(o.Oids) {
		return nil, false
	}
	return o.Oids, true
}

// HasOids returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasOids() bool {
	if o != nil && !IsNil(o.Oids) {
		return true
	}

	return false
}

// SetOids gets a reference to the given []DtcMonitorSnmpOids and assigns it to the Oids field.
func (o *DtcMonitorSnmp) SetOids(v []DtcMonitorSnmpOids) {
	o.Oids = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DtcMonitorSnmp) SetPort(v int64) {
	o.Port = &v
}

// GetRetryDown returns the RetryDown field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetRetryDown() int64 {
	if o == nil || IsNil(o.RetryDown) {
		var ret int64
		return ret
	}
	return *o.RetryDown
}

// GetRetryDownOk returns a tuple with the RetryDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetRetryDownOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryDown) {
		return nil, false
	}
	return o.RetryDown, true
}

// HasRetryDown returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasRetryDown() bool {
	if o != nil && !IsNil(o.RetryDown) {
		return true
	}

	return false
}

// SetRetryDown gets a reference to the given int64 and assigns it to the RetryDown field.
func (o *DtcMonitorSnmp) SetRetryDown(v int64) {
	o.RetryDown = &v
}

// GetRetryUp returns the RetryUp field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetRetryUp() int64 {
	if o == nil || IsNil(o.RetryUp) {
		var ret int64
		return ret
	}
	return *o.RetryUp
}

// GetRetryUpOk returns a tuple with the RetryUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetRetryUpOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryUp) {
		return nil, false
	}
	return o.RetryUp, true
}

// HasRetryUp returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasRetryUp() bool {
	if o != nil && !IsNil(o.RetryUp) {
		return true
	}

	return false
}

// SetRetryUp gets a reference to the given int64 and assigns it to the RetryUp field.
func (o *DtcMonitorSnmp) SetRetryUp(v int64) {
	o.RetryUp = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *DtcMonitorSnmp) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *DtcMonitorSnmp) SetUser(v string) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DtcMonitorSnmp) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmp) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DtcMonitorSnmp) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DtcMonitorSnmp) SetVersion(v string) {
	o.Version = &v
}

func (o DtcMonitorSnmp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcMonitorSnmp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Community) {
		toSerialize["community"] = o.Community
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Oids) {
		toSerialize["oids"] = o.Oids
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.RetryDown) {
		toSerialize["retry_down"] = o.RetryDown
	}
	if !IsNil(o.RetryUp) {
		toSerialize["retry_up"] = o.RetryUp
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDtcMonitorSnmp struct {
	value *DtcMonitorSnmp
	isSet bool
}

func (v NullableDtcMonitorSnmp) Get() *DtcMonitorSnmp {
	return v.value
}

func (v *NullableDtcMonitorSnmp) Set(val *DtcMonitorSnmp) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcMonitorSnmp) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcMonitorSnmp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcMonitorSnmp(val *DtcMonitorSnmp) *NullableDtcMonitorSnmp {
	return &NullableDtcMonitorSnmp{value: val, isSet: true}
}

func (v NullableDtcMonitorSnmp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcMonitorSnmp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
