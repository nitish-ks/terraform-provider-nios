/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcMonitorSnmpOids type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcMonitorSnmpOids{}

// DtcMonitorSnmpOids struct for DtcMonitorSnmpOids
type DtcMonitorSnmpOids struct {
	// The SNMP OID value for DTC SNMP Monitor health checks.
	Oid *string `json:"oid,omitempty"`
	// The comment for a DTC SNMP Health Monitor OID object.
	Comment *string `json:"comment,omitempty"`
	// The value of the condition type for DTC SNMP Monitor health check results.
	Type *string `json:"type,omitempty"`
	// The condition of the validation result for an SNMP health check. The following conditions can be applied to the health check results: 'ANY' accepts any response; 'EXACT' accepts result equal to 'first'; 'LEQ' accepts result which is less than 'first'; 'GEQ' accepts result which is greater than 'first'; 'RANGE' accepts result value of which is between 'first' and 'last'.
	Condition *string `json:"condition,omitempty"`
	// The condition's first term to match against the SNMP health check result.
	First *string `json:"first,omitempty"`
	// The condition's second term to match against the SNMP health check result with 'RANGE' condition.
	Last                 *string `json:"last,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DtcMonitorSnmpOids DtcMonitorSnmpOids

// NewDtcMonitorSnmpOids instantiates a new DtcMonitorSnmpOids object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcMonitorSnmpOids() *DtcMonitorSnmpOids {
	this := DtcMonitorSnmpOids{}
	return &this
}

// NewDtcMonitorSnmpOidsWithDefaults instantiates a new DtcMonitorSnmpOids object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcMonitorSnmpOidsWithDefaults() *DtcMonitorSnmpOids {
	this := DtcMonitorSnmpOids{}
	return &this
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetOid() string {
	if o == nil || IsNil(o.Oid) {
		var ret string
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetOidOk() (*string, bool) {
	if o == nil || IsNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasOid() bool {
	if o != nil && !IsNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given string and assigns it to the Oid field.
func (o *DtcMonitorSnmpOids) SetOid(v string) {
	o.Oid = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcMonitorSnmpOids) SetComment(v string) {
	o.Comment = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DtcMonitorSnmpOids) SetType(v string) {
	o.Type = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *DtcMonitorSnmpOids) SetCondition(v string) {
	o.Condition = &v
}

// GetFirst returns the First field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetFirst() string {
	if o == nil || IsNil(o.First) {
		var ret string
		return ret
	}
	return *o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetFirstOk() (*string, bool) {
	if o == nil || IsNil(o.First) {
		return nil, false
	}
	return o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasFirst() bool {
	if o != nil && !IsNil(o.First) {
		return true
	}

	return false
}

// SetFirst gets a reference to the given string and assigns it to the First field.
func (o *DtcMonitorSnmpOids) SetFirst(v string) {
	o.First = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *DtcMonitorSnmpOids) GetLast() string {
	if o == nil || IsNil(o.Last) {
		var ret string
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcMonitorSnmpOids) GetLastOk() (*string, bool) {
	if o == nil || IsNil(o.Last) {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *DtcMonitorSnmpOids) HasLast() bool {
	if o != nil && !IsNil(o.Last) {
		return true
	}

	return false
}

// SetLast gets a reference to the given string and assigns it to the Last field.
func (o *DtcMonitorSnmpOids) SetLast(v string) {
	o.Last = &v
}

func (o DtcMonitorSnmpOids) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcMonitorSnmpOids) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Oid) {
		toSerialize["oid"] = o.Oid
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.First) {
		toSerialize["first"] = o.First
	}
	if !IsNil(o.Last) {
		toSerialize["last"] = o.Last
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DtcMonitorSnmpOids) UnmarshalJSON(data []byte) (err error) {
	varDtcMonitorSnmpOids := _DtcMonitorSnmpOids{}

	err = json.Unmarshal(data, &varDtcMonitorSnmpOids)

	if err != nil {
		return err
	}

	*o = DtcMonitorSnmpOids(varDtcMonitorSnmpOids)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "oid")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "type")
		delete(additionalProperties, "condition")
		delete(additionalProperties, "first")
		delete(additionalProperties, "last")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDtcMonitorSnmpOids struct {
	value *DtcMonitorSnmpOids
	isSet bool
}

func (v NullableDtcMonitorSnmpOids) Get() *DtcMonitorSnmpOids {
	return v.value
}

func (v *NullableDtcMonitorSnmpOids) Set(val *DtcMonitorSnmpOids) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcMonitorSnmpOids) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcMonitorSnmpOids) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcMonitorSnmpOids(val *DtcMonitorSnmpOids) *NullableDtcMonitorSnmpOids {
	return &NullableDtcMonitorSnmpOids{value: val, isSet: true}
}

func (v NullableDtcMonitorSnmpOids) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcMonitorSnmpOids) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
