/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcPool{}

// DtcPool struct for DtcPool
type DtcPool struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Flag for enabling auto managing DTC Consolidated Monitors in DTC Pool.
	AutoConsolidatedMonitors *bool `json:"auto_consolidated_monitors,omitempty"`
	// A resource in the pool is available if ANY, at least QUORUM, or ALL monitors for the pool say that it is up.
	Availability *string `json:"availability,omitempty"`
	// The comment for the DTC Pool; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// List of monitors and associated members statuses of which are shared across members and consolidated in server availability determination.
	ConsolidatedMonitors []DtcPoolConsolidatedMonitors `json:"consolidated_monitors,omitempty"`
	// Determines whether the DTC Pool is disabled or not. When this is set to False, the fixed address is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	Health   *DtcPoolHealth       `json:"health,omitempty"`
	// The alternate load balancing method. Use this to select a method type from the pool if the preferred method does not return any results.
	LbAlternateMethod *string `json:"lb_alternate_method,omitempty"`
	// The alternate topology for load balancing.
	LbAlternateTopology     *string                         `json:"lb_alternate_topology,omitempty"`
	LbDynamicRatioAlternate *DtcPoolLbDynamicRatioAlternate `json:"lb_dynamic_ratio_alternate,omitempty"`
	LbDynamicRatioPreferred *DtcPoolLbDynamicRatioPreferred `json:"lb_dynamic_ratio_preferred,omitempty"`
	// The preferred load balancing method. Use this to select a method type from the pool.
	LbPreferredMethod *string `json:"lb_preferred_method,omitempty"`
	// The preferred topology for load balancing.
	LbPreferredTopology *string `json:"lb_preferred_topology,omitempty"`
	// The monitors related to pool.
	Monitors []string `json:"monitors,omitempty"`
	// The DTC Pool display name.
	Name *string `json:"name,omitempty"`
	// For availability mode QUORUM, at least this many monitors must report the resource as up for it to be available
	Quorum *int64 `json:"quorum,omitempty"`
	// The servers related to the pool.
	Servers []DtcPoolServers `json:"servers,omitempty"`
	// The Time To Live (TTL) value for the DTC Pool. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewDtcPool instantiates a new DtcPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcPool() *DtcPool {
	this := DtcPool{}
	return &this
}

// NewDtcPoolWithDefaults instantiates a new DtcPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcPoolWithDefaults() *DtcPool {
	this := DtcPool{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcPool) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcPool) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcPool) SetRef(v string) {
	o.Ref = &v
}

// GetAutoConsolidatedMonitors returns the AutoConsolidatedMonitors field value if set, zero value otherwise.
func (o *DtcPool) GetAutoConsolidatedMonitors() bool {
	if o == nil || IsNil(o.AutoConsolidatedMonitors) {
		var ret bool
		return ret
	}
	return *o.AutoConsolidatedMonitors
}

// GetAutoConsolidatedMonitorsOk returns a tuple with the AutoConsolidatedMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetAutoConsolidatedMonitorsOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoConsolidatedMonitors) {
		return nil, false
	}
	return o.AutoConsolidatedMonitors, true
}

// HasAutoConsolidatedMonitors returns a boolean if a field has been set.
func (o *DtcPool) HasAutoConsolidatedMonitors() bool {
	if o != nil && !IsNil(o.AutoConsolidatedMonitors) {
		return true
	}

	return false
}

// SetAutoConsolidatedMonitors gets a reference to the given bool and assigns it to the AutoConsolidatedMonitors field.
func (o *DtcPool) SetAutoConsolidatedMonitors(v bool) {
	o.AutoConsolidatedMonitors = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *DtcPool) GetAvailability() string {
	if o == nil || IsNil(o.Availability) {
		var ret string
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *DtcPool) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given string and assigns it to the Availability field.
func (o *DtcPool) SetAvailability(v string) {
	o.Availability = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcPool) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcPool) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcPool) SetComment(v string) {
	o.Comment = &v
}

// GetConsolidatedMonitors returns the ConsolidatedMonitors field value if set, zero value otherwise.
func (o *DtcPool) GetConsolidatedMonitors() []DtcPoolConsolidatedMonitors {
	if o == nil || IsNil(o.ConsolidatedMonitors) {
		var ret []DtcPoolConsolidatedMonitors
		return ret
	}
	return o.ConsolidatedMonitors
}

// GetConsolidatedMonitorsOk returns a tuple with the ConsolidatedMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetConsolidatedMonitorsOk() ([]DtcPoolConsolidatedMonitors, bool) {
	if o == nil || IsNil(o.ConsolidatedMonitors) {
		return nil, false
	}
	return o.ConsolidatedMonitors, true
}

// HasConsolidatedMonitors returns a boolean if a field has been set.
func (o *DtcPool) HasConsolidatedMonitors() bool {
	if o != nil && !IsNil(o.ConsolidatedMonitors) {
		return true
	}

	return false
}

// SetConsolidatedMonitors gets a reference to the given []DtcPoolConsolidatedMonitors and assigns it to the ConsolidatedMonitors field.
func (o *DtcPool) SetConsolidatedMonitors(v []DtcPoolConsolidatedMonitors) {
	o.ConsolidatedMonitors = v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DtcPool) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DtcPool) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DtcPool) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcPool) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcPool) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcPool) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *DtcPool) GetHealth() DtcPoolHealth {
	if o == nil || IsNil(o.Health) {
		var ret DtcPoolHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetHealthOk() (*DtcPoolHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *DtcPool) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given DtcPoolHealth and assigns it to the Health field.
func (o *DtcPool) SetHealth(v DtcPoolHealth) {
	o.Health = &v
}

// GetLbAlternateMethod returns the LbAlternateMethod field value if set, zero value otherwise.
func (o *DtcPool) GetLbAlternateMethod() string {
	if o == nil || IsNil(o.LbAlternateMethod) {
		var ret string
		return ret
	}
	return *o.LbAlternateMethod
}

// GetLbAlternateMethodOk returns a tuple with the LbAlternateMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbAlternateMethodOk() (*string, bool) {
	if o == nil || IsNil(o.LbAlternateMethod) {
		return nil, false
	}
	return o.LbAlternateMethod, true
}

// HasLbAlternateMethod returns a boolean if a field has been set.
func (o *DtcPool) HasLbAlternateMethod() bool {
	if o != nil && !IsNil(o.LbAlternateMethod) {
		return true
	}

	return false
}

// SetLbAlternateMethod gets a reference to the given string and assigns it to the LbAlternateMethod field.
func (o *DtcPool) SetLbAlternateMethod(v string) {
	o.LbAlternateMethod = &v
}

// GetLbAlternateTopology returns the LbAlternateTopology field value if set, zero value otherwise.
func (o *DtcPool) GetLbAlternateTopology() string {
	if o == nil || IsNil(o.LbAlternateTopology) {
		var ret string
		return ret
	}
	return *o.LbAlternateTopology
}

// GetLbAlternateTopologyOk returns a tuple with the LbAlternateTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbAlternateTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.LbAlternateTopology) {
		return nil, false
	}
	return o.LbAlternateTopology, true
}

// HasLbAlternateTopology returns a boolean if a field has been set.
func (o *DtcPool) HasLbAlternateTopology() bool {
	if o != nil && !IsNil(o.LbAlternateTopology) {
		return true
	}

	return false
}

// SetLbAlternateTopology gets a reference to the given string and assigns it to the LbAlternateTopology field.
func (o *DtcPool) SetLbAlternateTopology(v string) {
	o.LbAlternateTopology = &v
}

// GetLbDynamicRatioAlternate returns the LbDynamicRatioAlternate field value if set, zero value otherwise.
func (o *DtcPool) GetLbDynamicRatioAlternate() DtcPoolLbDynamicRatioAlternate {
	if o == nil || IsNil(o.LbDynamicRatioAlternate) {
		var ret DtcPoolLbDynamicRatioAlternate
		return ret
	}
	return *o.LbDynamicRatioAlternate
}

// GetLbDynamicRatioAlternateOk returns a tuple with the LbDynamicRatioAlternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbDynamicRatioAlternateOk() (*DtcPoolLbDynamicRatioAlternate, bool) {
	if o == nil || IsNil(o.LbDynamicRatioAlternate) {
		return nil, false
	}
	return o.LbDynamicRatioAlternate, true
}

// HasLbDynamicRatioAlternate returns a boolean if a field has been set.
func (o *DtcPool) HasLbDynamicRatioAlternate() bool {
	if o != nil && !IsNil(o.LbDynamicRatioAlternate) {
		return true
	}

	return false
}

// SetLbDynamicRatioAlternate gets a reference to the given DtcPoolLbDynamicRatioAlternate and assigns it to the LbDynamicRatioAlternate field.
func (o *DtcPool) SetLbDynamicRatioAlternate(v DtcPoolLbDynamicRatioAlternate) {
	o.LbDynamicRatioAlternate = &v
}

// GetLbDynamicRatioPreferred returns the LbDynamicRatioPreferred field value if set, zero value otherwise.
func (o *DtcPool) GetLbDynamicRatioPreferred() DtcPoolLbDynamicRatioPreferred {
	if o == nil || IsNil(o.LbDynamicRatioPreferred) {
		var ret DtcPoolLbDynamicRatioPreferred
		return ret
	}
	return *o.LbDynamicRatioPreferred
}

// GetLbDynamicRatioPreferredOk returns a tuple with the LbDynamicRatioPreferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbDynamicRatioPreferredOk() (*DtcPoolLbDynamicRatioPreferred, bool) {
	if o == nil || IsNil(o.LbDynamicRatioPreferred) {
		return nil, false
	}
	return o.LbDynamicRatioPreferred, true
}

// HasLbDynamicRatioPreferred returns a boolean if a field has been set.
func (o *DtcPool) HasLbDynamicRatioPreferred() bool {
	if o != nil && !IsNil(o.LbDynamicRatioPreferred) {
		return true
	}

	return false
}

// SetLbDynamicRatioPreferred gets a reference to the given DtcPoolLbDynamicRatioPreferred and assigns it to the LbDynamicRatioPreferred field.
func (o *DtcPool) SetLbDynamicRatioPreferred(v DtcPoolLbDynamicRatioPreferred) {
	o.LbDynamicRatioPreferred = &v
}

// GetLbPreferredMethod returns the LbPreferredMethod field value if set, zero value otherwise.
func (o *DtcPool) GetLbPreferredMethod() string {
	if o == nil || IsNil(o.LbPreferredMethod) {
		var ret string
		return ret
	}
	return *o.LbPreferredMethod
}

// GetLbPreferredMethodOk returns a tuple with the LbPreferredMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbPreferredMethodOk() (*string, bool) {
	if o == nil || IsNil(o.LbPreferredMethod) {
		return nil, false
	}
	return o.LbPreferredMethod, true
}

// HasLbPreferredMethod returns a boolean if a field has been set.
func (o *DtcPool) HasLbPreferredMethod() bool {
	if o != nil && !IsNil(o.LbPreferredMethod) {
		return true
	}

	return false
}

// SetLbPreferredMethod gets a reference to the given string and assigns it to the LbPreferredMethod field.
func (o *DtcPool) SetLbPreferredMethod(v string) {
	o.LbPreferredMethod = &v
}

// GetLbPreferredTopology returns the LbPreferredTopology field value if set, zero value otherwise.
func (o *DtcPool) GetLbPreferredTopology() string {
	if o == nil || IsNil(o.LbPreferredTopology) {
		var ret string
		return ret
	}
	return *o.LbPreferredTopology
}

// GetLbPreferredTopologyOk returns a tuple with the LbPreferredTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetLbPreferredTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.LbPreferredTopology) {
		return nil, false
	}
	return o.LbPreferredTopology, true
}

// HasLbPreferredTopology returns a boolean if a field has been set.
func (o *DtcPool) HasLbPreferredTopology() bool {
	if o != nil && !IsNil(o.LbPreferredTopology) {
		return true
	}

	return false
}

// SetLbPreferredTopology gets a reference to the given string and assigns it to the LbPreferredTopology field.
func (o *DtcPool) SetLbPreferredTopology(v string) {
	o.LbPreferredTopology = &v
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *DtcPool) GetMonitors() []string {
	if o == nil || IsNil(o.Monitors) {
		var ret []string
		return ret
	}
	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetMonitorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Monitors) {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *DtcPool) HasMonitors() bool {
	if o != nil && !IsNil(o.Monitors) {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given []string and assigns it to the Monitors field.
func (o *DtcPool) SetMonitors(v []string) {
	o.Monitors = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcPool) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcPool) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcPool) SetName(v string) {
	o.Name = &v
}

// GetQuorum returns the Quorum field value if set, zero value otherwise.
func (o *DtcPool) GetQuorum() int64 {
	if o == nil || IsNil(o.Quorum) {
		var ret int64
		return ret
	}
	return *o.Quorum
}

// GetQuorumOk returns a tuple with the Quorum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetQuorumOk() (*int64, bool) {
	if o == nil || IsNil(o.Quorum) {
		return nil, false
	}
	return o.Quorum, true
}

// HasQuorum returns a boolean if a field has been set.
func (o *DtcPool) HasQuorum() bool {
	if o != nil && !IsNil(o.Quorum) {
		return true
	}

	return false
}

// SetQuorum gets a reference to the given int64 and assigns it to the Quorum field.
func (o *DtcPool) SetQuorum(v int64) {
	o.Quorum = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *DtcPool) GetServers() []DtcPoolServers {
	if o == nil || IsNil(o.Servers) {
		var ret []DtcPoolServers
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetServersOk() ([]DtcPoolServers, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *DtcPool) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []DtcPoolServers and assigns it to the Servers field.
func (o *DtcPool) SetServers(v []DtcPoolServers) {
	o.Servers = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DtcPool) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DtcPool) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DtcPool) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *DtcPool) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPool) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *DtcPool) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *DtcPool) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o DtcPool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoConsolidatedMonitors) {
		toSerialize["auto_consolidated_monitors"] = o.AutoConsolidatedMonitors
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ConsolidatedMonitors) {
		toSerialize["consolidated_monitors"] = o.ConsolidatedMonitors
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.LbAlternateMethod) {
		toSerialize["lb_alternate_method"] = o.LbAlternateMethod
	}
	if !IsNil(o.LbAlternateTopology) {
		toSerialize["lb_alternate_topology"] = o.LbAlternateTopology
	}
	if !IsNil(o.LbDynamicRatioAlternate) {
		toSerialize["lb_dynamic_ratio_alternate"] = o.LbDynamicRatioAlternate
	}
	if !IsNil(o.LbDynamicRatioPreferred) {
		toSerialize["lb_dynamic_ratio_preferred"] = o.LbDynamicRatioPreferred
	}
	if !IsNil(o.LbPreferredMethod) {
		toSerialize["lb_preferred_method"] = o.LbPreferredMethod
	}
	if !IsNil(o.LbPreferredTopology) {
		toSerialize["lb_preferred_topology"] = o.LbPreferredTopology
	}
	if !IsNil(o.Monitors) {
		toSerialize["monitors"] = o.Monitors
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quorum) {
		toSerialize["quorum"] = o.Quorum
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableDtcPool struct {
	value *DtcPool
	isSet bool
}

func (v NullableDtcPool) Get() *DtcPool {
	return v.value
}

func (v *NullableDtcPool) Set(val *DtcPool) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcPool) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcPool(val *DtcPool) *NullableDtcPool {
	return &NullableDtcPool{value: val, isSet: true}
}

func (v NullableDtcPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
