/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcPoolLbDynamicRatioPreferred type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcPoolLbDynamicRatioPreferred{}

// DtcPoolLbDynamicRatioPreferred struct for DtcPoolLbDynamicRatioPreferred
type DtcPoolLbDynamicRatioPreferred struct {
	// The method of the DTC dynamic ratio load balancing.
	Method *string `json:"method,omitempty"`
	// The DTC monitor output of which will be used for dynamic ratio load balancing.
	Monitor *string `json:"monitor,omitempty"`
	// The metric of the DTC SNMP monitor that will be used for dynamic weighing.
	MonitorMetric *string `json:"monitor_metric,omitempty"`
	// The DTC monitor weight. 'PRIORITY' means that all clients will be forwarded to the least loaded server. 'RATIO' means that distribution will be calculated based on dynamic weights.
	MonitorWeighing *string `json:"monitor_weighing,omitempty"`
	// Determines whether the inverted values of the DTC SNMP monitor metric will be used.
	InvertMonitorMetric  *bool `json:"invert_monitor_metric,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DtcPoolLbDynamicRatioPreferred DtcPoolLbDynamicRatioPreferred

// NewDtcPoolLbDynamicRatioPreferred instantiates a new DtcPoolLbDynamicRatioPreferred object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcPoolLbDynamicRatioPreferred() *DtcPoolLbDynamicRatioPreferred {
	this := DtcPoolLbDynamicRatioPreferred{}
	return &this
}

// NewDtcPoolLbDynamicRatioPreferredWithDefaults instantiates a new DtcPoolLbDynamicRatioPreferred object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcPoolLbDynamicRatioPreferredWithDefaults() *DtcPoolLbDynamicRatioPreferred {
	this := DtcPoolLbDynamicRatioPreferred{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *DtcPoolLbDynamicRatioPreferred) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPoolLbDynamicRatioPreferred) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *DtcPoolLbDynamicRatioPreferred) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *DtcPoolLbDynamicRatioPreferred) SetMethod(v string) {
	o.Method = &v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitor() string {
	if o == nil || IsNil(o.Monitor) {
		var ret string
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitorOk() (*string, bool) {
	if o == nil || IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *DtcPoolLbDynamicRatioPreferred) HasMonitor() bool {
	if o != nil && !IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given string and assigns it to the Monitor field.
func (o *DtcPoolLbDynamicRatioPreferred) SetMonitor(v string) {
	o.Monitor = &v
}

// GetMonitorMetric returns the MonitorMetric field value if set, zero value otherwise.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitorMetric() string {
	if o == nil || IsNil(o.MonitorMetric) {
		var ret string
		return ret
	}
	return *o.MonitorMetric
}

// GetMonitorMetricOk returns a tuple with the MonitorMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitorMetricOk() (*string, bool) {
	if o == nil || IsNil(o.MonitorMetric) {
		return nil, false
	}
	return o.MonitorMetric, true
}

// HasMonitorMetric returns a boolean if a field has been set.
func (o *DtcPoolLbDynamicRatioPreferred) HasMonitorMetric() bool {
	if o != nil && !IsNil(o.MonitorMetric) {
		return true
	}

	return false
}

// SetMonitorMetric gets a reference to the given string and assigns it to the MonitorMetric field.
func (o *DtcPoolLbDynamicRatioPreferred) SetMonitorMetric(v string) {
	o.MonitorMetric = &v
}

// GetMonitorWeighing returns the MonitorWeighing field value if set, zero value otherwise.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitorWeighing() string {
	if o == nil || IsNil(o.MonitorWeighing) {
		var ret string
		return ret
	}
	return *o.MonitorWeighing
}

// GetMonitorWeighingOk returns a tuple with the MonitorWeighing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPoolLbDynamicRatioPreferred) GetMonitorWeighingOk() (*string, bool) {
	if o == nil || IsNil(o.MonitorWeighing) {
		return nil, false
	}
	return o.MonitorWeighing, true
}

// HasMonitorWeighing returns a boolean if a field has been set.
func (o *DtcPoolLbDynamicRatioPreferred) HasMonitorWeighing() bool {
	if o != nil && !IsNil(o.MonitorWeighing) {
		return true
	}

	return false
}

// SetMonitorWeighing gets a reference to the given string and assigns it to the MonitorWeighing field.
func (o *DtcPoolLbDynamicRatioPreferred) SetMonitorWeighing(v string) {
	o.MonitorWeighing = &v
}

// GetInvertMonitorMetric returns the InvertMonitorMetric field value if set, zero value otherwise.
func (o *DtcPoolLbDynamicRatioPreferred) GetInvertMonitorMetric() bool {
	if o == nil || IsNil(o.InvertMonitorMetric) {
		var ret bool
		return ret
	}
	return *o.InvertMonitorMetric
}

// GetInvertMonitorMetricOk returns a tuple with the InvertMonitorMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcPoolLbDynamicRatioPreferred) GetInvertMonitorMetricOk() (*bool, bool) {
	if o == nil || IsNil(o.InvertMonitorMetric) {
		return nil, false
	}
	return o.InvertMonitorMetric, true
}

// HasInvertMonitorMetric returns a boolean if a field has been set.
func (o *DtcPoolLbDynamicRatioPreferred) HasInvertMonitorMetric() bool {
	if o != nil && !IsNil(o.InvertMonitorMetric) {
		return true
	}

	return false
}

// SetInvertMonitorMetric gets a reference to the given bool and assigns it to the InvertMonitorMetric field.
func (o *DtcPoolLbDynamicRatioPreferred) SetInvertMonitorMetric(v bool) {
	o.InvertMonitorMetric = &v
}

func (o DtcPoolLbDynamicRatioPreferred) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcPoolLbDynamicRatioPreferred) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !IsNil(o.MonitorMetric) {
		toSerialize["monitor_metric"] = o.MonitorMetric
	}
	if !IsNil(o.MonitorWeighing) {
		toSerialize["monitor_weighing"] = o.MonitorWeighing
	}
	if !IsNil(o.InvertMonitorMetric) {
		toSerialize["invert_monitor_metric"] = o.InvertMonitorMetric
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DtcPoolLbDynamicRatioPreferred) UnmarshalJSON(data []byte) (err error) {
	varDtcPoolLbDynamicRatioPreferred := _DtcPoolLbDynamicRatioPreferred{}

	err = json.Unmarshal(data, &varDtcPoolLbDynamicRatioPreferred)

	if err != nil {
		return err
	}

	*o = DtcPoolLbDynamicRatioPreferred(varDtcPoolLbDynamicRatioPreferred)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "method")
		delete(additionalProperties, "monitor")
		delete(additionalProperties, "monitor_metric")
		delete(additionalProperties, "monitor_weighing")
		delete(additionalProperties, "invert_monitor_metric")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDtcPoolLbDynamicRatioPreferred struct {
	value *DtcPoolLbDynamicRatioPreferred
	isSet bool
}

func (v NullableDtcPoolLbDynamicRatioPreferred) Get() *DtcPoolLbDynamicRatioPreferred {
	return v.value
}

func (v *NullableDtcPoolLbDynamicRatioPreferred) Set(val *DtcPoolLbDynamicRatioPreferred) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcPoolLbDynamicRatioPreferred) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcPoolLbDynamicRatioPreferred) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcPoolLbDynamicRatioPreferred(val *DtcPoolLbDynamicRatioPreferred) *NullableDtcPoolLbDynamicRatioPreferred {
	return &NullableDtcPoolLbDynamicRatioPreferred{value: val, isSet: true}
}

func (v NullableDtcPoolLbDynamicRatioPreferred) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcPoolLbDynamicRatioPreferred) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
