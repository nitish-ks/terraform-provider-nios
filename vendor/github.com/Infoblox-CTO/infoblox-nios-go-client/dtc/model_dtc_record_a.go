/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcRecordA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcRecordA{}

// DtcRecordA struct for DtcRecordA
type DtcRecordA struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Flag that indicates whether this record was automatically created by NIOS.
	AutoCreated *string `json:"auto_created,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The name of the DTC Server object with which the DTC record is associated.
	DtcServer *string `json:"dtc_server,omitempty"`
	// The IPv4 Address of the domain name.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// The Time to Live (TTL) value.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewDtcRecordA instantiates a new DtcRecordA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcRecordA() *DtcRecordA {
	this := DtcRecordA{}
	return &this
}

// NewDtcRecordAWithDefaults instantiates a new DtcRecordA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcRecordAWithDefaults() *DtcRecordA {
	this := DtcRecordA{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcRecordA) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcRecordA) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcRecordA) SetRef(v string) {
	o.Ref = &v
}

// GetAutoCreated returns the AutoCreated field value if set, zero value otherwise.
func (o *DtcRecordA) GetAutoCreated() string {
	if o == nil || IsNil(o.AutoCreated) {
		var ret string
		return ret
	}
	return *o.AutoCreated
}

// GetAutoCreatedOk returns a tuple with the AutoCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetAutoCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.AutoCreated) {
		return nil, false
	}
	return o.AutoCreated, true
}

// HasAutoCreated returns a boolean if a field has been set.
func (o *DtcRecordA) HasAutoCreated() bool {
	if o != nil && !IsNil(o.AutoCreated) {
		return true
	}

	return false
}

// SetAutoCreated gets a reference to the given string and assigns it to the AutoCreated field.
func (o *DtcRecordA) SetAutoCreated(v string) {
	o.AutoCreated = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcRecordA) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcRecordA) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcRecordA) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DtcRecordA) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DtcRecordA) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DtcRecordA) SetDisable(v bool) {
	o.Disable = &v
}

// GetDtcServer returns the DtcServer field value if set, zero value otherwise.
func (o *DtcRecordA) GetDtcServer() string {
	if o == nil || IsNil(o.DtcServer) {
		var ret string
		return ret
	}
	return *o.DtcServer
}

// GetDtcServerOk returns a tuple with the DtcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetDtcServerOk() (*string, bool) {
	if o == nil || IsNil(o.DtcServer) {
		return nil, false
	}
	return o.DtcServer, true
}

// HasDtcServer returns a boolean if a field has been set.
func (o *DtcRecordA) HasDtcServer() bool {
	if o != nil && !IsNil(o.DtcServer) {
		return true
	}

	return false
}

// SetDtcServer gets a reference to the given string and assigns it to the DtcServer field.
func (o *DtcRecordA) SetDtcServer(v string) {
	o.DtcServer = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *DtcRecordA) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *DtcRecordA) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *DtcRecordA) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DtcRecordA) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DtcRecordA) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DtcRecordA) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *DtcRecordA) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordA) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *DtcRecordA) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *DtcRecordA) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o DtcRecordA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcRecordA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoCreated) {
		toSerialize["auto_created"] = o.AutoCreated
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DtcServer) {
		toSerialize["dtc_server"] = o.DtcServer
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableDtcRecordA struct {
	value *DtcRecordA
	isSet bool
}

func (v NullableDtcRecordA) Get() *DtcRecordA {
	return v.value
}

func (v *NullableDtcRecordA) Set(val *DtcRecordA) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcRecordA) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcRecordA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcRecordA(val *DtcRecordA) *NullableDtcRecordA {
	return &NullableDtcRecordA{value: val, isSet: true}
}

func (v NullableDtcRecordA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcRecordA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
