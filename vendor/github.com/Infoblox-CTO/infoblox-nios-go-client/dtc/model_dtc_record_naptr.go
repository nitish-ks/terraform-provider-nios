/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcRecordNaptr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcRecordNaptr{}

// DtcRecordNaptr struct for DtcRecordNaptr
type DtcRecordNaptr struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The name of the DTC Server object with which the DTC record is associated.
	DtcServer *string `json:"dtc_server,omitempty"`
	// The flags used to control the interpretation of the fields for an NAPTR record object. Supported values for the flags field are \"U\", \"S\", \"P\" and \"A\".
	Flags *string `json:"flags,omitempty"`
	// The order parameter of the NAPTR records. This parameter specifies the order in which the NAPTR rules are applied when multiple rules are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.
	Order *int64 `json:"order,omitempty"`
	// The preference of the NAPTR record. The preference field determines the order the NAPTR records are processed when multiple records with the same order parameter are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.
	Preference *int64 `json:"preference,omitempty"`
	// The regular expression-based rewriting rule of the NAPTR record. This should be a POSIX compliant regular expression, including the substitution rule and flags. Refer to RFC 2915 for the field syntax details.
	Regexp *string `json:"regexp,omitempty"`
	// The replacement field of the NAPTR record object. For nonterminal NAPTR records, this field specifies the next domain name to look up. This value can be in unicode format.
	Replacement *string `json:"replacement,omitempty"`
	// The services field of the NAPTR record object; maximum 128 characters. The services field contains protocol and service identifiers, such as \"http+E2U\" or \"SIPS+D2T\".
	Services *string `json:"services,omitempty"`
	// The Time to Live (TTL) value.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
}

// NewDtcRecordNaptr instantiates a new DtcRecordNaptr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcRecordNaptr() *DtcRecordNaptr {
	this := DtcRecordNaptr{}
	return &this
}

// NewDtcRecordNaptrWithDefaults instantiates a new DtcRecordNaptr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcRecordNaptrWithDefaults() *DtcRecordNaptr {
	this := DtcRecordNaptr{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcRecordNaptr) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcRecordNaptr) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DtcRecordNaptr) SetDisable(v bool) {
	o.Disable = &v
}

// GetDtcServer returns the DtcServer field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetDtcServer() string {
	if o == nil || IsNil(o.DtcServer) {
		var ret string
		return ret
	}
	return *o.DtcServer
}

// GetDtcServerOk returns a tuple with the DtcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetDtcServerOk() (*string, bool) {
	if o == nil || IsNil(o.DtcServer) {
		return nil, false
	}
	return o.DtcServer, true
}

// HasDtcServer returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasDtcServer() bool {
	if o != nil && !IsNil(o.DtcServer) {
		return true
	}

	return false
}

// SetDtcServer gets a reference to the given string and assigns it to the DtcServer field.
func (o *DtcRecordNaptr) SetDtcServer(v string) {
	o.DtcServer = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetFlags() string {
	if o == nil || IsNil(o.Flags) {
		var ret string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetFlagsOk() (*string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given string and assigns it to the Flags field.
func (o *DtcRecordNaptr) SetFlags(v string) {
	o.Flags = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetOrder() int64 {
	if o == nil || IsNil(o.Order) {
		var ret int64
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetOrderOk() (*int64, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int64 and assigns it to the Order field.
func (o *DtcRecordNaptr) SetOrder(v int64) {
	o.Order = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetPreference() int64 {
	if o == nil || IsNil(o.Preference) {
		var ret int64
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetPreferenceOk() (*int64, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given int64 and assigns it to the Preference field.
func (o *DtcRecordNaptr) SetPreference(v int64) {
	o.Preference = &v
}

// GetRegexp returns the Regexp field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetRegexp() string {
	if o == nil || IsNil(o.Regexp) {
		var ret string
		return ret
	}
	return *o.Regexp
}

// GetRegexpOk returns a tuple with the Regexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.Regexp) {
		return nil, false
	}
	return o.Regexp, true
}

// HasRegexp returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasRegexp() bool {
	if o != nil && !IsNil(o.Regexp) {
		return true
	}

	return false
}

// SetRegexp gets a reference to the given string and assigns it to the Regexp field.
func (o *DtcRecordNaptr) SetRegexp(v string) {
	o.Regexp = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetReplacement() string {
	if o == nil || IsNil(o.Replacement) {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetReplacementOk() (*string, bool) {
	if o == nil || IsNil(o.Replacement) {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasReplacement() bool {
	if o != nil && !IsNil(o.Replacement) {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *DtcRecordNaptr) SetReplacement(v string) {
	o.Replacement = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetServices() string {
	if o == nil || IsNil(o.Services) {
		var ret string
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetServicesOk() (*string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given string and assigns it to the Services field.
func (o *DtcRecordNaptr) SetServices(v string) {
	o.Services = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DtcRecordNaptr) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *DtcRecordNaptr) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcRecordNaptr) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *DtcRecordNaptr) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *DtcRecordNaptr) SetUseTtl(v bool) {
	o.UseTtl = &v
}

func (o DtcRecordNaptr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcRecordNaptr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DtcServer) {
		toSerialize["dtc_server"] = o.DtcServer
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Regexp) {
		toSerialize["regexp"] = o.Regexp
	}
	if !IsNil(o.Replacement) {
		toSerialize["replacement"] = o.Replacement
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	return toSerialize, nil
}

type NullableDtcRecordNaptr struct {
	value *DtcRecordNaptr
	isSet bool
}

func (v NullableDtcRecordNaptr) Get() *DtcRecordNaptr {
	return v.value
}

func (v *NullableDtcRecordNaptr) Set(val *DtcRecordNaptr) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcRecordNaptr) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcRecordNaptr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcRecordNaptr(val *DtcRecordNaptr) *NullableDtcRecordNaptr {
	return &NullableDtcRecordNaptr{value: val, isSet: true}
}

func (v NullableDtcRecordNaptr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcRecordNaptr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
