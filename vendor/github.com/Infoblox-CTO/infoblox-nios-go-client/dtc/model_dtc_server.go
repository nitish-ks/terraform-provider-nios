/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcServer{}

// DtcServer struct for DtcServer
type DtcServer struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Enabling this option will auto-create a single read-only A/AAAA/CNAME record corresponding to the configured hostname and update it if the hostname changes.
	AutoCreateHostRecord *bool `json:"auto_create_host_record,omitempty"`
	// Comment for the DTC Server; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether the DTC Server is disabled or not. When this is set to False, the fixed address is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	Health   *DtcServerHealth     `json:"health,omitempty"`
	// The address or FQDN of the server.
	Host *string `json:"host,omitempty"`
	// List of IP/FQDN and monitor pairs to be used for additional monitoring.
	Monitors []DtcServerMonitors `json:"monitors,omitempty"`
	// The DTC Server display name.
	Name *string `json:"name,omitempty"`
	// The hostname for Server Name Indication (SNI) in FQDN format.
	SniHostname *string `json:"sni_hostname,omitempty"`
	// Use flag for: sni_hostname
	UseSniHostname *bool `json:"use_sni_hostname,omitempty"`
}

// NewDtcServer instantiates a new DtcServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcServer() *DtcServer {
	this := DtcServer{}
	return &this
}

// NewDtcServerWithDefaults instantiates a new DtcServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcServerWithDefaults() *DtcServer {
	this := DtcServer{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcServer) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcServer) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcServer) SetRef(v string) {
	o.Ref = &v
}

// GetAutoCreateHostRecord returns the AutoCreateHostRecord field value if set, zero value otherwise.
func (o *DtcServer) GetAutoCreateHostRecord() bool {
	if o == nil || IsNil(o.AutoCreateHostRecord) {
		var ret bool
		return ret
	}
	return *o.AutoCreateHostRecord
}

// GetAutoCreateHostRecordOk returns a tuple with the AutoCreateHostRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetAutoCreateHostRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateHostRecord) {
		return nil, false
	}
	return o.AutoCreateHostRecord, true
}

// HasAutoCreateHostRecord returns a boolean if a field has been set.
func (o *DtcServer) HasAutoCreateHostRecord() bool {
	if o != nil && !IsNil(o.AutoCreateHostRecord) {
		return true
	}

	return false
}

// SetAutoCreateHostRecord gets a reference to the given bool and assigns it to the AutoCreateHostRecord field.
func (o *DtcServer) SetAutoCreateHostRecord(v bool) {
	o.AutoCreateHostRecord = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcServer) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcServer) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcServer) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DtcServer) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DtcServer) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DtcServer) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *DtcServer) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *DtcServer) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *DtcServer) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *DtcServer) GetHealth() DtcServerHealth {
	if o == nil || IsNil(o.Health) {
		var ret DtcServerHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetHealthOk() (*DtcServerHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *DtcServer) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given DtcServerHealth and assigns it to the Health field.
func (o *DtcServer) SetHealth(v DtcServerHealth) {
	o.Health = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *DtcServer) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *DtcServer) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *DtcServer) SetHost(v string) {
	o.Host = &v
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *DtcServer) GetMonitors() []DtcServerMonitors {
	if o == nil || IsNil(o.Monitors) {
		var ret []DtcServerMonitors
		return ret
	}
	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetMonitorsOk() ([]DtcServerMonitors, bool) {
	if o == nil || IsNil(o.Monitors) {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *DtcServer) HasMonitors() bool {
	if o != nil && !IsNil(o.Monitors) {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given []DtcServerMonitors and assigns it to the Monitors field.
func (o *DtcServer) SetMonitors(v []DtcServerMonitors) {
	o.Monitors = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcServer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcServer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcServer) SetName(v string) {
	o.Name = &v
}

// GetSniHostname returns the SniHostname field value if set, zero value otherwise.
func (o *DtcServer) GetSniHostname() string {
	if o == nil || IsNil(o.SniHostname) {
		var ret string
		return ret
	}
	return *o.SniHostname
}

// GetSniHostnameOk returns a tuple with the SniHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetSniHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.SniHostname) {
		return nil, false
	}
	return o.SniHostname, true
}

// HasSniHostname returns a boolean if a field has been set.
func (o *DtcServer) HasSniHostname() bool {
	if o != nil && !IsNil(o.SniHostname) {
		return true
	}

	return false
}

// SetSniHostname gets a reference to the given string and assigns it to the SniHostname field.
func (o *DtcServer) SetSniHostname(v string) {
	o.SniHostname = &v
}

// GetUseSniHostname returns the UseSniHostname field value if set, zero value otherwise.
func (o *DtcServer) GetUseSniHostname() bool {
	if o == nil || IsNil(o.UseSniHostname) {
		var ret bool
		return ret
	}
	return *o.UseSniHostname
}

// GetUseSniHostnameOk returns a tuple with the UseSniHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServer) GetUseSniHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSniHostname) {
		return nil, false
	}
	return o.UseSniHostname, true
}

// HasUseSniHostname returns a boolean if a field has been set.
func (o *DtcServer) HasUseSniHostname() bool {
	if o != nil && !IsNil(o.UseSniHostname) {
		return true
	}

	return false
}

// SetUseSniHostname gets a reference to the given bool and assigns it to the UseSniHostname field.
func (o *DtcServer) SetUseSniHostname(v bool) {
	o.UseSniHostname = &v
}

func (o DtcServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoCreateHostRecord) {
		toSerialize["auto_create_host_record"] = o.AutoCreateHostRecord
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Monitors) {
		toSerialize["monitors"] = o.Monitors
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SniHostname) {
		toSerialize["sni_hostname"] = o.SniHostname
	}
	if !IsNil(o.UseSniHostname) {
		toSerialize["use_sni_hostname"] = o.UseSniHostname
	}
	return toSerialize, nil
}

type NullableDtcServer struct {
	value *DtcServer
	isSet bool
}

func (v NullableDtcServer) Get() *DtcServer {
	return v.value
}

func (v *NullableDtcServer) Set(val *DtcServer) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcServer) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcServer(val *DtcServer) *NullableDtcServer {
	return &NullableDtcServer{value: val, isSet: true}
}

func (v NullableDtcServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
