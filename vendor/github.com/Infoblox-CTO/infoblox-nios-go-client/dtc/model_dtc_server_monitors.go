/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcServerMonitors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcServerMonitors{}

// DtcServerMonitors struct for DtcServerMonitors
type DtcServerMonitors struct {
	// The monitor related to server.
	Monitor *string `json:"monitor,omitempty"`
	// IP address or FQDN of the server used for monitoring.
	Host                 *string `json:"host,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DtcServerMonitors DtcServerMonitors

// NewDtcServerMonitors instantiates a new DtcServerMonitors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcServerMonitors() *DtcServerMonitors {
	this := DtcServerMonitors{}
	return &this
}

// NewDtcServerMonitorsWithDefaults instantiates a new DtcServerMonitors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcServerMonitorsWithDefaults() *DtcServerMonitors {
	this := DtcServerMonitors{}
	return &this
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *DtcServerMonitors) GetMonitor() string {
	if o == nil || IsNil(o.Monitor) {
		var ret string
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServerMonitors) GetMonitorOk() (*string, bool) {
	if o == nil || IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *DtcServerMonitors) HasMonitor() bool {
	if o != nil && !IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given string and assigns it to the Monitor field.
func (o *DtcServerMonitors) SetMonitor(v string) {
	o.Monitor = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *DtcServerMonitors) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcServerMonitors) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *DtcServerMonitors) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *DtcServerMonitors) SetHost(v string) {
	o.Host = &v
}

func (o DtcServerMonitors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcServerMonitors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DtcServerMonitors) UnmarshalJSON(data []byte) (err error) {
	varDtcServerMonitors := _DtcServerMonitors{}

	err = json.Unmarshal(data, &varDtcServerMonitors)

	if err != nil {
		return err
	}

	*o = DtcServerMonitors(varDtcServerMonitors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "monitor")
		delete(additionalProperties, "host")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDtcServerMonitors struct {
	value *DtcServerMonitors
	isSet bool
}

func (v NullableDtcServerMonitors) Get() *DtcServerMonitors {
	return v.value
}

func (v *NullableDtcServerMonitors) Set(val *DtcServerMonitors) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcServerMonitors) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcServerMonitors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcServerMonitors(val *DtcServerMonitors) *NullableDtcServerMonitors {
	return &NullableDtcServerMonitors{value: val, isSet: true}
}

func (v NullableDtcServerMonitors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcServerMonitors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
