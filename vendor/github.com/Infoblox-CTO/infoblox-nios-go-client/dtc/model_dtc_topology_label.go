/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcTopologyLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcTopologyLabel{}

// DtcTopologyLabel struct for DtcTopologyLabel
type DtcTopologyLabel struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The name of the field in the Topology database the label was obtained from.
	Field *string `json:"field,omitempty"`
	// The DTC Topology label name.
	Label *string `json:"label,omitempty"`
}

// NewDtcTopologyLabel instantiates a new DtcTopologyLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcTopologyLabel() *DtcTopologyLabel {
	this := DtcTopologyLabel{}
	return &this
}

// NewDtcTopologyLabelWithDefaults instantiates a new DtcTopologyLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcTopologyLabelWithDefaults() *DtcTopologyLabel {
	this := DtcTopologyLabel{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcTopologyLabel) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyLabel) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcTopologyLabel) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcTopologyLabel) SetRef(v string) {
	o.Ref = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *DtcTopologyLabel) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyLabel) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *DtcTopologyLabel) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *DtcTopologyLabel) SetField(v string) {
	o.Field = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DtcTopologyLabel) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyLabel) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DtcTopologyLabel) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DtcTopologyLabel) SetLabel(v string) {
	o.Label = &v
}

func (o DtcTopologyLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcTopologyLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableDtcTopologyLabel struct {
	value *DtcTopologyLabel
	isSet bool
}

func (v NullableDtcTopologyLabel) Get() *DtcTopologyLabel {
	return v.value
}

func (v *NullableDtcTopologyLabel) Set(val *DtcTopologyLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcTopologyLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcTopologyLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcTopologyLabel(val *DtcTopologyLabel) *NullableDtcTopologyLabel {
	return &NullableDtcTopologyLabel{value: val, isSet: true}
}

func (v NullableDtcTopologyLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcTopologyLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
