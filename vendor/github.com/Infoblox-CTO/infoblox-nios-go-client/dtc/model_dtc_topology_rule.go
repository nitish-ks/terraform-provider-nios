/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcTopologyRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcTopologyRule{}

// DtcTopologyRule struct for DtcTopologyRule
type DtcTopologyRule struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The type of the destination for this DTC Topology rule.
	DestType *string `json:"dest_type,omitempty"`
	// The reference to the destination DTC pool or DTC server.
	DestinationLink *string `json:"destination_link,omitempty"`
	// Type of the DNS response for rule.
	ReturnType *string `json:"return_type,omitempty"`
	// The conditions for matching sources. Should be empty to set rule as default destination.
	Sources []DtcTopologyRuleSources `json:"sources,omitempty"`
	// The DTC Topology the rule belongs to.
	Topology *string `json:"topology,omitempty"`
	// True if the label in the rule exists in the current Topology DB. Always true for SUBNET rules. Rules with non-existent labels may be configured but will never match.
	Valid *bool `json:"valid,omitempty"`
}

// NewDtcTopologyRule instantiates a new DtcTopologyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcTopologyRule() *DtcTopologyRule {
	this := DtcTopologyRule{}
	return &this
}

// NewDtcTopologyRuleWithDefaults instantiates a new DtcTopologyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcTopologyRuleWithDefaults() *DtcTopologyRule {
	this := DtcTopologyRule{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcTopologyRule) SetRef(v string) {
	o.Ref = &v
}

// GetDestType returns the DestType field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetDestType() string {
	if o == nil || IsNil(o.DestType) {
		var ret string
		return ret
	}
	return *o.DestType
}

// GetDestTypeOk returns a tuple with the DestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetDestTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DestType) {
		return nil, false
	}
	return o.DestType, true
}

// HasDestType returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasDestType() bool {
	if o != nil && !IsNil(o.DestType) {
		return true
	}

	return false
}

// SetDestType gets a reference to the given string and assigns it to the DestType field.
func (o *DtcTopologyRule) SetDestType(v string) {
	o.DestType = &v
}

// GetDestinationLink returns the DestinationLink field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetDestinationLink() string {
	if o == nil || IsNil(o.DestinationLink) {
		var ret string
		return ret
	}
	return *o.DestinationLink
}

// GetDestinationLinkOk returns a tuple with the DestinationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetDestinationLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationLink) {
		return nil, false
	}
	return o.DestinationLink, true
}

// HasDestinationLink returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasDestinationLink() bool {
	if o != nil && !IsNil(o.DestinationLink) {
		return true
	}

	return false
}

// SetDestinationLink gets a reference to the given string and assigns it to the DestinationLink field.
func (o *DtcTopologyRule) SetDestinationLink(v string) {
	o.DestinationLink = &v
}

// GetReturnType returns the ReturnType field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetReturnType() string {
	if o == nil || IsNil(o.ReturnType) {
		var ret string
		return ret
	}
	return *o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetReturnTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnType) {
		return nil, false
	}
	return o.ReturnType, true
}

// HasReturnType returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasReturnType() bool {
	if o != nil && !IsNil(o.ReturnType) {
		return true
	}

	return false
}

// SetReturnType gets a reference to the given string and assigns it to the ReturnType field.
func (o *DtcTopologyRule) SetReturnType(v string) {
	o.ReturnType = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetSources() []DtcTopologyRuleSources {
	if o == nil || IsNil(o.Sources) {
		var ret []DtcTopologyRuleSources
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetSourcesOk() ([]DtcTopologyRuleSources, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []DtcTopologyRuleSources and assigns it to the Sources field.
func (o *DtcTopologyRule) SetSources(v []DtcTopologyRuleSources) {
	o.Sources = v
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetTopology() string {
	if o == nil || IsNil(o.Topology) {
		var ret string
		return ret
	}
	return *o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetTopologyOk() (*string, bool) {
	if o == nil || IsNil(o.Topology) {
		return nil, false
	}
	return o.Topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasTopology() bool {
	if o != nil && !IsNil(o.Topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given string and assigns it to the Topology field.
func (o *DtcTopologyRule) SetTopology(v string) {
	o.Topology = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *DtcTopologyRule) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRule) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *DtcTopologyRule) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *DtcTopologyRule) SetValid(v bool) {
	o.Valid = &v
}

func (o DtcTopologyRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcTopologyRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.DestType) {
		toSerialize["dest_type"] = o.DestType
	}
	if !IsNil(o.DestinationLink) {
		toSerialize["destination_link"] = o.DestinationLink
	}
	if !IsNil(o.ReturnType) {
		toSerialize["return_type"] = o.ReturnType
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Topology) {
		toSerialize["topology"] = o.Topology
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableDtcTopologyRule struct {
	value *DtcTopologyRule
	isSet bool
}

func (v NullableDtcTopologyRule) Get() *DtcTopologyRule {
	return v.value
}

func (v *NullableDtcTopologyRule) Set(val *DtcTopologyRule) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcTopologyRule) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcTopologyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcTopologyRule(val *DtcTopologyRule) *NullableDtcTopologyRule {
	return &NullableDtcTopologyRule{value: val, isSet: true}
}

func (v NullableDtcTopologyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcTopologyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
