/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcTopologyRuleSources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcTopologyRuleSources{}

// DtcTopologyRuleSources struct for DtcTopologyRuleSources
type DtcTopologyRuleSources struct {
	// The source type.
	SourceType *string `json:"source_type,omitempty"`
	// The operation used to match the value.
	SourceOp *string `json:"source_op,omitempty"`
	// The source value.
	SourceValue          *string `json:"source_value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DtcTopologyRuleSources DtcTopologyRuleSources

// NewDtcTopologyRuleSources instantiates a new DtcTopologyRuleSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcTopologyRuleSources() *DtcTopologyRuleSources {
	this := DtcTopologyRuleSources{}
	return &this
}

// NewDtcTopologyRuleSourcesWithDefaults instantiates a new DtcTopologyRuleSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcTopologyRuleSourcesWithDefaults() *DtcTopologyRuleSources {
	this := DtcTopologyRuleSources{}
	return &this
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *DtcTopologyRuleSources) GetSourceType() string {
	if o == nil || IsNil(o.SourceType) {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRuleSources) GetSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *DtcTopologyRuleSources) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *DtcTopologyRuleSources) SetSourceType(v string) {
	o.SourceType = &v
}

// GetSourceOp returns the SourceOp field value if set, zero value otherwise.
func (o *DtcTopologyRuleSources) GetSourceOp() string {
	if o == nil || IsNil(o.SourceOp) {
		var ret string
		return ret
	}
	return *o.SourceOp
}

// GetSourceOpOk returns a tuple with the SourceOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRuleSources) GetSourceOpOk() (*string, bool) {
	if o == nil || IsNil(o.SourceOp) {
		return nil, false
	}
	return o.SourceOp, true
}

// HasSourceOp returns a boolean if a field has been set.
func (o *DtcTopologyRuleSources) HasSourceOp() bool {
	if o != nil && !IsNil(o.SourceOp) {
		return true
	}

	return false
}

// SetSourceOp gets a reference to the given string and assigns it to the SourceOp field.
func (o *DtcTopologyRuleSources) SetSourceOp(v string) {
	o.SourceOp = &v
}

// GetSourceValue returns the SourceValue field value if set, zero value otherwise.
func (o *DtcTopologyRuleSources) GetSourceValue() string {
	if o == nil || IsNil(o.SourceValue) {
		var ret string
		return ret
	}
	return *o.SourceValue
}

// GetSourceValueOk returns a tuple with the SourceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcTopologyRuleSources) GetSourceValueOk() (*string, bool) {
	if o == nil || IsNil(o.SourceValue) {
		return nil, false
	}
	return o.SourceValue, true
}

// HasSourceValue returns a boolean if a field has been set.
func (o *DtcTopologyRuleSources) HasSourceValue() bool {
	if o != nil && !IsNil(o.SourceValue) {
		return true
	}

	return false
}

// SetSourceValue gets a reference to the given string and assigns it to the SourceValue field.
func (o *DtcTopologyRuleSources) SetSourceValue(v string) {
	o.SourceValue = &v
}

func (o DtcTopologyRuleSources) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcTopologyRuleSources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceType) {
		toSerialize["source_type"] = o.SourceType
	}
	if !IsNil(o.SourceOp) {
		toSerialize["source_op"] = o.SourceOp
	}
	if !IsNil(o.SourceValue) {
		toSerialize["source_value"] = o.SourceValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DtcTopologyRuleSources) UnmarshalJSON(data []byte) (err error) {
	varDtcTopologyRuleSources := _DtcTopologyRuleSources{}

	err = json.Unmarshal(data, &varDtcTopologyRuleSources)

	if err != nil {
		return err
	}

	*o = DtcTopologyRuleSources(varDtcTopologyRuleSources)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "source_op")
		delete(additionalProperties, "source_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDtcTopologyRuleSources struct {
	value *DtcTopologyRuleSources
	isSet bool
}

func (v NullableDtcTopologyRuleSources) Get() *DtcTopologyRuleSources {
	return v.value
}

func (v *NullableDtcTopologyRuleSources) Set(val *DtcTopologyRuleSources) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcTopologyRuleSources) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcTopologyRuleSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcTopologyRuleSources(val *DtcTopologyRuleSources) *NullableDtcTopologyRuleSources {
	return &NullableDtcTopologyRuleSources{value: val, isSet: true}
}

func (v NullableDtcTopologyRuleSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcTopologyRuleSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
