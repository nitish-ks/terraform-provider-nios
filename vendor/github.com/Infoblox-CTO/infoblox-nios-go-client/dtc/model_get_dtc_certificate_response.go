/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcCertificateResponse - struct for GetDtcCertificateResponse
type GetDtcCertificateResponse struct {
	DtcCertificate                          *DtcCertificate
	GetDtcCertificateResponseObjectAsResult *GetDtcCertificateResponseObjectAsResult
}

// DtcCertificateAsGetDtcCertificateResponse is a convenience function that returns DtcCertificate wrapped in GetDtcCertificateResponse
func DtcCertificateAsGetDtcCertificateResponse(v *DtcCertificate) GetDtcCertificateResponse {
	return GetDtcCertificateResponse{
		DtcCertificate: v,
	}
}

// GetDtcCertificateResponseObjectAsResultAsGetDtcCertificateResponse is a convenience function that returns GetDtcCertificateResponseObjectAsResult wrapped in GetDtcCertificateResponse
func GetDtcCertificateResponseObjectAsResultAsGetDtcCertificateResponse(v *GetDtcCertificateResponseObjectAsResult) GetDtcCertificateResponse {
	return GetDtcCertificateResponse{
		GetDtcCertificateResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcCertificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcCertificate
	err = newStrictDecoder(data).Decode(&dst.DtcCertificate)
	if err == nil {
		jsonDtcCertificate, _ := json.Marshal(dst.DtcCertificate)
		if string(jsonDtcCertificate) == "{}" { // empty struct
			dst.DtcCertificate = nil
		} else {
			match++
		}
	} else {
		dst.DtcCertificate = nil
	}

	// try to unmarshal data into GetDtcCertificateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcCertificateResponseObjectAsResult)
	if err == nil {
		jsonGetDtcCertificateResponseObjectAsResult, _ := json.Marshal(dst.GetDtcCertificateResponseObjectAsResult)
		if string(jsonGetDtcCertificateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcCertificateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcCertificateResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcCertificate = nil
		dst.GetDtcCertificateResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcCertificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcCertificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	if src.DtcCertificate != nil {
		return json.Marshal(&src.DtcCertificate)
	}

	if src.GetDtcCertificateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcCertificateResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcCertificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcCertificate != nil {
		return obj.DtcCertificate
	}

	if obj.GetDtcCertificateResponseObjectAsResult != nil {
		return obj.GetDtcCertificateResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcCertificateResponse struct {
	value *GetDtcCertificateResponse
	isSet bool
}

func (v NullableGetDtcCertificateResponse) Get() *GetDtcCertificateResponse {
	return v.value
}

func (v *NullableGetDtcCertificateResponse) Set(val *GetDtcCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcCertificateResponse(val *GetDtcCertificateResponse) *NullableGetDtcCertificateResponse {
	return &NullableGetDtcCertificateResponse{value: val, isSet: true}
}

func (v NullableGetDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
