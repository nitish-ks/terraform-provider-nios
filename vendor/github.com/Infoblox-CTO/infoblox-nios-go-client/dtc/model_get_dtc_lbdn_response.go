/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcLbdnResponse - struct for GetDtcLbdnResponse
type GetDtcLbdnResponse struct {
	DtcLbdn                          *DtcLbdn
	GetDtcLbdnResponseObjectAsResult *GetDtcLbdnResponseObjectAsResult
}

// DtcLbdnAsGetDtcLbdnResponse is a convenience function that returns DtcLbdn wrapped in GetDtcLbdnResponse
func DtcLbdnAsGetDtcLbdnResponse(v *DtcLbdn) GetDtcLbdnResponse {
	return GetDtcLbdnResponse{
		DtcLbdn: v,
	}
}

// GetDtcLbdnResponseObjectAsResultAsGetDtcLbdnResponse is a convenience function that returns GetDtcLbdnResponseObjectAsResult wrapped in GetDtcLbdnResponse
func GetDtcLbdnResponseObjectAsResultAsGetDtcLbdnResponse(v *GetDtcLbdnResponseObjectAsResult) GetDtcLbdnResponse {
	return GetDtcLbdnResponse{
		GetDtcLbdnResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcLbdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcLbdn
	err = newStrictDecoder(data).Decode(&dst.DtcLbdn)
	if err == nil {
		jsonDtcLbdn, _ := json.Marshal(dst.DtcLbdn)
		if string(jsonDtcLbdn) == "{}" { // empty struct
			dst.DtcLbdn = nil
		} else {
			match++
		}
	} else {
		dst.DtcLbdn = nil
	}

	// try to unmarshal data into GetDtcLbdnResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcLbdnResponseObjectAsResult)
	if err == nil {
		jsonGetDtcLbdnResponseObjectAsResult, _ := json.Marshal(dst.GetDtcLbdnResponseObjectAsResult)
		if string(jsonGetDtcLbdnResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcLbdnResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcLbdnResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcLbdn = nil
		dst.GetDtcLbdnResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcLbdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcLbdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcLbdnResponse) MarshalJSON() ([]byte, error) {
	if src.DtcLbdn != nil {
		return json.Marshal(&src.DtcLbdn)
	}

	if src.GetDtcLbdnResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcLbdnResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcLbdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcLbdn != nil {
		return obj.DtcLbdn
	}

	if obj.GetDtcLbdnResponseObjectAsResult != nil {
		return obj.GetDtcLbdnResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcLbdnResponse struct {
	value *GetDtcLbdnResponse
	isSet bool
}

func (v NullableGetDtcLbdnResponse) Get() *GetDtcLbdnResponse {
	return v.value
}

func (v *NullableGetDtcLbdnResponse) Set(val *GetDtcLbdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcLbdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcLbdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcLbdnResponse(val *GetDtcLbdnResponse) *NullableGetDtcLbdnResponse {
	return &NullableGetDtcLbdnResponse{value: val, isSet: true}
}

func (v NullableGetDtcLbdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcLbdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
