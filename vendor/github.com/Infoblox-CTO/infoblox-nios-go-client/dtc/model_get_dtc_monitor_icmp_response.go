/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorIcmpResponse - struct for GetDtcMonitorIcmpResponse
type GetDtcMonitorIcmpResponse struct {
	DtcMonitorIcmp                          *DtcMonitorIcmp
	GetDtcMonitorIcmpResponseObjectAsResult *GetDtcMonitorIcmpResponseObjectAsResult
}

// DtcMonitorIcmpAsGetDtcMonitorIcmpResponse is a convenience function that returns DtcMonitorIcmp wrapped in GetDtcMonitorIcmpResponse
func DtcMonitorIcmpAsGetDtcMonitorIcmpResponse(v *DtcMonitorIcmp) GetDtcMonitorIcmpResponse {
	return GetDtcMonitorIcmpResponse{
		DtcMonitorIcmp: v,
	}
}

// GetDtcMonitorIcmpResponseObjectAsResultAsGetDtcMonitorIcmpResponse is a convenience function that returns GetDtcMonitorIcmpResponseObjectAsResult wrapped in GetDtcMonitorIcmpResponse
func GetDtcMonitorIcmpResponseObjectAsResultAsGetDtcMonitorIcmpResponse(v *GetDtcMonitorIcmpResponseObjectAsResult) GetDtcMonitorIcmpResponse {
	return GetDtcMonitorIcmpResponse{
		GetDtcMonitorIcmpResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorIcmpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitorIcmp
	err = newStrictDecoder(data).Decode(&dst.DtcMonitorIcmp)
	if err == nil {
		jsonDtcMonitorIcmp, _ := json.Marshal(dst.DtcMonitorIcmp)
		if string(jsonDtcMonitorIcmp) == "{}" { // empty struct
			dst.DtcMonitorIcmp = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitorIcmp = nil
	}

	// try to unmarshal data into GetDtcMonitorIcmpResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorIcmpResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorIcmpResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorIcmpResponseObjectAsResult)
		if string(jsonGetDtcMonitorIcmpResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorIcmpResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorIcmpResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitorIcmp = nil
		dst.GetDtcMonitorIcmpResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorIcmpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorIcmpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitorIcmp != nil {
		return json.Marshal(&src.DtcMonitorIcmp)
	}

	if src.GetDtcMonitorIcmpResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorIcmpResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorIcmpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitorIcmp != nil {
		return obj.DtcMonitorIcmp
	}

	if obj.GetDtcMonitorIcmpResponseObjectAsResult != nil {
		return obj.GetDtcMonitorIcmpResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorIcmpResponse struct {
	value *GetDtcMonitorIcmpResponse
	isSet bool
}

func (v NullableGetDtcMonitorIcmpResponse) Get() *GetDtcMonitorIcmpResponse {
	return v.value
}

func (v *NullableGetDtcMonitorIcmpResponse) Set(val *GetDtcMonitorIcmpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorIcmpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorIcmpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorIcmpResponse(val *GetDtcMonitorIcmpResponse) *NullableGetDtcMonitorIcmpResponse {
	return &NullableGetDtcMonitorIcmpResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorIcmpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
