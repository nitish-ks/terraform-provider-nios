/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorPdpResponse - struct for GetDtcMonitorPdpResponse
type GetDtcMonitorPdpResponse struct {
	DtcMonitorPdp                          *DtcMonitorPdp
	GetDtcMonitorPdpResponseObjectAsResult *GetDtcMonitorPdpResponseObjectAsResult
}

// DtcMonitorPdpAsGetDtcMonitorPdpResponse is a convenience function that returns DtcMonitorPdp wrapped in GetDtcMonitorPdpResponse
func DtcMonitorPdpAsGetDtcMonitorPdpResponse(v *DtcMonitorPdp) GetDtcMonitorPdpResponse {
	return GetDtcMonitorPdpResponse{
		DtcMonitorPdp: v,
	}
}

// GetDtcMonitorPdpResponseObjectAsResultAsGetDtcMonitorPdpResponse is a convenience function that returns GetDtcMonitorPdpResponseObjectAsResult wrapped in GetDtcMonitorPdpResponse
func GetDtcMonitorPdpResponseObjectAsResultAsGetDtcMonitorPdpResponse(v *GetDtcMonitorPdpResponseObjectAsResult) GetDtcMonitorPdpResponse {
	return GetDtcMonitorPdpResponse{
		GetDtcMonitorPdpResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorPdpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitorPdp
	err = newStrictDecoder(data).Decode(&dst.DtcMonitorPdp)
	if err == nil {
		jsonDtcMonitorPdp, _ := json.Marshal(dst.DtcMonitorPdp)
		if string(jsonDtcMonitorPdp) == "{}" { // empty struct
			dst.DtcMonitorPdp = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitorPdp = nil
	}

	// try to unmarshal data into GetDtcMonitorPdpResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorPdpResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorPdpResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorPdpResponseObjectAsResult)
		if string(jsonGetDtcMonitorPdpResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorPdpResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorPdpResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitorPdp = nil
		dst.GetDtcMonitorPdpResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorPdpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorPdpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorPdpResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitorPdp != nil {
		return json.Marshal(&src.DtcMonitorPdp)
	}

	if src.GetDtcMonitorPdpResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorPdpResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorPdpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitorPdp != nil {
		return obj.DtcMonitorPdp
	}

	if obj.GetDtcMonitorPdpResponseObjectAsResult != nil {
		return obj.GetDtcMonitorPdpResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorPdpResponse struct {
	value *GetDtcMonitorPdpResponse
	isSet bool
}

func (v NullableGetDtcMonitorPdpResponse) Get() *GetDtcMonitorPdpResponse {
	return v.value
}

func (v *NullableGetDtcMonitorPdpResponse) Set(val *GetDtcMonitorPdpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorPdpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorPdpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorPdpResponse(val *GetDtcMonitorPdpResponse) *NullableGetDtcMonitorPdpResponse {
	return &NullableGetDtcMonitorPdpResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorPdpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorPdpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
