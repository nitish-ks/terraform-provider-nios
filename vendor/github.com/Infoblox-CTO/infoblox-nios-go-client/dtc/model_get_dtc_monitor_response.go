/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorResponse - struct for GetDtcMonitorResponse
type GetDtcMonitorResponse struct {
	DtcMonitor                          *DtcMonitor
	GetDtcMonitorResponseObjectAsResult *GetDtcMonitorResponseObjectAsResult
}

// DtcMonitorAsGetDtcMonitorResponse is a convenience function that returns DtcMonitor wrapped in GetDtcMonitorResponse
func DtcMonitorAsGetDtcMonitorResponse(v *DtcMonitor) GetDtcMonitorResponse {
	return GetDtcMonitorResponse{
		DtcMonitor: v,
	}
}

// GetDtcMonitorResponseObjectAsResultAsGetDtcMonitorResponse is a convenience function that returns GetDtcMonitorResponseObjectAsResult wrapped in GetDtcMonitorResponse
func GetDtcMonitorResponseObjectAsResultAsGetDtcMonitorResponse(v *GetDtcMonitorResponseObjectAsResult) GetDtcMonitorResponse {
	return GetDtcMonitorResponse{
		GetDtcMonitorResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitor
	err = newStrictDecoder(data).Decode(&dst.DtcMonitor)
	if err == nil {
		jsonDtcMonitor, _ := json.Marshal(dst.DtcMonitor)
		if string(jsonDtcMonitor) == "{}" { // empty struct
			dst.DtcMonitor = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitor = nil
	}

	// try to unmarshal data into GetDtcMonitorResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorResponseObjectAsResult)
		if string(jsonGetDtcMonitorResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitor = nil
		dst.GetDtcMonitorResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitor != nil {
		return json.Marshal(&src.DtcMonitor)
	}

	if src.GetDtcMonitorResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitor != nil {
		return obj.DtcMonitor
	}

	if obj.GetDtcMonitorResponseObjectAsResult != nil {
		return obj.GetDtcMonitorResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorResponse struct {
	value *GetDtcMonitorResponse
	isSet bool
}

func (v NullableGetDtcMonitorResponse) Get() *GetDtcMonitorResponse {
	return v.value
}

func (v *NullableGetDtcMonitorResponse) Set(val *GetDtcMonitorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorResponse(val *GetDtcMonitorResponse) *NullableGetDtcMonitorResponse {
	return &NullableGetDtcMonitorResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
