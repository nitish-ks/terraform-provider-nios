/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorSipResponse - struct for GetDtcMonitorSipResponse
type GetDtcMonitorSipResponse struct {
	DtcMonitorSip                          *DtcMonitorSip
	GetDtcMonitorSipResponseObjectAsResult *GetDtcMonitorSipResponseObjectAsResult
}

// DtcMonitorSipAsGetDtcMonitorSipResponse is a convenience function that returns DtcMonitorSip wrapped in GetDtcMonitorSipResponse
func DtcMonitorSipAsGetDtcMonitorSipResponse(v *DtcMonitorSip) GetDtcMonitorSipResponse {
	return GetDtcMonitorSipResponse{
		DtcMonitorSip: v,
	}
}

// GetDtcMonitorSipResponseObjectAsResultAsGetDtcMonitorSipResponse is a convenience function that returns GetDtcMonitorSipResponseObjectAsResult wrapped in GetDtcMonitorSipResponse
func GetDtcMonitorSipResponseObjectAsResultAsGetDtcMonitorSipResponse(v *GetDtcMonitorSipResponseObjectAsResult) GetDtcMonitorSipResponse {
	return GetDtcMonitorSipResponse{
		GetDtcMonitorSipResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorSipResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitorSip
	err = newStrictDecoder(data).Decode(&dst.DtcMonitorSip)
	if err == nil {
		jsonDtcMonitorSip, _ := json.Marshal(dst.DtcMonitorSip)
		if string(jsonDtcMonitorSip) == "{}" { // empty struct
			dst.DtcMonitorSip = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitorSip = nil
	}

	// try to unmarshal data into GetDtcMonitorSipResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorSipResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorSipResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorSipResponseObjectAsResult)
		if string(jsonGetDtcMonitorSipResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorSipResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorSipResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitorSip = nil
		dst.GetDtcMonitorSipResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorSipResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorSipResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorSipResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitorSip != nil {
		return json.Marshal(&src.DtcMonitorSip)
	}

	if src.GetDtcMonitorSipResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorSipResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorSipResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitorSip != nil {
		return obj.DtcMonitorSip
	}

	if obj.GetDtcMonitorSipResponseObjectAsResult != nil {
		return obj.GetDtcMonitorSipResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorSipResponse struct {
	value *GetDtcMonitorSipResponse
	isSet bool
}

func (v NullableGetDtcMonitorSipResponse) Get() *GetDtcMonitorSipResponse {
	return v.value
}

func (v *NullableGetDtcMonitorSipResponse) Set(val *GetDtcMonitorSipResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorSipResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorSipResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorSipResponse(val *GetDtcMonitorSipResponse) *NullableGetDtcMonitorSipResponse {
	return &NullableGetDtcMonitorSipResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorSipResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorSipResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
