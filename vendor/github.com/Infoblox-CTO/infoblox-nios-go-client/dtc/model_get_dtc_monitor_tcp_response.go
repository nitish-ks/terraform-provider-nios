/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorTcpResponse - struct for GetDtcMonitorTcpResponse
type GetDtcMonitorTcpResponse struct {
	DtcMonitorTcp                          *DtcMonitorTcp
	GetDtcMonitorTcpResponseObjectAsResult *GetDtcMonitorTcpResponseObjectAsResult
}

// DtcMonitorTcpAsGetDtcMonitorTcpResponse is a convenience function that returns DtcMonitorTcp wrapped in GetDtcMonitorTcpResponse
func DtcMonitorTcpAsGetDtcMonitorTcpResponse(v *DtcMonitorTcp) GetDtcMonitorTcpResponse {
	return GetDtcMonitorTcpResponse{
		DtcMonitorTcp: v,
	}
}

// GetDtcMonitorTcpResponseObjectAsResultAsGetDtcMonitorTcpResponse is a convenience function that returns GetDtcMonitorTcpResponseObjectAsResult wrapped in GetDtcMonitorTcpResponse
func GetDtcMonitorTcpResponseObjectAsResultAsGetDtcMonitorTcpResponse(v *GetDtcMonitorTcpResponseObjectAsResult) GetDtcMonitorTcpResponse {
	return GetDtcMonitorTcpResponse{
		GetDtcMonitorTcpResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorTcpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitorTcp
	err = newStrictDecoder(data).Decode(&dst.DtcMonitorTcp)
	if err == nil {
		jsonDtcMonitorTcp, _ := json.Marshal(dst.DtcMonitorTcp)
		if string(jsonDtcMonitorTcp) == "{}" { // empty struct
			dst.DtcMonitorTcp = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitorTcp = nil
	}

	// try to unmarshal data into GetDtcMonitorTcpResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorTcpResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorTcpResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorTcpResponseObjectAsResult)
		if string(jsonGetDtcMonitorTcpResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorTcpResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorTcpResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitorTcp = nil
		dst.GetDtcMonitorTcpResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorTcpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorTcpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorTcpResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitorTcp != nil {
		return json.Marshal(&src.DtcMonitorTcp)
	}

	if src.GetDtcMonitorTcpResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorTcpResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorTcpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitorTcp != nil {
		return obj.DtcMonitorTcp
	}

	if obj.GetDtcMonitorTcpResponseObjectAsResult != nil {
		return obj.GetDtcMonitorTcpResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorTcpResponse struct {
	value *GetDtcMonitorTcpResponse
	isSet bool
}

func (v NullableGetDtcMonitorTcpResponse) Get() *GetDtcMonitorTcpResponse {
	return v.value
}

func (v *NullableGetDtcMonitorTcpResponse) Set(val *GetDtcMonitorTcpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorTcpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorTcpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorTcpResponse(val *GetDtcMonitorTcpResponse) *NullableGetDtcMonitorTcpResponse {
	return &NullableGetDtcMonitorTcpResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorTcpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorTcpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
