/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcObjectResponse - struct for GetDtcObjectResponse
type GetDtcObjectResponse struct {
	DtcObject                          *DtcObject
	GetDtcObjectResponseObjectAsResult *GetDtcObjectResponseObjectAsResult
}

// DtcObjectAsGetDtcObjectResponse is a convenience function that returns DtcObject wrapped in GetDtcObjectResponse
func DtcObjectAsGetDtcObjectResponse(v *DtcObject) GetDtcObjectResponse {
	return GetDtcObjectResponse{
		DtcObject: v,
	}
}

// GetDtcObjectResponseObjectAsResultAsGetDtcObjectResponse is a convenience function that returns GetDtcObjectResponseObjectAsResult wrapped in GetDtcObjectResponse
func GetDtcObjectResponseObjectAsResultAsGetDtcObjectResponse(v *GetDtcObjectResponseObjectAsResult) GetDtcObjectResponse {
	return GetDtcObjectResponse{
		GetDtcObjectResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcObjectResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcObject
	err = newStrictDecoder(data).Decode(&dst.DtcObject)
	if err == nil {
		jsonDtcObject, _ := json.Marshal(dst.DtcObject)
		if string(jsonDtcObject) == "{}" { // empty struct
			dst.DtcObject = nil
		} else {
			match++
		}
	} else {
		dst.DtcObject = nil
	}

	// try to unmarshal data into GetDtcObjectResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcObjectResponseObjectAsResult)
	if err == nil {
		jsonGetDtcObjectResponseObjectAsResult, _ := json.Marshal(dst.GetDtcObjectResponseObjectAsResult)
		if string(jsonGetDtcObjectResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcObjectResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcObjectResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcObject = nil
		dst.GetDtcObjectResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcObjectResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcObjectResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcObjectResponse) MarshalJSON() ([]byte, error) {
	if src.DtcObject != nil {
		return json.Marshal(&src.DtcObject)
	}

	if src.GetDtcObjectResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcObjectResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcObjectResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcObject != nil {
		return obj.DtcObject
	}

	if obj.GetDtcObjectResponseObjectAsResult != nil {
		return obj.GetDtcObjectResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcObjectResponse struct {
	value *GetDtcObjectResponse
	isSet bool
}

func (v NullableGetDtcObjectResponse) Get() *GetDtcObjectResponse {
	return v.value
}

func (v *NullableGetDtcObjectResponse) Set(val *GetDtcObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcObjectResponse(val *GetDtcObjectResponse) *NullableGetDtcObjectResponse {
	return &NullableGetDtcObjectResponse{value: val, isSet: true}
}

func (v NullableGetDtcObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
