/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcPoolResponse - struct for GetDtcPoolResponse
type GetDtcPoolResponse struct {
	DtcPool                          *DtcPool
	GetDtcPoolResponseObjectAsResult *GetDtcPoolResponseObjectAsResult
}

// DtcPoolAsGetDtcPoolResponse is a convenience function that returns DtcPool wrapped in GetDtcPoolResponse
func DtcPoolAsGetDtcPoolResponse(v *DtcPool) GetDtcPoolResponse {
	return GetDtcPoolResponse{
		DtcPool: v,
	}
}

// GetDtcPoolResponseObjectAsResultAsGetDtcPoolResponse is a convenience function that returns GetDtcPoolResponseObjectAsResult wrapped in GetDtcPoolResponse
func GetDtcPoolResponseObjectAsResultAsGetDtcPoolResponse(v *GetDtcPoolResponseObjectAsResult) GetDtcPoolResponse {
	return GetDtcPoolResponse{
		GetDtcPoolResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcPoolResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcPool
	err = newStrictDecoder(data).Decode(&dst.DtcPool)
	if err == nil {
		jsonDtcPool, _ := json.Marshal(dst.DtcPool)
		if string(jsonDtcPool) == "{}" { // empty struct
			dst.DtcPool = nil
		} else {
			match++
		}
	} else {
		dst.DtcPool = nil
	}

	// try to unmarshal data into GetDtcPoolResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcPoolResponseObjectAsResult)
	if err == nil {
		jsonGetDtcPoolResponseObjectAsResult, _ := json.Marshal(dst.GetDtcPoolResponseObjectAsResult)
		if string(jsonGetDtcPoolResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcPoolResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcPoolResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcPool = nil
		dst.GetDtcPoolResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcPoolResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcPoolResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcPoolResponse) MarshalJSON() ([]byte, error) {
	if src.DtcPool != nil {
		return json.Marshal(&src.DtcPool)
	}

	if src.GetDtcPoolResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcPoolResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcPoolResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcPool != nil {
		return obj.DtcPool
	}

	if obj.GetDtcPoolResponseObjectAsResult != nil {
		return obj.GetDtcPoolResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcPoolResponse struct {
	value *GetDtcPoolResponse
	isSet bool
}

func (v NullableGetDtcPoolResponse) Get() *GetDtcPoolResponse {
	return v.value
}

func (v *NullableGetDtcPoolResponse) Set(val *GetDtcPoolResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcPoolResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcPoolResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcPoolResponse(val *GetDtcPoolResponse) *NullableGetDtcPoolResponse {
	return &NullableGetDtcPoolResponse{value: val, isSet: true}
}

func (v NullableGetDtcPoolResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcPoolResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
