/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcRecordAResponse - struct for GetDtcRecordAResponse
type GetDtcRecordAResponse struct {
	DtcRecordA                          *DtcRecordA
	GetDtcRecordAResponseObjectAsResult *GetDtcRecordAResponseObjectAsResult
}

// DtcRecordAAsGetDtcRecordAResponse is a convenience function that returns DtcRecordA wrapped in GetDtcRecordAResponse
func DtcRecordAAsGetDtcRecordAResponse(v *DtcRecordA) GetDtcRecordAResponse {
	return GetDtcRecordAResponse{
		DtcRecordA: v,
	}
}

// GetDtcRecordAResponseObjectAsResultAsGetDtcRecordAResponse is a convenience function that returns GetDtcRecordAResponseObjectAsResult wrapped in GetDtcRecordAResponse
func GetDtcRecordAResponseObjectAsResultAsGetDtcRecordAResponse(v *GetDtcRecordAResponseObjectAsResult) GetDtcRecordAResponse {
	return GetDtcRecordAResponse{
		GetDtcRecordAResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcRecordAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcRecordA
	err = newStrictDecoder(data).Decode(&dst.DtcRecordA)
	if err == nil {
		jsonDtcRecordA, _ := json.Marshal(dst.DtcRecordA)
		if string(jsonDtcRecordA) == "{}" { // empty struct
			dst.DtcRecordA = nil
		} else {
			match++
		}
	} else {
		dst.DtcRecordA = nil
	}

	// try to unmarshal data into GetDtcRecordAResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcRecordAResponseObjectAsResult)
	if err == nil {
		jsonGetDtcRecordAResponseObjectAsResult, _ := json.Marshal(dst.GetDtcRecordAResponseObjectAsResult)
		if string(jsonGetDtcRecordAResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcRecordAResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcRecordAResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcRecordA = nil
		dst.GetDtcRecordAResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcRecordAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcRecordAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcRecordAResponse) MarshalJSON() ([]byte, error) {
	if src.DtcRecordA != nil {
		return json.Marshal(&src.DtcRecordA)
	}

	if src.GetDtcRecordAResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcRecordAResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcRecordAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcRecordA != nil {
		return obj.DtcRecordA
	}

	if obj.GetDtcRecordAResponseObjectAsResult != nil {
		return obj.GetDtcRecordAResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcRecordAResponse struct {
	value *GetDtcRecordAResponse
	isSet bool
}

func (v NullableGetDtcRecordAResponse) Get() *GetDtcRecordAResponse {
	return v.value
}

func (v *NullableGetDtcRecordAResponse) Set(val *GetDtcRecordAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcRecordAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcRecordAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcRecordAResponse(val *GetDtcRecordAResponse) *NullableGetDtcRecordAResponse {
	return &NullableGetDtcRecordAResponse{value: val, isSet: true}
}

func (v NullableGetDtcRecordAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcRecordAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
