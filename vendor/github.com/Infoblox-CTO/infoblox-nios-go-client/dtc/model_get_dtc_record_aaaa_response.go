/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcRecordAaaaResponse - struct for GetDtcRecordAaaaResponse
type GetDtcRecordAaaaResponse struct {
	DtcRecordAaaa                          *DtcRecordAaaa
	GetDtcRecordAaaaResponseObjectAsResult *GetDtcRecordAaaaResponseObjectAsResult
}

// DtcRecordAaaaAsGetDtcRecordAaaaResponse is a convenience function that returns DtcRecordAaaa wrapped in GetDtcRecordAaaaResponse
func DtcRecordAaaaAsGetDtcRecordAaaaResponse(v *DtcRecordAaaa) GetDtcRecordAaaaResponse {
	return GetDtcRecordAaaaResponse{
		DtcRecordAaaa: v,
	}
}

// GetDtcRecordAaaaResponseObjectAsResultAsGetDtcRecordAaaaResponse is a convenience function that returns GetDtcRecordAaaaResponseObjectAsResult wrapped in GetDtcRecordAaaaResponse
func GetDtcRecordAaaaResponseObjectAsResultAsGetDtcRecordAaaaResponse(v *GetDtcRecordAaaaResponseObjectAsResult) GetDtcRecordAaaaResponse {
	return GetDtcRecordAaaaResponse{
		GetDtcRecordAaaaResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcRecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcRecordAaaa
	err = newStrictDecoder(data).Decode(&dst.DtcRecordAaaa)
	if err == nil {
		jsonDtcRecordAaaa, _ := json.Marshal(dst.DtcRecordAaaa)
		if string(jsonDtcRecordAaaa) == "{}" { // empty struct
			dst.DtcRecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.DtcRecordAaaa = nil
	}

	// try to unmarshal data into GetDtcRecordAaaaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcRecordAaaaResponseObjectAsResult)
	if err == nil {
		jsonGetDtcRecordAaaaResponseObjectAsResult, _ := json.Marshal(dst.GetDtcRecordAaaaResponseObjectAsResult)
		if string(jsonGetDtcRecordAaaaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcRecordAaaaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcRecordAaaaResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcRecordAaaa = nil
		dst.GetDtcRecordAaaaResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcRecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcRecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.DtcRecordAaaa != nil {
		return json.Marshal(&src.DtcRecordAaaa)
	}

	if src.GetDtcRecordAaaaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcRecordAaaaResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcRecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcRecordAaaa != nil {
		return obj.DtcRecordAaaa
	}

	if obj.GetDtcRecordAaaaResponseObjectAsResult != nil {
		return obj.GetDtcRecordAaaaResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcRecordAaaaResponse struct {
	value *GetDtcRecordAaaaResponse
	isSet bool
}

func (v NullableGetDtcRecordAaaaResponse) Get() *GetDtcRecordAaaaResponse {
	return v.value
}

func (v *NullableGetDtcRecordAaaaResponse) Set(val *GetDtcRecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcRecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcRecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcRecordAaaaResponse(val *GetDtcRecordAaaaResponse) *NullableGetDtcRecordAaaaResponse {
	return &NullableGetDtcRecordAaaaResponse{value: val, isSet: true}
}

func (v NullableGetDtcRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcRecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
