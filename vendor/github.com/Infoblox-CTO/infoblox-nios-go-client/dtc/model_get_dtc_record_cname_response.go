/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcRecordCnameResponse - struct for GetDtcRecordCnameResponse
type GetDtcRecordCnameResponse struct {
	DtcRecordCname                          *DtcRecordCname
	GetDtcRecordCnameResponseObjectAsResult *GetDtcRecordCnameResponseObjectAsResult
}

// DtcRecordCnameAsGetDtcRecordCnameResponse is a convenience function that returns DtcRecordCname wrapped in GetDtcRecordCnameResponse
func DtcRecordCnameAsGetDtcRecordCnameResponse(v *DtcRecordCname) GetDtcRecordCnameResponse {
	return GetDtcRecordCnameResponse{
		DtcRecordCname: v,
	}
}

// GetDtcRecordCnameResponseObjectAsResultAsGetDtcRecordCnameResponse is a convenience function that returns GetDtcRecordCnameResponseObjectAsResult wrapped in GetDtcRecordCnameResponse
func GetDtcRecordCnameResponseObjectAsResultAsGetDtcRecordCnameResponse(v *GetDtcRecordCnameResponseObjectAsResult) GetDtcRecordCnameResponse {
	return GetDtcRecordCnameResponse{
		GetDtcRecordCnameResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcRecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcRecordCname
	err = newStrictDecoder(data).Decode(&dst.DtcRecordCname)
	if err == nil {
		jsonDtcRecordCname, _ := json.Marshal(dst.DtcRecordCname)
		if string(jsonDtcRecordCname) == "{}" { // empty struct
			dst.DtcRecordCname = nil
		} else {
			match++
		}
	} else {
		dst.DtcRecordCname = nil
	}

	// try to unmarshal data into GetDtcRecordCnameResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcRecordCnameResponseObjectAsResult)
	if err == nil {
		jsonGetDtcRecordCnameResponseObjectAsResult, _ := json.Marshal(dst.GetDtcRecordCnameResponseObjectAsResult)
		if string(jsonGetDtcRecordCnameResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcRecordCnameResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcRecordCnameResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcRecordCname = nil
		dst.GetDtcRecordCnameResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcRecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcRecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcRecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.DtcRecordCname != nil {
		return json.Marshal(&src.DtcRecordCname)
	}

	if src.GetDtcRecordCnameResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcRecordCnameResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcRecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcRecordCname != nil {
		return obj.DtcRecordCname
	}

	if obj.GetDtcRecordCnameResponseObjectAsResult != nil {
		return obj.GetDtcRecordCnameResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcRecordCnameResponse struct {
	value *GetDtcRecordCnameResponse
	isSet bool
}

func (v NullableGetDtcRecordCnameResponse) Get() *GetDtcRecordCnameResponse {
	return v.value
}

func (v *NullableGetDtcRecordCnameResponse) Set(val *GetDtcRecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcRecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcRecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcRecordCnameResponse(val *GetDtcRecordCnameResponse) *NullableGetDtcRecordCnameResponse {
	return &NullableGetDtcRecordCnameResponse{value: val, isSet: true}
}

func (v NullableGetDtcRecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcRecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
