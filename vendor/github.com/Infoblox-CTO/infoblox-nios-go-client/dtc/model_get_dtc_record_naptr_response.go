/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcRecordNaptrResponse - struct for GetDtcRecordNaptrResponse
type GetDtcRecordNaptrResponse struct {
	DtcRecordNaptr                          *DtcRecordNaptr
	GetDtcRecordNaptrResponseObjectAsResult *GetDtcRecordNaptrResponseObjectAsResult
}

// DtcRecordNaptrAsGetDtcRecordNaptrResponse is a convenience function that returns DtcRecordNaptr wrapped in GetDtcRecordNaptrResponse
func DtcRecordNaptrAsGetDtcRecordNaptrResponse(v *DtcRecordNaptr) GetDtcRecordNaptrResponse {
	return GetDtcRecordNaptrResponse{
		DtcRecordNaptr: v,
	}
}

// GetDtcRecordNaptrResponseObjectAsResultAsGetDtcRecordNaptrResponse is a convenience function that returns GetDtcRecordNaptrResponseObjectAsResult wrapped in GetDtcRecordNaptrResponse
func GetDtcRecordNaptrResponseObjectAsResultAsGetDtcRecordNaptrResponse(v *GetDtcRecordNaptrResponseObjectAsResult) GetDtcRecordNaptrResponse {
	return GetDtcRecordNaptrResponse{
		GetDtcRecordNaptrResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcRecordNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcRecordNaptr
	err = newStrictDecoder(data).Decode(&dst.DtcRecordNaptr)
	if err == nil {
		jsonDtcRecordNaptr, _ := json.Marshal(dst.DtcRecordNaptr)
		if string(jsonDtcRecordNaptr) == "{}" { // empty struct
			dst.DtcRecordNaptr = nil
		} else {
			match++
		}
	} else {
		dst.DtcRecordNaptr = nil
	}

	// try to unmarshal data into GetDtcRecordNaptrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcRecordNaptrResponseObjectAsResult)
	if err == nil {
		jsonGetDtcRecordNaptrResponseObjectAsResult, _ := json.Marshal(dst.GetDtcRecordNaptrResponseObjectAsResult)
		if string(jsonGetDtcRecordNaptrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcRecordNaptrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcRecordNaptrResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcRecordNaptr = nil
		dst.GetDtcRecordNaptrResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcRecordNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcRecordNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.DtcRecordNaptr != nil {
		return json.Marshal(&src.DtcRecordNaptr)
	}

	if src.GetDtcRecordNaptrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcRecordNaptrResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcRecordNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcRecordNaptr != nil {
		return obj.DtcRecordNaptr
	}

	if obj.GetDtcRecordNaptrResponseObjectAsResult != nil {
		return obj.GetDtcRecordNaptrResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcRecordNaptrResponse struct {
	value *GetDtcRecordNaptrResponse
	isSet bool
}

func (v NullableGetDtcRecordNaptrResponse) Get() *GetDtcRecordNaptrResponse {
	return v.value
}

func (v *NullableGetDtcRecordNaptrResponse) Set(val *GetDtcRecordNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcRecordNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcRecordNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcRecordNaptrResponse(val *GetDtcRecordNaptrResponse) *NullableGetDtcRecordNaptrResponse {
	return &NullableGetDtcRecordNaptrResponse{value: val, isSet: true}
}

func (v NullableGetDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcRecordNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
