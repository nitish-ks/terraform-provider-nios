/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcRecordSrvResponse - struct for GetDtcRecordSrvResponse
type GetDtcRecordSrvResponse struct {
	DtcRecordSrv                          *DtcRecordSrv
	GetDtcRecordSrvResponseObjectAsResult *GetDtcRecordSrvResponseObjectAsResult
}

// DtcRecordSrvAsGetDtcRecordSrvResponse is a convenience function that returns DtcRecordSrv wrapped in GetDtcRecordSrvResponse
func DtcRecordSrvAsGetDtcRecordSrvResponse(v *DtcRecordSrv) GetDtcRecordSrvResponse {
	return GetDtcRecordSrvResponse{
		DtcRecordSrv: v,
	}
}

// GetDtcRecordSrvResponseObjectAsResultAsGetDtcRecordSrvResponse is a convenience function that returns GetDtcRecordSrvResponseObjectAsResult wrapped in GetDtcRecordSrvResponse
func GetDtcRecordSrvResponseObjectAsResultAsGetDtcRecordSrvResponse(v *GetDtcRecordSrvResponseObjectAsResult) GetDtcRecordSrvResponse {
	return GetDtcRecordSrvResponse{
		GetDtcRecordSrvResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcRecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcRecordSrv
	err = newStrictDecoder(data).Decode(&dst.DtcRecordSrv)
	if err == nil {
		jsonDtcRecordSrv, _ := json.Marshal(dst.DtcRecordSrv)
		if string(jsonDtcRecordSrv) == "{}" { // empty struct
			dst.DtcRecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.DtcRecordSrv = nil
	}

	// try to unmarshal data into GetDtcRecordSrvResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcRecordSrvResponseObjectAsResult)
	if err == nil {
		jsonGetDtcRecordSrvResponseObjectAsResult, _ := json.Marshal(dst.GetDtcRecordSrvResponseObjectAsResult)
		if string(jsonGetDtcRecordSrvResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcRecordSrvResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcRecordSrvResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcRecordSrv = nil
		dst.GetDtcRecordSrvResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcRecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcRecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcRecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.DtcRecordSrv != nil {
		return json.Marshal(&src.DtcRecordSrv)
	}

	if src.GetDtcRecordSrvResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcRecordSrvResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcRecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcRecordSrv != nil {
		return obj.DtcRecordSrv
	}

	if obj.GetDtcRecordSrvResponseObjectAsResult != nil {
		return obj.GetDtcRecordSrvResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcRecordSrvResponse struct {
	value *GetDtcRecordSrvResponse
	isSet bool
}

func (v NullableGetDtcRecordSrvResponse) Get() *GetDtcRecordSrvResponse {
	return v.value
}

func (v *NullableGetDtcRecordSrvResponse) Set(val *GetDtcRecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcRecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcRecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcRecordSrvResponse(val *GetDtcRecordSrvResponse) *NullableGetDtcRecordSrvResponse {
	return &NullableGetDtcRecordSrvResponse{value: val, isSet: true}
}

func (v NullableGetDtcRecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcRecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
