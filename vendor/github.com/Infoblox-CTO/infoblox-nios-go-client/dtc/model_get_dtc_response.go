/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcResponse - struct for GetDtcResponse
type GetDtcResponse struct {
	Dtc                          *Dtc
	GetDtcResponseObjectAsResult *GetDtcResponseObjectAsResult
}

// DtcAsGetDtcResponse is a convenience function that returns Dtc wrapped in GetDtcResponse
func DtcAsGetDtcResponse(v *Dtc) GetDtcResponse {
	return GetDtcResponse{
		Dtc: v,
	}
}

// GetDtcResponseObjectAsResultAsGetDtcResponse is a convenience function that returns GetDtcResponseObjectAsResult wrapped in GetDtcResponse
func GetDtcResponseObjectAsResultAsGetDtcResponse(v *GetDtcResponseObjectAsResult) GetDtcResponse {
	return GetDtcResponse{
		GetDtcResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dtc
	err = newStrictDecoder(data).Decode(&dst.Dtc)
	if err == nil {
		jsonDtc, _ := json.Marshal(dst.Dtc)
		if string(jsonDtc) == "{}" { // empty struct
			dst.Dtc = nil
		} else {
			match++
		}
	} else {
		dst.Dtc = nil
	}

	// try to unmarshal data into GetDtcResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcResponseObjectAsResult)
	if err == nil {
		jsonGetDtcResponseObjectAsResult, _ := json.Marshal(dst.GetDtcResponseObjectAsResult)
		if string(jsonGetDtcResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dtc = nil
		dst.GetDtcResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcResponse) MarshalJSON() ([]byte, error) {
	if src.Dtc != nil {
		return json.Marshal(&src.Dtc)
	}

	if src.GetDtcResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Dtc != nil {
		return obj.Dtc
	}

	if obj.GetDtcResponseObjectAsResult != nil {
		return obj.GetDtcResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcResponse struct {
	value *GetDtcResponse
	isSet bool
}

func (v NullableGetDtcResponse) Get() *GetDtcResponse {
	return v.value
}

func (v *NullableGetDtcResponse) Set(val *GetDtcResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcResponse(val *GetDtcResponse) *NullableGetDtcResponse {
	return &NullableGetDtcResponse{value: val, isSet: true}
}

func (v NullableGetDtcResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
