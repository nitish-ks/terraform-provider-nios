/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcAllrecordsResponse - struct for ListDtcAllrecordsResponse
type ListDtcAllrecordsResponse struct {
	ListDtcAllrecordsResponseObject *ListDtcAllrecordsResponseObject
	ArrayOfDtcAllrecords            *[]DtcAllrecords
}

// ListDtcAllrecordsResponseObjectAsListDtcAllrecordsResponse is a convenience function that returns ListDtcAllrecordsResponseObject wrapped in ListDtcAllrecordsResponse
func ListDtcAllrecordsResponseObjectAsListDtcAllrecordsResponse(v *ListDtcAllrecordsResponseObject) ListDtcAllrecordsResponse {
	return ListDtcAllrecordsResponse{
		ListDtcAllrecordsResponseObject: v,
	}
}

// []DtcAllrecordsAsListDtcAllrecordsResponse is a convenience function that returns []DtcAllrecords wrapped in ListDtcAllrecordsResponse
func ArrayOfDtcAllrecordsAsListDtcAllrecordsResponse(v *[]DtcAllrecords) ListDtcAllrecordsResponse {
	return ListDtcAllrecordsResponse{
		ArrayOfDtcAllrecords: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcAllrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcAllrecordsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcAllrecordsResponseObject)
	if err == nil {
		jsonListDtcAllrecordsResponseObject, _ := json.Marshal(dst.ListDtcAllrecordsResponseObject)
		if string(jsonListDtcAllrecordsResponseObject) == "{}" { // empty struct
			dst.ListDtcAllrecordsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcAllrecordsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcAllrecords
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcAllrecords)
	if err == nil {
		jsonArrayOfDtcAllrecords, _ := json.Marshal(dst.ArrayOfDtcAllrecords)
		if string(jsonArrayOfDtcAllrecords) == "{}" { // empty struct
			dst.ArrayOfDtcAllrecords = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcAllrecords = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcAllrecordsResponseObject = nil
		dst.ArrayOfDtcAllrecords = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcAllrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcAllrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcAllrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcAllrecordsResponseObject != nil {
		return json.Marshal(&src.ListDtcAllrecordsResponseObject)
	}

	if src.ArrayOfDtcAllrecords != nil {
		return json.Marshal(&src.ArrayOfDtcAllrecords)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcAllrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcAllrecordsResponseObject != nil {
		return obj.ListDtcAllrecordsResponseObject
	}

	if obj.ArrayOfDtcAllrecords != nil {
		return obj.ArrayOfDtcAllrecords
	}

	// all schemas are nil
	return nil
}

type NullableListDtcAllrecordsResponse struct {
	value *ListDtcAllrecordsResponse
	isSet bool
}

func (v NullableListDtcAllrecordsResponse) Get() *ListDtcAllrecordsResponse {
	return v.value
}

func (v *NullableListDtcAllrecordsResponse) Set(val *ListDtcAllrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcAllrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcAllrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcAllrecordsResponse(val *ListDtcAllrecordsResponse) *NullableListDtcAllrecordsResponse {
	return &NullableListDtcAllrecordsResponse{value: val, isSet: true}
}

func (v NullableListDtcAllrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcAllrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
