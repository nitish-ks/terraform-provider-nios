/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcCertificateResponse - struct for ListDtcCertificateResponse
type ListDtcCertificateResponse struct {
	ListDtcCertificateResponseObject *ListDtcCertificateResponseObject
	ArrayOfDtcCertificate            *[]DtcCertificate
}

// ListDtcCertificateResponseObjectAsListDtcCertificateResponse is a convenience function that returns ListDtcCertificateResponseObject wrapped in ListDtcCertificateResponse
func ListDtcCertificateResponseObjectAsListDtcCertificateResponse(v *ListDtcCertificateResponseObject) ListDtcCertificateResponse {
	return ListDtcCertificateResponse{
		ListDtcCertificateResponseObject: v,
	}
}

// []DtcCertificateAsListDtcCertificateResponse is a convenience function that returns []DtcCertificate wrapped in ListDtcCertificateResponse
func ArrayOfDtcCertificateAsListDtcCertificateResponse(v *[]DtcCertificate) ListDtcCertificateResponse {
	return ListDtcCertificateResponse{
		ArrayOfDtcCertificate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcCertificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcCertificateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcCertificateResponseObject)
	if err == nil {
		jsonListDtcCertificateResponseObject, _ := json.Marshal(dst.ListDtcCertificateResponseObject)
		if string(jsonListDtcCertificateResponseObject) == "{}" { // empty struct
			dst.ListDtcCertificateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcCertificateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcCertificate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcCertificate)
	if err == nil {
		jsonArrayOfDtcCertificate, _ := json.Marshal(dst.ArrayOfDtcCertificate)
		if string(jsonArrayOfDtcCertificate) == "{}" { // empty struct
			dst.ArrayOfDtcCertificate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcCertificate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcCertificateResponseObject = nil
		dst.ArrayOfDtcCertificate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcCertificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcCertificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcCertificateResponseObject != nil {
		return json.Marshal(&src.ListDtcCertificateResponseObject)
	}

	if src.ArrayOfDtcCertificate != nil {
		return json.Marshal(&src.ArrayOfDtcCertificate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcCertificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcCertificateResponseObject != nil {
		return obj.ListDtcCertificateResponseObject
	}

	if obj.ArrayOfDtcCertificate != nil {
		return obj.ArrayOfDtcCertificate
	}

	// all schemas are nil
	return nil
}

type NullableListDtcCertificateResponse struct {
	value *ListDtcCertificateResponse
	isSet bool
}

func (v NullableListDtcCertificateResponse) Get() *ListDtcCertificateResponse {
	return v.value
}

func (v *NullableListDtcCertificateResponse) Set(val *ListDtcCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcCertificateResponse(val *ListDtcCertificateResponse) *NullableListDtcCertificateResponse {
	return &NullableListDtcCertificateResponse{value: val, isSet: true}
}

func (v NullableListDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
