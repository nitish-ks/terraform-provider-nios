/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorHttpResponse - struct for ListDtcMonitorHttpResponse
type ListDtcMonitorHttpResponse struct {
	ListDtcMonitorHttpResponseObject *ListDtcMonitorHttpResponseObject
	ArrayOfDtcMonitorHttp            *[]DtcMonitorHttp
}

// ListDtcMonitorHttpResponseObjectAsListDtcMonitorHttpResponse is a convenience function that returns ListDtcMonitorHttpResponseObject wrapped in ListDtcMonitorHttpResponse
func ListDtcMonitorHttpResponseObjectAsListDtcMonitorHttpResponse(v *ListDtcMonitorHttpResponseObject) ListDtcMonitorHttpResponse {
	return ListDtcMonitorHttpResponse{
		ListDtcMonitorHttpResponseObject: v,
	}
}

// []DtcMonitorHttpAsListDtcMonitorHttpResponse is a convenience function that returns []DtcMonitorHttp wrapped in ListDtcMonitorHttpResponse
func ArrayOfDtcMonitorHttpAsListDtcMonitorHttpResponse(v *[]DtcMonitorHttp) ListDtcMonitorHttpResponse {
	return ListDtcMonitorHttpResponse{
		ArrayOfDtcMonitorHttp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorHttpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorHttpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorHttpResponseObject)
	if err == nil {
		jsonListDtcMonitorHttpResponseObject, _ := json.Marshal(dst.ListDtcMonitorHttpResponseObject)
		if string(jsonListDtcMonitorHttpResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorHttpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorHttpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitorHttp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitorHttp)
	if err == nil {
		jsonArrayOfDtcMonitorHttp, _ := json.Marshal(dst.ArrayOfDtcMonitorHttp)
		if string(jsonArrayOfDtcMonitorHttp) == "{}" { // empty struct
			dst.ArrayOfDtcMonitorHttp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitorHttp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorHttpResponseObject = nil
		dst.ArrayOfDtcMonitorHttp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorHttpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorHttpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorHttpResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorHttpResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorHttpResponseObject)
	}

	if src.ArrayOfDtcMonitorHttp != nil {
		return json.Marshal(&src.ArrayOfDtcMonitorHttp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorHttpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorHttpResponseObject != nil {
		return obj.ListDtcMonitorHttpResponseObject
	}

	if obj.ArrayOfDtcMonitorHttp != nil {
		return obj.ArrayOfDtcMonitorHttp
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorHttpResponse struct {
	value *ListDtcMonitorHttpResponse
	isSet bool
}

func (v NullableListDtcMonitorHttpResponse) Get() *ListDtcMonitorHttpResponse {
	return v.value
}

func (v *NullableListDtcMonitorHttpResponse) Set(val *ListDtcMonitorHttpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorHttpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorHttpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorHttpResponse(val *ListDtcMonitorHttpResponse) *NullableListDtcMonitorHttpResponse {
	return &NullableListDtcMonitorHttpResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorHttpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorHttpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
