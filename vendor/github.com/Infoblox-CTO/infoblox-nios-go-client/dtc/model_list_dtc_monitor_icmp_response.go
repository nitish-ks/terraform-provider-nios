/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorIcmpResponse - struct for ListDtcMonitorIcmpResponse
type ListDtcMonitorIcmpResponse struct {
	ListDtcMonitorIcmpResponseObject *ListDtcMonitorIcmpResponseObject
	ArrayOfDtcMonitorIcmp            *[]DtcMonitorIcmp
}

// ListDtcMonitorIcmpResponseObjectAsListDtcMonitorIcmpResponse is a convenience function that returns ListDtcMonitorIcmpResponseObject wrapped in ListDtcMonitorIcmpResponse
func ListDtcMonitorIcmpResponseObjectAsListDtcMonitorIcmpResponse(v *ListDtcMonitorIcmpResponseObject) ListDtcMonitorIcmpResponse {
	return ListDtcMonitorIcmpResponse{
		ListDtcMonitorIcmpResponseObject: v,
	}
}

// []DtcMonitorIcmpAsListDtcMonitorIcmpResponse is a convenience function that returns []DtcMonitorIcmp wrapped in ListDtcMonitorIcmpResponse
func ArrayOfDtcMonitorIcmpAsListDtcMonitorIcmpResponse(v *[]DtcMonitorIcmp) ListDtcMonitorIcmpResponse {
	return ListDtcMonitorIcmpResponse{
		ArrayOfDtcMonitorIcmp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorIcmpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorIcmpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorIcmpResponseObject)
	if err == nil {
		jsonListDtcMonitorIcmpResponseObject, _ := json.Marshal(dst.ListDtcMonitorIcmpResponseObject)
		if string(jsonListDtcMonitorIcmpResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorIcmpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorIcmpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitorIcmp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitorIcmp)
	if err == nil {
		jsonArrayOfDtcMonitorIcmp, _ := json.Marshal(dst.ArrayOfDtcMonitorIcmp)
		if string(jsonArrayOfDtcMonitorIcmp) == "{}" { // empty struct
			dst.ArrayOfDtcMonitorIcmp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitorIcmp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorIcmpResponseObject = nil
		dst.ArrayOfDtcMonitorIcmp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorIcmpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorIcmpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorIcmpResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorIcmpResponseObject)
	}

	if src.ArrayOfDtcMonitorIcmp != nil {
		return json.Marshal(&src.ArrayOfDtcMonitorIcmp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorIcmpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorIcmpResponseObject != nil {
		return obj.ListDtcMonitorIcmpResponseObject
	}

	if obj.ArrayOfDtcMonitorIcmp != nil {
		return obj.ArrayOfDtcMonitorIcmp
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorIcmpResponse struct {
	value *ListDtcMonitorIcmpResponse
	isSet bool
}

func (v NullableListDtcMonitorIcmpResponse) Get() *ListDtcMonitorIcmpResponse {
	return v.value
}

func (v *NullableListDtcMonitorIcmpResponse) Set(val *ListDtcMonitorIcmpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorIcmpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorIcmpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorIcmpResponse(val *ListDtcMonitorIcmpResponse) *NullableListDtcMonitorIcmpResponse {
	return &NullableListDtcMonitorIcmpResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorIcmpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
