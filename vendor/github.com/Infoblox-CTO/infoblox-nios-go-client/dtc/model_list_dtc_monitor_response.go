/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorResponse - struct for ListDtcMonitorResponse
type ListDtcMonitorResponse struct {
	ListDtcMonitorResponseObject *ListDtcMonitorResponseObject
	ArrayOfDtcMonitor            *[]DtcMonitor
}

// ListDtcMonitorResponseObjectAsListDtcMonitorResponse is a convenience function that returns ListDtcMonitorResponseObject wrapped in ListDtcMonitorResponse
func ListDtcMonitorResponseObjectAsListDtcMonitorResponse(v *ListDtcMonitorResponseObject) ListDtcMonitorResponse {
	return ListDtcMonitorResponse{
		ListDtcMonitorResponseObject: v,
	}
}

// []DtcMonitorAsListDtcMonitorResponse is a convenience function that returns []DtcMonitor wrapped in ListDtcMonitorResponse
func ArrayOfDtcMonitorAsListDtcMonitorResponse(v *[]DtcMonitor) ListDtcMonitorResponse {
	return ListDtcMonitorResponse{
		ArrayOfDtcMonitor: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorResponseObject)
	if err == nil {
		jsonListDtcMonitorResponseObject, _ := json.Marshal(dst.ListDtcMonitorResponseObject)
		if string(jsonListDtcMonitorResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitor
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitor)
	if err == nil {
		jsonArrayOfDtcMonitor, _ := json.Marshal(dst.ArrayOfDtcMonitor)
		if string(jsonArrayOfDtcMonitor) == "{}" { // empty struct
			dst.ArrayOfDtcMonitor = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitor = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorResponseObject = nil
		dst.ArrayOfDtcMonitor = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorResponseObject)
	}

	if src.ArrayOfDtcMonitor != nil {
		return json.Marshal(&src.ArrayOfDtcMonitor)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorResponseObject != nil {
		return obj.ListDtcMonitorResponseObject
	}

	if obj.ArrayOfDtcMonitor != nil {
		return obj.ArrayOfDtcMonitor
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorResponse struct {
	value *ListDtcMonitorResponse
	isSet bool
}

func (v NullableListDtcMonitorResponse) Get() *ListDtcMonitorResponse {
	return v.value
}

func (v *NullableListDtcMonitorResponse) Set(val *ListDtcMonitorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorResponse(val *ListDtcMonitorResponse) *NullableListDtcMonitorResponse {
	return &NullableListDtcMonitorResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
