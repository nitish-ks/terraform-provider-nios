/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorSipResponse - struct for ListDtcMonitorSipResponse
type ListDtcMonitorSipResponse struct {
	ListDtcMonitorSipResponseObject *ListDtcMonitorSipResponseObject
	ArrayOfDtcMonitorSip            *[]DtcMonitorSip
}

// ListDtcMonitorSipResponseObjectAsListDtcMonitorSipResponse is a convenience function that returns ListDtcMonitorSipResponseObject wrapped in ListDtcMonitorSipResponse
func ListDtcMonitorSipResponseObjectAsListDtcMonitorSipResponse(v *ListDtcMonitorSipResponseObject) ListDtcMonitorSipResponse {
	return ListDtcMonitorSipResponse{
		ListDtcMonitorSipResponseObject: v,
	}
}

// []DtcMonitorSipAsListDtcMonitorSipResponse is a convenience function that returns []DtcMonitorSip wrapped in ListDtcMonitorSipResponse
func ArrayOfDtcMonitorSipAsListDtcMonitorSipResponse(v *[]DtcMonitorSip) ListDtcMonitorSipResponse {
	return ListDtcMonitorSipResponse{
		ArrayOfDtcMonitorSip: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorSipResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorSipResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorSipResponseObject)
	if err == nil {
		jsonListDtcMonitorSipResponseObject, _ := json.Marshal(dst.ListDtcMonitorSipResponseObject)
		if string(jsonListDtcMonitorSipResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorSipResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorSipResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitorSip
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitorSip)
	if err == nil {
		jsonArrayOfDtcMonitorSip, _ := json.Marshal(dst.ArrayOfDtcMonitorSip)
		if string(jsonArrayOfDtcMonitorSip) == "{}" { // empty struct
			dst.ArrayOfDtcMonitorSip = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitorSip = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorSipResponseObject = nil
		dst.ArrayOfDtcMonitorSip = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorSipResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorSipResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorSipResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorSipResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorSipResponseObject)
	}

	if src.ArrayOfDtcMonitorSip != nil {
		return json.Marshal(&src.ArrayOfDtcMonitorSip)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorSipResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorSipResponseObject != nil {
		return obj.ListDtcMonitorSipResponseObject
	}

	if obj.ArrayOfDtcMonitorSip != nil {
		return obj.ArrayOfDtcMonitorSip
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorSipResponse struct {
	value *ListDtcMonitorSipResponse
	isSet bool
}

func (v NullableListDtcMonitorSipResponse) Get() *ListDtcMonitorSipResponse {
	return v.value
}

func (v *NullableListDtcMonitorSipResponse) Set(val *ListDtcMonitorSipResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorSipResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorSipResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorSipResponse(val *ListDtcMonitorSipResponse) *NullableListDtcMonitorSipResponse {
	return &NullableListDtcMonitorSipResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorSipResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorSipResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
