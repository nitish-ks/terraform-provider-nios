/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorTcpResponse - struct for ListDtcMonitorTcpResponse
type ListDtcMonitorTcpResponse struct {
	ListDtcMonitorTcpResponseObject *ListDtcMonitorTcpResponseObject
	ArrayOfDtcMonitorTcp            *[]DtcMonitorTcp
}

// ListDtcMonitorTcpResponseObjectAsListDtcMonitorTcpResponse is a convenience function that returns ListDtcMonitorTcpResponseObject wrapped in ListDtcMonitorTcpResponse
func ListDtcMonitorTcpResponseObjectAsListDtcMonitorTcpResponse(v *ListDtcMonitorTcpResponseObject) ListDtcMonitorTcpResponse {
	return ListDtcMonitorTcpResponse{
		ListDtcMonitorTcpResponseObject: v,
	}
}

// []DtcMonitorTcpAsListDtcMonitorTcpResponse is a convenience function that returns []DtcMonitorTcp wrapped in ListDtcMonitorTcpResponse
func ArrayOfDtcMonitorTcpAsListDtcMonitorTcpResponse(v *[]DtcMonitorTcp) ListDtcMonitorTcpResponse {
	return ListDtcMonitorTcpResponse{
		ArrayOfDtcMonitorTcp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorTcpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorTcpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorTcpResponseObject)
	if err == nil {
		jsonListDtcMonitorTcpResponseObject, _ := json.Marshal(dst.ListDtcMonitorTcpResponseObject)
		if string(jsonListDtcMonitorTcpResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorTcpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorTcpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitorTcp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitorTcp)
	if err == nil {
		jsonArrayOfDtcMonitorTcp, _ := json.Marshal(dst.ArrayOfDtcMonitorTcp)
		if string(jsonArrayOfDtcMonitorTcp) == "{}" { // empty struct
			dst.ArrayOfDtcMonitorTcp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitorTcp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorTcpResponseObject = nil
		dst.ArrayOfDtcMonitorTcp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorTcpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorTcpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorTcpResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorTcpResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorTcpResponseObject)
	}

	if src.ArrayOfDtcMonitorTcp != nil {
		return json.Marshal(&src.ArrayOfDtcMonitorTcp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorTcpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorTcpResponseObject != nil {
		return obj.ListDtcMonitorTcpResponseObject
	}

	if obj.ArrayOfDtcMonitorTcp != nil {
		return obj.ArrayOfDtcMonitorTcp
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorTcpResponse struct {
	value *ListDtcMonitorTcpResponse
	isSet bool
}

func (v NullableListDtcMonitorTcpResponse) Get() *ListDtcMonitorTcpResponse {
	return v.value
}

func (v *NullableListDtcMonitorTcpResponse) Set(val *ListDtcMonitorTcpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorTcpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorTcpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorTcpResponse(val *ListDtcMonitorTcpResponse) *NullableListDtcMonitorTcpResponse {
	return &NullableListDtcMonitorTcpResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorTcpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorTcpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
