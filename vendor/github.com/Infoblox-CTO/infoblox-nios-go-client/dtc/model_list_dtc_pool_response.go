/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcPoolResponse - struct for ListDtcPoolResponse
type ListDtcPoolResponse struct {
	ListDtcPoolResponseObject *ListDtcPoolResponseObject
	ArrayOfDtcPool            *[]DtcPool
}

// ListDtcPoolResponseObjectAsListDtcPoolResponse is a convenience function that returns ListDtcPoolResponseObject wrapped in ListDtcPoolResponse
func ListDtcPoolResponseObjectAsListDtcPoolResponse(v *ListDtcPoolResponseObject) ListDtcPoolResponse {
	return ListDtcPoolResponse{
		ListDtcPoolResponseObject: v,
	}
}

// []DtcPoolAsListDtcPoolResponse is a convenience function that returns []DtcPool wrapped in ListDtcPoolResponse
func ArrayOfDtcPoolAsListDtcPoolResponse(v *[]DtcPool) ListDtcPoolResponse {
	return ListDtcPoolResponse{
		ArrayOfDtcPool: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcPoolResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcPoolResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcPoolResponseObject)
	if err == nil {
		jsonListDtcPoolResponseObject, _ := json.Marshal(dst.ListDtcPoolResponseObject)
		if string(jsonListDtcPoolResponseObject) == "{}" { // empty struct
			dst.ListDtcPoolResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcPoolResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcPool
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcPool)
	if err == nil {
		jsonArrayOfDtcPool, _ := json.Marshal(dst.ArrayOfDtcPool)
		if string(jsonArrayOfDtcPool) == "{}" { // empty struct
			dst.ArrayOfDtcPool = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcPool = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcPoolResponseObject = nil
		dst.ArrayOfDtcPool = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcPoolResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcPoolResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcPoolResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcPoolResponseObject != nil {
		return json.Marshal(&src.ListDtcPoolResponseObject)
	}

	if src.ArrayOfDtcPool != nil {
		return json.Marshal(&src.ArrayOfDtcPool)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcPoolResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcPoolResponseObject != nil {
		return obj.ListDtcPoolResponseObject
	}

	if obj.ArrayOfDtcPool != nil {
		return obj.ArrayOfDtcPool
	}

	// all schemas are nil
	return nil
}

type NullableListDtcPoolResponse struct {
	value *ListDtcPoolResponse
	isSet bool
}

func (v NullableListDtcPoolResponse) Get() *ListDtcPoolResponse {
	return v.value
}

func (v *NullableListDtcPoolResponse) Set(val *ListDtcPoolResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcPoolResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcPoolResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcPoolResponse(val *ListDtcPoolResponse) *NullableListDtcPoolResponse {
	return &NullableListDtcPoolResponse{value: val, isSet: true}
}

func (v NullableListDtcPoolResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcPoolResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
