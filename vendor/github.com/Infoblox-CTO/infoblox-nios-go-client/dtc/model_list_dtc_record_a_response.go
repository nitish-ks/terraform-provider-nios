/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcRecordAResponse - struct for ListDtcRecordAResponse
type ListDtcRecordAResponse struct {
	ListDtcRecordAResponseObject *ListDtcRecordAResponseObject
	ArrayOfDtcRecordA            *[]DtcRecordA
}

// ListDtcRecordAResponseObjectAsListDtcRecordAResponse is a convenience function that returns ListDtcRecordAResponseObject wrapped in ListDtcRecordAResponse
func ListDtcRecordAResponseObjectAsListDtcRecordAResponse(v *ListDtcRecordAResponseObject) ListDtcRecordAResponse {
	return ListDtcRecordAResponse{
		ListDtcRecordAResponseObject: v,
	}
}

// []DtcRecordAAsListDtcRecordAResponse is a convenience function that returns []DtcRecordA wrapped in ListDtcRecordAResponse
func ArrayOfDtcRecordAAsListDtcRecordAResponse(v *[]DtcRecordA) ListDtcRecordAResponse {
	return ListDtcRecordAResponse{
		ArrayOfDtcRecordA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcRecordAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcRecordAResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcRecordAResponseObject)
	if err == nil {
		jsonListDtcRecordAResponseObject, _ := json.Marshal(dst.ListDtcRecordAResponseObject)
		if string(jsonListDtcRecordAResponseObject) == "{}" { // empty struct
			dst.ListDtcRecordAResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcRecordAResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcRecordA
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcRecordA)
	if err == nil {
		jsonArrayOfDtcRecordA, _ := json.Marshal(dst.ArrayOfDtcRecordA)
		if string(jsonArrayOfDtcRecordA) == "{}" { // empty struct
			dst.ArrayOfDtcRecordA = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcRecordA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcRecordAResponseObject = nil
		dst.ArrayOfDtcRecordA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcRecordAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcRecordAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcRecordAResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcRecordAResponseObject != nil {
		return json.Marshal(&src.ListDtcRecordAResponseObject)
	}

	if src.ArrayOfDtcRecordA != nil {
		return json.Marshal(&src.ArrayOfDtcRecordA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcRecordAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcRecordAResponseObject != nil {
		return obj.ListDtcRecordAResponseObject
	}

	if obj.ArrayOfDtcRecordA != nil {
		return obj.ArrayOfDtcRecordA
	}

	// all schemas are nil
	return nil
}

type NullableListDtcRecordAResponse struct {
	value *ListDtcRecordAResponse
	isSet bool
}

func (v NullableListDtcRecordAResponse) Get() *ListDtcRecordAResponse {
	return v.value
}

func (v *NullableListDtcRecordAResponse) Set(val *ListDtcRecordAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcRecordAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcRecordAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcRecordAResponse(val *ListDtcRecordAResponse) *NullableListDtcRecordAResponse {
	return &NullableListDtcRecordAResponse{value: val, isSet: true}
}

func (v NullableListDtcRecordAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcRecordAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
