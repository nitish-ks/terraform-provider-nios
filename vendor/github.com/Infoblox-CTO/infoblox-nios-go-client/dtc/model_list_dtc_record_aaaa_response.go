/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcRecordAaaaResponse - struct for ListDtcRecordAaaaResponse
type ListDtcRecordAaaaResponse struct {
	ListDtcRecordAaaaResponseObject *ListDtcRecordAaaaResponseObject
	ArrayOfDtcRecordAaaa            *[]DtcRecordAaaa
}

// ListDtcRecordAaaaResponseObjectAsListDtcRecordAaaaResponse is a convenience function that returns ListDtcRecordAaaaResponseObject wrapped in ListDtcRecordAaaaResponse
func ListDtcRecordAaaaResponseObjectAsListDtcRecordAaaaResponse(v *ListDtcRecordAaaaResponseObject) ListDtcRecordAaaaResponse {
	return ListDtcRecordAaaaResponse{
		ListDtcRecordAaaaResponseObject: v,
	}
}

// []DtcRecordAaaaAsListDtcRecordAaaaResponse is a convenience function that returns []DtcRecordAaaa wrapped in ListDtcRecordAaaaResponse
func ArrayOfDtcRecordAaaaAsListDtcRecordAaaaResponse(v *[]DtcRecordAaaa) ListDtcRecordAaaaResponse {
	return ListDtcRecordAaaaResponse{
		ArrayOfDtcRecordAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcRecordAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcRecordAaaaResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcRecordAaaaResponseObject)
	if err == nil {
		jsonListDtcRecordAaaaResponseObject, _ := json.Marshal(dst.ListDtcRecordAaaaResponseObject)
		if string(jsonListDtcRecordAaaaResponseObject) == "{}" { // empty struct
			dst.ListDtcRecordAaaaResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcRecordAaaaResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcRecordAaaa
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcRecordAaaa)
	if err == nil {
		jsonArrayOfDtcRecordAaaa, _ := json.Marshal(dst.ArrayOfDtcRecordAaaa)
		if string(jsonArrayOfDtcRecordAaaa) == "{}" { // empty struct
			dst.ArrayOfDtcRecordAaaa = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcRecordAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcRecordAaaaResponseObject = nil
		dst.ArrayOfDtcRecordAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcRecordAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcRecordAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcRecordAaaaResponseObject != nil {
		return json.Marshal(&src.ListDtcRecordAaaaResponseObject)
	}

	if src.ArrayOfDtcRecordAaaa != nil {
		return json.Marshal(&src.ArrayOfDtcRecordAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcRecordAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcRecordAaaaResponseObject != nil {
		return obj.ListDtcRecordAaaaResponseObject
	}

	if obj.ArrayOfDtcRecordAaaa != nil {
		return obj.ArrayOfDtcRecordAaaa
	}

	// all schemas are nil
	return nil
}

type NullableListDtcRecordAaaaResponse struct {
	value *ListDtcRecordAaaaResponse
	isSet bool
}

func (v NullableListDtcRecordAaaaResponse) Get() *ListDtcRecordAaaaResponse {
	return v.value
}

func (v *NullableListDtcRecordAaaaResponse) Set(val *ListDtcRecordAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcRecordAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcRecordAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcRecordAaaaResponse(val *ListDtcRecordAaaaResponse) *NullableListDtcRecordAaaaResponse {
	return &NullableListDtcRecordAaaaResponse{value: val, isSet: true}
}

func (v NullableListDtcRecordAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcRecordAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
