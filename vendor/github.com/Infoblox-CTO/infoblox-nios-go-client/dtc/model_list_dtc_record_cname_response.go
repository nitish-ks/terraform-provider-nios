/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcRecordCnameResponse - struct for ListDtcRecordCnameResponse
type ListDtcRecordCnameResponse struct {
	ListDtcRecordCnameResponseObject *ListDtcRecordCnameResponseObject
	ArrayOfDtcRecordCname            *[]DtcRecordCname
}

// ListDtcRecordCnameResponseObjectAsListDtcRecordCnameResponse is a convenience function that returns ListDtcRecordCnameResponseObject wrapped in ListDtcRecordCnameResponse
func ListDtcRecordCnameResponseObjectAsListDtcRecordCnameResponse(v *ListDtcRecordCnameResponseObject) ListDtcRecordCnameResponse {
	return ListDtcRecordCnameResponse{
		ListDtcRecordCnameResponseObject: v,
	}
}

// []DtcRecordCnameAsListDtcRecordCnameResponse is a convenience function that returns []DtcRecordCname wrapped in ListDtcRecordCnameResponse
func ArrayOfDtcRecordCnameAsListDtcRecordCnameResponse(v *[]DtcRecordCname) ListDtcRecordCnameResponse {
	return ListDtcRecordCnameResponse{
		ArrayOfDtcRecordCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcRecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcRecordCnameResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcRecordCnameResponseObject)
	if err == nil {
		jsonListDtcRecordCnameResponseObject, _ := json.Marshal(dst.ListDtcRecordCnameResponseObject)
		if string(jsonListDtcRecordCnameResponseObject) == "{}" { // empty struct
			dst.ListDtcRecordCnameResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcRecordCnameResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcRecordCname
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcRecordCname)
	if err == nil {
		jsonArrayOfDtcRecordCname, _ := json.Marshal(dst.ArrayOfDtcRecordCname)
		if string(jsonArrayOfDtcRecordCname) == "{}" { // empty struct
			dst.ArrayOfDtcRecordCname = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcRecordCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcRecordCnameResponseObject = nil
		dst.ArrayOfDtcRecordCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcRecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcRecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcRecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcRecordCnameResponseObject != nil {
		return json.Marshal(&src.ListDtcRecordCnameResponseObject)
	}

	if src.ArrayOfDtcRecordCname != nil {
		return json.Marshal(&src.ArrayOfDtcRecordCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcRecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcRecordCnameResponseObject != nil {
		return obj.ListDtcRecordCnameResponseObject
	}

	if obj.ArrayOfDtcRecordCname != nil {
		return obj.ArrayOfDtcRecordCname
	}

	// all schemas are nil
	return nil
}

type NullableListDtcRecordCnameResponse struct {
	value *ListDtcRecordCnameResponse
	isSet bool
}

func (v NullableListDtcRecordCnameResponse) Get() *ListDtcRecordCnameResponse {
	return v.value
}

func (v *NullableListDtcRecordCnameResponse) Set(val *ListDtcRecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcRecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcRecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcRecordCnameResponse(val *ListDtcRecordCnameResponse) *NullableListDtcRecordCnameResponse {
	return &NullableListDtcRecordCnameResponse{value: val, isSet: true}
}

func (v NullableListDtcRecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcRecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
