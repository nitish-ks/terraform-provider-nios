/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcRecordNaptrResponse - struct for ListDtcRecordNaptrResponse
type ListDtcRecordNaptrResponse struct {
	ListDtcRecordNaptrResponseObject *ListDtcRecordNaptrResponseObject
	ArrayOfDtcRecordNaptr            *[]DtcRecordNaptr
}

// ListDtcRecordNaptrResponseObjectAsListDtcRecordNaptrResponse is a convenience function that returns ListDtcRecordNaptrResponseObject wrapped in ListDtcRecordNaptrResponse
func ListDtcRecordNaptrResponseObjectAsListDtcRecordNaptrResponse(v *ListDtcRecordNaptrResponseObject) ListDtcRecordNaptrResponse {
	return ListDtcRecordNaptrResponse{
		ListDtcRecordNaptrResponseObject: v,
	}
}

// []DtcRecordNaptrAsListDtcRecordNaptrResponse is a convenience function that returns []DtcRecordNaptr wrapped in ListDtcRecordNaptrResponse
func ArrayOfDtcRecordNaptrAsListDtcRecordNaptrResponse(v *[]DtcRecordNaptr) ListDtcRecordNaptrResponse {
	return ListDtcRecordNaptrResponse{
		ArrayOfDtcRecordNaptr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcRecordNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcRecordNaptrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcRecordNaptrResponseObject)
	if err == nil {
		jsonListDtcRecordNaptrResponseObject, _ := json.Marshal(dst.ListDtcRecordNaptrResponseObject)
		if string(jsonListDtcRecordNaptrResponseObject) == "{}" { // empty struct
			dst.ListDtcRecordNaptrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcRecordNaptrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcRecordNaptr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcRecordNaptr)
	if err == nil {
		jsonArrayOfDtcRecordNaptr, _ := json.Marshal(dst.ArrayOfDtcRecordNaptr)
		if string(jsonArrayOfDtcRecordNaptr) == "{}" { // empty struct
			dst.ArrayOfDtcRecordNaptr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcRecordNaptr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcRecordNaptrResponseObject = nil
		dst.ArrayOfDtcRecordNaptr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcRecordNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcRecordNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcRecordNaptrResponseObject != nil {
		return json.Marshal(&src.ListDtcRecordNaptrResponseObject)
	}

	if src.ArrayOfDtcRecordNaptr != nil {
		return json.Marshal(&src.ArrayOfDtcRecordNaptr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcRecordNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcRecordNaptrResponseObject != nil {
		return obj.ListDtcRecordNaptrResponseObject
	}

	if obj.ArrayOfDtcRecordNaptr != nil {
		return obj.ArrayOfDtcRecordNaptr
	}

	// all schemas are nil
	return nil
}

type NullableListDtcRecordNaptrResponse struct {
	value *ListDtcRecordNaptrResponse
	isSet bool
}

func (v NullableListDtcRecordNaptrResponse) Get() *ListDtcRecordNaptrResponse {
	return v.value
}

func (v *NullableListDtcRecordNaptrResponse) Set(val *ListDtcRecordNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcRecordNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcRecordNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcRecordNaptrResponse(val *ListDtcRecordNaptrResponse) *NullableListDtcRecordNaptrResponse {
	return &NullableListDtcRecordNaptrResponse{value: val, isSet: true}
}

func (v NullableListDtcRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcRecordNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
