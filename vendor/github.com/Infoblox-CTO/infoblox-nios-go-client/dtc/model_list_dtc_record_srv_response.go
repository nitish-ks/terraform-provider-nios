/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcRecordSrvResponse - struct for ListDtcRecordSrvResponse
type ListDtcRecordSrvResponse struct {
	ListDtcRecordSrvResponseObject *ListDtcRecordSrvResponseObject
	ArrayOfDtcRecordSrv            *[]DtcRecordSrv
}

// ListDtcRecordSrvResponseObjectAsListDtcRecordSrvResponse is a convenience function that returns ListDtcRecordSrvResponseObject wrapped in ListDtcRecordSrvResponse
func ListDtcRecordSrvResponseObjectAsListDtcRecordSrvResponse(v *ListDtcRecordSrvResponseObject) ListDtcRecordSrvResponse {
	return ListDtcRecordSrvResponse{
		ListDtcRecordSrvResponseObject: v,
	}
}

// []DtcRecordSrvAsListDtcRecordSrvResponse is a convenience function that returns []DtcRecordSrv wrapped in ListDtcRecordSrvResponse
func ArrayOfDtcRecordSrvAsListDtcRecordSrvResponse(v *[]DtcRecordSrv) ListDtcRecordSrvResponse {
	return ListDtcRecordSrvResponse{
		ArrayOfDtcRecordSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcRecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcRecordSrvResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcRecordSrvResponseObject)
	if err == nil {
		jsonListDtcRecordSrvResponseObject, _ := json.Marshal(dst.ListDtcRecordSrvResponseObject)
		if string(jsonListDtcRecordSrvResponseObject) == "{}" { // empty struct
			dst.ListDtcRecordSrvResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcRecordSrvResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcRecordSrv
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcRecordSrv)
	if err == nil {
		jsonArrayOfDtcRecordSrv, _ := json.Marshal(dst.ArrayOfDtcRecordSrv)
		if string(jsonArrayOfDtcRecordSrv) == "{}" { // empty struct
			dst.ArrayOfDtcRecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcRecordSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcRecordSrvResponseObject = nil
		dst.ArrayOfDtcRecordSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcRecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcRecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcRecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcRecordSrvResponseObject != nil {
		return json.Marshal(&src.ListDtcRecordSrvResponseObject)
	}

	if src.ArrayOfDtcRecordSrv != nil {
		return json.Marshal(&src.ArrayOfDtcRecordSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcRecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcRecordSrvResponseObject != nil {
		return obj.ListDtcRecordSrvResponseObject
	}

	if obj.ArrayOfDtcRecordSrv != nil {
		return obj.ArrayOfDtcRecordSrv
	}

	// all schemas are nil
	return nil
}

type NullableListDtcRecordSrvResponse struct {
	value *ListDtcRecordSrvResponse
	isSet bool
}

func (v NullableListDtcRecordSrvResponse) Get() *ListDtcRecordSrvResponse {
	return v.value
}

func (v *NullableListDtcRecordSrvResponse) Set(val *ListDtcRecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcRecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcRecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcRecordSrvResponse(val *ListDtcRecordSrvResponse) *NullableListDtcRecordSrvResponse {
	return &NullableListDtcRecordSrvResponse{value: val, isSet: true}
}

func (v NullableListDtcRecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcRecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
