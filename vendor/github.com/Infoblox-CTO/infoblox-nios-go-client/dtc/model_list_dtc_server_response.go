/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcServerResponse - struct for ListDtcServerResponse
type ListDtcServerResponse struct {
	ListDtcServerResponseObject *ListDtcServerResponseObject
	ArrayOfDtcServer            *[]DtcServer
}

// ListDtcServerResponseObjectAsListDtcServerResponse is a convenience function that returns ListDtcServerResponseObject wrapped in ListDtcServerResponse
func ListDtcServerResponseObjectAsListDtcServerResponse(v *ListDtcServerResponseObject) ListDtcServerResponse {
	return ListDtcServerResponse{
		ListDtcServerResponseObject: v,
	}
}

// []DtcServerAsListDtcServerResponse is a convenience function that returns []DtcServer wrapped in ListDtcServerResponse
func ArrayOfDtcServerAsListDtcServerResponse(v *[]DtcServer) ListDtcServerResponse {
	return ListDtcServerResponse{
		ArrayOfDtcServer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcServerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcServerResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcServerResponseObject)
	if err == nil {
		jsonListDtcServerResponseObject, _ := json.Marshal(dst.ListDtcServerResponseObject)
		if string(jsonListDtcServerResponseObject) == "{}" { // empty struct
			dst.ListDtcServerResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcServerResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcServer
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcServer)
	if err == nil {
		jsonArrayOfDtcServer, _ := json.Marshal(dst.ArrayOfDtcServer)
		if string(jsonArrayOfDtcServer) == "{}" { // empty struct
			dst.ArrayOfDtcServer = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcServer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcServerResponseObject = nil
		dst.ArrayOfDtcServer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcServerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcServerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcServerResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcServerResponseObject != nil {
		return json.Marshal(&src.ListDtcServerResponseObject)
	}

	if src.ArrayOfDtcServer != nil {
		return json.Marshal(&src.ArrayOfDtcServer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcServerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcServerResponseObject != nil {
		return obj.ListDtcServerResponseObject
	}

	if obj.ArrayOfDtcServer != nil {
		return obj.ArrayOfDtcServer
	}

	// all schemas are nil
	return nil
}

type NullableListDtcServerResponse struct {
	value *ListDtcServerResponse
	isSet bool
}

func (v NullableListDtcServerResponse) Get() *ListDtcServerResponse {
	return v.value
}

func (v *NullableListDtcServerResponse) Set(val *ListDtcServerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcServerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcServerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcServerResponse(val *ListDtcServerResponse) *NullableListDtcServerResponse {
	return &NullableListDtcServerResponse{value: val, isSet: true}
}

func (v NullableListDtcServerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcServerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
