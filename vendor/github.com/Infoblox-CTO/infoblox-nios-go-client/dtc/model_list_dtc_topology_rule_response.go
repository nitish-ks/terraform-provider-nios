/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcTopologyRuleResponse - struct for ListDtcTopologyRuleResponse
type ListDtcTopologyRuleResponse struct {
	ListDtcTopologyRuleResponseObject *ListDtcTopologyRuleResponseObject
	ArrayOfDtcTopologyRule            *[]DtcTopologyRule
}

// ListDtcTopologyRuleResponseObjectAsListDtcTopologyRuleResponse is a convenience function that returns ListDtcTopologyRuleResponseObject wrapped in ListDtcTopologyRuleResponse
func ListDtcTopologyRuleResponseObjectAsListDtcTopologyRuleResponse(v *ListDtcTopologyRuleResponseObject) ListDtcTopologyRuleResponse {
	return ListDtcTopologyRuleResponse{
		ListDtcTopologyRuleResponseObject: v,
	}
}

// []DtcTopologyRuleAsListDtcTopologyRuleResponse is a convenience function that returns []DtcTopologyRule wrapped in ListDtcTopologyRuleResponse
func ArrayOfDtcTopologyRuleAsListDtcTopologyRuleResponse(v *[]DtcTopologyRule) ListDtcTopologyRuleResponse {
	return ListDtcTopologyRuleResponse{
		ArrayOfDtcTopologyRule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcTopologyRuleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcTopologyRuleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcTopologyRuleResponseObject)
	if err == nil {
		jsonListDtcTopologyRuleResponseObject, _ := json.Marshal(dst.ListDtcTopologyRuleResponseObject)
		if string(jsonListDtcTopologyRuleResponseObject) == "{}" { // empty struct
			dst.ListDtcTopologyRuleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcTopologyRuleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcTopologyRule
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcTopologyRule)
	if err == nil {
		jsonArrayOfDtcTopologyRule, _ := json.Marshal(dst.ArrayOfDtcTopologyRule)
		if string(jsonArrayOfDtcTopologyRule) == "{}" { // empty struct
			dst.ArrayOfDtcTopologyRule = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcTopologyRule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcTopologyRuleResponseObject = nil
		dst.ArrayOfDtcTopologyRule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcTopologyRuleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcTopologyRuleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcTopologyRuleResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcTopologyRuleResponseObject != nil {
		return json.Marshal(&src.ListDtcTopologyRuleResponseObject)
	}

	if src.ArrayOfDtcTopologyRule != nil {
		return json.Marshal(&src.ArrayOfDtcTopologyRule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcTopologyRuleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcTopologyRuleResponseObject != nil {
		return obj.ListDtcTopologyRuleResponseObject
	}

	if obj.ArrayOfDtcTopologyRule != nil {
		return obj.ArrayOfDtcTopologyRule
	}

	// all schemas are nil
	return nil
}

type NullableListDtcTopologyRuleResponse struct {
	value *ListDtcTopologyRuleResponse
	isSet bool
}

func (v NullableListDtcTopologyRuleResponse) Get() *ListDtcTopologyRuleResponse {
	return v.value
}

func (v *NullableListDtcTopologyRuleResponse) Set(val *ListDtcTopologyRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcTopologyRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcTopologyRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcTopologyRuleResponse(val *ListDtcTopologyRuleResponse) *NullableListDtcTopologyRuleResponse {
	return &NullableListDtcTopologyRuleResponse{value: val, isSet: true}
}

func (v NullableListDtcTopologyRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcTopologyRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
