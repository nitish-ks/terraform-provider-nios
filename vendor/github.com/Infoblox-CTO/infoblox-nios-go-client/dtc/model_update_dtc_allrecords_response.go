/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// UpdateDtcAllrecordsResponse - struct for UpdateDtcAllrecordsResponse
type UpdateDtcAllrecordsResponse struct {
	UpdateDtcAllrecordsResponseAsObject *UpdateDtcAllrecordsResponseAsObject
	String                              *string
}

// UpdateDtcAllrecordsResponseAsObjectAsUpdateDtcAllrecordsResponse is a convenience function that returns UpdateDtcAllrecordsResponseAsObject wrapped in UpdateDtcAllrecordsResponse
func UpdateDtcAllrecordsResponseAsObjectAsUpdateDtcAllrecordsResponse(v *UpdateDtcAllrecordsResponseAsObject) UpdateDtcAllrecordsResponse {
	return UpdateDtcAllrecordsResponse{
		UpdateDtcAllrecordsResponseAsObject: v,
	}
}

// stringAsUpdateDtcAllrecordsResponse is a convenience function that returns string wrapped in UpdateDtcAllrecordsResponse
func StringAsUpdateDtcAllrecordsResponse(v *string) UpdateDtcAllrecordsResponse {
	return UpdateDtcAllrecordsResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDtcAllrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDtcAllrecordsResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDtcAllrecordsResponseAsObject)
	if err == nil {
		jsonUpdateDtcAllrecordsResponseAsObject, _ := json.Marshal(dst.UpdateDtcAllrecordsResponseAsObject)
		if string(jsonUpdateDtcAllrecordsResponseAsObject) == "{}" { // empty struct
			dst.UpdateDtcAllrecordsResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDtcAllrecordsResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDtcAllrecordsResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDtcAllrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDtcAllrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDtcAllrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDtcAllrecordsResponseAsObject != nil {
		return json.Marshal(&src.UpdateDtcAllrecordsResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDtcAllrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDtcAllrecordsResponseAsObject != nil {
		return obj.UpdateDtcAllrecordsResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDtcAllrecordsResponse struct {
	value *UpdateDtcAllrecordsResponse
	isSet bool
}

func (v NullableUpdateDtcAllrecordsResponse) Get() *UpdateDtcAllrecordsResponse {
	return v.value
}

func (v *NullableUpdateDtcAllrecordsResponse) Set(val *UpdateDtcAllrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDtcAllrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDtcAllrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDtcAllrecordsResponse(val *UpdateDtcAllrecordsResponse) *NullableUpdateDtcAllrecordsResponse {
	return &NullableUpdateDtcAllrecordsResponse{value: val, isSet: true}
}

func (v NullableUpdateDtcAllrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDtcAllrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
