/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// UpdateDtcCertificateResponse - struct for UpdateDtcCertificateResponse
type UpdateDtcCertificateResponse struct {
	UpdateDtcCertificateResponseAsObject *UpdateDtcCertificateResponseAsObject
	String                               *string
}

// UpdateDtcCertificateResponseAsObjectAsUpdateDtcCertificateResponse is a convenience function that returns UpdateDtcCertificateResponseAsObject wrapped in UpdateDtcCertificateResponse
func UpdateDtcCertificateResponseAsObjectAsUpdateDtcCertificateResponse(v *UpdateDtcCertificateResponseAsObject) UpdateDtcCertificateResponse {
	return UpdateDtcCertificateResponse{
		UpdateDtcCertificateResponseAsObject: v,
	}
}

// stringAsUpdateDtcCertificateResponse is a convenience function that returns string wrapped in UpdateDtcCertificateResponse
func StringAsUpdateDtcCertificateResponse(v *string) UpdateDtcCertificateResponse {
	return UpdateDtcCertificateResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDtcCertificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDtcCertificateResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDtcCertificateResponseAsObject)
	if err == nil {
		jsonUpdateDtcCertificateResponseAsObject, _ := json.Marshal(dst.UpdateDtcCertificateResponseAsObject)
		if string(jsonUpdateDtcCertificateResponseAsObject) == "{}" { // empty struct
			dst.UpdateDtcCertificateResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDtcCertificateResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDtcCertificateResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDtcCertificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDtcCertificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDtcCertificateResponseAsObject != nil {
		return json.Marshal(&src.UpdateDtcCertificateResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDtcCertificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDtcCertificateResponseAsObject != nil {
		return obj.UpdateDtcCertificateResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDtcCertificateResponse struct {
	value *UpdateDtcCertificateResponse
	isSet bool
}

func (v NullableUpdateDtcCertificateResponse) Get() *UpdateDtcCertificateResponse {
	return v.value
}

func (v *NullableUpdateDtcCertificateResponse) Set(val *UpdateDtcCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDtcCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDtcCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDtcCertificateResponse(val *UpdateDtcCertificateResponse) *NullableUpdateDtcCertificateResponse {
	return &NullableUpdateDtcCertificateResponse{value: val, isSet: true}
}

func (v NullableUpdateDtcCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDtcCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
