/*
Infoblox FEDERATEDREALMS API

OpenAPI specification for Infoblox NIOS WAPI FEDERATEDREALMS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package federatedrealms

import (
	"encoding/json"
)

// checks if the Federatedrealms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Federatedrealms{}

// Federatedrealms struct for Federatedrealms
type Federatedrealms struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Federated realm id.
	Id *string `json:"id,omitempty"`
	// Federated realm name.
	Name *string `json:"name,omitempty"`
}

// NewFederatedrealms instantiates a new Federatedrealms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFederatedrealms() *Federatedrealms {
	this := Federatedrealms{}
	return &this
}

// NewFederatedrealmsWithDefaults instantiates a new Federatedrealms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFederatedrealmsWithDefaults() *Federatedrealms {
	this := Federatedrealms{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Federatedrealms) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Federatedrealms) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Federatedrealms) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Federatedrealms) SetRef(v string) {
	o.Ref = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Federatedrealms) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Federatedrealms) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Federatedrealms) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Federatedrealms) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Federatedrealms) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Federatedrealms) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Federatedrealms) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Federatedrealms) SetName(v string) {
	o.Name = &v
}

func (o Federatedrealms) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Federatedrealms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFederatedrealms struct {
	value *Federatedrealms
	isSet bool
}

func (v NullableFederatedrealms) Get() *Federatedrealms {
	return v.value
}

func (v *NullableFederatedrealms) Set(val *Federatedrealms) {
	v.value = val
	v.isSet = true
}

func (v NullableFederatedrealms) IsSet() bool {
	return v.isSet
}

func (v *NullableFederatedrealms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFederatedrealms(val *Federatedrealms) *NullableFederatedrealms {
	return &NullableFederatedrealms{value: val, isSet: true}
}

func (v NullableFederatedrealms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFederatedrealms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
