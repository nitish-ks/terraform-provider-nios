/*
Infoblox FEDERATEDREALMS API

OpenAPI specification for Infoblox NIOS WAPI FEDERATEDREALMS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package federatedrealms

import (
	"encoding/json"
	"fmt"
)

// ListFederatedrealmsResponse - struct for ListFederatedrealmsResponse
type ListFederatedrealmsResponse struct {
	ListFederatedrealmsResponseObject *ListFederatedrealmsResponseObject
	ArrayOfFederatedrealms            *[]Federatedrealms
}

// ListFederatedrealmsResponseObjectAsListFederatedrealmsResponse is a convenience function that returns ListFederatedrealmsResponseObject wrapped in ListFederatedrealmsResponse
func ListFederatedrealmsResponseObjectAsListFederatedrealmsResponse(v *ListFederatedrealmsResponseObject) ListFederatedrealmsResponse {
	return ListFederatedrealmsResponse{
		ListFederatedrealmsResponseObject: v,
	}
}

// []FederatedrealmsAsListFederatedrealmsResponse is a convenience function that returns []Federatedrealms wrapped in ListFederatedrealmsResponse
func ArrayOfFederatedrealmsAsListFederatedrealmsResponse(v *[]Federatedrealms) ListFederatedrealmsResponse {
	return ListFederatedrealmsResponse{
		ArrayOfFederatedrealms: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFederatedrealmsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFederatedrealmsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFederatedrealmsResponseObject)
	if err == nil {
		jsonListFederatedrealmsResponseObject, _ := json.Marshal(dst.ListFederatedrealmsResponseObject)
		if string(jsonListFederatedrealmsResponseObject) == "{}" { // empty struct
			dst.ListFederatedrealmsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFederatedrealmsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFederatedrealms
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFederatedrealms)
	if err == nil {
		jsonArrayOfFederatedrealms, _ := json.Marshal(dst.ArrayOfFederatedrealms)
		if string(jsonArrayOfFederatedrealms) == "{}" { // empty struct
			dst.ArrayOfFederatedrealms = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFederatedrealms = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFederatedrealmsResponseObject = nil
		dst.ArrayOfFederatedrealms = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFederatedrealmsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFederatedrealmsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFederatedrealmsResponse) MarshalJSON() ([]byte, error) {
	if src.ListFederatedrealmsResponseObject != nil {
		return json.Marshal(&src.ListFederatedrealmsResponseObject)
	}

	if src.ArrayOfFederatedrealms != nil {
		return json.Marshal(&src.ArrayOfFederatedrealms)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFederatedrealmsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFederatedrealmsResponseObject != nil {
		return obj.ListFederatedrealmsResponseObject
	}

	if obj.ArrayOfFederatedrealms != nil {
		return obj.ArrayOfFederatedrealms
	}

	// all schemas are nil
	return nil
}

type NullableListFederatedrealmsResponse struct {
	value *ListFederatedrealmsResponse
	isSet bool
}

func (v NullableListFederatedrealmsResponse) Get() *ListFederatedrealmsResponse {
	return v.value
}

func (v *NullableListFederatedrealmsResponse) Set(val *ListFederatedrealmsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFederatedrealmsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFederatedrealmsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFederatedrealmsResponse(val *ListFederatedrealmsResponse) *NullableListFederatedrealmsResponse {
	return &NullableListFederatedrealmsResponse{value: val, isSet: true}
}

func (v NullableListFederatedrealmsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFederatedrealmsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
