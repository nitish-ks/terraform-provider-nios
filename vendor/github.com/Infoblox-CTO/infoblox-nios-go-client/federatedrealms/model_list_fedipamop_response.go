/*
Infoblox FEDERATEDREALMS API

OpenAPI specification for Infoblox NIOS WAPI FEDERATEDREALMS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package federatedrealms

import (
	"encoding/json"
	"fmt"
)

// ListFedipamopResponse - struct for ListFedipamopResponse
type ListFedipamopResponse struct {
	ListFedipamopResponseObject *ListFedipamopResponseObject
	ArrayOfFedipamop            *[]Fedipamop
}

// ListFedipamopResponseObjectAsListFedipamopResponse is a convenience function that returns ListFedipamopResponseObject wrapped in ListFedipamopResponse
func ListFedipamopResponseObjectAsListFedipamopResponse(v *ListFedipamopResponseObject) ListFedipamopResponse {
	return ListFedipamopResponse{
		ListFedipamopResponseObject: v,
	}
}

// []FedipamopAsListFedipamopResponse is a convenience function that returns []Fedipamop wrapped in ListFedipamopResponse
func ArrayOfFedipamopAsListFedipamopResponse(v *[]Fedipamop) ListFedipamopResponse {
	return ListFedipamopResponse{
		ArrayOfFedipamop: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFedipamopResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFedipamopResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFedipamopResponseObject)
	if err == nil {
		jsonListFedipamopResponseObject, _ := json.Marshal(dst.ListFedipamopResponseObject)
		if string(jsonListFedipamopResponseObject) == "{}" { // empty struct
			dst.ListFedipamopResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFedipamopResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFedipamop
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFedipamop)
	if err == nil {
		jsonArrayOfFedipamop, _ := json.Marshal(dst.ArrayOfFedipamop)
		if string(jsonArrayOfFedipamop) == "{}" { // empty struct
			dst.ArrayOfFedipamop = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFedipamop = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFedipamopResponseObject = nil
		dst.ArrayOfFedipamop = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFedipamopResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFedipamopResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFedipamopResponse) MarshalJSON() ([]byte, error) {
	if src.ListFedipamopResponseObject != nil {
		return json.Marshal(&src.ListFedipamopResponseObject)
	}

	if src.ArrayOfFedipamop != nil {
		return json.Marshal(&src.ArrayOfFedipamop)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFedipamopResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFedipamopResponseObject != nil {
		return obj.ListFedipamopResponseObject
	}

	if obj.ArrayOfFedipamop != nil {
		return obj.ArrayOfFedipamop
	}

	// all schemas are nil
	return nil
}

type NullableListFedipamopResponse struct {
	value *ListFedipamopResponse
	isSet bool
}

func (v NullableListFedipamopResponse) Get() *ListFedipamopResponse {
	return v.value
}

func (v *NullableListFedipamopResponse) Set(val *ListFedipamopResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFedipamopResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFedipamopResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFedipamopResponse(val *ListFedipamopResponse) *NullableListFedipamopResponse {
	return &NullableListFedipamopResponse{value: val, isSet: true}
}

func (v NullableListFedipamopResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFedipamopResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
