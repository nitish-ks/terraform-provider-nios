/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type GridServicerestartGroupAPI interface {
	/*
		Create Create a grid:servicerestart:group object

		Creates a new grid:servicerestart:group object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridServicerestartGroupAPICreateRequest
	*/
	Create(ctx context.Context) GridServicerestartGroupAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateGridServicerestartGroupResponse
	CreateExecute(r GridServicerestartGroupAPICreateRequest) (*CreateGridServicerestartGroupResponse, *http.Response, error)
	/*
		Delete Delete a grid:servicerestart:group object

		Deletes a specific grid:servicerestart:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:servicerestart:group object
		@return GridServicerestartGroupAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) GridServicerestartGroupAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r GridServicerestartGroupAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve grid:servicerestart:group objects

		Returns a list of grid:servicerestart:group objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridServicerestartGroupAPIListRequest
	*/
	List(ctx context.Context) GridServicerestartGroupAPIListRequest

	// ListExecute executes the request
	//  @return ListGridServicerestartGroupResponse
	ListExecute(r GridServicerestartGroupAPIListRequest) (*ListGridServicerestartGroupResponse, *http.Response, error)
	/*
		Read Get a specific grid:servicerestart:group object

		Returns a specific grid:servicerestart:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:servicerestart:group object
		@return GridServicerestartGroupAPIReadRequest
	*/
	Read(ctx context.Context, reference string) GridServicerestartGroupAPIReadRequest

	// ReadExecute executes the request
	//  @return GetGridServicerestartGroupResponse
	ReadExecute(r GridServicerestartGroupAPIReadRequest) (*GetGridServicerestartGroupResponse, *http.Response, error)
	/*
		Update Update a grid:servicerestart:group object

		Updates a specific grid:servicerestart:group object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:servicerestart:group object
		@return GridServicerestartGroupAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) GridServicerestartGroupAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateGridServicerestartGroupResponse
	UpdateExecute(r GridServicerestartGroupAPIUpdateRequest) (*UpdateGridServicerestartGroupResponse, *http.Response, error)
}

// GridServicerestartGroupAPIService GridServicerestartGroupAPI service
type GridServicerestartGroupAPIService internal.Service

type GridServicerestartGroupAPICreateRequest struct {
	ctx                     context.Context
	ApiService              GridServicerestartGroupAPI
	gridServicerestartGroup *GridServicerestartGroup
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to create
func (r GridServicerestartGroupAPICreateRequest) GridServicerestartGroup(gridServicerestartGroup GridServicerestartGroup) GridServicerestartGroupAPICreateRequest {
	r.gridServicerestartGroup = &gridServicerestartGroup
	return r
}

// Enter the field names followed by comma
func (r GridServicerestartGroupAPICreateRequest) ReturnFields(returnFields string) GridServicerestartGroupAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridServicerestartGroupAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) GridServicerestartGroupAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r GridServicerestartGroupAPICreateRequest) ReturnAsObject(returnAsObject int32) GridServicerestartGroupAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridServicerestartGroupAPICreateRequest) Execute() (*CreateGridServicerestartGroupResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a grid:servicerestart:group object

Creates a new grid:servicerestart:group object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridServicerestartGroupAPICreateRequest
*/
func (a *GridServicerestartGroupAPIService) Create(ctx context.Context) GridServicerestartGroupAPICreateRequest {
	return GridServicerestartGroupAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGridServicerestartGroupResponse
func (a *GridServicerestartGroupAPIService) CreateExecute(r GridServicerestartGroupAPICreateRequest) (*CreateGridServicerestartGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateGridServicerestartGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridServicerestartGroupAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:servicerestart:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridServicerestartGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("gridServicerestartGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.gridServicerestartGroup != nil {
		if r.gridServicerestartGroup.Extattrs == nil {
			r.gridServicerestartGroup.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.gridServicerestartGroup.Extattrs)[k]; !ok {
				(*r.gridServicerestartGroup.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.gridServicerestartGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridServicerestartGroupAPIDeleteRequest struct {
	ctx        context.Context
	ApiService GridServicerestartGroupAPI
	reference  string
}

func (r GridServicerestartGroupAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a grid:servicerestart:group object

Deletes a specific grid:servicerestart:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:servicerestart:group object
	@return GridServicerestartGroupAPIDeleteRequest
*/
func (a *GridServicerestartGroupAPIService) Delete(ctx context.Context, reference string) GridServicerestartGroupAPIDeleteRequest {
	return GridServicerestartGroupAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *GridServicerestartGroupAPIService) DeleteExecute(r GridServicerestartGroupAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridServicerestartGroupAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:servicerestart:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GridServicerestartGroupAPIListRequest struct {
	ctx              context.Context
	ApiService       GridServicerestartGroupAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridServicerestartGroupAPIListRequest) ReturnFields(returnFields string) GridServicerestartGroupAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridServicerestartGroupAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) GridServicerestartGroupAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r GridServicerestartGroupAPIListRequest) MaxResults(maxResults int32) GridServicerestartGroupAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridServicerestartGroupAPIListRequest) ReturnAsObject(returnAsObject int32) GridServicerestartGroupAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridServicerestartGroupAPIListRequest) Paging(paging int32) GridServicerestartGroupAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridServicerestartGroupAPIListRequest) PageId(pageId string) GridServicerestartGroupAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r GridServicerestartGroupAPIListRequest) Filters(filters map[string]interface{}) GridServicerestartGroupAPIListRequest {
	r.filters = &filters
	return r
}

func (r GridServicerestartGroupAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) GridServicerestartGroupAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridServicerestartGroupAPIListRequest) Execute() (*ListGridServicerestartGroupResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve grid:servicerestart:group objects

Returns a list of grid:servicerestart:group objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridServicerestartGroupAPIListRequest
*/
func (a *GridServicerestartGroupAPIService) List(ctx context.Context) GridServicerestartGroupAPIListRequest {
	return GridServicerestartGroupAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridServicerestartGroupResponse
func (a *GridServicerestartGroupAPIService) ListExecute(r GridServicerestartGroupAPIListRequest) (*ListGridServicerestartGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridServicerestartGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridServicerestartGroupAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:servicerestart:group"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridServicerestartGroupAPIReadRequest struct {
	ctx              context.Context
	ApiService       GridServicerestartGroupAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r GridServicerestartGroupAPIReadRequest) ReturnFields(returnFields string) GridServicerestartGroupAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridServicerestartGroupAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) GridServicerestartGroupAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r GridServicerestartGroupAPIReadRequest) ReturnAsObject(returnAsObject int32) GridServicerestartGroupAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridServicerestartGroupAPIReadRequest) Execute() (*GetGridServicerestartGroupResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific grid:servicerestart:group object

Returns a specific grid:servicerestart:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:servicerestart:group object
	@return GridServicerestartGroupAPIReadRequest
*/
func (a *GridServicerestartGroupAPIService) Read(ctx context.Context, reference string) GridServicerestartGroupAPIReadRequest {
	return GridServicerestartGroupAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridServicerestartGroupResponse
func (a *GridServicerestartGroupAPIService) ReadExecute(r GridServicerestartGroupAPIReadRequest) (*GetGridServicerestartGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridServicerestartGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridServicerestartGroupAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:servicerestart:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridServicerestartGroupAPIUpdateRequest struct {
	ctx                     context.Context
	ApiService              GridServicerestartGroupAPI
	reference               string
	gridServicerestartGroup *GridServicerestartGroup
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to update
func (r GridServicerestartGroupAPIUpdateRequest) GridServicerestartGroup(gridServicerestartGroup GridServicerestartGroup) GridServicerestartGroupAPIUpdateRequest {
	r.gridServicerestartGroup = &gridServicerestartGroup
	return r
}

// Enter the field names followed by comma
func (r GridServicerestartGroupAPIUpdateRequest) ReturnFields(returnFields string) GridServicerestartGroupAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridServicerestartGroupAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) GridServicerestartGroupAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r GridServicerestartGroupAPIUpdateRequest) ReturnAsObject(returnAsObject int32) GridServicerestartGroupAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridServicerestartGroupAPIUpdateRequest) Execute() (*UpdateGridServicerestartGroupResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a grid:servicerestart:group object

Updates a specific grid:servicerestart:group object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:servicerestart:group object
	@return GridServicerestartGroupAPIUpdateRequest
*/
func (a *GridServicerestartGroupAPIService) Update(ctx context.Context, reference string) GridServicerestartGroupAPIUpdateRequest {
	return GridServicerestartGroupAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateGridServicerestartGroupResponse
func (a *GridServicerestartGroupAPIService) UpdateExecute(r GridServicerestartGroupAPIUpdateRequest) (*UpdateGridServicerestartGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateGridServicerestartGroupResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridServicerestartGroupAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:servicerestart:group/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gridServicerestartGroup == nil {
		return localVarReturnValue, nil, internal.ReportError("gridServicerestartGroup is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.gridServicerestartGroup != nil {
		if r.gridServicerestartGroup.Extattrs == nil {
			r.gridServicerestartGroup.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.gridServicerestartGroup.Extattrs)[k]; !ok {
				(*r.gridServicerestartGroup.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.gridServicerestartGroup
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
