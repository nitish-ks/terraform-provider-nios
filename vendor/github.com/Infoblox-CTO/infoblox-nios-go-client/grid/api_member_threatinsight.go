/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type MemberThreatinsightAPI interface {
	/*
		List Retrieve member:threatinsight objects

		Returns a list of member:threatinsight objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MemberThreatinsightAPIListRequest
	*/
	List(ctx context.Context) MemberThreatinsightAPIListRequest

	// ListExecute executes the request
	//  @return ListMemberThreatinsightResponse
	ListExecute(r MemberThreatinsightAPIListRequest) (*ListMemberThreatinsightResponse, *http.Response, error)
	/*
		Read Get a specific member:threatinsight object

		Returns a specific member:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the member:threatinsight object
		@return MemberThreatinsightAPIReadRequest
	*/
	Read(ctx context.Context, reference string) MemberThreatinsightAPIReadRequest

	// ReadExecute executes the request
	//  @return GetMemberThreatinsightResponse
	ReadExecute(r MemberThreatinsightAPIReadRequest) (*GetMemberThreatinsightResponse, *http.Response, error)
	/*
		Update Update a member:threatinsight object

		Updates a specific member:threatinsight object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the member:threatinsight object
		@return MemberThreatinsightAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) MemberThreatinsightAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateMemberThreatinsightResponse
	UpdateExecute(r MemberThreatinsightAPIUpdateRequest) (*UpdateMemberThreatinsightResponse, *http.Response, error)
}

// MemberThreatinsightAPIService MemberThreatinsightAPI service
type MemberThreatinsightAPIService internal.Service

type MemberThreatinsightAPIListRequest struct {
	ctx              context.Context
	ApiService       MemberThreatinsightAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIListRequest) ReturnFields(returnFields string) MemberThreatinsightAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) MemberThreatinsightAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r MemberThreatinsightAPIListRequest) MaxResults(maxResults int32) MemberThreatinsightAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIListRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MemberThreatinsightAPIListRequest) Paging(paging int32) MemberThreatinsightAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MemberThreatinsightAPIListRequest) PageId(pageId string) MemberThreatinsightAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r MemberThreatinsightAPIListRequest) Filters(filters map[string]interface{}) MemberThreatinsightAPIListRequest {
	r.filters = &filters
	return r
}

func (r MemberThreatinsightAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) MemberThreatinsightAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MemberThreatinsightAPIListRequest) Execute() (*ListMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve member:threatinsight objects

Returns a list of member:threatinsight objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MemberThreatinsightAPIListRequest
*/
func (a *MemberThreatinsightAPIService) List(ctx context.Context) MemberThreatinsightAPIListRequest {
	return MemberThreatinsightAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) ListExecute(r MemberThreatinsightAPIListRequest) (*ListMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberThreatinsightAPIReadRequest struct {
	ctx              context.Context
	ApiService       MemberThreatinsightAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIReadRequest) ReturnFields(returnFields string) MemberThreatinsightAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) MemberThreatinsightAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIReadRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MemberThreatinsightAPIReadRequest) Execute() (*GetMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific member:threatinsight object

Returns a specific member:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the member:threatinsight object
	@return MemberThreatinsightAPIReadRequest
*/
func (a *MemberThreatinsightAPIService) Read(ctx context.Context, reference string) MemberThreatinsightAPIReadRequest {
	return MemberThreatinsightAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) ReadExecute(r MemberThreatinsightAPIReadRequest) (*GetMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MemberThreatinsightAPIUpdateRequest struct {
	ctx                 context.Context
	ApiService          MemberThreatinsightAPI
	reference           string
	memberThreatinsight *MemberThreatinsight
	returnFields        *string
	returnFieldsPlus    *string
	returnAsObject      *int32
}

// Object data to update
func (r MemberThreatinsightAPIUpdateRequest) MemberThreatinsight(memberThreatinsight MemberThreatinsight) MemberThreatinsightAPIUpdateRequest {
	r.memberThreatinsight = &memberThreatinsight
	return r
}

// Enter the field names followed by comma
func (r MemberThreatinsightAPIUpdateRequest) ReturnFields(returnFields string) MemberThreatinsightAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MemberThreatinsightAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) MemberThreatinsightAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r MemberThreatinsightAPIUpdateRequest) ReturnAsObject(returnAsObject int32) MemberThreatinsightAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MemberThreatinsightAPIUpdateRequest) Execute() (*UpdateMemberThreatinsightResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a member:threatinsight object

Updates a specific member:threatinsight object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the member:threatinsight object
	@return MemberThreatinsightAPIUpdateRequest
*/
func (a *MemberThreatinsightAPIService) Update(ctx context.Context, reference string) MemberThreatinsightAPIUpdateRequest {
	return MemberThreatinsightAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMemberThreatinsightResponse
func (a *MemberThreatinsightAPIService) UpdateExecute(r MemberThreatinsightAPIUpdateRequest) (*UpdateMemberThreatinsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMemberThreatinsightResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MemberThreatinsightAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/member:threatinsight/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberThreatinsight == nil {
		return localVarReturnValue, nil, internal.ReportError("memberThreatinsight is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberThreatinsight
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
