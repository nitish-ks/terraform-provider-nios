/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// CreateGridDnsResponse - struct for CreateGridDnsResponse
type CreateGridDnsResponse struct {
	CreateGridDnsResponseAsObject *CreateGridDnsResponseAsObject
	String                        *string
}

// CreateGridDnsResponseAsObjectAsCreateGridDnsResponse is a convenience function that returns CreateGridDnsResponseAsObject wrapped in CreateGridDnsResponse
func CreateGridDnsResponseAsObjectAsCreateGridDnsResponse(v *CreateGridDnsResponseAsObject) CreateGridDnsResponse {
	return CreateGridDnsResponse{
		CreateGridDnsResponseAsObject: v,
	}
}

// stringAsCreateGridDnsResponse is a convenience function that returns string wrapped in CreateGridDnsResponse
func StringAsCreateGridDnsResponse(v *string) CreateGridDnsResponse {
	return CreateGridDnsResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateGridDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateGridDnsResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateGridDnsResponseAsObject)
	if err == nil {
		jsonCreateGridDnsResponseAsObject, _ := json.Marshal(dst.CreateGridDnsResponseAsObject)
		if string(jsonCreateGridDnsResponseAsObject) == "{}" { // empty struct
			dst.CreateGridDnsResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateGridDnsResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateGridDnsResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateGridDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateGridDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateGridDnsResponse) MarshalJSON() ([]byte, error) {
	if src.CreateGridDnsResponseAsObject != nil {
		return json.Marshal(&src.CreateGridDnsResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateGridDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateGridDnsResponseAsObject != nil {
		return obj.CreateGridDnsResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateGridDnsResponse struct {
	value *CreateGridDnsResponse
	isSet bool
}

func (v NullableCreateGridDnsResponse) Get() *CreateGridDnsResponse {
	return v.value
}

func (v *NullableCreateGridDnsResponse) Set(val *CreateGridDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGridDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGridDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGridDnsResponse(val *CreateGridDnsResponse) *NullableCreateGridDnsResponse {
	return &NullableCreateGridDnsResponse{value: val, isSet: true}
}

func (v NullableCreateGridDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGridDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
