/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// CreateMemberLicenseResponse - struct for CreateMemberLicenseResponse
type CreateMemberLicenseResponse struct {
	CreateMemberLicenseResponseAsObject *CreateMemberLicenseResponseAsObject
	String                              *string
}

// CreateMemberLicenseResponseAsObjectAsCreateMemberLicenseResponse is a convenience function that returns CreateMemberLicenseResponseAsObject wrapped in CreateMemberLicenseResponse
func CreateMemberLicenseResponseAsObjectAsCreateMemberLicenseResponse(v *CreateMemberLicenseResponseAsObject) CreateMemberLicenseResponse {
	return CreateMemberLicenseResponse{
		CreateMemberLicenseResponseAsObject: v,
	}
}

// stringAsCreateMemberLicenseResponse is a convenience function that returns string wrapped in CreateMemberLicenseResponse
func StringAsCreateMemberLicenseResponse(v *string) CreateMemberLicenseResponse {
	return CreateMemberLicenseResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateMemberLicenseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateMemberLicenseResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateMemberLicenseResponseAsObject)
	if err == nil {
		jsonCreateMemberLicenseResponseAsObject, _ := json.Marshal(dst.CreateMemberLicenseResponseAsObject)
		if string(jsonCreateMemberLicenseResponseAsObject) == "{}" { // empty struct
			dst.CreateMemberLicenseResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateMemberLicenseResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateMemberLicenseResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateMemberLicenseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateMemberLicenseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	if src.CreateMemberLicenseResponseAsObject != nil {
		return json.Marshal(&src.CreateMemberLicenseResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateMemberLicenseResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateMemberLicenseResponseAsObject != nil {
		return obj.CreateMemberLicenseResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateMemberLicenseResponse struct {
	value *CreateMemberLicenseResponse
	isSet bool
}

func (v NullableCreateMemberLicenseResponse) Get() *CreateMemberLicenseResponse {
	return v.value
}

func (v *NullableCreateMemberLicenseResponse) Set(val *CreateMemberLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMemberLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMemberLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMemberLicenseResponse(val *CreateMemberLicenseResponse) *NullableCreateMemberLicenseResponse {
	return &NullableCreateMemberLicenseResponse{value: val, isSet: true}
}

func (v NullableCreateMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMemberLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
