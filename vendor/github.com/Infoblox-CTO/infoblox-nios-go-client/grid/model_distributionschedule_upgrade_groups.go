/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the DistributionscheduleUpgradeGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DistributionscheduleUpgradeGroups{}

// DistributionscheduleUpgradeGroups struct for DistributionscheduleUpgradeGroups
type DistributionscheduleUpgradeGroups struct {
	// The upgrade group name.
	Name *string `json:"name,omitempty"`
	// The time zone for scheduling operations.
	TimeZone *string `json:"time_zone,omitempty"`
	// The distribution dependent group name.
	DistributionDependentGroup *string `json:"distribution_dependent_group,omitempty"`
	// The upgrade dependent group name.
	UpgradeDependentGroup *string `json:"upgrade_dependent_group,omitempty"`
	// The time of the next scheduled distribution.
	DistributionTime *int64 `json:"distribution_time,omitempty"`
	// The time of the next scheduled upgrade.
	UpgradeTime          *int64 `json:"upgrade_time,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DistributionscheduleUpgradeGroups DistributionscheduleUpgradeGroups

// NewDistributionscheduleUpgradeGroups instantiates a new DistributionscheduleUpgradeGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistributionscheduleUpgradeGroups() *DistributionscheduleUpgradeGroups {
	this := DistributionscheduleUpgradeGroups{}
	return &this
}

// NewDistributionscheduleUpgradeGroupsWithDefaults instantiates a new DistributionscheduleUpgradeGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistributionscheduleUpgradeGroupsWithDefaults() *DistributionscheduleUpgradeGroups {
	this := DistributionscheduleUpgradeGroups{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DistributionscheduleUpgradeGroups) SetName(v string) {
	o.Name = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *DistributionscheduleUpgradeGroups) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetDistributionDependentGroup returns the DistributionDependentGroup field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetDistributionDependentGroup() string {
	if o == nil || IsNil(o.DistributionDependentGroup) {
		var ret string
		return ret
	}
	return *o.DistributionDependentGroup
}

// GetDistributionDependentGroupOk returns a tuple with the DistributionDependentGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetDistributionDependentGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DistributionDependentGroup) {
		return nil, false
	}
	return o.DistributionDependentGroup, true
}

// HasDistributionDependentGroup returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasDistributionDependentGroup() bool {
	if o != nil && !IsNil(o.DistributionDependentGroup) {
		return true
	}

	return false
}

// SetDistributionDependentGroup gets a reference to the given string and assigns it to the DistributionDependentGroup field.
func (o *DistributionscheduleUpgradeGroups) SetDistributionDependentGroup(v string) {
	o.DistributionDependentGroup = &v
}

// GetUpgradeDependentGroup returns the UpgradeDependentGroup field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetUpgradeDependentGroup() string {
	if o == nil || IsNil(o.UpgradeDependentGroup) {
		var ret string
		return ret
	}
	return *o.UpgradeDependentGroup
}

// GetUpgradeDependentGroupOk returns a tuple with the UpgradeDependentGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetUpgradeDependentGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeDependentGroup) {
		return nil, false
	}
	return o.UpgradeDependentGroup, true
}

// HasUpgradeDependentGroup returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasUpgradeDependentGroup() bool {
	if o != nil && !IsNil(o.UpgradeDependentGroup) {
		return true
	}

	return false
}

// SetUpgradeDependentGroup gets a reference to the given string and assigns it to the UpgradeDependentGroup field.
func (o *DistributionscheduleUpgradeGroups) SetUpgradeDependentGroup(v string) {
	o.UpgradeDependentGroup = &v
}

// GetDistributionTime returns the DistributionTime field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetDistributionTime() int64 {
	if o == nil || IsNil(o.DistributionTime) {
		var ret int64
		return ret
	}
	return *o.DistributionTime
}

// GetDistributionTimeOk returns a tuple with the DistributionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetDistributionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.DistributionTime) {
		return nil, false
	}
	return o.DistributionTime, true
}

// HasDistributionTime returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasDistributionTime() bool {
	if o != nil && !IsNil(o.DistributionTime) {
		return true
	}

	return false
}

// SetDistributionTime gets a reference to the given int64 and assigns it to the DistributionTime field.
func (o *DistributionscheduleUpgradeGroups) SetDistributionTime(v int64) {
	o.DistributionTime = &v
}

// GetUpgradeTime returns the UpgradeTime field value if set, zero value otherwise.
func (o *DistributionscheduleUpgradeGroups) GetUpgradeTime() int64 {
	if o == nil || IsNil(o.UpgradeTime) {
		var ret int64
		return ret
	}
	return *o.UpgradeTime
}

// GetUpgradeTimeOk returns a tuple with the UpgradeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionscheduleUpgradeGroups) GetUpgradeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.UpgradeTime) {
		return nil, false
	}
	return o.UpgradeTime, true
}

// HasUpgradeTime returns a boolean if a field has been set.
func (o *DistributionscheduleUpgradeGroups) HasUpgradeTime() bool {
	if o != nil && !IsNil(o.UpgradeTime) {
		return true
	}

	return false
}

// SetUpgradeTime gets a reference to the given int64 and assigns it to the UpgradeTime field.
func (o *DistributionscheduleUpgradeGroups) SetUpgradeTime(v int64) {
	o.UpgradeTime = &v
}

func (o DistributionscheduleUpgradeGroups) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DistributionscheduleUpgradeGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.DistributionDependentGroup) {
		toSerialize["distribution_dependent_group"] = o.DistributionDependentGroup
	}
	if !IsNil(o.UpgradeDependentGroup) {
		toSerialize["upgrade_dependent_group"] = o.UpgradeDependentGroup
	}
	if !IsNil(o.DistributionTime) {
		toSerialize["distribution_time"] = o.DistributionTime
	}
	if !IsNil(o.UpgradeTime) {
		toSerialize["upgrade_time"] = o.UpgradeTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DistributionscheduleUpgradeGroups) UnmarshalJSON(data []byte) (err error) {
	varDistributionscheduleUpgradeGroups := _DistributionscheduleUpgradeGroups{}

	err = json.Unmarshal(data, &varDistributionscheduleUpgradeGroups)

	if err != nil {
		return err
	}

	*o = DistributionscheduleUpgradeGroups(varDistributionscheduleUpgradeGroups)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "time_zone")
		delete(additionalProperties, "distribution_dependent_group")
		delete(additionalProperties, "upgrade_dependent_group")
		delete(additionalProperties, "distribution_time")
		delete(additionalProperties, "upgrade_time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDistributionscheduleUpgradeGroups struct {
	value *DistributionscheduleUpgradeGroups
	isSet bool
}

func (v NullableDistributionscheduleUpgradeGroups) Get() *DistributionscheduleUpgradeGroups {
	return v.value
}

func (v *NullableDistributionscheduleUpgradeGroups) Set(val *DistributionscheduleUpgradeGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionscheduleUpgradeGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionscheduleUpgradeGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionscheduleUpgradeGroups(val *DistributionscheduleUpgradeGroups) *NullableDistributionscheduleUpgradeGroups {
	return &NullableDistributionscheduleUpgradeGroups{value: val, isSet: true}
}

func (v NullableDistributionscheduleUpgradeGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionscheduleUpgradeGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
