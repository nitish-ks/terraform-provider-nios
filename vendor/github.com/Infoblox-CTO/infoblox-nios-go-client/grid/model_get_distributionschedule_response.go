/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetDistributionscheduleResponse - struct for GetDistributionscheduleResponse
type GetDistributionscheduleResponse struct {
	Distributionschedule                          *Distributionschedule
	GetDistributionscheduleResponseObjectAsResult *GetDistributionscheduleResponseObjectAsResult
}

// DistributionscheduleAsGetDistributionscheduleResponse is a convenience function that returns Distributionschedule wrapped in GetDistributionscheduleResponse
func DistributionscheduleAsGetDistributionscheduleResponse(v *Distributionschedule) GetDistributionscheduleResponse {
	return GetDistributionscheduleResponse{
		Distributionschedule: v,
	}
}

// GetDistributionscheduleResponseObjectAsResultAsGetDistributionscheduleResponse is a convenience function that returns GetDistributionscheduleResponseObjectAsResult wrapped in GetDistributionscheduleResponse
func GetDistributionscheduleResponseObjectAsResultAsGetDistributionscheduleResponse(v *GetDistributionscheduleResponseObjectAsResult) GetDistributionscheduleResponse {
	return GetDistributionscheduleResponse{
		GetDistributionscheduleResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDistributionscheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Distributionschedule
	err = newStrictDecoder(data).Decode(&dst.Distributionschedule)
	if err == nil {
		jsonDistributionschedule, _ := json.Marshal(dst.Distributionschedule)
		if string(jsonDistributionschedule) == "{}" { // empty struct
			dst.Distributionschedule = nil
		} else {
			match++
		}
	} else {
		dst.Distributionschedule = nil
	}

	// try to unmarshal data into GetDistributionscheduleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDistributionscheduleResponseObjectAsResult)
	if err == nil {
		jsonGetDistributionscheduleResponseObjectAsResult, _ := json.Marshal(dst.GetDistributionscheduleResponseObjectAsResult)
		if string(jsonGetDistributionscheduleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDistributionscheduleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDistributionscheduleResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Distributionschedule = nil
		dst.GetDistributionscheduleResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDistributionscheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDistributionscheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDistributionscheduleResponse) MarshalJSON() ([]byte, error) {
	if src.Distributionschedule != nil {
		return json.Marshal(&src.Distributionschedule)
	}

	if src.GetDistributionscheduleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDistributionscheduleResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDistributionscheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Distributionschedule != nil {
		return obj.Distributionschedule
	}

	if obj.GetDistributionscheduleResponseObjectAsResult != nil {
		return obj.GetDistributionscheduleResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDistributionscheduleResponse struct {
	value *GetDistributionscheduleResponse
	isSet bool
}

func (v NullableGetDistributionscheduleResponse) Get() *GetDistributionscheduleResponse {
	return v.value
}

func (v *NullableGetDistributionscheduleResponse) Set(val *GetDistributionscheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDistributionscheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDistributionscheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDistributionscheduleResponse(val *GetDistributionscheduleResponse) *NullableGetDistributionscheduleResponse {
	return &NullableGetDistributionscheduleResponse{value: val, isSet: true}
}

func (v NullableGetDistributionscheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDistributionscheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
