/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGmcgroupResponse - struct for GetGmcgroupResponse
type GetGmcgroupResponse struct {
	GetGmcgroupResponseObjectAsResult *GetGmcgroupResponseObjectAsResult
	Gmcgroup                          *Gmcgroup
}

// GetGmcgroupResponseObjectAsResultAsGetGmcgroupResponse is a convenience function that returns GetGmcgroupResponseObjectAsResult wrapped in GetGmcgroupResponse
func GetGmcgroupResponseObjectAsResultAsGetGmcgroupResponse(v *GetGmcgroupResponseObjectAsResult) GetGmcgroupResponse {
	return GetGmcgroupResponse{
		GetGmcgroupResponseObjectAsResult: v,
	}
}

// GmcgroupAsGetGmcgroupResponse is a convenience function that returns Gmcgroup wrapped in GetGmcgroupResponse
func GmcgroupAsGetGmcgroupResponse(v *Gmcgroup) GetGmcgroupResponse {
	return GetGmcgroupResponse{
		Gmcgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGmcgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGmcgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGmcgroupResponseObjectAsResult)
	if err == nil {
		jsonGetGmcgroupResponseObjectAsResult, _ := json.Marshal(dst.GetGmcgroupResponseObjectAsResult)
		if string(jsonGetGmcgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGmcgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGmcgroupResponseObjectAsResult = nil
	}

	// try to unmarshal data into Gmcgroup
	err = newStrictDecoder(data).Decode(&dst.Gmcgroup)
	if err == nil {
		jsonGmcgroup, _ := json.Marshal(dst.Gmcgroup)
		if string(jsonGmcgroup) == "{}" { // empty struct
			dst.Gmcgroup = nil
		} else {
			match++
		}
	} else {
		dst.Gmcgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGmcgroupResponseObjectAsResult = nil
		dst.Gmcgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGmcgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGmcgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGmcgroupResponse) MarshalJSON() ([]byte, error) {
	if src.GetGmcgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGmcgroupResponseObjectAsResult)
	}

	if src.Gmcgroup != nil {
		return json.Marshal(&src.Gmcgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGmcgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGmcgroupResponseObjectAsResult != nil {
		return obj.GetGmcgroupResponseObjectAsResult
	}

	if obj.Gmcgroup != nil {
		return obj.Gmcgroup
	}

	// all schemas are nil
	return nil
}

type NullableGetGmcgroupResponse struct {
	value *GetGmcgroupResponse
	isSet bool
}

func (v NullableGetGmcgroupResponse) Get() *GetGmcgroupResponse {
	return v.value
}

func (v *NullableGetGmcgroupResponse) Set(val *GetGmcgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGmcgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGmcgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGmcgroupResponse(val *GetGmcgroupResponse) *NullableGetGmcgroupResponse {
	return &NullableGetGmcgroupResponse{value: val, isSet: true}
}

func (v NullableGetGmcgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGmcgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
