/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGmcscheduleResponse - struct for GetGmcscheduleResponse
type GetGmcscheduleResponse struct {
	GetGmcscheduleResponseObjectAsResult *GetGmcscheduleResponseObjectAsResult
	Gmcschedule                          *Gmcschedule
}

// GetGmcscheduleResponseObjectAsResultAsGetGmcscheduleResponse is a convenience function that returns GetGmcscheduleResponseObjectAsResult wrapped in GetGmcscheduleResponse
func GetGmcscheduleResponseObjectAsResultAsGetGmcscheduleResponse(v *GetGmcscheduleResponseObjectAsResult) GetGmcscheduleResponse {
	return GetGmcscheduleResponse{
		GetGmcscheduleResponseObjectAsResult: v,
	}
}

// GmcscheduleAsGetGmcscheduleResponse is a convenience function that returns Gmcschedule wrapped in GetGmcscheduleResponse
func GmcscheduleAsGetGmcscheduleResponse(v *Gmcschedule) GetGmcscheduleResponse {
	return GetGmcscheduleResponse{
		Gmcschedule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGmcscheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGmcscheduleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGmcscheduleResponseObjectAsResult)
	if err == nil {
		jsonGetGmcscheduleResponseObjectAsResult, _ := json.Marshal(dst.GetGmcscheduleResponseObjectAsResult)
		if string(jsonGetGmcscheduleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGmcscheduleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGmcscheduleResponseObjectAsResult = nil
	}

	// try to unmarshal data into Gmcschedule
	err = newStrictDecoder(data).Decode(&dst.Gmcschedule)
	if err == nil {
		jsonGmcschedule, _ := json.Marshal(dst.Gmcschedule)
		if string(jsonGmcschedule) == "{}" { // empty struct
			dst.Gmcschedule = nil
		} else {
			match++
		}
	} else {
		dst.Gmcschedule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGmcscheduleResponseObjectAsResult = nil
		dst.Gmcschedule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGmcscheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGmcscheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGmcscheduleResponse) MarshalJSON() ([]byte, error) {
	if src.GetGmcscheduleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGmcscheduleResponseObjectAsResult)
	}

	if src.Gmcschedule != nil {
		return json.Marshal(&src.Gmcschedule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGmcscheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGmcscheduleResponseObjectAsResult != nil {
		return obj.GetGmcscheduleResponseObjectAsResult
	}

	if obj.Gmcschedule != nil {
		return obj.Gmcschedule
	}

	// all schemas are nil
	return nil
}

type NullableGetGmcscheduleResponse struct {
	value *GetGmcscheduleResponse
	isSet bool
}

func (v NullableGetGmcscheduleResponse) Get() *GetGmcscheduleResponse {
	return v.value
}

func (v *NullableGetGmcscheduleResponse) Set(val *GetGmcscheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGmcscheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGmcscheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGmcscheduleResponse(val *GetGmcscheduleResponse) *NullableGetGmcscheduleResponse {
	return &NullableGetGmcscheduleResponse{value: val, isSet: true}
}

func (v NullableGetGmcscheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGmcscheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
