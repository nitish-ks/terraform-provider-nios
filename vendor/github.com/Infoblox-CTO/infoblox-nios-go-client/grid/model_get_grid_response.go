/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGridResponse - struct for GetGridResponse
type GetGridResponse struct {
	GetGridResponseObjectAsResult *GetGridResponseObjectAsResult
	Grid                          *Grid
}

// GetGridResponseObjectAsResultAsGetGridResponse is a convenience function that returns GetGridResponseObjectAsResult wrapped in GetGridResponse
func GetGridResponseObjectAsResultAsGetGridResponse(v *GetGridResponseObjectAsResult) GetGridResponse {
	return GetGridResponse{
		GetGridResponseObjectAsResult: v,
	}
}

// GridAsGetGridResponse is a convenience function that returns Grid wrapped in GetGridResponse
func GridAsGetGridResponse(v *Grid) GetGridResponse {
	return GetGridResponse{
		Grid: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridResponseObjectAsResult)
	if err == nil {
		jsonGetGridResponseObjectAsResult, _ := json.Marshal(dst.GetGridResponseObjectAsResult)
		if string(jsonGetGridResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridResponseObjectAsResult = nil
	}

	// try to unmarshal data into Grid
	err = newStrictDecoder(data).Decode(&dst.Grid)
	if err == nil {
		jsonGrid, _ := json.Marshal(dst.Grid)
		if string(jsonGrid) == "{}" { // empty struct
			dst.Grid = nil
		} else {
			match++
		}
	} else {
		dst.Grid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridResponseObjectAsResult = nil
		dst.Grid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridResponseObjectAsResult)
	}

	if src.Grid != nil {
		return json.Marshal(&src.Grid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridResponseObjectAsResult != nil {
		return obj.GetGridResponseObjectAsResult
	}

	if obj.Grid != nil {
		return obj.Grid
	}

	// all schemas are nil
	return nil
}

type NullableGetGridResponse struct {
	value *GetGridResponse
	isSet bool
}

func (v NullableGetGridResponse) Get() *GetGridResponse {
	return v.value
}

func (v *NullableGetGridResponse) Set(val *GetGridResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridResponse(val *GetGridResponse) *NullableGetGridResponse {
	return &NullableGetGridResponse{value: val, isSet: true}
}

func (v NullableGetGridResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
