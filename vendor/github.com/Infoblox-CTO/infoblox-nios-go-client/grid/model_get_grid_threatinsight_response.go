/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGridThreatinsightResponse - struct for GetGridThreatinsightResponse
type GetGridThreatinsightResponse struct {
	GetGridThreatinsightResponseObjectAsResult *GetGridThreatinsightResponseObjectAsResult
	GridThreatinsight                          *GridThreatinsight
}

// GetGridThreatinsightResponseObjectAsResultAsGetGridThreatinsightResponse is a convenience function that returns GetGridThreatinsightResponseObjectAsResult wrapped in GetGridThreatinsightResponse
func GetGridThreatinsightResponseObjectAsResultAsGetGridThreatinsightResponse(v *GetGridThreatinsightResponseObjectAsResult) GetGridThreatinsightResponse {
	return GetGridThreatinsightResponse{
		GetGridThreatinsightResponseObjectAsResult: v,
	}
}

// GridThreatinsightAsGetGridThreatinsightResponse is a convenience function that returns GridThreatinsight wrapped in GetGridThreatinsightResponse
func GridThreatinsightAsGetGridThreatinsightResponse(v *GridThreatinsight) GetGridThreatinsightResponse {
	return GetGridThreatinsightResponse{
		GridThreatinsight: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridThreatinsightResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridThreatinsightResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridThreatinsightResponseObjectAsResult)
	if err == nil {
		jsonGetGridThreatinsightResponseObjectAsResult, _ := json.Marshal(dst.GetGridThreatinsightResponseObjectAsResult)
		if string(jsonGetGridThreatinsightResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridThreatinsightResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridThreatinsightResponseObjectAsResult = nil
	}

	// try to unmarshal data into GridThreatinsight
	err = newStrictDecoder(data).Decode(&dst.GridThreatinsight)
	if err == nil {
		jsonGridThreatinsight, _ := json.Marshal(dst.GridThreatinsight)
		if string(jsonGridThreatinsight) == "{}" { // empty struct
			dst.GridThreatinsight = nil
		} else {
			match++
		}
	} else {
		dst.GridThreatinsight = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridThreatinsightResponseObjectAsResult = nil
		dst.GridThreatinsight = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridThreatinsightResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridThreatinsightResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridThreatinsightResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridThreatinsightResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridThreatinsightResponseObjectAsResult)
	}

	if src.GridThreatinsight != nil {
		return json.Marshal(&src.GridThreatinsight)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridThreatinsightResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridThreatinsightResponseObjectAsResult != nil {
		return obj.GetGridThreatinsightResponseObjectAsResult
	}

	if obj.GridThreatinsight != nil {
		return obj.GridThreatinsight
	}

	// all schemas are nil
	return nil
}

type NullableGetGridThreatinsightResponse struct {
	value *GetGridThreatinsightResponse
	isSet bool
}

func (v NullableGetGridThreatinsightResponse) Get() *GetGridThreatinsightResponse {
	return v.value
}

func (v *NullableGetGridThreatinsightResponse) Set(val *GetGridThreatinsightResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridThreatinsightResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridThreatinsightResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridThreatinsightResponse(val *GetGridThreatinsightResponse) *NullableGetGridThreatinsightResponse {
	return &NullableGetGridThreatinsightResponse{value: val, isSet: true}
}

func (v NullableGetGridThreatinsightResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridThreatinsightResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
