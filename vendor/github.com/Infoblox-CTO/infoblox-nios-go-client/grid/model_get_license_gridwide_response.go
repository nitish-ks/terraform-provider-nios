/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetLicenseGridwideResponse - struct for GetLicenseGridwideResponse
type GetLicenseGridwideResponse struct {
	GetLicenseGridwideResponseObjectAsResult *GetLicenseGridwideResponseObjectAsResult
	LicenseGridwide                          *LicenseGridwide
}

// GetLicenseGridwideResponseObjectAsResultAsGetLicenseGridwideResponse is a convenience function that returns GetLicenseGridwideResponseObjectAsResult wrapped in GetLicenseGridwideResponse
func GetLicenseGridwideResponseObjectAsResultAsGetLicenseGridwideResponse(v *GetLicenseGridwideResponseObjectAsResult) GetLicenseGridwideResponse {
	return GetLicenseGridwideResponse{
		GetLicenseGridwideResponseObjectAsResult: v,
	}
}

// LicenseGridwideAsGetLicenseGridwideResponse is a convenience function that returns LicenseGridwide wrapped in GetLicenseGridwideResponse
func LicenseGridwideAsGetLicenseGridwideResponse(v *LicenseGridwide) GetLicenseGridwideResponse {
	return GetLicenseGridwideResponse{
		LicenseGridwide: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLicenseGridwideResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLicenseGridwideResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetLicenseGridwideResponseObjectAsResult)
	if err == nil {
		jsonGetLicenseGridwideResponseObjectAsResult, _ := json.Marshal(dst.GetLicenseGridwideResponseObjectAsResult)
		if string(jsonGetLicenseGridwideResponseObjectAsResult) == "{}" { // empty struct
			dst.GetLicenseGridwideResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetLicenseGridwideResponseObjectAsResult = nil
	}

	// try to unmarshal data into LicenseGridwide
	err = newStrictDecoder(data).Decode(&dst.LicenseGridwide)
	if err == nil {
		jsonLicenseGridwide, _ := json.Marshal(dst.LicenseGridwide)
		if string(jsonLicenseGridwide) == "{}" { // empty struct
			dst.LicenseGridwide = nil
		} else {
			match++
		}
	} else {
		dst.LicenseGridwide = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLicenseGridwideResponseObjectAsResult = nil
		dst.LicenseGridwide = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetLicenseGridwideResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetLicenseGridwideResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLicenseGridwideResponse) MarshalJSON() ([]byte, error) {
	if src.GetLicenseGridwideResponseObjectAsResult != nil {
		return json.Marshal(&src.GetLicenseGridwideResponseObjectAsResult)
	}

	if src.LicenseGridwide != nil {
		return json.Marshal(&src.LicenseGridwide)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLicenseGridwideResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetLicenseGridwideResponseObjectAsResult != nil {
		return obj.GetLicenseGridwideResponseObjectAsResult
	}

	if obj.LicenseGridwide != nil {
		return obj.LicenseGridwide
	}

	// all schemas are nil
	return nil
}

type NullableGetLicenseGridwideResponse struct {
	value *GetLicenseGridwideResponse
	isSet bool
}

func (v NullableGetLicenseGridwideResponse) Get() *GetLicenseGridwideResponse {
	return v.value
}

func (v *NullableGetLicenseGridwideResponse) Set(val *GetLicenseGridwideResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLicenseGridwideResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLicenseGridwideResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLicenseGridwideResponse(val *GetLicenseGridwideResponse) *NullableGetLicenseGridwideResponse {
	return &NullableGetLicenseGridwideResponse{value: val, isSet: true}
}

func (v NullableGetLicenseGridwideResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLicenseGridwideResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
