/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetMemberDnsResponse - struct for GetMemberDnsResponse
type GetMemberDnsResponse struct {
	GetMemberDnsResponseObjectAsResult *GetMemberDnsResponseObjectAsResult
	MemberDns                          *MemberDns
}

// GetMemberDnsResponseObjectAsResultAsGetMemberDnsResponse is a convenience function that returns GetMemberDnsResponseObjectAsResult wrapped in GetMemberDnsResponse
func GetMemberDnsResponseObjectAsResultAsGetMemberDnsResponse(v *GetMemberDnsResponseObjectAsResult) GetMemberDnsResponse {
	return GetMemberDnsResponse{
		GetMemberDnsResponseObjectAsResult: v,
	}
}

// MemberDnsAsGetMemberDnsResponse is a convenience function that returns MemberDns wrapped in GetMemberDnsResponse
func MemberDnsAsGetMemberDnsResponse(v *MemberDns) GetMemberDnsResponse {
	return GetMemberDnsResponse{
		MemberDns: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberDnsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberDnsResponseObjectAsResult)
	if err == nil {
		jsonGetMemberDnsResponseObjectAsResult, _ := json.Marshal(dst.GetMemberDnsResponseObjectAsResult)
		if string(jsonGetMemberDnsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberDnsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberDnsResponseObjectAsResult = nil
	}

	// try to unmarshal data into MemberDns
	err = newStrictDecoder(data).Decode(&dst.MemberDns)
	if err == nil {
		jsonMemberDns, _ := json.Marshal(dst.MemberDns)
		if string(jsonMemberDns) == "{}" { // empty struct
			dst.MemberDns = nil
		} else {
			match++
		}
	} else {
		dst.MemberDns = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberDnsResponseObjectAsResult = nil
		dst.MemberDns = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberDnsResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberDnsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberDnsResponseObjectAsResult)
	}

	if src.MemberDns != nil {
		return json.Marshal(&src.MemberDns)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberDnsResponseObjectAsResult != nil {
		return obj.GetMemberDnsResponseObjectAsResult
	}

	if obj.MemberDns != nil {
		return obj.MemberDns
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberDnsResponse struct {
	value *GetMemberDnsResponse
	isSet bool
}

func (v NullableGetMemberDnsResponse) Get() *GetMemberDnsResponse {
	return v.value
}

func (v *NullableGetMemberDnsResponse) Set(val *GetMemberDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberDnsResponse(val *GetMemberDnsResponse) *NullableGetMemberDnsResponse {
	return &NullableGetMemberDnsResponse{value: val, isSet: true}
}

func (v NullableGetMemberDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
