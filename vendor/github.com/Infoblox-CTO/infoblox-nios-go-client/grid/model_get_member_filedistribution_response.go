/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetMemberFiledistributionResponse - struct for GetMemberFiledistributionResponse
type GetMemberFiledistributionResponse struct {
	GetMemberFiledistributionResponseObjectAsResult *GetMemberFiledistributionResponseObjectAsResult
	MemberFiledistribution                          *MemberFiledistribution
}

// GetMemberFiledistributionResponseObjectAsResultAsGetMemberFiledistributionResponse is a convenience function that returns GetMemberFiledistributionResponseObjectAsResult wrapped in GetMemberFiledistributionResponse
func GetMemberFiledistributionResponseObjectAsResultAsGetMemberFiledistributionResponse(v *GetMemberFiledistributionResponseObjectAsResult) GetMemberFiledistributionResponse {
	return GetMemberFiledistributionResponse{
		GetMemberFiledistributionResponseObjectAsResult: v,
	}
}

// MemberFiledistributionAsGetMemberFiledistributionResponse is a convenience function that returns MemberFiledistribution wrapped in GetMemberFiledistributionResponse
func MemberFiledistributionAsGetMemberFiledistributionResponse(v *MemberFiledistribution) GetMemberFiledistributionResponse {
	return GetMemberFiledistributionResponse{
		MemberFiledistribution: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberFiledistributionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberFiledistributionResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberFiledistributionResponseObjectAsResult)
	if err == nil {
		jsonGetMemberFiledistributionResponseObjectAsResult, _ := json.Marshal(dst.GetMemberFiledistributionResponseObjectAsResult)
		if string(jsonGetMemberFiledistributionResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberFiledistributionResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberFiledistributionResponseObjectAsResult = nil
	}

	// try to unmarshal data into MemberFiledistribution
	err = newStrictDecoder(data).Decode(&dst.MemberFiledistribution)
	if err == nil {
		jsonMemberFiledistribution, _ := json.Marshal(dst.MemberFiledistribution)
		if string(jsonMemberFiledistribution) == "{}" { // empty struct
			dst.MemberFiledistribution = nil
		} else {
			match++
		}
	} else {
		dst.MemberFiledistribution = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberFiledistributionResponseObjectAsResult = nil
		dst.MemberFiledistribution = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberFiledistributionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberFiledistributionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberFiledistributionResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberFiledistributionResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberFiledistributionResponseObjectAsResult)
	}

	if src.MemberFiledistribution != nil {
		return json.Marshal(&src.MemberFiledistribution)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberFiledistributionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberFiledistributionResponseObjectAsResult != nil {
		return obj.GetMemberFiledistributionResponseObjectAsResult
	}

	if obj.MemberFiledistribution != nil {
		return obj.MemberFiledistribution
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberFiledistributionResponse struct {
	value *GetMemberFiledistributionResponse
	isSet bool
}

func (v NullableGetMemberFiledistributionResponse) Get() *GetMemberFiledistributionResponse {
	return v.value
}

func (v *NullableGetMemberFiledistributionResponse) Set(val *GetMemberFiledistributionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberFiledistributionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberFiledistributionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberFiledistributionResponse(val *GetMemberFiledistributionResponse) *NullableGetMemberFiledistributionResponse {
	return &NullableGetMemberFiledistributionResponse{value: val, isSet: true}
}

func (v NullableGetMemberFiledistributionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberFiledistributionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
