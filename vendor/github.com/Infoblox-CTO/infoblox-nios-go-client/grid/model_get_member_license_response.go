/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetMemberLicenseResponse - struct for GetMemberLicenseResponse
type GetMemberLicenseResponse struct {
	GetMemberLicenseResponseObjectAsResult *GetMemberLicenseResponseObjectAsResult
	MemberLicense                          *MemberLicense
}

// GetMemberLicenseResponseObjectAsResultAsGetMemberLicenseResponse is a convenience function that returns GetMemberLicenseResponseObjectAsResult wrapped in GetMemberLicenseResponse
func GetMemberLicenseResponseObjectAsResultAsGetMemberLicenseResponse(v *GetMemberLicenseResponseObjectAsResult) GetMemberLicenseResponse {
	return GetMemberLicenseResponse{
		GetMemberLicenseResponseObjectAsResult: v,
	}
}

// MemberLicenseAsGetMemberLicenseResponse is a convenience function that returns MemberLicense wrapped in GetMemberLicenseResponse
func MemberLicenseAsGetMemberLicenseResponse(v *MemberLicense) GetMemberLicenseResponse {
	return GetMemberLicenseResponse{
		MemberLicense: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberLicenseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberLicenseResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberLicenseResponseObjectAsResult)
	if err == nil {
		jsonGetMemberLicenseResponseObjectAsResult, _ := json.Marshal(dst.GetMemberLicenseResponseObjectAsResult)
		if string(jsonGetMemberLicenseResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberLicenseResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberLicenseResponseObjectAsResult = nil
	}

	// try to unmarshal data into MemberLicense
	err = newStrictDecoder(data).Decode(&dst.MemberLicense)
	if err == nil {
		jsonMemberLicense, _ := json.Marshal(dst.MemberLicense)
		if string(jsonMemberLicense) == "{}" { // empty struct
			dst.MemberLicense = nil
		} else {
			match++
		}
	} else {
		dst.MemberLicense = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberLicenseResponseObjectAsResult = nil
		dst.MemberLicense = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberLicenseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberLicenseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberLicenseResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberLicenseResponseObjectAsResult)
	}

	if src.MemberLicense != nil {
		return json.Marshal(&src.MemberLicense)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberLicenseResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberLicenseResponseObjectAsResult != nil {
		return obj.GetMemberLicenseResponseObjectAsResult
	}

	if obj.MemberLicense != nil {
		return obj.MemberLicense
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberLicenseResponse struct {
	value *GetMemberLicenseResponse
	isSet bool
}

func (v NullableGetMemberLicenseResponse) Get() *GetMemberLicenseResponse {
	return v.value
}

func (v *NullableGetMemberLicenseResponse) Set(val *GetMemberLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberLicenseResponse(val *GetMemberLicenseResponse) *NullableGetMemberLicenseResponse {
	return &NullableGetMemberLicenseResponse{value: val, isSet: true}
}

func (v NullableGetMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
