/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetMemberThreatinsightResponse - struct for GetMemberThreatinsightResponse
type GetMemberThreatinsightResponse struct {
	GetMemberThreatinsightResponseObjectAsResult *GetMemberThreatinsightResponseObjectAsResult
	MemberThreatinsight                          *MemberThreatinsight
}

// GetMemberThreatinsightResponseObjectAsResultAsGetMemberThreatinsightResponse is a convenience function that returns GetMemberThreatinsightResponseObjectAsResult wrapped in GetMemberThreatinsightResponse
func GetMemberThreatinsightResponseObjectAsResultAsGetMemberThreatinsightResponse(v *GetMemberThreatinsightResponseObjectAsResult) GetMemberThreatinsightResponse {
	return GetMemberThreatinsightResponse{
		GetMemberThreatinsightResponseObjectAsResult: v,
	}
}

// MemberThreatinsightAsGetMemberThreatinsightResponse is a convenience function that returns MemberThreatinsight wrapped in GetMemberThreatinsightResponse
func MemberThreatinsightAsGetMemberThreatinsightResponse(v *MemberThreatinsight) GetMemberThreatinsightResponse {
	return GetMemberThreatinsightResponse{
		MemberThreatinsight: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberThreatinsightResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberThreatinsightResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberThreatinsightResponseObjectAsResult)
	if err == nil {
		jsonGetMemberThreatinsightResponseObjectAsResult, _ := json.Marshal(dst.GetMemberThreatinsightResponseObjectAsResult)
		if string(jsonGetMemberThreatinsightResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberThreatinsightResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberThreatinsightResponseObjectAsResult = nil
	}

	// try to unmarshal data into MemberThreatinsight
	err = newStrictDecoder(data).Decode(&dst.MemberThreatinsight)
	if err == nil {
		jsonMemberThreatinsight, _ := json.Marshal(dst.MemberThreatinsight)
		if string(jsonMemberThreatinsight) == "{}" { // empty struct
			dst.MemberThreatinsight = nil
		} else {
			match++
		}
	} else {
		dst.MemberThreatinsight = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberThreatinsightResponseObjectAsResult = nil
		dst.MemberThreatinsight = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberThreatinsightResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberThreatinsightResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberThreatinsightResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberThreatinsightResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberThreatinsightResponseObjectAsResult)
	}

	if src.MemberThreatinsight != nil {
		return json.Marshal(&src.MemberThreatinsight)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberThreatinsightResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberThreatinsightResponseObjectAsResult != nil {
		return obj.GetMemberThreatinsightResponseObjectAsResult
	}

	if obj.MemberThreatinsight != nil {
		return obj.MemberThreatinsight
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberThreatinsightResponse struct {
	value *GetMemberThreatinsightResponse
	isSet bool
}

func (v NullableGetMemberThreatinsightResponse) Get() *GetMemberThreatinsightResponse {
	return v.value
}

func (v *NullableGetMemberThreatinsightResponse) Set(val *GetMemberThreatinsightResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberThreatinsightResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberThreatinsightResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberThreatinsightResponse(val *GetMemberThreatinsightResponse) *NullableGetMemberThreatinsightResponse {
	return &NullableGetMemberThreatinsightResponse{value: val, isSet: true}
}

func (v NullableGetMemberThreatinsightResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberThreatinsightResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
