/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetRestartservicestatusResponse - struct for GetRestartservicestatusResponse
type GetRestartservicestatusResponse struct {
	GetRestartservicestatusResponseObjectAsResult *GetRestartservicestatusResponseObjectAsResult
	Restartservicestatus                          *Restartservicestatus
}

// GetRestartservicestatusResponseObjectAsResultAsGetRestartservicestatusResponse is a convenience function that returns GetRestartservicestatusResponseObjectAsResult wrapped in GetRestartservicestatusResponse
func GetRestartservicestatusResponseObjectAsResultAsGetRestartservicestatusResponse(v *GetRestartservicestatusResponseObjectAsResult) GetRestartservicestatusResponse {
	return GetRestartservicestatusResponse{
		GetRestartservicestatusResponseObjectAsResult: v,
	}
}

// RestartservicestatusAsGetRestartservicestatusResponse is a convenience function that returns Restartservicestatus wrapped in GetRestartservicestatusResponse
func RestartservicestatusAsGetRestartservicestatusResponse(v *Restartservicestatus) GetRestartservicestatusResponse {
	return GetRestartservicestatusResponse{
		Restartservicestatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRestartservicestatusResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRestartservicestatusResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRestartservicestatusResponseObjectAsResult)
	if err == nil {
		jsonGetRestartservicestatusResponseObjectAsResult, _ := json.Marshal(dst.GetRestartservicestatusResponseObjectAsResult)
		if string(jsonGetRestartservicestatusResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRestartservicestatusResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRestartservicestatusResponseObjectAsResult = nil
	}

	// try to unmarshal data into Restartservicestatus
	err = newStrictDecoder(data).Decode(&dst.Restartservicestatus)
	if err == nil {
		jsonRestartservicestatus, _ := json.Marshal(dst.Restartservicestatus)
		if string(jsonRestartservicestatus) == "{}" { // empty struct
			dst.Restartservicestatus = nil
		} else {
			match++
		}
	} else {
		dst.Restartservicestatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRestartservicestatusResponseObjectAsResult = nil
		dst.Restartservicestatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRestartservicestatusResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRestartservicestatusResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRestartservicestatusResponse) MarshalJSON() ([]byte, error) {
	if src.GetRestartservicestatusResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRestartservicestatusResponseObjectAsResult)
	}

	if src.Restartservicestatus != nil {
		return json.Marshal(&src.Restartservicestatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRestartservicestatusResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRestartservicestatusResponseObjectAsResult != nil {
		return obj.GetRestartservicestatusResponseObjectAsResult
	}

	if obj.Restartservicestatus != nil {
		return obj.Restartservicestatus
	}

	// all schemas are nil
	return nil
}

type NullableGetRestartservicestatusResponse struct {
	value *GetRestartservicestatusResponse
	isSet bool
}

func (v NullableGetRestartservicestatusResponse) Get() *GetRestartservicestatusResponse {
	return v.value
}

func (v *NullableGetRestartservicestatusResponse) Set(val *GetRestartservicestatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRestartservicestatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRestartservicestatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRestartservicestatusResponse(val *GetRestartservicestatusResponse) *NullableGetRestartservicestatusResponse {
	return &NullableGetRestartservicestatusResponse{value: val, isSet: true}
}

func (v NullableGetRestartservicestatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRestartservicestatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
