/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetUpgradescheduleResponse - struct for GetUpgradescheduleResponse
type GetUpgradescheduleResponse struct {
	GetUpgradescheduleResponseObjectAsResult *GetUpgradescheduleResponseObjectAsResult
	Upgradeschedule                          *Upgradeschedule
}

// GetUpgradescheduleResponseObjectAsResultAsGetUpgradescheduleResponse is a convenience function that returns GetUpgradescheduleResponseObjectAsResult wrapped in GetUpgradescheduleResponse
func GetUpgradescheduleResponseObjectAsResultAsGetUpgradescheduleResponse(v *GetUpgradescheduleResponseObjectAsResult) GetUpgradescheduleResponse {
	return GetUpgradescheduleResponse{
		GetUpgradescheduleResponseObjectAsResult: v,
	}
}

// UpgradescheduleAsGetUpgradescheduleResponse is a convenience function that returns Upgradeschedule wrapped in GetUpgradescheduleResponse
func UpgradescheduleAsGetUpgradescheduleResponse(v *Upgradeschedule) GetUpgradescheduleResponse {
	return GetUpgradescheduleResponse{
		Upgradeschedule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUpgradescheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetUpgradescheduleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetUpgradescheduleResponseObjectAsResult)
	if err == nil {
		jsonGetUpgradescheduleResponseObjectAsResult, _ := json.Marshal(dst.GetUpgradescheduleResponseObjectAsResult)
		if string(jsonGetUpgradescheduleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetUpgradescheduleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetUpgradescheduleResponseObjectAsResult = nil
	}

	// try to unmarshal data into Upgradeschedule
	err = newStrictDecoder(data).Decode(&dst.Upgradeschedule)
	if err == nil {
		jsonUpgradeschedule, _ := json.Marshal(dst.Upgradeschedule)
		if string(jsonUpgradeschedule) == "{}" { // empty struct
			dst.Upgradeschedule = nil
		} else {
			match++
		}
	} else {
		dst.Upgradeschedule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetUpgradescheduleResponseObjectAsResult = nil
		dst.Upgradeschedule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetUpgradescheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetUpgradescheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	if src.GetUpgradescheduleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetUpgradescheduleResponseObjectAsResult)
	}

	if src.Upgradeschedule != nil {
		return json.Marshal(&src.Upgradeschedule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUpgradescheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetUpgradescheduleResponseObjectAsResult != nil {
		return obj.GetUpgradescheduleResponseObjectAsResult
	}

	if obj.Upgradeschedule != nil {
		return obj.Upgradeschedule
	}

	// all schemas are nil
	return nil
}

type NullableGetUpgradescheduleResponse struct {
	value *GetUpgradescheduleResponse
	isSet bool
}

func (v NullableGetUpgradescheduleResponse) Get() *GetUpgradescheduleResponse {
	return v.value
}

func (v *NullableGetUpgradescheduleResponse) Set(val *GetUpgradescheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUpgradescheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUpgradescheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUpgradescheduleResponse(val *GetUpgradescheduleResponse) *NullableGetUpgradescheduleResponse {
	return &NullableGetUpgradescheduleResponse{value: val, isSet: true}
}

func (v NullableGetUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUpgradescheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
