/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridConsentBannerSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridConsentBannerSetting{}

// GridConsentBannerSetting struct for GridConsentBannerSetting
type GridConsentBannerSetting struct {
	// Determines whether the consent banner is enabled.
	Enable *bool `json:"enable,omitempty"`
	// The message included in the consent banner.
	Message              *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridConsentBannerSetting GridConsentBannerSetting

// NewGridConsentBannerSetting instantiates a new GridConsentBannerSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridConsentBannerSetting() *GridConsentBannerSetting {
	this := GridConsentBannerSetting{}
	return &this
}

// NewGridConsentBannerSettingWithDefaults instantiates a new GridConsentBannerSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridConsentBannerSettingWithDefaults() *GridConsentBannerSetting {
	this := GridConsentBannerSetting{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *GridConsentBannerSetting) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridConsentBannerSetting) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *GridConsentBannerSetting) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *GridConsentBannerSetting) SetEnable(v bool) {
	o.Enable = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GridConsentBannerSetting) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridConsentBannerSetting) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GridConsentBannerSetting) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GridConsentBannerSetting) SetMessage(v string) {
	o.Message = &v
}

func (o GridConsentBannerSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridConsentBannerSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridConsentBannerSetting) UnmarshalJSON(data []byte) (err error) {
	varGridConsentBannerSetting := _GridConsentBannerSetting{}

	err = json.Unmarshal(data, &varGridConsentBannerSetting)

	if err != nil {
		return err
	}

	*o = GridConsentBannerSetting(varGridConsentBannerSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridConsentBannerSetting struct {
	value *GridConsentBannerSetting
	isSet bool
}

func (v NullableGridConsentBannerSetting) Get() *GridConsentBannerSetting {
	return v.value
}

func (v *NullableGridConsentBannerSetting) Set(val *GridConsentBannerSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridConsentBannerSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridConsentBannerSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridConsentBannerSetting(val *GridConsentBannerSetting) *NullableGridConsentBannerSetting {
	return &NullableGridConsentBannerSetting{value: val, isSet: true}
}

func (v NullableGridConsentBannerSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridConsentBannerSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
