/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridDns type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridDns{}

// GridDns struct for GridDns
type GridDns struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Add custom IP, MAC and DNS View name ENDS0 options to outgoing recursive queries.
	AddClientIpMacOptions *bool `json:"add_client_ip_mac_options,omitempty"`
	// Determines if DDNS bulk host is allowed or not.
	AllowBulkhostDdns *string `json:"allow_bulkhost_ddns,omitempty"`
	// Determines whether GSS-TSIG zone update is enabled for all Grid members.
	AllowGssTsigZoneUpdates *bool `json:"allow_gss_tsig_zone_updates,omitempty"`
	// Determines if queries from the specified IPv4 or IPv6 addresses and networks are allowed or not. The appliance can also use Transaction Signature (TSIG) keys to authenticate the queries.
	AllowQuery []GridDnsAllowQuery `json:"allow_query,omitempty"`
	// Determines if the responses to recursive queries are enabled or not.
	AllowRecursiveQuery *bool `json:"allow_recursive_query,omitempty"`
	// Determines if zone transfers from specified IPv4 or IPv6 addresses and networks or transfers from hosts authenticated by Transaction signature (TSIG) key are allowed or not.
	AllowTransfer []GridDnsAllowTransfer `json:"allow_transfer,omitempty"`
	// Determines if dynamic updates from specified IPv4 or IPv6 addresses, networks or from host authenticated by TSIG key are allowed or not.
	AllowUpdate []GridDnsAllowUpdate `json:"allow_update,omitempty"`
	// Determines if the anonymization of captured DNS responses is enabled or disabled.
	AnonymizeResponseLogging *bool                    `json:"anonymize_response_logging,omitempty"`
	AttackMitigation         *GridDnsAttackMitigation `json:"attack_mitigation,omitempty"`
	AutoBlackhole            *GridDnsAutoBlackhole    `json:"auto_blackhole,omitempty"`
	// The BIND check names policy, which indicates the action the appliance takes when it encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if the host name restriction policy is set to \"Strict Hostname Checking\".
	BindCheckNamesPolicy *string `json:"bind_check_names_policy,omitempty"`
	// The value of the hostname directive for BIND.
	BindHostnameDirective *string `json:"bind_hostname_directive,omitempty"`
	// The list of IPv4 or IPv6 addresses and networks from which DNS queries are blocked.
	BlackholeList []GridDnsBlackholeList `json:"blackhole_list,omitempty"`
	// The action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist ruleset.
	BlacklistAction *string `json:"blacklist_action,omitempty"`
	// Determines if blacklist redirection queries are logged or not.
	BlacklistLogQuery *bool `json:"blacklist_log_query,omitempty"`
	// The IP addresses the appliance includes in the response it sends in place of a blacklisted IP address.
	BlacklistRedirectAddresses []string `json:"blacklist_redirect_addresses,omitempty"`
	// The TTL value (in seconds) of the synthetic DNS responses that result from blacklist redirection.
	BlacklistRedirectTtl *int64 `json:"blacklist_redirect_ttl,omitempty"`
	// The DNS Ruleset object names assigned at the Grid level for blacklist redirection.
	BlacklistRulesets []string `json:"blacklist_rulesets,omitempty"`
	// The list of bulk host name templates. There are four Infoblox predefined bulk host name templates. Template Name Template Format \"Four Octets\" -$1-$2-$3-$4 \"Three Octets\" -$2-$3-$4 \"Two Octets\" -$3-$4 \"One Octet\" -$4
	BulkHostNameTemplates []string `json:"bulk_host_name_templates,omitempty"`
	// Determines if the capture of DNS queries for all domains is enabled or disabled.
	CaptureDnsQueriesOnAllDomains *bool `json:"capture_dns_queries_on_all_domains,omitempty"`
	// Determines whether the application of BIND check-names for zone transfers and DDNS updates are enabled.
	CheckNamesForDdnsAndZoneTransfer *bool `json:"check_names_for_ddns_and_zone_transfer,omitempty"`
	// The list of zone domain names that are allowed or forbidden for EDNS client subnet (ECS) recursion.
	ClientSubnetDomains []GridDnsClientSubnetDomains `json:"client_subnet_domains,omitempty"`
	// Default IPv4 Source Prefix-Length used when sending queries with EDNS client subnet option.
	ClientSubnetIpv4PrefixLength *int64 `json:"client_subnet_ipv4_prefix_length,omitempty"`
	// Default IPv6 Source Prefix-Length used when sending queries with EDNS client subnet option.
	ClientSubnetIpv6PrefixLength *int64 `json:"client_subnet_ipv6_prefix_length,omitempty"`
	// Copy custom IP, MAC and DNS View name ENDS0 options from incoming to outgoing recursive queries.
	CopyClientIpMacOptions *bool `json:"copy_client_ip_mac_options,omitempty"`
	// The allowed IPs, from the zone transfer list, added to the also-notify statement in the named.conf file.
	CopyXferToNotify *bool `json:"copy_xfer_to_notify,omitempty"`
	// The list of customized root nameserver(s). You can use Internet root name servers or specify host names and IP addresses of custom root name servers.
	CustomRootNameServers []GridDnsCustomRootNameServers `json:"custom_root_name_servers,omitempty"`
	// Defines whether creation timestamp of RR should be updated ' when DDNS update happens even if there is no change to ' the RR.
	DdnsForceCreationTimestampUpdate *bool `json:"ddns_force_creation_timestamp_update,omitempty"`
	// The DDNS Principal cluster group name.
	DdnsPrincipalGroup *string `json:"ddns_principal_group,omitempty"`
	// Determines if the DDNS principal track is enabled or disabled.
	DdnsPrincipalTracking *bool `json:"ddns_principal_tracking,omitempty"`
	// Determines if an option to restrict DDNS update request based on FQDN patterns is enabled or disabled.
	DdnsRestrictPatterns *bool `json:"ddns_restrict_patterns,omitempty"`
	// The unordered list of restriction patterns for an option of to restrict DDNS updates based on FQDN patterns.
	DdnsRestrictPatternsList []string `json:"ddns_restrict_patterns_list,omitempty"`
	// Determines if an option to restrict DDNS update request to protected resource records is enabled or disabled.
	DdnsRestrictProtected *bool `json:"ddns_restrict_protected,omitempty"`
	// Determines if DDNS update request for principal other than target resource record's principal is restricted.
	DdnsRestrictSecure *bool `json:"ddns_restrict_secure,omitempty"`
	// Determines if an option to restrict DDNS update request to resource records which are marked as 'STATIC' is enabled or disabled.
	DdnsRestrictStatic *bool `json:"ddns_restrict_static,omitempty"`
	// Default bulk host name of a Grid DNS.
	DefaultBulkHostNameTemplate *string `json:"default_bulk_host_name_template,omitempty"`
	// The default TTL value of a Grid DNS object. This interval tells the secondary how long the data can be cached.
	DefaultTtl *int64 `json:"default_ttl,omitempty"`
	// Determines if the EDNS0 support for queries that require recursive resolution on Grid members is enabled or not.
	DisableEdns *bool `json:"disable_edns,omitempty"`
	// The list of DNS64 synthesis groups associated with this Grid DNS object.
	Dns64Groups []string `json:"dns64_groups,omitempty"`
	// The minimum TTL value, in seconds, that a DNS record must have in order for it to be cached by the DNS Cache Acceleration service. An integer from 1 to 65000 that represents the TTL in seconds.
	DnsCacheAccelerationTtl *int64 `json:"dns_cache_acceleration_ttl,omitempty"`
	// Determines if the anycast failure (BFD session down) is enabled on member failure or not.
	DnsHealthCheckAnycastControl *bool `json:"dns_health_check_anycast_control,omitempty"`
	// The list of domain names for the DNS health check.
	DnsHealthCheckDomainList []string `json:"dns_health_check_domain_list,omitempty"`
	// The time interval (in seconds) for DNS health check.
	DnsHealthCheckInterval *int64 `json:"dns_health_check_interval,omitempty"`
	// Determines if the recursive DNS health check is enabled or not.
	DnsHealthCheckRecursionFlag *bool `json:"dns_health_check_recursion_flag,omitempty"`
	// The number of DNS health check retries.
	DnsHealthCheckRetries *int64 `json:"dns_health_check_retries,omitempty"`
	// The DNS health check timeout interval (in seconds).
	DnsHealthCheckTimeout *int64 `json:"dns_health_check_timeout,omitempty"`
	// The time limit (in minutes) for the DNS query capture file.
	DnsQueryCaptureFileTimeLimit *int64 `json:"dns_query_capture_file_time_limit,omitempty"`
	// Determines if the blacklist rules for DNSSEC-enabled clients are enabled or not.
	DnssecBlacklistEnabled *bool `json:"dnssec_blacklist_enabled,omitempty"`
	// Determines if the DNS64 groups for DNSSEC-enabled clients are enabled or not.
	DnssecDns64Enabled *bool `json:"dnssec_dns64_enabled,omitempty"`
	// Determines if the DNS security extension is enabled or not.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	// Determines when the DNS member accepts expired signatures.
	DnssecExpiredSignaturesEnabled *bool                   `json:"dnssec_expired_signatures_enabled,omitempty"`
	DnssecKeyParams                *GridDnsDnssecKeyParams `json:"dnssec_key_params,omitempty"`
	// A list of zones for which the server does not perform DNSSEC validation.
	DnssecNegativeTrustAnchors []string `json:"dnssec_negative_trust_anchors,omitempty"`
	// Determines if the NXDOMAIN rules for DNSSEC-enabled clients are enabled or not.
	DnssecNxdomainEnabled *bool `json:"dnssec_nxdomain_enabled,omitempty"`
	// Determines if the RPZ policies for DNSSEC-enabled clients are enabled or not.
	DnssecRpzEnabled *bool `json:"dnssec_rpz_enabled,omitempty"`
	// The list of trusted keys for the DNSSEC feature.
	DnssecTrustedKeys []GridDnsDnssecTrustedKeys `json:"dnssec_trusted_keys,omitempty"`
	// Determines if the DNS security validation is enabled or not.
	DnssecValidationEnabled *bool                 `json:"dnssec_validation_enabled,omitempty"`
	DnstapSetting           *GridDnsDnstapSetting `json:"dnstap_setting,omitempty"`
	// The list of domains for DNS query capture.
	DomainsToCaptureDnsQueries []string `json:"domains_to_capture_dns_queries,omitempty"`
	// Setting to control specific behavior for DTC DNS responses for incoming lbdn matched queries.
	DtcDnsQueriesSpecificBehavior *string `json:"dtc_dns_queries_specific_behavior,omitempty"`
	// DTC DNSSEC operation mode.
	DtcDnssecMode *string `json:"dtc_dnssec_mode,omitempty"`
	// Determines whether to prefer the client address from the edns-client-subnet option for DTC or not.
	DtcEdnsPreferClientSubnet *bool                      `json:"dtc_edns_prefer_client_subnet,omitempty"`
	DtcScheduledBackup        *GridDnsDtcScheduledBackup `json:"dtc_scheduled_backup,omitempty"`
	// The DTC topology extensible attribute definition list. When configuring a DTC topology, users may configure classification as either \"Geographic\" or \"Extensible Attributes\". Selecting extensible attributes will replace supported Topology database labels (Continent, Country, Subdivision, City) with the names of the selection EA types and provide values extracted from DHCP Network Container, Network and Range objects with those extensible attributes.
	DtcTopologyEaList []string `json:"dtc_topology_ea_list,omitempty"`
	// Advertises the EDNS0 buffer size to the upstream server. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	EdnsUdpSize *int64 `json:"edns_udp_size,omitempty"`
	// The email address of a Grid DNS object.
	Email *string `json:"email,omitempty"`
	// Determines if the blocking of DNS queries is enabled or not.
	EnableBlackhole *bool `json:"enable_blackhole,omitempty"`
	// Determines if a blacklist is enabled or not.
	EnableBlacklist *bool `json:"enable_blacklist,omitempty"`
	// Determines if the capture of DNS queries is enabled or disabled.
	EnableCaptureDnsQueries *bool `json:"enable_capture_dns_queries,omitempty"`
	// Determines if the capture of DNS responses is enabled or disabled.
	EnableCaptureDnsResponses *bool `json:"enable_capture_dns_responses,omitempty"`
	// Determines whether to enable forwarding EDNS client subnet options to upstream servers.
	EnableClientSubnetForwarding *bool `json:"enable_client_subnet_forwarding,omitempty"`
	// Determines whether to enable adding EDNS client subnet options in recursive resolution.
	EnableClientSubnetRecursive *bool `json:"enable_client_subnet_recursive,omitempty"`
	// Determines if the ability to automatically remove associated PTR records while deleting A or AAAA records is enabled or not.
	EnableDeleteAssociatedPtr *bool `json:"enable_delete_associated_ptr,omitempty"`
	// Determines if the DNS64 support is enabled or not.
	EnableDns64 *bool `json:"enable_dns64,omitempty"`
	// Determines if the DNS health check is enabled or not.
	EnableDnsHealthCheck *bool `json:"enable_dns_health_check,omitempty"`
	// Determines whether the query messages need to be forwarded to DNSTAP or not.
	EnableDnstapQueries *bool `json:"enable_dnstap_queries,omitempty"`
	// Determines whether the response messages need to be forwarded to DNSTAP or not.
	EnableDnstapResponses *bool `json:"enable_dnstap_responses,omitempty"`
	// Determines if excluding domain names from captured DNS queries and responses is enabled or disabled.
	EnableExcludedDomainNames *bool `json:"enable_excluded_domain_names,omitempty"`
	// Determines if the fixed RRset order FQDN is enabled or not.
	EnableFixedRrsetOrderFqdns *bool `json:"enable_fixed_rrset_order_fqdns,omitempty"`
	// Determines whether Fault Tolerant Caching (FTC) is enabled.
	EnableFtc *bool `json:"enable_ftc,omitempty"`
	// Determines whether all appliances in the Grid are enabled to receive GSS-TSIG authenticated updates from DNS clients.
	EnableGssTsig *bool `json:"enable_gss_tsig,omitempty"`
	// Determines if the host RRset order is enabled or not.
	EnableHostRrsetOrder *bool `json:"enable_host_rrset_order,omitempty"`
	// Determines whether Hardware Security Modules (HSMs) are enabled for key generation and signing. Note, that you must configure the HSM group with at least one enabled HSM.
	EnableHsmSigning *bool `json:"enable_hsm_signing,omitempty"`
	// Determines if the notify source port at the Grid Level is enabled or not.
	EnableNotifySourcePort *bool `json:"enable_notify_source_port,omitempty"`
	// Determines if the DNS query rewrite is enabled or not.
	EnableQueryRewrite *bool `json:"enable_query_rewrite,omitempty"`
	// Determines if the query source port at the Grid Level is enabled or not.
	EnableQuerySourcePort *bool `json:"enable_query_source_port,omitempty"`
	// The list of domains that are excluded from DNS query and response capture.
	ExcludedDomainNames []string `json:"excluded_domain_names,omitempty"`
	// The expiration time of a Grid DNS object. If the secondary DNS server fails to contact the primary server for the specified interval, the secondary server stops giving out answers about the zone because the zone data is too old to be useful.
	ExpireAfter         *int64                      `json:"expire_after,omitempty"`
	FileTransferSetting *GridDnsFileTransferSetting `json:"file_transfer_setting,omitempty"`
	// The type of AAAA filtering for this member DNS object.
	FilterAaaa *string `json:"filter_aaaa,omitempty"`
	// The list of IPv4 addresses and networks from which queries are received. AAAA filtering is applied to these addresses.
	FilterAaaaList []GridDnsFilterAaaaList `json:"filter_aaaa_list,omitempty"`
	// The fixed RRset order FQDN. If this field does not contain an empty value, the appliance will automatically set the enable_fixed_rrset_order_fqdns field to 'true', unless the same request sets the enable field to 'false'.
	FixedRrsetOrderFqdns []GridDnsFixedRrsetOrderFqdns `json:"fixed_rrset_order_fqdns,omitempty"`
	// Determines if member sends queries to forwarders only. When the value is \"true\", the member sends queries to forwarders only, and not to other internal or Internet root servers.
	ForwardOnly *bool `json:"forward_only,omitempty"`
	// Determines if secondary servers is allowed to forward updates to the DNS server or not.
	ForwardUpdates *bool `json:"forward_updates,omitempty"`
	// The forwarders for the member. A forwarder is essentially a name server to which other name servers first send all of their off-site queries. The forwarder builds up a cache of information, avoiding the need for the other name servers to send queries off-site.
	Forwarders []string `json:"forwarders,omitempty"`
	// The timeout interval (in seconds) after which the expired Fault Tolerant Caching (FTC)record is stale and no longer valid.
	FtcExpiredRecordTimeout *int64 `json:"ftc_expired_record_timeout,omitempty"`
	// The TTL value (in seconds) of the expired Fault Tolerant Caching (FTC) record in DNS responses.
	FtcExpiredRecordTtl *int64 `json:"ftc_expired_record_ttl,omitempty"`
	// Flag for taking EA values from IPAM Hosts into consideration for the DTC topology EA database.
	GenEadbFromHosts *bool `json:"gen_eadb_from_hosts,omitempty"`
	// Flag for taking EA values from IPAM Network Containers into consideration for the DTC topology EA database.
	GenEadbFromNetworkContainers *bool `json:"gen_eadb_from_network_containers,omitempty"`
	// Flag for taking EA values from IPAM Network into consideration for the DTC topology EA database.
	GenEadbFromNetworks *bool `json:"gen_eadb_from_networks,omitempty"`
	// Flag for taking EA values from IPAM Ranges into consideration for the DTC topology EA database.
	GenEadbFromRanges *bool `json:"gen_eadb_from_ranges,omitempty"`
	// The list of GSS-TSIG keys for a Grid DNS object.
	GssTsigKeys []string `json:"gss_tsig_keys,omitempty"`
	// Determines last queried ACL for the specified IPv4 or IPv6 addresses and networks in scavenging settings.
	LastQueriedAcl    []GridDnsLastQueriedAcl   `json:"last_queried_acl,omitempty"`
	LoggingCategories *GridDnsLoggingCategories `json:"logging_categories,omitempty"`
	// The maximum time (in seconds) for which the server will cache positive answers.
	MaxCacheTtl *int64 `json:"max_cache_ttl,omitempty"`
	// The maximum time (in seconds) a DNS response can be stored in the hardware acceleration cache. Valid values are unsigned integer between 60 and 86400, inclusive.
	MaxCachedLifetime *int64 `json:"max_cached_lifetime,omitempty"`
	// The maximum time (in seconds) for which the server will cache negative (NXDOMAIN) responses. The maximum allowed value is 604800.
	MaxNcacheTtl *int64 `json:"max_ncache_ttl,omitempty"`
	// The value is used by authoritative DNS servers to never send DNS responses larger than the configured value. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	MaxUdpSize *int64 `json:"max_udp_size,omitempty"`
	// Determines if Grid members that are authoritative secondary servers are allowed to send notification messages to external name servers, if the Grid member that is primary for a zone fails or loses connectivity.
	MemberSecondaryNotify *bool `json:"member_secondary_notify,omitempty"`
	// The negative TTL value of a Grid DNS object. This interval tells the secondary how long data can be cached for \"Does Not Respond\" responses.
	NegativeTtl *int64 `json:"negative_ttl,omitempty"`
	// Specifies with how many seconds of delay the notify messages are sent to secondaries.
	NotifyDelay *int64 `json:"notify_delay,omitempty"`
	// The source port for notify messages. When requesting zone transfers from the primary server, some secondary DNS servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request. Valid values are between 1 and 63999. The default is picked by BIND.
	NotifySourcePort *int64 `json:"notify_source_port,omitempty"`
	// The default nameserver group.
	NsgroupDefault *string `json:"nsgroup_default,omitempty"`
	// A name server group is a collection of one primary DNS server and one or more secondary DNS servers.
	Nsgroups []string `json:"nsgroups,omitempty"`
	// Determines if NXDOMAIN redirection queries are logged or not.
	NxdomainLogQuery *bool `json:"nxdomain_log_query,omitempty"`
	// Determines if NXDOMAIN redirection is enabled or not.
	NxdomainRedirect *bool `json:"nxdomain_redirect,omitempty"`
	// The list of IPv4 NXDOMAIN redirection addresses.
	NxdomainRedirectAddresses []string `json:"nxdomain_redirect_addresses,omitempty"`
	// The list of IPv6 NXDOMAIN redirection addresses.
	NxdomainRedirectAddressesV6 []string `json:"nxdomain_redirect_addresses_v6,omitempty"`
	// The TTL value (in seconds) of synthetic DNS responses that result from NXDOMAIN redirection.
	NxdomainRedirectTtl *int64 `json:"nxdomain_redirect_ttl,omitempty"`
	// The Ruleset object names assigned at the Grid level for NXDOMAIN redirection.
	NxdomainRulesets []string `json:"nxdomain_rulesets,omitempty"`
	// Determines if the host RRset order on secondaries is preserved or not.
	PreserveHostRrsetOrderOnSecondaries *bool `json:"preserve_host_rrset_order_on_secondaries,omitempty"`
	// The list of record name policies.
	ProtocolRecordNamePolicies []string `json:"protocol_record_name_policies,omitempty"`
	// The list of domain names that trigger DNS query rewrite.
	QueryRewriteDomainNames []string `json:"query_rewrite_domain_names,omitempty"`
	// The domain name prefix for DNS query rewrite.
	QueryRewritePrefix *string `json:"query_rewrite_prefix,omitempty"`
	// The source port for queries. Specifying a source port number for recursive queries ensures that a firewall will allow the response. Valid values are between 1 and 63999. The default is picked by BIND.
	QuerySourcePort *int64 `json:"query_source_port,omitempty"`
	// The list of IPv4 or IPv6 addresses, networks or hosts authenticated by Transaction signature (TSIG) key from which recursive queries are allowed or denied.
	RecursiveQueryList []GridDnsRecursiveQueryList `json:"recursive_query_list,omitempty"`
	// The refresh time. This interval tells the secondary how often to send a message to the primary for a zone to check that its data is current, and retrieve fresh data if it is not.
	RefreshTimer *int64 `json:"refresh_timer,omitempty"`
	// The recursive query timeout for the member.
	ResolverQueryTimeout *int64                       `json:"resolver_query_timeout,omitempty"`
	ResponseRateLimiting *GridDnsResponseRateLimiting `json:"response_rate_limiting,omitempty"`
	RestartSetting       *GridDnsRestartSetting       `json:"restart_setting,omitempty"`
	// The retry time. This interval tells the secondary how long to wait before attempting to recontact the primary after a connection failure occurs between the two servers.
	RetryTimer *int64 `json:"retry_timer,omitempty"`
	// Determines the type of root name servers.
	RootNameServerType *string `json:"root_name_server_type,omitempty"`
	// Determines if NSDNAME and NSIP resource records from RPZ feeds are enabled or not.
	RpzDisableNsdnameNsip *bool `json:"rpz_disable_nsdname_nsip,omitempty"`
	// Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.
	RpzDropIpRuleEnabled *bool `json:"rpz_drop_ip_rule_enabled,omitempty"`
	// The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv4 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv4,omitempty"`
	// The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv6 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv6,omitempty"`
	// Determines if recursive RPZ lookups are enabled.
	RpzQnameWaitRecurse *bool                      `json:"rpz_qname_wait_recurse,omitempty"`
	RunScavenging       map[string]interface{}     `json:"run_scavenging,omitempty"`
	ScavengingSettings  *GridDnsScavengingSettings `json:"scavenging_settings,omitempty"`
	// The number of maximum concurrent SOA queries per second. Valid values are unsigned integer between 20 and 1000, inclusive.
	SerialQueryRate *int64 `json:"serial_query_rate,omitempty"`
	// The value of the server-id directive for BIND DNS.
	ServerIdDirective *string `json:"server_id_directive,omitempty"`
	// A sort list determines the order of addresses in responses made to DNS queries.
	Sortlist []GridDnsSortlist `json:"sortlist,omitempty"`
	// Determines if the storage of query capture reports on the appliance is enabled or disabled.
	StoreLocally *bool `json:"store_locally,omitempty"`
	// The syslog facility. This is the location on the syslog server to which you want to sort the DNS logging messages.
	SyslogFacility *string `json:"syslog_facility,omitempty"`
	// The list of excluded DNS servers during zone transfers.
	TransferExcludedServers []string `json:"transfer_excluded_servers,omitempty"`
	// The BIND format for a zone transfer. This provides tracking capabilities for single or multiple transfers and their associated servers.
	TransferFormat *string `json:"transfer_format,omitempty"`
	// The number of maximum concurrent transfers for the Grid. Valid values are unsigned integer between 10 and 10000, inclusive.
	TransfersIn *int64 `json:"transfers_in,omitempty"`
	// The number of maximum outbound concurrent zone transfers. Valid values are unsigned integer between 10 and 10000, inclusive.
	TransfersOut *int64 `json:"transfers_out,omitempty"`
	// The number of maximum concurrent transfers per member. Valid values are unsigned integer between 2 and 10000, inclusive.
	TransfersPerNs *int64 `json:"transfers_per_ns,omitempty"`
	// Determines if the double confirmation during zone deletion is enabled or not.
	ZoneDeletionDoubleConfirm *bool `json:"zone_deletion_double_confirm,omitempty"`
}

// NewGridDns instantiates a new GridDns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridDns() *GridDns {
	this := GridDns{}
	return &this
}

// NewGridDnsWithDefaults instantiates a new GridDns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridDnsWithDefaults() *GridDns {
	this := GridDns{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GridDns) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GridDns) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GridDns) SetRef(v string) {
	o.Ref = &v
}

// GetAddClientIpMacOptions returns the AddClientIpMacOptions field value if set, zero value otherwise.
func (o *GridDns) GetAddClientIpMacOptions() bool {
	if o == nil || IsNil(o.AddClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.AddClientIpMacOptions
}

// GetAddClientIpMacOptionsOk returns a tuple with the AddClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAddClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.AddClientIpMacOptions) {
		return nil, false
	}
	return o.AddClientIpMacOptions, true
}

// HasAddClientIpMacOptions returns a boolean if a field has been set.
func (o *GridDns) HasAddClientIpMacOptions() bool {
	if o != nil && !IsNil(o.AddClientIpMacOptions) {
		return true
	}

	return false
}

// SetAddClientIpMacOptions gets a reference to the given bool and assigns it to the AddClientIpMacOptions field.
func (o *GridDns) SetAddClientIpMacOptions(v bool) {
	o.AddClientIpMacOptions = &v
}

// GetAllowBulkhostDdns returns the AllowBulkhostDdns field value if set, zero value otherwise.
func (o *GridDns) GetAllowBulkhostDdns() string {
	if o == nil || IsNil(o.AllowBulkhostDdns) {
		var ret string
		return ret
	}
	return *o.AllowBulkhostDdns
}

// GetAllowBulkhostDdnsOk returns a tuple with the AllowBulkhostDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowBulkhostDdnsOk() (*string, bool) {
	if o == nil || IsNil(o.AllowBulkhostDdns) {
		return nil, false
	}
	return o.AllowBulkhostDdns, true
}

// HasAllowBulkhostDdns returns a boolean if a field has been set.
func (o *GridDns) HasAllowBulkhostDdns() bool {
	if o != nil && !IsNil(o.AllowBulkhostDdns) {
		return true
	}

	return false
}

// SetAllowBulkhostDdns gets a reference to the given string and assigns it to the AllowBulkhostDdns field.
func (o *GridDns) SetAllowBulkhostDdns(v string) {
	o.AllowBulkhostDdns = &v
}

// GetAllowGssTsigZoneUpdates returns the AllowGssTsigZoneUpdates field value if set, zero value otherwise.
func (o *GridDns) GetAllowGssTsigZoneUpdates() bool {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		var ret bool
		return ret
	}
	return *o.AllowGssTsigZoneUpdates
}

// GetAllowGssTsigZoneUpdatesOk returns a tuple with the AllowGssTsigZoneUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowGssTsigZoneUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		return nil, false
	}
	return o.AllowGssTsigZoneUpdates, true
}

// HasAllowGssTsigZoneUpdates returns a boolean if a field has been set.
func (o *GridDns) HasAllowGssTsigZoneUpdates() bool {
	if o != nil && !IsNil(o.AllowGssTsigZoneUpdates) {
		return true
	}

	return false
}

// SetAllowGssTsigZoneUpdates gets a reference to the given bool and assigns it to the AllowGssTsigZoneUpdates field.
func (o *GridDns) SetAllowGssTsigZoneUpdates(v bool) {
	o.AllowGssTsigZoneUpdates = &v
}

// GetAllowQuery returns the AllowQuery field value if set, zero value otherwise.
func (o *GridDns) GetAllowQuery() []GridDnsAllowQuery {
	if o == nil || IsNil(o.AllowQuery) {
		var ret []GridDnsAllowQuery
		return ret
	}
	return o.AllowQuery
}

// GetAllowQueryOk returns a tuple with the AllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowQueryOk() ([]GridDnsAllowQuery, bool) {
	if o == nil || IsNil(o.AllowQuery) {
		return nil, false
	}
	return o.AllowQuery, true
}

// HasAllowQuery returns a boolean if a field has been set.
func (o *GridDns) HasAllowQuery() bool {
	if o != nil && !IsNil(o.AllowQuery) {
		return true
	}

	return false
}

// SetAllowQuery gets a reference to the given []GridDnsAllowQuery and assigns it to the AllowQuery field.
func (o *GridDns) SetAllowQuery(v []GridDnsAllowQuery) {
	o.AllowQuery = v
}

// GetAllowRecursiveQuery returns the AllowRecursiveQuery field value if set, zero value otherwise.
func (o *GridDns) GetAllowRecursiveQuery() bool {
	if o == nil || IsNil(o.AllowRecursiveQuery) {
		var ret bool
		return ret
	}
	return *o.AllowRecursiveQuery
}

// GetAllowRecursiveQueryOk returns a tuple with the AllowRecursiveQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowRecursiveQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRecursiveQuery) {
		return nil, false
	}
	return o.AllowRecursiveQuery, true
}

// HasAllowRecursiveQuery returns a boolean if a field has been set.
func (o *GridDns) HasAllowRecursiveQuery() bool {
	if o != nil && !IsNil(o.AllowRecursiveQuery) {
		return true
	}

	return false
}

// SetAllowRecursiveQuery gets a reference to the given bool and assigns it to the AllowRecursiveQuery field.
func (o *GridDns) SetAllowRecursiveQuery(v bool) {
	o.AllowRecursiveQuery = &v
}

// GetAllowTransfer returns the AllowTransfer field value if set, zero value otherwise.
func (o *GridDns) GetAllowTransfer() []GridDnsAllowTransfer {
	if o == nil || IsNil(o.AllowTransfer) {
		var ret []GridDnsAllowTransfer
		return ret
	}
	return o.AllowTransfer
}

// GetAllowTransferOk returns a tuple with the AllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowTransferOk() ([]GridDnsAllowTransfer, bool) {
	if o == nil || IsNil(o.AllowTransfer) {
		return nil, false
	}
	return o.AllowTransfer, true
}

// HasAllowTransfer returns a boolean if a field has been set.
func (o *GridDns) HasAllowTransfer() bool {
	if o != nil && !IsNil(o.AllowTransfer) {
		return true
	}

	return false
}

// SetAllowTransfer gets a reference to the given []GridDnsAllowTransfer and assigns it to the AllowTransfer field.
func (o *GridDns) SetAllowTransfer(v []GridDnsAllowTransfer) {
	o.AllowTransfer = v
}

// GetAllowUpdate returns the AllowUpdate field value if set, zero value otherwise.
func (o *GridDns) GetAllowUpdate() []GridDnsAllowUpdate {
	if o == nil || IsNil(o.AllowUpdate) {
		var ret []GridDnsAllowUpdate
		return ret
	}
	return o.AllowUpdate
}

// GetAllowUpdateOk returns a tuple with the AllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAllowUpdateOk() ([]GridDnsAllowUpdate, bool) {
	if o == nil || IsNil(o.AllowUpdate) {
		return nil, false
	}
	return o.AllowUpdate, true
}

// HasAllowUpdate returns a boolean if a field has been set.
func (o *GridDns) HasAllowUpdate() bool {
	if o != nil && !IsNil(o.AllowUpdate) {
		return true
	}

	return false
}

// SetAllowUpdate gets a reference to the given []GridDnsAllowUpdate and assigns it to the AllowUpdate field.
func (o *GridDns) SetAllowUpdate(v []GridDnsAllowUpdate) {
	o.AllowUpdate = v
}

// GetAnonymizeResponseLogging returns the AnonymizeResponseLogging field value if set, zero value otherwise.
func (o *GridDns) GetAnonymizeResponseLogging() bool {
	if o == nil || IsNil(o.AnonymizeResponseLogging) {
		var ret bool
		return ret
	}
	return *o.AnonymizeResponseLogging
}

// GetAnonymizeResponseLoggingOk returns a tuple with the AnonymizeResponseLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAnonymizeResponseLoggingOk() (*bool, bool) {
	if o == nil || IsNil(o.AnonymizeResponseLogging) {
		return nil, false
	}
	return o.AnonymizeResponseLogging, true
}

// HasAnonymizeResponseLogging returns a boolean if a field has been set.
func (o *GridDns) HasAnonymizeResponseLogging() bool {
	if o != nil && !IsNil(o.AnonymizeResponseLogging) {
		return true
	}

	return false
}

// SetAnonymizeResponseLogging gets a reference to the given bool and assigns it to the AnonymizeResponseLogging field.
func (o *GridDns) SetAnonymizeResponseLogging(v bool) {
	o.AnonymizeResponseLogging = &v
}

// GetAttackMitigation returns the AttackMitigation field value if set, zero value otherwise.
func (o *GridDns) GetAttackMitigation() GridDnsAttackMitigation {
	if o == nil || IsNil(o.AttackMitigation) {
		var ret GridDnsAttackMitigation
		return ret
	}
	return *o.AttackMitigation
}

// GetAttackMitigationOk returns a tuple with the AttackMitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAttackMitigationOk() (*GridDnsAttackMitigation, bool) {
	if o == nil || IsNil(o.AttackMitigation) {
		return nil, false
	}
	return o.AttackMitigation, true
}

// HasAttackMitigation returns a boolean if a field has been set.
func (o *GridDns) HasAttackMitigation() bool {
	if o != nil && !IsNil(o.AttackMitigation) {
		return true
	}

	return false
}

// SetAttackMitigation gets a reference to the given GridDnsAttackMitigation and assigns it to the AttackMitigation field.
func (o *GridDns) SetAttackMitigation(v GridDnsAttackMitigation) {
	o.AttackMitigation = &v
}

// GetAutoBlackhole returns the AutoBlackhole field value if set, zero value otherwise.
func (o *GridDns) GetAutoBlackhole() GridDnsAutoBlackhole {
	if o == nil || IsNil(o.AutoBlackhole) {
		var ret GridDnsAutoBlackhole
		return ret
	}
	return *o.AutoBlackhole
}

// GetAutoBlackholeOk returns a tuple with the AutoBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetAutoBlackholeOk() (*GridDnsAutoBlackhole, bool) {
	if o == nil || IsNil(o.AutoBlackhole) {
		return nil, false
	}
	return o.AutoBlackhole, true
}

// HasAutoBlackhole returns a boolean if a field has been set.
func (o *GridDns) HasAutoBlackhole() bool {
	if o != nil && !IsNil(o.AutoBlackhole) {
		return true
	}

	return false
}

// SetAutoBlackhole gets a reference to the given GridDnsAutoBlackhole and assigns it to the AutoBlackhole field.
func (o *GridDns) SetAutoBlackhole(v GridDnsAutoBlackhole) {
	o.AutoBlackhole = &v
}

// GetBindCheckNamesPolicy returns the BindCheckNamesPolicy field value if set, zero value otherwise.
func (o *GridDns) GetBindCheckNamesPolicy() string {
	if o == nil || IsNil(o.BindCheckNamesPolicy) {
		var ret string
		return ret
	}
	return *o.BindCheckNamesPolicy
}

// GetBindCheckNamesPolicyOk returns a tuple with the BindCheckNamesPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBindCheckNamesPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.BindCheckNamesPolicy) {
		return nil, false
	}
	return o.BindCheckNamesPolicy, true
}

// HasBindCheckNamesPolicy returns a boolean if a field has been set.
func (o *GridDns) HasBindCheckNamesPolicy() bool {
	if o != nil && !IsNil(o.BindCheckNamesPolicy) {
		return true
	}

	return false
}

// SetBindCheckNamesPolicy gets a reference to the given string and assigns it to the BindCheckNamesPolicy field.
func (o *GridDns) SetBindCheckNamesPolicy(v string) {
	o.BindCheckNamesPolicy = &v
}

// GetBindHostnameDirective returns the BindHostnameDirective field value if set, zero value otherwise.
func (o *GridDns) GetBindHostnameDirective() string {
	if o == nil || IsNil(o.BindHostnameDirective) {
		var ret string
		return ret
	}
	return *o.BindHostnameDirective
}

// GetBindHostnameDirectiveOk returns a tuple with the BindHostnameDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBindHostnameDirectiveOk() (*string, bool) {
	if o == nil || IsNil(o.BindHostnameDirective) {
		return nil, false
	}
	return o.BindHostnameDirective, true
}

// HasBindHostnameDirective returns a boolean if a field has been set.
func (o *GridDns) HasBindHostnameDirective() bool {
	if o != nil && !IsNil(o.BindHostnameDirective) {
		return true
	}

	return false
}

// SetBindHostnameDirective gets a reference to the given string and assigns it to the BindHostnameDirective field.
func (o *GridDns) SetBindHostnameDirective(v string) {
	o.BindHostnameDirective = &v
}

// GetBlackholeList returns the BlackholeList field value if set, zero value otherwise.
func (o *GridDns) GetBlackholeList() []GridDnsBlackholeList {
	if o == nil || IsNil(o.BlackholeList) {
		var ret []GridDnsBlackholeList
		return ret
	}
	return o.BlackholeList
}

// GetBlackholeListOk returns a tuple with the BlackholeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlackholeListOk() ([]GridDnsBlackholeList, bool) {
	if o == nil || IsNil(o.BlackholeList) {
		return nil, false
	}
	return o.BlackholeList, true
}

// HasBlackholeList returns a boolean if a field has been set.
func (o *GridDns) HasBlackholeList() bool {
	if o != nil && !IsNil(o.BlackholeList) {
		return true
	}

	return false
}

// SetBlackholeList gets a reference to the given []GridDnsBlackholeList and assigns it to the BlackholeList field.
func (o *GridDns) SetBlackholeList(v []GridDnsBlackholeList) {
	o.BlackholeList = v
}

// GetBlacklistAction returns the BlacklistAction field value if set, zero value otherwise.
func (o *GridDns) GetBlacklistAction() string {
	if o == nil || IsNil(o.BlacklistAction) {
		var ret string
		return ret
	}
	return *o.BlacklistAction
}

// GetBlacklistActionOk returns a tuple with the BlacklistAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlacklistActionOk() (*string, bool) {
	if o == nil || IsNil(o.BlacklistAction) {
		return nil, false
	}
	return o.BlacklistAction, true
}

// HasBlacklistAction returns a boolean if a field has been set.
func (o *GridDns) HasBlacklistAction() bool {
	if o != nil && !IsNil(o.BlacklistAction) {
		return true
	}

	return false
}

// SetBlacklistAction gets a reference to the given string and assigns it to the BlacklistAction field.
func (o *GridDns) SetBlacklistAction(v string) {
	o.BlacklistAction = &v
}

// GetBlacklistLogQuery returns the BlacklistLogQuery field value if set, zero value otherwise.
func (o *GridDns) GetBlacklistLogQuery() bool {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		var ret bool
		return ret
	}
	return *o.BlacklistLogQuery
}

// GetBlacklistLogQueryOk returns a tuple with the BlacklistLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlacklistLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		return nil, false
	}
	return o.BlacklistLogQuery, true
}

// HasBlacklistLogQuery returns a boolean if a field has been set.
func (o *GridDns) HasBlacklistLogQuery() bool {
	if o != nil && !IsNil(o.BlacklistLogQuery) {
		return true
	}

	return false
}

// SetBlacklistLogQuery gets a reference to the given bool and assigns it to the BlacklistLogQuery field.
func (o *GridDns) SetBlacklistLogQuery(v bool) {
	o.BlacklistLogQuery = &v
}

// GetBlacklistRedirectAddresses returns the BlacklistRedirectAddresses field value if set, zero value otherwise.
func (o *GridDns) GetBlacklistRedirectAddresses() []string {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.BlacklistRedirectAddresses
}

// GetBlacklistRedirectAddressesOk returns a tuple with the BlacklistRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlacklistRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		return nil, false
	}
	return o.BlacklistRedirectAddresses, true
}

// HasBlacklistRedirectAddresses returns a boolean if a field has been set.
func (o *GridDns) HasBlacklistRedirectAddresses() bool {
	if o != nil && !IsNil(o.BlacklistRedirectAddresses) {
		return true
	}

	return false
}

// SetBlacklistRedirectAddresses gets a reference to the given []string and assigns it to the BlacklistRedirectAddresses field.
func (o *GridDns) SetBlacklistRedirectAddresses(v []string) {
	o.BlacklistRedirectAddresses = v
}

// GetBlacklistRedirectTtl returns the BlacklistRedirectTtl field value if set, zero value otherwise.
func (o *GridDns) GetBlacklistRedirectTtl() int64 {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.BlacklistRedirectTtl
}

// GetBlacklistRedirectTtlOk returns a tuple with the BlacklistRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlacklistRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		return nil, false
	}
	return o.BlacklistRedirectTtl, true
}

// HasBlacklistRedirectTtl returns a boolean if a field has been set.
func (o *GridDns) HasBlacklistRedirectTtl() bool {
	if o != nil && !IsNil(o.BlacklistRedirectTtl) {
		return true
	}

	return false
}

// SetBlacklistRedirectTtl gets a reference to the given int64 and assigns it to the BlacklistRedirectTtl field.
func (o *GridDns) SetBlacklistRedirectTtl(v int64) {
	o.BlacklistRedirectTtl = &v
}

// GetBlacklistRulesets returns the BlacklistRulesets field value if set, zero value otherwise.
func (o *GridDns) GetBlacklistRulesets() []string {
	if o == nil || IsNil(o.BlacklistRulesets) {
		var ret []string
		return ret
	}
	return o.BlacklistRulesets
}

// GetBlacklistRulesetsOk returns a tuple with the BlacklistRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBlacklistRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRulesets) {
		return nil, false
	}
	return o.BlacklistRulesets, true
}

// HasBlacklistRulesets returns a boolean if a field has been set.
func (o *GridDns) HasBlacklistRulesets() bool {
	if o != nil && !IsNil(o.BlacklistRulesets) {
		return true
	}

	return false
}

// SetBlacklistRulesets gets a reference to the given []string and assigns it to the BlacklistRulesets field.
func (o *GridDns) SetBlacklistRulesets(v []string) {
	o.BlacklistRulesets = v
}

// GetBulkHostNameTemplates returns the BulkHostNameTemplates field value if set, zero value otherwise.
func (o *GridDns) GetBulkHostNameTemplates() []string {
	if o == nil || IsNil(o.BulkHostNameTemplates) {
		var ret []string
		return ret
	}
	return o.BulkHostNameTemplates
}

// GetBulkHostNameTemplatesOk returns a tuple with the BulkHostNameTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetBulkHostNameTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.BulkHostNameTemplates) {
		return nil, false
	}
	return o.BulkHostNameTemplates, true
}

// HasBulkHostNameTemplates returns a boolean if a field has been set.
func (o *GridDns) HasBulkHostNameTemplates() bool {
	if o != nil && !IsNil(o.BulkHostNameTemplates) {
		return true
	}

	return false
}

// SetBulkHostNameTemplates gets a reference to the given []string and assigns it to the BulkHostNameTemplates field.
func (o *GridDns) SetBulkHostNameTemplates(v []string) {
	o.BulkHostNameTemplates = v
}

// GetCaptureDnsQueriesOnAllDomains returns the CaptureDnsQueriesOnAllDomains field value if set, zero value otherwise.
func (o *GridDns) GetCaptureDnsQueriesOnAllDomains() bool {
	if o == nil || IsNil(o.CaptureDnsQueriesOnAllDomains) {
		var ret bool
		return ret
	}
	return *o.CaptureDnsQueriesOnAllDomains
}

// GetCaptureDnsQueriesOnAllDomainsOk returns a tuple with the CaptureDnsQueriesOnAllDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetCaptureDnsQueriesOnAllDomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptureDnsQueriesOnAllDomains) {
		return nil, false
	}
	return o.CaptureDnsQueriesOnAllDomains, true
}

// HasCaptureDnsQueriesOnAllDomains returns a boolean if a field has been set.
func (o *GridDns) HasCaptureDnsQueriesOnAllDomains() bool {
	if o != nil && !IsNil(o.CaptureDnsQueriesOnAllDomains) {
		return true
	}

	return false
}

// SetCaptureDnsQueriesOnAllDomains gets a reference to the given bool and assigns it to the CaptureDnsQueriesOnAllDomains field.
func (o *GridDns) SetCaptureDnsQueriesOnAllDomains(v bool) {
	o.CaptureDnsQueriesOnAllDomains = &v
}

// GetCheckNamesForDdnsAndZoneTransfer returns the CheckNamesForDdnsAndZoneTransfer field value if set, zero value otherwise.
func (o *GridDns) GetCheckNamesForDdnsAndZoneTransfer() bool {
	if o == nil || IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		var ret bool
		return ret
	}
	return *o.CheckNamesForDdnsAndZoneTransfer
}

// GetCheckNamesForDdnsAndZoneTransferOk returns a tuple with the CheckNamesForDdnsAndZoneTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetCheckNamesForDdnsAndZoneTransferOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		return nil, false
	}
	return o.CheckNamesForDdnsAndZoneTransfer, true
}

// HasCheckNamesForDdnsAndZoneTransfer returns a boolean if a field has been set.
func (o *GridDns) HasCheckNamesForDdnsAndZoneTransfer() bool {
	if o != nil && !IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		return true
	}

	return false
}

// SetCheckNamesForDdnsAndZoneTransfer gets a reference to the given bool and assigns it to the CheckNamesForDdnsAndZoneTransfer field.
func (o *GridDns) SetCheckNamesForDdnsAndZoneTransfer(v bool) {
	o.CheckNamesForDdnsAndZoneTransfer = &v
}

// GetClientSubnetDomains returns the ClientSubnetDomains field value if set, zero value otherwise.
func (o *GridDns) GetClientSubnetDomains() []GridDnsClientSubnetDomains {
	if o == nil || IsNil(o.ClientSubnetDomains) {
		var ret []GridDnsClientSubnetDomains
		return ret
	}
	return o.ClientSubnetDomains
}

// GetClientSubnetDomainsOk returns a tuple with the ClientSubnetDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetClientSubnetDomainsOk() ([]GridDnsClientSubnetDomains, bool) {
	if o == nil || IsNil(o.ClientSubnetDomains) {
		return nil, false
	}
	return o.ClientSubnetDomains, true
}

// HasClientSubnetDomains returns a boolean if a field has been set.
func (o *GridDns) HasClientSubnetDomains() bool {
	if o != nil && !IsNil(o.ClientSubnetDomains) {
		return true
	}

	return false
}

// SetClientSubnetDomains gets a reference to the given []GridDnsClientSubnetDomains and assigns it to the ClientSubnetDomains field.
func (o *GridDns) SetClientSubnetDomains(v []GridDnsClientSubnetDomains) {
	o.ClientSubnetDomains = v
}

// GetClientSubnetIpv4PrefixLength returns the ClientSubnetIpv4PrefixLength field value if set, zero value otherwise.
func (o *GridDns) GetClientSubnetIpv4PrefixLength() int64 {
	if o == nil || IsNil(o.ClientSubnetIpv4PrefixLength) {
		var ret int64
		return ret
	}
	return *o.ClientSubnetIpv4PrefixLength
}

// GetClientSubnetIpv4PrefixLengthOk returns a tuple with the ClientSubnetIpv4PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetClientSubnetIpv4PrefixLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientSubnetIpv4PrefixLength) {
		return nil, false
	}
	return o.ClientSubnetIpv4PrefixLength, true
}

// HasClientSubnetIpv4PrefixLength returns a boolean if a field has been set.
func (o *GridDns) HasClientSubnetIpv4PrefixLength() bool {
	if o != nil && !IsNil(o.ClientSubnetIpv4PrefixLength) {
		return true
	}

	return false
}

// SetClientSubnetIpv4PrefixLength gets a reference to the given int64 and assigns it to the ClientSubnetIpv4PrefixLength field.
func (o *GridDns) SetClientSubnetIpv4PrefixLength(v int64) {
	o.ClientSubnetIpv4PrefixLength = &v
}

// GetClientSubnetIpv6PrefixLength returns the ClientSubnetIpv6PrefixLength field value if set, zero value otherwise.
func (o *GridDns) GetClientSubnetIpv6PrefixLength() int64 {
	if o == nil || IsNil(o.ClientSubnetIpv6PrefixLength) {
		var ret int64
		return ret
	}
	return *o.ClientSubnetIpv6PrefixLength
}

// GetClientSubnetIpv6PrefixLengthOk returns a tuple with the ClientSubnetIpv6PrefixLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetClientSubnetIpv6PrefixLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientSubnetIpv6PrefixLength) {
		return nil, false
	}
	return o.ClientSubnetIpv6PrefixLength, true
}

// HasClientSubnetIpv6PrefixLength returns a boolean if a field has been set.
func (o *GridDns) HasClientSubnetIpv6PrefixLength() bool {
	if o != nil && !IsNil(o.ClientSubnetIpv6PrefixLength) {
		return true
	}

	return false
}

// SetClientSubnetIpv6PrefixLength gets a reference to the given int64 and assigns it to the ClientSubnetIpv6PrefixLength field.
func (o *GridDns) SetClientSubnetIpv6PrefixLength(v int64) {
	o.ClientSubnetIpv6PrefixLength = &v
}

// GetCopyClientIpMacOptions returns the CopyClientIpMacOptions field value if set, zero value otherwise.
func (o *GridDns) GetCopyClientIpMacOptions() bool {
	if o == nil || IsNil(o.CopyClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.CopyClientIpMacOptions
}

// GetCopyClientIpMacOptionsOk returns a tuple with the CopyClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetCopyClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyClientIpMacOptions) {
		return nil, false
	}
	return o.CopyClientIpMacOptions, true
}

// HasCopyClientIpMacOptions returns a boolean if a field has been set.
func (o *GridDns) HasCopyClientIpMacOptions() bool {
	if o != nil && !IsNil(o.CopyClientIpMacOptions) {
		return true
	}

	return false
}

// SetCopyClientIpMacOptions gets a reference to the given bool and assigns it to the CopyClientIpMacOptions field.
func (o *GridDns) SetCopyClientIpMacOptions(v bool) {
	o.CopyClientIpMacOptions = &v
}

// GetCopyXferToNotify returns the CopyXferToNotify field value if set, zero value otherwise.
func (o *GridDns) GetCopyXferToNotify() bool {
	if o == nil || IsNil(o.CopyXferToNotify) {
		var ret bool
		return ret
	}
	return *o.CopyXferToNotify
}

// GetCopyXferToNotifyOk returns a tuple with the CopyXferToNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetCopyXferToNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyXferToNotify) {
		return nil, false
	}
	return o.CopyXferToNotify, true
}

// HasCopyXferToNotify returns a boolean if a field has been set.
func (o *GridDns) HasCopyXferToNotify() bool {
	if o != nil && !IsNil(o.CopyXferToNotify) {
		return true
	}

	return false
}

// SetCopyXferToNotify gets a reference to the given bool and assigns it to the CopyXferToNotify field.
func (o *GridDns) SetCopyXferToNotify(v bool) {
	o.CopyXferToNotify = &v
}

// GetCustomRootNameServers returns the CustomRootNameServers field value if set, zero value otherwise.
func (o *GridDns) GetCustomRootNameServers() []GridDnsCustomRootNameServers {
	if o == nil || IsNil(o.CustomRootNameServers) {
		var ret []GridDnsCustomRootNameServers
		return ret
	}
	return o.CustomRootNameServers
}

// GetCustomRootNameServersOk returns a tuple with the CustomRootNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetCustomRootNameServersOk() ([]GridDnsCustomRootNameServers, bool) {
	if o == nil || IsNil(o.CustomRootNameServers) {
		return nil, false
	}
	return o.CustomRootNameServers, true
}

// HasCustomRootNameServers returns a boolean if a field has been set.
func (o *GridDns) HasCustomRootNameServers() bool {
	if o != nil && !IsNil(o.CustomRootNameServers) {
		return true
	}

	return false
}

// SetCustomRootNameServers gets a reference to the given []GridDnsCustomRootNameServers and assigns it to the CustomRootNameServers field.
func (o *GridDns) SetCustomRootNameServers(v []GridDnsCustomRootNameServers) {
	o.CustomRootNameServers = v
}

// GetDdnsForceCreationTimestampUpdate returns the DdnsForceCreationTimestampUpdate field value if set, zero value otherwise.
func (o *GridDns) GetDdnsForceCreationTimestampUpdate() bool {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		var ret bool
		return ret
	}
	return *o.DdnsForceCreationTimestampUpdate
}

// GetDdnsForceCreationTimestampUpdateOk returns a tuple with the DdnsForceCreationTimestampUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsForceCreationTimestampUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		return nil, false
	}
	return o.DdnsForceCreationTimestampUpdate, true
}

// HasDdnsForceCreationTimestampUpdate returns a boolean if a field has been set.
func (o *GridDns) HasDdnsForceCreationTimestampUpdate() bool {
	if o != nil && !IsNil(o.DdnsForceCreationTimestampUpdate) {
		return true
	}

	return false
}

// SetDdnsForceCreationTimestampUpdate gets a reference to the given bool and assigns it to the DdnsForceCreationTimestampUpdate field.
func (o *GridDns) SetDdnsForceCreationTimestampUpdate(v bool) {
	o.DdnsForceCreationTimestampUpdate = &v
}

// GetDdnsPrincipalGroup returns the DdnsPrincipalGroup field value if set, zero value otherwise.
func (o *GridDns) GetDdnsPrincipalGroup() string {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipalGroup
}

// GetDdnsPrincipalGroupOk returns a tuple with the DdnsPrincipalGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsPrincipalGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		return nil, false
	}
	return o.DdnsPrincipalGroup, true
}

// HasDdnsPrincipalGroup returns a boolean if a field has been set.
func (o *GridDns) HasDdnsPrincipalGroup() bool {
	if o != nil && !IsNil(o.DdnsPrincipalGroup) {
		return true
	}

	return false
}

// SetDdnsPrincipalGroup gets a reference to the given string and assigns it to the DdnsPrincipalGroup field.
func (o *GridDns) SetDdnsPrincipalGroup(v string) {
	o.DdnsPrincipalGroup = &v
}

// GetDdnsPrincipalTracking returns the DdnsPrincipalTracking field value if set, zero value otherwise.
func (o *GridDns) GetDdnsPrincipalTracking() bool {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		var ret bool
		return ret
	}
	return *o.DdnsPrincipalTracking
}

// GetDdnsPrincipalTrackingOk returns a tuple with the DdnsPrincipalTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsPrincipalTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		return nil, false
	}
	return o.DdnsPrincipalTracking, true
}

// HasDdnsPrincipalTracking returns a boolean if a field has been set.
func (o *GridDns) HasDdnsPrincipalTracking() bool {
	if o != nil && !IsNil(o.DdnsPrincipalTracking) {
		return true
	}

	return false
}

// SetDdnsPrincipalTracking gets a reference to the given bool and assigns it to the DdnsPrincipalTracking field.
func (o *GridDns) SetDdnsPrincipalTracking(v bool) {
	o.DdnsPrincipalTracking = &v
}

// GetDdnsRestrictPatterns returns the DdnsRestrictPatterns field value if set, zero value otherwise.
func (o *GridDns) GetDdnsRestrictPatterns() bool {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictPatterns
}

// GetDdnsRestrictPatternsOk returns a tuple with the DdnsRestrictPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsRestrictPatternsOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		return nil, false
	}
	return o.DdnsRestrictPatterns, true
}

// HasDdnsRestrictPatterns returns a boolean if a field has been set.
func (o *GridDns) HasDdnsRestrictPatterns() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatterns) {
		return true
	}

	return false
}

// SetDdnsRestrictPatterns gets a reference to the given bool and assigns it to the DdnsRestrictPatterns field.
func (o *GridDns) SetDdnsRestrictPatterns(v bool) {
	o.DdnsRestrictPatterns = &v
}

// GetDdnsRestrictPatternsList returns the DdnsRestrictPatternsList field value if set, zero value otherwise.
func (o *GridDns) GetDdnsRestrictPatternsList() []string {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		var ret []string
		return ret
	}
	return o.DdnsRestrictPatternsList
}

// GetDdnsRestrictPatternsListOk returns a tuple with the DdnsRestrictPatternsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsRestrictPatternsListOk() ([]string, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		return nil, false
	}
	return o.DdnsRestrictPatternsList, true
}

// HasDdnsRestrictPatternsList returns a boolean if a field has been set.
func (o *GridDns) HasDdnsRestrictPatternsList() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatternsList) {
		return true
	}

	return false
}

// SetDdnsRestrictPatternsList gets a reference to the given []string and assigns it to the DdnsRestrictPatternsList field.
func (o *GridDns) SetDdnsRestrictPatternsList(v []string) {
	o.DdnsRestrictPatternsList = v
}

// GetDdnsRestrictProtected returns the DdnsRestrictProtected field value if set, zero value otherwise.
func (o *GridDns) GetDdnsRestrictProtected() bool {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictProtected
}

// GetDdnsRestrictProtectedOk returns a tuple with the DdnsRestrictProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsRestrictProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		return nil, false
	}
	return o.DdnsRestrictProtected, true
}

// HasDdnsRestrictProtected returns a boolean if a field has been set.
func (o *GridDns) HasDdnsRestrictProtected() bool {
	if o != nil && !IsNil(o.DdnsRestrictProtected) {
		return true
	}

	return false
}

// SetDdnsRestrictProtected gets a reference to the given bool and assigns it to the DdnsRestrictProtected field.
func (o *GridDns) SetDdnsRestrictProtected(v bool) {
	o.DdnsRestrictProtected = &v
}

// GetDdnsRestrictSecure returns the DdnsRestrictSecure field value if set, zero value otherwise.
func (o *GridDns) GetDdnsRestrictSecure() bool {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictSecure
}

// GetDdnsRestrictSecureOk returns a tuple with the DdnsRestrictSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsRestrictSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		return nil, false
	}
	return o.DdnsRestrictSecure, true
}

// HasDdnsRestrictSecure returns a boolean if a field has been set.
func (o *GridDns) HasDdnsRestrictSecure() bool {
	if o != nil && !IsNil(o.DdnsRestrictSecure) {
		return true
	}

	return false
}

// SetDdnsRestrictSecure gets a reference to the given bool and assigns it to the DdnsRestrictSecure field.
func (o *GridDns) SetDdnsRestrictSecure(v bool) {
	o.DdnsRestrictSecure = &v
}

// GetDdnsRestrictStatic returns the DdnsRestrictStatic field value if set, zero value otherwise.
func (o *GridDns) GetDdnsRestrictStatic() bool {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictStatic
}

// GetDdnsRestrictStaticOk returns a tuple with the DdnsRestrictStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDdnsRestrictStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		return nil, false
	}
	return o.DdnsRestrictStatic, true
}

// HasDdnsRestrictStatic returns a boolean if a field has been set.
func (o *GridDns) HasDdnsRestrictStatic() bool {
	if o != nil && !IsNil(o.DdnsRestrictStatic) {
		return true
	}

	return false
}

// SetDdnsRestrictStatic gets a reference to the given bool and assigns it to the DdnsRestrictStatic field.
func (o *GridDns) SetDdnsRestrictStatic(v bool) {
	o.DdnsRestrictStatic = &v
}

// GetDefaultBulkHostNameTemplate returns the DefaultBulkHostNameTemplate field value if set, zero value otherwise.
func (o *GridDns) GetDefaultBulkHostNameTemplate() string {
	if o == nil || IsNil(o.DefaultBulkHostNameTemplate) {
		var ret string
		return ret
	}
	return *o.DefaultBulkHostNameTemplate
}

// GetDefaultBulkHostNameTemplateOk returns a tuple with the DefaultBulkHostNameTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDefaultBulkHostNameTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBulkHostNameTemplate) {
		return nil, false
	}
	return o.DefaultBulkHostNameTemplate, true
}

// HasDefaultBulkHostNameTemplate returns a boolean if a field has been set.
func (o *GridDns) HasDefaultBulkHostNameTemplate() bool {
	if o != nil && !IsNil(o.DefaultBulkHostNameTemplate) {
		return true
	}

	return false
}

// SetDefaultBulkHostNameTemplate gets a reference to the given string and assigns it to the DefaultBulkHostNameTemplate field.
func (o *GridDns) SetDefaultBulkHostNameTemplate(v string) {
	o.DefaultBulkHostNameTemplate = &v
}

// GetDefaultTtl returns the DefaultTtl field value if set, zero value otherwise.
func (o *GridDns) GetDefaultTtl() int64 {
	if o == nil || IsNil(o.DefaultTtl) {
		var ret int64
		return ret
	}
	return *o.DefaultTtl
}

// GetDefaultTtlOk returns a tuple with the DefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDefaultTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultTtl) {
		return nil, false
	}
	return o.DefaultTtl, true
}

// HasDefaultTtl returns a boolean if a field has been set.
func (o *GridDns) HasDefaultTtl() bool {
	if o != nil && !IsNil(o.DefaultTtl) {
		return true
	}

	return false
}

// SetDefaultTtl gets a reference to the given int64 and assigns it to the DefaultTtl field.
func (o *GridDns) SetDefaultTtl(v int64) {
	o.DefaultTtl = &v
}

// GetDisableEdns returns the DisableEdns field value if set, zero value otherwise.
func (o *GridDns) GetDisableEdns() bool {
	if o == nil || IsNil(o.DisableEdns) {
		var ret bool
		return ret
	}
	return *o.DisableEdns
}

// GetDisableEdnsOk returns a tuple with the DisableEdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDisableEdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableEdns) {
		return nil, false
	}
	return o.DisableEdns, true
}

// HasDisableEdns returns a boolean if a field has been set.
func (o *GridDns) HasDisableEdns() bool {
	if o != nil && !IsNil(o.DisableEdns) {
		return true
	}

	return false
}

// SetDisableEdns gets a reference to the given bool and assigns it to the DisableEdns field.
func (o *GridDns) SetDisableEdns(v bool) {
	o.DisableEdns = &v
}

// GetDns64Groups returns the Dns64Groups field value if set, zero value otherwise.
func (o *GridDns) GetDns64Groups() []string {
	if o == nil || IsNil(o.Dns64Groups) {
		var ret []string
		return ret
	}
	return o.Dns64Groups
}

// GetDns64GroupsOk returns a tuple with the Dns64Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDns64GroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dns64Groups) {
		return nil, false
	}
	return o.Dns64Groups, true
}

// HasDns64Groups returns a boolean if a field has been set.
func (o *GridDns) HasDns64Groups() bool {
	if o != nil && !IsNil(o.Dns64Groups) {
		return true
	}

	return false
}

// SetDns64Groups gets a reference to the given []string and assigns it to the Dns64Groups field.
func (o *GridDns) SetDns64Groups(v []string) {
	o.Dns64Groups = v
}

// GetDnsCacheAccelerationTtl returns the DnsCacheAccelerationTtl field value if set, zero value otherwise.
func (o *GridDns) GetDnsCacheAccelerationTtl() int64 {
	if o == nil || IsNil(o.DnsCacheAccelerationTtl) {
		var ret int64
		return ret
	}
	return *o.DnsCacheAccelerationTtl
}

// GetDnsCacheAccelerationTtlOk returns a tuple with the DnsCacheAccelerationTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsCacheAccelerationTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsCacheAccelerationTtl) {
		return nil, false
	}
	return o.DnsCacheAccelerationTtl, true
}

// HasDnsCacheAccelerationTtl returns a boolean if a field has been set.
func (o *GridDns) HasDnsCacheAccelerationTtl() bool {
	if o != nil && !IsNil(o.DnsCacheAccelerationTtl) {
		return true
	}

	return false
}

// SetDnsCacheAccelerationTtl gets a reference to the given int64 and assigns it to the DnsCacheAccelerationTtl field.
func (o *GridDns) SetDnsCacheAccelerationTtl(v int64) {
	o.DnsCacheAccelerationTtl = &v
}

// GetDnsHealthCheckAnycastControl returns the DnsHealthCheckAnycastControl field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckAnycastControl() bool {
	if o == nil || IsNil(o.DnsHealthCheckAnycastControl) {
		var ret bool
		return ret
	}
	return *o.DnsHealthCheckAnycastControl
}

// GetDnsHealthCheckAnycastControlOk returns a tuple with the DnsHealthCheckAnycastControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckAnycastControlOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsHealthCheckAnycastControl) {
		return nil, false
	}
	return o.DnsHealthCheckAnycastControl, true
}

// HasDnsHealthCheckAnycastControl returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckAnycastControl() bool {
	if o != nil && !IsNil(o.DnsHealthCheckAnycastControl) {
		return true
	}

	return false
}

// SetDnsHealthCheckAnycastControl gets a reference to the given bool and assigns it to the DnsHealthCheckAnycastControl field.
func (o *GridDns) SetDnsHealthCheckAnycastControl(v bool) {
	o.DnsHealthCheckAnycastControl = &v
}

// GetDnsHealthCheckDomainList returns the DnsHealthCheckDomainList field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckDomainList() []string {
	if o == nil || IsNil(o.DnsHealthCheckDomainList) {
		var ret []string
		return ret
	}
	return o.DnsHealthCheckDomainList
}

// GetDnsHealthCheckDomainListOk returns a tuple with the DnsHealthCheckDomainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckDomainListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsHealthCheckDomainList) {
		return nil, false
	}
	return o.DnsHealthCheckDomainList, true
}

// HasDnsHealthCheckDomainList returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckDomainList() bool {
	if o != nil && !IsNil(o.DnsHealthCheckDomainList) {
		return true
	}

	return false
}

// SetDnsHealthCheckDomainList gets a reference to the given []string and assigns it to the DnsHealthCheckDomainList field.
func (o *GridDns) SetDnsHealthCheckDomainList(v []string) {
	o.DnsHealthCheckDomainList = v
}

// GetDnsHealthCheckInterval returns the DnsHealthCheckInterval field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckInterval() int64 {
	if o == nil || IsNil(o.DnsHealthCheckInterval) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckInterval
}

// GetDnsHealthCheckIntervalOk returns a tuple with the DnsHealthCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckInterval) {
		return nil, false
	}
	return o.DnsHealthCheckInterval, true
}

// HasDnsHealthCheckInterval returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckInterval() bool {
	if o != nil && !IsNil(o.DnsHealthCheckInterval) {
		return true
	}

	return false
}

// SetDnsHealthCheckInterval gets a reference to the given int64 and assigns it to the DnsHealthCheckInterval field.
func (o *GridDns) SetDnsHealthCheckInterval(v int64) {
	o.DnsHealthCheckInterval = &v
}

// GetDnsHealthCheckRecursionFlag returns the DnsHealthCheckRecursionFlag field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckRecursionFlag() bool {
	if o == nil || IsNil(o.DnsHealthCheckRecursionFlag) {
		var ret bool
		return ret
	}
	return *o.DnsHealthCheckRecursionFlag
}

// GetDnsHealthCheckRecursionFlagOk returns a tuple with the DnsHealthCheckRecursionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckRecursionFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsHealthCheckRecursionFlag) {
		return nil, false
	}
	return o.DnsHealthCheckRecursionFlag, true
}

// HasDnsHealthCheckRecursionFlag returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckRecursionFlag() bool {
	if o != nil && !IsNil(o.DnsHealthCheckRecursionFlag) {
		return true
	}

	return false
}

// SetDnsHealthCheckRecursionFlag gets a reference to the given bool and assigns it to the DnsHealthCheckRecursionFlag field.
func (o *GridDns) SetDnsHealthCheckRecursionFlag(v bool) {
	o.DnsHealthCheckRecursionFlag = &v
}

// GetDnsHealthCheckRetries returns the DnsHealthCheckRetries field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckRetries() int64 {
	if o == nil || IsNil(o.DnsHealthCheckRetries) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckRetries
}

// GetDnsHealthCheckRetriesOk returns a tuple with the DnsHealthCheckRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckRetriesOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckRetries) {
		return nil, false
	}
	return o.DnsHealthCheckRetries, true
}

// HasDnsHealthCheckRetries returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckRetries() bool {
	if o != nil && !IsNil(o.DnsHealthCheckRetries) {
		return true
	}

	return false
}

// SetDnsHealthCheckRetries gets a reference to the given int64 and assigns it to the DnsHealthCheckRetries field.
func (o *GridDns) SetDnsHealthCheckRetries(v int64) {
	o.DnsHealthCheckRetries = &v
}

// GetDnsHealthCheckTimeout returns the DnsHealthCheckTimeout field value if set, zero value otherwise.
func (o *GridDns) GetDnsHealthCheckTimeout() int64 {
	if o == nil || IsNil(o.DnsHealthCheckTimeout) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckTimeout
}

// GetDnsHealthCheckTimeoutOk returns a tuple with the DnsHealthCheckTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsHealthCheckTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckTimeout) {
		return nil, false
	}
	return o.DnsHealthCheckTimeout, true
}

// HasDnsHealthCheckTimeout returns a boolean if a field has been set.
func (o *GridDns) HasDnsHealthCheckTimeout() bool {
	if o != nil && !IsNil(o.DnsHealthCheckTimeout) {
		return true
	}

	return false
}

// SetDnsHealthCheckTimeout gets a reference to the given int64 and assigns it to the DnsHealthCheckTimeout field.
func (o *GridDns) SetDnsHealthCheckTimeout(v int64) {
	o.DnsHealthCheckTimeout = &v
}

// GetDnsQueryCaptureFileTimeLimit returns the DnsQueryCaptureFileTimeLimit field value if set, zero value otherwise.
func (o *GridDns) GetDnsQueryCaptureFileTimeLimit() int64 {
	if o == nil || IsNil(o.DnsQueryCaptureFileTimeLimit) {
		var ret int64
		return ret
	}
	return *o.DnsQueryCaptureFileTimeLimit
}

// GetDnsQueryCaptureFileTimeLimitOk returns a tuple with the DnsQueryCaptureFileTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnsQueryCaptureFileTimeLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsQueryCaptureFileTimeLimit) {
		return nil, false
	}
	return o.DnsQueryCaptureFileTimeLimit, true
}

// HasDnsQueryCaptureFileTimeLimit returns a boolean if a field has been set.
func (o *GridDns) HasDnsQueryCaptureFileTimeLimit() bool {
	if o != nil && !IsNil(o.DnsQueryCaptureFileTimeLimit) {
		return true
	}

	return false
}

// SetDnsQueryCaptureFileTimeLimit gets a reference to the given int64 and assigns it to the DnsQueryCaptureFileTimeLimit field.
func (o *GridDns) SetDnsQueryCaptureFileTimeLimit(v int64) {
	o.DnsQueryCaptureFileTimeLimit = &v
}

// GetDnssecBlacklistEnabled returns the DnssecBlacklistEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecBlacklistEnabled() bool {
	if o == nil || IsNil(o.DnssecBlacklistEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecBlacklistEnabled
}

// GetDnssecBlacklistEnabledOk returns a tuple with the DnssecBlacklistEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecBlacklistEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecBlacklistEnabled) {
		return nil, false
	}
	return o.DnssecBlacklistEnabled, true
}

// HasDnssecBlacklistEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecBlacklistEnabled() bool {
	if o != nil && !IsNil(o.DnssecBlacklistEnabled) {
		return true
	}

	return false
}

// SetDnssecBlacklistEnabled gets a reference to the given bool and assigns it to the DnssecBlacklistEnabled field.
func (o *GridDns) SetDnssecBlacklistEnabled(v bool) {
	o.DnssecBlacklistEnabled = &v
}

// GetDnssecDns64Enabled returns the DnssecDns64Enabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecDns64Enabled() bool {
	if o == nil || IsNil(o.DnssecDns64Enabled) {
		var ret bool
		return ret
	}
	return *o.DnssecDns64Enabled
}

// GetDnssecDns64EnabledOk returns a tuple with the DnssecDns64Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecDns64EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecDns64Enabled) {
		return nil, false
	}
	return o.DnssecDns64Enabled, true
}

// HasDnssecDns64Enabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecDns64Enabled() bool {
	if o != nil && !IsNil(o.DnssecDns64Enabled) {
		return true
	}

	return false
}

// SetDnssecDns64Enabled gets a reference to the given bool and assigns it to the DnssecDns64Enabled field.
func (o *GridDns) SetDnssecDns64Enabled(v bool) {
	o.DnssecDns64Enabled = &v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecEnabled() bool {
	if o == nil || IsNil(o.DnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnabled) {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecEnabled() bool {
	if o != nil && !IsNil(o.DnssecEnabled) {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *GridDns) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetDnssecExpiredSignaturesEnabled returns the DnssecExpiredSignaturesEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecExpiredSignaturesEnabled() bool {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecExpiredSignaturesEnabled
}

// GetDnssecExpiredSignaturesEnabledOk returns a tuple with the DnssecExpiredSignaturesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecExpiredSignaturesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		return nil, false
	}
	return o.DnssecExpiredSignaturesEnabled, true
}

// HasDnssecExpiredSignaturesEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecExpiredSignaturesEnabled() bool {
	if o != nil && !IsNil(o.DnssecExpiredSignaturesEnabled) {
		return true
	}

	return false
}

// SetDnssecExpiredSignaturesEnabled gets a reference to the given bool and assigns it to the DnssecExpiredSignaturesEnabled field.
func (o *GridDns) SetDnssecExpiredSignaturesEnabled(v bool) {
	o.DnssecExpiredSignaturesEnabled = &v
}

// GetDnssecKeyParams returns the DnssecKeyParams field value if set, zero value otherwise.
func (o *GridDns) GetDnssecKeyParams() GridDnsDnssecKeyParams {
	if o == nil || IsNil(o.DnssecKeyParams) {
		var ret GridDnsDnssecKeyParams
		return ret
	}
	return *o.DnssecKeyParams
}

// GetDnssecKeyParamsOk returns a tuple with the DnssecKeyParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecKeyParamsOk() (*GridDnsDnssecKeyParams, bool) {
	if o == nil || IsNil(o.DnssecKeyParams) {
		return nil, false
	}
	return o.DnssecKeyParams, true
}

// HasDnssecKeyParams returns a boolean if a field has been set.
func (o *GridDns) HasDnssecKeyParams() bool {
	if o != nil && !IsNil(o.DnssecKeyParams) {
		return true
	}

	return false
}

// SetDnssecKeyParams gets a reference to the given GridDnsDnssecKeyParams and assigns it to the DnssecKeyParams field.
func (o *GridDns) SetDnssecKeyParams(v GridDnsDnssecKeyParams) {
	o.DnssecKeyParams = &v
}

// GetDnssecNegativeTrustAnchors returns the DnssecNegativeTrustAnchors field value if set, zero value otherwise.
func (o *GridDns) GetDnssecNegativeTrustAnchors() []string {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		var ret []string
		return ret
	}
	return o.DnssecNegativeTrustAnchors
}

// GetDnssecNegativeTrustAnchorsOk returns a tuple with the DnssecNegativeTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecNegativeTrustAnchorsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		return nil, false
	}
	return o.DnssecNegativeTrustAnchors, true
}

// HasDnssecNegativeTrustAnchors returns a boolean if a field has been set.
func (o *GridDns) HasDnssecNegativeTrustAnchors() bool {
	if o != nil && !IsNil(o.DnssecNegativeTrustAnchors) {
		return true
	}

	return false
}

// SetDnssecNegativeTrustAnchors gets a reference to the given []string and assigns it to the DnssecNegativeTrustAnchors field.
func (o *GridDns) SetDnssecNegativeTrustAnchors(v []string) {
	o.DnssecNegativeTrustAnchors = v
}

// GetDnssecNxdomainEnabled returns the DnssecNxdomainEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecNxdomainEnabled() bool {
	if o == nil || IsNil(o.DnssecNxdomainEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecNxdomainEnabled
}

// GetDnssecNxdomainEnabledOk returns a tuple with the DnssecNxdomainEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecNxdomainEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecNxdomainEnabled) {
		return nil, false
	}
	return o.DnssecNxdomainEnabled, true
}

// HasDnssecNxdomainEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecNxdomainEnabled() bool {
	if o != nil && !IsNil(o.DnssecNxdomainEnabled) {
		return true
	}

	return false
}

// SetDnssecNxdomainEnabled gets a reference to the given bool and assigns it to the DnssecNxdomainEnabled field.
func (o *GridDns) SetDnssecNxdomainEnabled(v bool) {
	o.DnssecNxdomainEnabled = &v
}

// GetDnssecRpzEnabled returns the DnssecRpzEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecRpzEnabled() bool {
	if o == nil || IsNil(o.DnssecRpzEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecRpzEnabled
}

// GetDnssecRpzEnabledOk returns a tuple with the DnssecRpzEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecRpzEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecRpzEnabled) {
		return nil, false
	}
	return o.DnssecRpzEnabled, true
}

// HasDnssecRpzEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecRpzEnabled() bool {
	if o != nil && !IsNil(o.DnssecRpzEnabled) {
		return true
	}

	return false
}

// SetDnssecRpzEnabled gets a reference to the given bool and assigns it to the DnssecRpzEnabled field.
func (o *GridDns) SetDnssecRpzEnabled(v bool) {
	o.DnssecRpzEnabled = &v
}

// GetDnssecTrustedKeys returns the DnssecTrustedKeys field value if set, zero value otherwise.
func (o *GridDns) GetDnssecTrustedKeys() []GridDnsDnssecTrustedKeys {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		var ret []GridDnsDnssecTrustedKeys
		return ret
	}
	return o.DnssecTrustedKeys
}

// GetDnssecTrustedKeysOk returns a tuple with the DnssecTrustedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecTrustedKeysOk() ([]GridDnsDnssecTrustedKeys, bool) {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		return nil, false
	}
	return o.DnssecTrustedKeys, true
}

// HasDnssecTrustedKeys returns a boolean if a field has been set.
func (o *GridDns) HasDnssecTrustedKeys() bool {
	if o != nil && !IsNil(o.DnssecTrustedKeys) {
		return true
	}

	return false
}

// SetDnssecTrustedKeys gets a reference to the given []GridDnsDnssecTrustedKeys and assigns it to the DnssecTrustedKeys field.
func (o *GridDns) SetDnssecTrustedKeys(v []GridDnsDnssecTrustedKeys) {
	o.DnssecTrustedKeys = v
}

// GetDnssecValidationEnabled returns the DnssecValidationEnabled field value if set, zero value otherwise.
func (o *GridDns) GetDnssecValidationEnabled() bool {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecValidationEnabled
}

// GetDnssecValidationEnabledOk returns a tuple with the DnssecValidationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnssecValidationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		return nil, false
	}
	return o.DnssecValidationEnabled, true
}

// HasDnssecValidationEnabled returns a boolean if a field has been set.
func (o *GridDns) HasDnssecValidationEnabled() bool {
	if o != nil && !IsNil(o.DnssecValidationEnabled) {
		return true
	}

	return false
}

// SetDnssecValidationEnabled gets a reference to the given bool and assigns it to the DnssecValidationEnabled field.
func (o *GridDns) SetDnssecValidationEnabled(v bool) {
	o.DnssecValidationEnabled = &v
}

// GetDnstapSetting returns the DnstapSetting field value if set, zero value otherwise.
func (o *GridDns) GetDnstapSetting() GridDnsDnstapSetting {
	if o == nil || IsNil(o.DnstapSetting) {
		var ret GridDnsDnstapSetting
		return ret
	}
	return *o.DnstapSetting
}

// GetDnstapSettingOk returns a tuple with the DnstapSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDnstapSettingOk() (*GridDnsDnstapSetting, bool) {
	if o == nil || IsNil(o.DnstapSetting) {
		return nil, false
	}
	return o.DnstapSetting, true
}

// HasDnstapSetting returns a boolean if a field has been set.
func (o *GridDns) HasDnstapSetting() bool {
	if o != nil && !IsNil(o.DnstapSetting) {
		return true
	}

	return false
}

// SetDnstapSetting gets a reference to the given GridDnsDnstapSetting and assigns it to the DnstapSetting field.
func (o *GridDns) SetDnstapSetting(v GridDnsDnstapSetting) {
	o.DnstapSetting = &v
}

// GetDomainsToCaptureDnsQueries returns the DomainsToCaptureDnsQueries field value if set, zero value otherwise.
func (o *GridDns) GetDomainsToCaptureDnsQueries() []string {
	if o == nil || IsNil(o.DomainsToCaptureDnsQueries) {
		var ret []string
		return ret
	}
	return o.DomainsToCaptureDnsQueries
}

// GetDomainsToCaptureDnsQueriesOk returns a tuple with the DomainsToCaptureDnsQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDomainsToCaptureDnsQueriesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainsToCaptureDnsQueries) {
		return nil, false
	}
	return o.DomainsToCaptureDnsQueries, true
}

// HasDomainsToCaptureDnsQueries returns a boolean if a field has been set.
func (o *GridDns) HasDomainsToCaptureDnsQueries() bool {
	if o != nil && !IsNil(o.DomainsToCaptureDnsQueries) {
		return true
	}

	return false
}

// SetDomainsToCaptureDnsQueries gets a reference to the given []string and assigns it to the DomainsToCaptureDnsQueries field.
func (o *GridDns) SetDomainsToCaptureDnsQueries(v []string) {
	o.DomainsToCaptureDnsQueries = v
}

// GetDtcDnsQueriesSpecificBehavior returns the DtcDnsQueriesSpecificBehavior field value if set, zero value otherwise.
func (o *GridDns) GetDtcDnsQueriesSpecificBehavior() string {
	if o == nil || IsNil(o.DtcDnsQueriesSpecificBehavior) {
		var ret string
		return ret
	}
	return *o.DtcDnsQueriesSpecificBehavior
}

// GetDtcDnsQueriesSpecificBehaviorOk returns a tuple with the DtcDnsQueriesSpecificBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDtcDnsQueriesSpecificBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.DtcDnsQueriesSpecificBehavior) {
		return nil, false
	}
	return o.DtcDnsQueriesSpecificBehavior, true
}

// HasDtcDnsQueriesSpecificBehavior returns a boolean if a field has been set.
func (o *GridDns) HasDtcDnsQueriesSpecificBehavior() bool {
	if o != nil && !IsNil(o.DtcDnsQueriesSpecificBehavior) {
		return true
	}

	return false
}

// SetDtcDnsQueriesSpecificBehavior gets a reference to the given string and assigns it to the DtcDnsQueriesSpecificBehavior field.
func (o *GridDns) SetDtcDnsQueriesSpecificBehavior(v string) {
	o.DtcDnsQueriesSpecificBehavior = &v
}

// GetDtcDnssecMode returns the DtcDnssecMode field value if set, zero value otherwise.
func (o *GridDns) GetDtcDnssecMode() string {
	if o == nil || IsNil(o.DtcDnssecMode) {
		var ret string
		return ret
	}
	return *o.DtcDnssecMode
}

// GetDtcDnssecModeOk returns a tuple with the DtcDnssecMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDtcDnssecModeOk() (*string, bool) {
	if o == nil || IsNil(o.DtcDnssecMode) {
		return nil, false
	}
	return o.DtcDnssecMode, true
}

// HasDtcDnssecMode returns a boolean if a field has been set.
func (o *GridDns) HasDtcDnssecMode() bool {
	if o != nil && !IsNil(o.DtcDnssecMode) {
		return true
	}

	return false
}

// SetDtcDnssecMode gets a reference to the given string and assigns it to the DtcDnssecMode field.
func (o *GridDns) SetDtcDnssecMode(v string) {
	o.DtcDnssecMode = &v
}

// GetDtcEdnsPreferClientSubnet returns the DtcEdnsPreferClientSubnet field value if set, zero value otherwise.
func (o *GridDns) GetDtcEdnsPreferClientSubnet() bool {
	if o == nil || IsNil(o.DtcEdnsPreferClientSubnet) {
		var ret bool
		return ret
	}
	return *o.DtcEdnsPreferClientSubnet
}

// GetDtcEdnsPreferClientSubnetOk returns a tuple with the DtcEdnsPreferClientSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDtcEdnsPreferClientSubnetOk() (*bool, bool) {
	if o == nil || IsNil(o.DtcEdnsPreferClientSubnet) {
		return nil, false
	}
	return o.DtcEdnsPreferClientSubnet, true
}

// HasDtcEdnsPreferClientSubnet returns a boolean if a field has been set.
func (o *GridDns) HasDtcEdnsPreferClientSubnet() bool {
	if o != nil && !IsNil(o.DtcEdnsPreferClientSubnet) {
		return true
	}

	return false
}

// SetDtcEdnsPreferClientSubnet gets a reference to the given bool and assigns it to the DtcEdnsPreferClientSubnet field.
func (o *GridDns) SetDtcEdnsPreferClientSubnet(v bool) {
	o.DtcEdnsPreferClientSubnet = &v
}

// GetDtcScheduledBackup returns the DtcScheduledBackup field value if set, zero value otherwise.
func (o *GridDns) GetDtcScheduledBackup() GridDnsDtcScheduledBackup {
	if o == nil || IsNil(o.DtcScheduledBackup) {
		var ret GridDnsDtcScheduledBackup
		return ret
	}
	return *o.DtcScheduledBackup
}

// GetDtcScheduledBackupOk returns a tuple with the DtcScheduledBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDtcScheduledBackupOk() (*GridDnsDtcScheduledBackup, bool) {
	if o == nil || IsNil(o.DtcScheduledBackup) {
		return nil, false
	}
	return o.DtcScheduledBackup, true
}

// HasDtcScheduledBackup returns a boolean if a field has been set.
func (o *GridDns) HasDtcScheduledBackup() bool {
	if o != nil && !IsNil(o.DtcScheduledBackup) {
		return true
	}

	return false
}

// SetDtcScheduledBackup gets a reference to the given GridDnsDtcScheduledBackup and assigns it to the DtcScheduledBackup field.
func (o *GridDns) SetDtcScheduledBackup(v GridDnsDtcScheduledBackup) {
	o.DtcScheduledBackup = &v
}

// GetDtcTopologyEaList returns the DtcTopologyEaList field value if set, zero value otherwise.
func (o *GridDns) GetDtcTopologyEaList() []string {
	if o == nil || IsNil(o.DtcTopologyEaList) {
		var ret []string
		return ret
	}
	return o.DtcTopologyEaList
}

// GetDtcTopologyEaListOk returns a tuple with the DtcTopologyEaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetDtcTopologyEaListOk() ([]string, bool) {
	if o == nil || IsNil(o.DtcTopologyEaList) {
		return nil, false
	}
	return o.DtcTopologyEaList, true
}

// HasDtcTopologyEaList returns a boolean if a field has been set.
func (o *GridDns) HasDtcTopologyEaList() bool {
	if o != nil && !IsNil(o.DtcTopologyEaList) {
		return true
	}

	return false
}

// SetDtcTopologyEaList gets a reference to the given []string and assigns it to the DtcTopologyEaList field.
func (o *GridDns) SetDtcTopologyEaList(v []string) {
	o.DtcTopologyEaList = v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *GridDns) GetEdnsUdpSize() int64 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret int64
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEdnsUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *GridDns) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given int64 and assigns it to the EdnsUdpSize field.
func (o *GridDns) SetEdnsUdpSize(v int64) {
	o.EdnsUdpSize = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GridDns) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GridDns) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GridDns) SetEmail(v string) {
	o.Email = &v
}

// GetEnableBlackhole returns the EnableBlackhole field value if set, zero value otherwise.
func (o *GridDns) GetEnableBlackhole() bool {
	if o == nil || IsNil(o.EnableBlackhole) {
		var ret bool
		return ret
	}
	return *o.EnableBlackhole
}

// GetEnableBlackholeOk returns a tuple with the EnableBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableBlackholeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlackhole) {
		return nil, false
	}
	return o.EnableBlackhole, true
}

// HasEnableBlackhole returns a boolean if a field has been set.
func (o *GridDns) HasEnableBlackhole() bool {
	if o != nil && !IsNil(o.EnableBlackhole) {
		return true
	}

	return false
}

// SetEnableBlackhole gets a reference to the given bool and assigns it to the EnableBlackhole field.
func (o *GridDns) SetEnableBlackhole(v bool) {
	o.EnableBlackhole = &v
}

// GetEnableBlacklist returns the EnableBlacklist field value if set, zero value otherwise.
func (o *GridDns) GetEnableBlacklist() bool {
	if o == nil || IsNil(o.EnableBlacklist) {
		var ret bool
		return ret
	}
	return *o.EnableBlacklist
}

// GetEnableBlacklistOk returns a tuple with the EnableBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlacklist) {
		return nil, false
	}
	return o.EnableBlacklist, true
}

// HasEnableBlacklist returns a boolean if a field has been set.
func (o *GridDns) HasEnableBlacklist() bool {
	if o != nil && !IsNil(o.EnableBlacklist) {
		return true
	}

	return false
}

// SetEnableBlacklist gets a reference to the given bool and assigns it to the EnableBlacklist field.
func (o *GridDns) SetEnableBlacklist(v bool) {
	o.EnableBlacklist = &v
}

// GetEnableCaptureDnsQueries returns the EnableCaptureDnsQueries field value if set, zero value otherwise.
func (o *GridDns) GetEnableCaptureDnsQueries() bool {
	if o == nil || IsNil(o.EnableCaptureDnsQueries) {
		var ret bool
		return ret
	}
	return *o.EnableCaptureDnsQueries
}

// GetEnableCaptureDnsQueriesOk returns a tuple with the EnableCaptureDnsQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableCaptureDnsQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCaptureDnsQueries) {
		return nil, false
	}
	return o.EnableCaptureDnsQueries, true
}

// HasEnableCaptureDnsQueries returns a boolean if a field has been set.
func (o *GridDns) HasEnableCaptureDnsQueries() bool {
	if o != nil && !IsNil(o.EnableCaptureDnsQueries) {
		return true
	}

	return false
}

// SetEnableCaptureDnsQueries gets a reference to the given bool and assigns it to the EnableCaptureDnsQueries field.
func (o *GridDns) SetEnableCaptureDnsQueries(v bool) {
	o.EnableCaptureDnsQueries = &v
}

// GetEnableCaptureDnsResponses returns the EnableCaptureDnsResponses field value if set, zero value otherwise.
func (o *GridDns) GetEnableCaptureDnsResponses() bool {
	if o == nil || IsNil(o.EnableCaptureDnsResponses) {
		var ret bool
		return ret
	}
	return *o.EnableCaptureDnsResponses
}

// GetEnableCaptureDnsResponsesOk returns a tuple with the EnableCaptureDnsResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableCaptureDnsResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCaptureDnsResponses) {
		return nil, false
	}
	return o.EnableCaptureDnsResponses, true
}

// HasEnableCaptureDnsResponses returns a boolean if a field has been set.
func (o *GridDns) HasEnableCaptureDnsResponses() bool {
	if o != nil && !IsNil(o.EnableCaptureDnsResponses) {
		return true
	}

	return false
}

// SetEnableCaptureDnsResponses gets a reference to the given bool and assigns it to the EnableCaptureDnsResponses field.
func (o *GridDns) SetEnableCaptureDnsResponses(v bool) {
	o.EnableCaptureDnsResponses = &v
}

// GetEnableClientSubnetForwarding returns the EnableClientSubnetForwarding field value if set, zero value otherwise.
func (o *GridDns) GetEnableClientSubnetForwarding() bool {
	if o == nil || IsNil(o.EnableClientSubnetForwarding) {
		var ret bool
		return ret
	}
	return *o.EnableClientSubnetForwarding
}

// GetEnableClientSubnetForwardingOk returns a tuple with the EnableClientSubnetForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableClientSubnetForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientSubnetForwarding) {
		return nil, false
	}
	return o.EnableClientSubnetForwarding, true
}

// HasEnableClientSubnetForwarding returns a boolean if a field has been set.
func (o *GridDns) HasEnableClientSubnetForwarding() bool {
	if o != nil && !IsNil(o.EnableClientSubnetForwarding) {
		return true
	}

	return false
}

// SetEnableClientSubnetForwarding gets a reference to the given bool and assigns it to the EnableClientSubnetForwarding field.
func (o *GridDns) SetEnableClientSubnetForwarding(v bool) {
	o.EnableClientSubnetForwarding = &v
}

// GetEnableClientSubnetRecursive returns the EnableClientSubnetRecursive field value if set, zero value otherwise.
func (o *GridDns) GetEnableClientSubnetRecursive() bool {
	if o == nil || IsNil(o.EnableClientSubnetRecursive) {
		var ret bool
		return ret
	}
	return *o.EnableClientSubnetRecursive
}

// GetEnableClientSubnetRecursiveOk returns a tuple with the EnableClientSubnetRecursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableClientSubnetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientSubnetRecursive) {
		return nil, false
	}
	return o.EnableClientSubnetRecursive, true
}

// HasEnableClientSubnetRecursive returns a boolean if a field has been set.
func (o *GridDns) HasEnableClientSubnetRecursive() bool {
	if o != nil && !IsNil(o.EnableClientSubnetRecursive) {
		return true
	}

	return false
}

// SetEnableClientSubnetRecursive gets a reference to the given bool and assigns it to the EnableClientSubnetRecursive field.
func (o *GridDns) SetEnableClientSubnetRecursive(v bool) {
	o.EnableClientSubnetRecursive = &v
}

// GetEnableDeleteAssociatedPtr returns the EnableDeleteAssociatedPtr field value if set, zero value otherwise.
func (o *GridDns) GetEnableDeleteAssociatedPtr() bool {
	if o == nil || IsNil(o.EnableDeleteAssociatedPtr) {
		var ret bool
		return ret
	}
	return *o.EnableDeleteAssociatedPtr
}

// GetEnableDeleteAssociatedPtrOk returns a tuple with the EnableDeleteAssociatedPtr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableDeleteAssociatedPtrOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDeleteAssociatedPtr) {
		return nil, false
	}
	return o.EnableDeleteAssociatedPtr, true
}

// HasEnableDeleteAssociatedPtr returns a boolean if a field has been set.
func (o *GridDns) HasEnableDeleteAssociatedPtr() bool {
	if o != nil && !IsNil(o.EnableDeleteAssociatedPtr) {
		return true
	}

	return false
}

// SetEnableDeleteAssociatedPtr gets a reference to the given bool and assigns it to the EnableDeleteAssociatedPtr field.
func (o *GridDns) SetEnableDeleteAssociatedPtr(v bool) {
	o.EnableDeleteAssociatedPtr = &v
}

// GetEnableDns64 returns the EnableDns64 field value if set, zero value otherwise.
func (o *GridDns) GetEnableDns64() bool {
	if o == nil || IsNil(o.EnableDns64) {
		var ret bool
		return ret
	}
	return *o.EnableDns64
}

// GetEnableDns64Ok returns a tuple with the EnableDns64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableDns64Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableDns64) {
		return nil, false
	}
	return o.EnableDns64, true
}

// HasEnableDns64 returns a boolean if a field has been set.
func (o *GridDns) HasEnableDns64() bool {
	if o != nil && !IsNil(o.EnableDns64) {
		return true
	}

	return false
}

// SetEnableDns64 gets a reference to the given bool and assigns it to the EnableDns64 field.
func (o *GridDns) SetEnableDns64(v bool) {
	o.EnableDns64 = &v
}

// GetEnableDnsHealthCheck returns the EnableDnsHealthCheck field value if set, zero value otherwise.
func (o *GridDns) GetEnableDnsHealthCheck() bool {
	if o == nil || IsNil(o.EnableDnsHealthCheck) {
		var ret bool
		return ret
	}
	return *o.EnableDnsHealthCheck
}

// GetEnableDnsHealthCheckOk returns a tuple with the EnableDnsHealthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableDnsHealthCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsHealthCheck) {
		return nil, false
	}
	return o.EnableDnsHealthCheck, true
}

// HasEnableDnsHealthCheck returns a boolean if a field has been set.
func (o *GridDns) HasEnableDnsHealthCheck() bool {
	if o != nil && !IsNil(o.EnableDnsHealthCheck) {
		return true
	}

	return false
}

// SetEnableDnsHealthCheck gets a reference to the given bool and assigns it to the EnableDnsHealthCheck field.
func (o *GridDns) SetEnableDnsHealthCheck(v bool) {
	o.EnableDnsHealthCheck = &v
}

// GetEnableDnstapQueries returns the EnableDnstapQueries field value if set, zero value otherwise.
func (o *GridDns) GetEnableDnstapQueries() bool {
	if o == nil || IsNil(o.EnableDnstapQueries) {
		var ret bool
		return ret
	}
	return *o.EnableDnstapQueries
}

// GetEnableDnstapQueriesOk returns a tuple with the EnableDnstapQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableDnstapQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnstapQueries) {
		return nil, false
	}
	return o.EnableDnstapQueries, true
}

// HasEnableDnstapQueries returns a boolean if a field has been set.
func (o *GridDns) HasEnableDnstapQueries() bool {
	if o != nil && !IsNil(o.EnableDnstapQueries) {
		return true
	}

	return false
}

// SetEnableDnstapQueries gets a reference to the given bool and assigns it to the EnableDnstapQueries field.
func (o *GridDns) SetEnableDnstapQueries(v bool) {
	o.EnableDnstapQueries = &v
}

// GetEnableDnstapResponses returns the EnableDnstapResponses field value if set, zero value otherwise.
func (o *GridDns) GetEnableDnstapResponses() bool {
	if o == nil || IsNil(o.EnableDnstapResponses) {
		var ret bool
		return ret
	}
	return *o.EnableDnstapResponses
}

// GetEnableDnstapResponsesOk returns a tuple with the EnableDnstapResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableDnstapResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnstapResponses) {
		return nil, false
	}
	return o.EnableDnstapResponses, true
}

// HasEnableDnstapResponses returns a boolean if a field has been set.
func (o *GridDns) HasEnableDnstapResponses() bool {
	if o != nil && !IsNil(o.EnableDnstapResponses) {
		return true
	}

	return false
}

// SetEnableDnstapResponses gets a reference to the given bool and assigns it to the EnableDnstapResponses field.
func (o *GridDns) SetEnableDnstapResponses(v bool) {
	o.EnableDnstapResponses = &v
}

// GetEnableExcludedDomainNames returns the EnableExcludedDomainNames field value if set, zero value otherwise.
func (o *GridDns) GetEnableExcludedDomainNames() bool {
	if o == nil || IsNil(o.EnableExcludedDomainNames) {
		var ret bool
		return ret
	}
	return *o.EnableExcludedDomainNames
}

// GetEnableExcludedDomainNamesOk returns a tuple with the EnableExcludedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableExcludedDomainNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableExcludedDomainNames) {
		return nil, false
	}
	return o.EnableExcludedDomainNames, true
}

// HasEnableExcludedDomainNames returns a boolean if a field has been set.
func (o *GridDns) HasEnableExcludedDomainNames() bool {
	if o != nil && !IsNil(o.EnableExcludedDomainNames) {
		return true
	}

	return false
}

// SetEnableExcludedDomainNames gets a reference to the given bool and assigns it to the EnableExcludedDomainNames field.
func (o *GridDns) SetEnableExcludedDomainNames(v bool) {
	o.EnableExcludedDomainNames = &v
}

// GetEnableFixedRrsetOrderFqdns returns the EnableFixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *GridDns) GetEnableFixedRrsetOrderFqdns() bool {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		var ret bool
		return ret
	}
	return *o.EnableFixedRrsetOrderFqdns
}

// GetEnableFixedRrsetOrderFqdnsOk returns a tuple with the EnableFixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableFixedRrsetOrderFqdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.EnableFixedRrsetOrderFqdns, true
}

// HasEnableFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *GridDns) HasEnableFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.EnableFixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetEnableFixedRrsetOrderFqdns gets a reference to the given bool and assigns it to the EnableFixedRrsetOrderFqdns field.
func (o *GridDns) SetEnableFixedRrsetOrderFqdns(v bool) {
	o.EnableFixedRrsetOrderFqdns = &v
}

// GetEnableFtc returns the EnableFtc field value if set, zero value otherwise.
func (o *GridDns) GetEnableFtc() bool {
	if o == nil || IsNil(o.EnableFtc) {
		var ret bool
		return ret
	}
	return *o.EnableFtc
}

// GetEnableFtcOk returns a tuple with the EnableFtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableFtcOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFtc) {
		return nil, false
	}
	return o.EnableFtc, true
}

// HasEnableFtc returns a boolean if a field has been set.
func (o *GridDns) HasEnableFtc() bool {
	if o != nil && !IsNil(o.EnableFtc) {
		return true
	}

	return false
}

// SetEnableFtc gets a reference to the given bool and assigns it to the EnableFtc field.
func (o *GridDns) SetEnableFtc(v bool) {
	o.EnableFtc = &v
}

// GetEnableGssTsig returns the EnableGssTsig field value if set, zero value otherwise.
func (o *GridDns) GetEnableGssTsig() bool {
	if o == nil || IsNil(o.EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.EnableGssTsig
}

// GetEnableGssTsigOk returns a tuple with the EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGssTsig) {
		return nil, false
	}
	return o.EnableGssTsig, true
}

// HasEnableGssTsig returns a boolean if a field has been set.
func (o *GridDns) HasEnableGssTsig() bool {
	if o != nil && !IsNil(o.EnableGssTsig) {
		return true
	}

	return false
}

// SetEnableGssTsig gets a reference to the given bool and assigns it to the EnableGssTsig field.
func (o *GridDns) SetEnableGssTsig(v bool) {
	o.EnableGssTsig = &v
}

// GetEnableHostRrsetOrder returns the EnableHostRrsetOrder field value if set, zero value otherwise.
func (o *GridDns) GetEnableHostRrsetOrder() bool {
	if o == nil || IsNil(o.EnableHostRrsetOrder) {
		var ret bool
		return ret
	}
	return *o.EnableHostRrsetOrder
}

// GetEnableHostRrsetOrderOk returns a tuple with the EnableHostRrsetOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableHostRrsetOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHostRrsetOrder) {
		return nil, false
	}
	return o.EnableHostRrsetOrder, true
}

// HasEnableHostRrsetOrder returns a boolean if a field has been set.
func (o *GridDns) HasEnableHostRrsetOrder() bool {
	if o != nil && !IsNil(o.EnableHostRrsetOrder) {
		return true
	}

	return false
}

// SetEnableHostRrsetOrder gets a reference to the given bool and assigns it to the EnableHostRrsetOrder field.
func (o *GridDns) SetEnableHostRrsetOrder(v bool) {
	o.EnableHostRrsetOrder = &v
}

// GetEnableHsmSigning returns the EnableHsmSigning field value if set, zero value otherwise.
func (o *GridDns) GetEnableHsmSigning() bool {
	if o == nil || IsNil(o.EnableHsmSigning) {
		var ret bool
		return ret
	}
	return *o.EnableHsmSigning
}

// GetEnableHsmSigningOk returns a tuple with the EnableHsmSigning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableHsmSigningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHsmSigning) {
		return nil, false
	}
	return o.EnableHsmSigning, true
}

// HasEnableHsmSigning returns a boolean if a field has been set.
func (o *GridDns) HasEnableHsmSigning() bool {
	if o != nil && !IsNil(o.EnableHsmSigning) {
		return true
	}

	return false
}

// SetEnableHsmSigning gets a reference to the given bool and assigns it to the EnableHsmSigning field.
func (o *GridDns) SetEnableHsmSigning(v bool) {
	o.EnableHsmSigning = &v
}

// GetEnableNotifySourcePort returns the EnableNotifySourcePort field value if set, zero value otherwise.
func (o *GridDns) GetEnableNotifySourcePort() bool {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySourcePort
}

// GetEnableNotifySourcePortOk returns a tuple with the EnableNotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableNotifySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		return nil, false
	}
	return o.EnableNotifySourcePort, true
}

// HasEnableNotifySourcePort returns a boolean if a field has been set.
func (o *GridDns) HasEnableNotifySourcePort() bool {
	if o != nil && !IsNil(o.EnableNotifySourcePort) {
		return true
	}

	return false
}

// SetEnableNotifySourcePort gets a reference to the given bool and assigns it to the EnableNotifySourcePort field.
func (o *GridDns) SetEnableNotifySourcePort(v bool) {
	o.EnableNotifySourcePort = &v
}

// GetEnableQueryRewrite returns the EnableQueryRewrite field value if set, zero value otherwise.
func (o *GridDns) GetEnableQueryRewrite() bool {
	if o == nil || IsNil(o.EnableQueryRewrite) {
		var ret bool
		return ret
	}
	return *o.EnableQueryRewrite
}

// GetEnableQueryRewriteOk returns a tuple with the EnableQueryRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableQueryRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQueryRewrite) {
		return nil, false
	}
	return o.EnableQueryRewrite, true
}

// HasEnableQueryRewrite returns a boolean if a field has been set.
func (o *GridDns) HasEnableQueryRewrite() bool {
	if o != nil && !IsNil(o.EnableQueryRewrite) {
		return true
	}

	return false
}

// SetEnableQueryRewrite gets a reference to the given bool and assigns it to the EnableQueryRewrite field.
func (o *GridDns) SetEnableQueryRewrite(v bool) {
	o.EnableQueryRewrite = &v
}

// GetEnableQuerySourcePort returns the EnableQuerySourcePort field value if set, zero value otherwise.
func (o *GridDns) GetEnableQuerySourcePort() bool {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableQuerySourcePort
}

// GetEnableQuerySourcePortOk returns a tuple with the EnableQuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetEnableQuerySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		return nil, false
	}
	return o.EnableQuerySourcePort, true
}

// HasEnableQuerySourcePort returns a boolean if a field has been set.
func (o *GridDns) HasEnableQuerySourcePort() bool {
	if o != nil && !IsNil(o.EnableQuerySourcePort) {
		return true
	}

	return false
}

// SetEnableQuerySourcePort gets a reference to the given bool and assigns it to the EnableQuerySourcePort field.
func (o *GridDns) SetEnableQuerySourcePort(v bool) {
	o.EnableQuerySourcePort = &v
}

// GetExcludedDomainNames returns the ExcludedDomainNames field value if set, zero value otherwise.
func (o *GridDns) GetExcludedDomainNames() []string {
	if o == nil || IsNil(o.ExcludedDomainNames) {
		var ret []string
		return ret
	}
	return o.ExcludedDomainNames
}

// GetExcludedDomainNamesOk returns a tuple with the ExcludedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetExcludedDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedDomainNames) {
		return nil, false
	}
	return o.ExcludedDomainNames, true
}

// HasExcludedDomainNames returns a boolean if a field has been set.
func (o *GridDns) HasExcludedDomainNames() bool {
	if o != nil && !IsNil(o.ExcludedDomainNames) {
		return true
	}

	return false
}

// SetExcludedDomainNames gets a reference to the given []string and assigns it to the ExcludedDomainNames field.
func (o *GridDns) SetExcludedDomainNames(v []string) {
	o.ExcludedDomainNames = v
}

// GetExpireAfter returns the ExpireAfter field value if set, zero value otherwise.
func (o *GridDns) GetExpireAfter() int64 {
	if o == nil || IsNil(o.ExpireAfter) {
		var ret int64
		return ret
	}
	return *o.ExpireAfter
}

// GetExpireAfterOk returns a tuple with the ExpireAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetExpireAfterOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpireAfter) {
		return nil, false
	}
	return o.ExpireAfter, true
}

// HasExpireAfter returns a boolean if a field has been set.
func (o *GridDns) HasExpireAfter() bool {
	if o != nil && !IsNil(o.ExpireAfter) {
		return true
	}

	return false
}

// SetExpireAfter gets a reference to the given int64 and assigns it to the ExpireAfter field.
func (o *GridDns) SetExpireAfter(v int64) {
	o.ExpireAfter = &v
}

// GetFileTransferSetting returns the FileTransferSetting field value if set, zero value otherwise.
func (o *GridDns) GetFileTransferSetting() GridDnsFileTransferSetting {
	if o == nil || IsNil(o.FileTransferSetting) {
		var ret GridDnsFileTransferSetting
		return ret
	}
	return *o.FileTransferSetting
}

// GetFileTransferSettingOk returns a tuple with the FileTransferSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFileTransferSettingOk() (*GridDnsFileTransferSetting, bool) {
	if o == nil || IsNil(o.FileTransferSetting) {
		return nil, false
	}
	return o.FileTransferSetting, true
}

// HasFileTransferSetting returns a boolean if a field has been set.
func (o *GridDns) HasFileTransferSetting() bool {
	if o != nil && !IsNil(o.FileTransferSetting) {
		return true
	}

	return false
}

// SetFileTransferSetting gets a reference to the given GridDnsFileTransferSetting and assigns it to the FileTransferSetting field.
func (o *GridDns) SetFileTransferSetting(v GridDnsFileTransferSetting) {
	o.FileTransferSetting = &v
}

// GetFilterAaaa returns the FilterAaaa field value if set, zero value otherwise.
func (o *GridDns) GetFilterAaaa() string {
	if o == nil || IsNil(o.FilterAaaa) {
		var ret string
		return ret
	}
	return *o.FilterAaaa
}

// GetFilterAaaaOk returns a tuple with the FilterAaaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFilterAaaaOk() (*string, bool) {
	if o == nil || IsNil(o.FilterAaaa) {
		return nil, false
	}
	return o.FilterAaaa, true
}

// HasFilterAaaa returns a boolean if a field has been set.
func (o *GridDns) HasFilterAaaa() bool {
	if o != nil && !IsNil(o.FilterAaaa) {
		return true
	}

	return false
}

// SetFilterAaaa gets a reference to the given string and assigns it to the FilterAaaa field.
func (o *GridDns) SetFilterAaaa(v string) {
	o.FilterAaaa = &v
}

// GetFilterAaaaList returns the FilterAaaaList field value if set, zero value otherwise.
func (o *GridDns) GetFilterAaaaList() []GridDnsFilterAaaaList {
	if o == nil || IsNil(o.FilterAaaaList) {
		var ret []GridDnsFilterAaaaList
		return ret
	}
	return o.FilterAaaaList
}

// GetFilterAaaaListOk returns a tuple with the FilterAaaaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFilterAaaaListOk() ([]GridDnsFilterAaaaList, bool) {
	if o == nil || IsNil(o.FilterAaaaList) {
		return nil, false
	}
	return o.FilterAaaaList, true
}

// HasFilterAaaaList returns a boolean if a field has been set.
func (o *GridDns) HasFilterAaaaList() bool {
	if o != nil && !IsNil(o.FilterAaaaList) {
		return true
	}

	return false
}

// SetFilterAaaaList gets a reference to the given []GridDnsFilterAaaaList and assigns it to the FilterAaaaList field.
func (o *GridDns) SetFilterAaaaList(v []GridDnsFilterAaaaList) {
	o.FilterAaaaList = v
}

// GetFixedRrsetOrderFqdns returns the FixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *GridDns) GetFixedRrsetOrderFqdns() []GridDnsFixedRrsetOrderFqdns {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		var ret []GridDnsFixedRrsetOrderFqdns
		return ret
	}
	return o.FixedRrsetOrderFqdns
}

// GetFixedRrsetOrderFqdnsOk returns a tuple with the FixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFixedRrsetOrderFqdnsOk() ([]GridDnsFixedRrsetOrderFqdns, bool) {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.FixedRrsetOrderFqdns, true
}

// HasFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *GridDns) HasFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.FixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetFixedRrsetOrderFqdns gets a reference to the given []GridDnsFixedRrsetOrderFqdns and assigns it to the FixedRrsetOrderFqdns field.
func (o *GridDns) SetFixedRrsetOrderFqdns(v []GridDnsFixedRrsetOrderFqdns) {
	o.FixedRrsetOrderFqdns = v
}

// GetForwardOnly returns the ForwardOnly field value if set, zero value otherwise.
func (o *GridDns) GetForwardOnly() bool {
	if o == nil || IsNil(o.ForwardOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardOnly
}

// GetForwardOnlyOk returns a tuple with the ForwardOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetForwardOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardOnly) {
		return nil, false
	}
	return o.ForwardOnly, true
}

// HasForwardOnly returns a boolean if a field has been set.
func (o *GridDns) HasForwardOnly() bool {
	if o != nil && !IsNil(o.ForwardOnly) {
		return true
	}

	return false
}

// SetForwardOnly gets a reference to the given bool and assigns it to the ForwardOnly field.
func (o *GridDns) SetForwardOnly(v bool) {
	o.ForwardOnly = &v
}

// GetForwardUpdates returns the ForwardUpdates field value if set, zero value otherwise.
func (o *GridDns) GetForwardUpdates() bool {
	if o == nil || IsNil(o.ForwardUpdates) {
		var ret bool
		return ret
	}
	return *o.ForwardUpdates
}

// GetForwardUpdatesOk returns a tuple with the ForwardUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetForwardUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardUpdates) {
		return nil, false
	}
	return o.ForwardUpdates, true
}

// HasForwardUpdates returns a boolean if a field has been set.
func (o *GridDns) HasForwardUpdates() bool {
	if o != nil && !IsNil(o.ForwardUpdates) {
		return true
	}

	return false
}

// SetForwardUpdates gets a reference to the given bool and assigns it to the ForwardUpdates field.
func (o *GridDns) SetForwardUpdates(v bool) {
	o.ForwardUpdates = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *GridDns) GetForwarders() []string {
	if o == nil || IsNil(o.Forwarders) {
		var ret []string
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetForwardersOk() ([]string, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *GridDns) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []string and assigns it to the Forwarders field.
func (o *GridDns) SetForwarders(v []string) {
	o.Forwarders = v
}

// GetFtcExpiredRecordTimeout returns the FtcExpiredRecordTimeout field value if set, zero value otherwise.
func (o *GridDns) GetFtcExpiredRecordTimeout() int64 {
	if o == nil || IsNil(o.FtcExpiredRecordTimeout) {
		var ret int64
		return ret
	}
	return *o.FtcExpiredRecordTimeout
}

// GetFtcExpiredRecordTimeoutOk returns a tuple with the FtcExpiredRecordTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFtcExpiredRecordTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.FtcExpiredRecordTimeout) {
		return nil, false
	}
	return o.FtcExpiredRecordTimeout, true
}

// HasFtcExpiredRecordTimeout returns a boolean if a field has been set.
func (o *GridDns) HasFtcExpiredRecordTimeout() bool {
	if o != nil && !IsNil(o.FtcExpiredRecordTimeout) {
		return true
	}

	return false
}

// SetFtcExpiredRecordTimeout gets a reference to the given int64 and assigns it to the FtcExpiredRecordTimeout field.
func (o *GridDns) SetFtcExpiredRecordTimeout(v int64) {
	o.FtcExpiredRecordTimeout = &v
}

// GetFtcExpiredRecordTtl returns the FtcExpiredRecordTtl field value if set, zero value otherwise.
func (o *GridDns) GetFtcExpiredRecordTtl() int64 {
	if o == nil || IsNil(o.FtcExpiredRecordTtl) {
		var ret int64
		return ret
	}
	return *o.FtcExpiredRecordTtl
}

// GetFtcExpiredRecordTtlOk returns a tuple with the FtcExpiredRecordTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetFtcExpiredRecordTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.FtcExpiredRecordTtl) {
		return nil, false
	}
	return o.FtcExpiredRecordTtl, true
}

// HasFtcExpiredRecordTtl returns a boolean if a field has been set.
func (o *GridDns) HasFtcExpiredRecordTtl() bool {
	if o != nil && !IsNil(o.FtcExpiredRecordTtl) {
		return true
	}

	return false
}

// SetFtcExpiredRecordTtl gets a reference to the given int64 and assigns it to the FtcExpiredRecordTtl field.
func (o *GridDns) SetFtcExpiredRecordTtl(v int64) {
	o.FtcExpiredRecordTtl = &v
}

// GetGenEadbFromHosts returns the GenEadbFromHosts field value if set, zero value otherwise.
func (o *GridDns) GetGenEadbFromHosts() bool {
	if o == nil || IsNil(o.GenEadbFromHosts) {
		var ret bool
		return ret
	}
	return *o.GenEadbFromHosts
}

// GetGenEadbFromHostsOk returns a tuple with the GenEadbFromHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetGenEadbFromHostsOk() (*bool, bool) {
	if o == nil || IsNil(o.GenEadbFromHosts) {
		return nil, false
	}
	return o.GenEadbFromHosts, true
}

// HasGenEadbFromHosts returns a boolean if a field has been set.
func (o *GridDns) HasGenEadbFromHosts() bool {
	if o != nil && !IsNil(o.GenEadbFromHosts) {
		return true
	}

	return false
}

// SetGenEadbFromHosts gets a reference to the given bool and assigns it to the GenEadbFromHosts field.
func (o *GridDns) SetGenEadbFromHosts(v bool) {
	o.GenEadbFromHosts = &v
}

// GetGenEadbFromNetworkContainers returns the GenEadbFromNetworkContainers field value if set, zero value otherwise.
func (o *GridDns) GetGenEadbFromNetworkContainers() bool {
	if o == nil || IsNil(o.GenEadbFromNetworkContainers) {
		var ret bool
		return ret
	}
	return *o.GenEadbFromNetworkContainers
}

// GetGenEadbFromNetworkContainersOk returns a tuple with the GenEadbFromNetworkContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetGenEadbFromNetworkContainersOk() (*bool, bool) {
	if o == nil || IsNil(o.GenEadbFromNetworkContainers) {
		return nil, false
	}
	return o.GenEadbFromNetworkContainers, true
}

// HasGenEadbFromNetworkContainers returns a boolean if a field has been set.
func (o *GridDns) HasGenEadbFromNetworkContainers() bool {
	if o != nil && !IsNil(o.GenEadbFromNetworkContainers) {
		return true
	}

	return false
}

// SetGenEadbFromNetworkContainers gets a reference to the given bool and assigns it to the GenEadbFromNetworkContainers field.
func (o *GridDns) SetGenEadbFromNetworkContainers(v bool) {
	o.GenEadbFromNetworkContainers = &v
}

// GetGenEadbFromNetworks returns the GenEadbFromNetworks field value if set, zero value otherwise.
func (o *GridDns) GetGenEadbFromNetworks() bool {
	if o == nil || IsNil(o.GenEadbFromNetworks) {
		var ret bool
		return ret
	}
	return *o.GenEadbFromNetworks
}

// GetGenEadbFromNetworksOk returns a tuple with the GenEadbFromNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetGenEadbFromNetworksOk() (*bool, bool) {
	if o == nil || IsNil(o.GenEadbFromNetworks) {
		return nil, false
	}
	return o.GenEadbFromNetworks, true
}

// HasGenEadbFromNetworks returns a boolean if a field has been set.
func (o *GridDns) HasGenEadbFromNetworks() bool {
	if o != nil && !IsNil(o.GenEadbFromNetworks) {
		return true
	}

	return false
}

// SetGenEadbFromNetworks gets a reference to the given bool and assigns it to the GenEadbFromNetworks field.
func (o *GridDns) SetGenEadbFromNetworks(v bool) {
	o.GenEadbFromNetworks = &v
}

// GetGenEadbFromRanges returns the GenEadbFromRanges field value if set, zero value otherwise.
func (o *GridDns) GetGenEadbFromRanges() bool {
	if o == nil || IsNil(o.GenEadbFromRanges) {
		var ret bool
		return ret
	}
	return *o.GenEadbFromRanges
}

// GetGenEadbFromRangesOk returns a tuple with the GenEadbFromRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetGenEadbFromRangesOk() (*bool, bool) {
	if o == nil || IsNil(o.GenEadbFromRanges) {
		return nil, false
	}
	return o.GenEadbFromRanges, true
}

// HasGenEadbFromRanges returns a boolean if a field has been set.
func (o *GridDns) HasGenEadbFromRanges() bool {
	if o != nil && !IsNil(o.GenEadbFromRanges) {
		return true
	}

	return false
}

// SetGenEadbFromRanges gets a reference to the given bool and assigns it to the GenEadbFromRanges field.
func (o *GridDns) SetGenEadbFromRanges(v bool) {
	o.GenEadbFromRanges = &v
}

// GetGssTsigKeys returns the GssTsigKeys field value if set, zero value otherwise.
func (o *GridDns) GetGssTsigKeys() []string {
	if o == nil || IsNil(o.GssTsigKeys) {
		var ret []string
		return ret
	}
	return o.GssTsigKeys
}

// GetGssTsigKeysOk returns a tuple with the GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetGssTsigKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.GssTsigKeys) {
		return nil, false
	}
	return o.GssTsigKeys, true
}

// HasGssTsigKeys returns a boolean if a field has been set.
func (o *GridDns) HasGssTsigKeys() bool {
	if o != nil && !IsNil(o.GssTsigKeys) {
		return true
	}

	return false
}

// SetGssTsigKeys gets a reference to the given []string and assigns it to the GssTsigKeys field.
func (o *GridDns) SetGssTsigKeys(v []string) {
	o.GssTsigKeys = v
}

// GetLastQueriedAcl returns the LastQueriedAcl field value if set, zero value otherwise.
func (o *GridDns) GetLastQueriedAcl() []GridDnsLastQueriedAcl {
	if o == nil || IsNil(o.LastQueriedAcl) {
		var ret []GridDnsLastQueriedAcl
		return ret
	}
	return o.LastQueriedAcl
}

// GetLastQueriedAclOk returns a tuple with the LastQueriedAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetLastQueriedAclOk() ([]GridDnsLastQueriedAcl, bool) {
	if o == nil || IsNil(o.LastQueriedAcl) {
		return nil, false
	}
	return o.LastQueriedAcl, true
}

// HasLastQueriedAcl returns a boolean if a field has been set.
func (o *GridDns) HasLastQueriedAcl() bool {
	if o != nil && !IsNil(o.LastQueriedAcl) {
		return true
	}

	return false
}

// SetLastQueriedAcl gets a reference to the given []GridDnsLastQueriedAcl and assigns it to the LastQueriedAcl field.
func (o *GridDns) SetLastQueriedAcl(v []GridDnsLastQueriedAcl) {
	o.LastQueriedAcl = v
}

// GetLoggingCategories returns the LoggingCategories field value if set, zero value otherwise.
func (o *GridDns) GetLoggingCategories() GridDnsLoggingCategories {
	if o == nil || IsNil(o.LoggingCategories) {
		var ret GridDnsLoggingCategories
		return ret
	}
	return *o.LoggingCategories
}

// GetLoggingCategoriesOk returns a tuple with the LoggingCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetLoggingCategoriesOk() (*GridDnsLoggingCategories, bool) {
	if o == nil || IsNil(o.LoggingCategories) {
		return nil, false
	}
	return o.LoggingCategories, true
}

// HasLoggingCategories returns a boolean if a field has been set.
func (o *GridDns) HasLoggingCategories() bool {
	if o != nil && !IsNil(o.LoggingCategories) {
		return true
	}

	return false
}

// SetLoggingCategories gets a reference to the given GridDnsLoggingCategories and assigns it to the LoggingCategories field.
func (o *GridDns) SetLoggingCategories(v GridDnsLoggingCategories) {
	o.LoggingCategories = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *GridDns) GetMaxCacheTtl() int64 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetMaxCacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *GridDns) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given int64 and assigns it to the MaxCacheTtl field.
func (o *GridDns) SetMaxCacheTtl(v int64) {
	o.MaxCacheTtl = &v
}

// GetMaxCachedLifetime returns the MaxCachedLifetime field value if set, zero value otherwise.
func (o *GridDns) GetMaxCachedLifetime() int64 {
	if o == nil || IsNil(o.MaxCachedLifetime) {
		var ret int64
		return ret
	}
	return *o.MaxCachedLifetime
}

// GetMaxCachedLifetimeOk returns a tuple with the MaxCachedLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetMaxCachedLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCachedLifetime) {
		return nil, false
	}
	return o.MaxCachedLifetime, true
}

// HasMaxCachedLifetime returns a boolean if a field has been set.
func (o *GridDns) HasMaxCachedLifetime() bool {
	if o != nil && !IsNil(o.MaxCachedLifetime) {
		return true
	}

	return false
}

// SetMaxCachedLifetime gets a reference to the given int64 and assigns it to the MaxCachedLifetime field.
func (o *GridDns) SetMaxCachedLifetime(v int64) {
	o.MaxCachedLifetime = &v
}

// GetMaxNcacheTtl returns the MaxNcacheTtl field value if set, zero value otherwise.
func (o *GridDns) GetMaxNcacheTtl() int64 {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxNcacheTtl
}

// GetMaxNcacheTtlOk returns a tuple with the MaxNcacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetMaxNcacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		return nil, false
	}
	return o.MaxNcacheTtl, true
}

// HasMaxNcacheTtl returns a boolean if a field has been set.
func (o *GridDns) HasMaxNcacheTtl() bool {
	if o != nil && !IsNil(o.MaxNcacheTtl) {
		return true
	}

	return false
}

// SetMaxNcacheTtl gets a reference to the given int64 and assigns it to the MaxNcacheTtl field.
func (o *GridDns) SetMaxNcacheTtl(v int64) {
	o.MaxNcacheTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *GridDns) GetMaxUdpSize() int64 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret int64
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetMaxUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *GridDns) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given int64 and assigns it to the MaxUdpSize field.
func (o *GridDns) SetMaxUdpSize(v int64) {
	o.MaxUdpSize = &v
}

// GetMemberSecondaryNotify returns the MemberSecondaryNotify field value if set, zero value otherwise.
func (o *GridDns) GetMemberSecondaryNotify() bool {
	if o == nil || IsNil(o.MemberSecondaryNotify) {
		var ret bool
		return ret
	}
	return *o.MemberSecondaryNotify
}

// GetMemberSecondaryNotifyOk returns a tuple with the MemberSecondaryNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetMemberSecondaryNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberSecondaryNotify) {
		return nil, false
	}
	return o.MemberSecondaryNotify, true
}

// HasMemberSecondaryNotify returns a boolean if a field has been set.
func (o *GridDns) HasMemberSecondaryNotify() bool {
	if o != nil && !IsNil(o.MemberSecondaryNotify) {
		return true
	}

	return false
}

// SetMemberSecondaryNotify gets a reference to the given bool and assigns it to the MemberSecondaryNotify field.
func (o *GridDns) SetMemberSecondaryNotify(v bool) {
	o.MemberSecondaryNotify = &v
}

// GetNegativeTtl returns the NegativeTtl field value if set, zero value otherwise.
func (o *GridDns) GetNegativeTtl() int64 {
	if o == nil || IsNil(o.NegativeTtl) {
		var ret int64
		return ret
	}
	return *o.NegativeTtl
}

// GetNegativeTtlOk returns a tuple with the NegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.NegativeTtl) {
		return nil, false
	}
	return o.NegativeTtl, true
}

// HasNegativeTtl returns a boolean if a field has been set.
func (o *GridDns) HasNegativeTtl() bool {
	if o != nil && !IsNil(o.NegativeTtl) {
		return true
	}

	return false
}

// SetNegativeTtl gets a reference to the given int64 and assigns it to the NegativeTtl field.
func (o *GridDns) SetNegativeTtl(v int64) {
	o.NegativeTtl = &v
}

// GetNotifyDelay returns the NotifyDelay field value if set, zero value otherwise.
func (o *GridDns) GetNotifyDelay() int64 {
	if o == nil || IsNil(o.NotifyDelay) {
		var ret int64
		return ret
	}
	return *o.NotifyDelay
}

// GetNotifyDelayOk returns a tuple with the NotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNotifyDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifyDelay) {
		return nil, false
	}
	return o.NotifyDelay, true
}

// HasNotifyDelay returns a boolean if a field has been set.
func (o *GridDns) HasNotifyDelay() bool {
	if o != nil && !IsNil(o.NotifyDelay) {
		return true
	}

	return false
}

// SetNotifyDelay gets a reference to the given int64 and assigns it to the NotifyDelay field.
func (o *GridDns) SetNotifyDelay(v int64) {
	o.NotifyDelay = &v
}

// GetNotifySourcePort returns the NotifySourcePort field value if set, zero value otherwise.
func (o *GridDns) GetNotifySourcePort() int64 {
	if o == nil || IsNil(o.NotifySourcePort) {
		var ret int64
		return ret
	}
	return *o.NotifySourcePort
}

// GetNotifySourcePortOk returns a tuple with the NotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNotifySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifySourcePort) {
		return nil, false
	}
	return o.NotifySourcePort, true
}

// HasNotifySourcePort returns a boolean if a field has been set.
func (o *GridDns) HasNotifySourcePort() bool {
	if o != nil && !IsNil(o.NotifySourcePort) {
		return true
	}

	return false
}

// SetNotifySourcePort gets a reference to the given int64 and assigns it to the NotifySourcePort field.
func (o *GridDns) SetNotifySourcePort(v int64) {
	o.NotifySourcePort = &v
}

// GetNsgroupDefault returns the NsgroupDefault field value if set, zero value otherwise.
func (o *GridDns) GetNsgroupDefault() string {
	if o == nil || IsNil(o.NsgroupDefault) {
		var ret string
		return ret
	}
	return *o.NsgroupDefault
}

// GetNsgroupDefaultOk returns a tuple with the NsgroupDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNsgroupDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.NsgroupDefault) {
		return nil, false
	}
	return o.NsgroupDefault, true
}

// HasNsgroupDefault returns a boolean if a field has been set.
func (o *GridDns) HasNsgroupDefault() bool {
	if o != nil && !IsNil(o.NsgroupDefault) {
		return true
	}

	return false
}

// SetNsgroupDefault gets a reference to the given string and assigns it to the NsgroupDefault field.
func (o *GridDns) SetNsgroupDefault(v string) {
	o.NsgroupDefault = &v
}

// GetNsgroups returns the Nsgroups field value if set, zero value otherwise.
func (o *GridDns) GetNsgroups() []string {
	if o == nil || IsNil(o.Nsgroups) {
		var ret []string
		return ret
	}
	return o.Nsgroups
}

// GetNsgroupsOk returns a tuple with the Nsgroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNsgroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgroups) {
		return nil, false
	}
	return o.Nsgroups, true
}

// HasNsgroups returns a boolean if a field has been set.
func (o *GridDns) HasNsgroups() bool {
	if o != nil && !IsNil(o.Nsgroups) {
		return true
	}

	return false
}

// SetNsgroups gets a reference to the given []string and assigns it to the Nsgroups field.
func (o *GridDns) SetNsgroups(v []string) {
	o.Nsgroups = v
}

// GetNxdomainLogQuery returns the NxdomainLogQuery field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainLogQuery() bool {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		var ret bool
		return ret
	}
	return *o.NxdomainLogQuery
}

// GetNxdomainLogQueryOk returns a tuple with the NxdomainLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		return nil, false
	}
	return o.NxdomainLogQuery, true
}

// HasNxdomainLogQuery returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainLogQuery() bool {
	if o != nil && !IsNil(o.NxdomainLogQuery) {
		return true
	}

	return false
}

// SetNxdomainLogQuery gets a reference to the given bool and assigns it to the NxdomainLogQuery field.
func (o *GridDns) SetNxdomainLogQuery(v bool) {
	o.NxdomainLogQuery = &v
}

// GetNxdomainRedirect returns the NxdomainRedirect field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainRedirect() bool {
	if o == nil || IsNil(o.NxdomainRedirect) {
		var ret bool
		return ret
	}
	return *o.NxdomainRedirect
}

// GetNxdomainRedirectOk returns a tuple with the NxdomainRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainRedirect) {
		return nil, false
	}
	return o.NxdomainRedirect, true
}

// HasNxdomainRedirect returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainRedirect() bool {
	if o != nil && !IsNil(o.NxdomainRedirect) {
		return true
	}

	return false
}

// SetNxdomainRedirect gets a reference to the given bool and assigns it to the NxdomainRedirect field.
func (o *GridDns) SetNxdomainRedirect(v bool) {
	o.NxdomainRedirect = &v
}

// GetNxdomainRedirectAddresses returns the NxdomainRedirectAddresses field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainRedirectAddresses() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddresses
}

// GetNxdomainRedirectAddressesOk returns a tuple with the NxdomainRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		return nil, false
	}
	return o.NxdomainRedirectAddresses, true
}

// HasNxdomainRedirectAddresses returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainRedirectAddresses() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddresses) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddresses gets a reference to the given []string and assigns it to the NxdomainRedirectAddresses field.
func (o *GridDns) SetNxdomainRedirectAddresses(v []string) {
	o.NxdomainRedirectAddresses = v
}

// GetNxdomainRedirectAddressesV6 returns the NxdomainRedirectAddressesV6 field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainRedirectAddressesV6() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddressesV6
}

// GetNxdomainRedirectAddressesV6Ok returns a tuple with the NxdomainRedirectAddressesV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainRedirectAddressesV6Ok() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		return nil, false
	}
	return o.NxdomainRedirectAddressesV6, true
}

// HasNxdomainRedirectAddressesV6 returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainRedirectAddressesV6() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddressesV6) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddressesV6 gets a reference to the given []string and assigns it to the NxdomainRedirectAddressesV6 field.
func (o *GridDns) SetNxdomainRedirectAddressesV6(v []string) {
	o.NxdomainRedirectAddressesV6 = v
}

// GetNxdomainRedirectTtl returns the NxdomainRedirectTtl field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainRedirectTtl() int64 {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.NxdomainRedirectTtl
}

// GetNxdomainRedirectTtlOk returns a tuple with the NxdomainRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		return nil, false
	}
	return o.NxdomainRedirectTtl, true
}

// HasNxdomainRedirectTtl returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainRedirectTtl() bool {
	if o != nil && !IsNil(o.NxdomainRedirectTtl) {
		return true
	}

	return false
}

// SetNxdomainRedirectTtl gets a reference to the given int64 and assigns it to the NxdomainRedirectTtl field.
func (o *GridDns) SetNxdomainRedirectTtl(v int64) {
	o.NxdomainRedirectTtl = &v
}

// GetNxdomainRulesets returns the NxdomainRulesets field value if set, zero value otherwise.
func (o *GridDns) GetNxdomainRulesets() []string {
	if o == nil || IsNil(o.NxdomainRulesets) {
		var ret []string
		return ret
	}
	return o.NxdomainRulesets
}

// GetNxdomainRulesetsOk returns a tuple with the NxdomainRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetNxdomainRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRulesets) {
		return nil, false
	}
	return o.NxdomainRulesets, true
}

// HasNxdomainRulesets returns a boolean if a field has been set.
func (o *GridDns) HasNxdomainRulesets() bool {
	if o != nil && !IsNil(o.NxdomainRulesets) {
		return true
	}

	return false
}

// SetNxdomainRulesets gets a reference to the given []string and assigns it to the NxdomainRulesets field.
func (o *GridDns) SetNxdomainRulesets(v []string) {
	o.NxdomainRulesets = v
}

// GetPreserveHostRrsetOrderOnSecondaries returns the PreserveHostRrsetOrderOnSecondaries field value if set, zero value otherwise.
func (o *GridDns) GetPreserveHostRrsetOrderOnSecondaries() bool {
	if o == nil || IsNil(o.PreserveHostRrsetOrderOnSecondaries) {
		var ret bool
		return ret
	}
	return *o.PreserveHostRrsetOrderOnSecondaries
}

// GetPreserveHostRrsetOrderOnSecondariesOk returns a tuple with the PreserveHostRrsetOrderOnSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetPreserveHostRrsetOrderOnSecondariesOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveHostRrsetOrderOnSecondaries) {
		return nil, false
	}
	return o.PreserveHostRrsetOrderOnSecondaries, true
}

// HasPreserveHostRrsetOrderOnSecondaries returns a boolean if a field has been set.
func (o *GridDns) HasPreserveHostRrsetOrderOnSecondaries() bool {
	if o != nil && !IsNil(o.PreserveHostRrsetOrderOnSecondaries) {
		return true
	}

	return false
}

// SetPreserveHostRrsetOrderOnSecondaries gets a reference to the given bool and assigns it to the PreserveHostRrsetOrderOnSecondaries field.
func (o *GridDns) SetPreserveHostRrsetOrderOnSecondaries(v bool) {
	o.PreserveHostRrsetOrderOnSecondaries = &v
}

// GetProtocolRecordNamePolicies returns the ProtocolRecordNamePolicies field value if set, zero value otherwise.
func (o *GridDns) GetProtocolRecordNamePolicies() []string {
	if o == nil || IsNil(o.ProtocolRecordNamePolicies) {
		var ret []string
		return ret
	}
	return o.ProtocolRecordNamePolicies
}

// GetProtocolRecordNamePoliciesOk returns a tuple with the ProtocolRecordNamePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetProtocolRecordNamePoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProtocolRecordNamePolicies) {
		return nil, false
	}
	return o.ProtocolRecordNamePolicies, true
}

// HasProtocolRecordNamePolicies returns a boolean if a field has been set.
func (o *GridDns) HasProtocolRecordNamePolicies() bool {
	if o != nil && !IsNil(o.ProtocolRecordNamePolicies) {
		return true
	}

	return false
}

// SetProtocolRecordNamePolicies gets a reference to the given []string and assigns it to the ProtocolRecordNamePolicies field.
func (o *GridDns) SetProtocolRecordNamePolicies(v []string) {
	o.ProtocolRecordNamePolicies = v
}

// GetQueryRewriteDomainNames returns the QueryRewriteDomainNames field value if set, zero value otherwise.
func (o *GridDns) GetQueryRewriteDomainNames() []string {
	if o == nil || IsNil(o.QueryRewriteDomainNames) {
		var ret []string
		return ret
	}
	return o.QueryRewriteDomainNames
}

// GetQueryRewriteDomainNamesOk returns a tuple with the QueryRewriteDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetQueryRewriteDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.QueryRewriteDomainNames) {
		return nil, false
	}
	return o.QueryRewriteDomainNames, true
}

// HasQueryRewriteDomainNames returns a boolean if a field has been set.
func (o *GridDns) HasQueryRewriteDomainNames() bool {
	if o != nil && !IsNil(o.QueryRewriteDomainNames) {
		return true
	}

	return false
}

// SetQueryRewriteDomainNames gets a reference to the given []string and assigns it to the QueryRewriteDomainNames field.
func (o *GridDns) SetQueryRewriteDomainNames(v []string) {
	o.QueryRewriteDomainNames = v
}

// GetQueryRewritePrefix returns the QueryRewritePrefix field value if set, zero value otherwise.
func (o *GridDns) GetQueryRewritePrefix() string {
	if o == nil || IsNil(o.QueryRewritePrefix) {
		var ret string
		return ret
	}
	return *o.QueryRewritePrefix
}

// GetQueryRewritePrefixOk returns a tuple with the QueryRewritePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetQueryRewritePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.QueryRewritePrefix) {
		return nil, false
	}
	return o.QueryRewritePrefix, true
}

// HasQueryRewritePrefix returns a boolean if a field has been set.
func (o *GridDns) HasQueryRewritePrefix() bool {
	if o != nil && !IsNil(o.QueryRewritePrefix) {
		return true
	}

	return false
}

// SetQueryRewritePrefix gets a reference to the given string and assigns it to the QueryRewritePrefix field.
func (o *GridDns) SetQueryRewritePrefix(v string) {
	o.QueryRewritePrefix = &v
}

// GetQuerySourcePort returns the QuerySourcePort field value if set, zero value otherwise.
func (o *GridDns) GetQuerySourcePort() int64 {
	if o == nil || IsNil(o.QuerySourcePort) {
		var ret int64
		return ret
	}
	return *o.QuerySourcePort
}

// GetQuerySourcePortOk returns a tuple with the QuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetQuerySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.QuerySourcePort) {
		return nil, false
	}
	return o.QuerySourcePort, true
}

// HasQuerySourcePort returns a boolean if a field has been set.
func (o *GridDns) HasQuerySourcePort() bool {
	if o != nil && !IsNil(o.QuerySourcePort) {
		return true
	}

	return false
}

// SetQuerySourcePort gets a reference to the given int64 and assigns it to the QuerySourcePort field.
func (o *GridDns) SetQuerySourcePort(v int64) {
	o.QuerySourcePort = &v
}

// GetRecursiveQueryList returns the RecursiveQueryList field value if set, zero value otherwise.
func (o *GridDns) GetRecursiveQueryList() []GridDnsRecursiveQueryList {
	if o == nil || IsNil(o.RecursiveQueryList) {
		var ret []GridDnsRecursiveQueryList
		return ret
	}
	return o.RecursiveQueryList
}

// GetRecursiveQueryListOk returns a tuple with the RecursiveQueryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRecursiveQueryListOk() ([]GridDnsRecursiveQueryList, bool) {
	if o == nil || IsNil(o.RecursiveQueryList) {
		return nil, false
	}
	return o.RecursiveQueryList, true
}

// HasRecursiveQueryList returns a boolean if a field has been set.
func (o *GridDns) HasRecursiveQueryList() bool {
	if o != nil && !IsNil(o.RecursiveQueryList) {
		return true
	}

	return false
}

// SetRecursiveQueryList gets a reference to the given []GridDnsRecursiveQueryList and assigns it to the RecursiveQueryList field.
func (o *GridDns) SetRecursiveQueryList(v []GridDnsRecursiveQueryList) {
	o.RecursiveQueryList = v
}

// GetRefreshTimer returns the RefreshTimer field value if set, zero value otherwise.
func (o *GridDns) GetRefreshTimer() int64 {
	if o == nil || IsNil(o.RefreshTimer) {
		var ret int64
		return ret
	}
	return *o.RefreshTimer
}

// GetRefreshTimerOk returns a tuple with the RefreshTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRefreshTimerOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshTimer) {
		return nil, false
	}
	return o.RefreshTimer, true
}

// HasRefreshTimer returns a boolean if a field has been set.
func (o *GridDns) HasRefreshTimer() bool {
	if o != nil && !IsNil(o.RefreshTimer) {
		return true
	}

	return false
}

// SetRefreshTimer gets a reference to the given int64 and assigns it to the RefreshTimer field.
func (o *GridDns) SetRefreshTimer(v int64) {
	o.RefreshTimer = &v
}

// GetResolverQueryTimeout returns the ResolverQueryTimeout field value if set, zero value otherwise.
func (o *GridDns) GetResolverQueryTimeout() int64 {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		var ret int64
		return ret
	}
	return *o.ResolverQueryTimeout
}

// GetResolverQueryTimeoutOk returns a tuple with the ResolverQueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetResolverQueryTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		return nil, false
	}
	return o.ResolverQueryTimeout, true
}

// HasResolverQueryTimeout returns a boolean if a field has been set.
func (o *GridDns) HasResolverQueryTimeout() bool {
	if o != nil && !IsNil(o.ResolverQueryTimeout) {
		return true
	}

	return false
}

// SetResolverQueryTimeout gets a reference to the given int64 and assigns it to the ResolverQueryTimeout field.
func (o *GridDns) SetResolverQueryTimeout(v int64) {
	o.ResolverQueryTimeout = &v
}

// GetResponseRateLimiting returns the ResponseRateLimiting field value if set, zero value otherwise.
func (o *GridDns) GetResponseRateLimiting() GridDnsResponseRateLimiting {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		var ret GridDnsResponseRateLimiting
		return ret
	}
	return *o.ResponseRateLimiting
}

// GetResponseRateLimitingOk returns a tuple with the ResponseRateLimiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetResponseRateLimitingOk() (*GridDnsResponseRateLimiting, bool) {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		return nil, false
	}
	return o.ResponseRateLimiting, true
}

// HasResponseRateLimiting returns a boolean if a field has been set.
func (o *GridDns) HasResponseRateLimiting() bool {
	if o != nil && !IsNil(o.ResponseRateLimiting) {
		return true
	}

	return false
}

// SetResponseRateLimiting gets a reference to the given GridDnsResponseRateLimiting and assigns it to the ResponseRateLimiting field.
func (o *GridDns) SetResponseRateLimiting(v GridDnsResponseRateLimiting) {
	o.ResponseRateLimiting = &v
}

// GetRestartSetting returns the RestartSetting field value if set, zero value otherwise.
func (o *GridDns) GetRestartSetting() GridDnsRestartSetting {
	if o == nil || IsNil(o.RestartSetting) {
		var ret GridDnsRestartSetting
		return ret
	}
	return *o.RestartSetting
}

// GetRestartSettingOk returns a tuple with the RestartSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRestartSettingOk() (*GridDnsRestartSetting, bool) {
	if o == nil || IsNil(o.RestartSetting) {
		return nil, false
	}
	return o.RestartSetting, true
}

// HasRestartSetting returns a boolean if a field has been set.
func (o *GridDns) HasRestartSetting() bool {
	if o != nil && !IsNil(o.RestartSetting) {
		return true
	}

	return false
}

// SetRestartSetting gets a reference to the given GridDnsRestartSetting and assigns it to the RestartSetting field.
func (o *GridDns) SetRestartSetting(v GridDnsRestartSetting) {
	o.RestartSetting = &v
}

// GetRetryTimer returns the RetryTimer field value if set, zero value otherwise.
func (o *GridDns) GetRetryTimer() int64 {
	if o == nil || IsNil(o.RetryTimer) {
		var ret int64
		return ret
	}
	return *o.RetryTimer
}

// GetRetryTimerOk returns a tuple with the RetryTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRetryTimerOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryTimer) {
		return nil, false
	}
	return o.RetryTimer, true
}

// HasRetryTimer returns a boolean if a field has been set.
func (o *GridDns) HasRetryTimer() bool {
	if o != nil && !IsNil(o.RetryTimer) {
		return true
	}

	return false
}

// SetRetryTimer gets a reference to the given int64 and assigns it to the RetryTimer field.
func (o *GridDns) SetRetryTimer(v int64) {
	o.RetryTimer = &v
}

// GetRootNameServerType returns the RootNameServerType field value if set, zero value otherwise.
func (o *GridDns) GetRootNameServerType() string {
	if o == nil || IsNil(o.RootNameServerType) {
		var ret string
		return ret
	}
	return *o.RootNameServerType
}

// GetRootNameServerTypeOk returns a tuple with the RootNameServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRootNameServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootNameServerType) {
		return nil, false
	}
	return o.RootNameServerType, true
}

// HasRootNameServerType returns a boolean if a field has been set.
func (o *GridDns) HasRootNameServerType() bool {
	if o != nil && !IsNil(o.RootNameServerType) {
		return true
	}

	return false
}

// SetRootNameServerType gets a reference to the given string and assigns it to the RootNameServerType field.
func (o *GridDns) SetRootNameServerType(v string) {
	o.RootNameServerType = &v
}

// GetRpzDisableNsdnameNsip returns the RpzDisableNsdnameNsip field value if set, zero value otherwise.
func (o *GridDns) GetRpzDisableNsdnameNsip() bool {
	if o == nil || IsNil(o.RpzDisableNsdnameNsip) {
		var ret bool
		return ret
	}
	return *o.RpzDisableNsdnameNsip
}

// GetRpzDisableNsdnameNsipOk returns a tuple with the RpzDisableNsdnameNsip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRpzDisableNsdnameNsipOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDisableNsdnameNsip) {
		return nil, false
	}
	return o.RpzDisableNsdnameNsip, true
}

// HasRpzDisableNsdnameNsip returns a boolean if a field has been set.
func (o *GridDns) HasRpzDisableNsdnameNsip() bool {
	if o != nil && !IsNil(o.RpzDisableNsdnameNsip) {
		return true
	}

	return false
}

// SetRpzDisableNsdnameNsip gets a reference to the given bool and assigns it to the RpzDisableNsdnameNsip field.
func (o *GridDns) SetRpzDisableNsdnameNsip(v bool) {
	o.RpzDisableNsdnameNsip = &v
}

// GetRpzDropIpRuleEnabled returns the RpzDropIpRuleEnabled field value if set, zero value otherwise.
func (o *GridDns) GetRpzDropIpRuleEnabled() bool {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		var ret bool
		return ret
	}
	return *o.RpzDropIpRuleEnabled
}

// GetRpzDropIpRuleEnabledOk returns a tuple with the RpzDropIpRuleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRpzDropIpRuleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		return nil, false
	}
	return o.RpzDropIpRuleEnabled, true
}

// HasRpzDropIpRuleEnabled returns a boolean if a field has been set.
func (o *GridDns) HasRpzDropIpRuleEnabled() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleEnabled) {
		return true
	}

	return false
}

// SetRpzDropIpRuleEnabled gets a reference to the given bool and assigns it to the RpzDropIpRuleEnabled field.
func (o *GridDns) SetRpzDropIpRuleEnabled(v bool) {
	o.RpzDropIpRuleEnabled = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv4 returns the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, zero value otherwise.
func (o *GridDns) GetRpzDropIpRuleMinPrefixLengthIpv4() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv4
}

// GetRpzDropIpRuleMinPrefixLengthIpv4Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRpzDropIpRuleMinPrefixLengthIpv4Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv4, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv4 returns a boolean if a field has been set.
func (o *GridDns) HasRpzDropIpRuleMinPrefixLengthIpv4() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv4 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv4 field.
func (o *GridDns) SetRpzDropIpRuleMinPrefixLengthIpv4(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv4 = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv6 returns the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, zero value otherwise.
func (o *GridDns) GetRpzDropIpRuleMinPrefixLengthIpv6() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv6
}

// GetRpzDropIpRuleMinPrefixLengthIpv6Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRpzDropIpRuleMinPrefixLengthIpv6Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv6, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv6 returns a boolean if a field has been set.
func (o *GridDns) HasRpzDropIpRuleMinPrefixLengthIpv6() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv6 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv6 field.
func (o *GridDns) SetRpzDropIpRuleMinPrefixLengthIpv6(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv6 = &v
}

// GetRpzQnameWaitRecurse returns the RpzQnameWaitRecurse field value if set, zero value otherwise.
func (o *GridDns) GetRpzQnameWaitRecurse() bool {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		var ret bool
		return ret
	}
	return *o.RpzQnameWaitRecurse
}

// GetRpzQnameWaitRecurseOk returns a tuple with the RpzQnameWaitRecurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRpzQnameWaitRecurseOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		return nil, false
	}
	return o.RpzQnameWaitRecurse, true
}

// HasRpzQnameWaitRecurse returns a boolean if a field has been set.
func (o *GridDns) HasRpzQnameWaitRecurse() bool {
	if o != nil && !IsNil(o.RpzQnameWaitRecurse) {
		return true
	}

	return false
}

// SetRpzQnameWaitRecurse gets a reference to the given bool and assigns it to the RpzQnameWaitRecurse field.
func (o *GridDns) SetRpzQnameWaitRecurse(v bool) {
	o.RpzQnameWaitRecurse = &v
}

// GetRunScavenging returns the RunScavenging field value if set, zero value otherwise.
func (o *GridDns) GetRunScavenging() map[string]interface{} {
	if o == nil || IsNil(o.RunScavenging) {
		var ret map[string]interface{}
		return ret
	}
	return o.RunScavenging
}

// GetRunScavengingOk returns a tuple with the RunScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetRunScavengingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RunScavenging) {
		return map[string]interface{}{}, false
	}
	return o.RunScavenging, true
}

// HasRunScavenging returns a boolean if a field has been set.
func (o *GridDns) HasRunScavenging() bool {
	if o != nil && !IsNil(o.RunScavenging) {
		return true
	}

	return false
}

// SetRunScavenging gets a reference to the given map[string]interface{} and assigns it to the RunScavenging field.
func (o *GridDns) SetRunScavenging(v map[string]interface{}) {
	o.RunScavenging = v
}

// GetScavengingSettings returns the ScavengingSettings field value if set, zero value otherwise.
func (o *GridDns) GetScavengingSettings() GridDnsScavengingSettings {
	if o == nil || IsNil(o.ScavengingSettings) {
		var ret GridDnsScavengingSettings
		return ret
	}
	return *o.ScavengingSettings
}

// GetScavengingSettingsOk returns a tuple with the ScavengingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetScavengingSettingsOk() (*GridDnsScavengingSettings, bool) {
	if o == nil || IsNil(o.ScavengingSettings) {
		return nil, false
	}
	return o.ScavengingSettings, true
}

// HasScavengingSettings returns a boolean if a field has been set.
func (o *GridDns) HasScavengingSettings() bool {
	if o != nil && !IsNil(o.ScavengingSettings) {
		return true
	}

	return false
}

// SetScavengingSettings gets a reference to the given GridDnsScavengingSettings and assigns it to the ScavengingSettings field.
func (o *GridDns) SetScavengingSettings(v GridDnsScavengingSettings) {
	o.ScavengingSettings = &v
}

// GetSerialQueryRate returns the SerialQueryRate field value if set, zero value otherwise.
func (o *GridDns) GetSerialQueryRate() int64 {
	if o == nil || IsNil(o.SerialQueryRate) {
		var ret int64
		return ret
	}
	return *o.SerialQueryRate
}

// GetSerialQueryRateOk returns a tuple with the SerialQueryRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetSerialQueryRateOk() (*int64, bool) {
	if o == nil || IsNil(o.SerialQueryRate) {
		return nil, false
	}
	return o.SerialQueryRate, true
}

// HasSerialQueryRate returns a boolean if a field has been set.
func (o *GridDns) HasSerialQueryRate() bool {
	if o != nil && !IsNil(o.SerialQueryRate) {
		return true
	}

	return false
}

// SetSerialQueryRate gets a reference to the given int64 and assigns it to the SerialQueryRate field.
func (o *GridDns) SetSerialQueryRate(v int64) {
	o.SerialQueryRate = &v
}

// GetServerIdDirective returns the ServerIdDirective field value if set, zero value otherwise.
func (o *GridDns) GetServerIdDirective() string {
	if o == nil || IsNil(o.ServerIdDirective) {
		var ret string
		return ret
	}
	return *o.ServerIdDirective
}

// GetServerIdDirectiveOk returns a tuple with the ServerIdDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetServerIdDirectiveOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIdDirective) {
		return nil, false
	}
	return o.ServerIdDirective, true
}

// HasServerIdDirective returns a boolean if a field has been set.
func (o *GridDns) HasServerIdDirective() bool {
	if o != nil && !IsNil(o.ServerIdDirective) {
		return true
	}

	return false
}

// SetServerIdDirective gets a reference to the given string and assigns it to the ServerIdDirective field.
func (o *GridDns) SetServerIdDirective(v string) {
	o.ServerIdDirective = &v
}

// GetSortlist returns the Sortlist field value if set, zero value otherwise.
func (o *GridDns) GetSortlist() []GridDnsSortlist {
	if o == nil || IsNil(o.Sortlist) {
		var ret []GridDnsSortlist
		return ret
	}
	return o.Sortlist
}

// GetSortlistOk returns a tuple with the Sortlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetSortlistOk() ([]GridDnsSortlist, bool) {
	if o == nil || IsNil(o.Sortlist) {
		return nil, false
	}
	return o.Sortlist, true
}

// HasSortlist returns a boolean if a field has been set.
func (o *GridDns) HasSortlist() bool {
	if o != nil && !IsNil(o.Sortlist) {
		return true
	}

	return false
}

// SetSortlist gets a reference to the given []GridDnsSortlist and assigns it to the Sortlist field.
func (o *GridDns) SetSortlist(v []GridDnsSortlist) {
	o.Sortlist = v
}

// GetStoreLocally returns the StoreLocally field value if set, zero value otherwise.
func (o *GridDns) GetStoreLocally() bool {
	if o == nil || IsNil(o.StoreLocally) {
		var ret bool
		return ret
	}
	return *o.StoreLocally
}

// GetStoreLocallyOk returns a tuple with the StoreLocally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetStoreLocallyOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreLocally) {
		return nil, false
	}
	return o.StoreLocally, true
}

// HasStoreLocally returns a boolean if a field has been set.
func (o *GridDns) HasStoreLocally() bool {
	if o != nil && !IsNil(o.StoreLocally) {
		return true
	}

	return false
}

// SetStoreLocally gets a reference to the given bool and assigns it to the StoreLocally field.
func (o *GridDns) SetStoreLocally(v bool) {
	o.StoreLocally = &v
}

// GetSyslogFacility returns the SyslogFacility field value if set, zero value otherwise.
func (o *GridDns) GetSyslogFacility() string {
	if o == nil || IsNil(o.SyslogFacility) {
		var ret string
		return ret
	}
	return *o.SyslogFacility
}

// GetSyslogFacilityOk returns a tuple with the SyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetSyslogFacilityOk() (*string, bool) {
	if o == nil || IsNil(o.SyslogFacility) {
		return nil, false
	}
	return o.SyslogFacility, true
}

// HasSyslogFacility returns a boolean if a field has been set.
func (o *GridDns) HasSyslogFacility() bool {
	if o != nil && !IsNil(o.SyslogFacility) {
		return true
	}

	return false
}

// SetSyslogFacility gets a reference to the given string and assigns it to the SyslogFacility field.
func (o *GridDns) SetSyslogFacility(v string) {
	o.SyslogFacility = &v
}

// GetTransferExcludedServers returns the TransferExcludedServers field value if set, zero value otherwise.
func (o *GridDns) GetTransferExcludedServers() []string {
	if o == nil || IsNil(o.TransferExcludedServers) {
		var ret []string
		return ret
	}
	return o.TransferExcludedServers
}

// GetTransferExcludedServersOk returns a tuple with the TransferExcludedServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetTransferExcludedServersOk() ([]string, bool) {
	if o == nil || IsNil(o.TransferExcludedServers) {
		return nil, false
	}
	return o.TransferExcludedServers, true
}

// HasTransferExcludedServers returns a boolean if a field has been set.
func (o *GridDns) HasTransferExcludedServers() bool {
	if o != nil && !IsNil(o.TransferExcludedServers) {
		return true
	}

	return false
}

// SetTransferExcludedServers gets a reference to the given []string and assigns it to the TransferExcludedServers field.
func (o *GridDns) SetTransferExcludedServers(v []string) {
	o.TransferExcludedServers = v
}

// GetTransferFormat returns the TransferFormat field value if set, zero value otherwise.
func (o *GridDns) GetTransferFormat() string {
	if o == nil || IsNil(o.TransferFormat) {
		var ret string
		return ret
	}
	return *o.TransferFormat
}

// GetTransferFormatOk returns a tuple with the TransferFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetTransferFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TransferFormat) {
		return nil, false
	}
	return o.TransferFormat, true
}

// HasTransferFormat returns a boolean if a field has been set.
func (o *GridDns) HasTransferFormat() bool {
	if o != nil && !IsNil(o.TransferFormat) {
		return true
	}

	return false
}

// SetTransferFormat gets a reference to the given string and assigns it to the TransferFormat field.
func (o *GridDns) SetTransferFormat(v string) {
	o.TransferFormat = &v
}

// GetTransfersIn returns the TransfersIn field value if set, zero value otherwise.
func (o *GridDns) GetTransfersIn() int64 {
	if o == nil || IsNil(o.TransfersIn) {
		var ret int64
		return ret
	}
	return *o.TransfersIn
}

// GetTransfersInOk returns a tuple with the TransfersIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetTransfersInOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersIn) {
		return nil, false
	}
	return o.TransfersIn, true
}

// HasTransfersIn returns a boolean if a field has been set.
func (o *GridDns) HasTransfersIn() bool {
	if o != nil && !IsNil(o.TransfersIn) {
		return true
	}

	return false
}

// SetTransfersIn gets a reference to the given int64 and assigns it to the TransfersIn field.
func (o *GridDns) SetTransfersIn(v int64) {
	o.TransfersIn = &v
}

// GetTransfersOut returns the TransfersOut field value if set, zero value otherwise.
func (o *GridDns) GetTransfersOut() int64 {
	if o == nil || IsNil(o.TransfersOut) {
		var ret int64
		return ret
	}
	return *o.TransfersOut
}

// GetTransfersOutOk returns a tuple with the TransfersOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetTransfersOutOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersOut) {
		return nil, false
	}
	return o.TransfersOut, true
}

// HasTransfersOut returns a boolean if a field has been set.
func (o *GridDns) HasTransfersOut() bool {
	if o != nil && !IsNil(o.TransfersOut) {
		return true
	}

	return false
}

// SetTransfersOut gets a reference to the given int64 and assigns it to the TransfersOut field.
func (o *GridDns) SetTransfersOut(v int64) {
	o.TransfersOut = &v
}

// GetTransfersPerNs returns the TransfersPerNs field value if set, zero value otherwise.
func (o *GridDns) GetTransfersPerNs() int64 {
	if o == nil || IsNil(o.TransfersPerNs) {
		var ret int64
		return ret
	}
	return *o.TransfersPerNs
}

// GetTransfersPerNsOk returns a tuple with the TransfersPerNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetTransfersPerNsOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersPerNs) {
		return nil, false
	}
	return o.TransfersPerNs, true
}

// HasTransfersPerNs returns a boolean if a field has been set.
func (o *GridDns) HasTransfersPerNs() bool {
	if o != nil && !IsNil(o.TransfersPerNs) {
		return true
	}

	return false
}

// SetTransfersPerNs gets a reference to the given int64 and assigns it to the TransfersPerNs field.
func (o *GridDns) SetTransfersPerNs(v int64) {
	o.TransfersPerNs = &v
}

// GetZoneDeletionDoubleConfirm returns the ZoneDeletionDoubleConfirm field value if set, zero value otherwise.
func (o *GridDns) GetZoneDeletionDoubleConfirm() bool {
	if o == nil || IsNil(o.ZoneDeletionDoubleConfirm) {
		var ret bool
		return ret
	}
	return *o.ZoneDeletionDoubleConfirm
}

// GetZoneDeletionDoubleConfirmOk returns a tuple with the ZoneDeletionDoubleConfirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDns) GetZoneDeletionDoubleConfirmOk() (*bool, bool) {
	if o == nil || IsNil(o.ZoneDeletionDoubleConfirm) {
		return nil, false
	}
	return o.ZoneDeletionDoubleConfirm, true
}

// HasZoneDeletionDoubleConfirm returns a boolean if a field has been set.
func (o *GridDns) HasZoneDeletionDoubleConfirm() bool {
	if o != nil && !IsNil(o.ZoneDeletionDoubleConfirm) {
		return true
	}

	return false
}

// SetZoneDeletionDoubleConfirm gets a reference to the given bool and assigns it to the ZoneDeletionDoubleConfirm field.
func (o *GridDns) SetZoneDeletionDoubleConfirm(v bool) {
	o.ZoneDeletionDoubleConfirm = &v
}

func (o GridDns) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridDns) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddClientIpMacOptions) {
		toSerialize["add_client_ip_mac_options"] = o.AddClientIpMacOptions
	}
	if !IsNil(o.AllowBulkhostDdns) {
		toSerialize["allow_bulkhost_ddns"] = o.AllowBulkhostDdns
	}
	if !IsNil(o.AllowGssTsigZoneUpdates) {
		toSerialize["allow_gss_tsig_zone_updates"] = o.AllowGssTsigZoneUpdates
	}
	if !IsNil(o.AllowQuery) {
		toSerialize["allow_query"] = o.AllowQuery
	}
	if !IsNil(o.AllowRecursiveQuery) {
		toSerialize["allow_recursive_query"] = o.AllowRecursiveQuery
	}
	if !IsNil(o.AllowTransfer) {
		toSerialize["allow_transfer"] = o.AllowTransfer
	}
	if !IsNil(o.AllowUpdate) {
		toSerialize["allow_update"] = o.AllowUpdate
	}
	if !IsNil(o.AnonymizeResponseLogging) {
		toSerialize["anonymize_response_logging"] = o.AnonymizeResponseLogging
	}
	if !IsNil(o.AttackMitigation) {
		toSerialize["attack_mitigation"] = o.AttackMitigation
	}
	if !IsNil(o.AutoBlackhole) {
		toSerialize["auto_blackhole"] = o.AutoBlackhole
	}
	if !IsNil(o.BindCheckNamesPolicy) {
		toSerialize["bind_check_names_policy"] = o.BindCheckNamesPolicy
	}
	if !IsNil(o.BindHostnameDirective) {
		toSerialize["bind_hostname_directive"] = o.BindHostnameDirective
	}
	if !IsNil(o.BlackholeList) {
		toSerialize["blackhole_list"] = o.BlackholeList
	}
	if !IsNil(o.BlacklistAction) {
		toSerialize["blacklist_action"] = o.BlacklistAction
	}
	if !IsNil(o.BlacklistLogQuery) {
		toSerialize["blacklist_log_query"] = o.BlacklistLogQuery
	}
	if !IsNil(o.BlacklistRedirectAddresses) {
		toSerialize["blacklist_redirect_addresses"] = o.BlacklistRedirectAddresses
	}
	if !IsNil(o.BlacklistRedirectTtl) {
		toSerialize["blacklist_redirect_ttl"] = o.BlacklistRedirectTtl
	}
	if !IsNil(o.BlacklistRulesets) {
		toSerialize["blacklist_rulesets"] = o.BlacklistRulesets
	}
	if !IsNil(o.BulkHostNameTemplates) {
		toSerialize["bulk_host_name_templates"] = o.BulkHostNameTemplates
	}
	if !IsNil(o.CaptureDnsQueriesOnAllDomains) {
		toSerialize["capture_dns_queries_on_all_domains"] = o.CaptureDnsQueriesOnAllDomains
	}
	if !IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		toSerialize["check_names_for_ddns_and_zone_transfer"] = o.CheckNamesForDdnsAndZoneTransfer
	}
	if !IsNil(o.ClientSubnetDomains) {
		toSerialize["client_subnet_domains"] = o.ClientSubnetDomains
	}
	if !IsNil(o.ClientSubnetIpv4PrefixLength) {
		toSerialize["client_subnet_ipv4_prefix_length"] = o.ClientSubnetIpv4PrefixLength
	}
	if !IsNil(o.ClientSubnetIpv6PrefixLength) {
		toSerialize["client_subnet_ipv6_prefix_length"] = o.ClientSubnetIpv6PrefixLength
	}
	if !IsNil(o.CopyClientIpMacOptions) {
		toSerialize["copy_client_ip_mac_options"] = o.CopyClientIpMacOptions
	}
	if !IsNil(o.CopyXferToNotify) {
		toSerialize["copy_xfer_to_notify"] = o.CopyXferToNotify
	}
	if !IsNil(o.CustomRootNameServers) {
		toSerialize["custom_root_name_servers"] = o.CustomRootNameServers
	}
	if !IsNil(o.DdnsForceCreationTimestampUpdate) {
		toSerialize["ddns_force_creation_timestamp_update"] = o.DdnsForceCreationTimestampUpdate
	}
	if !IsNil(o.DdnsPrincipalGroup) {
		toSerialize["ddns_principal_group"] = o.DdnsPrincipalGroup
	}
	if !IsNil(o.DdnsPrincipalTracking) {
		toSerialize["ddns_principal_tracking"] = o.DdnsPrincipalTracking
	}
	if !IsNil(o.DdnsRestrictPatterns) {
		toSerialize["ddns_restrict_patterns"] = o.DdnsRestrictPatterns
	}
	if !IsNil(o.DdnsRestrictPatternsList) {
		toSerialize["ddns_restrict_patterns_list"] = o.DdnsRestrictPatternsList
	}
	if !IsNil(o.DdnsRestrictProtected) {
		toSerialize["ddns_restrict_protected"] = o.DdnsRestrictProtected
	}
	if !IsNil(o.DdnsRestrictSecure) {
		toSerialize["ddns_restrict_secure"] = o.DdnsRestrictSecure
	}
	if !IsNil(o.DdnsRestrictStatic) {
		toSerialize["ddns_restrict_static"] = o.DdnsRestrictStatic
	}
	if !IsNil(o.DefaultBulkHostNameTemplate) {
		toSerialize["default_bulk_host_name_template"] = o.DefaultBulkHostNameTemplate
	}
	if !IsNil(o.DefaultTtl) {
		toSerialize["default_ttl"] = o.DefaultTtl
	}
	if !IsNil(o.DisableEdns) {
		toSerialize["disable_edns"] = o.DisableEdns
	}
	if !IsNil(o.Dns64Groups) {
		toSerialize["dns64_groups"] = o.Dns64Groups
	}
	if !IsNil(o.DnsCacheAccelerationTtl) {
		toSerialize["dns_cache_acceleration_ttl"] = o.DnsCacheAccelerationTtl
	}
	if !IsNil(o.DnsHealthCheckAnycastControl) {
		toSerialize["dns_health_check_anycast_control"] = o.DnsHealthCheckAnycastControl
	}
	if !IsNil(o.DnsHealthCheckDomainList) {
		toSerialize["dns_health_check_domain_list"] = o.DnsHealthCheckDomainList
	}
	if !IsNil(o.DnsHealthCheckInterval) {
		toSerialize["dns_health_check_interval"] = o.DnsHealthCheckInterval
	}
	if !IsNil(o.DnsHealthCheckRecursionFlag) {
		toSerialize["dns_health_check_recursion_flag"] = o.DnsHealthCheckRecursionFlag
	}
	if !IsNil(o.DnsHealthCheckRetries) {
		toSerialize["dns_health_check_retries"] = o.DnsHealthCheckRetries
	}
	if !IsNil(o.DnsHealthCheckTimeout) {
		toSerialize["dns_health_check_timeout"] = o.DnsHealthCheckTimeout
	}
	if !IsNil(o.DnsQueryCaptureFileTimeLimit) {
		toSerialize["dns_query_capture_file_time_limit"] = o.DnsQueryCaptureFileTimeLimit
	}
	if !IsNil(o.DnssecBlacklistEnabled) {
		toSerialize["dnssec_blacklist_enabled"] = o.DnssecBlacklistEnabled
	}
	if !IsNil(o.DnssecDns64Enabled) {
		toSerialize["dnssec_dns64_enabled"] = o.DnssecDns64Enabled
	}
	if !IsNil(o.DnssecEnabled) {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if !IsNil(o.DnssecExpiredSignaturesEnabled) {
		toSerialize["dnssec_expired_signatures_enabled"] = o.DnssecExpiredSignaturesEnabled
	}
	if !IsNil(o.DnssecKeyParams) {
		toSerialize["dnssec_key_params"] = o.DnssecKeyParams
	}
	if !IsNil(o.DnssecNegativeTrustAnchors) {
		toSerialize["dnssec_negative_trust_anchors"] = o.DnssecNegativeTrustAnchors
	}
	if !IsNil(o.DnssecNxdomainEnabled) {
		toSerialize["dnssec_nxdomain_enabled"] = o.DnssecNxdomainEnabled
	}
	if !IsNil(o.DnssecRpzEnabled) {
		toSerialize["dnssec_rpz_enabled"] = o.DnssecRpzEnabled
	}
	if !IsNil(o.DnssecTrustedKeys) {
		toSerialize["dnssec_trusted_keys"] = o.DnssecTrustedKeys
	}
	if !IsNil(o.DnssecValidationEnabled) {
		toSerialize["dnssec_validation_enabled"] = o.DnssecValidationEnabled
	}
	if !IsNil(o.DnstapSetting) {
		toSerialize["dnstap_setting"] = o.DnstapSetting
	}
	if !IsNil(o.DomainsToCaptureDnsQueries) {
		toSerialize["domains_to_capture_dns_queries"] = o.DomainsToCaptureDnsQueries
	}
	if !IsNil(o.DtcDnsQueriesSpecificBehavior) {
		toSerialize["dtc_dns_queries_specific_behavior"] = o.DtcDnsQueriesSpecificBehavior
	}
	if !IsNil(o.DtcDnssecMode) {
		toSerialize["dtc_dnssec_mode"] = o.DtcDnssecMode
	}
	if !IsNil(o.DtcEdnsPreferClientSubnet) {
		toSerialize["dtc_edns_prefer_client_subnet"] = o.DtcEdnsPreferClientSubnet
	}
	if !IsNil(o.DtcScheduledBackup) {
		toSerialize["dtc_scheduled_backup"] = o.DtcScheduledBackup
	}
	if !IsNil(o.DtcTopologyEaList) {
		toSerialize["dtc_topology_ea_list"] = o.DtcTopologyEaList
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnableBlackhole) {
		toSerialize["enable_blackhole"] = o.EnableBlackhole
	}
	if !IsNil(o.EnableBlacklist) {
		toSerialize["enable_blacklist"] = o.EnableBlacklist
	}
	if !IsNil(o.EnableCaptureDnsQueries) {
		toSerialize["enable_capture_dns_queries"] = o.EnableCaptureDnsQueries
	}
	if !IsNil(o.EnableCaptureDnsResponses) {
		toSerialize["enable_capture_dns_responses"] = o.EnableCaptureDnsResponses
	}
	if !IsNil(o.EnableClientSubnetForwarding) {
		toSerialize["enable_client_subnet_forwarding"] = o.EnableClientSubnetForwarding
	}
	if !IsNil(o.EnableClientSubnetRecursive) {
		toSerialize["enable_client_subnet_recursive"] = o.EnableClientSubnetRecursive
	}
	if !IsNil(o.EnableDeleteAssociatedPtr) {
		toSerialize["enable_delete_associated_ptr"] = o.EnableDeleteAssociatedPtr
	}
	if !IsNil(o.EnableDns64) {
		toSerialize["enable_dns64"] = o.EnableDns64
	}
	if !IsNil(o.EnableDnsHealthCheck) {
		toSerialize["enable_dns_health_check"] = o.EnableDnsHealthCheck
	}
	if !IsNil(o.EnableDnstapQueries) {
		toSerialize["enable_dnstap_queries"] = o.EnableDnstapQueries
	}
	if !IsNil(o.EnableDnstapResponses) {
		toSerialize["enable_dnstap_responses"] = o.EnableDnstapResponses
	}
	if !IsNil(o.EnableExcludedDomainNames) {
		toSerialize["enable_excluded_domain_names"] = o.EnableExcludedDomainNames
	}
	if !IsNil(o.EnableFixedRrsetOrderFqdns) {
		toSerialize["enable_fixed_rrset_order_fqdns"] = o.EnableFixedRrsetOrderFqdns
	}
	if !IsNil(o.EnableFtc) {
		toSerialize["enable_ftc"] = o.EnableFtc
	}
	if !IsNil(o.EnableGssTsig) {
		toSerialize["enable_gss_tsig"] = o.EnableGssTsig
	}
	if !IsNil(o.EnableHostRrsetOrder) {
		toSerialize["enable_host_rrset_order"] = o.EnableHostRrsetOrder
	}
	if !IsNil(o.EnableHsmSigning) {
		toSerialize["enable_hsm_signing"] = o.EnableHsmSigning
	}
	if !IsNil(o.EnableNotifySourcePort) {
		toSerialize["enable_notify_source_port"] = o.EnableNotifySourcePort
	}
	if !IsNil(o.EnableQueryRewrite) {
		toSerialize["enable_query_rewrite"] = o.EnableQueryRewrite
	}
	if !IsNil(o.EnableQuerySourcePort) {
		toSerialize["enable_query_source_port"] = o.EnableQuerySourcePort
	}
	if !IsNil(o.ExcludedDomainNames) {
		toSerialize["excluded_domain_names"] = o.ExcludedDomainNames
	}
	if !IsNil(o.ExpireAfter) {
		toSerialize["expire_after"] = o.ExpireAfter
	}
	if !IsNil(o.FileTransferSetting) {
		toSerialize["file_transfer_setting"] = o.FileTransferSetting
	}
	if !IsNil(o.FilterAaaa) {
		toSerialize["filter_aaaa"] = o.FilterAaaa
	}
	if !IsNil(o.FilterAaaaList) {
		toSerialize["filter_aaaa_list"] = o.FilterAaaaList
	}
	if !IsNil(o.FixedRrsetOrderFqdns) {
		toSerialize["fixed_rrset_order_fqdns"] = o.FixedRrsetOrderFqdns
	}
	if !IsNil(o.ForwardOnly) {
		toSerialize["forward_only"] = o.ForwardOnly
	}
	if !IsNil(o.ForwardUpdates) {
		toSerialize["forward_updates"] = o.ForwardUpdates
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.FtcExpiredRecordTimeout) {
		toSerialize["ftc_expired_record_timeout"] = o.FtcExpiredRecordTimeout
	}
	if !IsNil(o.FtcExpiredRecordTtl) {
		toSerialize["ftc_expired_record_ttl"] = o.FtcExpiredRecordTtl
	}
	if !IsNil(o.GenEadbFromHosts) {
		toSerialize["gen_eadb_from_hosts"] = o.GenEadbFromHosts
	}
	if !IsNil(o.GenEadbFromNetworkContainers) {
		toSerialize["gen_eadb_from_network_containers"] = o.GenEadbFromNetworkContainers
	}
	if !IsNil(o.GenEadbFromNetworks) {
		toSerialize["gen_eadb_from_networks"] = o.GenEadbFromNetworks
	}
	if !IsNil(o.GenEadbFromRanges) {
		toSerialize["gen_eadb_from_ranges"] = o.GenEadbFromRanges
	}
	if !IsNil(o.GssTsigKeys) {
		toSerialize["gss_tsig_keys"] = o.GssTsigKeys
	}
	if !IsNil(o.LastQueriedAcl) {
		toSerialize["last_queried_acl"] = o.LastQueriedAcl
	}
	if !IsNil(o.LoggingCategories) {
		toSerialize["logging_categories"] = o.LoggingCategories
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxCachedLifetime) {
		toSerialize["max_cached_lifetime"] = o.MaxCachedLifetime
	}
	if !IsNil(o.MaxNcacheTtl) {
		toSerialize["max_ncache_ttl"] = o.MaxNcacheTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.MemberSecondaryNotify) {
		toSerialize["member_secondary_notify"] = o.MemberSecondaryNotify
	}
	if !IsNil(o.NegativeTtl) {
		toSerialize["negative_ttl"] = o.NegativeTtl
	}
	if !IsNil(o.NotifyDelay) {
		toSerialize["notify_delay"] = o.NotifyDelay
	}
	if !IsNil(o.NotifySourcePort) {
		toSerialize["notify_source_port"] = o.NotifySourcePort
	}
	if !IsNil(o.NsgroupDefault) {
		toSerialize["nsgroup_default"] = o.NsgroupDefault
	}
	if !IsNil(o.Nsgroups) {
		toSerialize["nsgroups"] = o.Nsgroups
	}
	if !IsNil(o.NxdomainLogQuery) {
		toSerialize["nxdomain_log_query"] = o.NxdomainLogQuery
	}
	if !IsNil(o.NxdomainRedirect) {
		toSerialize["nxdomain_redirect"] = o.NxdomainRedirect
	}
	if !IsNil(o.NxdomainRedirectAddresses) {
		toSerialize["nxdomain_redirect_addresses"] = o.NxdomainRedirectAddresses
	}
	if !IsNil(o.NxdomainRedirectAddressesV6) {
		toSerialize["nxdomain_redirect_addresses_v6"] = o.NxdomainRedirectAddressesV6
	}
	if !IsNil(o.NxdomainRedirectTtl) {
		toSerialize["nxdomain_redirect_ttl"] = o.NxdomainRedirectTtl
	}
	if !IsNil(o.NxdomainRulesets) {
		toSerialize["nxdomain_rulesets"] = o.NxdomainRulesets
	}
	if !IsNil(o.PreserveHostRrsetOrderOnSecondaries) {
		toSerialize["preserve_host_rrset_order_on_secondaries"] = o.PreserveHostRrsetOrderOnSecondaries
	}
	if !IsNil(o.ProtocolRecordNamePolicies) {
		toSerialize["protocol_record_name_policies"] = o.ProtocolRecordNamePolicies
	}
	if !IsNil(o.QueryRewriteDomainNames) {
		toSerialize["query_rewrite_domain_names"] = o.QueryRewriteDomainNames
	}
	if !IsNil(o.QueryRewritePrefix) {
		toSerialize["query_rewrite_prefix"] = o.QueryRewritePrefix
	}
	if !IsNil(o.QuerySourcePort) {
		toSerialize["query_source_port"] = o.QuerySourcePort
	}
	if !IsNil(o.RecursiveQueryList) {
		toSerialize["recursive_query_list"] = o.RecursiveQueryList
	}
	if !IsNil(o.RefreshTimer) {
		toSerialize["refresh_timer"] = o.RefreshTimer
	}
	if !IsNil(o.ResolverQueryTimeout) {
		toSerialize["resolver_query_timeout"] = o.ResolverQueryTimeout
	}
	if !IsNil(o.ResponseRateLimiting) {
		toSerialize["response_rate_limiting"] = o.ResponseRateLimiting
	}
	if !IsNil(o.RestartSetting) {
		toSerialize["restart_setting"] = o.RestartSetting
	}
	if !IsNil(o.RetryTimer) {
		toSerialize["retry_timer"] = o.RetryTimer
	}
	if !IsNil(o.RootNameServerType) {
		toSerialize["root_name_server_type"] = o.RootNameServerType
	}
	if !IsNil(o.RpzDisableNsdnameNsip) {
		toSerialize["rpz_disable_nsdname_nsip"] = o.RpzDisableNsdnameNsip
	}
	if !IsNil(o.RpzDropIpRuleEnabled) {
		toSerialize["rpz_drop_ip_rule_enabled"] = o.RpzDropIpRuleEnabled
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv4"] = o.RpzDropIpRuleMinPrefixLengthIpv4
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv6"] = o.RpzDropIpRuleMinPrefixLengthIpv6
	}
	if !IsNil(o.RpzQnameWaitRecurse) {
		toSerialize["rpz_qname_wait_recurse"] = o.RpzQnameWaitRecurse
	}
	if !IsNil(o.RunScavenging) {
		toSerialize["run_scavenging"] = o.RunScavenging
	}
	if !IsNil(o.ScavengingSettings) {
		toSerialize["scavenging_settings"] = o.ScavengingSettings
	}
	if !IsNil(o.SerialQueryRate) {
		toSerialize["serial_query_rate"] = o.SerialQueryRate
	}
	if !IsNil(o.ServerIdDirective) {
		toSerialize["server_id_directive"] = o.ServerIdDirective
	}
	if !IsNil(o.Sortlist) {
		toSerialize["sortlist"] = o.Sortlist
	}
	if !IsNil(o.StoreLocally) {
		toSerialize["store_locally"] = o.StoreLocally
	}
	if !IsNil(o.SyslogFacility) {
		toSerialize["syslog_facility"] = o.SyslogFacility
	}
	if !IsNil(o.TransferExcludedServers) {
		toSerialize["transfer_excluded_servers"] = o.TransferExcludedServers
	}
	if !IsNil(o.TransferFormat) {
		toSerialize["transfer_format"] = o.TransferFormat
	}
	if !IsNil(o.TransfersIn) {
		toSerialize["transfers_in"] = o.TransfersIn
	}
	if !IsNil(o.TransfersOut) {
		toSerialize["transfers_out"] = o.TransfersOut
	}
	if !IsNil(o.TransfersPerNs) {
		toSerialize["transfers_per_ns"] = o.TransfersPerNs
	}
	if !IsNil(o.ZoneDeletionDoubleConfirm) {
		toSerialize["zone_deletion_double_confirm"] = o.ZoneDeletionDoubleConfirm
	}
	return toSerialize, nil
}

type NullableGridDns struct {
	value *GridDns
	isSet bool
}

func (v NullableGridDns) Get() *GridDns {
	return v.value
}

func (v *NullableGridDns) Set(val *GridDns) {
	v.value = val
	v.isSet = true
}

func (v NullableGridDns) IsSet() bool {
	return v.isSet
}

func (v *NullableGridDns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridDns(val *GridDns) *NullableGridDns {
	return &NullableGridDns{value: val, isSet: true}
}

func (v NullableGridDns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridDns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
