/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridDnsClientSubnetDomains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridDnsClientSubnetDomains{}

// GridDnsClientSubnetDomains struct for GridDnsClientSubnetDomains
type GridDnsClientSubnetDomains struct {
	// The FQDN that represents the ECS zone domain name.
	Domain *string `json:"domain,omitempty"`
	// The ECS domain name permission.
	Permission           *string `json:"permission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridDnsClientSubnetDomains GridDnsClientSubnetDomains

// NewGridDnsClientSubnetDomains instantiates a new GridDnsClientSubnetDomains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridDnsClientSubnetDomains() *GridDnsClientSubnetDomains {
	this := GridDnsClientSubnetDomains{}
	return &this
}

// NewGridDnsClientSubnetDomainsWithDefaults instantiates a new GridDnsClientSubnetDomains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridDnsClientSubnetDomainsWithDefaults() *GridDnsClientSubnetDomains {
	this := GridDnsClientSubnetDomains{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *GridDnsClientSubnetDomains) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsClientSubnetDomains) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *GridDnsClientSubnetDomains) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *GridDnsClientSubnetDomains) SetDomain(v string) {
	o.Domain = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *GridDnsClientSubnetDomains) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsClientSubnetDomains) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *GridDnsClientSubnetDomains) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *GridDnsClientSubnetDomains) SetPermission(v string) {
	o.Permission = &v
}

func (o GridDnsClientSubnetDomains) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridDnsClientSubnetDomains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridDnsClientSubnetDomains) UnmarshalJSON(data []byte) (err error) {
	varGridDnsClientSubnetDomains := _GridDnsClientSubnetDomains{}

	err = json.Unmarshal(data, &varGridDnsClientSubnetDomains)

	if err != nil {
		return err
	}

	*o = GridDnsClientSubnetDomains(varGridDnsClientSubnetDomains)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "permission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridDnsClientSubnetDomains struct {
	value *GridDnsClientSubnetDomains
	isSet bool
}

func (v NullableGridDnsClientSubnetDomains) Get() *GridDnsClientSubnetDomains {
	return v.value
}

func (v *NullableGridDnsClientSubnetDomains) Set(val *GridDnsClientSubnetDomains) {
	v.value = val
	v.isSet = true
}

func (v NullableGridDnsClientSubnetDomains) IsSet() bool {
	return v.isSet
}

func (v *NullableGridDnsClientSubnetDomains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridDnsClientSubnetDomains(val *GridDnsClientSubnetDomains) *NullableGridDnsClientSubnetDomains {
	return &NullableGridDnsClientSubnetDomains{value: val, isSet: true}
}

func (v NullableGridDnsClientSubnetDomains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridDnsClientSubnetDomains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
