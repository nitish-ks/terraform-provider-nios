/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridDnsResponseRateLimiting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridDnsResponseRateLimiting{}

// GridDnsResponseRateLimiting struct for GridDnsResponseRateLimiting
type GridDnsResponseRateLimiting struct {
	// Determines if the response rate limiting is enabled or not.
	EnableRrl *bool `json:"enable_rrl,omitempty"`
	// Determines if logging for response rate limiting without dropping any requests is enabled or not.
	LogOnly *bool `json:"log_only,omitempty"`
	// The number of responses per client per second.
	ResponsesPerSecond *int64 `json:"responses_per_second,omitempty"`
	// The time interval in seconds over which responses are tracked.
	Window *int64 `json:"window,omitempty"`
	// The response rate limiting slip. Note that if slip is not equal to 0 every n-th rate-limited UDP request is sent a truncated response instead of being dropped.
	Slip                 *int64 `json:"slip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridDnsResponseRateLimiting GridDnsResponseRateLimiting

// NewGridDnsResponseRateLimiting instantiates a new GridDnsResponseRateLimiting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridDnsResponseRateLimiting() *GridDnsResponseRateLimiting {
	this := GridDnsResponseRateLimiting{}
	return &this
}

// NewGridDnsResponseRateLimitingWithDefaults instantiates a new GridDnsResponseRateLimiting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridDnsResponseRateLimitingWithDefaults() *GridDnsResponseRateLimiting {
	this := GridDnsResponseRateLimiting{}
	return &this
}

// GetEnableRrl returns the EnableRrl field value if set, zero value otherwise.
func (o *GridDnsResponseRateLimiting) GetEnableRrl() bool {
	if o == nil || IsNil(o.EnableRrl) {
		var ret bool
		return ret
	}
	return *o.EnableRrl
}

// GetEnableRrlOk returns a tuple with the EnableRrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsResponseRateLimiting) GetEnableRrlOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRrl) {
		return nil, false
	}
	return o.EnableRrl, true
}

// HasEnableRrl returns a boolean if a field has been set.
func (o *GridDnsResponseRateLimiting) HasEnableRrl() bool {
	if o != nil && !IsNil(o.EnableRrl) {
		return true
	}

	return false
}

// SetEnableRrl gets a reference to the given bool and assigns it to the EnableRrl field.
func (o *GridDnsResponseRateLimiting) SetEnableRrl(v bool) {
	o.EnableRrl = &v
}

// GetLogOnly returns the LogOnly field value if set, zero value otherwise.
func (o *GridDnsResponseRateLimiting) GetLogOnly() bool {
	if o == nil || IsNil(o.LogOnly) {
		var ret bool
		return ret
	}
	return *o.LogOnly
}

// GetLogOnlyOk returns a tuple with the LogOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsResponseRateLimiting) GetLogOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.LogOnly) {
		return nil, false
	}
	return o.LogOnly, true
}

// HasLogOnly returns a boolean if a field has been set.
func (o *GridDnsResponseRateLimiting) HasLogOnly() bool {
	if o != nil && !IsNil(o.LogOnly) {
		return true
	}

	return false
}

// SetLogOnly gets a reference to the given bool and assigns it to the LogOnly field.
func (o *GridDnsResponseRateLimiting) SetLogOnly(v bool) {
	o.LogOnly = &v
}

// GetResponsesPerSecond returns the ResponsesPerSecond field value if set, zero value otherwise.
func (o *GridDnsResponseRateLimiting) GetResponsesPerSecond() int64 {
	if o == nil || IsNil(o.ResponsesPerSecond) {
		var ret int64
		return ret
	}
	return *o.ResponsesPerSecond
}

// GetResponsesPerSecondOk returns a tuple with the ResponsesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsResponseRateLimiting) GetResponsesPerSecondOk() (*int64, bool) {
	if o == nil || IsNil(o.ResponsesPerSecond) {
		return nil, false
	}
	return o.ResponsesPerSecond, true
}

// HasResponsesPerSecond returns a boolean if a field has been set.
func (o *GridDnsResponseRateLimiting) HasResponsesPerSecond() bool {
	if o != nil && !IsNil(o.ResponsesPerSecond) {
		return true
	}

	return false
}

// SetResponsesPerSecond gets a reference to the given int64 and assigns it to the ResponsesPerSecond field.
func (o *GridDnsResponseRateLimiting) SetResponsesPerSecond(v int64) {
	o.ResponsesPerSecond = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *GridDnsResponseRateLimiting) GetWindow() int64 {
	if o == nil || IsNil(o.Window) {
		var ret int64
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsResponseRateLimiting) GetWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.Window) {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *GridDnsResponseRateLimiting) HasWindow() bool {
	if o != nil && !IsNil(o.Window) {
		return true
	}

	return false
}

// SetWindow gets a reference to the given int64 and assigns it to the Window field.
func (o *GridDnsResponseRateLimiting) SetWindow(v int64) {
	o.Window = &v
}

// GetSlip returns the Slip field value if set, zero value otherwise.
func (o *GridDnsResponseRateLimiting) GetSlip() int64 {
	if o == nil || IsNil(o.Slip) {
		var ret int64
		return ret
	}
	return *o.Slip
}

// GetSlipOk returns a tuple with the Slip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsResponseRateLimiting) GetSlipOk() (*int64, bool) {
	if o == nil || IsNil(o.Slip) {
		return nil, false
	}
	return o.Slip, true
}

// HasSlip returns a boolean if a field has been set.
func (o *GridDnsResponseRateLimiting) HasSlip() bool {
	if o != nil && !IsNil(o.Slip) {
		return true
	}

	return false
}

// SetSlip gets a reference to the given int64 and assigns it to the Slip field.
func (o *GridDnsResponseRateLimiting) SetSlip(v int64) {
	o.Slip = &v
}

func (o GridDnsResponseRateLimiting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridDnsResponseRateLimiting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableRrl) {
		toSerialize["enable_rrl"] = o.EnableRrl
	}
	if !IsNil(o.LogOnly) {
		toSerialize["log_only"] = o.LogOnly
	}
	if !IsNil(o.ResponsesPerSecond) {
		toSerialize["responses_per_second"] = o.ResponsesPerSecond
	}
	if !IsNil(o.Window) {
		toSerialize["window"] = o.Window
	}
	if !IsNil(o.Slip) {
		toSerialize["slip"] = o.Slip
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridDnsResponseRateLimiting) UnmarshalJSON(data []byte) (err error) {
	varGridDnsResponseRateLimiting := _GridDnsResponseRateLimiting{}

	err = json.Unmarshal(data, &varGridDnsResponseRateLimiting)

	if err != nil {
		return err
	}

	*o = GridDnsResponseRateLimiting(varGridDnsResponseRateLimiting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable_rrl")
		delete(additionalProperties, "log_only")
		delete(additionalProperties, "responses_per_second")
		delete(additionalProperties, "window")
		delete(additionalProperties, "slip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridDnsResponseRateLimiting struct {
	value *GridDnsResponseRateLimiting
	isSet bool
}

func (v NullableGridDnsResponseRateLimiting) Get() *GridDnsResponseRateLimiting {
	return v.value
}

func (v *NullableGridDnsResponseRateLimiting) Set(val *GridDnsResponseRateLimiting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridDnsResponseRateLimiting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridDnsResponseRateLimiting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridDnsResponseRateLimiting(val *GridDnsResponseRateLimiting) *NullableGridDnsResponseRateLimiting {
	return &NullableGridDnsResponseRateLimiting{value: val, isSet: true}
}

func (v NullableGridDnsResponseRateLimiting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridDnsResponseRateLimiting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
