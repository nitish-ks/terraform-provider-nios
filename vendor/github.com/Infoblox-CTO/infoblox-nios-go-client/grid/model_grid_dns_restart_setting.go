/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridDnsRestartSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridDnsRestartSetting{}

// GridDnsRestartSetting struct for GridDnsRestartSetting
type GridDnsRestartSetting struct {
	// The time duration to delay a restart for a restart group.
	Delay *int64 `json:"delay,omitempty"`
	// The duration of timeout for a restart group. The value \"-1\" means infinite.
	Timeout *string `json:"timeout,omitempty"`
	// Determines whether the Grid should try to restart offline member.
	RestartOffline       *bool `json:"restart_offline,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridDnsRestartSetting GridDnsRestartSetting

// NewGridDnsRestartSetting instantiates a new GridDnsRestartSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridDnsRestartSetting() *GridDnsRestartSetting {
	this := GridDnsRestartSetting{}
	return &this
}

// NewGridDnsRestartSettingWithDefaults instantiates a new GridDnsRestartSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridDnsRestartSettingWithDefaults() *GridDnsRestartSetting {
	this := GridDnsRestartSetting{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *GridDnsRestartSetting) GetDelay() int64 {
	if o == nil || IsNil(o.Delay) {
		var ret int64
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsRestartSetting) GetDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *GridDnsRestartSetting) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int64 and assigns it to the Delay field.
func (o *GridDnsRestartSetting) SetDelay(v int64) {
	o.Delay = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *GridDnsRestartSetting) GetTimeout() string {
	if o == nil || IsNil(o.Timeout) {
		var ret string
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsRestartSetting) GetTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *GridDnsRestartSetting) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *GridDnsRestartSetting) SetTimeout(v string) {
	o.Timeout = &v
}

// GetRestartOffline returns the RestartOffline field value if set, zero value otherwise.
func (o *GridDnsRestartSetting) GetRestartOffline() bool {
	if o == nil || IsNil(o.RestartOffline) {
		var ret bool
		return ret
	}
	return *o.RestartOffline
}

// GetRestartOfflineOk returns a tuple with the RestartOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridDnsRestartSetting) GetRestartOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartOffline) {
		return nil, false
	}
	return o.RestartOffline, true
}

// HasRestartOffline returns a boolean if a field has been set.
func (o *GridDnsRestartSetting) HasRestartOffline() bool {
	if o != nil && !IsNil(o.RestartOffline) {
		return true
	}

	return false
}

// SetRestartOffline gets a reference to the given bool and assigns it to the RestartOffline field.
func (o *GridDnsRestartSetting) SetRestartOffline(v bool) {
	o.RestartOffline = &v
}

func (o GridDnsRestartSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridDnsRestartSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.RestartOffline) {
		toSerialize["restart_offline"] = o.RestartOffline
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridDnsRestartSetting) UnmarshalJSON(data []byte) (err error) {
	varGridDnsRestartSetting := _GridDnsRestartSetting{}

	err = json.Unmarshal(data, &varGridDnsRestartSetting)

	if err != nil {
		return err
	}

	*o = GridDnsRestartSetting(varGridDnsRestartSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "delay")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "restart_offline")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridDnsRestartSetting struct {
	value *GridDnsRestartSetting
	isSet bool
}

func (v NullableGridDnsRestartSetting) Get() *GridDnsRestartSetting {
	return v.value
}

func (v *NullableGridDnsRestartSetting) Set(val *GridDnsRestartSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridDnsRestartSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridDnsRestartSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridDnsRestartSetting(val *GridDnsRestartSetting) *NullableGridDnsRestartSetting {
	return &NullableGridDnsRestartSetting{value: val, isSet: true}
}

func (v NullableGridDnsRestartSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridDnsRestartSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
