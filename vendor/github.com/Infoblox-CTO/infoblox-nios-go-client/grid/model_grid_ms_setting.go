/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridMsSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridMsSetting{}

// GridMsSetting struct for GridMsSetting
type GridMsSetting struct {
	// The logging of synchronization messages to the syslog or mslog.
	LogDestination *string `json:"log_destination,omitempty"`
	// Determines if the invalid MAC address synchronization for DHCP leases and fixed addresses is enabled or not.
	EnableInvalidMac *bool `json:"enable_invalid_mac,omitempty"`
	// Determines the maximum number of connections to Microsoft servers.
	MaxConnection *int64 `json:"max_connection,omitempty"`
	// Determines the timeout value (in seconds) for RPC connections to all Microsoft servers.
	RpcTimeout *int64 `json:"rpc_timeout,omitempty"`
	// Determines if the monitoring and control of DHCP service on all Microsoft servers in the Grid is enabled or not.
	EnableDhcpMonitoring *bool `json:"enable_dhcp_monitoring,omitempty"`
	// Determines if the monitoring and control of DNS service on all Microsoft servers in the Grid is enabled or not.
	EnableDnsMonitoring *bool `json:"enable_dns_monitoring,omitempty"`
	// Determines an LDAP connection timeout interval (in seconds) for all Microsoft servers.
	LdapTimeout *int64 `json:"ldap_timeout,omitempty"`
	// The default IP site link for sites created on NIOS for all Microsoft servers.
	DefaultIpSiteLink *string `json:"default_ip_site_link,omitempty"`
	// Determines if the Network Users creation is enabled or not.
	EnableNetworkUsers *bool `json:"enable_network_users,omitempty"`
	// Determines if Active Directory user synchronization for all Microsoft servers in the Grid is enabled or not.
	EnableAdUserSync *bool `json:"enable_ad_user_sync,omitempty"`
	// Determines the default timeout value (in seconds) for Active Directory user synchronization for all Microsoft servers.
	AdUserDefaultTimeout *int64 `json:"ad_user_default_timeout,omitempty"`
	// Determines if synchronization of DNS reporting data from all Microsoft servers in the Grid is enabled or not.
	EnableDnsReportsSync *bool `json:"enable_dns_reports_sync,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridMsSetting GridMsSetting

// NewGridMsSetting instantiates a new GridMsSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridMsSetting() *GridMsSetting {
	this := GridMsSetting{}
	return &this
}

// NewGridMsSettingWithDefaults instantiates a new GridMsSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridMsSettingWithDefaults() *GridMsSetting {
	this := GridMsSetting{}
	return &this
}

// GetLogDestination returns the LogDestination field value if set, zero value otherwise.
func (o *GridMsSetting) GetLogDestination() string {
	if o == nil || IsNil(o.LogDestination) {
		var ret string
		return ret
	}
	return *o.LogDestination
}

// GetLogDestinationOk returns a tuple with the LogDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetLogDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.LogDestination) {
		return nil, false
	}
	return o.LogDestination, true
}

// HasLogDestination returns a boolean if a field has been set.
func (o *GridMsSetting) HasLogDestination() bool {
	if o != nil && !IsNil(o.LogDestination) {
		return true
	}

	return false
}

// SetLogDestination gets a reference to the given string and assigns it to the LogDestination field.
func (o *GridMsSetting) SetLogDestination(v string) {
	o.LogDestination = &v
}

// GetEnableInvalidMac returns the EnableInvalidMac field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableInvalidMac() bool {
	if o == nil || IsNil(o.EnableInvalidMac) {
		var ret bool
		return ret
	}
	return *o.EnableInvalidMac
}

// GetEnableInvalidMacOk returns a tuple with the EnableInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableInvalidMac) {
		return nil, false
	}
	return o.EnableInvalidMac, true
}

// HasEnableInvalidMac returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableInvalidMac() bool {
	if o != nil && !IsNil(o.EnableInvalidMac) {
		return true
	}

	return false
}

// SetEnableInvalidMac gets a reference to the given bool and assigns it to the EnableInvalidMac field.
func (o *GridMsSetting) SetEnableInvalidMac(v bool) {
	o.EnableInvalidMac = &v
}

// GetMaxConnection returns the MaxConnection field value if set, zero value otherwise.
func (o *GridMsSetting) GetMaxConnection() int64 {
	if o == nil || IsNil(o.MaxConnection) {
		var ret int64
		return ret
	}
	return *o.MaxConnection
}

// GetMaxConnectionOk returns a tuple with the MaxConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetMaxConnectionOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxConnection) {
		return nil, false
	}
	return o.MaxConnection, true
}

// HasMaxConnection returns a boolean if a field has been set.
func (o *GridMsSetting) HasMaxConnection() bool {
	if o != nil && !IsNil(o.MaxConnection) {
		return true
	}

	return false
}

// SetMaxConnection gets a reference to the given int64 and assigns it to the MaxConnection field.
func (o *GridMsSetting) SetMaxConnection(v int64) {
	o.MaxConnection = &v
}

// GetRpcTimeout returns the RpcTimeout field value if set, zero value otherwise.
func (o *GridMsSetting) GetRpcTimeout() int64 {
	if o == nil || IsNil(o.RpcTimeout) {
		var ret int64
		return ret
	}
	return *o.RpcTimeout
}

// GetRpcTimeoutOk returns a tuple with the RpcTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetRpcTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.RpcTimeout) {
		return nil, false
	}
	return o.RpcTimeout, true
}

// HasRpcTimeout returns a boolean if a field has been set.
func (o *GridMsSetting) HasRpcTimeout() bool {
	if o != nil && !IsNil(o.RpcTimeout) {
		return true
	}

	return false
}

// SetRpcTimeout gets a reference to the given int64 and assigns it to the RpcTimeout field.
func (o *GridMsSetting) SetRpcTimeout(v int64) {
	o.RpcTimeout = &v
}

// GetEnableDhcpMonitoring returns the EnableDhcpMonitoring field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableDhcpMonitoring() bool {
	if o == nil || IsNil(o.EnableDhcpMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpMonitoring
}

// GetEnableDhcpMonitoringOk returns a tuple with the EnableDhcpMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableDhcpMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpMonitoring) {
		return nil, false
	}
	return o.EnableDhcpMonitoring, true
}

// HasEnableDhcpMonitoring returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableDhcpMonitoring() bool {
	if o != nil && !IsNil(o.EnableDhcpMonitoring) {
		return true
	}

	return false
}

// SetEnableDhcpMonitoring gets a reference to the given bool and assigns it to the EnableDhcpMonitoring field.
func (o *GridMsSetting) SetEnableDhcpMonitoring(v bool) {
	o.EnableDhcpMonitoring = &v
}

// GetEnableDnsMonitoring returns the EnableDnsMonitoring field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableDnsMonitoring() bool {
	if o == nil || IsNil(o.EnableDnsMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableDnsMonitoring
}

// GetEnableDnsMonitoringOk returns a tuple with the EnableDnsMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableDnsMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsMonitoring) {
		return nil, false
	}
	return o.EnableDnsMonitoring, true
}

// HasEnableDnsMonitoring returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableDnsMonitoring() bool {
	if o != nil && !IsNil(o.EnableDnsMonitoring) {
		return true
	}

	return false
}

// SetEnableDnsMonitoring gets a reference to the given bool and assigns it to the EnableDnsMonitoring field.
func (o *GridMsSetting) SetEnableDnsMonitoring(v bool) {
	o.EnableDnsMonitoring = &v
}

// GetLdapTimeout returns the LdapTimeout field value if set, zero value otherwise.
func (o *GridMsSetting) GetLdapTimeout() int64 {
	if o == nil || IsNil(o.LdapTimeout) {
		var ret int64
		return ret
	}
	return *o.LdapTimeout
}

// GetLdapTimeoutOk returns a tuple with the LdapTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetLdapTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.LdapTimeout) {
		return nil, false
	}
	return o.LdapTimeout, true
}

// HasLdapTimeout returns a boolean if a field has been set.
func (o *GridMsSetting) HasLdapTimeout() bool {
	if o != nil && !IsNil(o.LdapTimeout) {
		return true
	}

	return false
}

// SetLdapTimeout gets a reference to the given int64 and assigns it to the LdapTimeout field.
func (o *GridMsSetting) SetLdapTimeout(v int64) {
	o.LdapTimeout = &v
}

// GetDefaultIpSiteLink returns the DefaultIpSiteLink field value if set, zero value otherwise.
func (o *GridMsSetting) GetDefaultIpSiteLink() string {
	if o == nil || IsNil(o.DefaultIpSiteLink) {
		var ret string
		return ret
	}
	return *o.DefaultIpSiteLink
}

// GetDefaultIpSiteLinkOk returns a tuple with the DefaultIpSiteLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetDefaultIpSiteLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIpSiteLink) {
		return nil, false
	}
	return o.DefaultIpSiteLink, true
}

// HasDefaultIpSiteLink returns a boolean if a field has been set.
func (o *GridMsSetting) HasDefaultIpSiteLink() bool {
	if o != nil && !IsNil(o.DefaultIpSiteLink) {
		return true
	}

	return false
}

// SetDefaultIpSiteLink gets a reference to the given string and assigns it to the DefaultIpSiteLink field.
func (o *GridMsSetting) SetDefaultIpSiteLink(v string) {
	o.DefaultIpSiteLink = &v
}

// GetEnableNetworkUsers returns the EnableNetworkUsers field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableNetworkUsers() bool {
	if o == nil || IsNil(o.EnableNetworkUsers) {
		var ret bool
		return ret
	}
	return *o.EnableNetworkUsers
}

// GetEnableNetworkUsersOk returns a tuple with the EnableNetworkUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableNetworkUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNetworkUsers) {
		return nil, false
	}
	return o.EnableNetworkUsers, true
}

// HasEnableNetworkUsers returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableNetworkUsers() bool {
	if o != nil && !IsNil(o.EnableNetworkUsers) {
		return true
	}

	return false
}

// SetEnableNetworkUsers gets a reference to the given bool and assigns it to the EnableNetworkUsers field.
func (o *GridMsSetting) SetEnableNetworkUsers(v bool) {
	o.EnableNetworkUsers = &v
}

// GetEnableAdUserSync returns the EnableAdUserSync field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableAdUserSync() bool {
	if o == nil || IsNil(o.EnableAdUserSync) {
		var ret bool
		return ret
	}
	return *o.EnableAdUserSync
}

// GetEnableAdUserSyncOk returns a tuple with the EnableAdUserSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableAdUserSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAdUserSync) {
		return nil, false
	}
	return o.EnableAdUserSync, true
}

// HasEnableAdUserSync returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableAdUserSync() bool {
	if o != nil && !IsNil(o.EnableAdUserSync) {
		return true
	}

	return false
}

// SetEnableAdUserSync gets a reference to the given bool and assigns it to the EnableAdUserSync field.
func (o *GridMsSetting) SetEnableAdUserSync(v bool) {
	o.EnableAdUserSync = &v
}

// GetAdUserDefaultTimeout returns the AdUserDefaultTimeout field value if set, zero value otherwise.
func (o *GridMsSetting) GetAdUserDefaultTimeout() int64 {
	if o == nil || IsNil(o.AdUserDefaultTimeout) {
		var ret int64
		return ret
	}
	return *o.AdUserDefaultTimeout
}

// GetAdUserDefaultTimeoutOk returns a tuple with the AdUserDefaultTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetAdUserDefaultTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.AdUserDefaultTimeout) {
		return nil, false
	}
	return o.AdUserDefaultTimeout, true
}

// HasAdUserDefaultTimeout returns a boolean if a field has been set.
func (o *GridMsSetting) HasAdUserDefaultTimeout() bool {
	if o != nil && !IsNil(o.AdUserDefaultTimeout) {
		return true
	}

	return false
}

// SetAdUserDefaultTimeout gets a reference to the given int64 and assigns it to the AdUserDefaultTimeout field.
func (o *GridMsSetting) SetAdUserDefaultTimeout(v int64) {
	o.AdUserDefaultTimeout = &v
}

// GetEnableDnsReportsSync returns the EnableDnsReportsSync field value if set, zero value otherwise.
func (o *GridMsSetting) GetEnableDnsReportsSync() bool {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		var ret bool
		return ret
	}
	return *o.EnableDnsReportsSync
}

// GetEnableDnsReportsSyncOk returns a tuple with the EnableDnsReportsSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridMsSetting) GetEnableDnsReportsSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		return nil, false
	}
	return o.EnableDnsReportsSync, true
}

// HasEnableDnsReportsSync returns a boolean if a field has been set.
func (o *GridMsSetting) HasEnableDnsReportsSync() bool {
	if o != nil && !IsNil(o.EnableDnsReportsSync) {
		return true
	}

	return false
}

// SetEnableDnsReportsSync gets a reference to the given bool and assigns it to the EnableDnsReportsSync field.
func (o *GridMsSetting) SetEnableDnsReportsSync(v bool) {
	o.EnableDnsReportsSync = &v
}

func (o GridMsSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridMsSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogDestination) {
		toSerialize["log_destination"] = o.LogDestination
	}
	if !IsNil(o.EnableInvalidMac) {
		toSerialize["enable_invalid_mac"] = o.EnableInvalidMac
	}
	if !IsNil(o.MaxConnection) {
		toSerialize["max_connection"] = o.MaxConnection
	}
	if !IsNil(o.RpcTimeout) {
		toSerialize["rpc_timeout"] = o.RpcTimeout
	}
	if !IsNil(o.EnableDhcpMonitoring) {
		toSerialize["enable_dhcp_monitoring"] = o.EnableDhcpMonitoring
	}
	if !IsNil(o.EnableDnsMonitoring) {
		toSerialize["enable_dns_monitoring"] = o.EnableDnsMonitoring
	}
	if !IsNil(o.LdapTimeout) {
		toSerialize["ldap_timeout"] = o.LdapTimeout
	}
	if !IsNil(o.DefaultIpSiteLink) {
		toSerialize["default_ip_site_link"] = o.DefaultIpSiteLink
	}
	if !IsNil(o.EnableNetworkUsers) {
		toSerialize["enable_network_users"] = o.EnableNetworkUsers
	}
	if !IsNil(o.EnableAdUserSync) {
		toSerialize["enable_ad_user_sync"] = o.EnableAdUserSync
	}
	if !IsNil(o.AdUserDefaultTimeout) {
		toSerialize["ad_user_default_timeout"] = o.AdUserDefaultTimeout
	}
	if !IsNil(o.EnableDnsReportsSync) {
		toSerialize["enable_dns_reports_sync"] = o.EnableDnsReportsSync
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridMsSetting) UnmarshalJSON(data []byte) (err error) {
	varGridMsSetting := _GridMsSetting{}

	err = json.Unmarshal(data, &varGridMsSetting)

	if err != nil {
		return err
	}

	*o = GridMsSetting(varGridMsSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "log_destination")
		delete(additionalProperties, "enable_invalid_mac")
		delete(additionalProperties, "max_connection")
		delete(additionalProperties, "rpc_timeout")
		delete(additionalProperties, "enable_dhcp_monitoring")
		delete(additionalProperties, "enable_dns_monitoring")
		delete(additionalProperties, "ldap_timeout")
		delete(additionalProperties, "default_ip_site_link")
		delete(additionalProperties, "enable_network_users")
		delete(additionalProperties, "enable_ad_user_sync")
		delete(additionalProperties, "ad_user_default_timeout")
		delete(additionalProperties, "enable_dns_reports_sync")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridMsSetting struct {
	value *GridMsSetting
	isSet bool
}

func (v NullableGridMsSetting) Get() *GridMsSetting {
	return v.value
}

func (v *NullableGridMsSetting) Set(val *GridMsSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridMsSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridMsSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridMsSetting(val *GridMsSetting) *NullableGridMsSetting {
	return &NullableGridMsSetting{value: val, isSet: true}
}

func (v NullableGridMsSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridMsSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
