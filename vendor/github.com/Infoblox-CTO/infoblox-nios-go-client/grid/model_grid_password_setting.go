/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridPasswordSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridPasswordSetting{}

// GridPasswordSetting struct for GridPasswordSetting
type GridPasswordSetting struct {
	// The minimum length of the password.
	PasswordMinLength *int64 `json:"password_min_length,omitempty"`
	// The minimum number of lowercase characters.
	NumLowerChar *int64 `json:"num_lower_char,omitempty"`
	// The minimum number of uppercase characters.
	NumUpperChar *int64 `json:"num_upper_char,omitempty"`
	// The minimum number of numeric characters.
	NumNumericChar *int64 `json:"num_numeric_char,omitempty"`
	// The minimum number of symbol characters. The allowed characters are ! @ # $ % ^ & * ( ).
	NumSymbolChar *int64 `json:"num_symbol_char,omitempty"`
	// The minimum number of characters that must be changed when revising an admin password.
	CharsToChange *int64 `json:"chars_to_change,omitempty"`
	// The number of days of the password expiration period (if enabled).
	ExpireDays *int64 `json:"expire_days,omitempty"`
	// The number of days before the password expiration date when the appliance sends a reminder.
	ReminderDays *int64 `json:"reminder_days,omitempty"`
	// If set to True, all new users must change their passwords when they first log in to the system, and existing users must change the passwords that were just reset.
	ForceResetEnable *bool `json:"force_reset_enable,omitempty"`
	// If set to True, password expiration is enabled.
	ExpireEnable *bool `json:"expire_enable,omitempty"`
	// Enable/disable the password history.
	HistoryEnable *bool `json:"history_enable,omitempty"`
	// Number of saved passwords if password history is enabled. Can be set between 1 to 20.
	NumPasswordsSaved *int64 `json:"num_passwords_saved,omitempty"`
	// Minimum password age in days before password can be updated. Can be set between 1 to 9998 days.
	MinPasswordAge       *int64 `json:"min_password_age,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridPasswordSetting GridPasswordSetting

// NewGridPasswordSetting instantiates a new GridPasswordSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridPasswordSetting() *GridPasswordSetting {
	this := GridPasswordSetting{}
	return &this
}

// NewGridPasswordSettingWithDefaults instantiates a new GridPasswordSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridPasswordSettingWithDefaults() *GridPasswordSetting {
	this := GridPasswordSetting{}
	return &this
}

// GetPasswordMinLength returns the PasswordMinLength field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetPasswordMinLength() int64 {
	if o == nil || IsNil(o.PasswordMinLength) {
		var ret int64
		return ret
	}
	return *o.PasswordMinLength
}

// GetPasswordMinLengthOk returns a tuple with the PasswordMinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetPasswordMinLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.PasswordMinLength) {
		return nil, false
	}
	return o.PasswordMinLength, true
}

// HasPasswordMinLength returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasPasswordMinLength() bool {
	if o != nil && !IsNil(o.PasswordMinLength) {
		return true
	}

	return false
}

// SetPasswordMinLength gets a reference to the given int64 and assigns it to the PasswordMinLength field.
func (o *GridPasswordSetting) SetPasswordMinLength(v int64) {
	o.PasswordMinLength = &v
}

// GetNumLowerChar returns the NumLowerChar field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetNumLowerChar() int64 {
	if o == nil || IsNil(o.NumLowerChar) {
		var ret int64
		return ret
	}
	return *o.NumLowerChar
}

// GetNumLowerCharOk returns a tuple with the NumLowerChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetNumLowerCharOk() (*int64, bool) {
	if o == nil || IsNil(o.NumLowerChar) {
		return nil, false
	}
	return o.NumLowerChar, true
}

// HasNumLowerChar returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasNumLowerChar() bool {
	if o != nil && !IsNil(o.NumLowerChar) {
		return true
	}

	return false
}

// SetNumLowerChar gets a reference to the given int64 and assigns it to the NumLowerChar field.
func (o *GridPasswordSetting) SetNumLowerChar(v int64) {
	o.NumLowerChar = &v
}

// GetNumUpperChar returns the NumUpperChar field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetNumUpperChar() int64 {
	if o == nil || IsNil(o.NumUpperChar) {
		var ret int64
		return ret
	}
	return *o.NumUpperChar
}

// GetNumUpperCharOk returns a tuple with the NumUpperChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetNumUpperCharOk() (*int64, bool) {
	if o == nil || IsNil(o.NumUpperChar) {
		return nil, false
	}
	return o.NumUpperChar, true
}

// HasNumUpperChar returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasNumUpperChar() bool {
	if o != nil && !IsNil(o.NumUpperChar) {
		return true
	}

	return false
}

// SetNumUpperChar gets a reference to the given int64 and assigns it to the NumUpperChar field.
func (o *GridPasswordSetting) SetNumUpperChar(v int64) {
	o.NumUpperChar = &v
}

// GetNumNumericChar returns the NumNumericChar field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetNumNumericChar() int64 {
	if o == nil || IsNil(o.NumNumericChar) {
		var ret int64
		return ret
	}
	return *o.NumNumericChar
}

// GetNumNumericCharOk returns a tuple with the NumNumericChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetNumNumericCharOk() (*int64, bool) {
	if o == nil || IsNil(o.NumNumericChar) {
		return nil, false
	}
	return o.NumNumericChar, true
}

// HasNumNumericChar returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasNumNumericChar() bool {
	if o != nil && !IsNil(o.NumNumericChar) {
		return true
	}

	return false
}

// SetNumNumericChar gets a reference to the given int64 and assigns it to the NumNumericChar field.
func (o *GridPasswordSetting) SetNumNumericChar(v int64) {
	o.NumNumericChar = &v
}

// GetNumSymbolChar returns the NumSymbolChar field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetNumSymbolChar() int64 {
	if o == nil || IsNil(o.NumSymbolChar) {
		var ret int64
		return ret
	}
	return *o.NumSymbolChar
}

// GetNumSymbolCharOk returns a tuple with the NumSymbolChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetNumSymbolCharOk() (*int64, bool) {
	if o == nil || IsNil(o.NumSymbolChar) {
		return nil, false
	}
	return o.NumSymbolChar, true
}

// HasNumSymbolChar returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasNumSymbolChar() bool {
	if o != nil && !IsNil(o.NumSymbolChar) {
		return true
	}

	return false
}

// SetNumSymbolChar gets a reference to the given int64 and assigns it to the NumSymbolChar field.
func (o *GridPasswordSetting) SetNumSymbolChar(v int64) {
	o.NumSymbolChar = &v
}

// GetCharsToChange returns the CharsToChange field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetCharsToChange() int64 {
	if o == nil || IsNil(o.CharsToChange) {
		var ret int64
		return ret
	}
	return *o.CharsToChange
}

// GetCharsToChangeOk returns a tuple with the CharsToChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetCharsToChangeOk() (*int64, bool) {
	if o == nil || IsNil(o.CharsToChange) {
		return nil, false
	}
	return o.CharsToChange, true
}

// HasCharsToChange returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasCharsToChange() bool {
	if o != nil && !IsNil(o.CharsToChange) {
		return true
	}

	return false
}

// SetCharsToChange gets a reference to the given int64 and assigns it to the CharsToChange field.
func (o *GridPasswordSetting) SetCharsToChange(v int64) {
	o.CharsToChange = &v
}

// GetExpireDays returns the ExpireDays field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetExpireDays() int64 {
	if o == nil || IsNil(o.ExpireDays) {
		var ret int64
		return ret
	}
	return *o.ExpireDays
}

// GetExpireDaysOk returns a tuple with the ExpireDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetExpireDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpireDays) {
		return nil, false
	}
	return o.ExpireDays, true
}

// HasExpireDays returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasExpireDays() bool {
	if o != nil && !IsNil(o.ExpireDays) {
		return true
	}

	return false
}

// SetExpireDays gets a reference to the given int64 and assigns it to the ExpireDays field.
func (o *GridPasswordSetting) SetExpireDays(v int64) {
	o.ExpireDays = &v
}

// GetReminderDays returns the ReminderDays field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetReminderDays() int64 {
	if o == nil || IsNil(o.ReminderDays) {
		var ret int64
		return ret
	}
	return *o.ReminderDays
}

// GetReminderDaysOk returns a tuple with the ReminderDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetReminderDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ReminderDays) {
		return nil, false
	}
	return o.ReminderDays, true
}

// HasReminderDays returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasReminderDays() bool {
	if o != nil && !IsNil(o.ReminderDays) {
		return true
	}

	return false
}

// SetReminderDays gets a reference to the given int64 and assigns it to the ReminderDays field.
func (o *GridPasswordSetting) SetReminderDays(v int64) {
	o.ReminderDays = &v
}

// GetForceResetEnable returns the ForceResetEnable field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetForceResetEnable() bool {
	if o == nil || IsNil(o.ForceResetEnable) {
		var ret bool
		return ret
	}
	return *o.ForceResetEnable
}

// GetForceResetEnableOk returns a tuple with the ForceResetEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetForceResetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceResetEnable) {
		return nil, false
	}
	return o.ForceResetEnable, true
}

// HasForceResetEnable returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasForceResetEnable() bool {
	if o != nil && !IsNil(o.ForceResetEnable) {
		return true
	}

	return false
}

// SetForceResetEnable gets a reference to the given bool and assigns it to the ForceResetEnable field.
func (o *GridPasswordSetting) SetForceResetEnable(v bool) {
	o.ForceResetEnable = &v
}

// GetExpireEnable returns the ExpireEnable field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetExpireEnable() bool {
	if o == nil || IsNil(o.ExpireEnable) {
		var ret bool
		return ret
	}
	return *o.ExpireEnable
}

// GetExpireEnableOk returns a tuple with the ExpireEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetExpireEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpireEnable) {
		return nil, false
	}
	return o.ExpireEnable, true
}

// HasExpireEnable returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasExpireEnable() bool {
	if o != nil && !IsNil(o.ExpireEnable) {
		return true
	}

	return false
}

// SetExpireEnable gets a reference to the given bool and assigns it to the ExpireEnable field.
func (o *GridPasswordSetting) SetExpireEnable(v bool) {
	o.ExpireEnable = &v
}

// GetHistoryEnable returns the HistoryEnable field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetHistoryEnable() bool {
	if o == nil || IsNil(o.HistoryEnable) {
		var ret bool
		return ret
	}
	return *o.HistoryEnable
}

// GetHistoryEnableOk returns a tuple with the HistoryEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetHistoryEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.HistoryEnable) {
		return nil, false
	}
	return o.HistoryEnable, true
}

// HasHistoryEnable returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasHistoryEnable() bool {
	if o != nil && !IsNil(o.HistoryEnable) {
		return true
	}

	return false
}

// SetHistoryEnable gets a reference to the given bool and assigns it to the HistoryEnable field.
func (o *GridPasswordSetting) SetHistoryEnable(v bool) {
	o.HistoryEnable = &v
}

// GetNumPasswordsSaved returns the NumPasswordsSaved field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetNumPasswordsSaved() int64 {
	if o == nil || IsNil(o.NumPasswordsSaved) {
		var ret int64
		return ret
	}
	return *o.NumPasswordsSaved
}

// GetNumPasswordsSavedOk returns a tuple with the NumPasswordsSaved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetNumPasswordsSavedOk() (*int64, bool) {
	if o == nil || IsNil(o.NumPasswordsSaved) {
		return nil, false
	}
	return o.NumPasswordsSaved, true
}

// HasNumPasswordsSaved returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasNumPasswordsSaved() bool {
	if o != nil && !IsNil(o.NumPasswordsSaved) {
		return true
	}

	return false
}

// SetNumPasswordsSaved gets a reference to the given int64 and assigns it to the NumPasswordsSaved field.
func (o *GridPasswordSetting) SetNumPasswordsSaved(v int64) {
	o.NumPasswordsSaved = &v
}

// GetMinPasswordAge returns the MinPasswordAge field value if set, zero value otherwise.
func (o *GridPasswordSetting) GetMinPasswordAge() int64 {
	if o == nil || IsNil(o.MinPasswordAge) {
		var ret int64
		return ret
	}
	return *o.MinPasswordAge
}

// GetMinPasswordAgeOk returns a tuple with the MinPasswordAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridPasswordSetting) GetMinPasswordAgeOk() (*int64, bool) {
	if o == nil || IsNil(o.MinPasswordAge) {
		return nil, false
	}
	return o.MinPasswordAge, true
}

// HasMinPasswordAge returns a boolean if a field has been set.
func (o *GridPasswordSetting) HasMinPasswordAge() bool {
	if o != nil && !IsNil(o.MinPasswordAge) {
		return true
	}

	return false
}

// SetMinPasswordAge gets a reference to the given int64 and assigns it to the MinPasswordAge field.
func (o *GridPasswordSetting) SetMinPasswordAge(v int64) {
	o.MinPasswordAge = &v
}

func (o GridPasswordSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridPasswordSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PasswordMinLength) {
		toSerialize["password_min_length"] = o.PasswordMinLength
	}
	if !IsNil(o.NumLowerChar) {
		toSerialize["num_lower_char"] = o.NumLowerChar
	}
	if !IsNil(o.NumUpperChar) {
		toSerialize["num_upper_char"] = o.NumUpperChar
	}
	if !IsNil(o.NumNumericChar) {
		toSerialize["num_numeric_char"] = o.NumNumericChar
	}
	if !IsNil(o.NumSymbolChar) {
		toSerialize["num_symbol_char"] = o.NumSymbolChar
	}
	if !IsNil(o.CharsToChange) {
		toSerialize["chars_to_change"] = o.CharsToChange
	}
	if !IsNil(o.ExpireDays) {
		toSerialize["expire_days"] = o.ExpireDays
	}
	if !IsNil(o.ReminderDays) {
		toSerialize["reminder_days"] = o.ReminderDays
	}
	if !IsNil(o.ForceResetEnable) {
		toSerialize["force_reset_enable"] = o.ForceResetEnable
	}
	if !IsNil(o.ExpireEnable) {
		toSerialize["expire_enable"] = o.ExpireEnable
	}
	if !IsNil(o.HistoryEnable) {
		toSerialize["history_enable"] = o.HistoryEnable
	}
	if !IsNil(o.NumPasswordsSaved) {
		toSerialize["num_passwords_saved"] = o.NumPasswordsSaved
	}
	if !IsNil(o.MinPasswordAge) {
		toSerialize["min_password_age"] = o.MinPasswordAge
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridPasswordSetting) UnmarshalJSON(data []byte) (err error) {
	varGridPasswordSetting := _GridPasswordSetting{}

	err = json.Unmarshal(data, &varGridPasswordSetting)

	if err != nil {
		return err
	}

	*o = GridPasswordSetting(varGridPasswordSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password_min_length")
		delete(additionalProperties, "num_lower_char")
		delete(additionalProperties, "num_upper_char")
		delete(additionalProperties, "num_numeric_char")
		delete(additionalProperties, "num_symbol_char")
		delete(additionalProperties, "chars_to_change")
		delete(additionalProperties, "expire_days")
		delete(additionalProperties, "reminder_days")
		delete(additionalProperties, "force_reset_enable")
		delete(additionalProperties, "expire_enable")
		delete(additionalProperties, "history_enable")
		delete(additionalProperties, "num_passwords_saved")
		delete(additionalProperties, "min_password_age")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridPasswordSetting struct {
	value *GridPasswordSetting
	isSet bool
}

func (v NullableGridPasswordSetting) Get() *GridPasswordSetting {
	return v.value
}

func (v *NullableGridPasswordSetting) Set(val *GridPasswordSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridPasswordSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridPasswordSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridPasswordSetting(val *GridPasswordSetting) *NullableGridPasswordSetting {
	return &NullableGridPasswordSetting{value: val, isSet: true}
}

func (v NullableGridPasswordSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridPasswordSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
