/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridSecuritySetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridSecuritySetting{}

// GridSecuritySetting struct for GridSecuritySetting
type GridSecuritySetting struct {
	// If set to True, rolling of audit logs is enabled.
	AuditLogRollingEnable *bool `json:"audit_log_rolling_enable,omitempty"`
	// A list of access control settings used for security access.
	AdminAccessItems []GridsecuritysettingAdminAccessItems `json:"admin_access_items,omitempty"`
	// If set to True, HTTP connections are redirected to HTTPS.
	HttpRedirectEnable *bool `json:"http_redirect_enable,omitempty"`
	// If set to True, the login banner is enabled.
	LoginBannerEnable *bool `json:"login_banner_enable,omitempty"`
	// The login banner text.
	LoginBannerText *string `json:"login_banner_text,omitempty"`
	// If set to True, superuser admins can access the Infoblox CLI from a remote location using an SSH (Secure Shell) v2 client.
	RemoteConsoleAccessEnable *bool `json:"remote_console_access_enable,omitempty"`
	// If set to True, HTTP access restrictions are enabled.
	SecurityAccessEnable *bool `json:"security_access_enable,omitempty"`
	// If set to True, remote console access restrictions will be enabled.
	SecurityAccessRemoteConsoleEnable *bool `json:"security_access_remote_console_enable,omitempty"`
	// The session timeout interval in seconds.
	SessionTimeout *int64 `json:"session_timeout,omitempty"`
	// If set to False, SSH access is permanently disabled.
	SshPermEnable *bool `json:"ssh_perm_enable,omitempty"`
	// If set to True, support access for the Grid has been enabled.
	SupportAccessEnable *bool `json:"support_access_enable,omitempty"`
	// Information string to be used for support access requests.
	SupportAccessInfo *string `json:"support_access_info,omitempty"`
	// Whether concurrent login allowed gridlevel
	DisableConcurrentLogin   *bool                                        `json:"disable_concurrent_login,omitempty"`
	InactivityLockoutSetting *GridsecuritysettingInactivityLockoutSetting `json:"inactivity_lockout_setting,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _GridSecuritySetting GridSecuritySetting

// NewGridSecuritySetting instantiates a new GridSecuritySetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridSecuritySetting() *GridSecuritySetting {
	this := GridSecuritySetting{}
	return &this
}

// NewGridSecuritySettingWithDefaults instantiates a new GridSecuritySetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridSecuritySettingWithDefaults() *GridSecuritySetting {
	this := GridSecuritySetting{}
	return &this
}

// GetAuditLogRollingEnable returns the AuditLogRollingEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetAuditLogRollingEnable() bool {
	if o == nil || IsNil(o.AuditLogRollingEnable) {
		var ret bool
		return ret
	}
	return *o.AuditLogRollingEnable
}

// GetAuditLogRollingEnableOk returns a tuple with the AuditLogRollingEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetAuditLogRollingEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.AuditLogRollingEnable) {
		return nil, false
	}
	return o.AuditLogRollingEnable, true
}

// HasAuditLogRollingEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasAuditLogRollingEnable() bool {
	if o != nil && !IsNil(o.AuditLogRollingEnable) {
		return true
	}

	return false
}

// SetAuditLogRollingEnable gets a reference to the given bool and assigns it to the AuditLogRollingEnable field.
func (o *GridSecuritySetting) SetAuditLogRollingEnable(v bool) {
	o.AuditLogRollingEnable = &v
}

// GetAdminAccessItems returns the AdminAccessItems field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetAdminAccessItems() []GridsecuritysettingAdminAccessItems {
	if o == nil || IsNil(o.AdminAccessItems) {
		var ret []GridsecuritysettingAdminAccessItems
		return ret
	}
	return o.AdminAccessItems
}

// GetAdminAccessItemsOk returns a tuple with the AdminAccessItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetAdminAccessItemsOk() ([]GridsecuritysettingAdminAccessItems, bool) {
	if o == nil || IsNil(o.AdminAccessItems) {
		return nil, false
	}
	return o.AdminAccessItems, true
}

// HasAdminAccessItems returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasAdminAccessItems() bool {
	if o != nil && !IsNil(o.AdminAccessItems) {
		return true
	}

	return false
}

// SetAdminAccessItems gets a reference to the given []GridsecuritysettingAdminAccessItems and assigns it to the AdminAccessItems field.
func (o *GridSecuritySetting) SetAdminAccessItems(v []GridsecuritysettingAdminAccessItems) {
	o.AdminAccessItems = v
}

// GetHttpRedirectEnable returns the HttpRedirectEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetHttpRedirectEnable() bool {
	if o == nil || IsNil(o.HttpRedirectEnable) {
		var ret bool
		return ret
	}
	return *o.HttpRedirectEnable
}

// GetHttpRedirectEnableOk returns a tuple with the HttpRedirectEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetHttpRedirectEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.HttpRedirectEnable) {
		return nil, false
	}
	return o.HttpRedirectEnable, true
}

// HasHttpRedirectEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasHttpRedirectEnable() bool {
	if o != nil && !IsNil(o.HttpRedirectEnable) {
		return true
	}

	return false
}

// SetHttpRedirectEnable gets a reference to the given bool and assigns it to the HttpRedirectEnable field.
func (o *GridSecuritySetting) SetHttpRedirectEnable(v bool) {
	o.HttpRedirectEnable = &v
}

// GetLoginBannerEnable returns the LoginBannerEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetLoginBannerEnable() bool {
	if o == nil || IsNil(o.LoginBannerEnable) {
		var ret bool
		return ret
	}
	return *o.LoginBannerEnable
}

// GetLoginBannerEnableOk returns a tuple with the LoginBannerEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetLoginBannerEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.LoginBannerEnable) {
		return nil, false
	}
	return o.LoginBannerEnable, true
}

// HasLoginBannerEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasLoginBannerEnable() bool {
	if o != nil && !IsNil(o.LoginBannerEnable) {
		return true
	}

	return false
}

// SetLoginBannerEnable gets a reference to the given bool and assigns it to the LoginBannerEnable field.
func (o *GridSecuritySetting) SetLoginBannerEnable(v bool) {
	o.LoginBannerEnable = &v
}

// GetLoginBannerText returns the LoginBannerText field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetLoginBannerText() string {
	if o == nil || IsNil(o.LoginBannerText) {
		var ret string
		return ret
	}
	return *o.LoginBannerText
}

// GetLoginBannerTextOk returns a tuple with the LoginBannerText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetLoginBannerTextOk() (*string, bool) {
	if o == nil || IsNil(o.LoginBannerText) {
		return nil, false
	}
	return o.LoginBannerText, true
}

// HasLoginBannerText returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasLoginBannerText() bool {
	if o != nil && !IsNil(o.LoginBannerText) {
		return true
	}

	return false
}

// SetLoginBannerText gets a reference to the given string and assigns it to the LoginBannerText field.
func (o *GridSecuritySetting) SetLoginBannerText(v string) {
	o.LoginBannerText = &v
}

// GetRemoteConsoleAccessEnable returns the RemoteConsoleAccessEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetRemoteConsoleAccessEnable() bool {
	if o == nil || IsNil(o.RemoteConsoleAccessEnable) {
		var ret bool
		return ret
	}
	return *o.RemoteConsoleAccessEnable
}

// GetRemoteConsoleAccessEnableOk returns a tuple with the RemoteConsoleAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetRemoteConsoleAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteConsoleAccessEnable) {
		return nil, false
	}
	return o.RemoteConsoleAccessEnable, true
}

// HasRemoteConsoleAccessEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasRemoteConsoleAccessEnable() bool {
	if o != nil && !IsNil(o.RemoteConsoleAccessEnable) {
		return true
	}

	return false
}

// SetRemoteConsoleAccessEnable gets a reference to the given bool and assigns it to the RemoteConsoleAccessEnable field.
func (o *GridSecuritySetting) SetRemoteConsoleAccessEnable(v bool) {
	o.RemoteConsoleAccessEnable = &v
}

// GetSecurityAccessEnable returns the SecurityAccessEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSecurityAccessEnable() bool {
	if o == nil || IsNil(o.SecurityAccessEnable) {
		var ret bool
		return ret
	}
	return *o.SecurityAccessEnable
}

// GetSecurityAccessEnableOk returns a tuple with the SecurityAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSecurityAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SecurityAccessEnable) {
		return nil, false
	}
	return o.SecurityAccessEnable, true
}

// HasSecurityAccessEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSecurityAccessEnable() bool {
	if o != nil && !IsNil(o.SecurityAccessEnable) {
		return true
	}

	return false
}

// SetSecurityAccessEnable gets a reference to the given bool and assigns it to the SecurityAccessEnable field.
func (o *GridSecuritySetting) SetSecurityAccessEnable(v bool) {
	o.SecurityAccessEnable = &v
}

// GetSecurityAccessRemoteConsoleEnable returns the SecurityAccessRemoteConsoleEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSecurityAccessRemoteConsoleEnable() bool {
	if o == nil || IsNil(o.SecurityAccessRemoteConsoleEnable) {
		var ret bool
		return ret
	}
	return *o.SecurityAccessRemoteConsoleEnable
}

// GetSecurityAccessRemoteConsoleEnableOk returns a tuple with the SecurityAccessRemoteConsoleEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSecurityAccessRemoteConsoleEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SecurityAccessRemoteConsoleEnable) {
		return nil, false
	}
	return o.SecurityAccessRemoteConsoleEnable, true
}

// HasSecurityAccessRemoteConsoleEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSecurityAccessRemoteConsoleEnable() bool {
	if o != nil && !IsNil(o.SecurityAccessRemoteConsoleEnable) {
		return true
	}

	return false
}

// SetSecurityAccessRemoteConsoleEnable gets a reference to the given bool and assigns it to the SecurityAccessRemoteConsoleEnable field.
func (o *GridSecuritySetting) SetSecurityAccessRemoteConsoleEnable(v bool) {
	o.SecurityAccessRemoteConsoleEnable = &v
}

// GetSessionTimeout returns the SessionTimeout field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSessionTimeout() int64 {
	if o == nil || IsNil(o.SessionTimeout) {
		var ret int64
		return ret
	}
	return *o.SessionTimeout
}

// GetSessionTimeoutOk returns a tuple with the SessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSessionTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionTimeout) {
		return nil, false
	}
	return o.SessionTimeout, true
}

// HasSessionTimeout returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSessionTimeout() bool {
	if o != nil && !IsNil(o.SessionTimeout) {
		return true
	}

	return false
}

// SetSessionTimeout gets a reference to the given int64 and assigns it to the SessionTimeout field.
func (o *GridSecuritySetting) SetSessionTimeout(v int64) {
	o.SessionTimeout = &v
}

// GetSshPermEnable returns the SshPermEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSshPermEnable() bool {
	if o == nil || IsNil(o.SshPermEnable) {
		var ret bool
		return ret
	}
	return *o.SshPermEnable
}

// GetSshPermEnableOk returns a tuple with the SshPermEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSshPermEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SshPermEnable) {
		return nil, false
	}
	return o.SshPermEnable, true
}

// HasSshPermEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSshPermEnable() bool {
	if o != nil && !IsNil(o.SshPermEnable) {
		return true
	}

	return false
}

// SetSshPermEnable gets a reference to the given bool and assigns it to the SshPermEnable field.
func (o *GridSecuritySetting) SetSshPermEnable(v bool) {
	o.SshPermEnable = &v
}

// GetSupportAccessEnable returns the SupportAccessEnable field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSupportAccessEnable() bool {
	if o == nil || IsNil(o.SupportAccessEnable) {
		var ret bool
		return ret
	}
	return *o.SupportAccessEnable
}

// GetSupportAccessEnableOk returns a tuple with the SupportAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSupportAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportAccessEnable) {
		return nil, false
	}
	return o.SupportAccessEnable, true
}

// HasSupportAccessEnable returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSupportAccessEnable() bool {
	if o != nil && !IsNil(o.SupportAccessEnable) {
		return true
	}

	return false
}

// SetSupportAccessEnable gets a reference to the given bool and assigns it to the SupportAccessEnable field.
func (o *GridSecuritySetting) SetSupportAccessEnable(v bool) {
	o.SupportAccessEnable = &v
}

// GetSupportAccessInfo returns the SupportAccessInfo field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetSupportAccessInfo() string {
	if o == nil || IsNil(o.SupportAccessInfo) {
		var ret string
		return ret
	}
	return *o.SupportAccessInfo
}

// GetSupportAccessInfoOk returns a tuple with the SupportAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetSupportAccessInfoOk() (*string, bool) {
	if o == nil || IsNil(o.SupportAccessInfo) {
		return nil, false
	}
	return o.SupportAccessInfo, true
}

// HasSupportAccessInfo returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasSupportAccessInfo() bool {
	if o != nil && !IsNil(o.SupportAccessInfo) {
		return true
	}

	return false
}

// SetSupportAccessInfo gets a reference to the given string and assigns it to the SupportAccessInfo field.
func (o *GridSecuritySetting) SetSupportAccessInfo(v string) {
	o.SupportAccessInfo = &v
}

// GetDisableConcurrentLogin returns the DisableConcurrentLogin field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetDisableConcurrentLogin() bool {
	if o == nil || IsNil(o.DisableConcurrentLogin) {
		var ret bool
		return ret
	}
	return *o.DisableConcurrentLogin
}

// GetDisableConcurrentLoginOk returns a tuple with the DisableConcurrentLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetDisableConcurrentLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConcurrentLogin) {
		return nil, false
	}
	return o.DisableConcurrentLogin, true
}

// HasDisableConcurrentLogin returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasDisableConcurrentLogin() bool {
	if o != nil && !IsNil(o.DisableConcurrentLogin) {
		return true
	}

	return false
}

// SetDisableConcurrentLogin gets a reference to the given bool and assigns it to the DisableConcurrentLogin field.
func (o *GridSecuritySetting) SetDisableConcurrentLogin(v bool) {
	o.DisableConcurrentLogin = &v
}

// GetInactivityLockoutSetting returns the InactivityLockoutSetting field value if set, zero value otherwise.
func (o *GridSecuritySetting) GetInactivityLockoutSetting() GridsecuritysettingInactivityLockoutSetting {
	if o == nil || IsNil(o.InactivityLockoutSetting) {
		var ret GridsecuritysettingInactivityLockoutSetting
		return ret
	}
	return *o.InactivityLockoutSetting
}

// GetInactivityLockoutSettingOk returns a tuple with the InactivityLockoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridSecuritySetting) GetInactivityLockoutSettingOk() (*GridsecuritysettingInactivityLockoutSetting, bool) {
	if o == nil || IsNil(o.InactivityLockoutSetting) {
		return nil, false
	}
	return o.InactivityLockoutSetting, true
}

// HasInactivityLockoutSetting returns a boolean if a field has been set.
func (o *GridSecuritySetting) HasInactivityLockoutSetting() bool {
	if o != nil && !IsNil(o.InactivityLockoutSetting) {
		return true
	}

	return false
}

// SetInactivityLockoutSetting gets a reference to the given GridsecuritysettingInactivityLockoutSetting and assigns it to the InactivityLockoutSetting field.
func (o *GridSecuritySetting) SetInactivityLockoutSetting(v GridsecuritysettingInactivityLockoutSetting) {
	o.InactivityLockoutSetting = &v
}

func (o GridSecuritySetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridSecuritySetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditLogRollingEnable) {
		toSerialize["audit_log_rolling_enable"] = o.AuditLogRollingEnable
	}
	if !IsNil(o.AdminAccessItems) {
		toSerialize["admin_access_items"] = o.AdminAccessItems
	}
	if !IsNil(o.HttpRedirectEnable) {
		toSerialize["http_redirect_enable"] = o.HttpRedirectEnable
	}
	if !IsNil(o.LoginBannerEnable) {
		toSerialize["login_banner_enable"] = o.LoginBannerEnable
	}
	if !IsNil(o.LoginBannerText) {
		toSerialize["login_banner_text"] = o.LoginBannerText
	}
	if !IsNil(o.RemoteConsoleAccessEnable) {
		toSerialize["remote_console_access_enable"] = o.RemoteConsoleAccessEnable
	}
	if !IsNil(o.SecurityAccessEnable) {
		toSerialize["security_access_enable"] = o.SecurityAccessEnable
	}
	if !IsNil(o.SecurityAccessRemoteConsoleEnable) {
		toSerialize["security_access_remote_console_enable"] = o.SecurityAccessRemoteConsoleEnable
	}
	if !IsNil(o.SessionTimeout) {
		toSerialize["session_timeout"] = o.SessionTimeout
	}
	if !IsNil(o.SshPermEnable) {
		toSerialize["ssh_perm_enable"] = o.SshPermEnable
	}
	if !IsNil(o.SupportAccessEnable) {
		toSerialize["support_access_enable"] = o.SupportAccessEnable
	}
	if !IsNil(o.SupportAccessInfo) {
		toSerialize["support_access_info"] = o.SupportAccessInfo
	}
	if !IsNil(o.DisableConcurrentLogin) {
		toSerialize["disable_concurrent_login"] = o.DisableConcurrentLogin
	}
	if !IsNil(o.InactivityLockoutSetting) {
		toSerialize["inactivity_lockout_setting"] = o.InactivityLockoutSetting
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridSecuritySetting) UnmarshalJSON(data []byte) (err error) {
	varGridSecuritySetting := _GridSecuritySetting{}

	err = json.Unmarshal(data, &varGridSecuritySetting)

	if err != nil {
		return err
	}

	*o = GridSecuritySetting(varGridSecuritySetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audit_log_rolling_enable")
		delete(additionalProperties, "admin_access_items")
		delete(additionalProperties, "http_redirect_enable")
		delete(additionalProperties, "login_banner_enable")
		delete(additionalProperties, "login_banner_text")
		delete(additionalProperties, "remote_console_access_enable")
		delete(additionalProperties, "security_access_enable")
		delete(additionalProperties, "security_access_remote_console_enable")
		delete(additionalProperties, "session_timeout")
		delete(additionalProperties, "ssh_perm_enable")
		delete(additionalProperties, "support_access_enable")
		delete(additionalProperties, "support_access_info")
		delete(additionalProperties, "disable_concurrent_login")
		delete(additionalProperties, "inactivity_lockout_setting")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridSecuritySetting struct {
	value *GridSecuritySetting
	isSet bool
}

func (v NullableGridSecuritySetting) Get() *GridSecuritySetting {
	return v.value
}

func (v *NullableGridSecuritySetting) Set(val *GridSecuritySetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridSecuritySetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridSecuritySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridSecuritySetting(val *GridSecuritySetting) *NullableGridSecuritySetting {
	return &NullableGridSecuritySetting{value: val, isSet: true}
}

func (v NullableGridSecuritySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridSecuritySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
