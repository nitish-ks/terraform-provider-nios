/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridServicerestartGroupRecurringSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridServicerestartGroupRecurringSchedule{}

// GridServicerestartGroupRecurringSchedule struct for GridServicerestartGroupRecurringSchedule
type GridServicerestartGroupRecurringSchedule struct {
	// The list of applicable services for the restart.
	Services []string `json:"services,omitempty"`
	// The restart method for a Grid restart.
	Mode     *string                                           `json:"mode,omitempty"`
	Schedule *GridservicerestartgrouprecurringscheduleSchedule `json:"schedule,omitempty"`
	// Determines if the Restart Group should have a force restart.
	Force                *bool `json:"force,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridServicerestartGroupRecurringSchedule GridServicerestartGroupRecurringSchedule

// NewGridServicerestartGroupRecurringSchedule instantiates a new GridServicerestartGroupRecurringSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridServicerestartGroupRecurringSchedule() *GridServicerestartGroupRecurringSchedule {
	this := GridServicerestartGroupRecurringSchedule{}
	return &this
}

// NewGridServicerestartGroupRecurringScheduleWithDefaults instantiates a new GridServicerestartGroupRecurringSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridServicerestartGroupRecurringScheduleWithDefaults() *GridServicerestartGroupRecurringSchedule {
	this := GridServicerestartGroupRecurringSchedule{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *GridServicerestartGroupRecurringSchedule) GetServices() []string {
	if o == nil || IsNil(o.Services) {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartGroupRecurringSchedule) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *GridServicerestartGroupRecurringSchedule) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *GridServicerestartGroupRecurringSchedule) SetServices(v []string) {
	o.Services = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *GridServicerestartGroupRecurringSchedule) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartGroupRecurringSchedule) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *GridServicerestartGroupRecurringSchedule) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *GridServicerestartGroupRecurringSchedule) SetMode(v string) {
	o.Mode = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *GridServicerestartGroupRecurringSchedule) GetSchedule() GridservicerestartgrouprecurringscheduleSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret GridservicerestartgrouprecurringscheduleSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartGroupRecurringSchedule) GetScheduleOk() (*GridservicerestartgrouprecurringscheduleSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *GridServicerestartGroupRecurringSchedule) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given GridservicerestartgrouprecurringscheduleSchedule and assigns it to the Schedule field.
func (o *GridServicerestartGroupRecurringSchedule) SetSchedule(v GridservicerestartgrouprecurringscheduleSchedule) {
	o.Schedule = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *GridServicerestartGroupRecurringSchedule) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartGroupRecurringSchedule) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *GridServicerestartGroupRecurringSchedule) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *GridServicerestartGroupRecurringSchedule) SetForce(v bool) {
	o.Force = &v
}

func (o GridServicerestartGroupRecurringSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridServicerestartGroupRecurringSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridServicerestartGroupRecurringSchedule) UnmarshalJSON(data []byte) (err error) {
	varGridServicerestartGroupRecurringSchedule := _GridServicerestartGroupRecurringSchedule{}

	err = json.Unmarshal(data, &varGridServicerestartGroupRecurringSchedule)

	if err != nil {
		return err
	}

	*o = GridServicerestartGroupRecurringSchedule(varGridServicerestartGroupRecurringSchedule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "services")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "force")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridServicerestartGroupRecurringSchedule struct {
	value *GridServicerestartGroupRecurringSchedule
	isSet bool
}

func (v NullableGridServicerestartGroupRecurringSchedule) Get() *GridServicerestartGroupRecurringSchedule {
	return v.value
}

func (v *NullableGridServicerestartGroupRecurringSchedule) Set(val *GridServicerestartGroupRecurringSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableGridServicerestartGroupRecurringSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableGridServicerestartGroupRecurringSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridServicerestartGroupRecurringSchedule(val *GridServicerestartGroupRecurringSchedule) *NullableGridServicerestartGroupRecurringSchedule {
	return &NullableGridServicerestartGroupRecurringSchedule{value: val, isSet: true}
}

func (v NullableGridServicerestartGroupRecurringSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridServicerestartGroupRecurringSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
