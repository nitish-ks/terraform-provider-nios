/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridServicerestartStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridServicerestartStatus{}

// GridServicerestartStatus struct for GridServicerestartStatus
type GridServicerestartStatus struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The number of failed requests.
	Failures *int64 `json:"failures,omitempty"`
	// The number of finished requests.
	Finished *int64 `json:"finished,omitempty"`
	// The type of grouping.
	Grouped *string `json:"grouped,omitempty"`
	// The number of created yet unprocessed requests for restart.
	NeededRestart *int64 `json:"needed_restart,omitempty"`
	// The number of requests that did not require a restart.
	NoRestart *int64 `json:"no_restart,omitempty"`
	// A reference to the grid or grid:servicerestart:group object associated with the request.
	Parent *string `json:"parent,omitempty"`
	// The number of requests that are pending a restart.
	Pending *int64 `json:"pending,omitempty"`
	// The number of forced or needed requests pending for restart.
	PendingRestart *int64 `json:"pending_restart,omitempty"`
	// The number of not forced and not needed requests pending for restart.
	Processing *int64 `json:"processing,omitempty"`
	// The number of service restarts for corresponding members.
	Restarting *int64 `json:"restarting,omitempty"`
	// The number of requests associated with successful restarts.
	Success *int64 `json:"success,omitempty"`
	// The number of timeout requests.
	Timeouts *int64 `json:"timeouts,omitempty"`
}

// NewGridServicerestartStatus instantiates a new GridServicerestartStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridServicerestartStatus() *GridServicerestartStatus {
	this := GridServicerestartStatus{}
	return &this
}

// NewGridServicerestartStatusWithDefaults instantiates a new GridServicerestartStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridServicerestartStatusWithDefaults() *GridServicerestartStatus {
	this := GridServicerestartStatus{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GridServicerestartStatus) SetRef(v string) {
	o.Ref = &v
}

// GetFailures returns the Failures field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetFailures() int64 {
	if o == nil || IsNil(o.Failures) {
		var ret int64
		return ret
	}
	return *o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetFailuresOk() (*int64, bool) {
	if o == nil || IsNil(o.Failures) {
		return nil, false
	}
	return o.Failures, true
}

// HasFailures returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasFailures() bool {
	if o != nil && !IsNil(o.Failures) {
		return true
	}

	return false
}

// SetFailures gets a reference to the given int64 and assigns it to the Failures field.
func (o *GridServicerestartStatus) SetFailures(v int64) {
	o.Failures = &v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetFinished() int64 {
	if o == nil || IsNil(o.Finished) {
		var ret int64
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetFinishedOk() (*int64, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given int64 and assigns it to the Finished field.
func (o *GridServicerestartStatus) SetFinished(v int64) {
	o.Finished = &v
}

// GetGrouped returns the Grouped field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetGrouped() string {
	if o == nil || IsNil(o.Grouped) {
		var ret string
		return ret
	}
	return *o.Grouped
}

// GetGroupedOk returns a tuple with the Grouped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetGroupedOk() (*string, bool) {
	if o == nil || IsNil(o.Grouped) {
		return nil, false
	}
	return o.Grouped, true
}

// HasGrouped returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasGrouped() bool {
	if o != nil && !IsNil(o.Grouped) {
		return true
	}

	return false
}

// SetGrouped gets a reference to the given string and assigns it to the Grouped field.
func (o *GridServicerestartStatus) SetGrouped(v string) {
	o.Grouped = &v
}

// GetNeededRestart returns the NeededRestart field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetNeededRestart() int64 {
	if o == nil || IsNil(o.NeededRestart) {
		var ret int64
		return ret
	}
	return *o.NeededRestart
}

// GetNeededRestartOk returns a tuple with the NeededRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetNeededRestartOk() (*int64, bool) {
	if o == nil || IsNil(o.NeededRestart) {
		return nil, false
	}
	return o.NeededRestart, true
}

// HasNeededRestart returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasNeededRestart() bool {
	if o != nil && !IsNil(o.NeededRestart) {
		return true
	}

	return false
}

// SetNeededRestart gets a reference to the given int64 and assigns it to the NeededRestart field.
func (o *GridServicerestartStatus) SetNeededRestart(v int64) {
	o.NeededRestart = &v
}

// GetNoRestart returns the NoRestart field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetNoRestart() int64 {
	if o == nil || IsNil(o.NoRestart) {
		var ret int64
		return ret
	}
	return *o.NoRestart
}

// GetNoRestartOk returns a tuple with the NoRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetNoRestartOk() (*int64, bool) {
	if o == nil || IsNil(o.NoRestart) {
		return nil, false
	}
	return o.NoRestart, true
}

// HasNoRestart returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasNoRestart() bool {
	if o != nil && !IsNil(o.NoRestart) {
		return true
	}

	return false
}

// SetNoRestart gets a reference to the given int64 and assigns it to the NoRestart field.
func (o *GridServicerestartStatus) SetNoRestart(v int64) {
	o.NoRestart = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *GridServicerestartStatus) SetParent(v string) {
	o.Parent = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetPending() int64 {
	if o == nil || IsNil(o.Pending) {
		var ret int64
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetPendingOk() (*int64, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given int64 and assigns it to the Pending field.
func (o *GridServicerestartStatus) SetPending(v int64) {
	o.Pending = &v
}

// GetPendingRestart returns the PendingRestart field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetPendingRestart() int64 {
	if o == nil || IsNil(o.PendingRestart) {
		var ret int64
		return ret
	}
	return *o.PendingRestart
}

// GetPendingRestartOk returns a tuple with the PendingRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetPendingRestartOk() (*int64, bool) {
	if o == nil || IsNil(o.PendingRestart) {
		return nil, false
	}
	return o.PendingRestart, true
}

// HasPendingRestart returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasPendingRestart() bool {
	if o != nil && !IsNil(o.PendingRestart) {
		return true
	}

	return false
}

// SetPendingRestart gets a reference to the given int64 and assigns it to the PendingRestart field.
func (o *GridServicerestartStatus) SetPendingRestart(v int64) {
	o.PendingRestart = &v
}

// GetProcessing returns the Processing field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetProcessing() int64 {
	if o == nil || IsNil(o.Processing) {
		var ret int64
		return ret
	}
	return *o.Processing
}

// GetProcessingOk returns a tuple with the Processing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetProcessingOk() (*int64, bool) {
	if o == nil || IsNil(o.Processing) {
		return nil, false
	}
	return o.Processing, true
}

// HasProcessing returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasProcessing() bool {
	if o != nil && !IsNil(o.Processing) {
		return true
	}

	return false
}

// SetProcessing gets a reference to the given int64 and assigns it to the Processing field.
func (o *GridServicerestartStatus) SetProcessing(v int64) {
	o.Processing = &v
}

// GetRestarting returns the Restarting field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetRestarting() int64 {
	if o == nil || IsNil(o.Restarting) {
		var ret int64
		return ret
	}
	return *o.Restarting
}

// GetRestartingOk returns a tuple with the Restarting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetRestartingOk() (*int64, bool) {
	if o == nil || IsNil(o.Restarting) {
		return nil, false
	}
	return o.Restarting, true
}

// HasRestarting returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasRestarting() bool {
	if o != nil && !IsNil(o.Restarting) {
		return true
	}

	return false
}

// SetRestarting gets a reference to the given int64 and assigns it to the Restarting field.
func (o *GridServicerestartStatus) SetRestarting(v int64) {
	o.Restarting = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetSuccess() int64 {
	if o == nil || IsNil(o.Success) {
		var ret int64
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetSuccessOk() (*int64, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given int64 and assigns it to the Success field.
func (o *GridServicerestartStatus) SetSuccess(v int64) {
	o.Success = &v
}

// GetTimeouts returns the Timeouts field value if set, zero value otherwise.
func (o *GridServicerestartStatus) GetTimeouts() int64 {
	if o == nil || IsNil(o.Timeouts) {
		var ret int64
		return ret
	}
	return *o.Timeouts
}

// GetTimeoutsOk returns a tuple with the Timeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridServicerestartStatus) GetTimeoutsOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeouts) {
		return nil, false
	}
	return o.Timeouts, true
}

// HasTimeouts returns a boolean if a field has been set.
func (o *GridServicerestartStatus) HasTimeouts() bool {
	if o != nil && !IsNil(o.Timeouts) {
		return true
	}

	return false
}

// SetTimeouts gets a reference to the given int64 and assigns it to the Timeouts field.
func (o *GridServicerestartStatus) SetTimeouts(v int64) {
	o.Timeouts = &v
}

func (o GridServicerestartStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridServicerestartStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Failures) {
		toSerialize["failures"] = o.Failures
	}
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	if !IsNil(o.Grouped) {
		toSerialize["grouped"] = o.Grouped
	}
	if !IsNil(o.NeededRestart) {
		toSerialize["needed_restart"] = o.NeededRestart
	}
	if !IsNil(o.NoRestart) {
		toSerialize["no_restart"] = o.NoRestart
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !IsNil(o.PendingRestart) {
		toSerialize["pending_restart"] = o.PendingRestart
	}
	if !IsNil(o.Processing) {
		toSerialize["processing"] = o.Processing
	}
	if !IsNil(o.Restarting) {
		toSerialize["restarting"] = o.Restarting
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Timeouts) {
		toSerialize["timeouts"] = o.Timeouts
	}
	return toSerialize, nil
}

type NullableGridServicerestartStatus struct {
	value *GridServicerestartStatus
	isSet bool
}

func (v NullableGridServicerestartStatus) Get() *GridServicerestartStatus {
	return v.value
}

func (v *NullableGridServicerestartStatus) Set(val *GridServicerestartStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGridServicerestartStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGridServicerestartStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridServicerestartStatus(val *GridServicerestartStatus) *NullableGridServicerestartStatus {
	return &NullableGridServicerestartStatus{value: val, isSet: true}
}

func (v NullableGridServicerestartStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridServicerestartStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
