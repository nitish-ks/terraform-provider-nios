/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridTrafficCaptureRecDnsSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridTrafficCaptureRecDnsSetting{}

// GridTrafficCaptureRecDnsSetting struct for GridTrafficCaptureRecDnsSetting
type GridTrafficCaptureRecDnsSetting struct {
	// Enable triggering automated traffic capture based on recursive DNS latency.
	RecDnsLatencyTriggerEnable *bool `json:"rec_dns_latency_trigger_enable,omitempty"`
	// Recursive DNS latency below which traffic capture will be triggered.
	RecDnsLatencyThreshold *int64 `json:"rec_dns_latency_threshold,omitempty"`
	// Recursive DNS latency above which traffic capture will be stopped.
	RecDnsLatencyReset *int64 `json:"rec_dns_latency_reset,omitempty"`
	// The local IP DNS service is listen on ( for recursive DNS latency trigger).
	RecDnsLatencyListenOnSource *string                                             `json:"rec_dns_latency_listen_on_source,omitempty"`
	KpiMonitoredDomains         *GridtrafficcapturerecdnssettingKpiMonitoredDomains `json:"kpi_monitored_domains,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _GridTrafficCaptureRecDnsSetting GridTrafficCaptureRecDnsSetting

// NewGridTrafficCaptureRecDnsSetting instantiates a new GridTrafficCaptureRecDnsSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridTrafficCaptureRecDnsSetting() *GridTrafficCaptureRecDnsSetting {
	this := GridTrafficCaptureRecDnsSetting{}
	return &this
}

// NewGridTrafficCaptureRecDnsSettingWithDefaults instantiates a new GridTrafficCaptureRecDnsSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridTrafficCaptureRecDnsSettingWithDefaults() *GridTrafficCaptureRecDnsSetting {
	this := GridTrafficCaptureRecDnsSetting{}
	return &this
}

// GetRecDnsLatencyTriggerEnable returns the RecDnsLatencyTriggerEnable field value if set, zero value otherwise.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyTriggerEnable() bool {
	if o == nil || IsNil(o.RecDnsLatencyTriggerEnable) {
		var ret bool
		return ret
	}
	return *o.RecDnsLatencyTriggerEnable
}

// GetRecDnsLatencyTriggerEnableOk returns a tuple with the RecDnsLatencyTriggerEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyTriggerEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.RecDnsLatencyTriggerEnable) {
		return nil, false
	}
	return o.RecDnsLatencyTriggerEnable, true
}

// HasRecDnsLatencyTriggerEnable returns a boolean if a field has been set.
func (o *GridTrafficCaptureRecDnsSetting) HasRecDnsLatencyTriggerEnable() bool {
	if o != nil && !IsNil(o.RecDnsLatencyTriggerEnable) {
		return true
	}

	return false
}

// SetRecDnsLatencyTriggerEnable gets a reference to the given bool and assigns it to the RecDnsLatencyTriggerEnable field.
func (o *GridTrafficCaptureRecDnsSetting) SetRecDnsLatencyTriggerEnable(v bool) {
	o.RecDnsLatencyTriggerEnable = &v
}

// GetRecDnsLatencyThreshold returns the RecDnsLatencyThreshold field value if set, zero value otherwise.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyThreshold() int64 {
	if o == nil || IsNil(o.RecDnsLatencyThreshold) {
		var ret int64
		return ret
	}
	return *o.RecDnsLatencyThreshold
}

// GetRecDnsLatencyThresholdOk returns a tuple with the RecDnsLatencyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.RecDnsLatencyThreshold) {
		return nil, false
	}
	return o.RecDnsLatencyThreshold, true
}

// HasRecDnsLatencyThreshold returns a boolean if a field has been set.
func (o *GridTrafficCaptureRecDnsSetting) HasRecDnsLatencyThreshold() bool {
	if o != nil && !IsNil(o.RecDnsLatencyThreshold) {
		return true
	}

	return false
}

// SetRecDnsLatencyThreshold gets a reference to the given int64 and assigns it to the RecDnsLatencyThreshold field.
func (o *GridTrafficCaptureRecDnsSetting) SetRecDnsLatencyThreshold(v int64) {
	o.RecDnsLatencyThreshold = &v
}

// GetRecDnsLatencyReset returns the RecDnsLatencyReset field value if set, zero value otherwise.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyReset() int64 {
	if o == nil || IsNil(o.RecDnsLatencyReset) {
		var ret int64
		return ret
	}
	return *o.RecDnsLatencyReset
}

// GetRecDnsLatencyResetOk returns a tuple with the RecDnsLatencyReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyResetOk() (*int64, bool) {
	if o == nil || IsNil(o.RecDnsLatencyReset) {
		return nil, false
	}
	return o.RecDnsLatencyReset, true
}

// HasRecDnsLatencyReset returns a boolean if a field has been set.
func (o *GridTrafficCaptureRecDnsSetting) HasRecDnsLatencyReset() bool {
	if o != nil && !IsNil(o.RecDnsLatencyReset) {
		return true
	}

	return false
}

// SetRecDnsLatencyReset gets a reference to the given int64 and assigns it to the RecDnsLatencyReset field.
func (o *GridTrafficCaptureRecDnsSetting) SetRecDnsLatencyReset(v int64) {
	o.RecDnsLatencyReset = &v
}

// GetRecDnsLatencyListenOnSource returns the RecDnsLatencyListenOnSource field value if set, zero value otherwise.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyListenOnSource() string {
	if o == nil || IsNil(o.RecDnsLatencyListenOnSource) {
		var ret string
		return ret
	}
	return *o.RecDnsLatencyListenOnSource
}

// GetRecDnsLatencyListenOnSourceOk returns a tuple with the RecDnsLatencyListenOnSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrafficCaptureRecDnsSetting) GetRecDnsLatencyListenOnSourceOk() (*string, bool) {
	if o == nil || IsNil(o.RecDnsLatencyListenOnSource) {
		return nil, false
	}
	return o.RecDnsLatencyListenOnSource, true
}

// HasRecDnsLatencyListenOnSource returns a boolean if a field has been set.
func (o *GridTrafficCaptureRecDnsSetting) HasRecDnsLatencyListenOnSource() bool {
	if o != nil && !IsNil(o.RecDnsLatencyListenOnSource) {
		return true
	}

	return false
}

// SetRecDnsLatencyListenOnSource gets a reference to the given string and assigns it to the RecDnsLatencyListenOnSource field.
func (o *GridTrafficCaptureRecDnsSetting) SetRecDnsLatencyListenOnSource(v string) {
	o.RecDnsLatencyListenOnSource = &v
}

// GetKpiMonitoredDomains returns the KpiMonitoredDomains field value if set, zero value otherwise.
func (o *GridTrafficCaptureRecDnsSetting) GetKpiMonitoredDomains() GridtrafficcapturerecdnssettingKpiMonitoredDomains {
	if o == nil || IsNil(o.KpiMonitoredDomains) {
		var ret GridtrafficcapturerecdnssettingKpiMonitoredDomains
		return ret
	}
	return *o.KpiMonitoredDomains
}

// GetKpiMonitoredDomainsOk returns a tuple with the KpiMonitoredDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrafficCaptureRecDnsSetting) GetKpiMonitoredDomainsOk() (*GridtrafficcapturerecdnssettingKpiMonitoredDomains, bool) {
	if o == nil || IsNil(o.KpiMonitoredDomains) {
		return nil, false
	}
	return o.KpiMonitoredDomains, true
}

// HasKpiMonitoredDomains returns a boolean if a field has been set.
func (o *GridTrafficCaptureRecDnsSetting) HasKpiMonitoredDomains() bool {
	if o != nil && !IsNil(o.KpiMonitoredDomains) {
		return true
	}

	return false
}

// SetKpiMonitoredDomains gets a reference to the given GridtrafficcapturerecdnssettingKpiMonitoredDomains and assigns it to the KpiMonitoredDomains field.
func (o *GridTrafficCaptureRecDnsSetting) SetKpiMonitoredDomains(v GridtrafficcapturerecdnssettingKpiMonitoredDomains) {
	o.KpiMonitoredDomains = &v
}

func (o GridTrafficCaptureRecDnsSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridTrafficCaptureRecDnsSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecDnsLatencyTriggerEnable) {
		toSerialize["rec_dns_latency_trigger_enable"] = o.RecDnsLatencyTriggerEnable
	}
	if !IsNil(o.RecDnsLatencyThreshold) {
		toSerialize["rec_dns_latency_threshold"] = o.RecDnsLatencyThreshold
	}
	if !IsNil(o.RecDnsLatencyReset) {
		toSerialize["rec_dns_latency_reset"] = o.RecDnsLatencyReset
	}
	if !IsNil(o.RecDnsLatencyListenOnSource) {
		toSerialize["rec_dns_latency_listen_on_source"] = o.RecDnsLatencyListenOnSource
	}
	if !IsNil(o.KpiMonitoredDomains) {
		toSerialize["kpi_monitored_domains"] = o.KpiMonitoredDomains
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridTrafficCaptureRecDnsSetting) UnmarshalJSON(data []byte) (err error) {
	varGridTrafficCaptureRecDnsSetting := _GridTrafficCaptureRecDnsSetting{}

	err = json.Unmarshal(data, &varGridTrafficCaptureRecDnsSetting)

	if err != nil {
		return err
	}

	*o = GridTrafficCaptureRecDnsSetting(varGridTrafficCaptureRecDnsSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rec_dns_latency_trigger_enable")
		delete(additionalProperties, "rec_dns_latency_threshold")
		delete(additionalProperties, "rec_dns_latency_reset")
		delete(additionalProperties, "rec_dns_latency_listen_on_source")
		delete(additionalProperties, "kpi_monitored_domains")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridTrafficCaptureRecDnsSetting struct {
	value *GridTrafficCaptureRecDnsSetting
	isSet bool
}

func (v NullableGridTrafficCaptureRecDnsSetting) Get() *GridTrafficCaptureRecDnsSetting {
	return v.value
}

func (v *NullableGridTrafficCaptureRecDnsSetting) Set(val *GridTrafficCaptureRecDnsSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableGridTrafficCaptureRecDnsSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableGridTrafficCaptureRecDnsSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridTrafficCaptureRecDnsSetting(val *GridTrafficCaptureRecDnsSetting) *NullableGridTrafficCaptureRecDnsSetting {
	return &NullableGridTrafficCaptureRecDnsSetting{value: val, isSet: true}
}

func (v NullableGridTrafficCaptureRecDnsSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridTrafficCaptureRecDnsSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
