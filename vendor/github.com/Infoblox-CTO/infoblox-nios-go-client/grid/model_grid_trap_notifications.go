/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridTrapNotifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridTrapNotifications{}

// GridTrapNotifications struct for GridTrapNotifications
type GridTrapNotifications struct {
	// Determines the type of a given trap.
	TrapType *string `json:"trap_type,omitempty"`
	// Determines if the email notifications for the given trap are enabled or not.
	EnableEmail *bool `json:"enable_email,omitempty"`
	// Determines if the trap is enabled or not.
	EnableTrap           *bool `json:"enable_trap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridTrapNotifications GridTrapNotifications

// NewGridTrapNotifications instantiates a new GridTrapNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridTrapNotifications() *GridTrapNotifications {
	this := GridTrapNotifications{}
	return &this
}

// NewGridTrapNotificationsWithDefaults instantiates a new GridTrapNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridTrapNotificationsWithDefaults() *GridTrapNotifications {
	this := GridTrapNotifications{}
	return &this
}

// GetTrapType returns the TrapType field value if set, zero value otherwise.
func (o *GridTrapNotifications) GetTrapType() string {
	if o == nil || IsNil(o.TrapType) {
		var ret string
		return ret
	}
	return *o.TrapType
}

// GetTrapTypeOk returns a tuple with the TrapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrapNotifications) GetTrapTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrapType) {
		return nil, false
	}
	return o.TrapType, true
}

// HasTrapType returns a boolean if a field has been set.
func (o *GridTrapNotifications) HasTrapType() bool {
	if o != nil && !IsNil(o.TrapType) {
		return true
	}

	return false
}

// SetTrapType gets a reference to the given string and assigns it to the TrapType field.
func (o *GridTrapNotifications) SetTrapType(v string) {
	o.TrapType = &v
}

// GetEnableEmail returns the EnableEmail field value if set, zero value otherwise.
func (o *GridTrapNotifications) GetEnableEmail() bool {
	if o == nil || IsNil(o.EnableEmail) {
		var ret bool
		return ret
	}
	return *o.EnableEmail
}

// GetEnableEmailOk returns a tuple with the EnableEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrapNotifications) GetEnableEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmail) {
		return nil, false
	}
	return o.EnableEmail, true
}

// HasEnableEmail returns a boolean if a field has been set.
func (o *GridTrapNotifications) HasEnableEmail() bool {
	if o != nil && !IsNil(o.EnableEmail) {
		return true
	}

	return false
}

// SetEnableEmail gets a reference to the given bool and assigns it to the EnableEmail field.
func (o *GridTrapNotifications) SetEnableEmail(v bool) {
	o.EnableEmail = &v
}

// GetEnableTrap returns the EnableTrap field value if set, zero value otherwise.
func (o *GridTrapNotifications) GetEnableTrap() bool {
	if o == nil || IsNil(o.EnableTrap) {
		var ret bool
		return ret
	}
	return *o.EnableTrap
}

// GetEnableTrapOk returns a tuple with the EnableTrap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridTrapNotifications) GetEnableTrapOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTrap) {
		return nil, false
	}
	return o.EnableTrap, true
}

// HasEnableTrap returns a boolean if a field has been set.
func (o *GridTrapNotifications) HasEnableTrap() bool {
	if o != nil && !IsNil(o.EnableTrap) {
		return true
	}

	return false
}

// SetEnableTrap gets a reference to the given bool and assigns it to the EnableTrap field.
func (o *GridTrapNotifications) SetEnableTrap(v bool) {
	o.EnableTrap = &v
}

func (o GridTrapNotifications) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridTrapNotifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrapType) {
		toSerialize["trap_type"] = o.TrapType
	}
	if !IsNil(o.EnableEmail) {
		toSerialize["enable_email"] = o.EnableEmail
	}
	if !IsNil(o.EnableTrap) {
		toSerialize["enable_trap"] = o.EnableTrap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridTrapNotifications) UnmarshalJSON(data []byte) (err error) {
	varGridTrapNotifications := _GridTrapNotifications{}

	err = json.Unmarshal(data, &varGridTrapNotifications)

	if err != nil {
		return err
	}

	*o = GridTrapNotifications(varGridTrapNotifications)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "trap_type")
		delete(additionalProperties, "enable_email")
		delete(additionalProperties, "enable_trap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridTrapNotifications struct {
	value *GridTrapNotifications
	isSet bool
}

func (v NullableGridTrapNotifications) Get() *GridTrapNotifications {
	return v.value
}

func (v *NullableGridTrapNotifications) Set(val *GridTrapNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableGridTrapNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableGridTrapNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridTrapNotifications(val *GridTrapNotifications) *NullableGridTrapNotifications {
	return &NullableGridTrapNotifications{value: val, isSet: true}
}

func (v NullableGridTrapNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridTrapNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
