/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridX509certificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridX509certificate{}

// GridX509certificate struct for GridX509certificate
type GridX509certificate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Certificate issuer.
	Issuer *string `json:"issuer,omitempty"`
	// X509Certificate serial number.
	Serial *string `json:"serial,omitempty"`
	// A Distinguished Name that is made of multiple relative distinguished names (RDNs).
	Subject *string `json:"subject,omitempty"`
	// Certificate expiry date.
	ValidNotAfter *int64 `json:"valid_not_after,omitempty"`
	// Certificate validity start date.
	ValidNotBefore *int64 `json:"valid_not_before,omitempty"`
}

// NewGridX509certificate instantiates a new GridX509certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridX509certificate() *GridX509certificate {
	this := GridX509certificate{}
	return &this
}

// NewGridX509certificateWithDefaults instantiates a new GridX509certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridX509certificateWithDefaults() *GridX509certificate {
	this := GridX509certificate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GridX509certificate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GridX509certificate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GridX509certificate) SetRef(v string) {
	o.Ref = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *GridX509certificate) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *GridX509certificate) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *GridX509certificate) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *GridX509certificate) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *GridX509certificate) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *GridX509certificate) SetSerial(v string) {
	o.Serial = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *GridX509certificate) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *GridX509certificate) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *GridX509certificate) SetSubject(v string) {
	o.Subject = &v
}

// GetValidNotAfter returns the ValidNotAfter field value if set, zero value otherwise.
func (o *GridX509certificate) GetValidNotAfter() int64 {
	if o == nil || IsNil(o.ValidNotAfter) {
		var ret int64
		return ret
	}
	return *o.ValidNotAfter
}

// GetValidNotAfterOk returns a tuple with the ValidNotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetValidNotAfterOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidNotAfter) {
		return nil, false
	}
	return o.ValidNotAfter, true
}

// HasValidNotAfter returns a boolean if a field has been set.
func (o *GridX509certificate) HasValidNotAfter() bool {
	if o != nil && !IsNil(o.ValidNotAfter) {
		return true
	}

	return false
}

// SetValidNotAfter gets a reference to the given int64 and assigns it to the ValidNotAfter field.
func (o *GridX509certificate) SetValidNotAfter(v int64) {
	o.ValidNotAfter = &v
}

// GetValidNotBefore returns the ValidNotBefore field value if set, zero value otherwise.
func (o *GridX509certificate) GetValidNotBefore() int64 {
	if o == nil || IsNil(o.ValidNotBefore) {
		var ret int64
		return ret
	}
	return *o.ValidNotBefore
}

// GetValidNotBeforeOk returns a tuple with the ValidNotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridX509certificate) GetValidNotBeforeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidNotBefore) {
		return nil, false
	}
	return o.ValidNotBefore, true
}

// HasValidNotBefore returns a boolean if a field has been set.
func (o *GridX509certificate) HasValidNotBefore() bool {
	if o != nil && !IsNil(o.ValidNotBefore) {
		return true
	}

	return false
}

// SetValidNotBefore gets a reference to the given int64 and assigns it to the ValidNotBefore field.
func (o *GridX509certificate) SetValidNotBefore(v int64) {
	o.ValidNotBefore = &v
}

func (o GridX509certificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridX509certificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.ValidNotAfter) {
		toSerialize["valid_not_after"] = o.ValidNotAfter
	}
	if !IsNil(o.ValidNotBefore) {
		toSerialize["valid_not_before"] = o.ValidNotBefore
	}
	return toSerialize, nil
}

type NullableGridX509certificate struct {
	value *GridX509certificate
	isSet bool
}

func (v NullableGridX509certificate) Get() *GridX509certificate {
	return v.value
}

func (v *NullableGridX509certificate) Set(val *GridX509certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableGridX509certificate) IsSet() bool {
	return v.isSet
}

func (v *NullableGridX509certificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridX509certificate(val *GridX509certificate) *NullableGridX509certificate {
	return &NullableGridX509certificate{value: val, isSet: true}
}

func (v NullableGridX509certificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridX509certificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
