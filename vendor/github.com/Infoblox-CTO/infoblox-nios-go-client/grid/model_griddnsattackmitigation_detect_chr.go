/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GriddnsattackmitigationDetectChr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GriddnsattackmitigationDetectChr{}

// GriddnsattackmitigationDetectChr struct for GriddnsattackmitigationDetectChr
type GriddnsattackmitigationDetectChr struct {
	// Determines if DNS attack detection is enabled or not.
	Enable *bool `json:"enable,omitempty"`
	// The high threshold value (in percentage) for starting DNS attack detection.
	High *int64 `json:"high,omitempty"`
	// The maximum number of events that have occurred before processing DNS attack detection.
	IntervalMax *int64 `json:"interval_max,omitempty"`
	// The minimum number of events that have occurred before processing DNS attack detection.
	IntervalMin *int64 `json:"interval_min,omitempty"`
	// The time interval between detection processing.
	IntervalTime *int64 `json:"interval_time,omitempty"`
	// The low threshold value (in percentage) for starting DNS attack detection.
	Low                  *int64 `json:"low,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GriddnsattackmitigationDetectChr GriddnsattackmitigationDetectChr

// NewGriddnsattackmitigationDetectChr instantiates a new GriddnsattackmitigationDetectChr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGriddnsattackmitigationDetectChr() *GriddnsattackmitigationDetectChr {
	this := GriddnsattackmitigationDetectChr{}
	return &this
}

// NewGriddnsattackmitigationDetectChrWithDefaults instantiates a new GriddnsattackmitigationDetectChr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGriddnsattackmitigationDetectChrWithDefaults() *GriddnsattackmitigationDetectChr {
	this := GriddnsattackmitigationDetectChr{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *GriddnsattackmitigationDetectChr) SetEnable(v bool) {
	o.Enable = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetHigh() int64 {
	if o == nil || IsNil(o.High) {
		var ret int64
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetHighOk() (*int64, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given int64 and assigns it to the High field.
func (o *GriddnsattackmitigationDetectChr) SetHigh(v int64) {
	o.High = &v
}

// GetIntervalMax returns the IntervalMax field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetIntervalMax() int64 {
	if o == nil || IsNil(o.IntervalMax) {
		var ret int64
		return ret
	}
	return *o.IntervalMax
}

// GetIntervalMaxOk returns a tuple with the IntervalMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetIntervalMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.IntervalMax) {
		return nil, false
	}
	return o.IntervalMax, true
}

// HasIntervalMax returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasIntervalMax() bool {
	if o != nil && !IsNil(o.IntervalMax) {
		return true
	}

	return false
}

// SetIntervalMax gets a reference to the given int64 and assigns it to the IntervalMax field.
func (o *GriddnsattackmitigationDetectChr) SetIntervalMax(v int64) {
	o.IntervalMax = &v
}

// GetIntervalMin returns the IntervalMin field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetIntervalMin() int64 {
	if o == nil || IsNil(o.IntervalMin) {
		var ret int64
		return ret
	}
	return *o.IntervalMin
}

// GetIntervalMinOk returns a tuple with the IntervalMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetIntervalMinOk() (*int64, bool) {
	if o == nil || IsNil(o.IntervalMin) {
		return nil, false
	}
	return o.IntervalMin, true
}

// HasIntervalMin returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasIntervalMin() bool {
	if o != nil && !IsNil(o.IntervalMin) {
		return true
	}

	return false
}

// SetIntervalMin gets a reference to the given int64 and assigns it to the IntervalMin field.
func (o *GriddnsattackmitigationDetectChr) SetIntervalMin(v int64) {
	o.IntervalMin = &v
}

// GetIntervalTime returns the IntervalTime field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetIntervalTime() int64 {
	if o == nil || IsNil(o.IntervalTime) {
		var ret int64
		return ret
	}
	return *o.IntervalTime
}

// GetIntervalTimeOk returns a tuple with the IntervalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetIntervalTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.IntervalTime) {
		return nil, false
	}
	return o.IntervalTime, true
}

// HasIntervalTime returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasIntervalTime() bool {
	if o != nil && !IsNil(o.IntervalTime) {
		return true
	}

	return false
}

// SetIntervalTime gets a reference to the given int64 and assigns it to the IntervalTime field.
func (o *GriddnsattackmitigationDetectChr) SetIntervalTime(v int64) {
	o.IntervalTime = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *GriddnsattackmitigationDetectChr) GetLow() int64 {
	if o == nil || IsNil(o.Low) {
		var ret int64
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GriddnsattackmitigationDetectChr) GetLowOk() (*int64, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *GriddnsattackmitigationDetectChr) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given int64 and assigns it to the Low field.
func (o *GriddnsattackmitigationDetectChr) SetLow(v int64) {
	o.Low = &v
}

func (o GriddnsattackmitigationDetectChr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GriddnsattackmitigationDetectChr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.IntervalMax) {
		toSerialize["interval_max"] = o.IntervalMax
	}
	if !IsNil(o.IntervalMin) {
		toSerialize["interval_min"] = o.IntervalMin
	}
	if !IsNil(o.IntervalTime) {
		toSerialize["interval_time"] = o.IntervalTime
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GriddnsattackmitigationDetectChr) UnmarshalJSON(data []byte) (err error) {
	varGriddnsattackmitigationDetectChr := _GriddnsattackmitigationDetectChr{}

	err = json.Unmarshal(data, &varGriddnsattackmitigationDetectChr)

	if err != nil {
		return err
	}

	*o = GriddnsattackmitigationDetectChr(varGriddnsattackmitigationDetectChr)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable")
		delete(additionalProperties, "high")
		delete(additionalProperties, "interval_max")
		delete(additionalProperties, "interval_min")
		delete(additionalProperties, "interval_time")
		delete(additionalProperties, "low")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGriddnsattackmitigationDetectChr struct {
	value *GriddnsattackmitigationDetectChr
	isSet bool
}

func (v NullableGriddnsattackmitigationDetectChr) Get() *GriddnsattackmitigationDetectChr {
	return v.value
}

func (v *NullableGriddnsattackmitigationDetectChr) Set(val *GriddnsattackmitigationDetectChr) {
	v.value = val
	v.isSet = true
}

func (v NullableGriddnsattackmitigationDetectChr) IsSet() bool {
	return v.isSet
}

func (v *NullableGriddnsattackmitigationDetectChr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGriddnsattackmitigationDetectChr(val *GriddnsattackmitigationDetectChr) *NullableGriddnsattackmitigationDetectChr {
	return &NullableGriddnsattackmitigationDetectChr{value: val, isSet: true}
}

func (v NullableGriddnsattackmitigationDetectChr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGriddnsattackmitigationDetectChr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
