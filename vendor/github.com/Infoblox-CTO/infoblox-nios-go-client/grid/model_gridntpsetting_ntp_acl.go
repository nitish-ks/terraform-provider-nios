/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridntpsettingNtpAcl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridntpsettingNtpAcl{}

// GridntpsettingNtpAcl struct for GridntpsettingNtpAcl
type GridntpsettingNtpAcl struct {
	// The NTP access control list type.
	AclType *string                     `json:"acl_type,omitempty"`
	AcList  *GridntpsettingntpaclAcList `json:"ac_list,omitempty"`
	// The NTP access named ACL.
	NamedAcl *string `json:"named_acl,omitempty"`
	// The type of service with access control for the assigned named ACL.
	Service              *string `json:"service,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridntpsettingNtpAcl GridntpsettingNtpAcl

// NewGridntpsettingNtpAcl instantiates a new GridntpsettingNtpAcl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridntpsettingNtpAcl() *GridntpsettingNtpAcl {
	this := GridntpsettingNtpAcl{}
	return &this
}

// NewGridntpsettingNtpAclWithDefaults instantiates a new GridntpsettingNtpAcl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridntpsettingNtpAclWithDefaults() *GridntpsettingNtpAcl {
	this := GridntpsettingNtpAcl{}
	return &this
}

// GetAclType returns the AclType field value if set, zero value otherwise.
func (o *GridntpsettingNtpAcl) GetAclType() string {
	if o == nil || IsNil(o.AclType) {
		var ret string
		return ret
	}
	return *o.AclType
}

// GetAclTypeOk returns a tuple with the AclType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridntpsettingNtpAcl) GetAclTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AclType) {
		return nil, false
	}
	return o.AclType, true
}

// HasAclType returns a boolean if a field has been set.
func (o *GridntpsettingNtpAcl) HasAclType() bool {
	if o != nil && !IsNil(o.AclType) {
		return true
	}

	return false
}

// SetAclType gets a reference to the given string and assigns it to the AclType field.
func (o *GridntpsettingNtpAcl) SetAclType(v string) {
	o.AclType = &v
}

// GetAcList returns the AcList field value if set, zero value otherwise.
func (o *GridntpsettingNtpAcl) GetAcList() GridntpsettingntpaclAcList {
	if o == nil || IsNil(o.AcList) {
		var ret GridntpsettingntpaclAcList
		return ret
	}
	return *o.AcList
}

// GetAcListOk returns a tuple with the AcList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridntpsettingNtpAcl) GetAcListOk() (*GridntpsettingntpaclAcList, bool) {
	if o == nil || IsNil(o.AcList) {
		return nil, false
	}
	return o.AcList, true
}

// HasAcList returns a boolean if a field has been set.
func (o *GridntpsettingNtpAcl) HasAcList() bool {
	if o != nil && !IsNil(o.AcList) {
		return true
	}

	return false
}

// SetAcList gets a reference to the given GridntpsettingntpaclAcList and assigns it to the AcList field.
func (o *GridntpsettingNtpAcl) SetAcList(v GridntpsettingntpaclAcList) {
	o.AcList = &v
}

// GetNamedAcl returns the NamedAcl field value if set, zero value otherwise.
func (o *GridntpsettingNtpAcl) GetNamedAcl() string {
	if o == nil || IsNil(o.NamedAcl) {
		var ret string
		return ret
	}
	return *o.NamedAcl
}

// GetNamedAclOk returns a tuple with the NamedAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridntpsettingNtpAcl) GetNamedAclOk() (*string, bool) {
	if o == nil || IsNil(o.NamedAcl) {
		return nil, false
	}
	return o.NamedAcl, true
}

// HasNamedAcl returns a boolean if a field has been set.
func (o *GridntpsettingNtpAcl) HasNamedAcl() bool {
	if o != nil && !IsNil(o.NamedAcl) {
		return true
	}

	return false
}

// SetNamedAcl gets a reference to the given string and assigns it to the NamedAcl field.
func (o *GridntpsettingNtpAcl) SetNamedAcl(v string) {
	o.NamedAcl = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *GridntpsettingNtpAcl) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridntpsettingNtpAcl) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *GridntpsettingNtpAcl) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *GridntpsettingNtpAcl) SetService(v string) {
	o.Service = &v
}

func (o GridntpsettingNtpAcl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridntpsettingNtpAcl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AclType) {
		toSerialize["acl_type"] = o.AclType
	}
	if !IsNil(o.AcList) {
		toSerialize["ac_list"] = o.AcList
	}
	if !IsNil(o.NamedAcl) {
		toSerialize["named_acl"] = o.NamedAcl
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridntpsettingNtpAcl) UnmarshalJSON(data []byte) (err error) {
	varGridntpsettingNtpAcl := _GridntpsettingNtpAcl{}

	err = json.Unmarshal(data, &varGridntpsettingNtpAcl)

	if err != nil {
		return err
	}

	*o = GridntpsettingNtpAcl(varGridntpsettingNtpAcl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acl_type")
		delete(additionalProperties, "ac_list")
		delete(additionalProperties, "named_acl")
		delete(additionalProperties, "service")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridntpsettingNtpAcl struct {
	value *GridntpsettingNtpAcl
	isSet bool
}

func (v NullableGridntpsettingNtpAcl) Get() *GridntpsettingNtpAcl {
	return v.value
}

func (v *NullableGridntpsettingNtpAcl) Set(val *GridntpsettingNtpAcl) {
	v.value = val
	v.isSet = true
}

func (v NullableGridntpsettingNtpAcl) IsSet() bool {
	return v.isSet
}

func (v *NullableGridntpsettingNtpAcl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridntpsettingNtpAcl(val *GridntpsettingNtpAcl) *NullableGridntpsettingNtpAcl {
	return &NullableGridntpsettingNtpAcl{value: val, isSet: true}
}

func (v NullableGridntpsettingNtpAcl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridntpsettingNtpAcl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
