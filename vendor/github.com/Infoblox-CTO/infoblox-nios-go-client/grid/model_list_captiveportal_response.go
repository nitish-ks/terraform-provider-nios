/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListCaptiveportalResponse - struct for ListCaptiveportalResponse
type ListCaptiveportalResponse struct {
	ListCaptiveportalResponseObject *ListCaptiveportalResponseObject
	ArrayOfCaptiveportal            *[]Captiveportal
}

// ListCaptiveportalResponseObjectAsListCaptiveportalResponse is a convenience function that returns ListCaptiveportalResponseObject wrapped in ListCaptiveportalResponse
func ListCaptiveportalResponseObjectAsListCaptiveportalResponse(v *ListCaptiveportalResponseObject) ListCaptiveportalResponse {
	return ListCaptiveportalResponse{
		ListCaptiveportalResponseObject: v,
	}
}

// []CaptiveportalAsListCaptiveportalResponse is a convenience function that returns []Captiveportal wrapped in ListCaptiveportalResponse
func ArrayOfCaptiveportalAsListCaptiveportalResponse(v *[]Captiveportal) ListCaptiveportalResponse {
	return ListCaptiveportalResponse{
		ArrayOfCaptiveportal: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCaptiveportalResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListCaptiveportalResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListCaptiveportalResponseObject)
	if err == nil {
		jsonListCaptiveportalResponseObject, _ := json.Marshal(dst.ListCaptiveportalResponseObject)
		if string(jsonListCaptiveportalResponseObject) == "{}" { // empty struct
			dst.ListCaptiveportalResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListCaptiveportalResponseObject = nil
	}

	// try to unmarshal data into ArrayOfCaptiveportal
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCaptiveportal)
	if err == nil {
		jsonArrayOfCaptiveportal, _ := json.Marshal(dst.ArrayOfCaptiveportal)
		if string(jsonArrayOfCaptiveportal) == "{}" { // empty struct
			dst.ArrayOfCaptiveportal = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCaptiveportal = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListCaptiveportalResponseObject = nil
		dst.ArrayOfCaptiveportal = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCaptiveportalResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCaptiveportalResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCaptiveportalResponse) MarshalJSON() ([]byte, error) {
	if src.ListCaptiveportalResponseObject != nil {
		return json.Marshal(&src.ListCaptiveportalResponseObject)
	}

	if src.ArrayOfCaptiveportal != nil {
		return json.Marshal(&src.ArrayOfCaptiveportal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCaptiveportalResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListCaptiveportalResponseObject != nil {
		return obj.ListCaptiveportalResponseObject
	}

	if obj.ArrayOfCaptiveportal != nil {
		return obj.ArrayOfCaptiveportal
	}

	// all schemas are nil
	return nil
}

type NullableListCaptiveportalResponse struct {
	value *ListCaptiveportalResponse
	isSet bool
}

func (v NullableListCaptiveportalResponse) Get() *ListCaptiveportalResponse {
	return v.value
}

func (v *NullableListCaptiveportalResponse) Set(val *ListCaptiveportalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCaptiveportalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCaptiveportalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCaptiveportalResponse(val *ListCaptiveportalResponse) *NullableListCaptiveportalResponse {
	return &NullableListCaptiveportalResponse{value: val, isSet: true}
}

func (v NullableListCaptiveportalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCaptiveportalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
