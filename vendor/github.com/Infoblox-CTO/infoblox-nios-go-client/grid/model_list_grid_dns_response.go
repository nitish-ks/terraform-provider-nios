/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListGridDnsResponse - struct for ListGridDnsResponse
type ListGridDnsResponse struct {
	ListGridDnsResponseObject *ListGridDnsResponseObject
	ArrayOfGridDns            *[]GridDns
}

// ListGridDnsResponseObjectAsListGridDnsResponse is a convenience function that returns ListGridDnsResponseObject wrapped in ListGridDnsResponse
func ListGridDnsResponseObjectAsListGridDnsResponse(v *ListGridDnsResponseObject) ListGridDnsResponse {
	return ListGridDnsResponse{
		ListGridDnsResponseObject: v,
	}
}

// []GridDnsAsListGridDnsResponse is a convenience function that returns []GridDns wrapped in ListGridDnsResponse
func ArrayOfGridDnsAsListGridDnsResponse(v *[]GridDns) ListGridDnsResponse {
	return ListGridDnsResponse{
		ArrayOfGridDns: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGridDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGridDnsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGridDnsResponseObject)
	if err == nil {
		jsonListGridDnsResponseObject, _ := json.Marshal(dst.ListGridDnsResponseObject)
		if string(jsonListGridDnsResponseObject) == "{}" { // empty struct
			dst.ListGridDnsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGridDnsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGridDns
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGridDns)
	if err == nil {
		jsonArrayOfGridDns, _ := json.Marshal(dst.ArrayOfGridDns)
		if string(jsonArrayOfGridDns) == "{}" { // empty struct
			dst.ArrayOfGridDns = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGridDns = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGridDnsResponseObject = nil
		dst.ArrayOfGridDns = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGridDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGridDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGridDnsResponse) MarshalJSON() ([]byte, error) {
	if src.ListGridDnsResponseObject != nil {
		return json.Marshal(&src.ListGridDnsResponseObject)
	}

	if src.ArrayOfGridDns != nil {
		return json.Marshal(&src.ArrayOfGridDns)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGridDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGridDnsResponseObject != nil {
		return obj.ListGridDnsResponseObject
	}

	if obj.ArrayOfGridDns != nil {
		return obj.ArrayOfGridDns
	}

	// all schemas are nil
	return nil
}

type NullableListGridDnsResponse struct {
	value *ListGridDnsResponse
	isSet bool
}

func (v NullableListGridDnsResponse) Get() *ListGridDnsResponse {
	return v.value
}

func (v *NullableListGridDnsResponse) Set(val *ListGridDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGridDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGridDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGridDnsResponse(val *ListGridDnsResponse) *NullableListGridDnsResponse {
	return &NullableListGridDnsResponse{value: val, isSet: true}
}

func (v NullableListGridDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGridDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
