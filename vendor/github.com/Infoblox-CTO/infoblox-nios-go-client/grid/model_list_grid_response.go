/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListGridResponse - struct for ListGridResponse
type ListGridResponse struct {
	ListGridResponseObject *ListGridResponseObject
	ArrayOfGrid            *[]Grid
}

// ListGridResponseObjectAsListGridResponse is a convenience function that returns ListGridResponseObject wrapped in ListGridResponse
func ListGridResponseObjectAsListGridResponse(v *ListGridResponseObject) ListGridResponse {
	return ListGridResponse{
		ListGridResponseObject: v,
	}
}

// []GridAsListGridResponse is a convenience function that returns []Grid wrapped in ListGridResponse
func ArrayOfGridAsListGridResponse(v *[]Grid) ListGridResponse {
	return ListGridResponse{
		ArrayOfGrid: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGridResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGridResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGridResponseObject)
	if err == nil {
		jsonListGridResponseObject, _ := json.Marshal(dst.ListGridResponseObject)
		if string(jsonListGridResponseObject) == "{}" { // empty struct
			dst.ListGridResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGridResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGrid
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGrid)
	if err == nil {
		jsonArrayOfGrid, _ := json.Marshal(dst.ArrayOfGrid)
		if string(jsonArrayOfGrid) == "{}" { // empty struct
			dst.ArrayOfGrid = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGrid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGridResponseObject = nil
		dst.ArrayOfGrid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGridResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGridResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGridResponse) MarshalJSON() ([]byte, error) {
	if src.ListGridResponseObject != nil {
		return json.Marshal(&src.ListGridResponseObject)
	}

	if src.ArrayOfGrid != nil {
		return json.Marshal(&src.ArrayOfGrid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGridResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGridResponseObject != nil {
		return obj.ListGridResponseObject
	}

	if obj.ArrayOfGrid != nil {
		return obj.ArrayOfGrid
	}

	// all schemas are nil
	return nil
}

type NullableListGridResponse struct {
	value *ListGridResponse
	isSet bool
}

func (v NullableListGridResponse) Get() *ListGridResponse {
	return v.value
}

func (v *NullableListGridResponse) Set(val *ListGridResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGridResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGridResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGridResponse(val *ListGridResponse) *NullableListGridResponse {
	return &NullableListGridResponse{value: val, isSet: true}
}

func (v NullableListGridResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGridResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
