/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListGridX509certificateResponse - struct for ListGridX509certificateResponse
type ListGridX509certificateResponse struct {
	ListGridX509certificateResponseObject *ListGridX509certificateResponseObject
	ArrayOfGridX509certificate            *[]GridX509certificate
}

// ListGridX509certificateResponseObjectAsListGridX509certificateResponse is a convenience function that returns ListGridX509certificateResponseObject wrapped in ListGridX509certificateResponse
func ListGridX509certificateResponseObjectAsListGridX509certificateResponse(v *ListGridX509certificateResponseObject) ListGridX509certificateResponse {
	return ListGridX509certificateResponse{
		ListGridX509certificateResponseObject: v,
	}
}

// []GridX509certificateAsListGridX509certificateResponse is a convenience function that returns []GridX509certificate wrapped in ListGridX509certificateResponse
func ArrayOfGridX509certificateAsListGridX509certificateResponse(v *[]GridX509certificate) ListGridX509certificateResponse {
	return ListGridX509certificateResponse{
		ArrayOfGridX509certificate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGridX509certificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGridX509certificateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGridX509certificateResponseObject)
	if err == nil {
		jsonListGridX509certificateResponseObject, _ := json.Marshal(dst.ListGridX509certificateResponseObject)
		if string(jsonListGridX509certificateResponseObject) == "{}" { // empty struct
			dst.ListGridX509certificateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGridX509certificateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGridX509certificate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGridX509certificate)
	if err == nil {
		jsonArrayOfGridX509certificate, _ := json.Marshal(dst.ArrayOfGridX509certificate)
		if string(jsonArrayOfGridX509certificate) == "{}" { // empty struct
			dst.ArrayOfGridX509certificate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGridX509certificate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGridX509certificateResponseObject = nil
		dst.ArrayOfGridX509certificate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGridX509certificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGridX509certificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	if src.ListGridX509certificateResponseObject != nil {
		return json.Marshal(&src.ListGridX509certificateResponseObject)
	}

	if src.ArrayOfGridX509certificate != nil {
		return json.Marshal(&src.ArrayOfGridX509certificate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGridX509certificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGridX509certificateResponseObject != nil {
		return obj.ListGridX509certificateResponseObject
	}

	if obj.ArrayOfGridX509certificate != nil {
		return obj.ArrayOfGridX509certificate
	}

	// all schemas are nil
	return nil
}

type NullableListGridX509certificateResponse struct {
	value *ListGridX509certificateResponse
	isSet bool
}

func (v NullableListGridX509certificateResponse) Get() *ListGridX509certificateResponse {
	return v.value
}

func (v *NullableListGridX509certificateResponse) Set(val *ListGridX509certificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGridX509certificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGridX509certificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGridX509certificateResponse(val *ListGridX509certificateResponse) *NullableListGridX509certificateResponse {
	return &NullableListGridX509certificateResponse{value: val, isSet: true}
}

func (v NullableListGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGridX509certificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
