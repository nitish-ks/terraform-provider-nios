/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListMastergridResponse - struct for ListMastergridResponse
type ListMastergridResponse struct {
	ListMastergridResponseObject *ListMastergridResponseObject
	ArrayOfMastergrid            *[]Mastergrid
}

// ListMastergridResponseObjectAsListMastergridResponse is a convenience function that returns ListMastergridResponseObject wrapped in ListMastergridResponse
func ListMastergridResponseObjectAsListMastergridResponse(v *ListMastergridResponseObject) ListMastergridResponse {
	return ListMastergridResponse{
		ListMastergridResponseObject: v,
	}
}

// []MastergridAsListMastergridResponse is a convenience function that returns []Mastergrid wrapped in ListMastergridResponse
func ArrayOfMastergridAsListMastergridResponse(v *[]Mastergrid) ListMastergridResponse {
	return ListMastergridResponse{
		ArrayOfMastergrid: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMastergridResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMastergridResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMastergridResponseObject)
	if err == nil {
		jsonListMastergridResponseObject, _ := json.Marshal(dst.ListMastergridResponseObject)
		if string(jsonListMastergridResponseObject) == "{}" { // empty struct
			dst.ListMastergridResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMastergridResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMastergrid
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMastergrid)
	if err == nil {
		jsonArrayOfMastergrid, _ := json.Marshal(dst.ArrayOfMastergrid)
		if string(jsonArrayOfMastergrid) == "{}" { // empty struct
			dst.ArrayOfMastergrid = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMastergrid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMastergridResponseObject = nil
		dst.ArrayOfMastergrid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMastergridResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMastergridResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMastergridResponse) MarshalJSON() ([]byte, error) {
	if src.ListMastergridResponseObject != nil {
		return json.Marshal(&src.ListMastergridResponseObject)
	}

	if src.ArrayOfMastergrid != nil {
		return json.Marshal(&src.ArrayOfMastergrid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMastergridResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMastergridResponseObject != nil {
		return obj.ListMastergridResponseObject
	}

	if obj.ArrayOfMastergrid != nil {
		return obj.ArrayOfMastergrid
	}

	// all schemas are nil
	return nil
}

type NullableListMastergridResponse struct {
	value *ListMastergridResponse
	isSet bool
}

func (v NullableListMastergridResponse) Get() *ListMastergridResponse {
	return v.value
}

func (v *NullableListMastergridResponse) Set(val *ListMastergridResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMastergridResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMastergridResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMastergridResponse(val *ListMastergridResponse) *NullableListMastergridResponse {
	return &NullableListMastergridResponse{value: val, isSet: true}
}

func (v NullableListMastergridResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMastergridResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
