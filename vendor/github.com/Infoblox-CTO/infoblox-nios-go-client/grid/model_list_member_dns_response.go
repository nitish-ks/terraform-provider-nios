/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListMemberDnsResponse - struct for ListMemberDnsResponse
type ListMemberDnsResponse struct {
	ListMemberDnsResponseObject *ListMemberDnsResponseObject
	ArrayOfMemberDns            *[]MemberDns
}

// ListMemberDnsResponseObjectAsListMemberDnsResponse is a convenience function that returns ListMemberDnsResponseObject wrapped in ListMemberDnsResponse
func ListMemberDnsResponseObjectAsListMemberDnsResponse(v *ListMemberDnsResponseObject) ListMemberDnsResponse {
	return ListMemberDnsResponse{
		ListMemberDnsResponseObject: v,
	}
}

// []MemberDnsAsListMemberDnsResponse is a convenience function that returns []MemberDns wrapped in ListMemberDnsResponse
func ArrayOfMemberDnsAsListMemberDnsResponse(v *[]MemberDns) ListMemberDnsResponse {
	return ListMemberDnsResponse{
		ArrayOfMemberDns: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMemberDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMemberDnsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMemberDnsResponseObject)
	if err == nil {
		jsonListMemberDnsResponseObject, _ := json.Marshal(dst.ListMemberDnsResponseObject)
		if string(jsonListMemberDnsResponseObject) == "{}" { // empty struct
			dst.ListMemberDnsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMemberDnsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMemberDns
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMemberDns)
	if err == nil {
		jsonArrayOfMemberDns, _ := json.Marshal(dst.ArrayOfMemberDns)
		if string(jsonArrayOfMemberDns) == "{}" { // empty struct
			dst.ArrayOfMemberDns = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMemberDns = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMemberDnsResponseObject = nil
		dst.ArrayOfMemberDns = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMemberDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMemberDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMemberDnsResponse) MarshalJSON() ([]byte, error) {
	if src.ListMemberDnsResponseObject != nil {
		return json.Marshal(&src.ListMemberDnsResponseObject)
	}

	if src.ArrayOfMemberDns != nil {
		return json.Marshal(&src.ArrayOfMemberDns)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMemberDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMemberDnsResponseObject != nil {
		return obj.ListMemberDnsResponseObject
	}

	if obj.ArrayOfMemberDns != nil {
		return obj.ArrayOfMemberDns
	}

	// all schemas are nil
	return nil
}

type NullableListMemberDnsResponse struct {
	value *ListMemberDnsResponse
	isSet bool
}

func (v NullableListMemberDnsResponse) Get() *ListMemberDnsResponse {
	return v.value
}

func (v *NullableListMemberDnsResponse) Set(val *ListMemberDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMemberDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMemberDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMemberDnsResponse(val *ListMemberDnsResponse) *NullableListMemberDnsResponse {
	return &NullableListMemberDnsResponse{value: val, isSet: true}
}

func (v NullableListMemberDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMemberDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
