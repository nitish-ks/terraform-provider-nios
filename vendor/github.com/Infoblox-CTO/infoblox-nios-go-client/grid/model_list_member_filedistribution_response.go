/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListMemberFiledistributionResponse - struct for ListMemberFiledistributionResponse
type ListMemberFiledistributionResponse struct {
	ListMemberFiledistributionResponseObject *ListMemberFiledistributionResponseObject
	ArrayOfMemberFiledistribution            *[]MemberFiledistribution
}

// ListMemberFiledistributionResponseObjectAsListMemberFiledistributionResponse is a convenience function that returns ListMemberFiledistributionResponseObject wrapped in ListMemberFiledistributionResponse
func ListMemberFiledistributionResponseObjectAsListMemberFiledistributionResponse(v *ListMemberFiledistributionResponseObject) ListMemberFiledistributionResponse {
	return ListMemberFiledistributionResponse{
		ListMemberFiledistributionResponseObject: v,
	}
}

// []MemberFiledistributionAsListMemberFiledistributionResponse is a convenience function that returns []MemberFiledistribution wrapped in ListMemberFiledistributionResponse
func ArrayOfMemberFiledistributionAsListMemberFiledistributionResponse(v *[]MemberFiledistribution) ListMemberFiledistributionResponse {
	return ListMemberFiledistributionResponse{
		ArrayOfMemberFiledistribution: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMemberFiledistributionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMemberFiledistributionResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMemberFiledistributionResponseObject)
	if err == nil {
		jsonListMemberFiledistributionResponseObject, _ := json.Marshal(dst.ListMemberFiledistributionResponseObject)
		if string(jsonListMemberFiledistributionResponseObject) == "{}" { // empty struct
			dst.ListMemberFiledistributionResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMemberFiledistributionResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMemberFiledistribution
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMemberFiledistribution)
	if err == nil {
		jsonArrayOfMemberFiledistribution, _ := json.Marshal(dst.ArrayOfMemberFiledistribution)
		if string(jsonArrayOfMemberFiledistribution) == "{}" { // empty struct
			dst.ArrayOfMemberFiledistribution = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMemberFiledistribution = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMemberFiledistributionResponseObject = nil
		dst.ArrayOfMemberFiledistribution = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMemberFiledistributionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMemberFiledistributionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMemberFiledistributionResponse) MarshalJSON() ([]byte, error) {
	if src.ListMemberFiledistributionResponseObject != nil {
		return json.Marshal(&src.ListMemberFiledistributionResponseObject)
	}

	if src.ArrayOfMemberFiledistribution != nil {
		return json.Marshal(&src.ArrayOfMemberFiledistribution)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMemberFiledistributionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMemberFiledistributionResponseObject != nil {
		return obj.ListMemberFiledistributionResponseObject
	}

	if obj.ArrayOfMemberFiledistribution != nil {
		return obj.ArrayOfMemberFiledistribution
	}

	// all schemas are nil
	return nil
}

type NullableListMemberFiledistributionResponse struct {
	value *ListMemberFiledistributionResponse
	isSet bool
}

func (v NullableListMemberFiledistributionResponse) Get() *ListMemberFiledistributionResponse {
	return v.value
}

func (v *NullableListMemberFiledistributionResponse) Set(val *ListMemberFiledistributionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMemberFiledistributionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMemberFiledistributionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMemberFiledistributionResponse(val *ListMemberFiledistributionResponse) *NullableListMemberFiledistributionResponse {
	return &NullableListMemberFiledistributionResponse{value: val, isSet: true}
}

func (v NullableListMemberFiledistributionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMemberFiledistributionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
