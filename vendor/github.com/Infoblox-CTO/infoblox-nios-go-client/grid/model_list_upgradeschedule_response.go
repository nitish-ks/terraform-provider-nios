/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListUpgradescheduleResponse - struct for ListUpgradescheduleResponse
type ListUpgradescheduleResponse struct {
	ListUpgradescheduleResponseObject *ListUpgradescheduleResponseObject
	ArrayOfUpgradeschedule            *[]Upgradeschedule
}

// ListUpgradescheduleResponseObjectAsListUpgradescheduleResponse is a convenience function that returns ListUpgradescheduleResponseObject wrapped in ListUpgradescheduleResponse
func ListUpgradescheduleResponseObjectAsListUpgradescheduleResponse(v *ListUpgradescheduleResponseObject) ListUpgradescheduleResponse {
	return ListUpgradescheduleResponse{
		ListUpgradescheduleResponseObject: v,
	}
}

// []UpgradescheduleAsListUpgradescheduleResponse is a convenience function that returns []Upgradeschedule wrapped in ListUpgradescheduleResponse
func ArrayOfUpgradescheduleAsListUpgradescheduleResponse(v *[]Upgradeschedule) ListUpgradescheduleResponse {
	return ListUpgradescheduleResponse{
		ArrayOfUpgradeschedule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListUpgradescheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListUpgradescheduleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListUpgradescheduleResponseObject)
	if err == nil {
		jsonListUpgradescheduleResponseObject, _ := json.Marshal(dst.ListUpgradescheduleResponseObject)
		if string(jsonListUpgradescheduleResponseObject) == "{}" { // empty struct
			dst.ListUpgradescheduleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListUpgradescheduleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfUpgradeschedule
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUpgradeschedule)
	if err == nil {
		jsonArrayOfUpgradeschedule, _ := json.Marshal(dst.ArrayOfUpgradeschedule)
		if string(jsonArrayOfUpgradeschedule) == "{}" { // empty struct
			dst.ArrayOfUpgradeschedule = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfUpgradeschedule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListUpgradescheduleResponseObject = nil
		dst.ArrayOfUpgradeschedule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListUpgradescheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListUpgradescheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	if src.ListUpgradescheduleResponseObject != nil {
		return json.Marshal(&src.ListUpgradescheduleResponseObject)
	}

	if src.ArrayOfUpgradeschedule != nil {
		return json.Marshal(&src.ArrayOfUpgradeschedule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListUpgradescheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListUpgradescheduleResponseObject != nil {
		return obj.ListUpgradescheduleResponseObject
	}

	if obj.ArrayOfUpgradeschedule != nil {
		return obj.ArrayOfUpgradeschedule
	}

	// all schemas are nil
	return nil
}

type NullableListUpgradescheduleResponse struct {
	value *ListUpgradescheduleResponse
	isSet bool
}

func (v NullableListUpgradescheduleResponse) Get() *ListUpgradescheduleResponse {
	return v.value
}

func (v *NullableListUpgradescheduleResponse) Set(val *ListUpgradescheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUpgradescheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUpgradescheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUpgradescheduleResponse(val *ListUpgradescheduleResponse) *NullableListUpgradescheduleResponse {
	return &NullableListUpgradescheduleResponse{value: val, isSet: true}
}

func (v NullableListUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUpgradescheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
