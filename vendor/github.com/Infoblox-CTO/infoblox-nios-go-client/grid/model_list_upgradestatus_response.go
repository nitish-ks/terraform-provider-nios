/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListUpgradestatusResponse - struct for ListUpgradestatusResponse
type ListUpgradestatusResponse struct {
	ListUpgradestatusResponseObject *ListUpgradestatusResponseObject
	ArrayOfUpgradestatus            *[]Upgradestatus
}

// ListUpgradestatusResponseObjectAsListUpgradestatusResponse is a convenience function that returns ListUpgradestatusResponseObject wrapped in ListUpgradestatusResponse
func ListUpgradestatusResponseObjectAsListUpgradestatusResponse(v *ListUpgradestatusResponseObject) ListUpgradestatusResponse {
	return ListUpgradestatusResponse{
		ListUpgradestatusResponseObject: v,
	}
}

// []UpgradestatusAsListUpgradestatusResponse is a convenience function that returns []Upgradestatus wrapped in ListUpgradestatusResponse
func ArrayOfUpgradestatusAsListUpgradestatusResponse(v *[]Upgradestatus) ListUpgradestatusResponse {
	return ListUpgradestatusResponse{
		ArrayOfUpgradestatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListUpgradestatusResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListUpgradestatusResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListUpgradestatusResponseObject)
	if err == nil {
		jsonListUpgradestatusResponseObject, _ := json.Marshal(dst.ListUpgradestatusResponseObject)
		if string(jsonListUpgradestatusResponseObject) == "{}" { // empty struct
			dst.ListUpgradestatusResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListUpgradestatusResponseObject = nil
	}

	// try to unmarshal data into ArrayOfUpgradestatus
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUpgradestatus)
	if err == nil {
		jsonArrayOfUpgradestatus, _ := json.Marshal(dst.ArrayOfUpgradestatus)
		if string(jsonArrayOfUpgradestatus) == "{}" { // empty struct
			dst.ArrayOfUpgradestatus = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfUpgradestatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListUpgradestatusResponseObject = nil
		dst.ArrayOfUpgradestatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListUpgradestatusResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListUpgradestatusResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListUpgradestatusResponse) MarshalJSON() ([]byte, error) {
	if src.ListUpgradestatusResponseObject != nil {
		return json.Marshal(&src.ListUpgradestatusResponseObject)
	}

	if src.ArrayOfUpgradestatus != nil {
		return json.Marshal(&src.ArrayOfUpgradestatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListUpgradestatusResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListUpgradestatusResponseObject != nil {
		return obj.ListUpgradestatusResponseObject
	}

	if obj.ArrayOfUpgradestatus != nil {
		return obj.ArrayOfUpgradestatus
	}

	// all schemas are nil
	return nil
}

type NullableListUpgradestatusResponse struct {
	value *ListUpgradestatusResponse
	isSet bool
}

func (v NullableListUpgradestatusResponse) Get() *ListUpgradestatusResponse {
	return v.value
}

func (v *NullableListUpgradestatusResponse) Set(val *ListUpgradestatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUpgradestatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUpgradestatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUpgradestatusResponse(val *ListUpgradestatusResponse) *NullableListUpgradestatusResponse {
	return &NullableListUpgradestatusResponse{value: val, isSet: true}
}

func (v NullableListUpgradestatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUpgradestatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
