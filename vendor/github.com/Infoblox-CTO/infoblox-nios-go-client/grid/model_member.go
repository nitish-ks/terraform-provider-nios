/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Member type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Member{}

// Member struct for Member
type Member struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The active server of a Grid member.
	ActivePosition *string `json:"active_position,omitempty"`
	// The additional IP list of a Grid member. This list contains additional interface information that can be used at the member level. Note that interface structure(s) with interface type set to 'MGMT' are not supported.
	AdditionalIpList               []MemberAdditionalIpList              `json:"additional_ip_list,omitempty"`
	AutomatedTrafficCaptureSetting *MemberAutomatedTrafficCaptureSetting `json:"automated_traffic_capture_setting,omitempty"`
	// The BGP configuration for anycast for a Grid member.
	BgpAs                 []MemberBgpAs          `json:"bgp_as,omitempty"`
	CaptureTrafficControl map[string]interface{} `json:"capture_traffic_control,omitempty"`
	CaptureTrafficStatus  map[string]interface{} `json:"capture_traffic_status,omitempty"`
	// A descriptive comment of the Grid member.
	Comment *string `json:"comment,omitempty"`
	// Address configuration type.
	ConfigAddrType *string                `json:"config_addr_type,omitempty"`
	CreateToken    map[string]interface{} `json:"create_token,omitempty"`
	// CSP portal on-prem host access key
	CspAccessKey       []string                  `json:"csp_access_key,omitempty"`
	CspMemberSetting   *MemberCspMemberSetting   `json:"csp_member_setting,omitempty"`
	DnsResolverSetting *MemberDnsResolverSetting `json:"dns_resolver_setting,omitempty"`
	// The DSCP (Differentiated Services Code Point) value.
	Dscp         *int64              `json:"dscp,omitempty"`
	EmailSetting *MemberEmailSetting `json:"email_setting,omitempty"`
	// If set to True, the member has two physical nodes (HA pair).
	EnableHa *bool `json:"enable_ha,omitempty"`
	// Determines if the LOM functionality is enabled or not.
	EnableLom *bool `json:"enable_lom,omitempty"`
	// Determines if the member will redirect GUI connections to the Grid Master or not.
	EnableMemberRedirect *bool `json:"enable_member_redirect,omitempty"`
	// If set to True and the member object is a Grid Master Candidate, then read-only API access is enabled.
	EnableRoApiAccess *bool `json:"enable_ro_api_access,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of external syslog backup servers.
	ExternalSyslogBackupServers []MemberExternalSyslogBackupServers `json:"external_syslog_backup_servers,omitempty"`
	// Determines if external syslog servers should be enabled.
	ExternalSyslogServerEnable *bool `json:"external_syslog_server_enable,omitempty"`
	// Cloud platform for HA.
	HaCloudPlatform *string `json:"ha_cloud_platform,omitempty"`
	// True: HA on cloud. False: HA not on cloud.
	HaOnCloud *bool `json:"ha_on_cloud,omitempty"`
	// The host name of the Grid member.
	HostName    *string            `json:"host_name,omitempty"`
	Ipv6Setting *MemberIpv6Setting `json:"ipv6_setting,omitempty"`
	// List of IPv6 static routes.
	Ipv6StaticRoutes []MemberIpv6StaticRoutes `json:"ipv6_static_routes,omitempty"`
	// Determines if a Grid member supports DSCP (Differentiated Services Code Point).
	IsDscpCapable *bool `json:"is_dscp_capable,omitempty"`
	// If this is set to \"true\", the LAN2 port is enabled as an independent port or as a port for failover purposes.
	Lan2Enabled     *bool                  `json:"lan2_enabled,omitempty"`
	Lan2PortSetting *MemberLan2PortSetting `json:"lan2_port_setting,omitempty"`
	// The Network configurations for LOM.
	LomNetworkConfig []MemberLomNetworkConfig `json:"lom_network_config,omitempty"`
	// The list of LOM users.
	LomUsers []MemberLomUsers `json:"lom_users,omitempty"`
	// Determines if a Grid member is a Grid Master Candidate or not. This flag enables the Grid member to assume the role of the Grid Master as a disaster recovery measure.
	MasterCandidate      *bool                  `json:"master_candidate,omitempty"`
	MemberAdminOperation map[string]interface{} `json:"member_admin_operation,omitempty"`
	// Configure communication type for various services.
	MemberServiceCommunication []MemberMemberServiceCommunication `json:"member_service_communication,omitempty"`
	MgmtPortSetting            *MemberMgmtPortSetting             `json:"mgmt_port_setting,omitempty"`
	// Extensible attributes Topology database build time.
	MmdbEaBuildTime *int64 `json:"mmdb_ea_build_time,omitempty"`
	// GeoIP Topology database build time.
	MmdbGeoipBuildTime *int64            `json:"mmdb_geoip_build_time,omitempty"`
	NatSetting         *MemberNatSetting `json:"nat_setting,omitempty"`
	// The node information list with detailed status report on the operations of the Grid Member, mgmt_port_setting must be enabled when configuring the MGMT Port using the node_info field.
	NodeInfo   []MemberNodeInfo  `json:"node_info,omitempty"`
	NtpSetting *MemberNtpSetting `json:"ntp_setting,omitempty"`
	// The OSPF area configuration (for anycast) list for a Grid member.
	OspfList []MemberOspfList `json:"ospf_list,omitempty"`
	// The ARP protocol setting on the passive node of an HA pair. If you do not specify a value, the default value is \"false\". You can only set this value to \"true\" if the member is an HA pair.
	PassiveHaArpEnabled *bool `json:"passive_ha_arp_enabled,omitempty"`
	// Hardware Platform.
	Platform        *string                `json:"platform,omitempty"`
	PreProvisioning *MemberPreProvisioning `json:"pre_provisioning,omitempty"`
	// Set this flag to \"true\" to prevent the deletion of the member if any delegated object remains attached to it.
	PreserveIfOwnsDelegation *bool                  `json:"preserve_if_owns_delegation,omitempty"`
	ReadToken                map[string]interface{} `json:"read_token,omitempty"`
	// If set to True, superuser admins can access the Infoblox CLI from a remote location using an SSH (Secure Shell) v2 client.
	RemoteConsoleAccessEnable   *bool                  `json:"remote_console_access_enable,omitempty"`
	Requestrestartservicestatus map[string]interface{} `json:"requestrestartservicestatus,omitempty"`
	Restartservices             map[string]interface{} `json:"restartservices,omitempty"`
	// Virutal router identifier. Provide this ID if \"ha_enabled\" is set to \"true\". This is a unique VRID number (from 1 to 255) for the local subnet.
	RouterId *int64 `json:"router_id,omitempty"`
	// The service status list of a grid member.
	ServiceStatus []MemberServiceStatus `json:"service_status,omitempty"`
	// Configure all services to the given type.
	ServiceTypeConfiguration *string            `json:"service_type_configuration,omitempty"`
	SnmpSetting              *MemberSnmpSetting `json:"snmp_setting,omitempty"`
	// List of static routes.
	StaticRoutes []MemberStaticRoutes `json:"static_routes,omitempty"`
	// Determines if support access for the Grid member should be enabled.
	SupportAccessEnable *bool `json:"support_access_enable,omitempty"`
	// The information string for support access.
	SupportAccessInfo  *string                   `json:"support_access_info,omitempty"`
	SyslogProxySetting *MemberSyslogProxySetting `json:"syslog_proxy_setting,omitempty"`
	// The list of external syslog servers.
	SyslogServers []MemberSyslogServers `json:"syslog_servers,omitempty"`
	// The maximum size for the syslog file expressed in megabytes.
	SyslogSize *int64 `json:"syslog_size,omitempty"`
	// Determines the list of threshold traps. The user can only change the values for each trap or remove traps.
	ThresholdTraps []MemberThresholdTraps `json:"threshold_traps,omitempty"`
	// The time zone of the Grid member. The UTC string that represents the time zone, such as \"Asia/Kolkata\".
	TimeZone                        *string                                `json:"time_zone,omitempty"`
	TrafficCaptureAuthDnsSetting    *MemberTrafficCaptureAuthDnsSetting    `json:"traffic_capture_auth_dns_setting,omitempty"`
	TrafficCaptureChrSetting        *MemberTrafficCaptureChrSetting        `json:"traffic_capture_chr_setting,omitempty"`
	TrafficCaptureQpsSetting        *MemberTrafficCaptureQpsSetting        `json:"traffic_capture_qps_setting,omitempty"`
	TrafficCaptureRecDnsSetting     *MemberTrafficCaptureRecDnsSetting     `json:"traffic_capture_rec_dns_setting,omitempty"`
	TrafficCaptureRecQueriesSetting *MemberTrafficCaptureRecQueriesSetting `json:"traffic_capture_rec_queries_setting,omitempty"`
	// Determines configuration of the trap notifications.
	TrapNotifications []MemberTrapNotifications `json:"trap_notifications,omitempty"`
	// The name of the upgrade group to which this Grid member belongs.
	UpgradeGroup *string `json:"upgrade_group,omitempty"`
	// This flag is the use flag for enabling automated traffic capture based on DNS cache ratio thresholds.
	UseAutomatedTrafficCapture *bool `json:"use_automated_traffic_capture,omitempty"`
	// Use flag for: dns_resolver_setting
	UseDnsResolverSetting *bool `json:"use_dns_resolver_setting,omitempty"`
	// Use flag for: dscp
	UseDscp *bool `json:"use_dscp,omitempty"`
	// Use flag for: email_setting
	UseEmailSetting *bool `json:"use_email_setting,omitempty"`
	// Use flag for: enable_lom
	UseEnableLom *bool `json:"use_enable_lom,omitempty"`
	// Use flag for: enable_member_redirect
	UseEnableMemberRedirect *bool `json:"use_enable_member_redirect,omitempty"`
	// Use flag for: external_syslog_backup_servers
	UseExternalSyslogBackupServers *bool `json:"use_external_syslog_backup_servers,omitempty"`
	// Use flag for: remote_console_access_enable
	UseRemoteConsoleAccessEnable *bool `json:"use_remote_console_access_enable,omitempty"`
	// Use flag for: snmp_setting
	UseSnmpSetting *bool `json:"use_snmp_setting,omitempty"`
	// Use flag for: support_access_enable
	UseSupportAccessEnable *bool `json:"use_support_access_enable,omitempty"`
	// Use flag for: external_syslog_server_enable , syslog_servers, syslog_proxy_setting, syslog_size
	UseSyslogProxySetting *bool `json:"use_syslog_proxy_setting,omitempty"`
	// Use flag for: threshold_traps
	UseThresholdTraps *bool `json:"use_threshold_traps,omitempty"`
	// Use flag for: time_zone
	UseTimeZone *bool `json:"use_time_zone,omitempty"`
	// This flag is the use flag for enabling automated traffic capture based on authorative DNS latency.
	UseTrafficCaptureAuthDns *bool `json:"use_traffic_capture_auth_dns,omitempty"`
	// This flag is the use flag for automated traffic capture settings at member level.
	UseTrafficCaptureChr *bool `json:"use_traffic_capture_chr,omitempty"`
	// This flag is the use flag for enabling automated traffic capture based on DNS querie per second thresholds.
	UseTrafficCaptureQps *bool `json:"use_traffic_capture_qps,omitempty"`
	// This flag is the use flag for enabling automated traffic capture based on recursive DNS latency.
	UseTrafficCaptureRecDns *bool `json:"use_traffic_capture_rec_dns,omitempty"`
	// This flag is the use flag for enabling automated traffic capture based on outgoing recursive queries.
	UseTrafficCaptureRecQueries *bool `json:"use_traffic_capture_rec_queries,omitempty"`
	// Use flag for: trap_notifications
	UseTrapNotifications *bool `json:"use_trap_notifications,omitempty"`
	// Specify \"true\" to use VRRPv4 or \"false\" to use VRRPv6.
	UseV4Vrrp  *bool             `json:"use_v4_vrrp,omitempty"`
	VipSetting *MemberVipSetting `json:"vip_setting,omitempty"`
	// The VPN maximum transmission unit (MTU).
	VpnMtu *int64 `json:"vpn_mtu,omitempty"`
}

// NewMember instantiates a new Member object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMember() *Member {
	this := Member{}
	return &this
}

// NewMemberWithDefaults instantiates a new Member object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberWithDefaults() *Member {
	this := Member{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Member) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Member) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Member) SetRef(v string) {
	o.Ref = &v
}

// GetActivePosition returns the ActivePosition field value if set, zero value otherwise.
func (o *Member) GetActivePosition() string {
	if o == nil || IsNil(o.ActivePosition) {
		var ret string
		return ret
	}
	return *o.ActivePosition
}

// GetActivePositionOk returns a tuple with the ActivePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetActivePositionOk() (*string, bool) {
	if o == nil || IsNil(o.ActivePosition) {
		return nil, false
	}
	return o.ActivePosition, true
}

// HasActivePosition returns a boolean if a field has been set.
func (o *Member) HasActivePosition() bool {
	if o != nil && !IsNil(o.ActivePosition) {
		return true
	}

	return false
}

// SetActivePosition gets a reference to the given string and assigns it to the ActivePosition field.
func (o *Member) SetActivePosition(v string) {
	o.ActivePosition = &v
}

// GetAdditionalIpList returns the AdditionalIpList field value if set, zero value otherwise.
func (o *Member) GetAdditionalIpList() []MemberAdditionalIpList {
	if o == nil || IsNil(o.AdditionalIpList) {
		var ret []MemberAdditionalIpList
		return ret
	}
	return o.AdditionalIpList
}

// GetAdditionalIpListOk returns a tuple with the AdditionalIpList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetAdditionalIpListOk() ([]MemberAdditionalIpList, bool) {
	if o == nil || IsNil(o.AdditionalIpList) {
		return nil, false
	}
	return o.AdditionalIpList, true
}

// HasAdditionalIpList returns a boolean if a field has been set.
func (o *Member) HasAdditionalIpList() bool {
	if o != nil && !IsNil(o.AdditionalIpList) {
		return true
	}

	return false
}

// SetAdditionalIpList gets a reference to the given []MemberAdditionalIpList and assigns it to the AdditionalIpList field.
func (o *Member) SetAdditionalIpList(v []MemberAdditionalIpList) {
	o.AdditionalIpList = v
}

// GetAutomatedTrafficCaptureSetting returns the AutomatedTrafficCaptureSetting field value if set, zero value otherwise.
func (o *Member) GetAutomatedTrafficCaptureSetting() MemberAutomatedTrafficCaptureSetting {
	if o == nil || IsNil(o.AutomatedTrafficCaptureSetting) {
		var ret MemberAutomatedTrafficCaptureSetting
		return ret
	}
	return *o.AutomatedTrafficCaptureSetting
}

// GetAutomatedTrafficCaptureSettingOk returns a tuple with the AutomatedTrafficCaptureSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetAutomatedTrafficCaptureSettingOk() (*MemberAutomatedTrafficCaptureSetting, bool) {
	if o == nil || IsNil(o.AutomatedTrafficCaptureSetting) {
		return nil, false
	}
	return o.AutomatedTrafficCaptureSetting, true
}

// HasAutomatedTrafficCaptureSetting returns a boolean if a field has been set.
func (o *Member) HasAutomatedTrafficCaptureSetting() bool {
	if o != nil && !IsNil(o.AutomatedTrafficCaptureSetting) {
		return true
	}

	return false
}

// SetAutomatedTrafficCaptureSetting gets a reference to the given MemberAutomatedTrafficCaptureSetting and assigns it to the AutomatedTrafficCaptureSetting field.
func (o *Member) SetAutomatedTrafficCaptureSetting(v MemberAutomatedTrafficCaptureSetting) {
	o.AutomatedTrafficCaptureSetting = &v
}

// GetBgpAs returns the BgpAs field value if set, zero value otherwise.
func (o *Member) GetBgpAs() []MemberBgpAs {
	if o == nil || IsNil(o.BgpAs) {
		var ret []MemberBgpAs
		return ret
	}
	return o.BgpAs
}

// GetBgpAsOk returns a tuple with the BgpAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetBgpAsOk() ([]MemberBgpAs, bool) {
	if o == nil || IsNil(o.BgpAs) {
		return nil, false
	}
	return o.BgpAs, true
}

// HasBgpAs returns a boolean if a field has been set.
func (o *Member) HasBgpAs() bool {
	if o != nil && !IsNil(o.BgpAs) {
		return true
	}

	return false
}

// SetBgpAs gets a reference to the given []MemberBgpAs and assigns it to the BgpAs field.
func (o *Member) SetBgpAs(v []MemberBgpAs) {
	o.BgpAs = v
}

// GetCaptureTrafficControl returns the CaptureTrafficControl field value if set, zero value otherwise.
func (o *Member) GetCaptureTrafficControl() map[string]interface{} {
	if o == nil || IsNil(o.CaptureTrafficControl) {
		var ret map[string]interface{}
		return ret
	}
	return o.CaptureTrafficControl
}

// GetCaptureTrafficControlOk returns a tuple with the CaptureTrafficControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCaptureTrafficControlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CaptureTrafficControl) {
		return map[string]interface{}{}, false
	}
	return o.CaptureTrafficControl, true
}

// HasCaptureTrafficControl returns a boolean if a field has been set.
func (o *Member) HasCaptureTrafficControl() bool {
	if o != nil && !IsNil(o.CaptureTrafficControl) {
		return true
	}

	return false
}

// SetCaptureTrafficControl gets a reference to the given map[string]interface{} and assigns it to the CaptureTrafficControl field.
func (o *Member) SetCaptureTrafficControl(v map[string]interface{}) {
	o.CaptureTrafficControl = v
}

// GetCaptureTrafficStatus returns the CaptureTrafficStatus field value if set, zero value otherwise.
func (o *Member) GetCaptureTrafficStatus() map[string]interface{} {
	if o == nil || IsNil(o.CaptureTrafficStatus) {
		var ret map[string]interface{}
		return ret
	}
	return o.CaptureTrafficStatus
}

// GetCaptureTrafficStatusOk returns a tuple with the CaptureTrafficStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCaptureTrafficStatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CaptureTrafficStatus) {
		return map[string]interface{}{}, false
	}
	return o.CaptureTrafficStatus, true
}

// HasCaptureTrafficStatus returns a boolean if a field has been set.
func (o *Member) HasCaptureTrafficStatus() bool {
	if o != nil && !IsNil(o.CaptureTrafficStatus) {
		return true
	}

	return false
}

// SetCaptureTrafficStatus gets a reference to the given map[string]interface{} and assigns it to the CaptureTrafficStatus field.
func (o *Member) SetCaptureTrafficStatus(v map[string]interface{}) {
	o.CaptureTrafficStatus = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Member) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Member) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Member) SetComment(v string) {
	o.Comment = &v
}

// GetConfigAddrType returns the ConfigAddrType field value if set, zero value otherwise.
func (o *Member) GetConfigAddrType() string {
	if o == nil || IsNil(o.ConfigAddrType) {
		var ret string
		return ret
	}
	return *o.ConfigAddrType
}

// GetConfigAddrTypeOk returns a tuple with the ConfigAddrType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetConfigAddrTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigAddrType) {
		return nil, false
	}
	return o.ConfigAddrType, true
}

// HasConfigAddrType returns a boolean if a field has been set.
func (o *Member) HasConfigAddrType() bool {
	if o != nil && !IsNil(o.ConfigAddrType) {
		return true
	}

	return false
}

// SetConfigAddrType gets a reference to the given string and assigns it to the ConfigAddrType field.
func (o *Member) SetConfigAddrType(v string) {
	o.ConfigAddrType = &v
}

// GetCreateToken returns the CreateToken field value if set, zero value otherwise.
func (o *Member) GetCreateToken() map[string]interface{} {
	if o == nil || IsNil(o.CreateToken) {
		var ret map[string]interface{}
		return ret
	}
	return o.CreateToken
}

// GetCreateTokenOk returns a tuple with the CreateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCreateTokenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CreateToken) {
		return map[string]interface{}{}, false
	}
	return o.CreateToken, true
}

// HasCreateToken returns a boolean if a field has been set.
func (o *Member) HasCreateToken() bool {
	if o != nil && !IsNil(o.CreateToken) {
		return true
	}

	return false
}

// SetCreateToken gets a reference to the given map[string]interface{} and assigns it to the CreateToken field.
func (o *Member) SetCreateToken(v map[string]interface{}) {
	o.CreateToken = v
}

// GetCspAccessKey returns the CspAccessKey field value if set, zero value otherwise.
func (o *Member) GetCspAccessKey() []string {
	if o == nil || IsNil(o.CspAccessKey) {
		var ret []string
		return ret
	}
	return o.CspAccessKey
}

// GetCspAccessKeyOk returns a tuple with the CspAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCspAccessKeyOk() ([]string, bool) {
	if o == nil || IsNil(o.CspAccessKey) {
		return nil, false
	}
	return o.CspAccessKey, true
}

// HasCspAccessKey returns a boolean if a field has been set.
func (o *Member) HasCspAccessKey() bool {
	if o != nil && !IsNil(o.CspAccessKey) {
		return true
	}

	return false
}

// SetCspAccessKey gets a reference to the given []string and assigns it to the CspAccessKey field.
func (o *Member) SetCspAccessKey(v []string) {
	o.CspAccessKey = v
}

// GetCspMemberSetting returns the CspMemberSetting field value if set, zero value otherwise.
func (o *Member) GetCspMemberSetting() MemberCspMemberSetting {
	if o == nil || IsNil(o.CspMemberSetting) {
		var ret MemberCspMemberSetting
		return ret
	}
	return *o.CspMemberSetting
}

// GetCspMemberSettingOk returns a tuple with the CspMemberSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetCspMemberSettingOk() (*MemberCspMemberSetting, bool) {
	if o == nil || IsNil(o.CspMemberSetting) {
		return nil, false
	}
	return o.CspMemberSetting, true
}

// HasCspMemberSetting returns a boolean if a field has been set.
func (o *Member) HasCspMemberSetting() bool {
	if o != nil && !IsNil(o.CspMemberSetting) {
		return true
	}

	return false
}

// SetCspMemberSetting gets a reference to the given MemberCspMemberSetting and assigns it to the CspMemberSetting field.
func (o *Member) SetCspMemberSetting(v MemberCspMemberSetting) {
	o.CspMemberSetting = &v
}

// GetDnsResolverSetting returns the DnsResolverSetting field value if set, zero value otherwise.
func (o *Member) GetDnsResolverSetting() MemberDnsResolverSetting {
	if o == nil || IsNil(o.DnsResolverSetting) {
		var ret MemberDnsResolverSetting
		return ret
	}
	return *o.DnsResolverSetting
}

// GetDnsResolverSettingOk returns a tuple with the DnsResolverSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetDnsResolverSettingOk() (*MemberDnsResolverSetting, bool) {
	if o == nil || IsNil(o.DnsResolverSetting) {
		return nil, false
	}
	return o.DnsResolverSetting, true
}

// HasDnsResolverSetting returns a boolean if a field has been set.
func (o *Member) HasDnsResolverSetting() bool {
	if o != nil && !IsNil(o.DnsResolverSetting) {
		return true
	}

	return false
}

// SetDnsResolverSetting gets a reference to the given MemberDnsResolverSetting and assigns it to the DnsResolverSetting field.
func (o *Member) SetDnsResolverSetting(v MemberDnsResolverSetting) {
	o.DnsResolverSetting = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *Member) GetDscp() int64 {
	if o == nil || IsNil(o.Dscp) {
		var ret int64
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetDscpOk() (*int64, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *Member) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int64 and assigns it to the Dscp field.
func (o *Member) SetDscp(v int64) {
	o.Dscp = &v
}

// GetEmailSetting returns the EmailSetting field value if set, zero value otherwise.
func (o *Member) GetEmailSetting() MemberEmailSetting {
	if o == nil || IsNil(o.EmailSetting) {
		var ret MemberEmailSetting
		return ret
	}
	return *o.EmailSetting
}

// GetEmailSettingOk returns a tuple with the EmailSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetEmailSettingOk() (*MemberEmailSetting, bool) {
	if o == nil || IsNil(o.EmailSetting) {
		return nil, false
	}
	return o.EmailSetting, true
}

// HasEmailSetting returns a boolean if a field has been set.
func (o *Member) HasEmailSetting() bool {
	if o != nil && !IsNil(o.EmailSetting) {
		return true
	}

	return false
}

// SetEmailSetting gets a reference to the given MemberEmailSetting and assigns it to the EmailSetting field.
func (o *Member) SetEmailSetting(v MemberEmailSetting) {
	o.EmailSetting = &v
}

// GetEnableHa returns the EnableHa field value if set, zero value otherwise.
func (o *Member) GetEnableHa() bool {
	if o == nil || IsNil(o.EnableHa) {
		var ret bool
		return ret
	}
	return *o.EnableHa
}

// GetEnableHaOk returns a tuple with the EnableHa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetEnableHaOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHa) {
		return nil, false
	}
	return o.EnableHa, true
}

// HasEnableHa returns a boolean if a field has been set.
func (o *Member) HasEnableHa() bool {
	if o != nil && !IsNil(o.EnableHa) {
		return true
	}

	return false
}

// SetEnableHa gets a reference to the given bool and assigns it to the EnableHa field.
func (o *Member) SetEnableHa(v bool) {
	o.EnableHa = &v
}

// GetEnableLom returns the EnableLom field value if set, zero value otherwise.
func (o *Member) GetEnableLom() bool {
	if o == nil || IsNil(o.EnableLom) {
		var ret bool
		return ret
	}
	return *o.EnableLom
}

// GetEnableLomOk returns a tuple with the EnableLom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetEnableLomOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLom) {
		return nil, false
	}
	return o.EnableLom, true
}

// HasEnableLom returns a boolean if a field has been set.
func (o *Member) HasEnableLom() bool {
	if o != nil && !IsNil(o.EnableLom) {
		return true
	}

	return false
}

// SetEnableLom gets a reference to the given bool and assigns it to the EnableLom field.
func (o *Member) SetEnableLom(v bool) {
	o.EnableLom = &v
}

// GetEnableMemberRedirect returns the EnableMemberRedirect field value if set, zero value otherwise.
func (o *Member) GetEnableMemberRedirect() bool {
	if o == nil || IsNil(o.EnableMemberRedirect) {
		var ret bool
		return ret
	}
	return *o.EnableMemberRedirect
}

// GetEnableMemberRedirectOk returns a tuple with the EnableMemberRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetEnableMemberRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMemberRedirect) {
		return nil, false
	}
	return o.EnableMemberRedirect, true
}

// HasEnableMemberRedirect returns a boolean if a field has been set.
func (o *Member) HasEnableMemberRedirect() bool {
	if o != nil && !IsNil(o.EnableMemberRedirect) {
		return true
	}

	return false
}

// SetEnableMemberRedirect gets a reference to the given bool and assigns it to the EnableMemberRedirect field.
func (o *Member) SetEnableMemberRedirect(v bool) {
	o.EnableMemberRedirect = &v
}

// GetEnableRoApiAccess returns the EnableRoApiAccess field value if set, zero value otherwise.
func (o *Member) GetEnableRoApiAccess() bool {
	if o == nil || IsNil(o.EnableRoApiAccess) {
		var ret bool
		return ret
	}
	return *o.EnableRoApiAccess
}

// GetEnableRoApiAccessOk returns a tuple with the EnableRoApiAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetEnableRoApiAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRoApiAccess) {
		return nil, false
	}
	return o.EnableRoApiAccess, true
}

// HasEnableRoApiAccess returns a boolean if a field has been set.
func (o *Member) HasEnableRoApiAccess() bool {
	if o != nil && !IsNil(o.EnableRoApiAccess) {
		return true
	}

	return false
}

// SetEnableRoApiAccess gets a reference to the given bool and assigns it to the EnableRoApiAccess field.
func (o *Member) SetEnableRoApiAccess(v bool) {
	o.EnableRoApiAccess = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Member) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Member) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Member) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetExternalSyslogBackupServers returns the ExternalSyslogBackupServers field value if set, zero value otherwise.
func (o *Member) GetExternalSyslogBackupServers() []MemberExternalSyslogBackupServers {
	if o == nil || IsNil(o.ExternalSyslogBackupServers) {
		var ret []MemberExternalSyslogBackupServers
		return ret
	}
	return o.ExternalSyslogBackupServers
}

// GetExternalSyslogBackupServersOk returns a tuple with the ExternalSyslogBackupServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetExternalSyslogBackupServersOk() ([]MemberExternalSyslogBackupServers, bool) {
	if o == nil || IsNil(o.ExternalSyslogBackupServers) {
		return nil, false
	}
	return o.ExternalSyslogBackupServers, true
}

// HasExternalSyslogBackupServers returns a boolean if a field has been set.
func (o *Member) HasExternalSyslogBackupServers() bool {
	if o != nil && !IsNil(o.ExternalSyslogBackupServers) {
		return true
	}

	return false
}

// SetExternalSyslogBackupServers gets a reference to the given []MemberExternalSyslogBackupServers and assigns it to the ExternalSyslogBackupServers field.
func (o *Member) SetExternalSyslogBackupServers(v []MemberExternalSyslogBackupServers) {
	o.ExternalSyslogBackupServers = v
}

// GetExternalSyslogServerEnable returns the ExternalSyslogServerEnable field value if set, zero value otherwise.
func (o *Member) GetExternalSyslogServerEnable() bool {
	if o == nil || IsNil(o.ExternalSyslogServerEnable) {
		var ret bool
		return ret
	}
	return *o.ExternalSyslogServerEnable
}

// GetExternalSyslogServerEnableOk returns a tuple with the ExternalSyslogServerEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetExternalSyslogServerEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalSyslogServerEnable) {
		return nil, false
	}
	return o.ExternalSyslogServerEnable, true
}

// HasExternalSyslogServerEnable returns a boolean if a field has been set.
func (o *Member) HasExternalSyslogServerEnable() bool {
	if o != nil && !IsNil(o.ExternalSyslogServerEnable) {
		return true
	}

	return false
}

// SetExternalSyslogServerEnable gets a reference to the given bool and assigns it to the ExternalSyslogServerEnable field.
func (o *Member) SetExternalSyslogServerEnable(v bool) {
	o.ExternalSyslogServerEnable = &v
}

// GetHaCloudPlatform returns the HaCloudPlatform field value if set, zero value otherwise.
func (o *Member) GetHaCloudPlatform() string {
	if o == nil || IsNil(o.HaCloudPlatform) {
		var ret string
		return ret
	}
	return *o.HaCloudPlatform
}

// GetHaCloudPlatformOk returns a tuple with the HaCloudPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetHaCloudPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.HaCloudPlatform) {
		return nil, false
	}
	return o.HaCloudPlatform, true
}

// HasHaCloudPlatform returns a boolean if a field has been set.
func (o *Member) HasHaCloudPlatform() bool {
	if o != nil && !IsNil(o.HaCloudPlatform) {
		return true
	}

	return false
}

// SetHaCloudPlatform gets a reference to the given string and assigns it to the HaCloudPlatform field.
func (o *Member) SetHaCloudPlatform(v string) {
	o.HaCloudPlatform = &v
}

// GetHaOnCloud returns the HaOnCloud field value if set, zero value otherwise.
func (o *Member) GetHaOnCloud() bool {
	if o == nil || IsNil(o.HaOnCloud) {
		var ret bool
		return ret
	}
	return *o.HaOnCloud
}

// GetHaOnCloudOk returns a tuple with the HaOnCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetHaOnCloudOk() (*bool, bool) {
	if o == nil || IsNil(o.HaOnCloud) {
		return nil, false
	}
	return o.HaOnCloud, true
}

// HasHaOnCloud returns a boolean if a field has been set.
func (o *Member) HasHaOnCloud() bool {
	if o != nil && !IsNil(o.HaOnCloud) {
		return true
	}

	return false
}

// SetHaOnCloud gets a reference to the given bool and assigns it to the HaOnCloud field.
func (o *Member) SetHaOnCloud(v bool) {
	o.HaOnCloud = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *Member) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *Member) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *Member) SetHostName(v string) {
	o.HostName = &v
}

// GetIpv6Setting returns the Ipv6Setting field value if set, zero value otherwise.
func (o *Member) GetIpv6Setting() MemberIpv6Setting {
	if o == nil || IsNil(o.Ipv6Setting) {
		var ret MemberIpv6Setting
		return ret
	}
	return *o.Ipv6Setting
}

// GetIpv6SettingOk returns a tuple with the Ipv6Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetIpv6SettingOk() (*MemberIpv6Setting, bool) {
	if o == nil || IsNil(o.Ipv6Setting) {
		return nil, false
	}
	return o.Ipv6Setting, true
}

// HasIpv6Setting returns a boolean if a field has been set.
func (o *Member) HasIpv6Setting() bool {
	if o != nil && !IsNil(o.Ipv6Setting) {
		return true
	}

	return false
}

// SetIpv6Setting gets a reference to the given MemberIpv6Setting and assigns it to the Ipv6Setting field.
func (o *Member) SetIpv6Setting(v MemberIpv6Setting) {
	o.Ipv6Setting = &v
}

// GetIpv6StaticRoutes returns the Ipv6StaticRoutes field value if set, zero value otherwise.
func (o *Member) GetIpv6StaticRoutes() []MemberIpv6StaticRoutes {
	if o == nil || IsNil(o.Ipv6StaticRoutes) {
		var ret []MemberIpv6StaticRoutes
		return ret
	}
	return o.Ipv6StaticRoutes
}

// GetIpv6StaticRoutesOk returns a tuple with the Ipv6StaticRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetIpv6StaticRoutesOk() ([]MemberIpv6StaticRoutes, bool) {
	if o == nil || IsNil(o.Ipv6StaticRoutes) {
		return nil, false
	}
	return o.Ipv6StaticRoutes, true
}

// HasIpv6StaticRoutes returns a boolean if a field has been set.
func (o *Member) HasIpv6StaticRoutes() bool {
	if o != nil && !IsNil(o.Ipv6StaticRoutes) {
		return true
	}

	return false
}

// SetIpv6StaticRoutes gets a reference to the given []MemberIpv6StaticRoutes and assigns it to the Ipv6StaticRoutes field.
func (o *Member) SetIpv6StaticRoutes(v []MemberIpv6StaticRoutes) {
	o.Ipv6StaticRoutes = v
}

// GetIsDscpCapable returns the IsDscpCapable field value if set, zero value otherwise.
func (o *Member) GetIsDscpCapable() bool {
	if o == nil || IsNil(o.IsDscpCapable) {
		var ret bool
		return ret
	}
	return *o.IsDscpCapable
}

// GetIsDscpCapableOk returns a tuple with the IsDscpCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetIsDscpCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDscpCapable) {
		return nil, false
	}
	return o.IsDscpCapable, true
}

// HasIsDscpCapable returns a boolean if a field has been set.
func (o *Member) HasIsDscpCapable() bool {
	if o != nil && !IsNil(o.IsDscpCapable) {
		return true
	}

	return false
}

// SetIsDscpCapable gets a reference to the given bool and assigns it to the IsDscpCapable field.
func (o *Member) SetIsDscpCapable(v bool) {
	o.IsDscpCapable = &v
}

// GetLan2Enabled returns the Lan2Enabled field value if set, zero value otherwise.
func (o *Member) GetLan2Enabled() bool {
	if o == nil || IsNil(o.Lan2Enabled) {
		var ret bool
		return ret
	}
	return *o.Lan2Enabled
}

// GetLan2EnabledOk returns a tuple with the Lan2Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetLan2EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Lan2Enabled) {
		return nil, false
	}
	return o.Lan2Enabled, true
}

// HasLan2Enabled returns a boolean if a field has been set.
func (o *Member) HasLan2Enabled() bool {
	if o != nil && !IsNil(o.Lan2Enabled) {
		return true
	}

	return false
}

// SetLan2Enabled gets a reference to the given bool and assigns it to the Lan2Enabled field.
func (o *Member) SetLan2Enabled(v bool) {
	o.Lan2Enabled = &v
}

// GetLan2PortSetting returns the Lan2PortSetting field value if set, zero value otherwise.
func (o *Member) GetLan2PortSetting() MemberLan2PortSetting {
	if o == nil || IsNil(o.Lan2PortSetting) {
		var ret MemberLan2PortSetting
		return ret
	}
	return *o.Lan2PortSetting
}

// GetLan2PortSettingOk returns a tuple with the Lan2PortSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetLan2PortSettingOk() (*MemberLan2PortSetting, bool) {
	if o == nil || IsNil(o.Lan2PortSetting) {
		return nil, false
	}
	return o.Lan2PortSetting, true
}

// HasLan2PortSetting returns a boolean if a field has been set.
func (o *Member) HasLan2PortSetting() bool {
	if o != nil && !IsNil(o.Lan2PortSetting) {
		return true
	}

	return false
}

// SetLan2PortSetting gets a reference to the given MemberLan2PortSetting and assigns it to the Lan2PortSetting field.
func (o *Member) SetLan2PortSetting(v MemberLan2PortSetting) {
	o.Lan2PortSetting = &v
}

// GetLomNetworkConfig returns the LomNetworkConfig field value if set, zero value otherwise.
func (o *Member) GetLomNetworkConfig() []MemberLomNetworkConfig {
	if o == nil || IsNil(o.LomNetworkConfig) {
		var ret []MemberLomNetworkConfig
		return ret
	}
	return o.LomNetworkConfig
}

// GetLomNetworkConfigOk returns a tuple with the LomNetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetLomNetworkConfigOk() ([]MemberLomNetworkConfig, bool) {
	if o == nil || IsNil(o.LomNetworkConfig) {
		return nil, false
	}
	return o.LomNetworkConfig, true
}

// HasLomNetworkConfig returns a boolean if a field has been set.
func (o *Member) HasLomNetworkConfig() bool {
	if o != nil && !IsNil(o.LomNetworkConfig) {
		return true
	}

	return false
}

// SetLomNetworkConfig gets a reference to the given []MemberLomNetworkConfig and assigns it to the LomNetworkConfig field.
func (o *Member) SetLomNetworkConfig(v []MemberLomNetworkConfig) {
	o.LomNetworkConfig = v
}

// GetLomUsers returns the LomUsers field value if set, zero value otherwise.
func (o *Member) GetLomUsers() []MemberLomUsers {
	if o == nil || IsNil(o.LomUsers) {
		var ret []MemberLomUsers
		return ret
	}
	return o.LomUsers
}

// GetLomUsersOk returns a tuple with the LomUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetLomUsersOk() ([]MemberLomUsers, bool) {
	if o == nil || IsNil(o.LomUsers) {
		return nil, false
	}
	return o.LomUsers, true
}

// HasLomUsers returns a boolean if a field has been set.
func (o *Member) HasLomUsers() bool {
	if o != nil && !IsNil(o.LomUsers) {
		return true
	}

	return false
}

// SetLomUsers gets a reference to the given []MemberLomUsers and assigns it to the LomUsers field.
func (o *Member) SetLomUsers(v []MemberLomUsers) {
	o.LomUsers = v
}

// GetMasterCandidate returns the MasterCandidate field value if set, zero value otherwise.
func (o *Member) GetMasterCandidate() bool {
	if o == nil || IsNil(o.MasterCandidate) {
		var ret bool
		return ret
	}
	return *o.MasterCandidate
}

// GetMasterCandidateOk returns a tuple with the MasterCandidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMasterCandidateOk() (*bool, bool) {
	if o == nil || IsNil(o.MasterCandidate) {
		return nil, false
	}
	return o.MasterCandidate, true
}

// HasMasterCandidate returns a boolean if a field has been set.
func (o *Member) HasMasterCandidate() bool {
	if o != nil && !IsNil(o.MasterCandidate) {
		return true
	}

	return false
}

// SetMasterCandidate gets a reference to the given bool and assigns it to the MasterCandidate field.
func (o *Member) SetMasterCandidate(v bool) {
	o.MasterCandidate = &v
}

// GetMemberAdminOperation returns the MemberAdminOperation field value if set, zero value otherwise.
func (o *Member) GetMemberAdminOperation() map[string]interface{} {
	if o == nil || IsNil(o.MemberAdminOperation) {
		var ret map[string]interface{}
		return ret
	}
	return o.MemberAdminOperation
}

// GetMemberAdminOperationOk returns a tuple with the MemberAdminOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMemberAdminOperationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MemberAdminOperation) {
		return map[string]interface{}{}, false
	}
	return o.MemberAdminOperation, true
}

// HasMemberAdminOperation returns a boolean if a field has been set.
func (o *Member) HasMemberAdminOperation() bool {
	if o != nil && !IsNil(o.MemberAdminOperation) {
		return true
	}

	return false
}

// SetMemberAdminOperation gets a reference to the given map[string]interface{} and assigns it to the MemberAdminOperation field.
func (o *Member) SetMemberAdminOperation(v map[string]interface{}) {
	o.MemberAdminOperation = v
}

// GetMemberServiceCommunication returns the MemberServiceCommunication field value if set, zero value otherwise.
func (o *Member) GetMemberServiceCommunication() []MemberMemberServiceCommunication {
	if o == nil || IsNil(o.MemberServiceCommunication) {
		var ret []MemberMemberServiceCommunication
		return ret
	}
	return o.MemberServiceCommunication
}

// GetMemberServiceCommunicationOk returns a tuple with the MemberServiceCommunication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMemberServiceCommunicationOk() ([]MemberMemberServiceCommunication, bool) {
	if o == nil || IsNil(o.MemberServiceCommunication) {
		return nil, false
	}
	return o.MemberServiceCommunication, true
}

// HasMemberServiceCommunication returns a boolean if a field has been set.
func (o *Member) HasMemberServiceCommunication() bool {
	if o != nil && !IsNil(o.MemberServiceCommunication) {
		return true
	}

	return false
}

// SetMemberServiceCommunication gets a reference to the given []MemberMemberServiceCommunication and assigns it to the MemberServiceCommunication field.
func (o *Member) SetMemberServiceCommunication(v []MemberMemberServiceCommunication) {
	o.MemberServiceCommunication = v
}

// GetMgmtPortSetting returns the MgmtPortSetting field value if set, zero value otherwise.
func (o *Member) GetMgmtPortSetting() MemberMgmtPortSetting {
	if o == nil || IsNil(o.MgmtPortSetting) {
		var ret MemberMgmtPortSetting
		return ret
	}
	return *o.MgmtPortSetting
}

// GetMgmtPortSettingOk returns a tuple with the MgmtPortSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMgmtPortSettingOk() (*MemberMgmtPortSetting, bool) {
	if o == nil || IsNil(o.MgmtPortSetting) {
		return nil, false
	}
	return o.MgmtPortSetting, true
}

// HasMgmtPortSetting returns a boolean if a field has been set.
func (o *Member) HasMgmtPortSetting() bool {
	if o != nil && !IsNil(o.MgmtPortSetting) {
		return true
	}

	return false
}

// SetMgmtPortSetting gets a reference to the given MemberMgmtPortSetting and assigns it to the MgmtPortSetting field.
func (o *Member) SetMgmtPortSetting(v MemberMgmtPortSetting) {
	o.MgmtPortSetting = &v
}

// GetMmdbEaBuildTime returns the MmdbEaBuildTime field value if set, zero value otherwise.
func (o *Member) GetMmdbEaBuildTime() int64 {
	if o == nil || IsNil(o.MmdbEaBuildTime) {
		var ret int64
		return ret
	}
	return *o.MmdbEaBuildTime
}

// GetMmdbEaBuildTimeOk returns a tuple with the MmdbEaBuildTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMmdbEaBuildTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MmdbEaBuildTime) {
		return nil, false
	}
	return o.MmdbEaBuildTime, true
}

// HasMmdbEaBuildTime returns a boolean if a field has been set.
func (o *Member) HasMmdbEaBuildTime() bool {
	if o != nil && !IsNil(o.MmdbEaBuildTime) {
		return true
	}

	return false
}

// SetMmdbEaBuildTime gets a reference to the given int64 and assigns it to the MmdbEaBuildTime field.
func (o *Member) SetMmdbEaBuildTime(v int64) {
	o.MmdbEaBuildTime = &v
}

// GetMmdbGeoipBuildTime returns the MmdbGeoipBuildTime field value if set, zero value otherwise.
func (o *Member) GetMmdbGeoipBuildTime() int64 {
	if o == nil || IsNil(o.MmdbGeoipBuildTime) {
		var ret int64
		return ret
	}
	return *o.MmdbGeoipBuildTime
}

// GetMmdbGeoipBuildTimeOk returns a tuple with the MmdbGeoipBuildTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetMmdbGeoipBuildTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MmdbGeoipBuildTime) {
		return nil, false
	}
	return o.MmdbGeoipBuildTime, true
}

// HasMmdbGeoipBuildTime returns a boolean if a field has been set.
func (o *Member) HasMmdbGeoipBuildTime() bool {
	if o != nil && !IsNil(o.MmdbGeoipBuildTime) {
		return true
	}

	return false
}

// SetMmdbGeoipBuildTime gets a reference to the given int64 and assigns it to the MmdbGeoipBuildTime field.
func (o *Member) SetMmdbGeoipBuildTime(v int64) {
	o.MmdbGeoipBuildTime = &v
}

// GetNatSetting returns the NatSetting field value if set, zero value otherwise.
func (o *Member) GetNatSetting() MemberNatSetting {
	if o == nil || IsNil(o.NatSetting) {
		var ret MemberNatSetting
		return ret
	}
	return *o.NatSetting
}

// GetNatSettingOk returns a tuple with the NatSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetNatSettingOk() (*MemberNatSetting, bool) {
	if o == nil || IsNil(o.NatSetting) {
		return nil, false
	}
	return o.NatSetting, true
}

// HasNatSetting returns a boolean if a field has been set.
func (o *Member) HasNatSetting() bool {
	if o != nil && !IsNil(o.NatSetting) {
		return true
	}

	return false
}

// SetNatSetting gets a reference to the given MemberNatSetting and assigns it to the NatSetting field.
func (o *Member) SetNatSetting(v MemberNatSetting) {
	o.NatSetting = &v
}

// GetNodeInfo returns the NodeInfo field value if set, zero value otherwise.
func (o *Member) GetNodeInfo() []MemberNodeInfo {
	if o == nil || IsNil(o.NodeInfo) {
		var ret []MemberNodeInfo
		return ret
	}
	return o.NodeInfo
}

// GetNodeInfoOk returns a tuple with the NodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetNodeInfoOk() ([]MemberNodeInfo, bool) {
	if o == nil || IsNil(o.NodeInfo) {
		return nil, false
	}
	return o.NodeInfo, true
}

// HasNodeInfo returns a boolean if a field has been set.
func (o *Member) HasNodeInfo() bool {
	if o != nil && !IsNil(o.NodeInfo) {
		return true
	}

	return false
}

// SetNodeInfo gets a reference to the given []MemberNodeInfo and assigns it to the NodeInfo field.
func (o *Member) SetNodeInfo(v []MemberNodeInfo) {
	o.NodeInfo = v
}

// GetNtpSetting returns the NtpSetting field value if set, zero value otherwise.
func (o *Member) GetNtpSetting() MemberNtpSetting {
	if o == nil || IsNil(o.NtpSetting) {
		var ret MemberNtpSetting
		return ret
	}
	return *o.NtpSetting
}

// GetNtpSettingOk returns a tuple with the NtpSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetNtpSettingOk() (*MemberNtpSetting, bool) {
	if o == nil || IsNil(o.NtpSetting) {
		return nil, false
	}
	return o.NtpSetting, true
}

// HasNtpSetting returns a boolean if a field has been set.
func (o *Member) HasNtpSetting() bool {
	if o != nil && !IsNil(o.NtpSetting) {
		return true
	}

	return false
}

// SetNtpSetting gets a reference to the given MemberNtpSetting and assigns it to the NtpSetting field.
func (o *Member) SetNtpSetting(v MemberNtpSetting) {
	o.NtpSetting = &v
}

// GetOspfList returns the OspfList field value if set, zero value otherwise.
func (o *Member) GetOspfList() []MemberOspfList {
	if o == nil || IsNil(o.OspfList) {
		var ret []MemberOspfList
		return ret
	}
	return o.OspfList
}

// GetOspfListOk returns a tuple with the OspfList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetOspfListOk() ([]MemberOspfList, bool) {
	if o == nil || IsNil(o.OspfList) {
		return nil, false
	}
	return o.OspfList, true
}

// HasOspfList returns a boolean if a field has been set.
func (o *Member) HasOspfList() bool {
	if o != nil && !IsNil(o.OspfList) {
		return true
	}

	return false
}

// SetOspfList gets a reference to the given []MemberOspfList and assigns it to the OspfList field.
func (o *Member) SetOspfList(v []MemberOspfList) {
	o.OspfList = v
}

// GetPassiveHaArpEnabled returns the PassiveHaArpEnabled field value if set, zero value otherwise.
func (o *Member) GetPassiveHaArpEnabled() bool {
	if o == nil || IsNil(o.PassiveHaArpEnabled) {
		var ret bool
		return ret
	}
	return *o.PassiveHaArpEnabled
}

// GetPassiveHaArpEnabledOk returns a tuple with the PassiveHaArpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetPassiveHaArpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PassiveHaArpEnabled) {
		return nil, false
	}
	return o.PassiveHaArpEnabled, true
}

// HasPassiveHaArpEnabled returns a boolean if a field has been set.
func (o *Member) HasPassiveHaArpEnabled() bool {
	if o != nil && !IsNil(o.PassiveHaArpEnabled) {
		return true
	}

	return false
}

// SetPassiveHaArpEnabled gets a reference to the given bool and assigns it to the PassiveHaArpEnabled field.
func (o *Member) SetPassiveHaArpEnabled(v bool) {
	o.PassiveHaArpEnabled = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *Member) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *Member) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *Member) SetPlatform(v string) {
	o.Platform = &v
}

// GetPreProvisioning returns the PreProvisioning field value if set, zero value otherwise.
func (o *Member) GetPreProvisioning() MemberPreProvisioning {
	if o == nil || IsNil(o.PreProvisioning) {
		var ret MemberPreProvisioning
		return ret
	}
	return *o.PreProvisioning
}

// GetPreProvisioningOk returns a tuple with the PreProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetPreProvisioningOk() (*MemberPreProvisioning, bool) {
	if o == nil || IsNil(o.PreProvisioning) {
		return nil, false
	}
	return o.PreProvisioning, true
}

// HasPreProvisioning returns a boolean if a field has been set.
func (o *Member) HasPreProvisioning() bool {
	if o != nil && !IsNil(o.PreProvisioning) {
		return true
	}

	return false
}

// SetPreProvisioning gets a reference to the given MemberPreProvisioning and assigns it to the PreProvisioning field.
func (o *Member) SetPreProvisioning(v MemberPreProvisioning) {
	o.PreProvisioning = &v
}

// GetPreserveIfOwnsDelegation returns the PreserveIfOwnsDelegation field value if set, zero value otherwise.
func (o *Member) GetPreserveIfOwnsDelegation() bool {
	if o == nil || IsNil(o.PreserveIfOwnsDelegation) {
		var ret bool
		return ret
	}
	return *o.PreserveIfOwnsDelegation
}

// GetPreserveIfOwnsDelegationOk returns a tuple with the PreserveIfOwnsDelegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetPreserveIfOwnsDelegationOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveIfOwnsDelegation) {
		return nil, false
	}
	return o.PreserveIfOwnsDelegation, true
}

// HasPreserveIfOwnsDelegation returns a boolean if a field has been set.
func (o *Member) HasPreserveIfOwnsDelegation() bool {
	if o != nil && !IsNil(o.PreserveIfOwnsDelegation) {
		return true
	}

	return false
}

// SetPreserveIfOwnsDelegation gets a reference to the given bool and assigns it to the PreserveIfOwnsDelegation field.
func (o *Member) SetPreserveIfOwnsDelegation(v bool) {
	o.PreserveIfOwnsDelegation = &v
}

// GetReadToken returns the ReadToken field value if set, zero value otherwise.
func (o *Member) GetReadToken() map[string]interface{} {
	if o == nil || IsNil(o.ReadToken) {
		var ret map[string]interface{}
		return ret
	}
	return o.ReadToken
}

// GetReadTokenOk returns a tuple with the ReadToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetReadTokenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReadToken) {
		return map[string]interface{}{}, false
	}
	return o.ReadToken, true
}

// HasReadToken returns a boolean if a field has been set.
func (o *Member) HasReadToken() bool {
	if o != nil && !IsNil(o.ReadToken) {
		return true
	}

	return false
}

// SetReadToken gets a reference to the given map[string]interface{} and assigns it to the ReadToken field.
func (o *Member) SetReadToken(v map[string]interface{}) {
	o.ReadToken = v
}

// GetRemoteConsoleAccessEnable returns the RemoteConsoleAccessEnable field value if set, zero value otherwise.
func (o *Member) GetRemoteConsoleAccessEnable() bool {
	if o == nil || IsNil(o.RemoteConsoleAccessEnable) {
		var ret bool
		return ret
	}
	return *o.RemoteConsoleAccessEnable
}

// GetRemoteConsoleAccessEnableOk returns a tuple with the RemoteConsoleAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRemoteConsoleAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteConsoleAccessEnable) {
		return nil, false
	}
	return o.RemoteConsoleAccessEnable, true
}

// HasRemoteConsoleAccessEnable returns a boolean if a field has been set.
func (o *Member) HasRemoteConsoleAccessEnable() bool {
	if o != nil && !IsNil(o.RemoteConsoleAccessEnable) {
		return true
	}

	return false
}

// SetRemoteConsoleAccessEnable gets a reference to the given bool and assigns it to the RemoteConsoleAccessEnable field.
func (o *Member) SetRemoteConsoleAccessEnable(v bool) {
	o.RemoteConsoleAccessEnable = &v
}

// GetRequestrestartservicestatus returns the Requestrestartservicestatus field value if set, zero value otherwise.
func (o *Member) GetRequestrestartservicestatus() map[string]interface{} {
	if o == nil || IsNil(o.Requestrestartservicestatus) {
		var ret map[string]interface{}
		return ret
	}
	return o.Requestrestartservicestatus
}

// GetRequestrestartservicestatusOk returns a tuple with the Requestrestartservicestatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRequestrestartservicestatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Requestrestartservicestatus) {
		return map[string]interface{}{}, false
	}
	return o.Requestrestartservicestatus, true
}

// HasRequestrestartservicestatus returns a boolean if a field has been set.
func (o *Member) HasRequestrestartservicestatus() bool {
	if o != nil && !IsNil(o.Requestrestartservicestatus) {
		return true
	}

	return false
}

// SetRequestrestartservicestatus gets a reference to the given map[string]interface{} and assigns it to the Requestrestartservicestatus field.
func (o *Member) SetRequestrestartservicestatus(v map[string]interface{}) {
	o.Requestrestartservicestatus = v
}

// GetRestartservices returns the Restartservices field value if set, zero value otherwise.
func (o *Member) GetRestartservices() map[string]interface{} {
	if o == nil || IsNil(o.Restartservices) {
		var ret map[string]interface{}
		return ret
	}
	return o.Restartservices
}

// GetRestartservicesOk returns a tuple with the Restartservices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRestartservicesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Restartservices) {
		return map[string]interface{}{}, false
	}
	return o.Restartservices, true
}

// HasRestartservices returns a boolean if a field has been set.
func (o *Member) HasRestartservices() bool {
	if o != nil && !IsNil(o.Restartservices) {
		return true
	}

	return false
}

// SetRestartservices gets a reference to the given map[string]interface{} and assigns it to the Restartservices field.
func (o *Member) SetRestartservices(v map[string]interface{}) {
	o.Restartservices = v
}

// GetRouterId returns the RouterId field value if set, zero value otherwise.
func (o *Member) GetRouterId() int64 {
	if o == nil || IsNil(o.RouterId) {
		var ret int64
		return ret
	}
	return *o.RouterId
}

// GetRouterIdOk returns a tuple with the RouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetRouterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RouterId) {
		return nil, false
	}
	return o.RouterId, true
}

// HasRouterId returns a boolean if a field has been set.
func (o *Member) HasRouterId() bool {
	if o != nil && !IsNil(o.RouterId) {
		return true
	}

	return false
}

// SetRouterId gets a reference to the given int64 and assigns it to the RouterId field.
func (o *Member) SetRouterId(v int64) {
	o.RouterId = &v
}

// GetServiceStatus returns the ServiceStatus field value if set, zero value otherwise.
func (o *Member) GetServiceStatus() []MemberServiceStatus {
	if o == nil || IsNil(o.ServiceStatus) {
		var ret []MemberServiceStatus
		return ret
	}
	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetServiceStatusOk() ([]MemberServiceStatus, bool) {
	if o == nil || IsNil(o.ServiceStatus) {
		return nil, false
	}
	return o.ServiceStatus, true
}

// HasServiceStatus returns a boolean if a field has been set.
func (o *Member) HasServiceStatus() bool {
	if o != nil && !IsNil(o.ServiceStatus) {
		return true
	}

	return false
}

// SetServiceStatus gets a reference to the given []MemberServiceStatus and assigns it to the ServiceStatus field.
func (o *Member) SetServiceStatus(v []MemberServiceStatus) {
	o.ServiceStatus = v
}

// GetServiceTypeConfiguration returns the ServiceTypeConfiguration field value if set, zero value otherwise.
func (o *Member) GetServiceTypeConfiguration() string {
	if o == nil || IsNil(o.ServiceTypeConfiguration) {
		var ret string
		return ret
	}
	return *o.ServiceTypeConfiguration
}

// GetServiceTypeConfigurationOk returns a tuple with the ServiceTypeConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetServiceTypeConfigurationOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceTypeConfiguration) {
		return nil, false
	}
	return o.ServiceTypeConfiguration, true
}

// HasServiceTypeConfiguration returns a boolean if a field has been set.
func (o *Member) HasServiceTypeConfiguration() bool {
	if o != nil && !IsNil(o.ServiceTypeConfiguration) {
		return true
	}

	return false
}

// SetServiceTypeConfiguration gets a reference to the given string and assigns it to the ServiceTypeConfiguration field.
func (o *Member) SetServiceTypeConfiguration(v string) {
	o.ServiceTypeConfiguration = &v
}

// GetSnmpSetting returns the SnmpSetting field value if set, zero value otherwise.
func (o *Member) GetSnmpSetting() MemberSnmpSetting {
	if o == nil || IsNil(o.SnmpSetting) {
		var ret MemberSnmpSetting
		return ret
	}
	return *o.SnmpSetting
}

// GetSnmpSettingOk returns a tuple with the SnmpSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSnmpSettingOk() (*MemberSnmpSetting, bool) {
	if o == nil || IsNil(o.SnmpSetting) {
		return nil, false
	}
	return o.SnmpSetting, true
}

// HasSnmpSetting returns a boolean if a field has been set.
func (o *Member) HasSnmpSetting() bool {
	if o != nil && !IsNil(o.SnmpSetting) {
		return true
	}

	return false
}

// SetSnmpSetting gets a reference to the given MemberSnmpSetting and assigns it to the SnmpSetting field.
func (o *Member) SetSnmpSetting(v MemberSnmpSetting) {
	o.SnmpSetting = &v
}

// GetStaticRoutes returns the StaticRoutes field value if set, zero value otherwise.
func (o *Member) GetStaticRoutes() []MemberStaticRoutes {
	if o == nil || IsNil(o.StaticRoutes) {
		var ret []MemberStaticRoutes
		return ret
	}
	return o.StaticRoutes
}

// GetStaticRoutesOk returns a tuple with the StaticRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetStaticRoutesOk() ([]MemberStaticRoutes, bool) {
	if o == nil || IsNil(o.StaticRoutes) {
		return nil, false
	}
	return o.StaticRoutes, true
}

// HasStaticRoutes returns a boolean if a field has been set.
func (o *Member) HasStaticRoutes() bool {
	if o != nil && !IsNil(o.StaticRoutes) {
		return true
	}

	return false
}

// SetStaticRoutes gets a reference to the given []MemberStaticRoutes and assigns it to the StaticRoutes field.
func (o *Member) SetStaticRoutes(v []MemberStaticRoutes) {
	o.StaticRoutes = v
}

// GetSupportAccessEnable returns the SupportAccessEnable field value if set, zero value otherwise.
func (o *Member) GetSupportAccessEnable() bool {
	if o == nil || IsNil(o.SupportAccessEnable) {
		var ret bool
		return ret
	}
	return *o.SupportAccessEnable
}

// GetSupportAccessEnableOk returns a tuple with the SupportAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSupportAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportAccessEnable) {
		return nil, false
	}
	return o.SupportAccessEnable, true
}

// HasSupportAccessEnable returns a boolean if a field has been set.
func (o *Member) HasSupportAccessEnable() bool {
	if o != nil && !IsNil(o.SupportAccessEnable) {
		return true
	}

	return false
}

// SetSupportAccessEnable gets a reference to the given bool and assigns it to the SupportAccessEnable field.
func (o *Member) SetSupportAccessEnable(v bool) {
	o.SupportAccessEnable = &v
}

// GetSupportAccessInfo returns the SupportAccessInfo field value if set, zero value otherwise.
func (o *Member) GetSupportAccessInfo() string {
	if o == nil || IsNil(o.SupportAccessInfo) {
		var ret string
		return ret
	}
	return *o.SupportAccessInfo
}

// GetSupportAccessInfoOk returns a tuple with the SupportAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSupportAccessInfoOk() (*string, bool) {
	if o == nil || IsNil(o.SupportAccessInfo) {
		return nil, false
	}
	return o.SupportAccessInfo, true
}

// HasSupportAccessInfo returns a boolean if a field has been set.
func (o *Member) HasSupportAccessInfo() bool {
	if o != nil && !IsNil(o.SupportAccessInfo) {
		return true
	}

	return false
}

// SetSupportAccessInfo gets a reference to the given string and assigns it to the SupportAccessInfo field.
func (o *Member) SetSupportAccessInfo(v string) {
	o.SupportAccessInfo = &v
}

// GetSyslogProxySetting returns the SyslogProxySetting field value if set, zero value otherwise.
func (o *Member) GetSyslogProxySetting() MemberSyslogProxySetting {
	if o == nil || IsNil(o.SyslogProxySetting) {
		var ret MemberSyslogProxySetting
		return ret
	}
	return *o.SyslogProxySetting
}

// GetSyslogProxySettingOk returns a tuple with the SyslogProxySetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSyslogProxySettingOk() (*MemberSyslogProxySetting, bool) {
	if o == nil || IsNil(o.SyslogProxySetting) {
		return nil, false
	}
	return o.SyslogProxySetting, true
}

// HasSyslogProxySetting returns a boolean if a field has been set.
func (o *Member) HasSyslogProxySetting() bool {
	if o != nil && !IsNil(o.SyslogProxySetting) {
		return true
	}

	return false
}

// SetSyslogProxySetting gets a reference to the given MemberSyslogProxySetting and assigns it to the SyslogProxySetting field.
func (o *Member) SetSyslogProxySetting(v MemberSyslogProxySetting) {
	o.SyslogProxySetting = &v
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise.
func (o *Member) GetSyslogServers() []MemberSyslogServers {
	if o == nil || IsNil(o.SyslogServers) {
		var ret []MemberSyslogServers
		return ret
	}
	return o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSyslogServersOk() ([]MemberSyslogServers, bool) {
	if o == nil || IsNil(o.SyslogServers) {
		return nil, false
	}
	return o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *Member) HasSyslogServers() bool {
	if o != nil && !IsNil(o.SyslogServers) {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given []MemberSyslogServers and assigns it to the SyslogServers field.
func (o *Member) SetSyslogServers(v []MemberSyslogServers) {
	o.SyslogServers = v
}

// GetSyslogSize returns the SyslogSize field value if set, zero value otherwise.
func (o *Member) GetSyslogSize() int64 {
	if o == nil || IsNil(o.SyslogSize) {
		var ret int64
		return ret
	}
	return *o.SyslogSize
}

// GetSyslogSizeOk returns a tuple with the SyslogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetSyslogSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.SyslogSize) {
		return nil, false
	}
	return o.SyslogSize, true
}

// HasSyslogSize returns a boolean if a field has been set.
func (o *Member) HasSyslogSize() bool {
	if o != nil && !IsNil(o.SyslogSize) {
		return true
	}

	return false
}

// SetSyslogSize gets a reference to the given int64 and assigns it to the SyslogSize field.
func (o *Member) SetSyslogSize(v int64) {
	o.SyslogSize = &v
}

// GetThresholdTraps returns the ThresholdTraps field value if set, zero value otherwise.
func (o *Member) GetThresholdTraps() []MemberThresholdTraps {
	if o == nil || IsNil(o.ThresholdTraps) {
		var ret []MemberThresholdTraps
		return ret
	}
	return o.ThresholdTraps
}

// GetThresholdTrapsOk returns a tuple with the ThresholdTraps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetThresholdTrapsOk() ([]MemberThresholdTraps, bool) {
	if o == nil || IsNil(o.ThresholdTraps) {
		return nil, false
	}
	return o.ThresholdTraps, true
}

// HasThresholdTraps returns a boolean if a field has been set.
func (o *Member) HasThresholdTraps() bool {
	if o != nil && !IsNil(o.ThresholdTraps) {
		return true
	}

	return false
}

// SetThresholdTraps gets a reference to the given []MemberThresholdTraps and assigns it to the ThresholdTraps field.
func (o *Member) SetThresholdTraps(v []MemberThresholdTraps) {
	o.ThresholdTraps = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Member) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Member) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Member) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetTrafficCaptureAuthDnsSetting returns the TrafficCaptureAuthDnsSetting field value if set, zero value otherwise.
func (o *Member) GetTrafficCaptureAuthDnsSetting() MemberTrafficCaptureAuthDnsSetting {
	if o == nil || IsNil(o.TrafficCaptureAuthDnsSetting) {
		var ret MemberTrafficCaptureAuthDnsSetting
		return ret
	}
	return *o.TrafficCaptureAuthDnsSetting
}

// GetTrafficCaptureAuthDnsSettingOk returns a tuple with the TrafficCaptureAuthDnsSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrafficCaptureAuthDnsSettingOk() (*MemberTrafficCaptureAuthDnsSetting, bool) {
	if o == nil || IsNil(o.TrafficCaptureAuthDnsSetting) {
		return nil, false
	}
	return o.TrafficCaptureAuthDnsSetting, true
}

// HasTrafficCaptureAuthDnsSetting returns a boolean if a field has been set.
func (o *Member) HasTrafficCaptureAuthDnsSetting() bool {
	if o != nil && !IsNil(o.TrafficCaptureAuthDnsSetting) {
		return true
	}

	return false
}

// SetTrafficCaptureAuthDnsSetting gets a reference to the given MemberTrafficCaptureAuthDnsSetting and assigns it to the TrafficCaptureAuthDnsSetting field.
func (o *Member) SetTrafficCaptureAuthDnsSetting(v MemberTrafficCaptureAuthDnsSetting) {
	o.TrafficCaptureAuthDnsSetting = &v
}

// GetTrafficCaptureChrSetting returns the TrafficCaptureChrSetting field value if set, zero value otherwise.
func (o *Member) GetTrafficCaptureChrSetting() MemberTrafficCaptureChrSetting {
	if o == nil || IsNil(o.TrafficCaptureChrSetting) {
		var ret MemberTrafficCaptureChrSetting
		return ret
	}
	return *o.TrafficCaptureChrSetting
}

// GetTrafficCaptureChrSettingOk returns a tuple with the TrafficCaptureChrSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrafficCaptureChrSettingOk() (*MemberTrafficCaptureChrSetting, bool) {
	if o == nil || IsNil(o.TrafficCaptureChrSetting) {
		return nil, false
	}
	return o.TrafficCaptureChrSetting, true
}

// HasTrafficCaptureChrSetting returns a boolean if a field has been set.
func (o *Member) HasTrafficCaptureChrSetting() bool {
	if o != nil && !IsNil(o.TrafficCaptureChrSetting) {
		return true
	}

	return false
}

// SetTrafficCaptureChrSetting gets a reference to the given MemberTrafficCaptureChrSetting and assigns it to the TrafficCaptureChrSetting field.
func (o *Member) SetTrafficCaptureChrSetting(v MemberTrafficCaptureChrSetting) {
	o.TrafficCaptureChrSetting = &v
}

// GetTrafficCaptureQpsSetting returns the TrafficCaptureQpsSetting field value if set, zero value otherwise.
func (o *Member) GetTrafficCaptureQpsSetting() MemberTrafficCaptureQpsSetting {
	if o == nil || IsNil(o.TrafficCaptureQpsSetting) {
		var ret MemberTrafficCaptureQpsSetting
		return ret
	}
	return *o.TrafficCaptureQpsSetting
}

// GetTrafficCaptureQpsSettingOk returns a tuple with the TrafficCaptureQpsSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrafficCaptureQpsSettingOk() (*MemberTrafficCaptureQpsSetting, bool) {
	if o == nil || IsNil(o.TrafficCaptureQpsSetting) {
		return nil, false
	}
	return o.TrafficCaptureQpsSetting, true
}

// HasTrafficCaptureQpsSetting returns a boolean if a field has been set.
func (o *Member) HasTrafficCaptureQpsSetting() bool {
	if o != nil && !IsNil(o.TrafficCaptureQpsSetting) {
		return true
	}

	return false
}

// SetTrafficCaptureQpsSetting gets a reference to the given MemberTrafficCaptureQpsSetting and assigns it to the TrafficCaptureQpsSetting field.
func (o *Member) SetTrafficCaptureQpsSetting(v MemberTrafficCaptureQpsSetting) {
	o.TrafficCaptureQpsSetting = &v
}

// GetTrafficCaptureRecDnsSetting returns the TrafficCaptureRecDnsSetting field value if set, zero value otherwise.
func (o *Member) GetTrafficCaptureRecDnsSetting() MemberTrafficCaptureRecDnsSetting {
	if o == nil || IsNil(o.TrafficCaptureRecDnsSetting) {
		var ret MemberTrafficCaptureRecDnsSetting
		return ret
	}
	return *o.TrafficCaptureRecDnsSetting
}

// GetTrafficCaptureRecDnsSettingOk returns a tuple with the TrafficCaptureRecDnsSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrafficCaptureRecDnsSettingOk() (*MemberTrafficCaptureRecDnsSetting, bool) {
	if o == nil || IsNil(o.TrafficCaptureRecDnsSetting) {
		return nil, false
	}
	return o.TrafficCaptureRecDnsSetting, true
}

// HasTrafficCaptureRecDnsSetting returns a boolean if a field has been set.
func (o *Member) HasTrafficCaptureRecDnsSetting() bool {
	if o != nil && !IsNil(o.TrafficCaptureRecDnsSetting) {
		return true
	}

	return false
}

// SetTrafficCaptureRecDnsSetting gets a reference to the given MemberTrafficCaptureRecDnsSetting and assigns it to the TrafficCaptureRecDnsSetting field.
func (o *Member) SetTrafficCaptureRecDnsSetting(v MemberTrafficCaptureRecDnsSetting) {
	o.TrafficCaptureRecDnsSetting = &v
}

// GetTrafficCaptureRecQueriesSetting returns the TrafficCaptureRecQueriesSetting field value if set, zero value otherwise.
func (o *Member) GetTrafficCaptureRecQueriesSetting() MemberTrafficCaptureRecQueriesSetting {
	if o == nil || IsNil(o.TrafficCaptureRecQueriesSetting) {
		var ret MemberTrafficCaptureRecQueriesSetting
		return ret
	}
	return *o.TrafficCaptureRecQueriesSetting
}

// GetTrafficCaptureRecQueriesSettingOk returns a tuple with the TrafficCaptureRecQueriesSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrafficCaptureRecQueriesSettingOk() (*MemberTrafficCaptureRecQueriesSetting, bool) {
	if o == nil || IsNil(o.TrafficCaptureRecQueriesSetting) {
		return nil, false
	}
	return o.TrafficCaptureRecQueriesSetting, true
}

// HasTrafficCaptureRecQueriesSetting returns a boolean if a field has been set.
func (o *Member) HasTrafficCaptureRecQueriesSetting() bool {
	if o != nil && !IsNil(o.TrafficCaptureRecQueriesSetting) {
		return true
	}

	return false
}

// SetTrafficCaptureRecQueriesSetting gets a reference to the given MemberTrafficCaptureRecQueriesSetting and assigns it to the TrafficCaptureRecQueriesSetting field.
func (o *Member) SetTrafficCaptureRecQueriesSetting(v MemberTrafficCaptureRecQueriesSetting) {
	o.TrafficCaptureRecQueriesSetting = &v
}

// GetTrapNotifications returns the TrapNotifications field value if set, zero value otherwise.
func (o *Member) GetTrapNotifications() []MemberTrapNotifications {
	if o == nil || IsNil(o.TrapNotifications) {
		var ret []MemberTrapNotifications
		return ret
	}
	return o.TrapNotifications
}

// GetTrapNotificationsOk returns a tuple with the TrapNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTrapNotificationsOk() ([]MemberTrapNotifications, bool) {
	if o == nil || IsNil(o.TrapNotifications) {
		return nil, false
	}
	return o.TrapNotifications, true
}

// HasTrapNotifications returns a boolean if a field has been set.
func (o *Member) HasTrapNotifications() bool {
	if o != nil && !IsNil(o.TrapNotifications) {
		return true
	}

	return false
}

// SetTrapNotifications gets a reference to the given []MemberTrapNotifications and assigns it to the TrapNotifications field.
func (o *Member) SetTrapNotifications(v []MemberTrapNotifications) {
	o.TrapNotifications = v
}

// GetUpgradeGroup returns the UpgradeGroup field value if set, zero value otherwise.
func (o *Member) GetUpgradeGroup() string {
	if o == nil || IsNil(o.UpgradeGroup) {
		var ret string
		return ret
	}
	return *o.UpgradeGroup
}

// GetUpgradeGroupOk returns a tuple with the UpgradeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUpgradeGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeGroup) {
		return nil, false
	}
	return o.UpgradeGroup, true
}

// HasUpgradeGroup returns a boolean if a field has been set.
func (o *Member) HasUpgradeGroup() bool {
	if o != nil && !IsNil(o.UpgradeGroup) {
		return true
	}

	return false
}

// SetUpgradeGroup gets a reference to the given string and assigns it to the UpgradeGroup field.
func (o *Member) SetUpgradeGroup(v string) {
	o.UpgradeGroup = &v
}

// GetUseAutomatedTrafficCapture returns the UseAutomatedTrafficCapture field value if set, zero value otherwise.
func (o *Member) GetUseAutomatedTrafficCapture() bool {
	if o == nil || IsNil(o.UseAutomatedTrafficCapture) {
		var ret bool
		return ret
	}
	return *o.UseAutomatedTrafficCapture
}

// GetUseAutomatedTrafficCaptureOk returns a tuple with the UseAutomatedTrafficCapture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseAutomatedTrafficCaptureOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAutomatedTrafficCapture) {
		return nil, false
	}
	return o.UseAutomatedTrafficCapture, true
}

// HasUseAutomatedTrafficCapture returns a boolean if a field has been set.
func (o *Member) HasUseAutomatedTrafficCapture() bool {
	if o != nil && !IsNil(o.UseAutomatedTrafficCapture) {
		return true
	}

	return false
}

// SetUseAutomatedTrafficCapture gets a reference to the given bool and assigns it to the UseAutomatedTrafficCapture field.
func (o *Member) SetUseAutomatedTrafficCapture(v bool) {
	o.UseAutomatedTrafficCapture = &v
}

// GetUseDnsResolverSetting returns the UseDnsResolverSetting field value if set, zero value otherwise.
func (o *Member) GetUseDnsResolverSetting() bool {
	if o == nil || IsNil(o.UseDnsResolverSetting) {
		var ret bool
		return ret
	}
	return *o.UseDnsResolverSetting
}

// GetUseDnsResolverSettingOk returns a tuple with the UseDnsResolverSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseDnsResolverSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnsResolverSetting) {
		return nil, false
	}
	return o.UseDnsResolverSetting, true
}

// HasUseDnsResolverSetting returns a boolean if a field has been set.
func (o *Member) HasUseDnsResolverSetting() bool {
	if o != nil && !IsNil(o.UseDnsResolverSetting) {
		return true
	}

	return false
}

// SetUseDnsResolverSetting gets a reference to the given bool and assigns it to the UseDnsResolverSetting field.
func (o *Member) SetUseDnsResolverSetting(v bool) {
	o.UseDnsResolverSetting = &v
}

// GetUseDscp returns the UseDscp field value if set, zero value otherwise.
func (o *Member) GetUseDscp() bool {
	if o == nil || IsNil(o.UseDscp) {
		var ret bool
		return ret
	}
	return *o.UseDscp
}

// GetUseDscpOk returns a tuple with the UseDscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseDscpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDscp) {
		return nil, false
	}
	return o.UseDscp, true
}

// HasUseDscp returns a boolean if a field has been set.
func (o *Member) HasUseDscp() bool {
	if o != nil && !IsNil(o.UseDscp) {
		return true
	}

	return false
}

// SetUseDscp gets a reference to the given bool and assigns it to the UseDscp field.
func (o *Member) SetUseDscp(v bool) {
	o.UseDscp = &v
}

// GetUseEmailSetting returns the UseEmailSetting field value if set, zero value otherwise.
func (o *Member) GetUseEmailSetting() bool {
	if o == nil || IsNil(o.UseEmailSetting) {
		var ret bool
		return ret
	}
	return *o.UseEmailSetting
}

// GetUseEmailSettingOk returns a tuple with the UseEmailSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseEmailSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailSetting) {
		return nil, false
	}
	return o.UseEmailSetting, true
}

// HasUseEmailSetting returns a boolean if a field has been set.
func (o *Member) HasUseEmailSetting() bool {
	if o != nil && !IsNil(o.UseEmailSetting) {
		return true
	}

	return false
}

// SetUseEmailSetting gets a reference to the given bool and assigns it to the UseEmailSetting field.
func (o *Member) SetUseEmailSetting(v bool) {
	o.UseEmailSetting = &v
}

// GetUseEnableLom returns the UseEnableLom field value if set, zero value otherwise.
func (o *Member) GetUseEnableLom() bool {
	if o == nil || IsNil(o.UseEnableLom) {
		var ret bool
		return ret
	}
	return *o.UseEnableLom
}

// GetUseEnableLomOk returns a tuple with the UseEnableLom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseEnableLomOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableLom) {
		return nil, false
	}
	return o.UseEnableLom, true
}

// HasUseEnableLom returns a boolean if a field has been set.
func (o *Member) HasUseEnableLom() bool {
	if o != nil && !IsNil(o.UseEnableLom) {
		return true
	}

	return false
}

// SetUseEnableLom gets a reference to the given bool and assigns it to the UseEnableLom field.
func (o *Member) SetUseEnableLom(v bool) {
	o.UseEnableLom = &v
}

// GetUseEnableMemberRedirect returns the UseEnableMemberRedirect field value if set, zero value otherwise.
func (o *Member) GetUseEnableMemberRedirect() bool {
	if o == nil || IsNil(o.UseEnableMemberRedirect) {
		var ret bool
		return ret
	}
	return *o.UseEnableMemberRedirect
}

// GetUseEnableMemberRedirectOk returns a tuple with the UseEnableMemberRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseEnableMemberRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableMemberRedirect) {
		return nil, false
	}
	return o.UseEnableMemberRedirect, true
}

// HasUseEnableMemberRedirect returns a boolean if a field has been set.
func (o *Member) HasUseEnableMemberRedirect() bool {
	if o != nil && !IsNil(o.UseEnableMemberRedirect) {
		return true
	}

	return false
}

// SetUseEnableMemberRedirect gets a reference to the given bool and assigns it to the UseEnableMemberRedirect field.
func (o *Member) SetUseEnableMemberRedirect(v bool) {
	o.UseEnableMemberRedirect = &v
}

// GetUseExternalSyslogBackupServers returns the UseExternalSyslogBackupServers field value if set, zero value otherwise.
func (o *Member) GetUseExternalSyslogBackupServers() bool {
	if o == nil || IsNil(o.UseExternalSyslogBackupServers) {
		var ret bool
		return ret
	}
	return *o.UseExternalSyslogBackupServers
}

// GetUseExternalSyslogBackupServersOk returns a tuple with the UseExternalSyslogBackupServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseExternalSyslogBackupServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseExternalSyslogBackupServers) {
		return nil, false
	}
	return o.UseExternalSyslogBackupServers, true
}

// HasUseExternalSyslogBackupServers returns a boolean if a field has been set.
func (o *Member) HasUseExternalSyslogBackupServers() bool {
	if o != nil && !IsNil(o.UseExternalSyslogBackupServers) {
		return true
	}

	return false
}

// SetUseExternalSyslogBackupServers gets a reference to the given bool and assigns it to the UseExternalSyslogBackupServers field.
func (o *Member) SetUseExternalSyslogBackupServers(v bool) {
	o.UseExternalSyslogBackupServers = &v
}

// GetUseRemoteConsoleAccessEnable returns the UseRemoteConsoleAccessEnable field value if set, zero value otherwise.
func (o *Member) GetUseRemoteConsoleAccessEnable() bool {
	if o == nil || IsNil(o.UseRemoteConsoleAccessEnable) {
		var ret bool
		return ret
	}
	return *o.UseRemoteConsoleAccessEnable
}

// GetUseRemoteConsoleAccessEnableOk returns a tuple with the UseRemoteConsoleAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseRemoteConsoleAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRemoteConsoleAccessEnable) {
		return nil, false
	}
	return o.UseRemoteConsoleAccessEnable, true
}

// HasUseRemoteConsoleAccessEnable returns a boolean if a field has been set.
func (o *Member) HasUseRemoteConsoleAccessEnable() bool {
	if o != nil && !IsNil(o.UseRemoteConsoleAccessEnable) {
		return true
	}

	return false
}

// SetUseRemoteConsoleAccessEnable gets a reference to the given bool and assigns it to the UseRemoteConsoleAccessEnable field.
func (o *Member) SetUseRemoteConsoleAccessEnable(v bool) {
	o.UseRemoteConsoleAccessEnable = &v
}

// GetUseSnmpSetting returns the UseSnmpSetting field value if set, zero value otherwise.
func (o *Member) GetUseSnmpSetting() bool {
	if o == nil || IsNil(o.UseSnmpSetting) {
		var ret bool
		return ret
	}
	return *o.UseSnmpSetting
}

// GetUseSnmpSettingOk returns a tuple with the UseSnmpSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseSnmpSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnmpSetting) {
		return nil, false
	}
	return o.UseSnmpSetting, true
}

// HasUseSnmpSetting returns a boolean if a field has been set.
func (o *Member) HasUseSnmpSetting() bool {
	if o != nil && !IsNil(o.UseSnmpSetting) {
		return true
	}

	return false
}

// SetUseSnmpSetting gets a reference to the given bool and assigns it to the UseSnmpSetting field.
func (o *Member) SetUseSnmpSetting(v bool) {
	o.UseSnmpSetting = &v
}

// GetUseSupportAccessEnable returns the UseSupportAccessEnable field value if set, zero value otherwise.
func (o *Member) GetUseSupportAccessEnable() bool {
	if o == nil || IsNil(o.UseSupportAccessEnable) {
		var ret bool
		return ret
	}
	return *o.UseSupportAccessEnable
}

// GetUseSupportAccessEnableOk returns a tuple with the UseSupportAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseSupportAccessEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSupportAccessEnable) {
		return nil, false
	}
	return o.UseSupportAccessEnable, true
}

// HasUseSupportAccessEnable returns a boolean if a field has been set.
func (o *Member) HasUseSupportAccessEnable() bool {
	if o != nil && !IsNil(o.UseSupportAccessEnable) {
		return true
	}

	return false
}

// SetUseSupportAccessEnable gets a reference to the given bool and assigns it to the UseSupportAccessEnable field.
func (o *Member) SetUseSupportAccessEnable(v bool) {
	o.UseSupportAccessEnable = &v
}

// GetUseSyslogProxySetting returns the UseSyslogProxySetting field value if set, zero value otherwise.
func (o *Member) GetUseSyslogProxySetting() bool {
	if o == nil || IsNil(o.UseSyslogProxySetting) {
		var ret bool
		return ret
	}
	return *o.UseSyslogProxySetting
}

// GetUseSyslogProxySettingOk returns a tuple with the UseSyslogProxySetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseSyslogProxySettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyslogProxySetting) {
		return nil, false
	}
	return o.UseSyslogProxySetting, true
}

// HasUseSyslogProxySetting returns a boolean if a field has been set.
func (o *Member) HasUseSyslogProxySetting() bool {
	if o != nil && !IsNil(o.UseSyslogProxySetting) {
		return true
	}

	return false
}

// SetUseSyslogProxySetting gets a reference to the given bool and assigns it to the UseSyslogProxySetting field.
func (o *Member) SetUseSyslogProxySetting(v bool) {
	o.UseSyslogProxySetting = &v
}

// GetUseThresholdTraps returns the UseThresholdTraps field value if set, zero value otherwise.
func (o *Member) GetUseThresholdTraps() bool {
	if o == nil || IsNil(o.UseThresholdTraps) {
		var ret bool
		return ret
	}
	return *o.UseThresholdTraps
}

// GetUseThresholdTrapsOk returns a tuple with the UseThresholdTraps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseThresholdTrapsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseThresholdTraps) {
		return nil, false
	}
	return o.UseThresholdTraps, true
}

// HasUseThresholdTraps returns a boolean if a field has been set.
func (o *Member) HasUseThresholdTraps() bool {
	if o != nil && !IsNil(o.UseThresholdTraps) {
		return true
	}

	return false
}

// SetUseThresholdTraps gets a reference to the given bool and assigns it to the UseThresholdTraps field.
func (o *Member) SetUseThresholdTraps(v bool) {
	o.UseThresholdTraps = &v
}

// GetUseTimeZone returns the UseTimeZone field value if set, zero value otherwise.
func (o *Member) GetUseTimeZone() bool {
	if o == nil || IsNil(o.UseTimeZone) {
		var ret bool
		return ret
	}
	return *o.UseTimeZone
}

// GetUseTimeZoneOk returns a tuple with the UseTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTimeZoneOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTimeZone) {
		return nil, false
	}
	return o.UseTimeZone, true
}

// HasUseTimeZone returns a boolean if a field has been set.
func (o *Member) HasUseTimeZone() bool {
	if o != nil && !IsNil(o.UseTimeZone) {
		return true
	}

	return false
}

// SetUseTimeZone gets a reference to the given bool and assigns it to the UseTimeZone field.
func (o *Member) SetUseTimeZone(v bool) {
	o.UseTimeZone = &v
}

// GetUseTrafficCaptureAuthDns returns the UseTrafficCaptureAuthDns field value if set, zero value otherwise.
func (o *Member) GetUseTrafficCaptureAuthDns() bool {
	if o == nil || IsNil(o.UseTrafficCaptureAuthDns) {
		var ret bool
		return ret
	}
	return *o.UseTrafficCaptureAuthDns
}

// GetUseTrafficCaptureAuthDnsOk returns a tuple with the UseTrafficCaptureAuthDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrafficCaptureAuthDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrafficCaptureAuthDns) {
		return nil, false
	}
	return o.UseTrafficCaptureAuthDns, true
}

// HasUseTrafficCaptureAuthDns returns a boolean if a field has been set.
func (o *Member) HasUseTrafficCaptureAuthDns() bool {
	if o != nil && !IsNil(o.UseTrafficCaptureAuthDns) {
		return true
	}

	return false
}

// SetUseTrafficCaptureAuthDns gets a reference to the given bool and assigns it to the UseTrafficCaptureAuthDns field.
func (o *Member) SetUseTrafficCaptureAuthDns(v bool) {
	o.UseTrafficCaptureAuthDns = &v
}

// GetUseTrafficCaptureChr returns the UseTrafficCaptureChr field value if set, zero value otherwise.
func (o *Member) GetUseTrafficCaptureChr() bool {
	if o == nil || IsNil(o.UseTrafficCaptureChr) {
		var ret bool
		return ret
	}
	return *o.UseTrafficCaptureChr
}

// GetUseTrafficCaptureChrOk returns a tuple with the UseTrafficCaptureChr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrafficCaptureChrOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrafficCaptureChr) {
		return nil, false
	}
	return o.UseTrafficCaptureChr, true
}

// HasUseTrafficCaptureChr returns a boolean if a field has been set.
func (o *Member) HasUseTrafficCaptureChr() bool {
	if o != nil && !IsNil(o.UseTrafficCaptureChr) {
		return true
	}

	return false
}

// SetUseTrafficCaptureChr gets a reference to the given bool and assigns it to the UseTrafficCaptureChr field.
func (o *Member) SetUseTrafficCaptureChr(v bool) {
	o.UseTrafficCaptureChr = &v
}

// GetUseTrafficCaptureQps returns the UseTrafficCaptureQps field value if set, zero value otherwise.
func (o *Member) GetUseTrafficCaptureQps() bool {
	if o == nil || IsNil(o.UseTrafficCaptureQps) {
		var ret bool
		return ret
	}
	return *o.UseTrafficCaptureQps
}

// GetUseTrafficCaptureQpsOk returns a tuple with the UseTrafficCaptureQps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrafficCaptureQpsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrafficCaptureQps) {
		return nil, false
	}
	return o.UseTrafficCaptureQps, true
}

// HasUseTrafficCaptureQps returns a boolean if a field has been set.
func (o *Member) HasUseTrafficCaptureQps() bool {
	if o != nil && !IsNil(o.UseTrafficCaptureQps) {
		return true
	}

	return false
}

// SetUseTrafficCaptureQps gets a reference to the given bool and assigns it to the UseTrafficCaptureQps field.
func (o *Member) SetUseTrafficCaptureQps(v bool) {
	o.UseTrafficCaptureQps = &v
}

// GetUseTrafficCaptureRecDns returns the UseTrafficCaptureRecDns field value if set, zero value otherwise.
func (o *Member) GetUseTrafficCaptureRecDns() bool {
	if o == nil || IsNil(o.UseTrafficCaptureRecDns) {
		var ret bool
		return ret
	}
	return *o.UseTrafficCaptureRecDns
}

// GetUseTrafficCaptureRecDnsOk returns a tuple with the UseTrafficCaptureRecDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrafficCaptureRecDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrafficCaptureRecDns) {
		return nil, false
	}
	return o.UseTrafficCaptureRecDns, true
}

// HasUseTrafficCaptureRecDns returns a boolean if a field has been set.
func (o *Member) HasUseTrafficCaptureRecDns() bool {
	if o != nil && !IsNil(o.UseTrafficCaptureRecDns) {
		return true
	}

	return false
}

// SetUseTrafficCaptureRecDns gets a reference to the given bool and assigns it to the UseTrafficCaptureRecDns field.
func (o *Member) SetUseTrafficCaptureRecDns(v bool) {
	o.UseTrafficCaptureRecDns = &v
}

// GetUseTrafficCaptureRecQueries returns the UseTrafficCaptureRecQueries field value if set, zero value otherwise.
func (o *Member) GetUseTrafficCaptureRecQueries() bool {
	if o == nil || IsNil(o.UseTrafficCaptureRecQueries) {
		var ret bool
		return ret
	}
	return *o.UseTrafficCaptureRecQueries
}

// GetUseTrafficCaptureRecQueriesOk returns a tuple with the UseTrafficCaptureRecQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrafficCaptureRecQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrafficCaptureRecQueries) {
		return nil, false
	}
	return o.UseTrafficCaptureRecQueries, true
}

// HasUseTrafficCaptureRecQueries returns a boolean if a field has been set.
func (o *Member) HasUseTrafficCaptureRecQueries() bool {
	if o != nil && !IsNil(o.UseTrafficCaptureRecQueries) {
		return true
	}

	return false
}

// SetUseTrafficCaptureRecQueries gets a reference to the given bool and assigns it to the UseTrafficCaptureRecQueries field.
func (o *Member) SetUseTrafficCaptureRecQueries(v bool) {
	o.UseTrafficCaptureRecQueries = &v
}

// GetUseTrapNotifications returns the UseTrapNotifications field value if set, zero value otherwise.
func (o *Member) GetUseTrapNotifications() bool {
	if o == nil || IsNil(o.UseTrapNotifications) {
		var ret bool
		return ret
	}
	return *o.UseTrapNotifications
}

// GetUseTrapNotificationsOk returns a tuple with the UseTrapNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseTrapNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTrapNotifications) {
		return nil, false
	}
	return o.UseTrapNotifications, true
}

// HasUseTrapNotifications returns a boolean if a field has been set.
func (o *Member) HasUseTrapNotifications() bool {
	if o != nil && !IsNil(o.UseTrapNotifications) {
		return true
	}

	return false
}

// SetUseTrapNotifications gets a reference to the given bool and assigns it to the UseTrapNotifications field.
func (o *Member) SetUseTrapNotifications(v bool) {
	o.UseTrapNotifications = &v
}

// GetUseV4Vrrp returns the UseV4Vrrp field value if set, zero value otherwise.
func (o *Member) GetUseV4Vrrp() bool {
	if o == nil || IsNil(o.UseV4Vrrp) {
		var ret bool
		return ret
	}
	return *o.UseV4Vrrp
}

// GetUseV4VrrpOk returns a tuple with the UseV4Vrrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetUseV4VrrpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseV4Vrrp) {
		return nil, false
	}
	return o.UseV4Vrrp, true
}

// HasUseV4Vrrp returns a boolean if a field has been set.
func (o *Member) HasUseV4Vrrp() bool {
	if o != nil && !IsNil(o.UseV4Vrrp) {
		return true
	}

	return false
}

// SetUseV4Vrrp gets a reference to the given bool and assigns it to the UseV4Vrrp field.
func (o *Member) SetUseV4Vrrp(v bool) {
	o.UseV4Vrrp = &v
}

// GetVipSetting returns the VipSetting field value if set, zero value otherwise.
func (o *Member) GetVipSetting() MemberVipSetting {
	if o == nil || IsNil(o.VipSetting) {
		var ret MemberVipSetting
		return ret
	}
	return *o.VipSetting
}

// GetVipSettingOk returns a tuple with the VipSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetVipSettingOk() (*MemberVipSetting, bool) {
	if o == nil || IsNil(o.VipSetting) {
		return nil, false
	}
	return o.VipSetting, true
}

// HasVipSetting returns a boolean if a field has been set.
func (o *Member) HasVipSetting() bool {
	if o != nil && !IsNil(o.VipSetting) {
		return true
	}

	return false
}

// SetVipSetting gets a reference to the given MemberVipSetting and assigns it to the VipSetting field.
func (o *Member) SetVipSetting(v MemberVipSetting) {
	o.VipSetting = &v
}

// GetVpnMtu returns the VpnMtu field value if set, zero value otherwise.
func (o *Member) GetVpnMtu() int64 {
	if o == nil || IsNil(o.VpnMtu) {
		var ret int64
		return ret
	}
	return *o.VpnMtu
}

// GetVpnMtuOk returns a tuple with the VpnMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetVpnMtuOk() (*int64, bool) {
	if o == nil || IsNil(o.VpnMtu) {
		return nil, false
	}
	return o.VpnMtu, true
}

// HasVpnMtu returns a boolean if a field has been set.
func (o *Member) HasVpnMtu() bool {
	if o != nil && !IsNil(o.VpnMtu) {
		return true
	}

	return false
}

// SetVpnMtu gets a reference to the given int64 and assigns it to the VpnMtu field.
func (o *Member) SetVpnMtu(v int64) {
	o.VpnMtu = &v
}

func (o Member) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Member) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ActivePosition) {
		toSerialize["active_position"] = o.ActivePosition
	}
	if !IsNil(o.AdditionalIpList) {
		toSerialize["additional_ip_list"] = o.AdditionalIpList
	}
	if !IsNil(o.AutomatedTrafficCaptureSetting) {
		toSerialize["automated_traffic_capture_setting"] = o.AutomatedTrafficCaptureSetting
	}
	if !IsNil(o.BgpAs) {
		toSerialize["bgp_as"] = o.BgpAs
	}
	if !IsNil(o.CaptureTrafficControl) {
		toSerialize["capture_traffic_control"] = o.CaptureTrafficControl
	}
	if !IsNil(o.CaptureTrafficStatus) {
		toSerialize["capture_traffic_status"] = o.CaptureTrafficStatus
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ConfigAddrType) {
		toSerialize["config_addr_type"] = o.ConfigAddrType
	}
	if !IsNil(o.CreateToken) {
		toSerialize["create_token"] = o.CreateToken
	}
	if !IsNil(o.CspAccessKey) {
		toSerialize["csp_access_key"] = o.CspAccessKey
	}
	if !IsNil(o.CspMemberSetting) {
		toSerialize["csp_member_setting"] = o.CspMemberSetting
	}
	if !IsNil(o.DnsResolverSetting) {
		toSerialize["dns_resolver_setting"] = o.DnsResolverSetting
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.EmailSetting) {
		toSerialize["email_setting"] = o.EmailSetting
	}
	if !IsNil(o.EnableHa) {
		toSerialize["enable_ha"] = o.EnableHa
	}
	if !IsNil(o.EnableLom) {
		toSerialize["enable_lom"] = o.EnableLom
	}
	if !IsNil(o.EnableMemberRedirect) {
		toSerialize["enable_member_redirect"] = o.EnableMemberRedirect
	}
	if !IsNil(o.EnableRoApiAccess) {
		toSerialize["enable_ro_api_access"] = o.EnableRoApiAccess
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.ExternalSyslogBackupServers) {
		toSerialize["external_syslog_backup_servers"] = o.ExternalSyslogBackupServers
	}
	if !IsNil(o.ExternalSyslogServerEnable) {
		toSerialize["external_syslog_server_enable"] = o.ExternalSyslogServerEnable
	}
	if !IsNil(o.HaCloudPlatform) {
		toSerialize["ha_cloud_platform"] = o.HaCloudPlatform
	}
	if !IsNil(o.HaOnCloud) {
		toSerialize["ha_on_cloud"] = o.HaOnCloud
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.Ipv6Setting) {
		toSerialize["ipv6_setting"] = o.Ipv6Setting
	}
	if !IsNil(o.Ipv6StaticRoutes) {
		toSerialize["ipv6_static_routes"] = o.Ipv6StaticRoutes
	}
	if !IsNil(o.IsDscpCapable) {
		toSerialize["is_dscp_capable"] = o.IsDscpCapable
	}
	if !IsNil(o.Lan2Enabled) {
		toSerialize["lan2_enabled"] = o.Lan2Enabled
	}
	if !IsNil(o.Lan2PortSetting) {
		toSerialize["lan2_port_setting"] = o.Lan2PortSetting
	}
	if !IsNil(o.LomNetworkConfig) {
		toSerialize["lom_network_config"] = o.LomNetworkConfig
	}
	if !IsNil(o.LomUsers) {
		toSerialize["lom_users"] = o.LomUsers
	}
	if !IsNil(o.MasterCandidate) {
		toSerialize["master_candidate"] = o.MasterCandidate
	}
	if !IsNil(o.MemberAdminOperation) {
		toSerialize["member_admin_operation"] = o.MemberAdminOperation
	}
	if !IsNil(o.MemberServiceCommunication) {
		toSerialize["member_service_communication"] = o.MemberServiceCommunication
	}
	if !IsNil(o.MgmtPortSetting) {
		toSerialize["mgmt_port_setting"] = o.MgmtPortSetting
	}
	if !IsNil(o.MmdbEaBuildTime) {
		toSerialize["mmdb_ea_build_time"] = o.MmdbEaBuildTime
	}
	if !IsNil(o.MmdbGeoipBuildTime) {
		toSerialize["mmdb_geoip_build_time"] = o.MmdbGeoipBuildTime
	}
	if !IsNil(o.NatSetting) {
		toSerialize["nat_setting"] = o.NatSetting
	}
	if !IsNil(o.NodeInfo) {
		toSerialize["node_info"] = o.NodeInfo
	}
	if !IsNil(o.NtpSetting) {
		toSerialize["ntp_setting"] = o.NtpSetting
	}
	if !IsNil(o.OspfList) {
		toSerialize["ospf_list"] = o.OspfList
	}
	if !IsNil(o.PassiveHaArpEnabled) {
		toSerialize["passive_ha_arp_enabled"] = o.PassiveHaArpEnabled
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.PreProvisioning) {
		toSerialize["pre_provisioning"] = o.PreProvisioning
	}
	if !IsNil(o.PreserveIfOwnsDelegation) {
		toSerialize["preserve_if_owns_delegation"] = o.PreserveIfOwnsDelegation
	}
	if !IsNil(o.ReadToken) {
		toSerialize["read_token"] = o.ReadToken
	}
	if !IsNil(o.RemoteConsoleAccessEnable) {
		toSerialize["remote_console_access_enable"] = o.RemoteConsoleAccessEnable
	}
	if !IsNil(o.Requestrestartservicestatus) {
		toSerialize["requestrestartservicestatus"] = o.Requestrestartservicestatus
	}
	if !IsNil(o.Restartservices) {
		toSerialize["restartservices"] = o.Restartservices
	}
	if !IsNil(o.RouterId) {
		toSerialize["router_id"] = o.RouterId
	}
	if !IsNil(o.ServiceStatus) {
		toSerialize["service_status"] = o.ServiceStatus
	}
	if !IsNil(o.ServiceTypeConfiguration) {
		toSerialize["service_type_configuration"] = o.ServiceTypeConfiguration
	}
	if !IsNil(o.SnmpSetting) {
		toSerialize["snmp_setting"] = o.SnmpSetting
	}
	if !IsNil(o.StaticRoutes) {
		toSerialize["static_routes"] = o.StaticRoutes
	}
	if !IsNil(o.SupportAccessEnable) {
		toSerialize["support_access_enable"] = o.SupportAccessEnable
	}
	if !IsNil(o.SupportAccessInfo) {
		toSerialize["support_access_info"] = o.SupportAccessInfo
	}
	if !IsNil(o.SyslogProxySetting) {
		toSerialize["syslog_proxy_setting"] = o.SyslogProxySetting
	}
	if !IsNil(o.SyslogServers) {
		toSerialize["syslog_servers"] = o.SyslogServers
	}
	if !IsNil(o.SyslogSize) {
		toSerialize["syslog_size"] = o.SyslogSize
	}
	if !IsNil(o.ThresholdTraps) {
		toSerialize["threshold_traps"] = o.ThresholdTraps
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.TrafficCaptureAuthDnsSetting) {
		toSerialize["traffic_capture_auth_dns_setting"] = o.TrafficCaptureAuthDnsSetting
	}
	if !IsNil(o.TrafficCaptureChrSetting) {
		toSerialize["traffic_capture_chr_setting"] = o.TrafficCaptureChrSetting
	}
	if !IsNil(o.TrafficCaptureQpsSetting) {
		toSerialize["traffic_capture_qps_setting"] = o.TrafficCaptureQpsSetting
	}
	if !IsNil(o.TrafficCaptureRecDnsSetting) {
		toSerialize["traffic_capture_rec_dns_setting"] = o.TrafficCaptureRecDnsSetting
	}
	if !IsNil(o.TrafficCaptureRecQueriesSetting) {
		toSerialize["traffic_capture_rec_queries_setting"] = o.TrafficCaptureRecQueriesSetting
	}
	if !IsNil(o.TrapNotifications) {
		toSerialize["trap_notifications"] = o.TrapNotifications
	}
	if !IsNil(o.UpgradeGroup) {
		toSerialize["upgrade_group"] = o.UpgradeGroup
	}
	if !IsNil(o.UseAutomatedTrafficCapture) {
		toSerialize["use_automated_traffic_capture"] = o.UseAutomatedTrafficCapture
	}
	if !IsNil(o.UseDnsResolverSetting) {
		toSerialize["use_dns_resolver_setting"] = o.UseDnsResolverSetting
	}
	if !IsNil(o.UseDscp) {
		toSerialize["use_dscp"] = o.UseDscp
	}
	if !IsNil(o.UseEmailSetting) {
		toSerialize["use_email_setting"] = o.UseEmailSetting
	}
	if !IsNil(o.UseEnableLom) {
		toSerialize["use_enable_lom"] = o.UseEnableLom
	}
	if !IsNil(o.UseEnableMemberRedirect) {
		toSerialize["use_enable_member_redirect"] = o.UseEnableMemberRedirect
	}
	if !IsNil(o.UseExternalSyslogBackupServers) {
		toSerialize["use_external_syslog_backup_servers"] = o.UseExternalSyslogBackupServers
	}
	if !IsNil(o.UseRemoteConsoleAccessEnable) {
		toSerialize["use_remote_console_access_enable"] = o.UseRemoteConsoleAccessEnable
	}
	if !IsNil(o.UseSnmpSetting) {
		toSerialize["use_snmp_setting"] = o.UseSnmpSetting
	}
	if !IsNil(o.UseSupportAccessEnable) {
		toSerialize["use_support_access_enable"] = o.UseSupportAccessEnable
	}
	if !IsNil(o.UseSyslogProxySetting) {
		toSerialize["use_syslog_proxy_setting"] = o.UseSyslogProxySetting
	}
	if !IsNil(o.UseThresholdTraps) {
		toSerialize["use_threshold_traps"] = o.UseThresholdTraps
	}
	if !IsNil(o.UseTimeZone) {
		toSerialize["use_time_zone"] = o.UseTimeZone
	}
	if !IsNil(o.UseTrafficCaptureAuthDns) {
		toSerialize["use_traffic_capture_auth_dns"] = o.UseTrafficCaptureAuthDns
	}
	if !IsNil(o.UseTrafficCaptureChr) {
		toSerialize["use_traffic_capture_chr"] = o.UseTrafficCaptureChr
	}
	if !IsNil(o.UseTrafficCaptureQps) {
		toSerialize["use_traffic_capture_qps"] = o.UseTrafficCaptureQps
	}
	if !IsNil(o.UseTrafficCaptureRecDns) {
		toSerialize["use_traffic_capture_rec_dns"] = o.UseTrafficCaptureRecDns
	}
	if !IsNil(o.UseTrafficCaptureRecQueries) {
		toSerialize["use_traffic_capture_rec_queries"] = o.UseTrafficCaptureRecQueries
	}
	if !IsNil(o.UseTrapNotifications) {
		toSerialize["use_trap_notifications"] = o.UseTrapNotifications
	}
	if !IsNil(o.UseV4Vrrp) {
		toSerialize["use_v4_vrrp"] = o.UseV4Vrrp
	}
	if !IsNil(o.VipSetting) {
		toSerialize["vip_setting"] = o.VipSetting
	}
	if !IsNil(o.VpnMtu) {
		toSerialize["vpn_mtu"] = o.VpnMtu
	}
	return toSerialize, nil
}

type NullableMember struct {
	value *Member
	isSet bool
}

func (v NullableMember) Get() *Member {
	return v.value
}

func (v *NullableMember) Set(val *Member) {
	v.value = val
	v.isSet = true
}

func (v NullableMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMember(val *Member) *NullableMember {
	return &NullableMember{value: val, isSet: true}
}

func (v NullableMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
