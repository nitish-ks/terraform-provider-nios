/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberAdditionalIpList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberAdditionalIpList{}

// MemberAdditionalIpList struct for MemberAdditionalIpList
type MemberAdditionalIpList struct {
	// Determines if anycast for the Interface object is enabled or not.
	Anycast            *bool                                     `json:"anycast,omitempty"`
	Ipv4NetworkSetting *MemberadditionaliplistIpv4NetworkSetting `json:"ipv4_network_setting,omitempty"`
	Ipv6NetworkSetting *MemberadditionaliplistIpv6NetworkSetting `json:"ipv6_network_setting,omitempty"`
	// A descriptive comment of this structure.
	Comment *string `json:"comment,omitempty"`
	// Determines if the BGP advertisement setting is enabled for this interface or not.
	EnableBgp *bool `json:"enable_bgp,omitempty"`
	// Determines if the OSPF advertisement setting is enabled for this interface or not.
	EnableOspf *bool `json:"enable_ospf,omitempty"`
	// The interface type for the Interface object.
	Interface            *string `json:"interface,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberAdditionalIpList MemberAdditionalIpList

// NewMemberAdditionalIpList instantiates a new MemberAdditionalIpList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberAdditionalIpList() *MemberAdditionalIpList {
	this := MemberAdditionalIpList{}
	return &this
}

// NewMemberAdditionalIpListWithDefaults instantiates a new MemberAdditionalIpList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberAdditionalIpListWithDefaults() *MemberAdditionalIpList {
	this := MemberAdditionalIpList{}
	return &this
}

// GetAnycast returns the Anycast field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetAnycast() bool {
	if o == nil || IsNil(o.Anycast) {
		var ret bool
		return ret
	}
	return *o.Anycast
}

// GetAnycastOk returns a tuple with the Anycast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetAnycastOk() (*bool, bool) {
	if o == nil || IsNil(o.Anycast) {
		return nil, false
	}
	return o.Anycast, true
}

// HasAnycast returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasAnycast() bool {
	if o != nil && !IsNil(o.Anycast) {
		return true
	}

	return false
}

// SetAnycast gets a reference to the given bool and assigns it to the Anycast field.
func (o *MemberAdditionalIpList) SetAnycast(v bool) {
	o.Anycast = &v
}

// GetIpv4NetworkSetting returns the Ipv4NetworkSetting field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetIpv4NetworkSetting() MemberadditionaliplistIpv4NetworkSetting {
	if o == nil || IsNil(o.Ipv4NetworkSetting) {
		var ret MemberadditionaliplistIpv4NetworkSetting
		return ret
	}
	return *o.Ipv4NetworkSetting
}

// GetIpv4NetworkSettingOk returns a tuple with the Ipv4NetworkSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetIpv4NetworkSettingOk() (*MemberadditionaliplistIpv4NetworkSetting, bool) {
	if o == nil || IsNil(o.Ipv4NetworkSetting) {
		return nil, false
	}
	return o.Ipv4NetworkSetting, true
}

// HasIpv4NetworkSetting returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasIpv4NetworkSetting() bool {
	if o != nil && !IsNil(o.Ipv4NetworkSetting) {
		return true
	}

	return false
}

// SetIpv4NetworkSetting gets a reference to the given MemberadditionaliplistIpv4NetworkSetting and assigns it to the Ipv4NetworkSetting field.
func (o *MemberAdditionalIpList) SetIpv4NetworkSetting(v MemberadditionaliplistIpv4NetworkSetting) {
	o.Ipv4NetworkSetting = &v
}

// GetIpv6NetworkSetting returns the Ipv6NetworkSetting field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetIpv6NetworkSetting() MemberadditionaliplistIpv6NetworkSetting {
	if o == nil || IsNil(o.Ipv6NetworkSetting) {
		var ret MemberadditionaliplistIpv6NetworkSetting
		return ret
	}
	return *o.Ipv6NetworkSetting
}

// GetIpv6NetworkSettingOk returns a tuple with the Ipv6NetworkSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetIpv6NetworkSettingOk() (*MemberadditionaliplistIpv6NetworkSetting, bool) {
	if o == nil || IsNil(o.Ipv6NetworkSetting) {
		return nil, false
	}
	return o.Ipv6NetworkSetting, true
}

// HasIpv6NetworkSetting returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasIpv6NetworkSetting() bool {
	if o != nil && !IsNil(o.Ipv6NetworkSetting) {
		return true
	}

	return false
}

// SetIpv6NetworkSetting gets a reference to the given MemberadditionaliplistIpv6NetworkSetting and assigns it to the Ipv6NetworkSetting field.
func (o *MemberAdditionalIpList) SetIpv6NetworkSetting(v MemberadditionaliplistIpv6NetworkSetting) {
	o.Ipv6NetworkSetting = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MemberAdditionalIpList) SetComment(v string) {
	o.Comment = &v
}

// GetEnableBgp returns the EnableBgp field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetEnableBgp() bool {
	if o == nil || IsNil(o.EnableBgp) {
		var ret bool
		return ret
	}
	return *o.EnableBgp
}

// GetEnableBgpOk returns a tuple with the EnableBgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetEnableBgpOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBgp) {
		return nil, false
	}
	return o.EnableBgp, true
}

// HasEnableBgp returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasEnableBgp() bool {
	if o != nil && !IsNil(o.EnableBgp) {
		return true
	}

	return false
}

// SetEnableBgp gets a reference to the given bool and assigns it to the EnableBgp field.
func (o *MemberAdditionalIpList) SetEnableBgp(v bool) {
	o.EnableBgp = &v
}

// GetEnableOspf returns the EnableOspf field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetEnableOspf() bool {
	if o == nil || IsNil(o.EnableOspf) {
		var ret bool
		return ret
	}
	return *o.EnableOspf
}

// GetEnableOspfOk returns a tuple with the EnableOspf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetEnableOspfOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOspf) {
		return nil, false
	}
	return o.EnableOspf, true
}

// HasEnableOspf returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasEnableOspf() bool {
	if o != nil && !IsNil(o.EnableOspf) {
		return true
	}

	return false
}

// SetEnableOspf gets a reference to the given bool and assigns it to the EnableOspf field.
func (o *MemberAdditionalIpList) SetEnableOspf(v bool) {
	o.EnableOspf = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *MemberAdditionalIpList) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberAdditionalIpList) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *MemberAdditionalIpList) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *MemberAdditionalIpList) SetInterface(v string) {
	o.Interface = &v
}

func (o MemberAdditionalIpList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberAdditionalIpList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anycast) {
		toSerialize["anycast"] = o.Anycast
	}
	if !IsNil(o.Ipv4NetworkSetting) {
		toSerialize["ipv4_network_setting"] = o.Ipv4NetworkSetting
	}
	if !IsNil(o.Ipv6NetworkSetting) {
		toSerialize["ipv6_network_setting"] = o.Ipv6NetworkSetting
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.EnableBgp) {
		toSerialize["enable_bgp"] = o.EnableBgp
	}
	if !IsNil(o.EnableOspf) {
		toSerialize["enable_ospf"] = o.EnableOspf
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberAdditionalIpList) UnmarshalJSON(data []byte) (err error) {
	varMemberAdditionalIpList := _MemberAdditionalIpList{}

	err = json.Unmarshal(data, &varMemberAdditionalIpList)

	if err != nil {
		return err
	}

	*o = MemberAdditionalIpList(varMemberAdditionalIpList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "anycast")
		delete(additionalProperties, "ipv4_network_setting")
		delete(additionalProperties, "ipv6_network_setting")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "enable_bgp")
		delete(additionalProperties, "enable_ospf")
		delete(additionalProperties, "interface")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberAdditionalIpList struct {
	value *MemberAdditionalIpList
	isSet bool
}

func (v NullableMemberAdditionalIpList) Get() *MemberAdditionalIpList {
	return v.value
}

func (v *NullableMemberAdditionalIpList) Set(val *MemberAdditionalIpList) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberAdditionalIpList) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberAdditionalIpList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberAdditionalIpList(val *MemberAdditionalIpList) *NullableMemberAdditionalIpList {
	return &NullableMemberAdditionalIpList{value: val, isSet: true}
}

func (v NullableMemberAdditionalIpList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberAdditionalIpList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
