/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberCspMemberSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberCspMemberSetting{}

// MemberCspMemberSetting struct for MemberCspMemberSetting
type MemberCspMemberSetting struct {
	// Overrides grid join token
	UseCspJoinToken *bool `json:"use_csp_join_token,omitempty"`
	// Overrides CSP DNS Resolver
	UseCspDnsResolver *bool `json:"use_csp_dns_resolver,omitempty"`
	// Overrides grid https proxy
	UseCspHttpsProxy *bool `json:"use_csp_https_proxy,omitempty"`
	// Join token required to connect to a cluster
	CspJoinToken *string `json:"csp_join_token,omitempty"`
	// IP address of DNS resolver in DFP
	CspDnsResolver *string `json:"csp_dns_resolver,omitempty"`
	// HTTP Proxy IP address of CSP Portal
	CspHttpsProxy        *string `json:"csp_https_proxy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberCspMemberSetting MemberCspMemberSetting

// NewMemberCspMemberSetting instantiates a new MemberCspMemberSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberCspMemberSetting() *MemberCspMemberSetting {
	this := MemberCspMemberSetting{}
	return &this
}

// NewMemberCspMemberSettingWithDefaults instantiates a new MemberCspMemberSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberCspMemberSettingWithDefaults() *MemberCspMemberSetting {
	this := MemberCspMemberSetting{}
	return &this
}

// GetUseCspJoinToken returns the UseCspJoinToken field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetUseCspJoinToken() bool {
	if o == nil || IsNil(o.UseCspJoinToken) {
		var ret bool
		return ret
	}
	return *o.UseCspJoinToken
}

// GetUseCspJoinTokenOk returns a tuple with the UseCspJoinToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetUseCspJoinTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCspJoinToken) {
		return nil, false
	}
	return o.UseCspJoinToken, true
}

// HasUseCspJoinToken returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasUseCspJoinToken() bool {
	if o != nil && !IsNil(o.UseCspJoinToken) {
		return true
	}

	return false
}

// SetUseCspJoinToken gets a reference to the given bool and assigns it to the UseCspJoinToken field.
func (o *MemberCspMemberSetting) SetUseCspJoinToken(v bool) {
	o.UseCspJoinToken = &v
}

// GetUseCspDnsResolver returns the UseCspDnsResolver field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetUseCspDnsResolver() bool {
	if o == nil || IsNil(o.UseCspDnsResolver) {
		var ret bool
		return ret
	}
	return *o.UseCspDnsResolver
}

// GetUseCspDnsResolverOk returns a tuple with the UseCspDnsResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetUseCspDnsResolverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCspDnsResolver) {
		return nil, false
	}
	return o.UseCspDnsResolver, true
}

// HasUseCspDnsResolver returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasUseCspDnsResolver() bool {
	if o != nil && !IsNil(o.UseCspDnsResolver) {
		return true
	}

	return false
}

// SetUseCspDnsResolver gets a reference to the given bool and assigns it to the UseCspDnsResolver field.
func (o *MemberCspMemberSetting) SetUseCspDnsResolver(v bool) {
	o.UseCspDnsResolver = &v
}

// GetUseCspHttpsProxy returns the UseCspHttpsProxy field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetUseCspHttpsProxy() bool {
	if o == nil || IsNil(o.UseCspHttpsProxy) {
		var ret bool
		return ret
	}
	return *o.UseCspHttpsProxy
}

// GetUseCspHttpsProxyOk returns a tuple with the UseCspHttpsProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetUseCspHttpsProxyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCspHttpsProxy) {
		return nil, false
	}
	return o.UseCspHttpsProxy, true
}

// HasUseCspHttpsProxy returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasUseCspHttpsProxy() bool {
	if o != nil && !IsNil(o.UseCspHttpsProxy) {
		return true
	}

	return false
}

// SetUseCspHttpsProxy gets a reference to the given bool and assigns it to the UseCspHttpsProxy field.
func (o *MemberCspMemberSetting) SetUseCspHttpsProxy(v bool) {
	o.UseCspHttpsProxy = &v
}

// GetCspJoinToken returns the CspJoinToken field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetCspJoinToken() string {
	if o == nil || IsNil(o.CspJoinToken) {
		var ret string
		return ret
	}
	return *o.CspJoinToken
}

// GetCspJoinTokenOk returns a tuple with the CspJoinToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetCspJoinTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CspJoinToken) {
		return nil, false
	}
	return o.CspJoinToken, true
}

// HasCspJoinToken returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasCspJoinToken() bool {
	if o != nil && !IsNil(o.CspJoinToken) {
		return true
	}

	return false
}

// SetCspJoinToken gets a reference to the given string and assigns it to the CspJoinToken field.
func (o *MemberCspMemberSetting) SetCspJoinToken(v string) {
	o.CspJoinToken = &v
}

// GetCspDnsResolver returns the CspDnsResolver field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetCspDnsResolver() string {
	if o == nil || IsNil(o.CspDnsResolver) {
		var ret string
		return ret
	}
	return *o.CspDnsResolver
}

// GetCspDnsResolverOk returns a tuple with the CspDnsResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetCspDnsResolverOk() (*string, bool) {
	if o == nil || IsNil(o.CspDnsResolver) {
		return nil, false
	}
	return o.CspDnsResolver, true
}

// HasCspDnsResolver returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasCspDnsResolver() bool {
	if o != nil && !IsNil(o.CspDnsResolver) {
		return true
	}

	return false
}

// SetCspDnsResolver gets a reference to the given string and assigns it to the CspDnsResolver field.
func (o *MemberCspMemberSetting) SetCspDnsResolver(v string) {
	o.CspDnsResolver = &v
}

// GetCspHttpsProxy returns the CspHttpsProxy field value if set, zero value otherwise.
func (o *MemberCspMemberSetting) GetCspHttpsProxy() string {
	if o == nil || IsNil(o.CspHttpsProxy) {
		var ret string
		return ret
	}
	return *o.CspHttpsProxy
}

// GetCspHttpsProxyOk returns a tuple with the CspHttpsProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCspMemberSetting) GetCspHttpsProxyOk() (*string, bool) {
	if o == nil || IsNil(o.CspHttpsProxy) {
		return nil, false
	}
	return o.CspHttpsProxy, true
}

// HasCspHttpsProxy returns a boolean if a field has been set.
func (o *MemberCspMemberSetting) HasCspHttpsProxy() bool {
	if o != nil && !IsNil(o.CspHttpsProxy) {
		return true
	}

	return false
}

// SetCspHttpsProxy gets a reference to the given string and assigns it to the CspHttpsProxy field.
func (o *MemberCspMemberSetting) SetCspHttpsProxy(v string) {
	o.CspHttpsProxy = &v
}

func (o MemberCspMemberSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberCspMemberSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseCspJoinToken) {
		toSerialize["use_csp_join_token"] = o.UseCspJoinToken
	}
	if !IsNil(o.UseCspDnsResolver) {
		toSerialize["use_csp_dns_resolver"] = o.UseCspDnsResolver
	}
	if !IsNil(o.UseCspHttpsProxy) {
		toSerialize["use_csp_https_proxy"] = o.UseCspHttpsProxy
	}
	if !IsNil(o.CspJoinToken) {
		toSerialize["csp_join_token"] = o.CspJoinToken
	}
	if !IsNil(o.CspDnsResolver) {
		toSerialize["csp_dns_resolver"] = o.CspDnsResolver
	}
	if !IsNil(o.CspHttpsProxy) {
		toSerialize["csp_https_proxy"] = o.CspHttpsProxy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberCspMemberSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberCspMemberSetting := _MemberCspMemberSetting{}

	err = json.Unmarshal(data, &varMemberCspMemberSetting)

	if err != nil {
		return err
	}

	*o = MemberCspMemberSetting(varMemberCspMemberSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "use_csp_join_token")
		delete(additionalProperties, "use_csp_dns_resolver")
		delete(additionalProperties, "use_csp_https_proxy")
		delete(additionalProperties, "csp_join_token")
		delete(additionalProperties, "csp_dns_resolver")
		delete(additionalProperties, "csp_https_proxy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberCspMemberSetting struct {
	value *MemberCspMemberSetting
	isSet bool
}

func (v NullableMemberCspMemberSetting) Get() *MemberCspMemberSetting {
	return v.value
}

func (v *NullableMemberCspMemberSetting) Set(val *MemberCspMemberSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberCspMemberSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberCspMemberSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberCspMemberSetting(val *MemberCspMemberSetting) *NullableMemberCspMemberSetting {
	return &NullableMemberCspMemberSetting{value: val, isSet: true}
}

func (v NullableMemberCspMemberSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberCspMemberSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
