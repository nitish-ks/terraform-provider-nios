/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDhcpproperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDhcpproperties{}

// MemberDhcpproperties struct for MemberDhcpproperties
type MemberDhcpproperties struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The Authentication Server Group object associated with this member.
	AuthServerGroup *string `json:"auth_server_group,omitempty"`
	// The captive portal responsible for authenticating this DHCP member.
	AuthnCaptivePortal *string `json:"authn_captive_portal,omitempty"`
	// The MAC filter representing the authenticated range.
	AuthnCaptivePortalAuthenticatedFilter *string `json:"authn_captive_portal_authenticated_filter,omitempty"`
	// The flag that controls if this DHCP member is enabled for captive portal authentication.
	AuthnCaptivePortalEnabled *bool `json:"authn_captive_portal_enabled,omitempty"`
	// The MAC filter representing the guest range.
	AuthnCaptivePortalGuestFilter *string `json:"authn_captive_portal_guest_filter,omitempty"`
	// The flag that controls if this DHCP member can send authentication requests to an authentication server group.
	AuthnServerGroupEnabled *bool `json:"authn_server_group_enabled,omitempty"`
	// The authority flag of a Grid member. This flag specifies if a DHCP server is authoritative for a domain.
	Authority *bool `json:"authority,omitempty"`
	// The name of a file that DHCP clients need to boot. This setting overrides the Grid level setting.
	Bootfile *string `json:"bootfile,omitempty"`
	// The name of the server on which a boot file is stored. This setting overrides the Grid level setting.
	Bootserver *string `json:"bootserver,omitempty"`
	// The member DDNS domain name value.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// Determines the ability of a member DHCP server to generate a host name and update DNS with this host name when it receives a DHCP REQUEST message that does not include a host name.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// Determines the retry interval when the member DHCP server makes repeated attempts to send DDNS updates to a DNS server.
	DdnsRetryInterval *int64 `json:"ddns_retry_interval,omitempty"`
	// Determines that only the DHCP server is allowed to update DNS, regardless of the requests from the DHCP clients. This setting overrides the Grid level setting.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DDNS TTL (Dynamic DNS Time To Live) value specifies the number of seconds an IP address for the name is cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// Determines if the member DHCP server's ability to update the A and PTR records with a fixed address is enabled or not.
	DdnsUpdateFixedAddresses *bool `json:"ddns_update_fixed_addresses,omitempty"`
	// Determines if support for option 81 is enabled or not.
	DdnsUseOption81 *bool `json:"ddns_use_option81,omitempty"`
	// An ordered list of zone primaries that will receive DDNS updates.
	DdnsZonePrimaries []MemberDhcppropertiesDdnsZonePrimaries `json:"ddns_zone_primaries,omitempty"`
	// Determines if a BOOTP server denies BOOTP request or not. This setting overrides the Grid level setting.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The percentage of the total DHCP utilization of DHCP objects belonging to the Grid Member multiplied by 1000. This is the percentage of the total number of available IP addresses from all the DHCP objects belonging to the Grid Member versus the total number of all IP addresses in all of the DHCP objects on the Grid Member.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
	// A string describing the utilization level of DHCP objects that belong to the Grid Member.
	DhcpUtilizationStatus *string `json:"dhcp_utilization_status,omitempty"`
	// The update style for dynamic DNS updates.
	DnsUpdateStyle *string `json:"dns_update_style,omitempty"`
	// The total number of DHCP leases issued for the DHCP objects on the Grid Member.
	DynamicHosts *int64 `json:"dynamic_hosts,omitempty"`
	// The email_list value of a member DHCP server.
	EmailList []string `json:"email_list,omitempty"`
	// Determines if the member DHCP server's ability to send DDNS updates is enabled or not.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if the DHCP service of a member is enabled or not.
	EnableDhcp *bool `json:"enable_dhcp,omitempty"`
	// Determines if the DHCP service on the IPv6 LAN2 interface is enabled or not.
	EnableDhcpOnIpv6Lan2 *bool `json:"enable_dhcp_on_ipv6_lan2,omitempty"`
	// Determines if the DHCP service on the LAN2 interface is enabled or not.
	EnableDhcpOnLan2 *bool `json:"enable_dhcp_on_lan2,omitempty"`
	// Represents the watermarks above or below which address usage in a network is unexpected and might warrant your attention. This setting overrides the Grid level setting.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines if DHCPv6 service for the member is enabled or not.
	EnableDhcpv6Service *bool `json:"enable_dhcpv6_service,omitempty"`
	// Determines if e-mail warnings are enabled or disabled. When DHCP threshold is enabled and DHCP address usage crosses a watermark threshold, the appliance sends an e-mail notification to an administrator.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Determines if fingerprint feature is enabled on this member. If you enable this feature, the server will match a fingerprint for incoming lease requests.
	EnableFingerprint *bool `json:"enable_fingerprint,omitempty"`
	// Determines whether the appliance is enabled to receive GSS-TSIG authenticated updates from DHCP clients.
	EnableGssTsig *bool `json:"enable_gss_tsig,omitempty"`
	// Determines if the Grid member's host name rewrite feature is enabled or not.
	EnableHostnameRewrite *bool `json:"enable_hostname_rewrite,omitempty"`
	// Determines if lease query is allowed or not. This setting overrides the Grid-level setting.
	EnableLeasequery *bool `json:"enable_leasequery,omitempty"`
	// Determines if SNMP warnings are enabled or disabled on this DHCP member. When DHCP threshold is enabled and DHCP address usage crosses a watermark threshold, the appliance sends an SNMP trap to the trap receiver that was defined for the Grid member level.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of GSS-TSIG keys for a member DHCP object.
	GssTsigKeys []string `json:"gss_tsig_keys,omitempty"`
	// Determines the high watermark value of a member DHCP server. If the percentage of allocated addresses exceeds this watermark, the appliance makes a syslog entry and sends an e-mail notification (if enabled). Specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// Determines the high watermark reset value of a member DHCP server. If the percentage of allocated addresses drops below this value, a corresponding SNMP trap is reset. Specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// Host name of the Grid member.
	HostName *string `json:"host_name,omitempty"`
	// The hostname rewrite policy that is in the protocol hostname rewrite policies array of the Grid DHCP object. This attribute is mandatory if enable_hostname_rewrite is \"true\".
	HostnameRewritePolicy *string `json:"hostname_rewrite_policy,omitempty"`
	// Determines if the ignore DHCP option list request flag of a Grid member DHCP is enabled or not. If this flag is set to true all available DHCP options will be returned to the client.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Indicates whether the appliance will ignore DHCP client IDs or MAC addresses. Valid values are \"NONE\", \"CLIENT\", or \"MACADDR\". The default is \"NONE\".
	IgnoreId *string `json:"ignore_id,omitempty"`
	// A list of MAC addresses the appliance will ignore.
	IgnoreMacAddresses []string `json:"ignore_mac_addresses,omitempty"`
	// Determines if the Immediate Fixed address configuration apply feature for the DHCP member is enabled or not.
	ImmediateFaConfiguration *bool `json:"immediate_fa_configuration,omitempty"`
	// The IPv4 Address of the Grid member.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// The member DDNS IPv6 domain name value.
	Ipv6DdnsDomainname *string `json:"ipv6_ddns_domainname,omitempty"`
	// Controls whether the FQDN option sent by the DHCPv6 client is to be used, or if the server can automatically generate the FQDN.
	Ipv6DdnsEnableOptionFqdn *bool `json:"ipv6_ddns_enable_option_fqdn,omitempty"`
	// The member IPv6 DDNS hostname value.
	Ipv6DdnsHostname *string `json:"ipv6_ddns_hostname,omitempty"`
	// Determines if the server always updates DNS or updates only if requested by the client.
	Ipv6DdnsServerAlwaysUpdates *bool `json:"ipv6_ddns_server_always_updates,omitempty"`
	// The member IPv6 DDNS TTL value.
	Ipv6DdnsTtl *int64 `json:"ipv6_ddns_ttl,omitempty"`
	// The update style for dynamic DHCPv6 DNS updates.
	Ipv6DnsUpdateStyle *string `json:"ipv6_dns_update_style,omitempty"`
	// The IPv6 domain name.
	Ipv6DomainName *string `json:"ipv6_domain_name,omitempty"`
	// The comma separated list of domain name server addresses in IPv6 address format.
	Ipv6DomainNameServers []string `json:"ipv6_domain_name_servers,omitempty"`
	// Determines if sending DDNS updates by the member DHCPv6 server is enabled or not.
	Ipv6EnableDdns *bool `json:"ipv6_enable_ddns,omitempty"`
	// Determines whether the appliance is enabled to receive GSS-TSIG authenticated updates from DHCPv6 clients.
	Ipv6EnableGssTsig *bool `json:"ipv6_enable_gss_tsig,omitempty"`
	// Indicates whether DHCPv6 lease scavenging is enabled or disabled.
	Ipv6EnableLeaseScavenging *bool `json:"ipv6_enable_lease_scavenging,omitempty"`
	// Determines if the DHCPv6 server retries failed dynamic DNS updates or not.
	Ipv6EnableRetryUpdates *bool `json:"ipv6_enable_retry_updates,omitempty"`
	// Determines if the server generates the hostname if it is not sent by the client.
	Ipv6GenerateHostname *bool `json:"ipv6_generate_hostname,omitempty"`
	// The list of GSS-TSIG keys for a member DHCPv6 object.
	Ipv6GssTsigKeys []string `json:"ipv6_gss_tsig_keys,omitempty"`
	// Determines the IPv6 address or FQDN of the Kerberos server for DHCPv6 GSS-TSIG authentication. This setting overrides the Grid level setting.
	Ipv6KdcServer *string `json:"ipv6_kdc_server,omitempty"`
	// The member-level grace period (in seconds) to keep an expired lease before it is deleted by the scavenging process.
	Ipv6LeaseScavengingTime *int64 `json:"ipv6_lease_scavenging_time,omitempty"`
	// The Microsoft client DHCP IPv6 code page value of a Grid member. This value is the hostname translation code page for Microsoft DHCP IPv6 clients and overrides the Grid level Microsoft DHCP IPv6 client code page.
	Ipv6MicrosoftCodePage *string `json:"ipv6_microsoft_code_page,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCPv6 options associated with the object.
	Ipv6Options []MemberDhcppropertiesIpv6Options `json:"ipv6_options,omitempty"`
	// Determines if the IPv6 recycle leases feature is enabled or not. If the feature is enabled, leases are kept in the Recycle Bin until one week after lease expiration. When the feature is disabled, the leases are irrecoverably deleted.
	Ipv6RecycleLeases *bool `json:"ipv6_recycle_leases,omitempty"`
	// Enable binding for expired DHCPv6 leases.
	Ipv6RememberExpiredClientAssociation *bool `json:"ipv6_remember_expired_client_association,omitempty"`
	// Determines the retry interval when the member DHCPv6 server makes repeated attempts to send DDNS updates to a DNS server.
	Ipv6RetryUpdatesInterval *int64 `json:"ipv6_retry_updates_interval,omitempty"`
	// The server DHCPv6 unique identifier (DUID) for the Grid member.
	Ipv6ServerDuid *string `json:"ipv6_server_duid,omitempty"`
	// Controls whether the DHCPv6 server updates DNS when an IPv6 DHCP lease is renewed.
	Ipv6UpdateDnsOnLeaseRenewal *bool `json:"ipv6_update_dns_on_lease_renewal,omitempty"`
	// The IPv6 Address of the Grid member.
	Ipv6addr *string `json:"ipv6addr,omitempty"`
	// The IPv4 address or FQDN of the Kerberos server for DHCPv4 GSS-TSIG authentication. This setting overrides the Grid level setting.
	KdcServer *string `json:"kdc_server,omitempty"`
	// Defines how the appliance releases DHCP leases. Valid values are \"RELEASE_MACHING_ID\", \"NEVER_RELEASE\", or \"ONE_LEASE_PER_CLIENT\". The default is \"RELEASE_MATCHING_ID\".
	LeasePerClientSettings *string `json:"lease_per_client_settings,omitempty"`
	// Determines the lease scavenging time value. When this field is set, the appliance permanently deletes the free and backup leases that remain in the database beyond a specified period of time. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *int64 `json:"lease_scavenge_time,omitempty"`
	// This value specifies whether the grid member logs lease events. This setting overrides the Grid level setting.
	LogLeaseEvents *bool `json:"log_lease_events,omitempty"`
	// This field contains the logic filters to be applied on the Grid member. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []MemberDhcppropertiesLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// Determines the low watermark value. If the percent of allocated addresses drops below this watermark, the appliance makes a syslog entry and sends an e-mail notification (if enabled).
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// Determines the low watermark reset value. If the percentage of allocated addresses exceeds this value, a corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// The Microsoft client DHCP IPv4 code page value of a grid member. This value is the hostname translation code page for Microsoft DHCP IPv4 clients and overrides the Grid level Microsoft DHCP IPv4 client code page.
	MicrosoftCodePage *string `json:"microsoft_code_page,omitempty"`
	// The next server value of a member DHCP server. This value is the IP address or name of the boot file server on which the boot file is stored.
	Nextserver *string `json:"nextserver,omitempty"`
	// The list of option 60 match rules.
	Option60MatchRules []MemberDhcppropertiesOption60MatchRules `json:"option60_match_rules,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []MemberDhcppropertiesOptions `json:"options,omitempty"`
	// Specifies the number of pings that the Infoblox appliance sends to an IP address to verify that it is not in use. Values are from 0 to 10, where 0 disables pings.
	PingCount *int64 `json:"ping_count,omitempty"`
	// Indicates the number of milliseconds the appliance waits for a response to its ping. Valid values are 100, 500, 1000, 2000, 3000, 4000 and 5000 milliseconds.
	PingTimeout *int64 `json:"ping_timeout,omitempty"`
	// The preferred lifetime value.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The Prefix length mode for DHCPv6.
	PrefixLengthMode *string `json:"prefix_length_mode,omitempty"`
	// Specifies the duration of time it takes a host to connect to a boot server, such as a TFTP server, and download the file it needs to boot. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// Determines if the recycle leases feature is enabled or not. If you enabled this feature and then delete a DHCP range, the appliance stores active leases from this range up to one week after the leases expires.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// Indicates whether the DHCP server makes repeated attempts to send DDNS updates to a DNS server.
	RetryDdnsUpdates *bool `json:"retry_ddns_updates,omitempty"`
	// The number of static DHCP addresses configured in DHCP objects that belong to the Grid Member.
	StaticHosts *int64 `json:"static_hosts,omitempty"`
	// The syslog facility is the location on the syslog server to which you want to sort the syslog messages.
	SyslogFacility *string `json:"syslog_facility,omitempty"`
	// The total number of DHCP addresses configured in DHCP objects that belong to the Grid Member.
	TotalHosts *int64 `json:"total_hosts,omitempty"`
	// Controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: authority
	UseAuthority *bool `json:"use_authority,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: ddns_update_fixed_addresses
	UseDdnsUpdateFixedAddresses *bool `json:"use_ddns_update_fixed_addresses,omitempty"`
	// Use flag for: ddns_use_option81
	UseDdnsUseOption81 *bool `json:"use_ddns_use_option81,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: dns_update_style
	UseDnsUpdateStyle *bool `json:"use_dns_update_style,omitempty"`
	// Use flag for: email_list
	UseEmailList *bool `json:"use_email_list,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: enable_dhcp_thresholds , high_water_mark, high_water_mark_reset, low_water_mark, low_water_mark_reset
	UseEnableDhcpThresholds *bool `json:"use_enable_dhcp_thresholds,omitempty"`
	// Use flag for: enable_fingerprint
	UseEnableFingerprint *bool `json:"use_enable_fingerprint,omitempty"`
	// Use flag for: kdc_server , enable_gss_tsig
	UseEnableGssTsig *bool `json:"use_enable_gss_tsig,omitempty"`
	// Use flag for: enable_hostname_rewrite , hostname_rewrite_policy
	UseEnableHostnameRewrite *bool `json:"use_enable_hostname_rewrite,omitempty"`
	// Use flag for: enable_leasequery
	UseEnableLeasequery *bool `json:"use_enable_leasequery,omitempty"`
	// Use flag for: enable_one_lease_per_client
	UseEnableOneLeasePerClient *bool `json:"use_enable_one_lease_per_client,omitempty"`
	// Use flag for: gss_tsig_keys
	UseGssTsigKeys *bool `json:"use_gss_tsig_keys,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ignore_id
	UseIgnoreId *bool `json:"use_ignore_id,omitempty"`
	// Use flag for: immediate_fa_configuration
	UseImmediateFaConfiguration *bool `json:"use_immediate_fa_configuration,omitempty"`
	// Use flag for: ipv6_ddns_domainname
	UseIpv6DdnsDomainname *bool `json:"use_ipv6_ddns_domainname,omitempty"`
	// Use flag for: ipv6_ddns_enable_option_fqdn
	UseIpv6DdnsEnableOptionFqdn *bool `json:"use_ipv6_ddns_enable_option_fqdn,omitempty"`
	// Use flag for: ipv6_ddns_hostname
	UseIpv6DdnsHostname *bool `json:"use_ipv6_ddns_hostname,omitempty"`
	// Use flag for: ipv6_ddns_ttl
	UseIpv6DdnsTtl *bool `json:"use_ipv6_ddns_ttl,omitempty"`
	// Use flag for: ipv6_dns_update_style
	UseIpv6DnsUpdateStyle *bool `json:"use_ipv6_dns_update_style,omitempty"`
	// Use flag for: ipv6_domain_name
	UseIpv6DomainName *bool `json:"use_ipv6_domain_name,omitempty"`
	// Use flag for: ipv6_domain_name_servers
	UseIpv6DomainNameServers *bool `json:"use_ipv6_domain_name_servers,omitempty"`
	// Use flag for: ipv6_enable_ddns
	UseIpv6EnableDdns *bool `json:"use_ipv6_enable_ddns,omitempty"`
	// Use flag for: ipv6_kdc_server , ipv6_enable_gss_tsig
	UseIpv6EnableGssTsig *bool `json:"use_ipv6_enable_gss_tsig,omitempty"`
	// Use flag for: ipv6_enable_retry_updates , ipv6_retry_updates_interval
	UseIpv6EnableRetryUpdates *bool `json:"use_ipv6_enable_retry_updates,omitempty"`
	// Use flag for: ipv6_generate_hostname
	UseIpv6GenerateHostname *bool `json:"use_ipv6_generate_hostname,omitempty"`
	// Use flag for: ipv6_gss_tsig_keys
	UseIpv6GssTsigKeys *bool `json:"use_ipv6_gss_tsig_keys,omitempty"`
	// Use flag for: ipv6_enable_lease_scavenging , ipv6_lease_scavenging_time, ipv6_remember_expired_client_association
	UseIpv6LeaseScavenging *bool `json:"use_ipv6_lease_scavenging,omitempty"`
	// Use flag for: ipv6_microsoft_code_page
	UseIpv6MicrosoftCodePage *bool `json:"use_ipv6_microsoft_code_page,omitempty"`
	// Use flag for: ipv6_options
	UseIpv6Options *bool `json:"use_ipv6_options,omitempty"`
	// Use flag for: ipv6_recycle_leases
	UseIpv6RecycleLeases *bool `json:"use_ipv6_recycle_leases,omitempty"`
	// Use flag for: ipv6_update_dns_on_lease_renewal
	UseIpv6UpdateDnsOnLeaseRenewal *bool `json:"use_ipv6_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: lease_per_client_settings
	UseLeasePerClientSettings *bool `json:"use_lease_per_client_settings,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: log_lease_events
	UseLogLeaseEvents *bool `json:"use_log_lease_events,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: microsoft_code_page
	UseMicrosoftCodePage *bool `json:"use_microsoft_code_page,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: ping_count
	UsePingCount *bool `json:"use_ping_count,omitempty"`
	// Use flag for: ping_timeout
	UsePingTimeout *bool `json:"use_ping_timeout,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: prefix_length_mode
	UsePrefixLengthMode *bool `json:"use_prefix_length_mode,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: ddns_retry_interval , retry_ddns_updates
	UseRetryDdnsUpdates *bool `json:"use_retry_ddns_updates,omitempty"`
	// Use flag for: syslog_facility
	UseSyslogFacility *bool `json:"use_syslog_facility,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// The valid lifetime for Grid Member DHCP. Specifies the length of time addresses that are assigned to DHCPv6 clients remain in the valid state.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewMemberDhcpproperties instantiates a new MemberDhcpproperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDhcpproperties() *MemberDhcpproperties {
	this := MemberDhcpproperties{}
	return &this
}

// NewMemberDhcppropertiesWithDefaults instantiates a new MemberDhcpproperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDhcppropertiesWithDefaults() *MemberDhcpproperties {
	this := MemberDhcpproperties{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *MemberDhcpproperties) SetRef(v string) {
	o.Ref = &v
}

// GetAuthServerGroup returns the AuthServerGroup field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthServerGroup() string {
	if o == nil || IsNil(o.AuthServerGroup) {
		var ret string
		return ret
	}
	return *o.AuthServerGroup
}

// GetAuthServerGroupOk returns a tuple with the AuthServerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthServerGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AuthServerGroup) {
		return nil, false
	}
	return o.AuthServerGroup, true
}

// HasAuthServerGroup returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthServerGroup() bool {
	if o != nil && !IsNil(o.AuthServerGroup) {
		return true
	}

	return false
}

// SetAuthServerGroup gets a reference to the given string and assigns it to the AuthServerGroup field.
func (o *MemberDhcpproperties) SetAuthServerGroup(v string) {
	o.AuthServerGroup = &v
}

// GetAuthnCaptivePortal returns the AuthnCaptivePortal field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthnCaptivePortal() string {
	if o == nil || IsNil(o.AuthnCaptivePortal) {
		var ret string
		return ret
	}
	return *o.AuthnCaptivePortal
}

// GetAuthnCaptivePortalOk returns a tuple with the AuthnCaptivePortal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalOk() (*string, bool) {
	if o == nil || IsNil(o.AuthnCaptivePortal) {
		return nil, false
	}
	return o.AuthnCaptivePortal, true
}

// HasAuthnCaptivePortal returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthnCaptivePortal() bool {
	if o != nil && !IsNil(o.AuthnCaptivePortal) {
		return true
	}

	return false
}

// SetAuthnCaptivePortal gets a reference to the given string and assigns it to the AuthnCaptivePortal field.
func (o *MemberDhcpproperties) SetAuthnCaptivePortal(v string) {
	o.AuthnCaptivePortal = &v
}

// GetAuthnCaptivePortalAuthenticatedFilter returns the AuthnCaptivePortalAuthenticatedFilter field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalAuthenticatedFilter() string {
	if o == nil || IsNil(o.AuthnCaptivePortalAuthenticatedFilter) {
		var ret string
		return ret
	}
	return *o.AuthnCaptivePortalAuthenticatedFilter
}

// GetAuthnCaptivePortalAuthenticatedFilterOk returns a tuple with the AuthnCaptivePortalAuthenticatedFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalAuthenticatedFilterOk() (*string, bool) {
	if o == nil || IsNil(o.AuthnCaptivePortalAuthenticatedFilter) {
		return nil, false
	}
	return o.AuthnCaptivePortalAuthenticatedFilter, true
}

// HasAuthnCaptivePortalAuthenticatedFilter returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthnCaptivePortalAuthenticatedFilter() bool {
	if o != nil && !IsNil(o.AuthnCaptivePortalAuthenticatedFilter) {
		return true
	}

	return false
}

// SetAuthnCaptivePortalAuthenticatedFilter gets a reference to the given string and assigns it to the AuthnCaptivePortalAuthenticatedFilter field.
func (o *MemberDhcpproperties) SetAuthnCaptivePortalAuthenticatedFilter(v string) {
	o.AuthnCaptivePortalAuthenticatedFilter = &v
}

// GetAuthnCaptivePortalEnabled returns the AuthnCaptivePortalEnabled field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalEnabled() bool {
	if o == nil || IsNil(o.AuthnCaptivePortalEnabled) {
		var ret bool
		return ret
	}
	return *o.AuthnCaptivePortalEnabled
}

// GetAuthnCaptivePortalEnabledOk returns a tuple with the AuthnCaptivePortalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthnCaptivePortalEnabled) {
		return nil, false
	}
	return o.AuthnCaptivePortalEnabled, true
}

// HasAuthnCaptivePortalEnabled returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthnCaptivePortalEnabled() bool {
	if o != nil && !IsNil(o.AuthnCaptivePortalEnabled) {
		return true
	}

	return false
}

// SetAuthnCaptivePortalEnabled gets a reference to the given bool and assigns it to the AuthnCaptivePortalEnabled field.
func (o *MemberDhcpproperties) SetAuthnCaptivePortalEnabled(v bool) {
	o.AuthnCaptivePortalEnabled = &v
}

// GetAuthnCaptivePortalGuestFilter returns the AuthnCaptivePortalGuestFilter field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalGuestFilter() string {
	if o == nil || IsNil(o.AuthnCaptivePortalGuestFilter) {
		var ret string
		return ret
	}
	return *o.AuthnCaptivePortalGuestFilter
}

// GetAuthnCaptivePortalGuestFilterOk returns a tuple with the AuthnCaptivePortalGuestFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthnCaptivePortalGuestFilterOk() (*string, bool) {
	if o == nil || IsNil(o.AuthnCaptivePortalGuestFilter) {
		return nil, false
	}
	return o.AuthnCaptivePortalGuestFilter, true
}

// HasAuthnCaptivePortalGuestFilter returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthnCaptivePortalGuestFilter() bool {
	if o != nil && !IsNil(o.AuthnCaptivePortalGuestFilter) {
		return true
	}

	return false
}

// SetAuthnCaptivePortalGuestFilter gets a reference to the given string and assigns it to the AuthnCaptivePortalGuestFilter field.
func (o *MemberDhcpproperties) SetAuthnCaptivePortalGuestFilter(v string) {
	o.AuthnCaptivePortalGuestFilter = &v
}

// GetAuthnServerGroupEnabled returns the AuthnServerGroupEnabled field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthnServerGroupEnabled() bool {
	if o == nil || IsNil(o.AuthnServerGroupEnabled) {
		var ret bool
		return ret
	}
	return *o.AuthnServerGroupEnabled
}

// GetAuthnServerGroupEnabledOk returns a tuple with the AuthnServerGroupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthnServerGroupEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthnServerGroupEnabled) {
		return nil, false
	}
	return o.AuthnServerGroupEnabled, true
}

// HasAuthnServerGroupEnabled returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthnServerGroupEnabled() bool {
	if o != nil && !IsNil(o.AuthnServerGroupEnabled) {
		return true
	}

	return false
}

// SetAuthnServerGroupEnabled gets a reference to the given bool and assigns it to the AuthnServerGroupEnabled field.
func (o *MemberDhcpproperties) SetAuthnServerGroupEnabled(v bool) {
	o.AuthnServerGroupEnabled = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetAuthority() bool {
	if o == nil || IsNil(o.Authority) {
		var ret bool
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given bool and assigns it to the Authority field.
func (o *MemberDhcpproperties) SetAuthority(v bool) {
	o.Authority = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *MemberDhcpproperties) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *MemberDhcpproperties) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *MemberDhcpproperties) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *MemberDhcpproperties) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsRetryInterval returns the DdnsRetryInterval field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsRetryInterval() int64 {
	if o == nil || IsNil(o.DdnsRetryInterval) {
		var ret int64
		return ret
	}
	return *o.DdnsRetryInterval
}

// GetDdnsRetryIntervalOk returns a tuple with the DdnsRetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsRetryIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsRetryInterval) {
		return nil, false
	}
	return o.DdnsRetryInterval, true
}

// HasDdnsRetryInterval returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsRetryInterval() bool {
	if o != nil && !IsNil(o.DdnsRetryInterval) {
		return true
	}

	return false
}

// SetDdnsRetryInterval gets a reference to the given int64 and assigns it to the DdnsRetryInterval field.
func (o *MemberDhcpproperties) SetDdnsRetryInterval(v int64) {
	o.DdnsRetryInterval = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *MemberDhcpproperties) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *MemberDhcpproperties) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDdnsUpdateFixedAddresses returns the DdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateFixedAddresses
}

// GetDdnsUpdateFixedAddressesOk returns a tuple with the DdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.DdnsUpdateFixedAddresses, true
}

// HasDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.DdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the DdnsUpdateFixedAddresses field.
func (o *MemberDhcpproperties) SetDdnsUpdateFixedAddresses(v bool) {
	o.DdnsUpdateFixedAddresses = &v
}

// GetDdnsUseOption81 returns the DdnsUseOption81 field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsUseOption81() bool {
	if o == nil || IsNil(o.DdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.DdnsUseOption81
}

// GetDdnsUseOption81Ok returns a tuple with the DdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseOption81) {
		return nil, false
	}
	return o.DdnsUseOption81, true
}

// HasDdnsUseOption81 returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsUseOption81() bool {
	if o != nil && !IsNil(o.DdnsUseOption81) {
		return true
	}

	return false
}

// SetDdnsUseOption81 gets a reference to the given bool and assigns it to the DdnsUseOption81 field.
func (o *MemberDhcpproperties) SetDdnsUseOption81(v bool) {
	o.DdnsUseOption81 = &v
}

// GetDdnsZonePrimaries returns the DdnsZonePrimaries field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDdnsZonePrimaries() []MemberDhcppropertiesDdnsZonePrimaries {
	if o == nil || IsNil(o.DdnsZonePrimaries) {
		var ret []MemberDhcppropertiesDdnsZonePrimaries
		return ret
	}
	return o.DdnsZonePrimaries
}

// GetDdnsZonePrimariesOk returns a tuple with the DdnsZonePrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDdnsZonePrimariesOk() ([]MemberDhcppropertiesDdnsZonePrimaries, bool) {
	if o == nil || IsNil(o.DdnsZonePrimaries) {
		return nil, false
	}
	return o.DdnsZonePrimaries, true
}

// HasDdnsZonePrimaries returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDdnsZonePrimaries() bool {
	if o != nil && !IsNil(o.DdnsZonePrimaries) {
		return true
	}

	return false
}

// SetDdnsZonePrimaries gets a reference to the given []MemberDhcppropertiesDdnsZonePrimaries and assigns it to the DdnsZonePrimaries field.
func (o *MemberDhcpproperties) SetDdnsZonePrimaries(v []MemberDhcppropertiesDdnsZonePrimaries) {
	o.DdnsZonePrimaries = v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *MemberDhcpproperties) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *MemberDhcpproperties) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

// GetDhcpUtilizationStatus returns the DhcpUtilizationStatus field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDhcpUtilizationStatus() string {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		var ret string
		return ret
	}
	return *o.DhcpUtilizationStatus
}

// GetDhcpUtilizationStatusOk returns a tuple with the DhcpUtilizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDhcpUtilizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		return nil, false
	}
	return o.DhcpUtilizationStatus, true
}

// HasDhcpUtilizationStatus returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDhcpUtilizationStatus() bool {
	if o != nil && !IsNil(o.DhcpUtilizationStatus) {
		return true
	}

	return false
}

// SetDhcpUtilizationStatus gets a reference to the given string and assigns it to the DhcpUtilizationStatus field.
func (o *MemberDhcpproperties) SetDhcpUtilizationStatus(v string) {
	o.DhcpUtilizationStatus = &v
}

// GetDnsUpdateStyle returns the DnsUpdateStyle field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDnsUpdateStyle() string {
	if o == nil || IsNil(o.DnsUpdateStyle) {
		var ret string
		return ret
	}
	return *o.DnsUpdateStyle
}

// GetDnsUpdateStyleOk returns a tuple with the DnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDnsUpdateStyleOk() (*string, bool) {
	if o == nil || IsNil(o.DnsUpdateStyle) {
		return nil, false
	}
	return o.DnsUpdateStyle, true
}

// HasDnsUpdateStyle returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDnsUpdateStyle() bool {
	if o != nil && !IsNil(o.DnsUpdateStyle) {
		return true
	}

	return false
}

// SetDnsUpdateStyle gets a reference to the given string and assigns it to the DnsUpdateStyle field.
func (o *MemberDhcpproperties) SetDnsUpdateStyle(v string) {
	o.DnsUpdateStyle = &v
}

// GetDynamicHosts returns the DynamicHosts field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetDynamicHosts() int64 {
	if o == nil || IsNil(o.DynamicHosts) {
		var ret int64
		return ret
	}
	return *o.DynamicHosts
}

// GetDynamicHostsOk returns a tuple with the DynamicHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetDynamicHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.DynamicHosts) {
		return nil, false
	}
	return o.DynamicHosts, true
}

// HasDynamicHosts returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasDynamicHosts() bool {
	if o != nil && !IsNil(o.DynamicHosts) {
		return true
	}

	return false
}

// SetDynamicHosts gets a reference to the given int64 and assigns it to the DynamicHosts field.
func (o *MemberDhcpproperties) SetDynamicHosts(v int64) {
	o.DynamicHosts = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *MemberDhcpproperties) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *MemberDhcpproperties) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcp returns the EnableDhcp field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDhcp() bool {
	if o == nil || IsNil(o.EnableDhcp) {
		var ret bool
		return ret
	}
	return *o.EnableDhcp
}

// GetEnableDhcpOk returns a tuple with the EnableDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcp) {
		return nil, false
	}
	return o.EnableDhcp, true
}

// HasEnableDhcp returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDhcp() bool {
	if o != nil && !IsNil(o.EnableDhcp) {
		return true
	}

	return false
}

// SetEnableDhcp gets a reference to the given bool and assigns it to the EnableDhcp field.
func (o *MemberDhcpproperties) SetEnableDhcp(v bool) {
	o.EnableDhcp = &v
}

// GetEnableDhcpOnIpv6Lan2 returns the EnableDhcpOnIpv6Lan2 field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDhcpOnIpv6Lan2() bool {
	if o == nil || IsNil(o.EnableDhcpOnIpv6Lan2) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpOnIpv6Lan2
}

// GetEnableDhcpOnIpv6Lan2Ok returns a tuple with the EnableDhcpOnIpv6Lan2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDhcpOnIpv6Lan2Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpOnIpv6Lan2) {
		return nil, false
	}
	return o.EnableDhcpOnIpv6Lan2, true
}

// HasEnableDhcpOnIpv6Lan2 returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDhcpOnIpv6Lan2() bool {
	if o != nil && !IsNil(o.EnableDhcpOnIpv6Lan2) {
		return true
	}

	return false
}

// SetEnableDhcpOnIpv6Lan2 gets a reference to the given bool and assigns it to the EnableDhcpOnIpv6Lan2 field.
func (o *MemberDhcpproperties) SetEnableDhcpOnIpv6Lan2(v bool) {
	o.EnableDhcpOnIpv6Lan2 = &v
}

// GetEnableDhcpOnLan2 returns the EnableDhcpOnLan2 field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDhcpOnLan2() bool {
	if o == nil || IsNil(o.EnableDhcpOnLan2) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpOnLan2
}

// GetEnableDhcpOnLan2Ok returns a tuple with the EnableDhcpOnLan2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDhcpOnLan2Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpOnLan2) {
		return nil, false
	}
	return o.EnableDhcpOnLan2, true
}

// HasEnableDhcpOnLan2 returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDhcpOnLan2() bool {
	if o != nil && !IsNil(o.EnableDhcpOnLan2) {
		return true
	}

	return false
}

// SetEnableDhcpOnLan2 gets a reference to the given bool and assigns it to the EnableDhcpOnLan2 field.
func (o *MemberDhcpproperties) SetEnableDhcpOnLan2(v bool) {
	o.EnableDhcpOnLan2 = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *MemberDhcpproperties) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableDhcpv6Service returns the EnableDhcpv6Service field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableDhcpv6Service() bool {
	if o == nil || IsNil(o.EnableDhcpv6Service) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpv6Service
}

// GetEnableDhcpv6ServiceOk returns a tuple with the EnableDhcpv6Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableDhcpv6ServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpv6Service) {
		return nil, false
	}
	return o.EnableDhcpv6Service, true
}

// HasEnableDhcpv6Service returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableDhcpv6Service() bool {
	if o != nil && !IsNil(o.EnableDhcpv6Service) {
		return true
	}

	return false
}

// SetEnableDhcpv6Service gets a reference to the given bool and assigns it to the EnableDhcpv6Service field.
func (o *MemberDhcpproperties) SetEnableDhcpv6Service(v bool) {
	o.EnableDhcpv6Service = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *MemberDhcpproperties) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnableFingerprint returns the EnableFingerprint field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableFingerprint() bool {
	if o == nil || IsNil(o.EnableFingerprint) {
		var ret bool
		return ret
	}
	return *o.EnableFingerprint
}

// GetEnableFingerprintOk returns a tuple with the EnableFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableFingerprintOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFingerprint) {
		return nil, false
	}
	return o.EnableFingerprint, true
}

// HasEnableFingerprint returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableFingerprint() bool {
	if o != nil && !IsNil(o.EnableFingerprint) {
		return true
	}

	return false
}

// SetEnableFingerprint gets a reference to the given bool and assigns it to the EnableFingerprint field.
func (o *MemberDhcpproperties) SetEnableFingerprint(v bool) {
	o.EnableFingerprint = &v
}

// GetEnableGssTsig returns the EnableGssTsig field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableGssTsig() bool {
	if o == nil || IsNil(o.EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.EnableGssTsig
}

// GetEnableGssTsigOk returns a tuple with the EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGssTsig) {
		return nil, false
	}
	return o.EnableGssTsig, true
}

// HasEnableGssTsig returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableGssTsig() bool {
	if o != nil && !IsNil(o.EnableGssTsig) {
		return true
	}

	return false
}

// SetEnableGssTsig gets a reference to the given bool and assigns it to the EnableGssTsig field.
func (o *MemberDhcpproperties) SetEnableGssTsig(v bool) {
	o.EnableGssTsig = &v
}

// GetEnableHostnameRewrite returns the EnableHostnameRewrite field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableHostnameRewrite() bool {
	if o == nil || IsNil(o.EnableHostnameRewrite) {
		var ret bool
		return ret
	}
	return *o.EnableHostnameRewrite
}

// GetEnableHostnameRewriteOk returns a tuple with the EnableHostnameRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableHostnameRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHostnameRewrite) {
		return nil, false
	}
	return o.EnableHostnameRewrite, true
}

// HasEnableHostnameRewrite returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableHostnameRewrite() bool {
	if o != nil && !IsNil(o.EnableHostnameRewrite) {
		return true
	}

	return false
}

// SetEnableHostnameRewrite gets a reference to the given bool and assigns it to the EnableHostnameRewrite field.
func (o *MemberDhcpproperties) SetEnableHostnameRewrite(v bool) {
	o.EnableHostnameRewrite = &v
}

// GetEnableLeasequery returns the EnableLeasequery field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableLeasequery() bool {
	if o == nil || IsNil(o.EnableLeasequery) {
		var ret bool
		return ret
	}
	return *o.EnableLeasequery
}

// GetEnableLeasequeryOk returns a tuple with the EnableLeasequery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableLeasequeryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLeasequery) {
		return nil, false
	}
	return o.EnableLeasequery, true
}

// HasEnableLeasequery returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableLeasequery() bool {
	if o != nil && !IsNil(o.EnableLeasequery) {
		return true
	}

	return false
}

// SetEnableLeasequery gets a reference to the given bool and assigns it to the EnableLeasequery field.
func (o *MemberDhcpproperties) SetEnableLeasequery(v bool) {
	o.EnableLeasequery = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *MemberDhcpproperties) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *MemberDhcpproperties) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetGssTsigKeys returns the GssTsigKeys field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetGssTsigKeys() []string {
	if o == nil || IsNil(o.GssTsigKeys) {
		var ret []string
		return ret
	}
	return o.GssTsigKeys
}

// GetGssTsigKeysOk returns a tuple with the GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetGssTsigKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.GssTsigKeys) {
		return nil, false
	}
	return o.GssTsigKeys, true
}

// HasGssTsigKeys returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasGssTsigKeys() bool {
	if o != nil && !IsNil(o.GssTsigKeys) {
		return true
	}

	return false
}

// SetGssTsigKeys gets a reference to the given []string and assigns it to the GssTsigKeys field.
func (o *MemberDhcpproperties) SetGssTsigKeys(v []string) {
	o.GssTsigKeys = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *MemberDhcpproperties) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *MemberDhcpproperties) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *MemberDhcpproperties) SetHostName(v string) {
	o.HostName = &v
}

// GetHostnameRewritePolicy returns the HostnameRewritePolicy field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetHostnameRewritePolicy() string {
	if o == nil || IsNil(o.HostnameRewritePolicy) {
		var ret string
		return ret
	}
	return *o.HostnameRewritePolicy
}

// GetHostnameRewritePolicyOk returns a tuple with the HostnameRewritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetHostnameRewritePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewritePolicy) {
		return nil, false
	}
	return o.HostnameRewritePolicy, true
}

// HasHostnameRewritePolicy returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasHostnameRewritePolicy() bool {
	if o != nil && !IsNil(o.HostnameRewritePolicy) {
		return true
	}

	return false
}

// SetHostnameRewritePolicy gets a reference to the given string and assigns it to the HostnameRewritePolicy field.
func (o *MemberDhcpproperties) SetHostnameRewritePolicy(v string) {
	o.HostnameRewritePolicy = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *MemberDhcpproperties) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIgnoreId returns the IgnoreId field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIgnoreId() string {
	if o == nil || IsNil(o.IgnoreId) {
		var ret string
		return ret
	}
	return *o.IgnoreId
}

// GetIgnoreIdOk returns a tuple with the IgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIgnoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreId) {
		return nil, false
	}
	return o.IgnoreId, true
}

// HasIgnoreId returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIgnoreId() bool {
	if o != nil && !IsNil(o.IgnoreId) {
		return true
	}

	return false
}

// SetIgnoreId gets a reference to the given string and assigns it to the IgnoreId field.
func (o *MemberDhcpproperties) SetIgnoreId(v string) {
	o.IgnoreId = &v
}

// GetIgnoreMacAddresses returns the IgnoreMacAddresses field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIgnoreMacAddresses() []string {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		var ret []string
		return ret
	}
	return o.IgnoreMacAddresses
}

// GetIgnoreMacAddressesOk returns a tuple with the IgnoreMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIgnoreMacAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		return nil, false
	}
	return o.IgnoreMacAddresses, true
}

// HasIgnoreMacAddresses returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIgnoreMacAddresses() bool {
	if o != nil && !IsNil(o.IgnoreMacAddresses) {
		return true
	}

	return false
}

// SetIgnoreMacAddresses gets a reference to the given []string and assigns it to the IgnoreMacAddresses field.
func (o *MemberDhcpproperties) SetIgnoreMacAddresses(v []string) {
	o.IgnoreMacAddresses = v
}

// GetImmediateFaConfiguration returns the ImmediateFaConfiguration field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetImmediateFaConfiguration() bool {
	if o == nil || IsNil(o.ImmediateFaConfiguration) {
		var ret bool
		return ret
	}
	return *o.ImmediateFaConfiguration
}

// GetImmediateFaConfigurationOk returns a tuple with the ImmediateFaConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetImmediateFaConfigurationOk() (*bool, bool) {
	if o == nil || IsNil(o.ImmediateFaConfiguration) {
		return nil, false
	}
	return o.ImmediateFaConfiguration, true
}

// HasImmediateFaConfiguration returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasImmediateFaConfiguration() bool {
	if o != nil && !IsNil(o.ImmediateFaConfiguration) {
		return true
	}

	return false
}

// SetImmediateFaConfiguration gets a reference to the given bool and assigns it to the ImmediateFaConfiguration field.
func (o *MemberDhcpproperties) SetImmediateFaConfiguration(v bool) {
	o.ImmediateFaConfiguration = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *MemberDhcpproperties) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIpv6DdnsDomainname returns the Ipv6DdnsDomainname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DdnsDomainname() string {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.Ipv6DdnsDomainname
}

// GetIpv6DdnsDomainnameOk returns a tuple with the Ipv6DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DdnsDomainname) {
		return nil, false
	}
	return o.Ipv6DdnsDomainname, true
}

// HasIpv6DdnsDomainname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DdnsDomainname() bool {
	if o != nil && !IsNil(o.Ipv6DdnsDomainname) {
		return true
	}

	return false
}

// SetIpv6DdnsDomainname gets a reference to the given string and assigns it to the Ipv6DdnsDomainname field.
func (o *MemberDhcpproperties) SetIpv6DdnsDomainname(v string) {
	o.Ipv6DdnsDomainname = &v
}

// GetIpv6DdnsEnableOptionFqdn returns the Ipv6DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.Ipv6DdnsEnableOptionFqdn
}

// GetIpv6DdnsEnableOptionFqdnOk returns a tuple with the Ipv6DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.Ipv6DdnsEnableOptionFqdn, true
}

// HasIpv6DdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetIpv6DdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the Ipv6DdnsEnableOptionFqdn field.
func (o *MemberDhcpproperties) SetIpv6DdnsEnableOptionFqdn(v bool) {
	o.Ipv6DdnsEnableOptionFqdn = &v
}

// GetIpv6DdnsHostname returns the Ipv6DdnsHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DdnsHostname() string {
	if o == nil || IsNil(o.Ipv6DdnsHostname) {
		var ret string
		return ret
	}
	return *o.Ipv6DdnsHostname
}

// GetIpv6DdnsHostnameOk returns a tuple with the Ipv6DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DdnsHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DdnsHostname) {
		return nil, false
	}
	return o.Ipv6DdnsHostname, true
}

// HasIpv6DdnsHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DdnsHostname() bool {
	if o != nil && !IsNil(o.Ipv6DdnsHostname) {
		return true
	}

	return false
}

// SetIpv6DdnsHostname gets a reference to the given string and assigns it to the Ipv6DdnsHostname field.
func (o *MemberDhcpproperties) SetIpv6DdnsHostname(v string) {
	o.Ipv6DdnsHostname = &v
}

// GetIpv6DdnsServerAlwaysUpdates returns the Ipv6DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.Ipv6DdnsServerAlwaysUpdates
}

// GetIpv6DdnsServerAlwaysUpdatesOk returns a tuple with the Ipv6DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.Ipv6DdnsServerAlwaysUpdates, true
}

// HasIpv6DdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetIpv6DdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the Ipv6DdnsServerAlwaysUpdates field.
func (o *MemberDhcpproperties) SetIpv6DdnsServerAlwaysUpdates(v bool) {
	o.Ipv6DdnsServerAlwaysUpdates = &v
}

// GetIpv6DdnsTtl returns the Ipv6DdnsTtl field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DdnsTtl() int64 {
	if o == nil || IsNil(o.Ipv6DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.Ipv6DdnsTtl
}

// GetIpv6DdnsTtlOk returns a tuple with the Ipv6DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6DdnsTtl) {
		return nil, false
	}
	return o.Ipv6DdnsTtl, true
}

// HasIpv6DdnsTtl returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DdnsTtl() bool {
	if o != nil && !IsNil(o.Ipv6DdnsTtl) {
		return true
	}

	return false
}

// SetIpv6DdnsTtl gets a reference to the given int64 and assigns it to the Ipv6DdnsTtl field.
func (o *MemberDhcpproperties) SetIpv6DdnsTtl(v int64) {
	o.Ipv6DdnsTtl = &v
}

// GetIpv6DnsUpdateStyle returns the Ipv6DnsUpdateStyle field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DnsUpdateStyle() string {
	if o == nil || IsNil(o.Ipv6DnsUpdateStyle) {
		var ret string
		return ret
	}
	return *o.Ipv6DnsUpdateStyle
}

// GetIpv6DnsUpdateStyleOk returns a tuple with the Ipv6DnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DnsUpdateStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DnsUpdateStyle) {
		return nil, false
	}
	return o.Ipv6DnsUpdateStyle, true
}

// HasIpv6DnsUpdateStyle returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DnsUpdateStyle() bool {
	if o != nil && !IsNil(o.Ipv6DnsUpdateStyle) {
		return true
	}

	return false
}

// SetIpv6DnsUpdateStyle gets a reference to the given string and assigns it to the Ipv6DnsUpdateStyle field.
func (o *MemberDhcpproperties) SetIpv6DnsUpdateStyle(v string) {
	o.Ipv6DnsUpdateStyle = &v
}

// GetIpv6DomainName returns the Ipv6DomainName field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DomainName() string {
	if o == nil || IsNil(o.Ipv6DomainName) {
		var ret string
		return ret
	}
	return *o.Ipv6DomainName
}

// GetIpv6DomainNameOk returns a tuple with the Ipv6DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6DomainName) {
		return nil, false
	}
	return o.Ipv6DomainName, true
}

// HasIpv6DomainName returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DomainName() bool {
	if o != nil && !IsNil(o.Ipv6DomainName) {
		return true
	}

	return false
}

// SetIpv6DomainName gets a reference to the given string and assigns it to the Ipv6DomainName field.
func (o *MemberDhcpproperties) SetIpv6DomainName(v string) {
	o.Ipv6DomainName = &v
}

// GetIpv6DomainNameServers returns the Ipv6DomainNameServers field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6DomainNameServers() []string {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		var ret []string
		return ret
	}
	return o.Ipv6DomainNameServers
}

// GetIpv6DomainNameServersOk returns a tuple with the Ipv6DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6DomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6DomainNameServers) {
		return nil, false
	}
	return o.Ipv6DomainNameServers, true
}

// HasIpv6DomainNameServers returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6DomainNameServers() bool {
	if o != nil && !IsNil(o.Ipv6DomainNameServers) {
		return true
	}

	return false
}

// SetIpv6DomainNameServers gets a reference to the given []string and assigns it to the Ipv6DomainNameServers field.
func (o *MemberDhcpproperties) SetIpv6DomainNameServers(v []string) {
	o.Ipv6DomainNameServers = v
}

// GetIpv6EnableDdns returns the Ipv6EnableDdns field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6EnableDdns() bool {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableDdns
}

// GetIpv6EnableDdnsOk returns a tuple with the Ipv6EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6EnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableDdns) {
		return nil, false
	}
	return o.Ipv6EnableDdns, true
}

// HasIpv6EnableDdns returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6EnableDdns() bool {
	if o != nil && !IsNil(o.Ipv6EnableDdns) {
		return true
	}

	return false
}

// SetIpv6EnableDdns gets a reference to the given bool and assigns it to the Ipv6EnableDdns field.
func (o *MemberDhcpproperties) SetIpv6EnableDdns(v bool) {
	o.Ipv6EnableDdns = &v
}

// GetIpv6EnableGssTsig returns the Ipv6EnableGssTsig field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6EnableGssTsig() bool {
	if o == nil || IsNil(o.Ipv6EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableGssTsig
}

// GetIpv6EnableGssTsigOk returns a tuple with the Ipv6EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6EnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableGssTsig) {
		return nil, false
	}
	return o.Ipv6EnableGssTsig, true
}

// HasIpv6EnableGssTsig returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6EnableGssTsig() bool {
	if o != nil && !IsNil(o.Ipv6EnableGssTsig) {
		return true
	}

	return false
}

// SetIpv6EnableGssTsig gets a reference to the given bool and assigns it to the Ipv6EnableGssTsig field.
func (o *MemberDhcpproperties) SetIpv6EnableGssTsig(v bool) {
	o.Ipv6EnableGssTsig = &v
}

// GetIpv6EnableLeaseScavenging returns the Ipv6EnableLeaseScavenging field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6EnableLeaseScavenging() bool {
	if o == nil || IsNil(o.Ipv6EnableLeaseScavenging) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableLeaseScavenging
}

// GetIpv6EnableLeaseScavengingOk returns a tuple with the Ipv6EnableLeaseScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6EnableLeaseScavengingOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableLeaseScavenging) {
		return nil, false
	}
	return o.Ipv6EnableLeaseScavenging, true
}

// HasIpv6EnableLeaseScavenging returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6EnableLeaseScavenging() bool {
	if o != nil && !IsNil(o.Ipv6EnableLeaseScavenging) {
		return true
	}

	return false
}

// SetIpv6EnableLeaseScavenging gets a reference to the given bool and assigns it to the Ipv6EnableLeaseScavenging field.
func (o *MemberDhcpproperties) SetIpv6EnableLeaseScavenging(v bool) {
	o.Ipv6EnableLeaseScavenging = &v
}

// GetIpv6EnableRetryUpdates returns the Ipv6EnableRetryUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6EnableRetryUpdates() bool {
	if o == nil || IsNil(o.Ipv6EnableRetryUpdates) {
		var ret bool
		return ret
	}
	return *o.Ipv6EnableRetryUpdates
}

// GetIpv6EnableRetryUpdatesOk returns a tuple with the Ipv6EnableRetryUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6EnableRetryUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6EnableRetryUpdates) {
		return nil, false
	}
	return o.Ipv6EnableRetryUpdates, true
}

// HasIpv6EnableRetryUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6EnableRetryUpdates() bool {
	if o != nil && !IsNil(o.Ipv6EnableRetryUpdates) {
		return true
	}

	return false
}

// SetIpv6EnableRetryUpdates gets a reference to the given bool and assigns it to the Ipv6EnableRetryUpdates field.
func (o *MemberDhcpproperties) SetIpv6EnableRetryUpdates(v bool) {
	o.Ipv6EnableRetryUpdates = &v
}

// GetIpv6GenerateHostname returns the Ipv6GenerateHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6GenerateHostname() bool {
	if o == nil || IsNil(o.Ipv6GenerateHostname) {
		var ret bool
		return ret
	}
	return *o.Ipv6GenerateHostname
}

// GetIpv6GenerateHostnameOk returns a tuple with the Ipv6GenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6GenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6GenerateHostname) {
		return nil, false
	}
	return o.Ipv6GenerateHostname, true
}

// HasIpv6GenerateHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6GenerateHostname() bool {
	if o != nil && !IsNil(o.Ipv6GenerateHostname) {
		return true
	}

	return false
}

// SetIpv6GenerateHostname gets a reference to the given bool and assigns it to the Ipv6GenerateHostname field.
func (o *MemberDhcpproperties) SetIpv6GenerateHostname(v bool) {
	o.Ipv6GenerateHostname = &v
}

// GetIpv6GssTsigKeys returns the Ipv6GssTsigKeys field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6GssTsigKeys() []string {
	if o == nil || IsNil(o.Ipv6GssTsigKeys) {
		var ret []string
		return ret
	}
	return o.Ipv6GssTsigKeys
}

// GetIpv6GssTsigKeysOk returns a tuple with the Ipv6GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6GssTsigKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6GssTsigKeys) {
		return nil, false
	}
	return o.Ipv6GssTsigKeys, true
}

// HasIpv6GssTsigKeys returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6GssTsigKeys() bool {
	if o != nil && !IsNil(o.Ipv6GssTsigKeys) {
		return true
	}

	return false
}

// SetIpv6GssTsigKeys gets a reference to the given []string and assigns it to the Ipv6GssTsigKeys field.
func (o *MemberDhcpproperties) SetIpv6GssTsigKeys(v []string) {
	o.Ipv6GssTsigKeys = v
}

// GetIpv6KdcServer returns the Ipv6KdcServer field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6KdcServer() string {
	if o == nil || IsNil(o.Ipv6KdcServer) {
		var ret string
		return ret
	}
	return *o.Ipv6KdcServer
}

// GetIpv6KdcServerOk returns a tuple with the Ipv6KdcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6KdcServerOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6KdcServer) {
		return nil, false
	}
	return o.Ipv6KdcServer, true
}

// HasIpv6KdcServer returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6KdcServer() bool {
	if o != nil && !IsNil(o.Ipv6KdcServer) {
		return true
	}

	return false
}

// SetIpv6KdcServer gets a reference to the given string and assigns it to the Ipv6KdcServer field.
func (o *MemberDhcpproperties) SetIpv6KdcServer(v string) {
	o.Ipv6KdcServer = &v
}

// GetIpv6LeaseScavengingTime returns the Ipv6LeaseScavengingTime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6LeaseScavengingTime() int64 {
	if o == nil || IsNil(o.Ipv6LeaseScavengingTime) {
		var ret int64
		return ret
	}
	return *o.Ipv6LeaseScavengingTime
}

// GetIpv6LeaseScavengingTimeOk returns a tuple with the Ipv6LeaseScavengingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6LeaseScavengingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6LeaseScavengingTime) {
		return nil, false
	}
	return o.Ipv6LeaseScavengingTime, true
}

// HasIpv6LeaseScavengingTime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6LeaseScavengingTime() bool {
	if o != nil && !IsNil(o.Ipv6LeaseScavengingTime) {
		return true
	}

	return false
}

// SetIpv6LeaseScavengingTime gets a reference to the given int64 and assigns it to the Ipv6LeaseScavengingTime field.
func (o *MemberDhcpproperties) SetIpv6LeaseScavengingTime(v int64) {
	o.Ipv6LeaseScavengingTime = &v
}

// GetIpv6MicrosoftCodePage returns the Ipv6MicrosoftCodePage field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6MicrosoftCodePage() string {
	if o == nil || IsNil(o.Ipv6MicrosoftCodePage) {
		var ret string
		return ret
	}
	return *o.Ipv6MicrosoftCodePage
}

// GetIpv6MicrosoftCodePageOk returns a tuple with the Ipv6MicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6MicrosoftCodePageOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6MicrosoftCodePage) {
		return nil, false
	}
	return o.Ipv6MicrosoftCodePage, true
}

// HasIpv6MicrosoftCodePage returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6MicrosoftCodePage() bool {
	if o != nil && !IsNil(o.Ipv6MicrosoftCodePage) {
		return true
	}

	return false
}

// SetIpv6MicrosoftCodePage gets a reference to the given string and assigns it to the Ipv6MicrosoftCodePage field.
func (o *MemberDhcpproperties) SetIpv6MicrosoftCodePage(v string) {
	o.Ipv6MicrosoftCodePage = &v
}

// GetIpv6Options returns the Ipv6Options field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6Options() []MemberDhcppropertiesIpv6Options {
	if o == nil || IsNil(o.Ipv6Options) {
		var ret []MemberDhcppropertiesIpv6Options
		return ret
	}
	return o.Ipv6Options
}

// GetIpv6OptionsOk returns a tuple with the Ipv6Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6OptionsOk() ([]MemberDhcppropertiesIpv6Options, bool) {
	if o == nil || IsNil(o.Ipv6Options) {
		return nil, false
	}
	return o.Ipv6Options, true
}

// HasIpv6Options returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6Options() bool {
	if o != nil && !IsNil(o.Ipv6Options) {
		return true
	}

	return false
}

// SetIpv6Options gets a reference to the given []MemberDhcppropertiesIpv6Options and assigns it to the Ipv6Options field.
func (o *MemberDhcpproperties) SetIpv6Options(v []MemberDhcppropertiesIpv6Options) {
	o.Ipv6Options = v
}

// GetIpv6RecycleLeases returns the Ipv6RecycleLeases field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6RecycleLeases() bool {
	if o == nil || IsNil(o.Ipv6RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.Ipv6RecycleLeases
}

// GetIpv6RecycleLeasesOk returns a tuple with the Ipv6RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6RecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6RecycleLeases) {
		return nil, false
	}
	return o.Ipv6RecycleLeases, true
}

// HasIpv6RecycleLeases returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6RecycleLeases() bool {
	if o != nil && !IsNil(o.Ipv6RecycleLeases) {
		return true
	}

	return false
}

// SetIpv6RecycleLeases gets a reference to the given bool and assigns it to the Ipv6RecycleLeases field.
func (o *MemberDhcpproperties) SetIpv6RecycleLeases(v bool) {
	o.Ipv6RecycleLeases = &v
}

// GetIpv6RememberExpiredClientAssociation returns the Ipv6RememberExpiredClientAssociation field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6RememberExpiredClientAssociation() bool {
	if o == nil || IsNil(o.Ipv6RememberExpiredClientAssociation) {
		var ret bool
		return ret
	}
	return *o.Ipv6RememberExpiredClientAssociation
}

// GetIpv6RememberExpiredClientAssociationOk returns a tuple with the Ipv6RememberExpiredClientAssociation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6RememberExpiredClientAssociationOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6RememberExpiredClientAssociation) {
		return nil, false
	}
	return o.Ipv6RememberExpiredClientAssociation, true
}

// HasIpv6RememberExpiredClientAssociation returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6RememberExpiredClientAssociation() bool {
	if o != nil && !IsNil(o.Ipv6RememberExpiredClientAssociation) {
		return true
	}

	return false
}

// SetIpv6RememberExpiredClientAssociation gets a reference to the given bool and assigns it to the Ipv6RememberExpiredClientAssociation field.
func (o *MemberDhcpproperties) SetIpv6RememberExpiredClientAssociation(v bool) {
	o.Ipv6RememberExpiredClientAssociation = &v
}

// GetIpv6RetryUpdatesInterval returns the Ipv6RetryUpdatesInterval field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6RetryUpdatesInterval() int64 {
	if o == nil || IsNil(o.Ipv6RetryUpdatesInterval) {
		var ret int64
		return ret
	}
	return *o.Ipv6RetryUpdatesInterval
}

// GetIpv6RetryUpdatesIntervalOk returns a tuple with the Ipv6RetryUpdatesInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6RetryUpdatesIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6RetryUpdatesInterval) {
		return nil, false
	}
	return o.Ipv6RetryUpdatesInterval, true
}

// HasIpv6RetryUpdatesInterval returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6RetryUpdatesInterval() bool {
	if o != nil && !IsNil(o.Ipv6RetryUpdatesInterval) {
		return true
	}

	return false
}

// SetIpv6RetryUpdatesInterval gets a reference to the given int64 and assigns it to the Ipv6RetryUpdatesInterval field.
func (o *MemberDhcpproperties) SetIpv6RetryUpdatesInterval(v int64) {
	o.Ipv6RetryUpdatesInterval = &v
}

// GetIpv6ServerDuid returns the Ipv6ServerDuid field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6ServerDuid() string {
	if o == nil || IsNil(o.Ipv6ServerDuid) {
		var ret string
		return ret
	}
	return *o.Ipv6ServerDuid
}

// GetIpv6ServerDuidOk returns a tuple with the Ipv6ServerDuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6ServerDuidOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6ServerDuid) {
		return nil, false
	}
	return o.Ipv6ServerDuid, true
}

// HasIpv6ServerDuid returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6ServerDuid() bool {
	if o != nil && !IsNil(o.Ipv6ServerDuid) {
		return true
	}

	return false
}

// SetIpv6ServerDuid gets a reference to the given string and assigns it to the Ipv6ServerDuid field.
func (o *MemberDhcpproperties) SetIpv6ServerDuid(v string) {
	o.Ipv6ServerDuid = &v
}

// GetIpv6UpdateDnsOnLeaseRenewal returns the Ipv6UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6UpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.Ipv6UpdateDnsOnLeaseRenewal
}

// GetIpv6UpdateDnsOnLeaseRenewalOk returns a tuple with the Ipv6UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6UpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.Ipv6UpdateDnsOnLeaseRenewal, true
}

// HasIpv6UpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6UpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetIpv6UpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the Ipv6UpdateDnsOnLeaseRenewal field.
func (o *MemberDhcpproperties) SetIpv6UpdateDnsOnLeaseRenewal(v bool) {
	o.Ipv6UpdateDnsOnLeaseRenewal = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *MemberDhcpproperties) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetKdcServer returns the KdcServer field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetKdcServer() string {
	if o == nil || IsNil(o.KdcServer) {
		var ret string
		return ret
	}
	return *o.KdcServer
}

// GetKdcServerOk returns a tuple with the KdcServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetKdcServerOk() (*string, bool) {
	if o == nil || IsNil(o.KdcServer) {
		return nil, false
	}
	return o.KdcServer, true
}

// HasKdcServer returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasKdcServer() bool {
	if o != nil && !IsNil(o.KdcServer) {
		return true
	}

	return false
}

// SetKdcServer gets a reference to the given string and assigns it to the KdcServer field.
func (o *MemberDhcpproperties) SetKdcServer(v string) {
	o.KdcServer = &v
}

// GetLeasePerClientSettings returns the LeasePerClientSettings field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLeasePerClientSettings() string {
	if o == nil || IsNil(o.LeasePerClientSettings) {
		var ret string
		return ret
	}
	return *o.LeasePerClientSettings
}

// GetLeasePerClientSettingsOk returns a tuple with the LeasePerClientSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLeasePerClientSettingsOk() (*string, bool) {
	if o == nil || IsNil(o.LeasePerClientSettings) {
		return nil, false
	}
	return o.LeasePerClientSettings, true
}

// HasLeasePerClientSettings returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLeasePerClientSettings() bool {
	if o != nil && !IsNil(o.LeasePerClientSettings) {
		return true
	}

	return false
}

// SetLeasePerClientSettings gets a reference to the given string and assigns it to the LeasePerClientSettings field.
func (o *MemberDhcpproperties) SetLeasePerClientSettings(v string) {
	o.LeasePerClientSettings = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLeaseScavengeTime() int64 {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret int64
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLeaseScavengeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given int64 and assigns it to the LeaseScavengeTime field.
func (o *MemberDhcpproperties) SetLeaseScavengeTime(v int64) {
	o.LeaseScavengeTime = &v
}

// GetLogLeaseEvents returns the LogLeaseEvents field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLogLeaseEvents() bool {
	if o == nil || IsNil(o.LogLeaseEvents) {
		var ret bool
		return ret
	}
	return *o.LogLeaseEvents
}

// GetLogLeaseEventsOk returns a tuple with the LogLeaseEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLogLeaseEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.LogLeaseEvents) {
		return nil, false
	}
	return o.LogLeaseEvents, true
}

// HasLogLeaseEvents returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLogLeaseEvents() bool {
	if o != nil && !IsNil(o.LogLeaseEvents) {
		return true
	}

	return false
}

// SetLogLeaseEvents gets a reference to the given bool and assigns it to the LogLeaseEvents field.
func (o *MemberDhcpproperties) SetLogLeaseEvents(v bool) {
	o.LogLeaseEvents = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLogicFilterRules() []MemberDhcppropertiesLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []MemberDhcppropertiesLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLogicFilterRulesOk() ([]MemberDhcppropertiesLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []MemberDhcppropertiesLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *MemberDhcpproperties) SetLogicFilterRules(v []MemberDhcppropertiesLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *MemberDhcpproperties) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *MemberDhcpproperties) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMicrosoftCodePage returns the MicrosoftCodePage field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetMicrosoftCodePage() string {
	if o == nil || IsNil(o.MicrosoftCodePage) {
		var ret string
		return ret
	}
	return *o.MicrosoftCodePage
}

// GetMicrosoftCodePageOk returns a tuple with the MicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetMicrosoftCodePageOk() (*string, bool) {
	if o == nil || IsNil(o.MicrosoftCodePage) {
		return nil, false
	}
	return o.MicrosoftCodePage, true
}

// HasMicrosoftCodePage returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasMicrosoftCodePage() bool {
	if o != nil && !IsNil(o.MicrosoftCodePage) {
		return true
	}

	return false
}

// SetMicrosoftCodePage gets a reference to the given string and assigns it to the MicrosoftCodePage field.
func (o *MemberDhcpproperties) SetMicrosoftCodePage(v string) {
	o.MicrosoftCodePage = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *MemberDhcpproperties) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOption60MatchRules returns the Option60MatchRules field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetOption60MatchRules() []MemberDhcppropertiesOption60MatchRules {
	if o == nil || IsNil(o.Option60MatchRules) {
		var ret []MemberDhcppropertiesOption60MatchRules
		return ret
	}
	return o.Option60MatchRules
}

// GetOption60MatchRulesOk returns a tuple with the Option60MatchRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetOption60MatchRulesOk() ([]MemberDhcppropertiesOption60MatchRules, bool) {
	if o == nil || IsNil(o.Option60MatchRules) {
		return nil, false
	}
	return o.Option60MatchRules, true
}

// HasOption60MatchRules returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasOption60MatchRules() bool {
	if o != nil && !IsNil(o.Option60MatchRules) {
		return true
	}

	return false
}

// SetOption60MatchRules gets a reference to the given []MemberDhcppropertiesOption60MatchRules and assigns it to the Option60MatchRules field.
func (o *MemberDhcpproperties) SetOption60MatchRules(v []MemberDhcppropertiesOption60MatchRules) {
	o.Option60MatchRules = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetOptions() []MemberDhcppropertiesOptions {
	if o == nil || IsNil(o.Options) {
		var ret []MemberDhcppropertiesOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetOptionsOk() ([]MemberDhcppropertiesOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []MemberDhcppropertiesOptions and assigns it to the Options field.
func (o *MemberDhcpproperties) SetOptions(v []MemberDhcppropertiesOptions) {
	o.Options = v
}

// GetPingCount returns the PingCount field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetPingCount() int64 {
	if o == nil || IsNil(o.PingCount) {
		var ret int64
		return ret
	}
	return *o.PingCount
}

// GetPingCountOk returns a tuple with the PingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetPingCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PingCount) {
		return nil, false
	}
	return o.PingCount, true
}

// HasPingCount returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasPingCount() bool {
	if o != nil && !IsNil(o.PingCount) {
		return true
	}

	return false
}

// SetPingCount gets a reference to the given int64 and assigns it to the PingCount field.
func (o *MemberDhcpproperties) SetPingCount(v int64) {
	o.PingCount = &v
}

// GetPingTimeout returns the PingTimeout field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetPingTimeout() int64 {
	if o == nil || IsNil(o.PingTimeout) {
		var ret int64
		return ret
	}
	return *o.PingTimeout
}

// GetPingTimeoutOk returns a tuple with the PingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetPingTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.PingTimeout) {
		return nil, false
	}
	return o.PingTimeout, true
}

// HasPingTimeout returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasPingTimeout() bool {
	if o != nil && !IsNil(o.PingTimeout) {
		return true
	}

	return false
}

// SetPingTimeout gets a reference to the given int64 and assigns it to the PingTimeout field.
func (o *MemberDhcpproperties) SetPingTimeout(v int64) {
	o.PingTimeout = &v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *MemberDhcpproperties) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetPrefixLengthMode returns the PrefixLengthMode field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetPrefixLengthMode() string {
	if o == nil || IsNil(o.PrefixLengthMode) {
		var ret string
		return ret
	}
	return *o.PrefixLengthMode
}

// GetPrefixLengthModeOk returns a tuple with the PrefixLengthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetPrefixLengthModeOk() (*string, bool) {
	if o == nil || IsNil(o.PrefixLengthMode) {
		return nil, false
	}
	return o.PrefixLengthMode, true
}

// HasPrefixLengthMode returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasPrefixLengthMode() bool {
	if o != nil && !IsNil(o.PrefixLengthMode) {
		return true
	}

	return false
}

// SetPrefixLengthMode gets a reference to the given string and assigns it to the PrefixLengthMode field.
func (o *MemberDhcpproperties) SetPrefixLengthMode(v string) {
	o.PrefixLengthMode = &v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *MemberDhcpproperties) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *MemberDhcpproperties) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRetryDdnsUpdates returns the RetryDdnsUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetRetryDdnsUpdates() bool {
	if o == nil || IsNil(o.RetryDdnsUpdates) {
		var ret bool
		return ret
	}
	return *o.RetryDdnsUpdates
}

// GetRetryDdnsUpdatesOk returns a tuple with the RetryDdnsUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetRetryDdnsUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.RetryDdnsUpdates) {
		return nil, false
	}
	return o.RetryDdnsUpdates, true
}

// HasRetryDdnsUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasRetryDdnsUpdates() bool {
	if o != nil && !IsNil(o.RetryDdnsUpdates) {
		return true
	}

	return false
}

// SetRetryDdnsUpdates gets a reference to the given bool and assigns it to the RetryDdnsUpdates field.
func (o *MemberDhcpproperties) SetRetryDdnsUpdates(v bool) {
	o.RetryDdnsUpdates = &v
}

// GetStaticHosts returns the StaticHosts field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetStaticHosts() int64 {
	if o == nil || IsNil(o.StaticHosts) {
		var ret int64
		return ret
	}
	return *o.StaticHosts
}

// GetStaticHostsOk returns a tuple with the StaticHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetStaticHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.StaticHosts) {
		return nil, false
	}
	return o.StaticHosts, true
}

// HasStaticHosts returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasStaticHosts() bool {
	if o != nil && !IsNil(o.StaticHosts) {
		return true
	}

	return false
}

// SetStaticHosts gets a reference to the given int64 and assigns it to the StaticHosts field.
func (o *MemberDhcpproperties) SetStaticHosts(v int64) {
	o.StaticHosts = &v
}

// GetSyslogFacility returns the SyslogFacility field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetSyslogFacility() string {
	if o == nil || IsNil(o.SyslogFacility) {
		var ret string
		return ret
	}
	return *o.SyslogFacility
}

// GetSyslogFacilityOk returns a tuple with the SyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetSyslogFacilityOk() (*string, bool) {
	if o == nil || IsNil(o.SyslogFacility) {
		return nil, false
	}
	return o.SyslogFacility, true
}

// HasSyslogFacility returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasSyslogFacility() bool {
	if o != nil && !IsNil(o.SyslogFacility) {
		return true
	}

	return false
}

// SetSyslogFacility gets a reference to the given string and assigns it to the SyslogFacility field.
func (o *MemberDhcpproperties) SetSyslogFacility(v string) {
	o.SyslogFacility = &v
}

// GetTotalHosts returns the TotalHosts field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetTotalHosts() int64 {
	if o == nil || IsNil(o.TotalHosts) {
		var ret int64
		return ret
	}
	return *o.TotalHosts
}

// GetTotalHostsOk returns a tuple with the TotalHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetTotalHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHosts) {
		return nil, false
	}
	return o.TotalHosts, true
}

// HasTotalHosts returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasTotalHosts() bool {
	if o != nil && !IsNil(o.TotalHosts) {
		return true
	}

	return false
}

// SetTotalHosts gets a reference to the given int64 and assigns it to the TotalHosts field.
func (o *MemberDhcpproperties) SetTotalHosts(v int64) {
	o.TotalHosts = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *MemberDhcpproperties) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseAuthority returns the UseAuthority field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseAuthority() bool {
	if o == nil || IsNil(o.UseAuthority) {
		var ret bool
		return ret
	}
	return *o.UseAuthority
}

// GetUseAuthorityOk returns a tuple with the UseAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAuthority) {
		return nil, false
	}
	return o.UseAuthority, true
}

// HasUseAuthority returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseAuthority() bool {
	if o != nil && !IsNil(o.UseAuthority) {
		return true
	}

	return false
}

// SetUseAuthority gets a reference to the given bool and assigns it to the UseAuthority field.
func (o *MemberDhcpproperties) SetUseAuthority(v bool) {
	o.UseAuthority = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *MemberDhcpproperties) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *MemberDhcpproperties) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *MemberDhcpproperties) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *MemberDhcpproperties) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *MemberDhcpproperties) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDdnsUpdateFixedAddresses returns the UseDdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUpdateFixedAddresses
}

// GetUseDdnsUpdateFixedAddressesOk returns a tuple with the UseDdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.UseDdnsUpdateFixedAddresses, true
}

// HasUseDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.UseDdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetUseDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the UseDdnsUpdateFixedAddresses field.
func (o *MemberDhcpproperties) SetUseDdnsUpdateFixedAddresses(v bool) {
	o.UseDdnsUpdateFixedAddresses = &v
}

// GetUseDdnsUseOption81 returns the UseDdnsUseOption81 field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDdnsUseOption81() bool {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUseOption81
}

// GetUseDdnsUseOption81Ok returns a tuple with the UseDdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		return nil, false
	}
	return o.UseDdnsUseOption81, true
}

// HasUseDdnsUseOption81 returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDdnsUseOption81() bool {
	if o != nil && !IsNil(o.UseDdnsUseOption81) {
		return true
	}

	return false
}

// SetUseDdnsUseOption81 gets a reference to the given bool and assigns it to the UseDdnsUseOption81 field.
func (o *MemberDhcpproperties) SetUseDdnsUseOption81(v bool) {
	o.UseDdnsUseOption81 = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *MemberDhcpproperties) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseDnsUpdateStyle returns the UseDnsUpdateStyle field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseDnsUpdateStyle() bool {
	if o == nil || IsNil(o.UseDnsUpdateStyle) {
		var ret bool
		return ret
	}
	return *o.UseDnsUpdateStyle
}

// GetUseDnsUpdateStyleOk returns a tuple with the UseDnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseDnsUpdateStyleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnsUpdateStyle) {
		return nil, false
	}
	return o.UseDnsUpdateStyle, true
}

// HasUseDnsUpdateStyle returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseDnsUpdateStyle() bool {
	if o != nil && !IsNil(o.UseDnsUpdateStyle) {
		return true
	}

	return false
}

// SetUseDnsUpdateStyle gets a reference to the given bool and assigns it to the UseDnsUpdateStyle field.
func (o *MemberDhcpproperties) SetUseDnsUpdateStyle(v bool) {
	o.UseDnsUpdateStyle = &v
}

// GetUseEmailList returns the UseEmailList field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEmailList() bool {
	if o == nil || IsNil(o.UseEmailList) {
		var ret bool
		return ret
	}
	return *o.UseEmailList
}

// GetUseEmailListOk returns a tuple with the UseEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEmailListOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailList) {
		return nil, false
	}
	return o.UseEmailList, true
}

// HasUseEmailList returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEmailList() bool {
	if o != nil && !IsNil(o.UseEmailList) {
		return true
	}

	return false
}

// SetUseEmailList gets a reference to the given bool and assigns it to the UseEmailList field.
func (o *MemberDhcpproperties) SetUseEmailList(v bool) {
	o.UseEmailList = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *MemberDhcpproperties) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDhcpThresholds returns the UseEnableDhcpThresholds field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.UseEnableDhcpThresholds
}

// GetUseEnableDhcpThresholdsOk returns a tuple with the UseEnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		return nil, false
	}
	return o.UseEnableDhcpThresholds, true
}

// HasUseEnableDhcpThresholds returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.UseEnableDhcpThresholds) {
		return true
	}

	return false
}

// SetUseEnableDhcpThresholds gets a reference to the given bool and assigns it to the UseEnableDhcpThresholds field.
func (o *MemberDhcpproperties) SetUseEnableDhcpThresholds(v bool) {
	o.UseEnableDhcpThresholds = &v
}

// GetUseEnableFingerprint returns the UseEnableFingerprint field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableFingerprint() bool {
	if o == nil || IsNil(o.UseEnableFingerprint) {
		var ret bool
		return ret
	}
	return *o.UseEnableFingerprint
}

// GetUseEnableFingerprintOk returns a tuple with the UseEnableFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableFingerprintOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableFingerprint) {
		return nil, false
	}
	return o.UseEnableFingerprint, true
}

// HasUseEnableFingerprint returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableFingerprint() bool {
	if o != nil && !IsNil(o.UseEnableFingerprint) {
		return true
	}

	return false
}

// SetUseEnableFingerprint gets a reference to the given bool and assigns it to the UseEnableFingerprint field.
func (o *MemberDhcpproperties) SetUseEnableFingerprint(v bool) {
	o.UseEnableFingerprint = &v
}

// GetUseEnableGssTsig returns the UseEnableGssTsig field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableGssTsig() bool {
	if o == nil || IsNil(o.UseEnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.UseEnableGssTsig
}

// GetUseEnableGssTsigOk returns a tuple with the UseEnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableGssTsig) {
		return nil, false
	}
	return o.UseEnableGssTsig, true
}

// HasUseEnableGssTsig returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableGssTsig() bool {
	if o != nil && !IsNil(o.UseEnableGssTsig) {
		return true
	}

	return false
}

// SetUseEnableGssTsig gets a reference to the given bool and assigns it to the UseEnableGssTsig field.
func (o *MemberDhcpproperties) SetUseEnableGssTsig(v bool) {
	o.UseEnableGssTsig = &v
}

// GetUseEnableHostnameRewrite returns the UseEnableHostnameRewrite field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableHostnameRewrite() bool {
	if o == nil || IsNil(o.UseEnableHostnameRewrite) {
		var ret bool
		return ret
	}
	return *o.UseEnableHostnameRewrite
}

// GetUseEnableHostnameRewriteOk returns a tuple with the UseEnableHostnameRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableHostnameRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableHostnameRewrite) {
		return nil, false
	}
	return o.UseEnableHostnameRewrite, true
}

// HasUseEnableHostnameRewrite returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableHostnameRewrite() bool {
	if o != nil && !IsNil(o.UseEnableHostnameRewrite) {
		return true
	}

	return false
}

// SetUseEnableHostnameRewrite gets a reference to the given bool and assigns it to the UseEnableHostnameRewrite field.
func (o *MemberDhcpproperties) SetUseEnableHostnameRewrite(v bool) {
	o.UseEnableHostnameRewrite = &v
}

// GetUseEnableLeasequery returns the UseEnableLeasequery field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableLeasequery() bool {
	if o == nil || IsNil(o.UseEnableLeasequery) {
		var ret bool
		return ret
	}
	return *o.UseEnableLeasequery
}

// GetUseEnableLeasequeryOk returns a tuple with the UseEnableLeasequery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableLeasequeryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableLeasequery) {
		return nil, false
	}
	return o.UseEnableLeasequery, true
}

// HasUseEnableLeasequery returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableLeasequery() bool {
	if o != nil && !IsNil(o.UseEnableLeasequery) {
		return true
	}

	return false
}

// SetUseEnableLeasequery gets a reference to the given bool and assigns it to the UseEnableLeasequery field.
func (o *MemberDhcpproperties) SetUseEnableLeasequery(v bool) {
	o.UseEnableLeasequery = &v
}

// GetUseEnableOneLeasePerClient returns the UseEnableOneLeasePerClient field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseEnableOneLeasePerClient() bool {
	if o == nil || IsNil(o.UseEnableOneLeasePerClient) {
		var ret bool
		return ret
	}
	return *o.UseEnableOneLeasePerClient
}

// GetUseEnableOneLeasePerClientOk returns a tuple with the UseEnableOneLeasePerClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseEnableOneLeasePerClientOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableOneLeasePerClient) {
		return nil, false
	}
	return o.UseEnableOneLeasePerClient, true
}

// HasUseEnableOneLeasePerClient returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseEnableOneLeasePerClient() bool {
	if o != nil && !IsNil(o.UseEnableOneLeasePerClient) {
		return true
	}

	return false
}

// SetUseEnableOneLeasePerClient gets a reference to the given bool and assigns it to the UseEnableOneLeasePerClient field.
func (o *MemberDhcpproperties) SetUseEnableOneLeasePerClient(v bool) {
	o.UseEnableOneLeasePerClient = &v
}

// GetUseGssTsigKeys returns the UseGssTsigKeys field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseGssTsigKeys() bool {
	if o == nil || IsNil(o.UseGssTsigKeys) {
		var ret bool
		return ret
	}
	return *o.UseGssTsigKeys
}

// GetUseGssTsigKeysOk returns a tuple with the UseGssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseGssTsigKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGssTsigKeys) {
		return nil, false
	}
	return o.UseGssTsigKeys, true
}

// HasUseGssTsigKeys returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseGssTsigKeys() bool {
	if o != nil && !IsNil(o.UseGssTsigKeys) {
		return true
	}

	return false
}

// SetUseGssTsigKeys gets a reference to the given bool and assigns it to the UseGssTsigKeys field.
func (o *MemberDhcpproperties) SetUseGssTsigKeys(v bool) {
	o.UseGssTsigKeys = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *MemberDhcpproperties) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIgnoreId returns the UseIgnoreId field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIgnoreId() bool {
	if o == nil || IsNil(o.UseIgnoreId) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreId
}

// GetUseIgnoreIdOk returns a tuple with the UseIgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIgnoreIdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreId) {
		return nil, false
	}
	return o.UseIgnoreId, true
}

// HasUseIgnoreId returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIgnoreId() bool {
	if o != nil && !IsNil(o.UseIgnoreId) {
		return true
	}

	return false
}

// SetUseIgnoreId gets a reference to the given bool and assigns it to the UseIgnoreId field.
func (o *MemberDhcpproperties) SetUseIgnoreId(v bool) {
	o.UseIgnoreId = &v
}

// GetUseImmediateFaConfiguration returns the UseImmediateFaConfiguration field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseImmediateFaConfiguration() bool {
	if o == nil || IsNil(o.UseImmediateFaConfiguration) {
		var ret bool
		return ret
	}
	return *o.UseImmediateFaConfiguration
}

// GetUseImmediateFaConfigurationOk returns a tuple with the UseImmediateFaConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseImmediateFaConfigurationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseImmediateFaConfiguration) {
		return nil, false
	}
	return o.UseImmediateFaConfiguration, true
}

// HasUseImmediateFaConfiguration returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseImmediateFaConfiguration() bool {
	if o != nil && !IsNil(o.UseImmediateFaConfiguration) {
		return true
	}

	return false
}

// SetUseImmediateFaConfiguration gets a reference to the given bool and assigns it to the UseImmediateFaConfiguration field.
func (o *MemberDhcpproperties) SetUseImmediateFaConfiguration(v bool) {
	o.UseImmediateFaConfiguration = &v
}

// GetUseIpv6DdnsDomainname returns the UseIpv6DdnsDomainname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DdnsDomainname() bool {
	if o == nil || IsNil(o.UseIpv6DdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DdnsDomainname
}

// GetUseIpv6DdnsDomainnameOk returns a tuple with the UseIpv6DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DdnsDomainname) {
		return nil, false
	}
	return o.UseIpv6DdnsDomainname, true
}

// HasUseIpv6DdnsDomainname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DdnsDomainname() bool {
	if o != nil && !IsNil(o.UseIpv6DdnsDomainname) {
		return true
	}

	return false
}

// SetUseIpv6DdnsDomainname gets a reference to the given bool and assigns it to the UseIpv6DdnsDomainname field.
func (o *MemberDhcpproperties) SetUseIpv6DdnsDomainname(v bool) {
	o.UseIpv6DdnsDomainname = &v
}

// GetUseIpv6DdnsEnableOptionFqdn returns the UseIpv6DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.UseIpv6DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DdnsEnableOptionFqdn
}

// GetUseIpv6DdnsEnableOptionFqdnOk returns a tuple with the UseIpv6DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.UseIpv6DdnsEnableOptionFqdn, true
}

// HasUseIpv6DdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.UseIpv6DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetUseIpv6DdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the UseIpv6DdnsEnableOptionFqdn field.
func (o *MemberDhcpproperties) SetUseIpv6DdnsEnableOptionFqdn(v bool) {
	o.UseIpv6DdnsEnableOptionFqdn = &v
}

// GetUseIpv6DdnsHostname returns the UseIpv6DdnsHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DdnsHostname() bool {
	if o == nil || IsNil(o.UseIpv6DdnsHostname) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DdnsHostname
}

// GetUseIpv6DdnsHostnameOk returns a tuple with the UseIpv6DdnsHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DdnsHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DdnsHostname) {
		return nil, false
	}
	return o.UseIpv6DdnsHostname, true
}

// HasUseIpv6DdnsHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DdnsHostname() bool {
	if o != nil && !IsNil(o.UseIpv6DdnsHostname) {
		return true
	}

	return false
}

// SetUseIpv6DdnsHostname gets a reference to the given bool and assigns it to the UseIpv6DdnsHostname field.
func (o *MemberDhcpproperties) SetUseIpv6DdnsHostname(v bool) {
	o.UseIpv6DdnsHostname = &v
}

// GetUseIpv6DdnsTtl returns the UseIpv6DdnsTtl field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DdnsTtl() bool {
	if o == nil || IsNil(o.UseIpv6DdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DdnsTtl
}

// GetUseIpv6DdnsTtlOk returns a tuple with the UseIpv6DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DdnsTtl) {
		return nil, false
	}
	return o.UseIpv6DdnsTtl, true
}

// HasUseIpv6DdnsTtl returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DdnsTtl() bool {
	if o != nil && !IsNil(o.UseIpv6DdnsTtl) {
		return true
	}

	return false
}

// SetUseIpv6DdnsTtl gets a reference to the given bool and assigns it to the UseIpv6DdnsTtl field.
func (o *MemberDhcpproperties) SetUseIpv6DdnsTtl(v bool) {
	o.UseIpv6DdnsTtl = &v
}

// GetUseIpv6DnsUpdateStyle returns the UseIpv6DnsUpdateStyle field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DnsUpdateStyle() bool {
	if o == nil || IsNil(o.UseIpv6DnsUpdateStyle) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DnsUpdateStyle
}

// GetUseIpv6DnsUpdateStyleOk returns a tuple with the UseIpv6DnsUpdateStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DnsUpdateStyleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DnsUpdateStyle) {
		return nil, false
	}
	return o.UseIpv6DnsUpdateStyle, true
}

// HasUseIpv6DnsUpdateStyle returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DnsUpdateStyle() bool {
	if o != nil && !IsNil(o.UseIpv6DnsUpdateStyle) {
		return true
	}

	return false
}

// SetUseIpv6DnsUpdateStyle gets a reference to the given bool and assigns it to the UseIpv6DnsUpdateStyle field.
func (o *MemberDhcpproperties) SetUseIpv6DnsUpdateStyle(v bool) {
	o.UseIpv6DnsUpdateStyle = &v
}

// GetUseIpv6DomainName returns the UseIpv6DomainName field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DomainName() bool {
	if o == nil || IsNil(o.UseIpv6DomainName) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DomainName
}

// GetUseIpv6DomainNameOk returns a tuple with the UseIpv6DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DomainName) {
		return nil, false
	}
	return o.UseIpv6DomainName, true
}

// HasUseIpv6DomainName returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DomainName() bool {
	if o != nil && !IsNil(o.UseIpv6DomainName) {
		return true
	}

	return false
}

// SetUseIpv6DomainName gets a reference to the given bool and assigns it to the UseIpv6DomainName field.
func (o *MemberDhcpproperties) SetUseIpv6DomainName(v bool) {
	o.UseIpv6DomainName = &v
}

// GetUseIpv6DomainNameServers returns the UseIpv6DomainNameServers field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6DomainNameServers() bool {
	if o == nil || IsNil(o.UseIpv6DomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseIpv6DomainNameServers
}

// GetUseIpv6DomainNameServersOk returns a tuple with the UseIpv6DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6DomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6DomainNameServers) {
		return nil, false
	}
	return o.UseIpv6DomainNameServers, true
}

// HasUseIpv6DomainNameServers returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6DomainNameServers() bool {
	if o != nil && !IsNil(o.UseIpv6DomainNameServers) {
		return true
	}

	return false
}

// SetUseIpv6DomainNameServers gets a reference to the given bool and assigns it to the UseIpv6DomainNameServers field.
func (o *MemberDhcpproperties) SetUseIpv6DomainNameServers(v bool) {
	o.UseIpv6DomainNameServers = &v
}

// GetUseIpv6EnableDdns returns the UseIpv6EnableDdns field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6EnableDdns() bool {
	if o == nil || IsNil(o.UseIpv6EnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseIpv6EnableDdns
}

// GetUseIpv6EnableDdnsOk returns a tuple with the UseIpv6EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6EnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6EnableDdns) {
		return nil, false
	}
	return o.UseIpv6EnableDdns, true
}

// HasUseIpv6EnableDdns returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6EnableDdns() bool {
	if o != nil && !IsNil(o.UseIpv6EnableDdns) {
		return true
	}

	return false
}

// SetUseIpv6EnableDdns gets a reference to the given bool and assigns it to the UseIpv6EnableDdns field.
func (o *MemberDhcpproperties) SetUseIpv6EnableDdns(v bool) {
	o.UseIpv6EnableDdns = &v
}

// GetUseIpv6EnableGssTsig returns the UseIpv6EnableGssTsig field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6EnableGssTsig() bool {
	if o == nil || IsNil(o.UseIpv6EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.UseIpv6EnableGssTsig
}

// GetUseIpv6EnableGssTsigOk returns a tuple with the UseIpv6EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6EnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6EnableGssTsig) {
		return nil, false
	}
	return o.UseIpv6EnableGssTsig, true
}

// HasUseIpv6EnableGssTsig returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6EnableGssTsig() bool {
	if o != nil && !IsNil(o.UseIpv6EnableGssTsig) {
		return true
	}

	return false
}

// SetUseIpv6EnableGssTsig gets a reference to the given bool and assigns it to the UseIpv6EnableGssTsig field.
func (o *MemberDhcpproperties) SetUseIpv6EnableGssTsig(v bool) {
	o.UseIpv6EnableGssTsig = &v
}

// GetUseIpv6EnableRetryUpdates returns the UseIpv6EnableRetryUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6EnableRetryUpdates() bool {
	if o == nil || IsNil(o.UseIpv6EnableRetryUpdates) {
		var ret bool
		return ret
	}
	return *o.UseIpv6EnableRetryUpdates
}

// GetUseIpv6EnableRetryUpdatesOk returns a tuple with the UseIpv6EnableRetryUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6EnableRetryUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6EnableRetryUpdates) {
		return nil, false
	}
	return o.UseIpv6EnableRetryUpdates, true
}

// HasUseIpv6EnableRetryUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6EnableRetryUpdates() bool {
	if o != nil && !IsNil(o.UseIpv6EnableRetryUpdates) {
		return true
	}

	return false
}

// SetUseIpv6EnableRetryUpdates gets a reference to the given bool and assigns it to the UseIpv6EnableRetryUpdates field.
func (o *MemberDhcpproperties) SetUseIpv6EnableRetryUpdates(v bool) {
	o.UseIpv6EnableRetryUpdates = &v
}

// GetUseIpv6GenerateHostname returns the UseIpv6GenerateHostname field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6GenerateHostname() bool {
	if o == nil || IsNil(o.UseIpv6GenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseIpv6GenerateHostname
}

// GetUseIpv6GenerateHostnameOk returns a tuple with the UseIpv6GenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6GenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6GenerateHostname) {
		return nil, false
	}
	return o.UseIpv6GenerateHostname, true
}

// HasUseIpv6GenerateHostname returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6GenerateHostname() bool {
	if o != nil && !IsNil(o.UseIpv6GenerateHostname) {
		return true
	}

	return false
}

// SetUseIpv6GenerateHostname gets a reference to the given bool and assigns it to the UseIpv6GenerateHostname field.
func (o *MemberDhcpproperties) SetUseIpv6GenerateHostname(v bool) {
	o.UseIpv6GenerateHostname = &v
}

// GetUseIpv6GssTsigKeys returns the UseIpv6GssTsigKeys field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6GssTsigKeys() bool {
	if o == nil || IsNil(o.UseIpv6GssTsigKeys) {
		var ret bool
		return ret
	}
	return *o.UseIpv6GssTsigKeys
}

// GetUseIpv6GssTsigKeysOk returns a tuple with the UseIpv6GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6GssTsigKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6GssTsigKeys) {
		return nil, false
	}
	return o.UseIpv6GssTsigKeys, true
}

// HasUseIpv6GssTsigKeys returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6GssTsigKeys() bool {
	if o != nil && !IsNil(o.UseIpv6GssTsigKeys) {
		return true
	}

	return false
}

// SetUseIpv6GssTsigKeys gets a reference to the given bool and assigns it to the UseIpv6GssTsigKeys field.
func (o *MemberDhcpproperties) SetUseIpv6GssTsigKeys(v bool) {
	o.UseIpv6GssTsigKeys = &v
}

// GetUseIpv6LeaseScavenging returns the UseIpv6LeaseScavenging field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6LeaseScavenging() bool {
	if o == nil || IsNil(o.UseIpv6LeaseScavenging) {
		var ret bool
		return ret
	}
	return *o.UseIpv6LeaseScavenging
}

// GetUseIpv6LeaseScavengingOk returns a tuple with the UseIpv6LeaseScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6LeaseScavengingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6LeaseScavenging) {
		return nil, false
	}
	return o.UseIpv6LeaseScavenging, true
}

// HasUseIpv6LeaseScavenging returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6LeaseScavenging() bool {
	if o != nil && !IsNil(o.UseIpv6LeaseScavenging) {
		return true
	}

	return false
}

// SetUseIpv6LeaseScavenging gets a reference to the given bool and assigns it to the UseIpv6LeaseScavenging field.
func (o *MemberDhcpproperties) SetUseIpv6LeaseScavenging(v bool) {
	o.UseIpv6LeaseScavenging = &v
}

// GetUseIpv6MicrosoftCodePage returns the UseIpv6MicrosoftCodePage field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6MicrosoftCodePage() bool {
	if o == nil || IsNil(o.UseIpv6MicrosoftCodePage) {
		var ret bool
		return ret
	}
	return *o.UseIpv6MicrosoftCodePage
}

// GetUseIpv6MicrosoftCodePageOk returns a tuple with the UseIpv6MicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6MicrosoftCodePageOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6MicrosoftCodePage) {
		return nil, false
	}
	return o.UseIpv6MicrosoftCodePage, true
}

// HasUseIpv6MicrosoftCodePage returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6MicrosoftCodePage() bool {
	if o != nil && !IsNil(o.UseIpv6MicrosoftCodePage) {
		return true
	}

	return false
}

// SetUseIpv6MicrosoftCodePage gets a reference to the given bool and assigns it to the UseIpv6MicrosoftCodePage field.
func (o *MemberDhcpproperties) SetUseIpv6MicrosoftCodePage(v bool) {
	o.UseIpv6MicrosoftCodePage = &v
}

// GetUseIpv6Options returns the UseIpv6Options field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6Options() bool {
	if o == nil || IsNil(o.UseIpv6Options) {
		var ret bool
		return ret
	}
	return *o.UseIpv6Options
}

// GetUseIpv6OptionsOk returns a tuple with the UseIpv6Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6OptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6Options) {
		return nil, false
	}
	return o.UseIpv6Options, true
}

// HasUseIpv6Options returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6Options() bool {
	if o != nil && !IsNil(o.UseIpv6Options) {
		return true
	}

	return false
}

// SetUseIpv6Options gets a reference to the given bool and assigns it to the UseIpv6Options field.
func (o *MemberDhcpproperties) SetUseIpv6Options(v bool) {
	o.UseIpv6Options = &v
}

// GetUseIpv6RecycleLeases returns the UseIpv6RecycleLeases field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6RecycleLeases() bool {
	if o == nil || IsNil(o.UseIpv6RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseIpv6RecycleLeases
}

// GetUseIpv6RecycleLeasesOk returns a tuple with the UseIpv6RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6RecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6RecycleLeases) {
		return nil, false
	}
	return o.UseIpv6RecycleLeases, true
}

// HasUseIpv6RecycleLeases returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6RecycleLeases() bool {
	if o != nil && !IsNil(o.UseIpv6RecycleLeases) {
		return true
	}

	return false
}

// SetUseIpv6RecycleLeases gets a reference to the given bool and assigns it to the UseIpv6RecycleLeases field.
func (o *MemberDhcpproperties) SetUseIpv6RecycleLeases(v bool) {
	o.UseIpv6RecycleLeases = &v
}

// GetUseIpv6UpdateDnsOnLeaseRenewal returns the UseIpv6UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseIpv6UpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseIpv6UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseIpv6UpdateDnsOnLeaseRenewal
}

// GetUseIpv6UpdateDnsOnLeaseRenewalOk returns a tuple with the UseIpv6UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseIpv6UpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseIpv6UpdateDnsOnLeaseRenewal, true
}

// HasUseIpv6UpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseIpv6UpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseIpv6UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseIpv6UpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseIpv6UpdateDnsOnLeaseRenewal field.
func (o *MemberDhcpproperties) SetUseIpv6UpdateDnsOnLeaseRenewal(v bool) {
	o.UseIpv6UpdateDnsOnLeaseRenewal = &v
}

// GetUseLeasePerClientSettings returns the UseLeasePerClientSettings field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseLeasePerClientSettings() bool {
	if o == nil || IsNil(o.UseLeasePerClientSettings) {
		var ret bool
		return ret
	}
	return *o.UseLeasePerClientSettings
}

// GetUseLeasePerClientSettingsOk returns a tuple with the UseLeasePerClientSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseLeasePerClientSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeasePerClientSettings) {
		return nil, false
	}
	return o.UseLeasePerClientSettings, true
}

// HasUseLeasePerClientSettings returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseLeasePerClientSettings() bool {
	if o != nil && !IsNil(o.UseLeasePerClientSettings) {
		return true
	}

	return false
}

// SetUseLeasePerClientSettings gets a reference to the given bool and assigns it to the UseLeasePerClientSettings field.
func (o *MemberDhcpproperties) SetUseLeasePerClientSettings(v bool) {
	o.UseLeasePerClientSettings = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *MemberDhcpproperties) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogLeaseEvents returns the UseLogLeaseEvents field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseLogLeaseEvents() bool {
	if o == nil || IsNil(o.UseLogLeaseEvents) {
		var ret bool
		return ret
	}
	return *o.UseLogLeaseEvents
}

// GetUseLogLeaseEventsOk returns a tuple with the UseLogLeaseEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseLogLeaseEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogLeaseEvents) {
		return nil, false
	}
	return o.UseLogLeaseEvents, true
}

// HasUseLogLeaseEvents returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseLogLeaseEvents() bool {
	if o != nil && !IsNil(o.UseLogLeaseEvents) {
		return true
	}

	return false
}

// SetUseLogLeaseEvents gets a reference to the given bool and assigns it to the UseLogLeaseEvents field.
func (o *MemberDhcpproperties) SetUseLogLeaseEvents(v bool) {
	o.UseLogLeaseEvents = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *MemberDhcpproperties) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMicrosoftCodePage returns the UseMicrosoftCodePage field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseMicrosoftCodePage() bool {
	if o == nil || IsNil(o.UseMicrosoftCodePage) {
		var ret bool
		return ret
	}
	return *o.UseMicrosoftCodePage
}

// GetUseMicrosoftCodePageOk returns a tuple with the UseMicrosoftCodePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseMicrosoftCodePageOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMicrosoftCodePage) {
		return nil, false
	}
	return o.UseMicrosoftCodePage, true
}

// HasUseMicrosoftCodePage returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseMicrosoftCodePage() bool {
	if o != nil && !IsNil(o.UseMicrosoftCodePage) {
		return true
	}

	return false
}

// SetUseMicrosoftCodePage gets a reference to the given bool and assigns it to the UseMicrosoftCodePage field.
func (o *MemberDhcpproperties) SetUseMicrosoftCodePage(v bool) {
	o.UseMicrosoftCodePage = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *MemberDhcpproperties) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *MemberDhcpproperties) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePingCount returns the UsePingCount field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUsePingCount() bool {
	if o == nil || IsNil(o.UsePingCount) {
		var ret bool
		return ret
	}
	return *o.UsePingCount
}

// GetUsePingCountOk returns a tuple with the UsePingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUsePingCountOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePingCount) {
		return nil, false
	}
	return o.UsePingCount, true
}

// HasUsePingCount returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUsePingCount() bool {
	if o != nil && !IsNil(o.UsePingCount) {
		return true
	}

	return false
}

// SetUsePingCount gets a reference to the given bool and assigns it to the UsePingCount field.
func (o *MemberDhcpproperties) SetUsePingCount(v bool) {
	o.UsePingCount = &v
}

// GetUsePingTimeout returns the UsePingTimeout field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUsePingTimeout() bool {
	if o == nil || IsNil(o.UsePingTimeout) {
		var ret bool
		return ret
	}
	return *o.UsePingTimeout
}

// GetUsePingTimeoutOk returns a tuple with the UsePingTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUsePingTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePingTimeout) {
		return nil, false
	}
	return o.UsePingTimeout, true
}

// HasUsePingTimeout returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUsePingTimeout() bool {
	if o != nil && !IsNil(o.UsePingTimeout) {
		return true
	}

	return false
}

// SetUsePingTimeout gets a reference to the given bool and assigns it to the UsePingTimeout field.
func (o *MemberDhcpproperties) SetUsePingTimeout(v bool) {
	o.UsePingTimeout = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *MemberDhcpproperties) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUsePrefixLengthMode returns the UsePrefixLengthMode field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUsePrefixLengthMode() bool {
	if o == nil || IsNil(o.UsePrefixLengthMode) {
		var ret bool
		return ret
	}
	return *o.UsePrefixLengthMode
}

// GetUsePrefixLengthModeOk returns a tuple with the UsePrefixLengthMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUsePrefixLengthModeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePrefixLengthMode) {
		return nil, false
	}
	return o.UsePrefixLengthMode, true
}

// HasUsePrefixLengthMode returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUsePrefixLengthMode() bool {
	if o != nil && !IsNil(o.UsePrefixLengthMode) {
		return true
	}

	return false
}

// SetUsePrefixLengthMode gets a reference to the given bool and assigns it to the UsePrefixLengthMode field.
func (o *MemberDhcpproperties) SetUsePrefixLengthMode(v bool) {
	o.UsePrefixLengthMode = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *MemberDhcpproperties) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *MemberDhcpproperties) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseRetryDdnsUpdates returns the UseRetryDdnsUpdates field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseRetryDdnsUpdates() bool {
	if o == nil || IsNil(o.UseRetryDdnsUpdates) {
		var ret bool
		return ret
	}
	return *o.UseRetryDdnsUpdates
}

// GetUseRetryDdnsUpdatesOk returns a tuple with the UseRetryDdnsUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseRetryDdnsUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRetryDdnsUpdates) {
		return nil, false
	}
	return o.UseRetryDdnsUpdates, true
}

// HasUseRetryDdnsUpdates returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseRetryDdnsUpdates() bool {
	if o != nil && !IsNil(o.UseRetryDdnsUpdates) {
		return true
	}

	return false
}

// SetUseRetryDdnsUpdates gets a reference to the given bool and assigns it to the UseRetryDdnsUpdates field.
func (o *MemberDhcpproperties) SetUseRetryDdnsUpdates(v bool) {
	o.UseRetryDdnsUpdates = &v
}

// GetUseSyslogFacility returns the UseSyslogFacility field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseSyslogFacility() bool {
	if o == nil || IsNil(o.UseSyslogFacility) {
		var ret bool
		return ret
	}
	return *o.UseSyslogFacility
}

// GetUseSyslogFacilityOk returns a tuple with the UseSyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseSyslogFacilityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyslogFacility) {
		return nil, false
	}
	return o.UseSyslogFacility, true
}

// HasUseSyslogFacility returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseSyslogFacility() bool {
	if o != nil && !IsNil(o.UseSyslogFacility) {
		return true
	}

	return false
}

// SetUseSyslogFacility gets a reference to the given bool and assigns it to the UseSyslogFacility field.
func (o *MemberDhcpproperties) SetUseSyslogFacility(v bool) {
	o.UseSyslogFacility = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *MemberDhcpproperties) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *MemberDhcpproperties) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *MemberDhcpproperties) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDhcpproperties) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *MemberDhcpproperties) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *MemberDhcpproperties) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o MemberDhcpproperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDhcpproperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AuthServerGroup) {
		toSerialize["auth_server_group"] = o.AuthServerGroup
	}
	if !IsNil(o.AuthnCaptivePortal) {
		toSerialize["authn_captive_portal"] = o.AuthnCaptivePortal
	}
	if !IsNil(o.AuthnCaptivePortalAuthenticatedFilter) {
		toSerialize["authn_captive_portal_authenticated_filter"] = o.AuthnCaptivePortalAuthenticatedFilter
	}
	if !IsNil(o.AuthnCaptivePortalEnabled) {
		toSerialize["authn_captive_portal_enabled"] = o.AuthnCaptivePortalEnabled
	}
	if !IsNil(o.AuthnCaptivePortalGuestFilter) {
		toSerialize["authn_captive_portal_guest_filter"] = o.AuthnCaptivePortalGuestFilter
	}
	if !IsNil(o.AuthnServerGroupEnabled) {
		toSerialize["authn_server_group_enabled"] = o.AuthnServerGroupEnabled
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsRetryInterval) {
		toSerialize["ddns_retry_interval"] = o.DdnsRetryInterval
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DdnsUpdateFixedAddresses) {
		toSerialize["ddns_update_fixed_addresses"] = o.DdnsUpdateFixedAddresses
	}
	if !IsNil(o.DdnsUseOption81) {
		toSerialize["ddns_use_option81"] = o.DdnsUseOption81
	}
	if !IsNil(o.DdnsZonePrimaries) {
		toSerialize["ddns_zone_primaries"] = o.DdnsZonePrimaries
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DhcpUtilizationStatus) {
		toSerialize["dhcp_utilization_status"] = o.DhcpUtilizationStatus
	}
	if !IsNil(o.DnsUpdateStyle) {
		toSerialize["dns_update_style"] = o.DnsUpdateStyle
	}
	if !IsNil(o.DynamicHosts) {
		toSerialize["dynamic_hosts"] = o.DynamicHosts
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcp) {
		toSerialize["enable_dhcp"] = o.EnableDhcp
	}
	if !IsNil(o.EnableDhcpOnIpv6Lan2) {
		toSerialize["enable_dhcp_on_ipv6_lan2"] = o.EnableDhcpOnIpv6Lan2
	}
	if !IsNil(o.EnableDhcpOnLan2) {
		toSerialize["enable_dhcp_on_lan2"] = o.EnableDhcpOnLan2
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableDhcpv6Service) {
		toSerialize["enable_dhcpv6_service"] = o.EnableDhcpv6Service
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnableFingerprint) {
		toSerialize["enable_fingerprint"] = o.EnableFingerprint
	}
	if !IsNil(o.EnableGssTsig) {
		toSerialize["enable_gss_tsig"] = o.EnableGssTsig
	}
	if !IsNil(o.EnableHostnameRewrite) {
		toSerialize["enable_hostname_rewrite"] = o.EnableHostnameRewrite
	}
	if !IsNil(o.EnableLeasequery) {
		toSerialize["enable_leasequery"] = o.EnableLeasequery
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.GssTsigKeys) {
		toSerialize["gss_tsig_keys"] = o.GssTsigKeys
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.HostnameRewritePolicy) {
		toSerialize["hostname_rewrite_policy"] = o.HostnameRewritePolicy
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IgnoreId) {
		toSerialize["ignore_id"] = o.IgnoreId
	}
	if !IsNil(o.IgnoreMacAddresses) {
		toSerialize["ignore_mac_addresses"] = o.IgnoreMacAddresses
	}
	if !IsNil(o.ImmediateFaConfiguration) {
		toSerialize["immediate_fa_configuration"] = o.ImmediateFaConfiguration
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.Ipv6DdnsDomainname) {
		toSerialize["ipv6_ddns_domainname"] = o.Ipv6DdnsDomainname
	}
	if !IsNil(o.Ipv6DdnsEnableOptionFqdn) {
		toSerialize["ipv6_ddns_enable_option_fqdn"] = o.Ipv6DdnsEnableOptionFqdn
	}
	if !IsNil(o.Ipv6DdnsHostname) {
		toSerialize["ipv6_ddns_hostname"] = o.Ipv6DdnsHostname
	}
	if !IsNil(o.Ipv6DdnsServerAlwaysUpdates) {
		toSerialize["ipv6_ddns_server_always_updates"] = o.Ipv6DdnsServerAlwaysUpdates
	}
	if !IsNil(o.Ipv6DdnsTtl) {
		toSerialize["ipv6_ddns_ttl"] = o.Ipv6DdnsTtl
	}
	if !IsNil(o.Ipv6DnsUpdateStyle) {
		toSerialize["ipv6_dns_update_style"] = o.Ipv6DnsUpdateStyle
	}
	if !IsNil(o.Ipv6DomainName) {
		toSerialize["ipv6_domain_name"] = o.Ipv6DomainName
	}
	if !IsNil(o.Ipv6DomainNameServers) {
		toSerialize["ipv6_domain_name_servers"] = o.Ipv6DomainNameServers
	}
	if !IsNil(o.Ipv6EnableDdns) {
		toSerialize["ipv6_enable_ddns"] = o.Ipv6EnableDdns
	}
	if !IsNil(o.Ipv6EnableGssTsig) {
		toSerialize["ipv6_enable_gss_tsig"] = o.Ipv6EnableGssTsig
	}
	if !IsNil(o.Ipv6EnableLeaseScavenging) {
		toSerialize["ipv6_enable_lease_scavenging"] = o.Ipv6EnableLeaseScavenging
	}
	if !IsNil(o.Ipv6EnableRetryUpdates) {
		toSerialize["ipv6_enable_retry_updates"] = o.Ipv6EnableRetryUpdates
	}
	if !IsNil(o.Ipv6GenerateHostname) {
		toSerialize["ipv6_generate_hostname"] = o.Ipv6GenerateHostname
	}
	if !IsNil(o.Ipv6GssTsigKeys) {
		toSerialize["ipv6_gss_tsig_keys"] = o.Ipv6GssTsigKeys
	}
	if !IsNil(o.Ipv6KdcServer) {
		toSerialize["ipv6_kdc_server"] = o.Ipv6KdcServer
	}
	if !IsNil(o.Ipv6LeaseScavengingTime) {
		toSerialize["ipv6_lease_scavenging_time"] = o.Ipv6LeaseScavengingTime
	}
	if !IsNil(o.Ipv6MicrosoftCodePage) {
		toSerialize["ipv6_microsoft_code_page"] = o.Ipv6MicrosoftCodePage
	}
	if !IsNil(o.Ipv6Options) {
		toSerialize["ipv6_options"] = o.Ipv6Options
	}
	if !IsNil(o.Ipv6RecycleLeases) {
		toSerialize["ipv6_recycle_leases"] = o.Ipv6RecycleLeases
	}
	if !IsNil(o.Ipv6RememberExpiredClientAssociation) {
		toSerialize["ipv6_remember_expired_client_association"] = o.Ipv6RememberExpiredClientAssociation
	}
	if !IsNil(o.Ipv6RetryUpdatesInterval) {
		toSerialize["ipv6_retry_updates_interval"] = o.Ipv6RetryUpdatesInterval
	}
	if !IsNil(o.Ipv6ServerDuid) {
		toSerialize["ipv6_server_duid"] = o.Ipv6ServerDuid
	}
	if !IsNil(o.Ipv6UpdateDnsOnLeaseRenewal) {
		toSerialize["ipv6_update_dns_on_lease_renewal"] = o.Ipv6UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.KdcServer) {
		toSerialize["kdc_server"] = o.KdcServer
	}
	if !IsNil(o.LeasePerClientSettings) {
		toSerialize["lease_per_client_settings"] = o.LeasePerClientSettings
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogLeaseEvents) {
		toSerialize["log_lease_events"] = o.LogLeaseEvents
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.MicrosoftCodePage) {
		toSerialize["microsoft_code_page"] = o.MicrosoftCodePage
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Option60MatchRules) {
		toSerialize["option60_match_rules"] = o.Option60MatchRules
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PingCount) {
		toSerialize["ping_count"] = o.PingCount
	}
	if !IsNil(o.PingTimeout) {
		toSerialize["ping_timeout"] = o.PingTimeout
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.PrefixLengthMode) {
		toSerialize["prefix_length_mode"] = o.PrefixLengthMode
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RetryDdnsUpdates) {
		toSerialize["retry_ddns_updates"] = o.RetryDdnsUpdates
	}
	if !IsNil(o.StaticHosts) {
		toSerialize["static_hosts"] = o.StaticHosts
	}
	if !IsNil(o.SyslogFacility) {
		toSerialize["syslog_facility"] = o.SyslogFacility
	}
	if !IsNil(o.TotalHosts) {
		toSerialize["total_hosts"] = o.TotalHosts
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseAuthority) {
		toSerialize["use_authority"] = o.UseAuthority
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDdnsUpdateFixedAddresses) {
		toSerialize["use_ddns_update_fixed_addresses"] = o.UseDdnsUpdateFixedAddresses
	}
	if !IsNil(o.UseDdnsUseOption81) {
		toSerialize["use_ddns_use_option81"] = o.UseDdnsUseOption81
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseDnsUpdateStyle) {
		toSerialize["use_dns_update_style"] = o.UseDnsUpdateStyle
	}
	if !IsNil(o.UseEmailList) {
		toSerialize["use_email_list"] = o.UseEmailList
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDhcpThresholds) {
		toSerialize["use_enable_dhcp_thresholds"] = o.UseEnableDhcpThresholds
	}
	if !IsNil(o.UseEnableFingerprint) {
		toSerialize["use_enable_fingerprint"] = o.UseEnableFingerprint
	}
	if !IsNil(o.UseEnableGssTsig) {
		toSerialize["use_enable_gss_tsig"] = o.UseEnableGssTsig
	}
	if !IsNil(o.UseEnableHostnameRewrite) {
		toSerialize["use_enable_hostname_rewrite"] = o.UseEnableHostnameRewrite
	}
	if !IsNil(o.UseEnableLeasequery) {
		toSerialize["use_enable_leasequery"] = o.UseEnableLeasequery
	}
	if !IsNil(o.UseEnableOneLeasePerClient) {
		toSerialize["use_enable_one_lease_per_client"] = o.UseEnableOneLeasePerClient
	}
	if !IsNil(o.UseGssTsigKeys) {
		toSerialize["use_gss_tsig_keys"] = o.UseGssTsigKeys
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIgnoreId) {
		toSerialize["use_ignore_id"] = o.UseIgnoreId
	}
	if !IsNil(o.UseImmediateFaConfiguration) {
		toSerialize["use_immediate_fa_configuration"] = o.UseImmediateFaConfiguration
	}
	if !IsNil(o.UseIpv6DdnsDomainname) {
		toSerialize["use_ipv6_ddns_domainname"] = o.UseIpv6DdnsDomainname
	}
	if !IsNil(o.UseIpv6DdnsEnableOptionFqdn) {
		toSerialize["use_ipv6_ddns_enable_option_fqdn"] = o.UseIpv6DdnsEnableOptionFqdn
	}
	if !IsNil(o.UseIpv6DdnsHostname) {
		toSerialize["use_ipv6_ddns_hostname"] = o.UseIpv6DdnsHostname
	}
	if !IsNil(o.UseIpv6DdnsTtl) {
		toSerialize["use_ipv6_ddns_ttl"] = o.UseIpv6DdnsTtl
	}
	if !IsNil(o.UseIpv6DnsUpdateStyle) {
		toSerialize["use_ipv6_dns_update_style"] = o.UseIpv6DnsUpdateStyle
	}
	if !IsNil(o.UseIpv6DomainName) {
		toSerialize["use_ipv6_domain_name"] = o.UseIpv6DomainName
	}
	if !IsNil(o.UseIpv6DomainNameServers) {
		toSerialize["use_ipv6_domain_name_servers"] = o.UseIpv6DomainNameServers
	}
	if !IsNil(o.UseIpv6EnableDdns) {
		toSerialize["use_ipv6_enable_ddns"] = o.UseIpv6EnableDdns
	}
	if !IsNil(o.UseIpv6EnableGssTsig) {
		toSerialize["use_ipv6_enable_gss_tsig"] = o.UseIpv6EnableGssTsig
	}
	if !IsNil(o.UseIpv6EnableRetryUpdates) {
		toSerialize["use_ipv6_enable_retry_updates"] = o.UseIpv6EnableRetryUpdates
	}
	if !IsNil(o.UseIpv6GenerateHostname) {
		toSerialize["use_ipv6_generate_hostname"] = o.UseIpv6GenerateHostname
	}
	if !IsNil(o.UseIpv6GssTsigKeys) {
		toSerialize["use_ipv6_gss_tsig_keys"] = o.UseIpv6GssTsigKeys
	}
	if !IsNil(o.UseIpv6LeaseScavenging) {
		toSerialize["use_ipv6_lease_scavenging"] = o.UseIpv6LeaseScavenging
	}
	if !IsNil(o.UseIpv6MicrosoftCodePage) {
		toSerialize["use_ipv6_microsoft_code_page"] = o.UseIpv6MicrosoftCodePage
	}
	if !IsNil(o.UseIpv6Options) {
		toSerialize["use_ipv6_options"] = o.UseIpv6Options
	}
	if !IsNil(o.UseIpv6RecycleLeases) {
		toSerialize["use_ipv6_recycle_leases"] = o.UseIpv6RecycleLeases
	}
	if !IsNil(o.UseIpv6UpdateDnsOnLeaseRenewal) {
		toSerialize["use_ipv6_update_dns_on_lease_renewal"] = o.UseIpv6UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseLeasePerClientSettings) {
		toSerialize["use_lease_per_client_settings"] = o.UseLeasePerClientSettings
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogLeaseEvents) {
		toSerialize["use_log_lease_events"] = o.UseLogLeaseEvents
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMicrosoftCodePage) {
		toSerialize["use_microsoft_code_page"] = o.UseMicrosoftCodePage
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePingCount) {
		toSerialize["use_ping_count"] = o.UsePingCount
	}
	if !IsNil(o.UsePingTimeout) {
		toSerialize["use_ping_timeout"] = o.UsePingTimeout
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UsePrefixLengthMode) {
		toSerialize["use_prefix_length_mode"] = o.UsePrefixLengthMode
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseRetryDdnsUpdates) {
		toSerialize["use_retry_ddns_updates"] = o.UseRetryDdnsUpdates
	}
	if !IsNil(o.UseSyslogFacility) {
		toSerialize["use_syslog_facility"] = o.UseSyslogFacility
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableMemberDhcpproperties struct {
	value *MemberDhcpproperties
	isSet bool
}

func (v NullableMemberDhcpproperties) Get() *MemberDhcpproperties {
	return v.value
}

func (v *NullableMemberDhcpproperties) Set(val *MemberDhcpproperties) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDhcpproperties) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDhcpproperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDhcpproperties(val *MemberDhcpproperties) *NullableMemberDhcpproperties {
	return &NullableMemberDhcpproperties{value: val, isSet: true}
}

func (v NullableMemberDhcpproperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDhcpproperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
