/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDns type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDns{}

// MemberDns struct for MemberDns
type MemberDns struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Add custom IP, MAC and DNS View name ENDS0 options to outgoing recursive queries.
	AddClientIpMacOptions *bool `json:"add_client_ip_mac_options,omitempty"`
	// The list of additional IP addresses on which DNS is enabled for a Grid member. Only one of \"additional_ip_list\" or \"additional_ip_list_struct\" should be set when modifying the object.
	AdditionalIpList []string `json:"additional_ip_list,omitempty"`
	// The list of additional IP addresses and IP Space Discriminator short names on which DNS is enabled for a Grid member. Only one of \"additional_ip_list\" or \"additional_ip_list_struct\" should be set when modifying the object.
	AdditionalIpListStruct []MemberDnsAdditionalIpListStruct `json:"additional_ip_list_struct,omitempty"`
	// Determines whether the GSS-TSIG zone updates is enabled for the Grid member.
	AllowGssTsigZoneUpdates *bool `json:"allow_gss_tsig_zone_updates,omitempty"`
	// Determines if queries from specified IPv4 or IPv6 addresses and networks are enabled or not. The appliance can also use Transaction Signature (TSIG) keys to authenticate the queries. This setting overrides the Grid query settings.
	AllowQuery []MemberDnsAllowQuery `json:"allow_query,omitempty"`
	// Determines if the responses to recursive queries is enabled or not. This setting overrides Grid recursive query settings.
	AllowRecursiveQuery *bool `json:"allow_recursive_query,omitempty"`
	// Allows or rejects zone transfers from specified IPv4 or IPv6 addresses and networks or allows transfers from hosts authenticated by Transaction signature (TSIG) key. This setting overrides the Grid zone transfer settings.
	AllowTransfer []MemberDnsAllowTransfer `json:"allow_transfer,omitempty"`
	// Allows or rejects dynamic updates from specified IPv4 or IPv6 addresses, networks or from host authenticated by TSIG key. This setting overrides Grid update settings.
	AllowUpdate []MemberDnsAllowUpdate `json:"allow_update,omitempty"`
	// The flag that indicates whether the anonymization of captured DNS responses is enabled or disabled.
	AnonymizeResponseLogging *bool `json:"anonymize_response_logging,omitempty"`
	// Enable DNS recursive query forwarding to Active Trust Cloud.
	AtcFwdEnable     *bool                      `json:"atc_fwd_enable,omitempty"`
	AttackMitigation *MemberDnsAttackMitigation `json:"attack_mitigation,omitempty"`
	AutoBlackhole    *MemberDnsAutoBlackhole    `json:"auto_blackhole,omitempty"`
	// Determines if the auto-generation of A and PTR records for the LAN2 IP address is enabled or not, if DNS service is enabled on LAN2.
	AutoCreateAAndPtrForLan2 *bool `json:"auto_create_a_and_ptr_for_lan2,omitempty"`
	// Determines if auto-generation of AAAA and IPv6 PTR records for LAN2 IPv6 address is enabled or not.
	AutoCreateAaaaAndIpv6ptrForLan2 *bool `json:"auto_create_aaaa_and_ipv6ptr_for_lan2,omitempty"`
	// Determines if a Grid member to automatically sort DNS views is enabled or not. The order of the DNS views determines the order in which the appliance checks the match lists.
	AutoSortViews *bool `json:"auto_sort_views,omitempty"`
	// The BIND check names policy, which indicates the action the appliance takes when it encounters host names that do not comply with the Strict Hostname Checking policy. This method applies only if the host name restriction policy is set to 'Strict Hostname Checking'.
	BindCheckNamesPolicy *string `json:"bind_check_names_policy,omitempty"`
	// The value of the hostname directive for BIND.
	BindHostnameDirective *string `json:"bind_hostname_directive,omitempty"`
	// The value of the user-defined hostname directive for BIND. To enable user-defined hostname directive, you must set the bind_hostname_directive to \"USER_DEFINED\".
	BindHostnameDirectiveFqdn *string `json:"bind_hostname_directive_fqdn,omitempty"`
	// The list of IPv4 or IPv6 addresses and networks from which DNS queries are blocked. This setting overrides the Grid blackhole_list.
	BlackholeList []MemberDnsBlackholeList `json:"blackhole_list,omitempty"`
	// The action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method.
	BlacklistAction *string `json:"blacklist_action,omitempty"`
	// Determines if blacklist redirection queries are logged or not.
	BlacklistLogQuery *bool `json:"blacklist_log_query,omitempty"`
	// The IP addresses the appliance includes in the response it sends in place of a blacklisted IP address.
	BlacklistRedirectAddresses []string `json:"blacklist_redirect_addresses,omitempty"`
	// The TTL value of the synthetic DNS responses that result from blacklist redirection.
	BlacklistRedirectTtl *int64 `json:"blacklist_redirect_ttl,omitempty"`
	// The DNS Ruleset object names assigned at the Grid level for blacklist redirection.
	BlacklistRulesets []string `json:"blacklist_rulesets,omitempty"`
	// The flag that indicates whether the capture of DNS queries for all domains is enabled or disabled.
	CaptureDnsQueriesOnAllDomains *bool `json:"capture_dns_queries_on_all_domains,omitempty"`
	// Determines whether the application of BIND check-names for zone transfers and DDNS updates are enabled.
	CheckNamesForDdnsAndZoneTransfer *bool                  `json:"check_names_for_ddns_and_zone_transfer,omitempty"`
	ClearDnsCache                    map[string]interface{} `json:"clear_dns_cache,omitempty"`
	// Copy custom IP, MAC and DNS View name ENDS0 options from incoming to outgoing recursive queries.
	CopyClientIpMacOptions *bool `json:"copy_client_ip_mac_options,omitempty"`
	// Copies the allowed IPs from the zone transfer list into the also-notify statement in the named.conf file.
	CopyXferToNotify *bool `json:"copy_xfer_to_notify,omitempty"`
	// The list of custom root name servers. You can either select and use Internet root name servers or specify custom root name servers by providing a host name and IP address to which the Infoblox appliance can send queries.
	CustomRootNameServers []MemberDnsCustomRootNameServers `json:"custom_root_name_servers,omitempty"`
	// The EDNS0 support for queries that require recursive resolution on Grid members.
	DisableEdns *bool `json:"disable_edns,omitempty"`
	// The list of DNS64 synthesis groups associated with this member.
	Dns64Groups []string `json:"dns64_groups,omitempty"`
	// The DNS cache acceleration status.
	DnsCacheAccelerationStatus *string `json:"dns_cache_acceleration_status,omitempty"`
	// The minimum TTL value, in seconds, that a DNS record must have in order for it to be cached by the DNS Cache Acceleration service. An integer from 1 to 65000 that represents the TTL in seconds.
	DnsCacheAccelerationTtl *int64 `json:"dns_cache_acceleration_ttl,omitempty"`
	// The flag that indicates whether the anycast failure (BFD session down) is enabled on member failure or not.
	DnsHealthCheckAnycastControl *bool `json:"dns_health_check_anycast_control,omitempty"`
	// The list of domain names for the DNS health check.
	DnsHealthCheckDomainList []string `json:"dns_health_check_domain_list,omitempty"`
	// The time interval (in seconds) for DNS health check.
	DnsHealthCheckInterval *int64 `json:"dns_health_check_interval,omitempty"`
	// The flag that indicates whether the recursive DNS health check is enabled or not.
	DnsHealthCheckRecursionFlag *bool `json:"dns_health_check_recursion_flag,omitempty"`
	// The number of DNS health check retries.
	DnsHealthCheckRetries *int64 `json:"dns_health_check_retries,omitempty"`
	// The DNS health check timeout interval (in seconds).
	DnsHealthCheckTimeout *int64 `json:"dns_health_check_timeout,omitempty"`
	// Determines which IP address is used as the source for DDNS notify and transfer operations.
	DnsNotifyTransferSource *string `json:"dns_notify_transfer_source,omitempty"`
	// The source address used if dns_notify_transfer_source type is \"IP\".
	DnsNotifyTransferSourceAddress *string `json:"dns_notify_transfer_source_address,omitempty"`
	// Enables DNS over TLS service.
	DnsOverTlsService *bool `json:"dns_over_tls_service,omitempty"`
	// The time limit (in minutes) for the DNS query capture file.
	DnsQueryCaptureFileTimeLimit *int64 `json:"dns_query_capture_file_time_limit,omitempty"`
	// The source address used if dns_query_source_interface type is \"IP\".
	DnsQuerySourceAddress *string `json:"dns_query_source_address,omitempty"`
	// Determines which IP address is used as the source for DDNS query operations.
	DnsQuerySourceInterface *string `json:"dns_query_source_interface,omitempty"`
	// Array of notify/query source settings for views.
	DnsViewAddressSettings []MemberDnsDnsViewAddressSettings `json:"dns_view_address_settings,omitempty"`
	// Determines if the blacklist rules for DNSSEC-enabled clients are enabled or not.
	DnssecBlacklistEnabled *bool `json:"dnssec_blacklist_enabled,omitempty"`
	// Determines if the DNS64 groups for DNSSEC-enabled clients are enabled or not.
	DnssecDns64Enabled *bool `json:"dnssec_dns64_enabled,omitempty"`
	// Determines if the DNS security extension is enabled or not.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	// Determines when the DNS member accepts expired signatures.
	DnssecExpiredSignaturesEnabled *bool `json:"dnssec_expired_signatures_enabled,omitempty"`
	// A list of zones for which the server does not perform DNSSEC validation.
	DnssecNegativeTrustAnchors []string `json:"dnssec_negative_trust_anchors,omitempty"`
	// Determines if the NXDOMAIN rules for DNSSEC-enabled clients are enabled or not.
	DnssecNxdomainEnabled *bool `json:"dnssec_nxdomain_enabled,omitempty"`
	// Determines if the RPZ policies for DNSSEC-enabled clients are enabled or not.
	DnssecRpzEnabled *bool `json:"dnssec_rpz_enabled,omitempty"`
	// The list of trusted keys for the DNSSEC feature.
	DnssecTrustedKeys []MemberDnsDnssecTrustedKeys `json:"dnssec_trusted_keys,omitempty"`
	// Determines if the DNS security validation is enabled or not.
	DnssecValidationEnabled *bool                   `json:"dnssec_validation_enabled,omitempty"`
	DnstapSetting           *MemberDnsDnstapSetting `json:"dnstap_setting,omitempty"`
	// DNS over HTTPS sessions duration.
	DohHttpsSessionDuration *int64 `json:"doh_https_session_duration,omitempty"`
	// Enables DNS over HTTPS service.
	DohService *bool `json:"doh_service,omitempty"`
	// The list of domains for DNS query capture.
	DomainsToCaptureDnsQueries []string `json:"domains_to_capture_dns_queries,omitempty"`
	// Setting to control specific behavior for DTC DNS responses for incoming lbdn matched queries.
	DtcDnsQueriesSpecificBehavior *string `json:"dtc_dns_queries_specific_behavior,omitempty"`
	// Determines whether to prefer the client address from the edns-client-subnet option for DTC or not.
	DtcEdnsPreferClientSubnet *bool `json:"dtc_edns_prefer_client_subnet,omitempty"`
	// The health check source type.
	DtcHealthSource *string `json:"dtc_health_source,omitempty"`
	// The source address used if dtc_health_source type is \"IP\".
	DtcHealthSourceAddress *string `json:"dtc_health_source_address,omitempty"`
	// Advertises the EDNS0 buffer size to the upstream server. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	EdnsUdpSize *int64 `json:"edns_udp_size,omitempty"`
	// Determines if the blocking of DNS queries is enabled or not. This setting overrides the Grid enable_blackhole settings.
	EnableBlackhole *bool `json:"enable_blackhole,omitempty"`
	// Determines if a blacklist is enabled or not on the Grid member.
	EnableBlacklist *bool `json:"enable_blacklist,omitempty"`
	// The flag that indicates whether the capture of DNS queries is enabled or disabled.
	EnableCaptureDnsQueries *bool `json:"enable_capture_dns_queries,omitempty"`
	// The flag that indicates whether the capture of DNS responses is enabled or disabled.
	EnableCaptureDnsResponses *bool `json:"enable_capture_dns_responses,omitempty"`
	// Determines if the DNS service of a member is enabled or not.
	EnableDns *bool `json:"enable_dns,omitempty"`
	// Determines if the DNS64 support is enabled or not for this member.
	EnableDns64 *bool `json:"enable_dns64,omitempty"`
	// Determines if the DNS Cache Acceleration service is enabled or not for a member.
	EnableDnsCacheAcceleration *bool `json:"enable_dns_cache_acceleration,omitempty"`
	// The flag that indicates whether the DNS health check is enabled or not.
	EnableDnsHealthCheck *bool `json:"enable_dns_health_check,omitempty"`
	// Determines whether the query messages need to be forwarded to DNSTAP or not.
	EnableDnstapQueries *bool `json:"enable_dnstap_queries,omitempty"`
	// Determines whether the response messages need to be forwarded to DNSTAP or not.
	EnableDnstapResponses *bool `json:"enable_dnstap_responses,omitempty"`
	// The flag that indicates whether excluding domain names from captured DNS queries and responses is enabled or disabled.
	EnableExcludedDomainNames *bool `json:"enable_excluded_domain_names,omitempty"`
	// Determines if the fixed RRset order FQDN is enabled or not.
	EnableFixedRrsetOrderFqdns *bool `json:"enable_fixed_rrset_order_fqdns,omitempty"`
	// Determines whether Fault Tolerant Caching (FTC) is enabled.
	EnableFtc *bool `json:"enable_ftc,omitempty"`
	// Determines whether the appliance is enabled to receive GSS-TSIG authenticated updates from DHCP clients.
	EnableGssTsig *bool `json:"enable_gss_tsig,omitempty"`
	// Determines if the notify source port for a member is enabled or not.
	EnableNotifySourcePort *bool `json:"enable_notify_source_port,omitempty"`
	// Determines if the DNS query rewrite is enabled or not for this member.
	EnableQueryRewrite *bool `json:"enable_query_rewrite,omitempty"`
	// Determines if the query source port for a memer is enabled or not.
	EnableQuerySourcePort *bool `json:"enable_query_source_port,omitempty"`
	// The list of domains that are excluded from DNS query and response capture.
	ExcludedDomainNames []string `json:"excluded_domain_names,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs            *map[string]ExtAttrs          `json:"extattrs,omitempty"`
	FileTransferSetting *MemberDnsFileTransferSetting `json:"file_transfer_setting,omitempty"`
	// The type of AAAA filtering for this member DNS object.
	FilterAaaa *string `json:"filter_aaaa,omitempty"`
	// The list of IPv4 addresses and networks from which queries are received. AAAA filtering is applied to these addresses.
	FilterAaaaList []MemberDnsFilterAaaaList `json:"filter_aaaa_list,omitempty"`
	// The fixed RRset order FQDN. If this field does not contain an empty value, the appliance will automatically set the enable_fixed_rrset_order_fqdns field to 'true', unless the same request sets the enable field to 'false'.
	FixedRrsetOrderFqdns []MemberDnsFixedRrsetOrderFqdns `json:"fixed_rrset_order_fqdns,omitempty"`
	// Permits this member to send queries to forwarders only. When the value is \"true\", the member sends queries to forwarders only, and not to other internal or Internet root servers.
	ForwardOnly *bool `json:"forward_only,omitempty"`
	// Allows secondary servers to forward updates to the DNS server. This setting overrides grid update settings.
	ForwardUpdates *bool `json:"forward_updates,omitempty"`
	// The forwarders for the member. A forwarder is essentially a name server to which other name servers first send all of their off-site queries. The forwarder builds up a cache of information, avoiding the need for the other name servers to send queries off-site. This setting overrides the Grid level setting.
	Forwarders []string `json:"forwarders,omitempty"`
	// The timeout interval (in seconds) after which the expired Fault Tolerant Caching (FTC)record is stale and no longer valid.
	FtcExpiredRecordTimeout *int64 `json:"ftc_expired_record_timeout,omitempty"`
	// The TTL value (in seconds) of the expired Fault Tolerant Caching (FTC) record in DNS responses.
	FtcExpiredRecordTtl *int64 `json:"ftc_expired_record_ttl,omitempty"`
	// The list of glue record addresses.
	GlueRecordAddresses []MemberDnsGlueRecordAddresses `json:"glue_record_addresses,omitempty"`
	// The list of GSS-TSIG keys for a member DNS object.
	GssTsigKeys []string `json:"gss_tsig_keys,omitempty"`
	// The host name of the Grid member.
	HostName *string `json:"host_name,omitempty"`
	// The IPv4 Address of the Grid member.
	Ipv4addr *string `json:"ipv4addr,omitempty"`
	// The list of IPv6 glue record addresses.
	Ipv6GlueRecordAddresses []MemberDnsIpv6GlueRecordAddresses `json:"ipv6_glue_record_addresses,omitempty"`
	// The IPv6 Address of the Grid member.
	Ipv6addr          *string                     `json:"ipv6addr,omitempty"`
	LoggingCategories *MemberDnsLoggingCategories `json:"logging_categories,omitempty"`
	// The maximum time (in seconds) for which the server will cache positive answers.
	MaxCacheTtl *int64 `json:"max_cache_ttl,omitempty"`
	// The maximum time in seconds a DNS response can be stored in the hardware acceleration cache. Valid values are unsigned integer between 60 and 86400, inclusive.
	MaxCachedLifetime *int64 `json:"max_cached_lifetime,omitempty"`
	// The maximum time (in seconds) for which the server will cache negative (NXDOMAIN) responses. The maximum allowed value is 604800.
	MaxNcacheTtl *int64 `json:"max_ncache_ttl,omitempty"`
	// The value is used by authoritative DNS servers to never send DNS responses larger than the configured value. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	MaxUdpSize *int64 `json:"max_udp_size,omitempty"`
	// Enables the ability to return a minimal amount of data in response to a query. This capability speeds up the DNS services provided by the appliance.
	MinimalResp *bool `json:"minimal_resp,omitempty"`
	// Specifies the number of seconds of delay the notify messages are sent to secondaries.
	NotifyDelay *int64 `json:"notify_delay,omitempty"`
	// The source port for notify messages. When requesting zone transfers from the primary server, some secondary DNS servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request. This setting overrides Grid static source port settings. Valid values are between 1 and 63999. The default is selected by BIND.
	NotifySourcePort *int64 `json:"notify_source_port,omitempty"`
	// Determines if NXDOMAIN redirection queries are logged or not.
	NxdomainLogQuery *bool `json:"nxdomain_log_query,omitempty"`
	// Enables NXDOMAIN redirection.
	NxdomainRedirect *bool `json:"nxdomain_redirect,omitempty"`
	// The IPv4 NXDOMAIN redirection addresses.
	NxdomainRedirectAddresses []string `json:"nxdomain_redirect_addresses,omitempty"`
	// The IPv6 NXDOMAIN redirection addresses.
	NxdomainRedirectAddressesV6 []string `json:"nxdomain_redirect_addresses_v6,omitempty"`
	// The TTL value of synthetic DNS responses that result from NXDOMAIN redirection.
	NxdomainRedirectTtl *int64 `json:"nxdomain_redirect_ttl,omitempty"`
	// The names of the Ruleset objects assigned at the Grid level for NXDOMAIN redirection.
	NxdomainRulesets []string `json:"nxdomain_rulesets,omitempty"`
	// The source port for queries. Specifying a source port number for recursive queries ensures that a firewall will allow the response. Valid values are between 1 and 63999. The default is selected by BIND.
	QuerySourcePort *int64 `json:"query_source_port,omitempty"`
	// The record name restriction policy.
	RecordNamePolicy *string `json:"record_name_policy,omitempty"`
	// A limit on the number of concurrent recursive clients.
	RecursiveClientLimit *int64 `json:"recursive_client_limit,omitempty"`
	// The list of IPv4 or IPv6 addresses, networks or hosts authenticated by Transaction signature (TSIG) key from which recursive queries are allowed or denied.
	RecursiveQueryList []MemberDnsRecursiveQueryList `json:"recursive_query_list,omitempty"`
	// The recursive resolver for member DNS. UNBOUND support has been deprecated from NIOS 9.0 onwards.
	RecursiveResolver *string `json:"recursive_resolver,omitempty"`
	// The recursive query timeout for the member. The value must be 0 or between 10 and 30.
	ResolverQueryTimeout *int64                         `json:"resolver_query_timeout,omitempty"`
	ResponseRateLimiting *MemberDnsResponseRateLimiting `json:"response_rate_limiting,omitempty"`
	// Determines the type of root name servers.
	RootNameServerType *string `json:"root_name_server_type,omitempty"`
	// Enables NSDNAME and NSIP resource records from RPZ feeds at member level.
	RpzDisableNsdnameNsip *bool `json:"rpz_disable_nsdname_nsip,omitempty"`
	// Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.
	RpzDropIpRuleEnabled *bool `json:"rpz_drop_ip_rule_enabled,omitempty"`
	// The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv4 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv4,omitempty"`
	// The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv6 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv6,omitempty"`
	// The flag that indicates whether recursive RPZ lookups are enabled.
	RpzQnameWaitRecurse *bool `json:"rpz_qname_wait_recurse,omitempty"`
	// The number of maximum concurrent SOA queries per second for the member.
	SerialQueryRate *int64 `json:"serial_query_rate,omitempty"`
	// The value of the server-id directive for BIND and Unbound DNS.
	ServerIdDirective *string `json:"server_id_directive,omitempty"`
	// The value of the user-defined hostname directive for BIND DNS. To enable user-defined hostname directive, you must set the bind_hostname_directive to \"USER_DEFINED\".
	ServerIdDirectiveString *string `json:"server_id_directive_string,omitempty"`
	// Determines if RPZ rules are applied to queries originated from this member and received by other Grid members.
	SkipInGridRpzQueries *bool `json:"skip_in_grid_rpz_queries,omitempty"`
	// A sort list determines the order of addresses in responses made to DNS queries. This setting overrides Grid sort list settings.
	Sortlist []MemberDnsSortlist `json:"sortlist,omitempty"`
	// The flag that indicates whether the storage of query capture reports on the appliance is enabled or disabled.
	StoreLocally *bool `json:"store_locally,omitempty"`
	// The syslog facility. This is the location on the syslog server to which you want to sort the DNS logging messages. This setting overrides the Grid logging facility settings.
	SyslogFacility *string `json:"syslog_facility,omitempty"`
	// TCP Idle timeout for DNS over TLS connections.
	TcpIdleTimeout *int64 `json:"tcp_idle_timeout,omitempty"`
	// DNS over TLS sessions duration.
	TlsSessionDuration *int64 `json:"tls_session_duration,omitempty"`
	// Excludes specified DNS servers during zone transfers.
	TransferExcludedServers []string `json:"transfer_excluded_servers,omitempty"`
	// The BIND format for a zone transfer. This provides tracking capabilities for single or multiple transfers and their associated servers.
	TransferFormat *string `json:"transfer_format,omitempty"`
	// The number of maximum concurrent transfers for the member.
	TransfersIn *int64 `json:"transfers_in,omitempty"`
	// The number of maximum outbound concurrent zone transfers for the member.
	TransfersOut *int64 `json:"transfers_out,omitempty"`
	// The number of maximum concurrent transfers per member for the member.
	TransfersPerNs *int64 `json:"transfers_per_ns,omitempty"`
	// Use flag for: add_client_ip_mac_options
	UseAddClientIpMacOptions *bool `json:"use_add_client_ip_mac_options,omitempty"`
	// Use flag for: allow_query
	UseAllowQuery *bool `json:"use_allow_query,omitempty"`
	// Use flag for: allow_transfer
	UseAllowTransfer *bool `json:"use_allow_transfer,omitempty"`
	// Use flag for: attack_mitigation
	UseAttackMitigation *bool `json:"use_attack_mitigation,omitempty"`
	// Use flag for: auto_blackhole
	UseAutoBlackhole *bool `json:"use_auto_blackhole,omitempty"`
	// Use flag for: bind_hostname_directive
	UseBindHostnameDirective *bool `json:"use_bind_hostname_directive,omitempty"`
	// Use flag for: enable_blackhole
	UseBlackhole *bool `json:"use_blackhole,omitempty"`
	// Use flag for: blackhole_list , blacklist_action, blacklist_log_query, blacklist_redirect_addresses, blacklist_redirect_ttl, blacklist_rulesets, enable_blacklist
	UseBlacklist *bool `json:"use_blacklist,omitempty"`
	// Use flag for: capture_dns_queries_on_all_domains
	UseCaptureDnsQueriesOnAllDomains *bool `json:"use_capture_dns_queries_on_all_domains,omitempty"`
	// Use flag for: copy_client_ip_mac_options
	UseCopyClientIpMacOptions *bool `json:"use_copy_client_ip_mac_options,omitempty"`
	// Use flag for: copy_xfer_to_notify
	UseCopyXferToNotify *bool `json:"use_copy_xfer_to_notify,omitempty"`
	// Use flag for: disable_edns
	UseDisableEdns *bool `json:"use_disable_edns,omitempty"`
	// Use flag for: enable_dns64 , dns64_groups
	UseDns64 *bool `json:"use_dns64,omitempty"`
	// Use flag for: dns_cache_acceleration_ttl
	UseDnsCacheAccelerationTtl *bool `json:"use_dns_cache_acceleration_ttl,omitempty"`
	// Use flag for: dns_health_check_domain_list , dns_health_check_recursion_flag, dns_health_check_anycast_control, enable_dns_health_check, dns_health_check_interval, dns_health_check_timeout, dns_health_check_retries
	UseDnsHealthCheck *bool `json:"use_dns_health_check,omitempty"`
	// Use flag for: dnssec_enabled , dnssec_expired_signatures_enabled, dnssec_validation_enabled, dnssec_trusted_keys
	UseDnssec *bool `json:"use_dnssec,omitempty"`
	// Use flag for: enable_dnstap_queries , enable_dnstap_responses, enable_dnstap_violations_tls, dnstap_setting
	UseDnstapSetting *bool `json:"use_dnstap_setting,omitempty"`
	// Use flag for: dtc_dns_queries_specific_behavior
	UseDtcDnsQueriesSpecificBehavior *bool `json:"use_dtc_dns_queries_specific_behavior,omitempty"`
	// Use flag for: dtc_edns_prefer_client_subnet
	UseDtcEdnsPreferClientSubnet *bool `json:"use_dtc_edns_prefer_client_subnet,omitempty"`
	// Use flag for: edns_udp_size
	UseEdnsUdpSize *bool `json:"use_edns_udp_size,omitempty"`
	// Use flag for: enable_capture_dns_queries , enable_capture_dns_responses
	UseEnableCaptureDns *bool `json:"use_enable_capture_dns,omitempty"`
	// Use flag for: enable_excluded_domain_names
	UseEnableExcludedDomainNames *bool `json:"use_enable_excluded_domain_names,omitempty"`
	// Use flag for: enable_gss_tsig
	UseEnableGssTsig *bool `json:"use_enable_gss_tsig,omitempty"`
	// Use flag for: enable_query_rewrite
	UseEnableQueryRewrite *bool `json:"use_enable_query_rewrite,omitempty"`
	// Use flag for: filter_aaaa , filter_aaaa_list
	UseFilterAaaa *bool `json:"use_filter_aaaa,omitempty"`
	// Use flag for: fixed_rrset_order_fqdns , enable_fixed_rrset_order_fqdns
	UseFixedRrsetOrderFqdns *bool `json:"use_fixed_rrset_order_fqdns,omitempty"`
	// Use flag for: forward_updates
	UseForwardUpdates *bool `json:"use_forward_updates,omitempty"`
	// Use flag for: forwarders , forward_only
	UseForwarders *bool `json:"use_forwarders,omitempty"`
	// Use flag for: enable_ftc , ftc_expired_record_ttl, ftc_expired_record_timeout
	UseFtc *bool `json:"use_ftc,omitempty"`
	// Use flag for: gss_tsig_keys
	UseGssTsigKeys *bool `json:"use_gss_tsig_keys,omitempty"`
	// Determines if the DNS service on the IPv6 LAN2 port is enabled or not.
	UseLan2Ipv6Port *bool `json:"use_lan2_ipv6_port,omitempty"`
	// Determines if the DNS service on the LAN2 port is enabled or not.
	UseLan2Port *bool `json:"use_lan2_port,omitempty"`
	// Determines if the DNS service on the IPv6 LAN port is enabled or not.
	UseLanIpv6Port *bool `json:"use_lan_ipv6_port,omitempty"`
	// Determines the status of the use of DNS services on the IPv4 LAN1 port.
	UseLanPort *bool `json:"use_lan_port,omitempty"`
	// Use flag for: logging_categories
	UseLoggingCategories *bool `json:"use_logging_categories,omitempty"`
	// Use flag for: max_cache_ttl
	UseMaxCacheTtl *bool `json:"use_max_cache_ttl,omitempty"`
	// Use flag for: max_cached_lifetime
	UseMaxCachedLifetime *bool `json:"use_max_cached_lifetime,omitempty"`
	// Use flag for: max_ncache_ttl
	UseMaxNcacheTtl *bool `json:"use_max_ncache_ttl,omitempty"`
	// Use flag for: max_udp_size
	UseMaxUdpSize *bool `json:"use_max_udp_size,omitempty"`
	// Determines if the DNS services on the IPv6 MGMT port is enabled or not.
	UseMgmtIpv6Port *bool `json:"use_mgmt_ipv6_port,omitempty"`
	// Determines if the DNS services on the MGMT port is enabled or not.
	UseMgmtPort *bool `json:"use_mgmt_port,omitempty"`
	// Use flag for: notify_delay
	UseNotifyDelay *bool `json:"use_notify_delay,omitempty"`
	// Use flag for: nxdomain_redirect , nxdomain_redirect_addresses, nxdomain_redirect_addresses_v6, nxdomain_redirect_ttl, nxdomain_log_query, nxdomain_rulesets
	UseNxdomainRedirect *bool `json:"use_nxdomain_redirect,omitempty"`
	// Use flag for: record_name_policy
	UseRecordNamePolicy *bool `json:"use_record_name_policy,omitempty"`
	// Use flag for: recursive_client_limit
	UseRecursiveClientLimit *bool `json:"use_recursive_client_limit,omitempty"`
	// Use flag for: allow_recursive_query , recursive_query_list
	UseRecursiveQuerySetting *bool `json:"use_recursive_query_setting,omitempty"`
	// Use flag for: resolver_query_timeout
	UseResolverQueryTimeout *bool `json:"use_resolver_query_timeout,omitempty"`
	// Use flag for: response_rate_limiting
	UseResponseRateLimiting *bool `json:"use_response_rate_limiting,omitempty"`
	// Use flag for: root_name_server_type , custom_root_name_servers, use_root_server_for_all_views
	UseRootNameServer *bool `json:"use_root_name_server,omitempty"`
	// Determines if root name servers should be applied to all views or only to Default view.
	UseRootServerForAllViews *bool `json:"use_root_server_for_all_views,omitempty"`
	// Use flag for: rpz_disable_nsdname_nsip
	UseRpzDisableNsdnameNsip *bool `json:"use_rpz_disable_nsdname_nsip,omitempty"`
	// Use flag for: rpz_drop_ip_rule_enabled , rpz_drop_ip_rule_min_prefix_length_ipv4, rpz_drop_ip_rule_min_prefix_length_ipv6
	UseRpzDropIpRule *bool `json:"use_rpz_drop_ip_rule,omitempty"`
	// Use flag for: rpz_qname_wait_recurse
	UseRpzQnameWaitRecurse *bool `json:"use_rpz_qname_wait_recurse,omitempty"`
	// Use flag for: serial_query_rate
	UseSerialQueryRate *bool `json:"use_serial_query_rate,omitempty"`
	// Use flag for: server_id_directive
	UseServerIdDirective *bool `json:"use_server_id_directive,omitempty"`
	// Use flag for: sortlist
	UseSortlist *bool `json:"use_sortlist,omitempty"`
	// Use flag for: enable_notify_source_port , notify_source_port, enable_query_source_port, query_source_port
	UseSourcePorts *bool `json:"use_source_ports,omitempty"`
	// Use flag for: syslog_facility
	UseSyslogFacility *bool `json:"use_syslog_facility,omitempty"`
	// Use flag for: transfers_in
	UseTransfersIn *bool `json:"use_transfers_in,omitempty"`
	// Use flag for: transfers_out
	UseTransfersOut *bool `json:"use_transfers_out,omitempty"`
	// Use flag for: transfers_per_ns
	UseTransfersPerNs *bool `json:"use_transfers_per_ns,omitempty"`
	// Use flag for: allow_update , allow_gss_tsig_zone_updates
	UseUpdateSetting *bool `json:"use_update_setting,omitempty"`
	// Use flag for: transfer_excluded_servers , transfer_format
	UseZoneTransferFormat *bool `json:"use_zone_transfer_format,omitempty"`
	// The list of views associated with this member.
	Views []string `json:"views,omitempty"`
}

// NewMemberDns instantiates a new MemberDns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDns() *MemberDns {
	this := MemberDns{}
	return &this
}

// NewMemberDnsWithDefaults instantiates a new MemberDns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDnsWithDefaults() *MemberDns {
	this := MemberDns{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *MemberDns) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *MemberDns) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *MemberDns) SetRef(v string) {
	o.Ref = &v
}

// GetAddClientIpMacOptions returns the AddClientIpMacOptions field value if set, zero value otherwise.
func (o *MemberDns) GetAddClientIpMacOptions() bool {
	if o == nil || IsNil(o.AddClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.AddClientIpMacOptions
}

// GetAddClientIpMacOptionsOk returns a tuple with the AddClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAddClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.AddClientIpMacOptions) {
		return nil, false
	}
	return o.AddClientIpMacOptions, true
}

// HasAddClientIpMacOptions returns a boolean if a field has been set.
func (o *MemberDns) HasAddClientIpMacOptions() bool {
	if o != nil && !IsNil(o.AddClientIpMacOptions) {
		return true
	}

	return false
}

// SetAddClientIpMacOptions gets a reference to the given bool and assigns it to the AddClientIpMacOptions field.
func (o *MemberDns) SetAddClientIpMacOptions(v bool) {
	o.AddClientIpMacOptions = &v
}

// GetAdditionalIpList returns the AdditionalIpList field value if set, zero value otherwise.
func (o *MemberDns) GetAdditionalIpList() []string {
	if o == nil || IsNil(o.AdditionalIpList) {
		var ret []string
		return ret
	}
	return o.AdditionalIpList
}

// GetAdditionalIpListOk returns a tuple with the AdditionalIpList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAdditionalIpListOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalIpList) {
		return nil, false
	}
	return o.AdditionalIpList, true
}

// HasAdditionalIpList returns a boolean if a field has been set.
func (o *MemberDns) HasAdditionalIpList() bool {
	if o != nil && !IsNil(o.AdditionalIpList) {
		return true
	}

	return false
}

// SetAdditionalIpList gets a reference to the given []string and assigns it to the AdditionalIpList field.
func (o *MemberDns) SetAdditionalIpList(v []string) {
	o.AdditionalIpList = v
}

// GetAdditionalIpListStruct returns the AdditionalIpListStruct field value if set, zero value otherwise.
func (o *MemberDns) GetAdditionalIpListStruct() []MemberDnsAdditionalIpListStruct {
	if o == nil || IsNil(o.AdditionalIpListStruct) {
		var ret []MemberDnsAdditionalIpListStruct
		return ret
	}
	return o.AdditionalIpListStruct
}

// GetAdditionalIpListStructOk returns a tuple with the AdditionalIpListStruct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAdditionalIpListStructOk() ([]MemberDnsAdditionalIpListStruct, bool) {
	if o == nil || IsNil(o.AdditionalIpListStruct) {
		return nil, false
	}
	return o.AdditionalIpListStruct, true
}

// HasAdditionalIpListStruct returns a boolean if a field has been set.
func (o *MemberDns) HasAdditionalIpListStruct() bool {
	if o != nil && !IsNil(o.AdditionalIpListStruct) {
		return true
	}

	return false
}

// SetAdditionalIpListStruct gets a reference to the given []MemberDnsAdditionalIpListStruct and assigns it to the AdditionalIpListStruct field.
func (o *MemberDns) SetAdditionalIpListStruct(v []MemberDnsAdditionalIpListStruct) {
	o.AdditionalIpListStruct = v
}

// GetAllowGssTsigZoneUpdates returns the AllowGssTsigZoneUpdates field value if set, zero value otherwise.
func (o *MemberDns) GetAllowGssTsigZoneUpdates() bool {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		var ret bool
		return ret
	}
	return *o.AllowGssTsigZoneUpdates
}

// GetAllowGssTsigZoneUpdatesOk returns a tuple with the AllowGssTsigZoneUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAllowGssTsigZoneUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGssTsigZoneUpdates) {
		return nil, false
	}
	return o.AllowGssTsigZoneUpdates, true
}

// HasAllowGssTsigZoneUpdates returns a boolean if a field has been set.
func (o *MemberDns) HasAllowGssTsigZoneUpdates() bool {
	if o != nil && !IsNil(o.AllowGssTsigZoneUpdates) {
		return true
	}

	return false
}

// SetAllowGssTsigZoneUpdates gets a reference to the given bool and assigns it to the AllowGssTsigZoneUpdates field.
func (o *MemberDns) SetAllowGssTsigZoneUpdates(v bool) {
	o.AllowGssTsigZoneUpdates = &v
}

// GetAllowQuery returns the AllowQuery field value if set, zero value otherwise.
func (o *MemberDns) GetAllowQuery() []MemberDnsAllowQuery {
	if o == nil || IsNil(o.AllowQuery) {
		var ret []MemberDnsAllowQuery
		return ret
	}
	return o.AllowQuery
}

// GetAllowQueryOk returns a tuple with the AllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAllowQueryOk() ([]MemberDnsAllowQuery, bool) {
	if o == nil || IsNil(o.AllowQuery) {
		return nil, false
	}
	return o.AllowQuery, true
}

// HasAllowQuery returns a boolean if a field has been set.
func (o *MemberDns) HasAllowQuery() bool {
	if o != nil && !IsNil(o.AllowQuery) {
		return true
	}

	return false
}

// SetAllowQuery gets a reference to the given []MemberDnsAllowQuery and assigns it to the AllowQuery field.
func (o *MemberDns) SetAllowQuery(v []MemberDnsAllowQuery) {
	o.AllowQuery = v
}

// GetAllowRecursiveQuery returns the AllowRecursiveQuery field value if set, zero value otherwise.
func (o *MemberDns) GetAllowRecursiveQuery() bool {
	if o == nil || IsNil(o.AllowRecursiveQuery) {
		var ret bool
		return ret
	}
	return *o.AllowRecursiveQuery
}

// GetAllowRecursiveQueryOk returns a tuple with the AllowRecursiveQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAllowRecursiveQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRecursiveQuery) {
		return nil, false
	}
	return o.AllowRecursiveQuery, true
}

// HasAllowRecursiveQuery returns a boolean if a field has been set.
func (o *MemberDns) HasAllowRecursiveQuery() bool {
	if o != nil && !IsNil(o.AllowRecursiveQuery) {
		return true
	}

	return false
}

// SetAllowRecursiveQuery gets a reference to the given bool and assigns it to the AllowRecursiveQuery field.
func (o *MemberDns) SetAllowRecursiveQuery(v bool) {
	o.AllowRecursiveQuery = &v
}

// GetAllowTransfer returns the AllowTransfer field value if set, zero value otherwise.
func (o *MemberDns) GetAllowTransfer() []MemberDnsAllowTransfer {
	if o == nil || IsNil(o.AllowTransfer) {
		var ret []MemberDnsAllowTransfer
		return ret
	}
	return o.AllowTransfer
}

// GetAllowTransferOk returns a tuple with the AllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAllowTransferOk() ([]MemberDnsAllowTransfer, bool) {
	if o == nil || IsNil(o.AllowTransfer) {
		return nil, false
	}
	return o.AllowTransfer, true
}

// HasAllowTransfer returns a boolean if a field has been set.
func (o *MemberDns) HasAllowTransfer() bool {
	if o != nil && !IsNil(o.AllowTransfer) {
		return true
	}

	return false
}

// SetAllowTransfer gets a reference to the given []MemberDnsAllowTransfer and assigns it to the AllowTransfer field.
func (o *MemberDns) SetAllowTransfer(v []MemberDnsAllowTransfer) {
	o.AllowTransfer = v
}

// GetAllowUpdate returns the AllowUpdate field value if set, zero value otherwise.
func (o *MemberDns) GetAllowUpdate() []MemberDnsAllowUpdate {
	if o == nil || IsNil(o.AllowUpdate) {
		var ret []MemberDnsAllowUpdate
		return ret
	}
	return o.AllowUpdate
}

// GetAllowUpdateOk returns a tuple with the AllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAllowUpdateOk() ([]MemberDnsAllowUpdate, bool) {
	if o == nil || IsNil(o.AllowUpdate) {
		return nil, false
	}
	return o.AllowUpdate, true
}

// HasAllowUpdate returns a boolean if a field has been set.
func (o *MemberDns) HasAllowUpdate() bool {
	if o != nil && !IsNil(o.AllowUpdate) {
		return true
	}

	return false
}

// SetAllowUpdate gets a reference to the given []MemberDnsAllowUpdate and assigns it to the AllowUpdate field.
func (o *MemberDns) SetAllowUpdate(v []MemberDnsAllowUpdate) {
	o.AllowUpdate = v
}

// GetAnonymizeResponseLogging returns the AnonymizeResponseLogging field value if set, zero value otherwise.
func (o *MemberDns) GetAnonymizeResponseLogging() bool {
	if o == nil || IsNil(o.AnonymizeResponseLogging) {
		var ret bool
		return ret
	}
	return *o.AnonymizeResponseLogging
}

// GetAnonymizeResponseLoggingOk returns a tuple with the AnonymizeResponseLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAnonymizeResponseLoggingOk() (*bool, bool) {
	if o == nil || IsNil(o.AnonymizeResponseLogging) {
		return nil, false
	}
	return o.AnonymizeResponseLogging, true
}

// HasAnonymizeResponseLogging returns a boolean if a field has been set.
func (o *MemberDns) HasAnonymizeResponseLogging() bool {
	if o != nil && !IsNil(o.AnonymizeResponseLogging) {
		return true
	}

	return false
}

// SetAnonymizeResponseLogging gets a reference to the given bool and assigns it to the AnonymizeResponseLogging field.
func (o *MemberDns) SetAnonymizeResponseLogging(v bool) {
	o.AnonymizeResponseLogging = &v
}

// GetAtcFwdEnable returns the AtcFwdEnable field value if set, zero value otherwise.
func (o *MemberDns) GetAtcFwdEnable() bool {
	if o == nil || IsNil(o.AtcFwdEnable) {
		var ret bool
		return ret
	}
	return *o.AtcFwdEnable
}

// GetAtcFwdEnableOk returns a tuple with the AtcFwdEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAtcFwdEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.AtcFwdEnable) {
		return nil, false
	}
	return o.AtcFwdEnable, true
}

// HasAtcFwdEnable returns a boolean if a field has been set.
func (o *MemberDns) HasAtcFwdEnable() bool {
	if o != nil && !IsNil(o.AtcFwdEnable) {
		return true
	}

	return false
}

// SetAtcFwdEnable gets a reference to the given bool and assigns it to the AtcFwdEnable field.
func (o *MemberDns) SetAtcFwdEnable(v bool) {
	o.AtcFwdEnable = &v
}

// GetAttackMitigation returns the AttackMitigation field value if set, zero value otherwise.
func (o *MemberDns) GetAttackMitigation() MemberDnsAttackMitigation {
	if o == nil || IsNil(o.AttackMitigation) {
		var ret MemberDnsAttackMitigation
		return ret
	}
	return *o.AttackMitigation
}

// GetAttackMitigationOk returns a tuple with the AttackMitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAttackMitigationOk() (*MemberDnsAttackMitigation, bool) {
	if o == nil || IsNil(o.AttackMitigation) {
		return nil, false
	}
	return o.AttackMitigation, true
}

// HasAttackMitigation returns a boolean if a field has been set.
func (o *MemberDns) HasAttackMitigation() bool {
	if o != nil && !IsNil(o.AttackMitigation) {
		return true
	}

	return false
}

// SetAttackMitigation gets a reference to the given MemberDnsAttackMitigation and assigns it to the AttackMitigation field.
func (o *MemberDns) SetAttackMitigation(v MemberDnsAttackMitigation) {
	o.AttackMitigation = &v
}

// GetAutoBlackhole returns the AutoBlackhole field value if set, zero value otherwise.
func (o *MemberDns) GetAutoBlackhole() MemberDnsAutoBlackhole {
	if o == nil || IsNil(o.AutoBlackhole) {
		var ret MemberDnsAutoBlackhole
		return ret
	}
	return *o.AutoBlackhole
}

// GetAutoBlackholeOk returns a tuple with the AutoBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAutoBlackholeOk() (*MemberDnsAutoBlackhole, bool) {
	if o == nil || IsNil(o.AutoBlackhole) {
		return nil, false
	}
	return o.AutoBlackhole, true
}

// HasAutoBlackhole returns a boolean if a field has been set.
func (o *MemberDns) HasAutoBlackhole() bool {
	if o != nil && !IsNil(o.AutoBlackhole) {
		return true
	}

	return false
}

// SetAutoBlackhole gets a reference to the given MemberDnsAutoBlackhole and assigns it to the AutoBlackhole field.
func (o *MemberDns) SetAutoBlackhole(v MemberDnsAutoBlackhole) {
	o.AutoBlackhole = &v
}

// GetAutoCreateAAndPtrForLan2 returns the AutoCreateAAndPtrForLan2 field value if set, zero value otherwise.
func (o *MemberDns) GetAutoCreateAAndPtrForLan2() bool {
	if o == nil || IsNil(o.AutoCreateAAndPtrForLan2) {
		var ret bool
		return ret
	}
	return *o.AutoCreateAAndPtrForLan2
}

// GetAutoCreateAAndPtrForLan2Ok returns a tuple with the AutoCreateAAndPtrForLan2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAutoCreateAAndPtrForLan2Ok() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateAAndPtrForLan2) {
		return nil, false
	}
	return o.AutoCreateAAndPtrForLan2, true
}

// HasAutoCreateAAndPtrForLan2 returns a boolean if a field has been set.
func (o *MemberDns) HasAutoCreateAAndPtrForLan2() bool {
	if o != nil && !IsNil(o.AutoCreateAAndPtrForLan2) {
		return true
	}

	return false
}

// SetAutoCreateAAndPtrForLan2 gets a reference to the given bool and assigns it to the AutoCreateAAndPtrForLan2 field.
func (o *MemberDns) SetAutoCreateAAndPtrForLan2(v bool) {
	o.AutoCreateAAndPtrForLan2 = &v
}

// GetAutoCreateAaaaAndIpv6ptrForLan2 returns the AutoCreateAaaaAndIpv6ptrForLan2 field value if set, zero value otherwise.
func (o *MemberDns) GetAutoCreateAaaaAndIpv6ptrForLan2() bool {
	if o == nil || IsNil(o.AutoCreateAaaaAndIpv6ptrForLan2) {
		var ret bool
		return ret
	}
	return *o.AutoCreateAaaaAndIpv6ptrForLan2
}

// GetAutoCreateAaaaAndIpv6ptrForLan2Ok returns a tuple with the AutoCreateAaaaAndIpv6ptrForLan2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAutoCreateAaaaAndIpv6ptrForLan2Ok() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateAaaaAndIpv6ptrForLan2) {
		return nil, false
	}
	return o.AutoCreateAaaaAndIpv6ptrForLan2, true
}

// HasAutoCreateAaaaAndIpv6ptrForLan2 returns a boolean if a field has been set.
func (o *MemberDns) HasAutoCreateAaaaAndIpv6ptrForLan2() bool {
	if o != nil && !IsNil(o.AutoCreateAaaaAndIpv6ptrForLan2) {
		return true
	}

	return false
}

// SetAutoCreateAaaaAndIpv6ptrForLan2 gets a reference to the given bool and assigns it to the AutoCreateAaaaAndIpv6ptrForLan2 field.
func (o *MemberDns) SetAutoCreateAaaaAndIpv6ptrForLan2(v bool) {
	o.AutoCreateAaaaAndIpv6ptrForLan2 = &v
}

// GetAutoSortViews returns the AutoSortViews field value if set, zero value otherwise.
func (o *MemberDns) GetAutoSortViews() bool {
	if o == nil || IsNil(o.AutoSortViews) {
		var ret bool
		return ret
	}
	return *o.AutoSortViews
}

// GetAutoSortViewsOk returns a tuple with the AutoSortViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetAutoSortViewsOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoSortViews) {
		return nil, false
	}
	return o.AutoSortViews, true
}

// HasAutoSortViews returns a boolean if a field has been set.
func (o *MemberDns) HasAutoSortViews() bool {
	if o != nil && !IsNil(o.AutoSortViews) {
		return true
	}

	return false
}

// SetAutoSortViews gets a reference to the given bool and assigns it to the AutoSortViews field.
func (o *MemberDns) SetAutoSortViews(v bool) {
	o.AutoSortViews = &v
}

// GetBindCheckNamesPolicy returns the BindCheckNamesPolicy field value if set, zero value otherwise.
func (o *MemberDns) GetBindCheckNamesPolicy() string {
	if o == nil || IsNil(o.BindCheckNamesPolicy) {
		var ret string
		return ret
	}
	return *o.BindCheckNamesPolicy
}

// GetBindCheckNamesPolicyOk returns a tuple with the BindCheckNamesPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBindCheckNamesPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.BindCheckNamesPolicy) {
		return nil, false
	}
	return o.BindCheckNamesPolicy, true
}

// HasBindCheckNamesPolicy returns a boolean if a field has been set.
func (o *MemberDns) HasBindCheckNamesPolicy() bool {
	if o != nil && !IsNil(o.BindCheckNamesPolicy) {
		return true
	}

	return false
}

// SetBindCheckNamesPolicy gets a reference to the given string and assigns it to the BindCheckNamesPolicy field.
func (o *MemberDns) SetBindCheckNamesPolicy(v string) {
	o.BindCheckNamesPolicy = &v
}

// GetBindHostnameDirective returns the BindHostnameDirective field value if set, zero value otherwise.
func (o *MemberDns) GetBindHostnameDirective() string {
	if o == nil || IsNil(o.BindHostnameDirective) {
		var ret string
		return ret
	}
	return *o.BindHostnameDirective
}

// GetBindHostnameDirectiveOk returns a tuple with the BindHostnameDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBindHostnameDirectiveOk() (*string, bool) {
	if o == nil || IsNil(o.BindHostnameDirective) {
		return nil, false
	}
	return o.BindHostnameDirective, true
}

// HasBindHostnameDirective returns a boolean if a field has been set.
func (o *MemberDns) HasBindHostnameDirective() bool {
	if o != nil && !IsNil(o.BindHostnameDirective) {
		return true
	}

	return false
}

// SetBindHostnameDirective gets a reference to the given string and assigns it to the BindHostnameDirective field.
func (o *MemberDns) SetBindHostnameDirective(v string) {
	o.BindHostnameDirective = &v
}

// GetBindHostnameDirectiveFqdn returns the BindHostnameDirectiveFqdn field value if set, zero value otherwise.
func (o *MemberDns) GetBindHostnameDirectiveFqdn() string {
	if o == nil || IsNil(o.BindHostnameDirectiveFqdn) {
		var ret string
		return ret
	}
	return *o.BindHostnameDirectiveFqdn
}

// GetBindHostnameDirectiveFqdnOk returns a tuple with the BindHostnameDirectiveFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBindHostnameDirectiveFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.BindHostnameDirectiveFqdn) {
		return nil, false
	}
	return o.BindHostnameDirectiveFqdn, true
}

// HasBindHostnameDirectiveFqdn returns a boolean if a field has been set.
func (o *MemberDns) HasBindHostnameDirectiveFqdn() bool {
	if o != nil && !IsNil(o.BindHostnameDirectiveFqdn) {
		return true
	}

	return false
}

// SetBindHostnameDirectiveFqdn gets a reference to the given string and assigns it to the BindHostnameDirectiveFqdn field.
func (o *MemberDns) SetBindHostnameDirectiveFqdn(v string) {
	o.BindHostnameDirectiveFqdn = &v
}

// GetBlackholeList returns the BlackholeList field value if set, zero value otherwise.
func (o *MemberDns) GetBlackholeList() []MemberDnsBlackholeList {
	if o == nil || IsNil(o.BlackholeList) {
		var ret []MemberDnsBlackholeList
		return ret
	}
	return o.BlackholeList
}

// GetBlackholeListOk returns a tuple with the BlackholeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlackholeListOk() ([]MemberDnsBlackholeList, bool) {
	if o == nil || IsNil(o.BlackholeList) {
		return nil, false
	}
	return o.BlackholeList, true
}

// HasBlackholeList returns a boolean if a field has been set.
func (o *MemberDns) HasBlackholeList() bool {
	if o != nil && !IsNil(o.BlackholeList) {
		return true
	}

	return false
}

// SetBlackholeList gets a reference to the given []MemberDnsBlackholeList and assigns it to the BlackholeList field.
func (o *MemberDns) SetBlackholeList(v []MemberDnsBlackholeList) {
	o.BlackholeList = v
}

// GetBlacklistAction returns the BlacklistAction field value if set, zero value otherwise.
func (o *MemberDns) GetBlacklistAction() string {
	if o == nil || IsNil(o.BlacklistAction) {
		var ret string
		return ret
	}
	return *o.BlacklistAction
}

// GetBlacklistActionOk returns a tuple with the BlacklistAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlacklistActionOk() (*string, bool) {
	if o == nil || IsNil(o.BlacklistAction) {
		return nil, false
	}
	return o.BlacklistAction, true
}

// HasBlacklistAction returns a boolean if a field has been set.
func (o *MemberDns) HasBlacklistAction() bool {
	if o != nil && !IsNil(o.BlacklistAction) {
		return true
	}

	return false
}

// SetBlacklistAction gets a reference to the given string and assigns it to the BlacklistAction field.
func (o *MemberDns) SetBlacklistAction(v string) {
	o.BlacklistAction = &v
}

// GetBlacklistLogQuery returns the BlacklistLogQuery field value if set, zero value otherwise.
func (o *MemberDns) GetBlacklistLogQuery() bool {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		var ret bool
		return ret
	}
	return *o.BlacklistLogQuery
}

// GetBlacklistLogQueryOk returns a tuple with the BlacklistLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlacklistLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		return nil, false
	}
	return o.BlacklistLogQuery, true
}

// HasBlacklistLogQuery returns a boolean if a field has been set.
func (o *MemberDns) HasBlacklistLogQuery() bool {
	if o != nil && !IsNil(o.BlacklistLogQuery) {
		return true
	}

	return false
}

// SetBlacklistLogQuery gets a reference to the given bool and assigns it to the BlacklistLogQuery field.
func (o *MemberDns) SetBlacklistLogQuery(v bool) {
	o.BlacklistLogQuery = &v
}

// GetBlacklistRedirectAddresses returns the BlacklistRedirectAddresses field value if set, zero value otherwise.
func (o *MemberDns) GetBlacklistRedirectAddresses() []string {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.BlacklistRedirectAddresses
}

// GetBlacklistRedirectAddressesOk returns a tuple with the BlacklistRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlacklistRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		return nil, false
	}
	return o.BlacklistRedirectAddresses, true
}

// HasBlacklistRedirectAddresses returns a boolean if a field has been set.
func (o *MemberDns) HasBlacklistRedirectAddresses() bool {
	if o != nil && !IsNil(o.BlacklistRedirectAddresses) {
		return true
	}

	return false
}

// SetBlacklistRedirectAddresses gets a reference to the given []string and assigns it to the BlacklistRedirectAddresses field.
func (o *MemberDns) SetBlacklistRedirectAddresses(v []string) {
	o.BlacklistRedirectAddresses = v
}

// GetBlacklistRedirectTtl returns the BlacklistRedirectTtl field value if set, zero value otherwise.
func (o *MemberDns) GetBlacklistRedirectTtl() int64 {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.BlacklistRedirectTtl
}

// GetBlacklistRedirectTtlOk returns a tuple with the BlacklistRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlacklistRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		return nil, false
	}
	return o.BlacklistRedirectTtl, true
}

// HasBlacklistRedirectTtl returns a boolean if a field has been set.
func (o *MemberDns) HasBlacklistRedirectTtl() bool {
	if o != nil && !IsNil(o.BlacklistRedirectTtl) {
		return true
	}

	return false
}

// SetBlacklistRedirectTtl gets a reference to the given int64 and assigns it to the BlacklistRedirectTtl field.
func (o *MemberDns) SetBlacklistRedirectTtl(v int64) {
	o.BlacklistRedirectTtl = &v
}

// GetBlacklistRulesets returns the BlacklistRulesets field value if set, zero value otherwise.
func (o *MemberDns) GetBlacklistRulesets() []string {
	if o == nil || IsNil(o.BlacklistRulesets) {
		var ret []string
		return ret
	}
	return o.BlacklistRulesets
}

// GetBlacklistRulesetsOk returns a tuple with the BlacklistRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetBlacklistRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRulesets) {
		return nil, false
	}
	return o.BlacklistRulesets, true
}

// HasBlacklistRulesets returns a boolean if a field has been set.
func (o *MemberDns) HasBlacklistRulesets() bool {
	if o != nil && !IsNil(o.BlacklistRulesets) {
		return true
	}

	return false
}

// SetBlacklistRulesets gets a reference to the given []string and assigns it to the BlacklistRulesets field.
func (o *MemberDns) SetBlacklistRulesets(v []string) {
	o.BlacklistRulesets = v
}

// GetCaptureDnsQueriesOnAllDomains returns the CaptureDnsQueriesOnAllDomains field value if set, zero value otherwise.
func (o *MemberDns) GetCaptureDnsQueriesOnAllDomains() bool {
	if o == nil || IsNil(o.CaptureDnsQueriesOnAllDomains) {
		var ret bool
		return ret
	}
	return *o.CaptureDnsQueriesOnAllDomains
}

// GetCaptureDnsQueriesOnAllDomainsOk returns a tuple with the CaptureDnsQueriesOnAllDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetCaptureDnsQueriesOnAllDomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptureDnsQueriesOnAllDomains) {
		return nil, false
	}
	return o.CaptureDnsQueriesOnAllDomains, true
}

// HasCaptureDnsQueriesOnAllDomains returns a boolean if a field has been set.
func (o *MemberDns) HasCaptureDnsQueriesOnAllDomains() bool {
	if o != nil && !IsNil(o.CaptureDnsQueriesOnAllDomains) {
		return true
	}

	return false
}

// SetCaptureDnsQueriesOnAllDomains gets a reference to the given bool and assigns it to the CaptureDnsQueriesOnAllDomains field.
func (o *MemberDns) SetCaptureDnsQueriesOnAllDomains(v bool) {
	o.CaptureDnsQueriesOnAllDomains = &v
}

// GetCheckNamesForDdnsAndZoneTransfer returns the CheckNamesForDdnsAndZoneTransfer field value if set, zero value otherwise.
func (o *MemberDns) GetCheckNamesForDdnsAndZoneTransfer() bool {
	if o == nil || IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		var ret bool
		return ret
	}
	return *o.CheckNamesForDdnsAndZoneTransfer
}

// GetCheckNamesForDdnsAndZoneTransferOk returns a tuple with the CheckNamesForDdnsAndZoneTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetCheckNamesForDdnsAndZoneTransferOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		return nil, false
	}
	return o.CheckNamesForDdnsAndZoneTransfer, true
}

// HasCheckNamesForDdnsAndZoneTransfer returns a boolean if a field has been set.
func (o *MemberDns) HasCheckNamesForDdnsAndZoneTransfer() bool {
	if o != nil && !IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		return true
	}

	return false
}

// SetCheckNamesForDdnsAndZoneTransfer gets a reference to the given bool and assigns it to the CheckNamesForDdnsAndZoneTransfer field.
func (o *MemberDns) SetCheckNamesForDdnsAndZoneTransfer(v bool) {
	o.CheckNamesForDdnsAndZoneTransfer = &v
}

// GetClearDnsCache returns the ClearDnsCache field value if set, zero value otherwise.
func (o *MemberDns) GetClearDnsCache() map[string]interface{} {
	if o == nil || IsNil(o.ClearDnsCache) {
		var ret map[string]interface{}
		return ret
	}
	return o.ClearDnsCache
}

// GetClearDnsCacheOk returns a tuple with the ClearDnsCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetClearDnsCacheOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ClearDnsCache) {
		return map[string]interface{}{}, false
	}
	return o.ClearDnsCache, true
}

// HasClearDnsCache returns a boolean if a field has been set.
func (o *MemberDns) HasClearDnsCache() bool {
	if o != nil && !IsNil(o.ClearDnsCache) {
		return true
	}

	return false
}

// SetClearDnsCache gets a reference to the given map[string]interface{} and assigns it to the ClearDnsCache field.
func (o *MemberDns) SetClearDnsCache(v map[string]interface{}) {
	o.ClearDnsCache = v
}

// GetCopyClientIpMacOptions returns the CopyClientIpMacOptions field value if set, zero value otherwise.
func (o *MemberDns) GetCopyClientIpMacOptions() bool {
	if o == nil || IsNil(o.CopyClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.CopyClientIpMacOptions
}

// GetCopyClientIpMacOptionsOk returns a tuple with the CopyClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetCopyClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyClientIpMacOptions) {
		return nil, false
	}
	return o.CopyClientIpMacOptions, true
}

// HasCopyClientIpMacOptions returns a boolean if a field has been set.
func (o *MemberDns) HasCopyClientIpMacOptions() bool {
	if o != nil && !IsNil(o.CopyClientIpMacOptions) {
		return true
	}

	return false
}

// SetCopyClientIpMacOptions gets a reference to the given bool and assigns it to the CopyClientIpMacOptions field.
func (o *MemberDns) SetCopyClientIpMacOptions(v bool) {
	o.CopyClientIpMacOptions = &v
}

// GetCopyXferToNotify returns the CopyXferToNotify field value if set, zero value otherwise.
func (o *MemberDns) GetCopyXferToNotify() bool {
	if o == nil || IsNil(o.CopyXferToNotify) {
		var ret bool
		return ret
	}
	return *o.CopyXferToNotify
}

// GetCopyXferToNotifyOk returns a tuple with the CopyXferToNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetCopyXferToNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyXferToNotify) {
		return nil, false
	}
	return o.CopyXferToNotify, true
}

// HasCopyXferToNotify returns a boolean if a field has been set.
func (o *MemberDns) HasCopyXferToNotify() bool {
	if o != nil && !IsNil(o.CopyXferToNotify) {
		return true
	}

	return false
}

// SetCopyXferToNotify gets a reference to the given bool and assigns it to the CopyXferToNotify field.
func (o *MemberDns) SetCopyXferToNotify(v bool) {
	o.CopyXferToNotify = &v
}

// GetCustomRootNameServers returns the CustomRootNameServers field value if set, zero value otherwise.
func (o *MemberDns) GetCustomRootNameServers() []MemberDnsCustomRootNameServers {
	if o == nil || IsNil(o.CustomRootNameServers) {
		var ret []MemberDnsCustomRootNameServers
		return ret
	}
	return o.CustomRootNameServers
}

// GetCustomRootNameServersOk returns a tuple with the CustomRootNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetCustomRootNameServersOk() ([]MemberDnsCustomRootNameServers, bool) {
	if o == nil || IsNil(o.CustomRootNameServers) {
		return nil, false
	}
	return o.CustomRootNameServers, true
}

// HasCustomRootNameServers returns a boolean if a field has been set.
func (o *MemberDns) HasCustomRootNameServers() bool {
	if o != nil && !IsNil(o.CustomRootNameServers) {
		return true
	}

	return false
}

// SetCustomRootNameServers gets a reference to the given []MemberDnsCustomRootNameServers and assigns it to the CustomRootNameServers field.
func (o *MemberDns) SetCustomRootNameServers(v []MemberDnsCustomRootNameServers) {
	o.CustomRootNameServers = v
}

// GetDisableEdns returns the DisableEdns field value if set, zero value otherwise.
func (o *MemberDns) GetDisableEdns() bool {
	if o == nil || IsNil(o.DisableEdns) {
		var ret bool
		return ret
	}
	return *o.DisableEdns
}

// GetDisableEdnsOk returns a tuple with the DisableEdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDisableEdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableEdns) {
		return nil, false
	}
	return o.DisableEdns, true
}

// HasDisableEdns returns a boolean if a field has been set.
func (o *MemberDns) HasDisableEdns() bool {
	if o != nil && !IsNil(o.DisableEdns) {
		return true
	}

	return false
}

// SetDisableEdns gets a reference to the given bool and assigns it to the DisableEdns field.
func (o *MemberDns) SetDisableEdns(v bool) {
	o.DisableEdns = &v
}

// GetDns64Groups returns the Dns64Groups field value if set, zero value otherwise.
func (o *MemberDns) GetDns64Groups() []string {
	if o == nil || IsNil(o.Dns64Groups) {
		var ret []string
		return ret
	}
	return o.Dns64Groups
}

// GetDns64GroupsOk returns a tuple with the Dns64Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDns64GroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dns64Groups) {
		return nil, false
	}
	return o.Dns64Groups, true
}

// HasDns64Groups returns a boolean if a field has been set.
func (o *MemberDns) HasDns64Groups() bool {
	if o != nil && !IsNil(o.Dns64Groups) {
		return true
	}

	return false
}

// SetDns64Groups gets a reference to the given []string and assigns it to the Dns64Groups field.
func (o *MemberDns) SetDns64Groups(v []string) {
	o.Dns64Groups = v
}

// GetDnsCacheAccelerationStatus returns the DnsCacheAccelerationStatus field value if set, zero value otherwise.
func (o *MemberDns) GetDnsCacheAccelerationStatus() string {
	if o == nil || IsNil(o.DnsCacheAccelerationStatus) {
		var ret string
		return ret
	}
	return *o.DnsCacheAccelerationStatus
}

// GetDnsCacheAccelerationStatusOk returns a tuple with the DnsCacheAccelerationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsCacheAccelerationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DnsCacheAccelerationStatus) {
		return nil, false
	}
	return o.DnsCacheAccelerationStatus, true
}

// HasDnsCacheAccelerationStatus returns a boolean if a field has been set.
func (o *MemberDns) HasDnsCacheAccelerationStatus() bool {
	if o != nil && !IsNil(o.DnsCacheAccelerationStatus) {
		return true
	}

	return false
}

// SetDnsCacheAccelerationStatus gets a reference to the given string and assigns it to the DnsCacheAccelerationStatus field.
func (o *MemberDns) SetDnsCacheAccelerationStatus(v string) {
	o.DnsCacheAccelerationStatus = &v
}

// GetDnsCacheAccelerationTtl returns the DnsCacheAccelerationTtl field value if set, zero value otherwise.
func (o *MemberDns) GetDnsCacheAccelerationTtl() int64 {
	if o == nil || IsNil(o.DnsCacheAccelerationTtl) {
		var ret int64
		return ret
	}
	return *o.DnsCacheAccelerationTtl
}

// GetDnsCacheAccelerationTtlOk returns a tuple with the DnsCacheAccelerationTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsCacheAccelerationTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsCacheAccelerationTtl) {
		return nil, false
	}
	return o.DnsCacheAccelerationTtl, true
}

// HasDnsCacheAccelerationTtl returns a boolean if a field has been set.
func (o *MemberDns) HasDnsCacheAccelerationTtl() bool {
	if o != nil && !IsNil(o.DnsCacheAccelerationTtl) {
		return true
	}

	return false
}

// SetDnsCacheAccelerationTtl gets a reference to the given int64 and assigns it to the DnsCacheAccelerationTtl field.
func (o *MemberDns) SetDnsCacheAccelerationTtl(v int64) {
	o.DnsCacheAccelerationTtl = &v
}

// GetDnsHealthCheckAnycastControl returns the DnsHealthCheckAnycastControl field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckAnycastControl() bool {
	if o == nil || IsNil(o.DnsHealthCheckAnycastControl) {
		var ret bool
		return ret
	}
	return *o.DnsHealthCheckAnycastControl
}

// GetDnsHealthCheckAnycastControlOk returns a tuple with the DnsHealthCheckAnycastControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckAnycastControlOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsHealthCheckAnycastControl) {
		return nil, false
	}
	return o.DnsHealthCheckAnycastControl, true
}

// HasDnsHealthCheckAnycastControl returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckAnycastControl() bool {
	if o != nil && !IsNil(o.DnsHealthCheckAnycastControl) {
		return true
	}

	return false
}

// SetDnsHealthCheckAnycastControl gets a reference to the given bool and assigns it to the DnsHealthCheckAnycastControl field.
func (o *MemberDns) SetDnsHealthCheckAnycastControl(v bool) {
	o.DnsHealthCheckAnycastControl = &v
}

// GetDnsHealthCheckDomainList returns the DnsHealthCheckDomainList field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckDomainList() []string {
	if o == nil || IsNil(o.DnsHealthCheckDomainList) {
		var ret []string
		return ret
	}
	return o.DnsHealthCheckDomainList
}

// GetDnsHealthCheckDomainListOk returns a tuple with the DnsHealthCheckDomainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckDomainListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsHealthCheckDomainList) {
		return nil, false
	}
	return o.DnsHealthCheckDomainList, true
}

// HasDnsHealthCheckDomainList returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckDomainList() bool {
	if o != nil && !IsNil(o.DnsHealthCheckDomainList) {
		return true
	}

	return false
}

// SetDnsHealthCheckDomainList gets a reference to the given []string and assigns it to the DnsHealthCheckDomainList field.
func (o *MemberDns) SetDnsHealthCheckDomainList(v []string) {
	o.DnsHealthCheckDomainList = v
}

// GetDnsHealthCheckInterval returns the DnsHealthCheckInterval field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckInterval() int64 {
	if o == nil || IsNil(o.DnsHealthCheckInterval) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckInterval
}

// GetDnsHealthCheckIntervalOk returns a tuple with the DnsHealthCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckInterval) {
		return nil, false
	}
	return o.DnsHealthCheckInterval, true
}

// HasDnsHealthCheckInterval returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckInterval() bool {
	if o != nil && !IsNil(o.DnsHealthCheckInterval) {
		return true
	}

	return false
}

// SetDnsHealthCheckInterval gets a reference to the given int64 and assigns it to the DnsHealthCheckInterval field.
func (o *MemberDns) SetDnsHealthCheckInterval(v int64) {
	o.DnsHealthCheckInterval = &v
}

// GetDnsHealthCheckRecursionFlag returns the DnsHealthCheckRecursionFlag field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckRecursionFlag() bool {
	if o == nil || IsNil(o.DnsHealthCheckRecursionFlag) {
		var ret bool
		return ret
	}
	return *o.DnsHealthCheckRecursionFlag
}

// GetDnsHealthCheckRecursionFlagOk returns a tuple with the DnsHealthCheckRecursionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckRecursionFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsHealthCheckRecursionFlag) {
		return nil, false
	}
	return o.DnsHealthCheckRecursionFlag, true
}

// HasDnsHealthCheckRecursionFlag returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckRecursionFlag() bool {
	if o != nil && !IsNil(o.DnsHealthCheckRecursionFlag) {
		return true
	}

	return false
}

// SetDnsHealthCheckRecursionFlag gets a reference to the given bool and assigns it to the DnsHealthCheckRecursionFlag field.
func (o *MemberDns) SetDnsHealthCheckRecursionFlag(v bool) {
	o.DnsHealthCheckRecursionFlag = &v
}

// GetDnsHealthCheckRetries returns the DnsHealthCheckRetries field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckRetries() int64 {
	if o == nil || IsNil(o.DnsHealthCheckRetries) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckRetries
}

// GetDnsHealthCheckRetriesOk returns a tuple with the DnsHealthCheckRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckRetriesOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckRetries) {
		return nil, false
	}
	return o.DnsHealthCheckRetries, true
}

// HasDnsHealthCheckRetries returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckRetries() bool {
	if o != nil && !IsNil(o.DnsHealthCheckRetries) {
		return true
	}

	return false
}

// SetDnsHealthCheckRetries gets a reference to the given int64 and assigns it to the DnsHealthCheckRetries field.
func (o *MemberDns) SetDnsHealthCheckRetries(v int64) {
	o.DnsHealthCheckRetries = &v
}

// GetDnsHealthCheckTimeout returns the DnsHealthCheckTimeout field value if set, zero value otherwise.
func (o *MemberDns) GetDnsHealthCheckTimeout() int64 {
	if o == nil || IsNil(o.DnsHealthCheckTimeout) {
		var ret int64
		return ret
	}
	return *o.DnsHealthCheckTimeout
}

// GetDnsHealthCheckTimeoutOk returns a tuple with the DnsHealthCheckTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsHealthCheckTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsHealthCheckTimeout) {
		return nil, false
	}
	return o.DnsHealthCheckTimeout, true
}

// HasDnsHealthCheckTimeout returns a boolean if a field has been set.
func (o *MemberDns) HasDnsHealthCheckTimeout() bool {
	if o != nil && !IsNil(o.DnsHealthCheckTimeout) {
		return true
	}

	return false
}

// SetDnsHealthCheckTimeout gets a reference to the given int64 and assigns it to the DnsHealthCheckTimeout field.
func (o *MemberDns) SetDnsHealthCheckTimeout(v int64) {
	o.DnsHealthCheckTimeout = &v
}

// GetDnsNotifyTransferSource returns the DnsNotifyTransferSource field value if set, zero value otherwise.
func (o *MemberDns) GetDnsNotifyTransferSource() string {
	if o == nil || IsNil(o.DnsNotifyTransferSource) {
		var ret string
		return ret
	}
	return *o.DnsNotifyTransferSource
}

// GetDnsNotifyTransferSourceOk returns a tuple with the DnsNotifyTransferSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsNotifyTransferSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DnsNotifyTransferSource) {
		return nil, false
	}
	return o.DnsNotifyTransferSource, true
}

// HasDnsNotifyTransferSource returns a boolean if a field has been set.
func (o *MemberDns) HasDnsNotifyTransferSource() bool {
	if o != nil && !IsNil(o.DnsNotifyTransferSource) {
		return true
	}

	return false
}

// SetDnsNotifyTransferSource gets a reference to the given string and assigns it to the DnsNotifyTransferSource field.
func (o *MemberDns) SetDnsNotifyTransferSource(v string) {
	o.DnsNotifyTransferSource = &v
}

// GetDnsNotifyTransferSourceAddress returns the DnsNotifyTransferSourceAddress field value if set, zero value otherwise.
func (o *MemberDns) GetDnsNotifyTransferSourceAddress() string {
	if o == nil || IsNil(o.DnsNotifyTransferSourceAddress) {
		var ret string
		return ret
	}
	return *o.DnsNotifyTransferSourceAddress
}

// GetDnsNotifyTransferSourceAddressOk returns a tuple with the DnsNotifyTransferSourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsNotifyTransferSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DnsNotifyTransferSourceAddress) {
		return nil, false
	}
	return o.DnsNotifyTransferSourceAddress, true
}

// HasDnsNotifyTransferSourceAddress returns a boolean if a field has been set.
func (o *MemberDns) HasDnsNotifyTransferSourceAddress() bool {
	if o != nil && !IsNil(o.DnsNotifyTransferSourceAddress) {
		return true
	}

	return false
}

// SetDnsNotifyTransferSourceAddress gets a reference to the given string and assigns it to the DnsNotifyTransferSourceAddress field.
func (o *MemberDns) SetDnsNotifyTransferSourceAddress(v string) {
	o.DnsNotifyTransferSourceAddress = &v
}

// GetDnsOverTlsService returns the DnsOverTlsService field value if set, zero value otherwise.
func (o *MemberDns) GetDnsOverTlsService() bool {
	if o == nil || IsNil(o.DnsOverTlsService) {
		var ret bool
		return ret
	}
	return *o.DnsOverTlsService
}

// GetDnsOverTlsServiceOk returns a tuple with the DnsOverTlsService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsOverTlsServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsOverTlsService) {
		return nil, false
	}
	return o.DnsOverTlsService, true
}

// HasDnsOverTlsService returns a boolean if a field has been set.
func (o *MemberDns) HasDnsOverTlsService() bool {
	if o != nil && !IsNil(o.DnsOverTlsService) {
		return true
	}

	return false
}

// SetDnsOverTlsService gets a reference to the given bool and assigns it to the DnsOverTlsService field.
func (o *MemberDns) SetDnsOverTlsService(v bool) {
	o.DnsOverTlsService = &v
}

// GetDnsQueryCaptureFileTimeLimit returns the DnsQueryCaptureFileTimeLimit field value if set, zero value otherwise.
func (o *MemberDns) GetDnsQueryCaptureFileTimeLimit() int64 {
	if o == nil || IsNil(o.DnsQueryCaptureFileTimeLimit) {
		var ret int64
		return ret
	}
	return *o.DnsQueryCaptureFileTimeLimit
}

// GetDnsQueryCaptureFileTimeLimitOk returns a tuple with the DnsQueryCaptureFileTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsQueryCaptureFileTimeLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsQueryCaptureFileTimeLimit) {
		return nil, false
	}
	return o.DnsQueryCaptureFileTimeLimit, true
}

// HasDnsQueryCaptureFileTimeLimit returns a boolean if a field has been set.
func (o *MemberDns) HasDnsQueryCaptureFileTimeLimit() bool {
	if o != nil && !IsNil(o.DnsQueryCaptureFileTimeLimit) {
		return true
	}

	return false
}

// SetDnsQueryCaptureFileTimeLimit gets a reference to the given int64 and assigns it to the DnsQueryCaptureFileTimeLimit field.
func (o *MemberDns) SetDnsQueryCaptureFileTimeLimit(v int64) {
	o.DnsQueryCaptureFileTimeLimit = &v
}

// GetDnsQuerySourceAddress returns the DnsQuerySourceAddress field value if set, zero value otherwise.
func (o *MemberDns) GetDnsQuerySourceAddress() string {
	if o == nil || IsNil(o.DnsQuerySourceAddress) {
		var ret string
		return ret
	}
	return *o.DnsQuerySourceAddress
}

// GetDnsQuerySourceAddressOk returns a tuple with the DnsQuerySourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsQuerySourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DnsQuerySourceAddress) {
		return nil, false
	}
	return o.DnsQuerySourceAddress, true
}

// HasDnsQuerySourceAddress returns a boolean if a field has been set.
func (o *MemberDns) HasDnsQuerySourceAddress() bool {
	if o != nil && !IsNil(o.DnsQuerySourceAddress) {
		return true
	}

	return false
}

// SetDnsQuerySourceAddress gets a reference to the given string and assigns it to the DnsQuerySourceAddress field.
func (o *MemberDns) SetDnsQuerySourceAddress(v string) {
	o.DnsQuerySourceAddress = &v
}

// GetDnsQuerySourceInterface returns the DnsQuerySourceInterface field value if set, zero value otherwise.
func (o *MemberDns) GetDnsQuerySourceInterface() string {
	if o == nil || IsNil(o.DnsQuerySourceInterface) {
		var ret string
		return ret
	}
	return *o.DnsQuerySourceInterface
}

// GetDnsQuerySourceInterfaceOk returns a tuple with the DnsQuerySourceInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsQuerySourceInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.DnsQuerySourceInterface) {
		return nil, false
	}
	return o.DnsQuerySourceInterface, true
}

// HasDnsQuerySourceInterface returns a boolean if a field has been set.
func (o *MemberDns) HasDnsQuerySourceInterface() bool {
	if o != nil && !IsNil(o.DnsQuerySourceInterface) {
		return true
	}

	return false
}

// SetDnsQuerySourceInterface gets a reference to the given string and assigns it to the DnsQuerySourceInterface field.
func (o *MemberDns) SetDnsQuerySourceInterface(v string) {
	o.DnsQuerySourceInterface = &v
}

// GetDnsViewAddressSettings returns the DnsViewAddressSettings field value if set, zero value otherwise.
func (o *MemberDns) GetDnsViewAddressSettings() []MemberDnsDnsViewAddressSettings {
	if o == nil || IsNil(o.DnsViewAddressSettings) {
		var ret []MemberDnsDnsViewAddressSettings
		return ret
	}
	return o.DnsViewAddressSettings
}

// GetDnsViewAddressSettingsOk returns a tuple with the DnsViewAddressSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnsViewAddressSettingsOk() ([]MemberDnsDnsViewAddressSettings, bool) {
	if o == nil || IsNil(o.DnsViewAddressSettings) {
		return nil, false
	}
	return o.DnsViewAddressSettings, true
}

// HasDnsViewAddressSettings returns a boolean if a field has been set.
func (o *MemberDns) HasDnsViewAddressSettings() bool {
	if o != nil && !IsNil(o.DnsViewAddressSettings) {
		return true
	}

	return false
}

// SetDnsViewAddressSettings gets a reference to the given []MemberDnsDnsViewAddressSettings and assigns it to the DnsViewAddressSettings field.
func (o *MemberDns) SetDnsViewAddressSettings(v []MemberDnsDnsViewAddressSettings) {
	o.DnsViewAddressSettings = v
}

// GetDnssecBlacklistEnabled returns the DnssecBlacklistEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecBlacklistEnabled() bool {
	if o == nil || IsNil(o.DnssecBlacklistEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecBlacklistEnabled
}

// GetDnssecBlacklistEnabledOk returns a tuple with the DnssecBlacklistEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecBlacklistEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecBlacklistEnabled) {
		return nil, false
	}
	return o.DnssecBlacklistEnabled, true
}

// HasDnssecBlacklistEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecBlacklistEnabled() bool {
	if o != nil && !IsNil(o.DnssecBlacklistEnabled) {
		return true
	}

	return false
}

// SetDnssecBlacklistEnabled gets a reference to the given bool and assigns it to the DnssecBlacklistEnabled field.
func (o *MemberDns) SetDnssecBlacklistEnabled(v bool) {
	o.DnssecBlacklistEnabled = &v
}

// GetDnssecDns64Enabled returns the DnssecDns64Enabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecDns64Enabled() bool {
	if o == nil || IsNil(o.DnssecDns64Enabled) {
		var ret bool
		return ret
	}
	return *o.DnssecDns64Enabled
}

// GetDnssecDns64EnabledOk returns a tuple with the DnssecDns64Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecDns64EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecDns64Enabled) {
		return nil, false
	}
	return o.DnssecDns64Enabled, true
}

// HasDnssecDns64Enabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecDns64Enabled() bool {
	if o != nil && !IsNil(o.DnssecDns64Enabled) {
		return true
	}

	return false
}

// SetDnssecDns64Enabled gets a reference to the given bool and assigns it to the DnssecDns64Enabled field.
func (o *MemberDns) SetDnssecDns64Enabled(v bool) {
	o.DnssecDns64Enabled = &v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecEnabled() bool {
	if o == nil || IsNil(o.DnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnabled) {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecEnabled() bool {
	if o != nil && !IsNil(o.DnssecEnabled) {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *MemberDns) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetDnssecExpiredSignaturesEnabled returns the DnssecExpiredSignaturesEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecExpiredSignaturesEnabled() bool {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecExpiredSignaturesEnabled
}

// GetDnssecExpiredSignaturesEnabledOk returns a tuple with the DnssecExpiredSignaturesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecExpiredSignaturesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		return nil, false
	}
	return o.DnssecExpiredSignaturesEnabled, true
}

// HasDnssecExpiredSignaturesEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecExpiredSignaturesEnabled() bool {
	if o != nil && !IsNil(o.DnssecExpiredSignaturesEnabled) {
		return true
	}

	return false
}

// SetDnssecExpiredSignaturesEnabled gets a reference to the given bool and assigns it to the DnssecExpiredSignaturesEnabled field.
func (o *MemberDns) SetDnssecExpiredSignaturesEnabled(v bool) {
	o.DnssecExpiredSignaturesEnabled = &v
}

// GetDnssecNegativeTrustAnchors returns the DnssecNegativeTrustAnchors field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecNegativeTrustAnchors() []string {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		var ret []string
		return ret
	}
	return o.DnssecNegativeTrustAnchors
}

// GetDnssecNegativeTrustAnchorsOk returns a tuple with the DnssecNegativeTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecNegativeTrustAnchorsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		return nil, false
	}
	return o.DnssecNegativeTrustAnchors, true
}

// HasDnssecNegativeTrustAnchors returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecNegativeTrustAnchors() bool {
	if o != nil && !IsNil(o.DnssecNegativeTrustAnchors) {
		return true
	}

	return false
}

// SetDnssecNegativeTrustAnchors gets a reference to the given []string and assigns it to the DnssecNegativeTrustAnchors field.
func (o *MemberDns) SetDnssecNegativeTrustAnchors(v []string) {
	o.DnssecNegativeTrustAnchors = v
}

// GetDnssecNxdomainEnabled returns the DnssecNxdomainEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecNxdomainEnabled() bool {
	if o == nil || IsNil(o.DnssecNxdomainEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecNxdomainEnabled
}

// GetDnssecNxdomainEnabledOk returns a tuple with the DnssecNxdomainEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecNxdomainEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecNxdomainEnabled) {
		return nil, false
	}
	return o.DnssecNxdomainEnabled, true
}

// HasDnssecNxdomainEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecNxdomainEnabled() bool {
	if o != nil && !IsNil(o.DnssecNxdomainEnabled) {
		return true
	}

	return false
}

// SetDnssecNxdomainEnabled gets a reference to the given bool and assigns it to the DnssecNxdomainEnabled field.
func (o *MemberDns) SetDnssecNxdomainEnabled(v bool) {
	o.DnssecNxdomainEnabled = &v
}

// GetDnssecRpzEnabled returns the DnssecRpzEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecRpzEnabled() bool {
	if o == nil || IsNil(o.DnssecRpzEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecRpzEnabled
}

// GetDnssecRpzEnabledOk returns a tuple with the DnssecRpzEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecRpzEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecRpzEnabled) {
		return nil, false
	}
	return o.DnssecRpzEnabled, true
}

// HasDnssecRpzEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecRpzEnabled() bool {
	if o != nil && !IsNil(o.DnssecRpzEnabled) {
		return true
	}

	return false
}

// SetDnssecRpzEnabled gets a reference to the given bool and assigns it to the DnssecRpzEnabled field.
func (o *MemberDns) SetDnssecRpzEnabled(v bool) {
	o.DnssecRpzEnabled = &v
}

// GetDnssecTrustedKeys returns the DnssecTrustedKeys field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecTrustedKeys() []MemberDnsDnssecTrustedKeys {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		var ret []MemberDnsDnssecTrustedKeys
		return ret
	}
	return o.DnssecTrustedKeys
}

// GetDnssecTrustedKeysOk returns a tuple with the DnssecTrustedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecTrustedKeysOk() ([]MemberDnsDnssecTrustedKeys, bool) {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		return nil, false
	}
	return o.DnssecTrustedKeys, true
}

// HasDnssecTrustedKeys returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecTrustedKeys() bool {
	if o != nil && !IsNil(o.DnssecTrustedKeys) {
		return true
	}

	return false
}

// SetDnssecTrustedKeys gets a reference to the given []MemberDnsDnssecTrustedKeys and assigns it to the DnssecTrustedKeys field.
func (o *MemberDns) SetDnssecTrustedKeys(v []MemberDnsDnssecTrustedKeys) {
	o.DnssecTrustedKeys = v
}

// GetDnssecValidationEnabled returns the DnssecValidationEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetDnssecValidationEnabled() bool {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecValidationEnabled
}

// GetDnssecValidationEnabledOk returns a tuple with the DnssecValidationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnssecValidationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		return nil, false
	}
	return o.DnssecValidationEnabled, true
}

// HasDnssecValidationEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasDnssecValidationEnabled() bool {
	if o != nil && !IsNil(o.DnssecValidationEnabled) {
		return true
	}

	return false
}

// SetDnssecValidationEnabled gets a reference to the given bool and assigns it to the DnssecValidationEnabled field.
func (o *MemberDns) SetDnssecValidationEnabled(v bool) {
	o.DnssecValidationEnabled = &v
}

// GetDnstapSetting returns the DnstapSetting field value if set, zero value otherwise.
func (o *MemberDns) GetDnstapSetting() MemberDnsDnstapSetting {
	if o == nil || IsNil(o.DnstapSetting) {
		var ret MemberDnsDnstapSetting
		return ret
	}
	return *o.DnstapSetting
}

// GetDnstapSettingOk returns a tuple with the DnstapSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDnstapSettingOk() (*MemberDnsDnstapSetting, bool) {
	if o == nil || IsNil(o.DnstapSetting) {
		return nil, false
	}
	return o.DnstapSetting, true
}

// HasDnstapSetting returns a boolean if a field has been set.
func (o *MemberDns) HasDnstapSetting() bool {
	if o != nil && !IsNil(o.DnstapSetting) {
		return true
	}

	return false
}

// SetDnstapSetting gets a reference to the given MemberDnsDnstapSetting and assigns it to the DnstapSetting field.
func (o *MemberDns) SetDnstapSetting(v MemberDnsDnstapSetting) {
	o.DnstapSetting = &v
}

// GetDohHttpsSessionDuration returns the DohHttpsSessionDuration field value if set, zero value otherwise.
func (o *MemberDns) GetDohHttpsSessionDuration() int64 {
	if o == nil || IsNil(o.DohHttpsSessionDuration) {
		var ret int64
		return ret
	}
	return *o.DohHttpsSessionDuration
}

// GetDohHttpsSessionDurationOk returns a tuple with the DohHttpsSessionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDohHttpsSessionDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.DohHttpsSessionDuration) {
		return nil, false
	}
	return o.DohHttpsSessionDuration, true
}

// HasDohHttpsSessionDuration returns a boolean if a field has been set.
func (o *MemberDns) HasDohHttpsSessionDuration() bool {
	if o != nil && !IsNil(o.DohHttpsSessionDuration) {
		return true
	}

	return false
}

// SetDohHttpsSessionDuration gets a reference to the given int64 and assigns it to the DohHttpsSessionDuration field.
func (o *MemberDns) SetDohHttpsSessionDuration(v int64) {
	o.DohHttpsSessionDuration = &v
}

// GetDohService returns the DohService field value if set, zero value otherwise.
func (o *MemberDns) GetDohService() bool {
	if o == nil || IsNil(o.DohService) {
		var ret bool
		return ret
	}
	return *o.DohService
}

// GetDohServiceOk returns a tuple with the DohService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDohServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.DohService) {
		return nil, false
	}
	return o.DohService, true
}

// HasDohService returns a boolean if a field has been set.
func (o *MemberDns) HasDohService() bool {
	if o != nil && !IsNil(o.DohService) {
		return true
	}

	return false
}

// SetDohService gets a reference to the given bool and assigns it to the DohService field.
func (o *MemberDns) SetDohService(v bool) {
	o.DohService = &v
}

// GetDomainsToCaptureDnsQueries returns the DomainsToCaptureDnsQueries field value if set, zero value otherwise.
func (o *MemberDns) GetDomainsToCaptureDnsQueries() []string {
	if o == nil || IsNil(o.DomainsToCaptureDnsQueries) {
		var ret []string
		return ret
	}
	return o.DomainsToCaptureDnsQueries
}

// GetDomainsToCaptureDnsQueriesOk returns a tuple with the DomainsToCaptureDnsQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDomainsToCaptureDnsQueriesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainsToCaptureDnsQueries) {
		return nil, false
	}
	return o.DomainsToCaptureDnsQueries, true
}

// HasDomainsToCaptureDnsQueries returns a boolean if a field has been set.
func (o *MemberDns) HasDomainsToCaptureDnsQueries() bool {
	if o != nil && !IsNil(o.DomainsToCaptureDnsQueries) {
		return true
	}

	return false
}

// SetDomainsToCaptureDnsQueries gets a reference to the given []string and assigns it to the DomainsToCaptureDnsQueries field.
func (o *MemberDns) SetDomainsToCaptureDnsQueries(v []string) {
	o.DomainsToCaptureDnsQueries = v
}

// GetDtcDnsQueriesSpecificBehavior returns the DtcDnsQueriesSpecificBehavior field value if set, zero value otherwise.
func (o *MemberDns) GetDtcDnsQueriesSpecificBehavior() string {
	if o == nil || IsNil(o.DtcDnsQueriesSpecificBehavior) {
		var ret string
		return ret
	}
	return *o.DtcDnsQueriesSpecificBehavior
}

// GetDtcDnsQueriesSpecificBehaviorOk returns a tuple with the DtcDnsQueriesSpecificBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDtcDnsQueriesSpecificBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.DtcDnsQueriesSpecificBehavior) {
		return nil, false
	}
	return o.DtcDnsQueriesSpecificBehavior, true
}

// HasDtcDnsQueriesSpecificBehavior returns a boolean if a field has been set.
func (o *MemberDns) HasDtcDnsQueriesSpecificBehavior() bool {
	if o != nil && !IsNil(o.DtcDnsQueriesSpecificBehavior) {
		return true
	}

	return false
}

// SetDtcDnsQueriesSpecificBehavior gets a reference to the given string and assigns it to the DtcDnsQueriesSpecificBehavior field.
func (o *MemberDns) SetDtcDnsQueriesSpecificBehavior(v string) {
	o.DtcDnsQueriesSpecificBehavior = &v
}

// GetDtcEdnsPreferClientSubnet returns the DtcEdnsPreferClientSubnet field value if set, zero value otherwise.
func (o *MemberDns) GetDtcEdnsPreferClientSubnet() bool {
	if o == nil || IsNil(o.DtcEdnsPreferClientSubnet) {
		var ret bool
		return ret
	}
	return *o.DtcEdnsPreferClientSubnet
}

// GetDtcEdnsPreferClientSubnetOk returns a tuple with the DtcEdnsPreferClientSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDtcEdnsPreferClientSubnetOk() (*bool, bool) {
	if o == nil || IsNil(o.DtcEdnsPreferClientSubnet) {
		return nil, false
	}
	return o.DtcEdnsPreferClientSubnet, true
}

// HasDtcEdnsPreferClientSubnet returns a boolean if a field has been set.
func (o *MemberDns) HasDtcEdnsPreferClientSubnet() bool {
	if o != nil && !IsNil(o.DtcEdnsPreferClientSubnet) {
		return true
	}

	return false
}

// SetDtcEdnsPreferClientSubnet gets a reference to the given bool and assigns it to the DtcEdnsPreferClientSubnet field.
func (o *MemberDns) SetDtcEdnsPreferClientSubnet(v bool) {
	o.DtcEdnsPreferClientSubnet = &v
}

// GetDtcHealthSource returns the DtcHealthSource field value if set, zero value otherwise.
func (o *MemberDns) GetDtcHealthSource() string {
	if o == nil || IsNil(o.DtcHealthSource) {
		var ret string
		return ret
	}
	return *o.DtcHealthSource
}

// GetDtcHealthSourceOk returns a tuple with the DtcHealthSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDtcHealthSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DtcHealthSource) {
		return nil, false
	}
	return o.DtcHealthSource, true
}

// HasDtcHealthSource returns a boolean if a field has been set.
func (o *MemberDns) HasDtcHealthSource() bool {
	if o != nil && !IsNil(o.DtcHealthSource) {
		return true
	}

	return false
}

// SetDtcHealthSource gets a reference to the given string and assigns it to the DtcHealthSource field.
func (o *MemberDns) SetDtcHealthSource(v string) {
	o.DtcHealthSource = &v
}

// GetDtcHealthSourceAddress returns the DtcHealthSourceAddress field value if set, zero value otherwise.
func (o *MemberDns) GetDtcHealthSourceAddress() string {
	if o == nil || IsNil(o.DtcHealthSourceAddress) {
		var ret string
		return ret
	}
	return *o.DtcHealthSourceAddress
}

// GetDtcHealthSourceAddressOk returns a tuple with the DtcHealthSourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetDtcHealthSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DtcHealthSourceAddress) {
		return nil, false
	}
	return o.DtcHealthSourceAddress, true
}

// HasDtcHealthSourceAddress returns a boolean if a field has been set.
func (o *MemberDns) HasDtcHealthSourceAddress() bool {
	if o != nil && !IsNil(o.DtcHealthSourceAddress) {
		return true
	}

	return false
}

// SetDtcHealthSourceAddress gets a reference to the given string and assigns it to the DtcHealthSourceAddress field.
func (o *MemberDns) SetDtcHealthSourceAddress(v string) {
	o.DtcHealthSourceAddress = &v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *MemberDns) GetEdnsUdpSize() int64 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret int64
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEdnsUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *MemberDns) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given int64 and assigns it to the EdnsUdpSize field.
func (o *MemberDns) SetEdnsUdpSize(v int64) {
	o.EdnsUdpSize = &v
}

// GetEnableBlackhole returns the EnableBlackhole field value if set, zero value otherwise.
func (o *MemberDns) GetEnableBlackhole() bool {
	if o == nil || IsNil(o.EnableBlackhole) {
		var ret bool
		return ret
	}
	return *o.EnableBlackhole
}

// GetEnableBlackholeOk returns a tuple with the EnableBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableBlackholeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlackhole) {
		return nil, false
	}
	return o.EnableBlackhole, true
}

// HasEnableBlackhole returns a boolean if a field has been set.
func (o *MemberDns) HasEnableBlackhole() bool {
	if o != nil && !IsNil(o.EnableBlackhole) {
		return true
	}

	return false
}

// SetEnableBlackhole gets a reference to the given bool and assigns it to the EnableBlackhole field.
func (o *MemberDns) SetEnableBlackhole(v bool) {
	o.EnableBlackhole = &v
}

// GetEnableBlacklist returns the EnableBlacklist field value if set, zero value otherwise.
func (o *MemberDns) GetEnableBlacklist() bool {
	if o == nil || IsNil(o.EnableBlacklist) {
		var ret bool
		return ret
	}
	return *o.EnableBlacklist
}

// GetEnableBlacklistOk returns a tuple with the EnableBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlacklist) {
		return nil, false
	}
	return o.EnableBlacklist, true
}

// HasEnableBlacklist returns a boolean if a field has been set.
func (o *MemberDns) HasEnableBlacklist() bool {
	if o != nil && !IsNil(o.EnableBlacklist) {
		return true
	}

	return false
}

// SetEnableBlacklist gets a reference to the given bool and assigns it to the EnableBlacklist field.
func (o *MemberDns) SetEnableBlacklist(v bool) {
	o.EnableBlacklist = &v
}

// GetEnableCaptureDnsQueries returns the EnableCaptureDnsQueries field value if set, zero value otherwise.
func (o *MemberDns) GetEnableCaptureDnsQueries() bool {
	if o == nil || IsNil(o.EnableCaptureDnsQueries) {
		var ret bool
		return ret
	}
	return *o.EnableCaptureDnsQueries
}

// GetEnableCaptureDnsQueriesOk returns a tuple with the EnableCaptureDnsQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableCaptureDnsQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCaptureDnsQueries) {
		return nil, false
	}
	return o.EnableCaptureDnsQueries, true
}

// HasEnableCaptureDnsQueries returns a boolean if a field has been set.
func (o *MemberDns) HasEnableCaptureDnsQueries() bool {
	if o != nil && !IsNil(o.EnableCaptureDnsQueries) {
		return true
	}

	return false
}

// SetEnableCaptureDnsQueries gets a reference to the given bool and assigns it to the EnableCaptureDnsQueries field.
func (o *MemberDns) SetEnableCaptureDnsQueries(v bool) {
	o.EnableCaptureDnsQueries = &v
}

// GetEnableCaptureDnsResponses returns the EnableCaptureDnsResponses field value if set, zero value otherwise.
func (o *MemberDns) GetEnableCaptureDnsResponses() bool {
	if o == nil || IsNil(o.EnableCaptureDnsResponses) {
		var ret bool
		return ret
	}
	return *o.EnableCaptureDnsResponses
}

// GetEnableCaptureDnsResponsesOk returns a tuple with the EnableCaptureDnsResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableCaptureDnsResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCaptureDnsResponses) {
		return nil, false
	}
	return o.EnableCaptureDnsResponses, true
}

// HasEnableCaptureDnsResponses returns a boolean if a field has been set.
func (o *MemberDns) HasEnableCaptureDnsResponses() bool {
	if o != nil && !IsNil(o.EnableCaptureDnsResponses) {
		return true
	}

	return false
}

// SetEnableCaptureDnsResponses gets a reference to the given bool and assigns it to the EnableCaptureDnsResponses field.
func (o *MemberDns) SetEnableCaptureDnsResponses(v bool) {
	o.EnableCaptureDnsResponses = &v
}

// GetEnableDns returns the EnableDns field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDns() bool {
	if o == nil || IsNil(o.EnableDns) {
		var ret bool
		return ret
	}
	return *o.EnableDns
}

// GetEnableDnsOk returns a tuple with the EnableDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDns) {
		return nil, false
	}
	return o.EnableDns, true
}

// HasEnableDns returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDns() bool {
	if o != nil && !IsNil(o.EnableDns) {
		return true
	}

	return false
}

// SetEnableDns gets a reference to the given bool and assigns it to the EnableDns field.
func (o *MemberDns) SetEnableDns(v bool) {
	o.EnableDns = &v
}

// GetEnableDns64 returns the EnableDns64 field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDns64() bool {
	if o == nil || IsNil(o.EnableDns64) {
		var ret bool
		return ret
	}
	return *o.EnableDns64
}

// GetEnableDns64Ok returns a tuple with the EnableDns64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDns64Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableDns64) {
		return nil, false
	}
	return o.EnableDns64, true
}

// HasEnableDns64 returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDns64() bool {
	if o != nil && !IsNil(o.EnableDns64) {
		return true
	}

	return false
}

// SetEnableDns64 gets a reference to the given bool and assigns it to the EnableDns64 field.
func (o *MemberDns) SetEnableDns64(v bool) {
	o.EnableDns64 = &v
}

// GetEnableDnsCacheAcceleration returns the EnableDnsCacheAcceleration field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDnsCacheAcceleration() bool {
	if o == nil || IsNil(o.EnableDnsCacheAcceleration) {
		var ret bool
		return ret
	}
	return *o.EnableDnsCacheAcceleration
}

// GetEnableDnsCacheAccelerationOk returns a tuple with the EnableDnsCacheAcceleration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDnsCacheAccelerationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsCacheAcceleration) {
		return nil, false
	}
	return o.EnableDnsCacheAcceleration, true
}

// HasEnableDnsCacheAcceleration returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDnsCacheAcceleration() bool {
	if o != nil && !IsNil(o.EnableDnsCacheAcceleration) {
		return true
	}

	return false
}

// SetEnableDnsCacheAcceleration gets a reference to the given bool and assigns it to the EnableDnsCacheAcceleration field.
func (o *MemberDns) SetEnableDnsCacheAcceleration(v bool) {
	o.EnableDnsCacheAcceleration = &v
}

// GetEnableDnsHealthCheck returns the EnableDnsHealthCheck field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDnsHealthCheck() bool {
	if o == nil || IsNil(o.EnableDnsHealthCheck) {
		var ret bool
		return ret
	}
	return *o.EnableDnsHealthCheck
}

// GetEnableDnsHealthCheckOk returns a tuple with the EnableDnsHealthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDnsHealthCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsHealthCheck) {
		return nil, false
	}
	return o.EnableDnsHealthCheck, true
}

// HasEnableDnsHealthCheck returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDnsHealthCheck() bool {
	if o != nil && !IsNil(o.EnableDnsHealthCheck) {
		return true
	}

	return false
}

// SetEnableDnsHealthCheck gets a reference to the given bool and assigns it to the EnableDnsHealthCheck field.
func (o *MemberDns) SetEnableDnsHealthCheck(v bool) {
	o.EnableDnsHealthCheck = &v
}

// GetEnableDnstapQueries returns the EnableDnstapQueries field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDnstapQueries() bool {
	if o == nil || IsNil(o.EnableDnstapQueries) {
		var ret bool
		return ret
	}
	return *o.EnableDnstapQueries
}

// GetEnableDnstapQueriesOk returns a tuple with the EnableDnstapQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDnstapQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnstapQueries) {
		return nil, false
	}
	return o.EnableDnstapQueries, true
}

// HasEnableDnstapQueries returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDnstapQueries() bool {
	if o != nil && !IsNil(o.EnableDnstapQueries) {
		return true
	}

	return false
}

// SetEnableDnstapQueries gets a reference to the given bool and assigns it to the EnableDnstapQueries field.
func (o *MemberDns) SetEnableDnstapQueries(v bool) {
	o.EnableDnstapQueries = &v
}

// GetEnableDnstapResponses returns the EnableDnstapResponses field value if set, zero value otherwise.
func (o *MemberDns) GetEnableDnstapResponses() bool {
	if o == nil || IsNil(o.EnableDnstapResponses) {
		var ret bool
		return ret
	}
	return *o.EnableDnstapResponses
}

// GetEnableDnstapResponsesOk returns a tuple with the EnableDnstapResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableDnstapResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnstapResponses) {
		return nil, false
	}
	return o.EnableDnstapResponses, true
}

// HasEnableDnstapResponses returns a boolean if a field has been set.
func (o *MemberDns) HasEnableDnstapResponses() bool {
	if o != nil && !IsNil(o.EnableDnstapResponses) {
		return true
	}

	return false
}

// SetEnableDnstapResponses gets a reference to the given bool and assigns it to the EnableDnstapResponses field.
func (o *MemberDns) SetEnableDnstapResponses(v bool) {
	o.EnableDnstapResponses = &v
}

// GetEnableExcludedDomainNames returns the EnableExcludedDomainNames field value if set, zero value otherwise.
func (o *MemberDns) GetEnableExcludedDomainNames() bool {
	if o == nil || IsNil(o.EnableExcludedDomainNames) {
		var ret bool
		return ret
	}
	return *o.EnableExcludedDomainNames
}

// GetEnableExcludedDomainNamesOk returns a tuple with the EnableExcludedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableExcludedDomainNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableExcludedDomainNames) {
		return nil, false
	}
	return o.EnableExcludedDomainNames, true
}

// HasEnableExcludedDomainNames returns a boolean if a field has been set.
func (o *MemberDns) HasEnableExcludedDomainNames() bool {
	if o != nil && !IsNil(o.EnableExcludedDomainNames) {
		return true
	}

	return false
}

// SetEnableExcludedDomainNames gets a reference to the given bool and assigns it to the EnableExcludedDomainNames field.
func (o *MemberDns) SetEnableExcludedDomainNames(v bool) {
	o.EnableExcludedDomainNames = &v
}

// GetEnableFixedRrsetOrderFqdns returns the EnableFixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *MemberDns) GetEnableFixedRrsetOrderFqdns() bool {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		var ret bool
		return ret
	}
	return *o.EnableFixedRrsetOrderFqdns
}

// GetEnableFixedRrsetOrderFqdnsOk returns a tuple with the EnableFixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableFixedRrsetOrderFqdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.EnableFixedRrsetOrderFqdns, true
}

// HasEnableFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *MemberDns) HasEnableFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.EnableFixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetEnableFixedRrsetOrderFqdns gets a reference to the given bool and assigns it to the EnableFixedRrsetOrderFqdns field.
func (o *MemberDns) SetEnableFixedRrsetOrderFqdns(v bool) {
	o.EnableFixedRrsetOrderFqdns = &v
}

// GetEnableFtc returns the EnableFtc field value if set, zero value otherwise.
func (o *MemberDns) GetEnableFtc() bool {
	if o == nil || IsNil(o.EnableFtc) {
		var ret bool
		return ret
	}
	return *o.EnableFtc
}

// GetEnableFtcOk returns a tuple with the EnableFtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableFtcOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFtc) {
		return nil, false
	}
	return o.EnableFtc, true
}

// HasEnableFtc returns a boolean if a field has been set.
func (o *MemberDns) HasEnableFtc() bool {
	if o != nil && !IsNil(o.EnableFtc) {
		return true
	}

	return false
}

// SetEnableFtc gets a reference to the given bool and assigns it to the EnableFtc field.
func (o *MemberDns) SetEnableFtc(v bool) {
	o.EnableFtc = &v
}

// GetEnableGssTsig returns the EnableGssTsig field value if set, zero value otherwise.
func (o *MemberDns) GetEnableGssTsig() bool {
	if o == nil || IsNil(o.EnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.EnableGssTsig
}

// GetEnableGssTsigOk returns a tuple with the EnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGssTsig) {
		return nil, false
	}
	return o.EnableGssTsig, true
}

// HasEnableGssTsig returns a boolean if a field has been set.
func (o *MemberDns) HasEnableGssTsig() bool {
	if o != nil && !IsNil(o.EnableGssTsig) {
		return true
	}

	return false
}

// SetEnableGssTsig gets a reference to the given bool and assigns it to the EnableGssTsig field.
func (o *MemberDns) SetEnableGssTsig(v bool) {
	o.EnableGssTsig = &v
}

// GetEnableNotifySourcePort returns the EnableNotifySourcePort field value if set, zero value otherwise.
func (o *MemberDns) GetEnableNotifySourcePort() bool {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySourcePort
}

// GetEnableNotifySourcePortOk returns a tuple with the EnableNotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableNotifySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		return nil, false
	}
	return o.EnableNotifySourcePort, true
}

// HasEnableNotifySourcePort returns a boolean if a field has been set.
func (o *MemberDns) HasEnableNotifySourcePort() bool {
	if o != nil && !IsNil(o.EnableNotifySourcePort) {
		return true
	}

	return false
}

// SetEnableNotifySourcePort gets a reference to the given bool and assigns it to the EnableNotifySourcePort field.
func (o *MemberDns) SetEnableNotifySourcePort(v bool) {
	o.EnableNotifySourcePort = &v
}

// GetEnableQueryRewrite returns the EnableQueryRewrite field value if set, zero value otherwise.
func (o *MemberDns) GetEnableQueryRewrite() bool {
	if o == nil || IsNil(o.EnableQueryRewrite) {
		var ret bool
		return ret
	}
	return *o.EnableQueryRewrite
}

// GetEnableQueryRewriteOk returns a tuple with the EnableQueryRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableQueryRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQueryRewrite) {
		return nil, false
	}
	return o.EnableQueryRewrite, true
}

// HasEnableQueryRewrite returns a boolean if a field has been set.
func (o *MemberDns) HasEnableQueryRewrite() bool {
	if o != nil && !IsNil(o.EnableQueryRewrite) {
		return true
	}

	return false
}

// SetEnableQueryRewrite gets a reference to the given bool and assigns it to the EnableQueryRewrite field.
func (o *MemberDns) SetEnableQueryRewrite(v bool) {
	o.EnableQueryRewrite = &v
}

// GetEnableQuerySourcePort returns the EnableQuerySourcePort field value if set, zero value otherwise.
func (o *MemberDns) GetEnableQuerySourcePort() bool {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableQuerySourcePort
}

// GetEnableQuerySourcePortOk returns a tuple with the EnableQuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetEnableQuerySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		return nil, false
	}
	return o.EnableQuerySourcePort, true
}

// HasEnableQuerySourcePort returns a boolean if a field has been set.
func (o *MemberDns) HasEnableQuerySourcePort() bool {
	if o != nil && !IsNil(o.EnableQuerySourcePort) {
		return true
	}

	return false
}

// SetEnableQuerySourcePort gets a reference to the given bool and assigns it to the EnableQuerySourcePort field.
func (o *MemberDns) SetEnableQuerySourcePort(v bool) {
	o.EnableQuerySourcePort = &v
}

// GetExcludedDomainNames returns the ExcludedDomainNames field value if set, zero value otherwise.
func (o *MemberDns) GetExcludedDomainNames() []string {
	if o == nil || IsNil(o.ExcludedDomainNames) {
		var ret []string
		return ret
	}
	return o.ExcludedDomainNames
}

// GetExcludedDomainNamesOk returns a tuple with the ExcludedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetExcludedDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedDomainNames) {
		return nil, false
	}
	return o.ExcludedDomainNames, true
}

// HasExcludedDomainNames returns a boolean if a field has been set.
func (o *MemberDns) HasExcludedDomainNames() bool {
	if o != nil && !IsNil(o.ExcludedDomainNames) {
		return true
	}

	return false
}

// SetExcludedDomainNames gets a reference to the given []string and assigns it to the ExcludedDomainNames field.
func (o *MemberDns) SetExcludedDomainNames(v []string) {
	o.ExcludedDomainNames = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *MemberDns) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *MemberDns) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *MemberDns) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFileTransferSetting returns the FileTransferSetting field value if set, zero value otherwise.
func (o *MemberDns) GetFileTransferSetting() MemberDnsFileTransferSetting {
	if o == nil || IsNil(o.FileTransferSetting) {
		var ret MemberDnsFileTransferSetting
		return ret
	}
	return *o.FileTransferSetting
}

// GetFileTransferSettingOk returns a tuple with the FileTransferSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFileTransferSettingOk() (*MemberDnsFileTransferSetting, bool) {
	if o == nil || IsNil(o.FileTransferSetting) {
		return nil, false
	}
	return o.FileTransferSetting, true
}

// HasFileTransferSetting returns a boolean if a field has been set.
func (o *MemberDns) HasFileTransferSetting() bool {
	if o != nil && !IsNil(o.FileTransferSetting) {
		return true
	}

	return false
}

// SetFileTransferSetting gets a reference to the given MemberDnsFileTransferSetting and assigns it to the FileTransferSetting field.
func (o *MemberDns) SetFileTransferSetting(v MemberDnsFileTransferSetting) {
	o.FileTransferSetting = &v
}

// GetFilterAaaa returns the FilterAaaa field value if set, zero value otherwise.
func (o *MemberDns) GetFilterAaaa() string {
	if o == nil || IsNil(o.FilterAaaa) {
		var ret string
		return ret
	}
	return *o.FilterAaaa
}

// GetFilterAaaaOk returns a tuple with the FilterAaaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFilterAaaaOk() (*string, bool) {
	if o == nil || IsNil(o.FilterAaaa) {
		return nil, false
	}
	return o.FilterAaaa, true
}

// HasFilterAaaa returns a boolean if a field has been set.
func (o *MemberDns) HasFilterAaaa() bool {
	if o != nil && !IsNil(o.FilterAaaa) {
		return true
	}

	return false
}

// SetFilterAaaa gets a reference to the given string and assigns it to the FilterAaaa field.
func (o *MemberDns) SetFilterAaaa(v string) {
	o.FilterAaaa = &v
}

// GetFilterAaaaList returns the FilterAaaaList field value if set, zero value otherwise.
func (o *MemberDns) GetFilterAaaaList() []MemberDnsFilterAaaaList {
	if o == nil || IsNil(o.FilterAaaaList) {
		var ret []MemberDnsFilterAaaaList
		return ret
	}
	return o.FilterAaaaList
}

// GetFilterAaaaListOk returns a tuple with the FilterAaaaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFilterAaaaListOk() ([]MemberDnsFilterAaaaList, bool) {
	if o == nil || IsNil(o.FilterAaaaList) {
		return nil, false
	}
	return o.FilterAaaaList, true
}

// HasFilterAaaaList returns a boolean if a field has been set.
func (o *MemberDns) HasFilterAaaaList() bool {
	if o != nil && !IsNil(o.FilterAaaaList) {
		return true
	}

	return false
}

// SetFilterAaaaList gets a reference to the given []MemberDnsFilterAaaaList and assigns it to the FilterAaaaList field.
func (o *MemberDns) SetFilterAaaaList(v []MemberDnsFilterAaaaList) {
	o.FilterAaaaList = v
}

// GetFixedRrsetOrderFqdns returns the FixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *MemberDns) GetFixedRrsetOrderFqdns() []MemberDnsFixedRrsetOrderFqdns {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		var ret []MemberDnsFixedRrsetOrderFqdns
		return ret
	}
	return o.FixedRrsetOrderFqdns
}

// GetFixedRrsetOrderFqdnsOk returns a tuple with the FixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFixedRrsetOrderFqdnsOk() ([]MemberDnsFixedRrsetOrderFqdns, bool) {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.FixedRrsetOrderFqdns, true
}

// HasFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *MemberDns) HasFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.FixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetFixedRrsetOrderFqdns gets a reference to the given []MemberDnsFixedRrsetOrderFqdns and assigns it to the FixedRrsetOrderFqdns field.
func (o *MemberDns) SetFixedRrsetOrderFqdns(v []MemberDnsFixedRrsetOrderFqdns) {
	o.FixedRrsetOrderFqdns = v
}

// GetForwardOnly returns the ForwardOnly field value if set, zero value otherwise.
func (o *MemberDns) GetForwardOnly() bool {
	if o == nil || IsNil(o.ForwardOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardOnly
}

// GetForwardOnlyOk returns a tuple with the ForwardOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetForwardOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardOnly) {
		return nil, false
	}
	return o.ForwardOnly, true
}

// HasForwardOnly returns a boolean if a field has been set.
func (o *MemberDns) HasForwardOnly() bool {
	if o != nil && !IsNil(o.ForwardOnly) {
		return true
	}

	return false
}

// SetForwardOnly gets a reference to the given bool and assigns it to the ForwardOnly field.
func (o *MemberDns) SetForwardOnly(v bool) {
	o.ForwardOnly = &v
}

// GetForwardUpdates returns the ForwardUpdates field value if set, zero value otherwise.
func (o *MemberDns) GetForwardUpdates() bool {
	if o == nil || IsNil(o.ForwardUpdates) {
		var ret bool
		return ret
	}
	return *o.ForwardUpdates
}

// GetForwardUpdatesOk returns a tuple with the ForwardUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetForwardUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardUpdates) {
		return nil, false
	}
	return o.ForwardUpdates, true
}

// HasForwardUpdates returns a boolean if a field has been set.
func (o *MemberDns) HasForwardUpdates() bool {
	if o != nil && !IsNil(o.ForwardUpdates) {
		return true
	}

	return false
}

// SetForwardUpdates gets a reference to the given bool and assigns it to the ForwardUpdates field.
func (o *MemberDns) SetForwardUpdates(v bool) {
	o.ForwardUpdates = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *MemberDns) GetForwarders() []string {
	if o == nil || IsNil(o.Forwarders) {
		var ret []string
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetForwardersOk() ([]string, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *MemberDns) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []string and assigns it to the Forwarders field.
func (o *MemberDns) SetForwarders(v []string) {
	o.Forwarders = v
}

// GetFtcExpiredRecordTimeout returns the FtcExpiredRecordTimeout field value if set, zero value otherwise.
func (o *MemberDns) GetFtcExpiredRecordTimeout() int64 {
	if o == nil || IsNil(o.FtcExpiredRecordTimeout) {
		var ret int64
		return ret
	}
	return *o.FtcExpiredRecordTimeout
}

// GetFtcExpiredRecordTimeoutOk returns a tuple with the FtcExpiredRecordTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFtcExpiredRecordTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.FtcExpiredRecordTimeout) {
		return nil, false
	}
	return o.FtcExpiredRecordTimeout, true
}

// HasFtcExpiredRecordTimeout returns a boolean if a field has been set.
func (o *MemberDns) HasFtcExpiredRecordTimeout() bool {
	if o != nil && !IsNil(o.FtcExpiredRecordTimeout) {
		return true
	}

	return false
}

// SetFtcExpiredRecordTimeout gets a reference to the given int64 and assigns it to the FtcExpiredRecordTimeout field.
func (o *MemberDns) SetFtcExpiredRecordTimeout(v int64) {
	o.FtcExpiredRecordTimeout = &v
}

// GetFtcExpiredRecordTtl returns the FtcExpiredRecordTtl field value if set, zero value otherwise.
func (o *MemberDns) GetFtcExpiredRecordTtl() int64 {
	if o == nil || IsNil(o.FtcExpiredRecordTtl) {
		var ret int64
		return ret
	}
	return *o.FtcExpiredRecordTtl
}

// GetFtcExpiredRecordTtlOk returns a tuple with the FtcExpiredRecordTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetFtcExpiredRecordTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.FtcExpiredRecordTtl) {
		return nil, false
	}
	return o.FtcExpiredRecordTtl, true
}

// HasFtcExpiredRecordTtl returns a boolean if a field has been set.
func (o *MemberDns) HasFtcExpiredRecordTtl() bool {
	if o != nil && !IsNil(o.FtcExpiredRecordTtl) {
		return true
	}

	return false
}

// SetFtcExpiredRecordTtl gets a reference to the given int64 and assigns it to the FtcExpiredRecordTtl field.
func (o *MemberDns) SetFtcExpiredRecordTtl(v int64) {
	o.FtcExpiredRecordTtl = &v
}

// GetGlueRecordAddresses returns the GlueRecordAddresses field value if set, zero value otherwise.
func (o *MemberDns) GetGlueRecordAddresses() []MemberDnsGlueRecordAddresses {
	if o == nil || IsNil(o.GlueRecordAddresses) {
		var ret []MemberDnsGlueRecordAddresses
		return ret
	}
	return o.GlueRecordAddresses
}

// GetGlueRecordAddressesOk returns a tuple with the GlueRecordAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetGlueRecordAddressesOk() ([]MemberDnsGlueRecordAddresses, bool) {
	if o == nil || IsNil(o.GlueRecordAddresses) {
		return nil, false
	}
	return o.GlueRecordAddresses, true
}

// HasGlueRecordAddresses returns a boolean if a field has been set.
func (o *MemberDns) HasGlueRecordAddresses() bool {
	if o != nil && !IsNil(o.GlueRecordAddresses) {
		return true
	}

	return false
}

// SetGlueRecordAddresses gets a reference to the given []MemberDnsGlueRecordAddresses and assigns it to the GlueRecordAddresses field.
func (o *MemberDns) SetGlueRecordAddresses(v []MemberDnsGlueRecordAddresses) {
	o.GlueRecordAddresses = v
}

// GetGssTsigKeys returns the GssTsigKeys field value if set, zero value otherwise.
func (o *MemberDns) GetGssTsigKeys() []string {
	if o == nil || IsNil(o.GssTsigKeys) {
		var ret []string
		return ret
	}
	return o.GssTsigKeys
}

// GetGssTsigKeysOk returns a tuple with the GssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetGssTsigKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.GssTsigKeys) {
		return nil, false
	}
	return o.GssTsigKeys, true
}

// HasGssTsigKeys returns a boolean if a field has been set.
func (o *MemberDns) HasGssTsigKeys() bool {
	if o != nil && !IsNil(o.GssTsigKeys) {
		return true
	}

	return false
}

// SetGssTsigKeys gets a reference to the given []string and assigns it to the GssTsigKeys field.
func (o *MemberDns) SetGssTsigKeys(v []string) {
	o.GssTsigKeys = v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *MemberDns) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *MemberDns) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *MemberDns) SetHostName(v string) {
	o.HostName = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *MemberDns) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *MemberDns) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *MemberDns) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIpv6GlueRecordAddresses returns the Ipv6GlueRecordAddresses field value if set, zero value otherwise.
func (o *MemberDns) GetIpv6GlueRecordAddresses() []MemberDnsIpv6GlueRecordAddresses {
	if o == nil || IsNil(o.Ipv6GlueRecordAddresses) {
		var ret []MemberDnsIpv6GlueRecordAddresses
		return ret
	}
	return o.Ipv6GlueRecordAddresses
}

// GetIpv6GlueRecordAddressesOk returns a tuple with the Ipv6GlueRecordAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetIpv6GlueRecordAddressesOk() ([]MemberDnsIpv6GlueRecordAddresses, bool) {
	if o == nil || IsNil(o.Ipv6GlueRecordAddresses) {
		return nil, false
	}
	return o.Ipv6GlueRecordAddresses, true
}

// HasIpv6GlueRecordAddresses returns a boolean if a field has been set.
func (o *MemberDns) HasIpv6GlueRecordAddresses() bool {
	if o != nil && !IsNil(o.Ipv6GlueRecordAddresses) {
		return true
	}

	return false
}

// SetIpv6GlueRecordAddresses gets a reference to the given []MemberDnsIpv6GlueRecordAddresses and assigns it to the Ipv6GlueRecordAddresses field.
func (o *MemberDns) SetIpv6GlueRecordAddresses(v []MemberDnsIpv6GlueRecordAddresses) {
	o.Ipv6GlueRecordAddresses = v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *MemberDns) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *MemberDns) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *MemberDns) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetLoggingCategories returns the LoggingCategories field value if set, zero value otherwise.
func (o *MemberDns) GetLoggingCategories() MemberDnsLoggingCategories {
	if o == nil || IsNil(o.LoggingCategories) {
		var ret MemberDnsLoggingCategories
		return ret
	}
	return *o.LoggingCategories
}

// GetLoggingCategoriesOk returns a tuple with the LoggingCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetLoggingCategoriesOk() (*MemberDnsLoggingCategories, bool) {
	if o == nil || IsNil(o.LoggingCategories) {
		return nil, false
	}
	return o.LoggingCategories, true
}

// HasLoggingCategories returns a boolean if a field has been set.
func (o *MemberDns) HasLoggingCategories() bool {
	if o != nil && !IsNil(o.LoggingCategories) {
		return true
	}

	return false
}

// SetLoggingCategories gets a reference to the given MemberDnsLoggingCategories and assigns it to the LoggingCategories field.
func (o *MemberDns) SetLoggingCategories(v MemberDnsLoggingCategories) {
	o.LoggingCategories = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *MemberDns) GetMaxCacheTtl() int64 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetMaxCacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *MemberDns) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given int64 and assigns it to the MaxCacheTtl field.
func (o *MemberDns) SetMaxCacheTtl(v int64) {
	o.MaxCacheTtl = &v
}

// GetMaxCachedLifetime returns the MaxCachedLifetime field value if set, zero value otherwise.
func (o *MemberDns) GetMaxCachedLifetime() int64 {
	if o == nil || IsNil(o.MaxCachedLifetime) {
		var ret int64
		return ret
	}
	return *o.MaxCachedLifetime
}

// GetMaxCachedLifetimeOk returns a tuple with the MaxCachedLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetMaxCachedLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCachedLifetime) {
		return nil, false
	}
	return o.MaxCachedLifetime, true
}

// HasMaxCachedLifetime returns a boolean if a field has been set.
func (o *MemberDns) HasMaxCachedLifetime() bool {
	if o != nil && !IsNil(o.MaxCachedLifetime) {
		return true
	}

	return false
}

// SetMaxCachedLifetime gets a reference to the given int64 and assigns it to the MaxCachedLifetime field.
func (o *MemberDns) SetMaxCachedLifetime(v int64) {
	o.MaxCachedLifetime = &v
}

// GetMaxNcacheTtl returns the MaxNcacheTtl field value if set, zero value otherwise.
func (o *MemberDns) GetMaxNcacheTtl() int64 {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxNcacheTtl
}

// GetMaxNcacheTtlOk returns a tuple with the MaxNcacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetMaxNcacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		return nil, false
	}
	return o.MaxNcacheTtl, true
}

// HasMaxNcacheTtl returns a boolean if a field has been set.
func (o *MemberDns) HasMaxNcacheTtl() bool {
	if o != nil && !IsNil(o.MaxNcacheTtl) {
		return true
	}

	return false
}

// SetMaxNcacheTtl gets a reference to the given int64 and assigns it to the MaxNcacheTtl field.
func (o *MemberDns) SetMaxNcacheTtl(v int64) {
	o.MaxNcacheTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *MemberDns) GetMaxUdpSize() int64 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret int64
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetMaxUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *MemberDns) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given int64 and assigns it to the MaxUdpSize field.
func (o *MemberDns) SetMaxUdpSize(v int64) {
	o.MaxUdpSize = &v
}

// GetMinimalResp returns the MinimalResp field value if set, zero value otherwise.
func (o *MemberDns) GetMinimalResp() bool {
	if o == nil || IsNil(o.MinimalResp) {
		var ret bool
		return ret
	}
	return *o.MinimalResp
}

// GetMinimalRespOk returns a tuple with the MinimalResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetMinimalRespOk() (*bool, bool) {
	if o == nil || IsNil(o.MinimalResp) {
		return nil, false
	}
	return o.MinimalResp, true
}

// HasMinimalResp returns a boolean if a field has been set.
func (o *MemberDns) HasMinimalResp() bool {
	if o != nil && !IsNil(o.MinimalResp) {
		return true
	}

	return false
}

// SetMinimalResp gets a reference to the given bool and assigns it to the MinimalResp field.
func (o *MemberDns) SetMinimalResp(v bool) {
	o.MinimalResp = &v
}

// GetNotifyDelay returns the NotifyDelay field value if set, zero value otherwise.
func (o *MemberDns) GetNotifyDelay() int64 {
	if o == nil || IsNil(o.NotifyDelay) {
		var ret int64
		return ret
	}
	return *o.NotifyDelay
}

// GetNotifyDelayOk returns a tuple with the NotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNotifyDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifyDelay) {
		return nil, false
	}
	return o.NotifyDelay, true
}

// HasNotifyDelay returns a boolean if a field has been set.
func (o *MemberDns) HasNotifyDelay() bool {
	if o != nil && !IsNil(o.NotifyDelay) {
		return true
	}

	return false
}

// SetNotifyDelay gets a reference to the given int64 and assigns it to the NotifyDelay field.
func (o *MemberDns) SetNotifyDelay(v int64) {
	o.NotifyDelay = &v
}

// GetNotifySourcePort returns the NotifySourcePort field value if set, zero value otherwise.
func (o *MemberDns) GetNotifySourcePort() int64 {
	if o == nil || IsNil(o.NotifySourcePort) {
		var ret int64
		return ret
	}
	return *o.NotifySourcePort
}

// GetNotifySourcePortOk returns a tuple with the NotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNotifySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifySourcePort) {
		return nil, false
	}
	return o.NotifySourcePort, true
}

// HasNotifySourcePort returns a boolean if a field has been set.
func (o *MemberDns) HasNotifySourcePort() bool {
	if o != nil && !IsNil(o.NotifySourcePort) {
		return true
	}

	return false
}

// SetNotifySourcePort gets a reference to the given int64 and assigns it to the NotifySourcePort field.
func (o *MemberDns) SetNotifySourcePort(v int64) {
	o.NotifySourcePort = &v
}

// GetNxdomainLogQuery returns the NxdomainLogQuery field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainLogQuery() bool {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		var ret bool
		return ret
	}
	return *o.NxdomainLogQuery
}

// GetNxdomainLogQueryOk returns a tuple with the NxdomainLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		return nil, false
	}
	return o.NxdomainLogQuery, true
}

// HasNxdomainLogQuery returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainLogQuery() bool {
	if o != nil && !IsNil(o.NxdomainLogQuery) {
		return true
	}

	return false
}

// SetNxdomainLogQuery gets a reference to the given bool and assigns it to the NxdomainLogQuery field.
func (o *MemberDns) SetNxdomainLogQuery(v bool) {
	o.NxdomainLogQuery = &v
}

// GetNxdomainRedirect returns the NxdomainRedirect field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainRedirect() bool {
	if o == nil || IsNil(o.NxdomainRedirect) {
		var ret bool
		return ret
	}
	return *o.NxdomainRedirect
}

// GetNxdomainRedirectOk returns a tuple with the NxdomainRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainRedirect) {
		return nil, false
	}
	return o.NxdomainRedirect, true
}

// HasNxdomainRedirect returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainRedirect() bool {
	if o != nil && !IsNil(o.NxdomainRedirect) {
		return true
	}

	return false
}

// SetNxdomainRedirect gets a reference to the given bool and assigns it to the NxdomainRedirect field.
func (o *MemberDns) SetNxdomainRedirect(v bool) {
	o.NxdomainRedirect = &v
}

// GetNxdomainRedirectAddresses returns the NxdomainRedirectAddresses field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainRedirectAddresses() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddresses
}

// GetNxdomainRedirectAddressesOk returns a tuple with the NxdomainRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		return nil, false
	}
	return o.NxdomainRedirectAddresses, true
}

// HasNxdomainRedirectAddresses returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainRedirectAddresses() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddresses) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddresses gets a reference to the given []string and assigns it to the NxdomainRedirectAddresses field.
func (o *MemberDns) SetNxdomainRedirectAddresses(v []string) {
	o.NxdomainRedirectAddresses = v
}

// GetNxdomainRedirectAddressesV6 returns the NxdomainRedirectAddressesV6 field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainRedirectAddressesV6() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddressesV6
}

// GetNxdomainRedirectAddressesV6Ok returns a tuple with the NxdomainRedirectAddressesV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainRedirectAddressesV6Ok() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		return nil, false
	}
	return o.NxdomainRedirectAddressesV6, true
}

// HasNxdomainRedirectAddressesV6 returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainRedirectAddressesV6() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddressesV6) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddressesV6 gets a reference to the given []string and assigns it to the NxdomainRedirectAddressesV6 field.
func (o *MemberDns) SetNxdomainRedirectAddressesV6(v []string) {
	o.NxdomainRedirectAddressesV6 = v
}

// GetNxdomainRedirectTtl returns the NxdomainRedirectTtl field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainRedirectTtl() int64 {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.NxdomainRedirectTtl
}

// GetNxdomainRedirectTtlOk returns a tuple with the NxdomainRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		return nil, false
	}
	return o.NxdomainRedirectTtl, true
}

// HasNxdomainRedirectTtl returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainRedirectTtl() bool {
	if o != nil && !IsNil(o.NxdomainRedirectTtl) {
		return true
	}

	return false
}

// SetNxdomainRedirectTtl gets a reference to the given int64 and assigns it to the NxdomainRedirectTtl field.
func (o *MemberDns) SetNxdomainRedirectTtl(v int64) {
	o.NxdomainRedirectTtl = &v
}

// GetNxdomainRulesets returns the NxdomainRulesets field value if set, zero value otherwise.
func (o *MemberDns) GetNxdomainRulesets() []string {
	if o == nil || IsNil(o.NxdomainRulesets) {
		var ret []string
		return ret
	}
	return o.NxdomainRulesets
}

// GetNxdomainRulesetsOk returns a tuple with the NxdomainRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetNxdomainRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRulesets) {
		return nil, false
	}
	return o.NxdomainRulesets, true
}

// HasNxdomainRulesets returns a boolean if a field has been set.
func (o *MemberDns) HasNxdomainRulesets() bool {
	if o != nil && !IsNil(o.NxdomainRulesets) {
		return true
	}

	return false
}

// SetNxdomainRulesets gets a reference to the given []string and assigns it to the NxdomainRulesets field.
func (o *MemberDns) SetNxdomainRulesets(v []string) {
	o.NxdomainRulesets = v
}

// GetQuerySourcePort returns the QuerySourcePort field value if set, zero value otherwise.
func (o *MemberDns) GetQuerySourcePort() int64 {
	if o == nil || IsNil(o.QuerySourcePort) {
		var ret int64
		return ret
	}
	return *o.QuerySourcePort
}

// GetQuerySourcePortOk returns a tuple with the QuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetQuerySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.QuerySourcePort) {
		return nil, false
	}
	return o.QuerySourcePort, true
}

// HasQuerySourcePort returns a boolean if a field has been set.
func (o *MemberDns) HasQuerySourcePort() bool {
	if o != nil && !IsNil(o.QuerySourcePort) {
		return true
	}

	return false
}

// SetQuerySourcePort gets a reference to the given int64 and assigns it to the QuerySourcePort field.
func (o *MemberDns) SetQuerySourcePort(v int64) {
	o.QuerySourcePort = &v
}

// GetRecordNamePolicy returns the RecordNamePolicy field value if set, zero value otherwise.
func (o *MemberDns) GetRecordNamePolicy() string {
	if o == nil || IsNil(o.RecordNamePolicy) {
		var ret string
		return ret
	}
	return *o.RecordNamePolicy
}

// GetRecordNamePolicyOk returns a tuple with the RecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRecordNamePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RecordNamePolicy) {
		return nil, false
	}
	return o.RecordNamePolicy, true
}

// HasRecordNamePolicy returns a boolean if a field has been set.
func (o *MemberDns) HasRecordNamePolicy() bool {
	if o != nil && !IsNil(o.RecordNamePolicy) {
		return true
	}

	return false
}

// SetRecordNamePolicy gets a reference to the given string and assigns it to the RecordNamePolicy field.
func (o *MemberDns) SetRecordNamePolicy(v string) {
	o.RecordNamePolicy = &v
}

// GetRecursiveClientLimit returns the RecursiveClientLimit field value if set, zero value otherwise.
func (o *MemberDns) GetRecursiveClientLimit() int64 {
	if o == nil || IsNil(o.RecursiveClientLimit) {
		var ret int64
		return ret
	}
	return *o.RecursiveClientLimit
}

// GetRecursiveClientLimitOk returns a tuple with the RecursiveClientLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRecursiveClientLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.RecursiveClientLimit) {
		return nil, false
	}
	return o.RecursiveClientLimit, true
}

// HasRecursiveClientLimit returns a boolean if a field has been set.
func (o *MemberDns) HasRecursiveClientLimit() bool {
	if o != nil && !IsNil(o.RecursiveClientLimit) {
		return true
	}

	return false
}

// SetRecursiveClientLimit gets a reference to the given int64 and assigns it to the RecursiveClientLimit field.
func (o *MemberDns) SetRecursiveClientLimit(v int64) {
	o.RecursiveClientLimit = &v
}

// GetRecursiveQueryList returns the RecursiveQueryList field value if set, zero value otherwise.
func (o *MemberDns) GetRecursiveQueryList() []MemberDnsRecursiveQueryList {
	if o == nil || IsNil(o.RecursiveQueryList) {
		var ret []MemberDnsRecursiveQueryList
		return ret
	}
	return o.RecursiveQueryList
}

// GetRecursiveQueryListOk returns a tuple with the RecursiveQueryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRecursiveQueryListOk() ([]MemberDnsRecursiveQueryList, bool) {
	if o == nil || IsNil(o.RecursiveQueryList) {
		return nil, false
	}
	return o.RecursiveQueryList, true
}

// HasRecursiveQueryList returns a boolean if a field has been set.
func (o *MemberDns) HasRecursiveQueryList() bool {
	if o != nil && !IsNil(o.RecursiveQueryList) {
		return true
	}

	return false
}

// SetRecursiveQueryList gets a reference to the given []MemberDnsRecursiveQueryList and assigns it to the RecursiveQueryList field.
func (o *MemberDns) SetRecursiveQueryList(v []MemberDnsRecursiveQueryList) {
	o.RecursiveQueryList = v
}

// GetRecursiveResolver returns the RecursiveResolver field value if set, zero value otherwise.
func (o *MemberDns) GetRecursiveResolver() string {
	if o == nil || IsNil(o.RecursiveResolver) {
		var ret string
		return ret
	}
	return *o.RecursiveResolver
}

// GetRecursiveResolverOk returns a tuple with the RecursiveResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRecursiveResolverOk() (*string, bool) {
	if o == nil || IsNil(o.RecursiveResolver) {
		return nil, false
	}
	return o.RecursiveResolver, true
}

// HasRecursiveResolver returns a boolean if a field has been set.
func (o *MemberDns) HasRecursiveResolver() bool {
	if o != nil && !IsNil(o.RecursiveResolver) {
		return true
	}

	return false
}

// SetRecursiveResolver gets a reference to the given string and assigns it to the RecursiveResolver field.
func (o *MemberDns) SetRecursiveResolver(v string) {
	o.RecursiveResolver = &v
}

// GetResolverQueryTimeout returns the ResolverQueryTimeout field value if set, zero value otherwise.
func (o *MemberDns) GetResolverQueryTimeout() int64 {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		var ret int64
		return ret
	}
	return *o.ResolverQueryTimeout
}

// GetResolverQueryTimeoutOk returns a tuple with the ResolverQueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetResolverQueryTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		return nil, false
	}
	return o.ResolverQueryTimeout, true
}

// HasResolverQueryTimeout returns a boolean if a field has been set.
func (o *MemberDns) HasResolverQueryTimeout() bool {
	if o != nil && !IsNil(o.ResolverQueryTimeout) {
		return true
	}

	return false
}

// SetResolverQueryTimeout gets a reference to the given int64 and assigns it to the ResolverQueryTimeout field.
func (o *MemberDns) SetResolverQueryTimeout(v int64) {
	o.ResolverQueryTimeout = &v
}

// GetResponseRateLimiting returns the ResponseRateLimiting field value if set, zero value otherwise.
func (o *MemberDns) GetResponseRateLimiting() MemberDnsResponseRateLimiting {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		var ret MemberDnsResponseRateLimiting
		return ret
	}
	return *o.ResponseRateLimiting
}

// GetResponseRateLimitingOk returns a tuple with the ResponseRateLimiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetResponseRateLimitingOk() (*MemberDnsResponseRateLimiting, bool) {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		return nil, false
	}
	return o.ResponseRateLimiting, true
}

// HasResponseRateLimiting returns a boolean if a field has been set.
func (o *MemberDns) HasResponseRateLimiting() bool {
	if o != nil && !IsNil(o.ResponseRateLimiting) {
		return true
	}

	return false
}

// SetResponseRateLimiting gets a reference to the given MemberDnsResponseRateLimiting and assigns it to the ResponseRateLimiting field.
func (o *MemberDns) SetResponseRateLimiting(v MemberDnsResponseRateLimiting) {
	o.ResponseRateLimiting = &v
}

// GetRootNameServerType returns the RootNameServerType field value if set, zero value otherwise.
func (o *MemberDns) GetRootNameServerType() string {
	if o == nil || IsNil(o.RootNameServerType) {
		var ret string
		return ret
	}
	return *o.RootNameServerType
}

// GetRootNameServerTypeOk returns a tuple with the RootNameServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRootNameServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootNameServerType) {
		return nil, false
	}
	return o.RootNameServerType, true
}

// HasRootNameServerType returns a boolean if a field has been set.
func (o *MemberDns) HasRootNameServerType() bool {
	if o != nil && !IsNil(o.RootNameServerType) {
		return true
	}

	return false
}

// SetRootNameServerType gets a reference to the given string and assigns it to the RootNameServerType field.
func (o *MemberDns) SetRootNameServerType(v string) {
	o.RootNameServerType = &v
}

// GetRpzDisableNsdnameNsip returns the RpzDisableNsdnameNsip field value if set, zero value otherwise.
func (o *MemberDns) GetRpzDisableNsdnameNsip() bool {
	if o == nil || IsNil(o.RpzDisableNsdnameNsip) {
		var ret bool
		return ret
	}
	return *o.RpzDisableNsdnameNsip
}

// GetRpzDisableNsdnameNsipOk returns a tuple with the RpzDisableNsdnameNsip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRpzDisableNsdnameNsipOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDisableNsdnameNsip) {
		return nil, false
	}
	return o.RpzDisableNsdnameNsip, true
}

// HasRpzDisableNsdnameNsip returns a boolean if a field has been set.
func (o *MemberDns) HasRpzDisableNsdnameNsip() bool {
	if o != nil && !IsNil(o.RpzDisableNsdnameNsip) {
		return true
	}

	return false
}

// SetRpzDisableNsdnameNsip gets a reference to the given bool and assigns it to the RpzDisableNsdnameNsip field.
func (o *MemberDns) SetRpzDisableNsdnameNsip(v bool) {
	o.RpzDisableNsdnameNsip = &v
}

// GetRpzDropIpRuleEnabled returns the RpzDropIpRuleEnabled field value if set, zero value otherwise.
func (o *MemberDns) GetRpzDropIpRuleEnabled() bool {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		var ret bool
		return ret
	}
	return *o.RpzDropIpRuleEnabled
}

// GetRpzDropIpRuleEnabledOk returns a tuple with the RpzDropIpRuleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRpzDropIpRuleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		return nil, false
	}
	return o.RpzDropIpRuleEnabled, true
}

// HasRpzDropIpRuleEnabled returns a boolean if a field has been set.
func (o *MemberDns) HasRpzDropIpRuleEnabled() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleEnabled) {
		return true
	}

	return false
}

// SetRpzDropIpRuleEnabled gets a reference to the given bool and assigns it to the RpzDropIpRuleEnabled field.
func (o *MemberDns) SetRpzDropIpRuleEnabled(v bool) {
	o.RpzDropIpRuleEnabled = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv4 returns the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, zero value otherwise.
func (o *MemberDns) GetRpzDropIpRuleMinPrefixLengthIpv4() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv4
}

// GetRpzDropIpRuleMinPrefixLengthIpv4Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRpzDropIpRuleMinPrefixLengthIpv4Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv4, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv4 returns a boolean if a field has been set.
func (o *MemberDns) HasRpzDropIpRuleMinPrefixLengthIpv4() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv4 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv4 field.
func (o *MemberDns) SetRpzDropIpRuleMinPrefixLengthIpv4(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv4 = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv6 returns the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, zero value otherwise.
func (o *MemberDns) GetRpzDropIpRuleMinPrefixLengthIpv6() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv6
}

// GetRpzDropIpRuleMinPrefixLengthIpv6Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRpzDropIpRuleMinPrefixLengthIpv6Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv6, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv6 returns a boolean if a field has been set.
func (o *MemberDns) HasRpzDropIpRuleMinPrefixLengthIpv6() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv6 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv6 field.
func (o *MemberDns) SetRpzDropIpRuleMinPrefixLengthIpv6(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv6 = &v
}

// GetRpzQnameWaitRecurse returns the RpzQnameWaitRecurse field value if set, zero value otherwise.
func (o *MemberDns) GetRpzQnameWaitRecurse() bool {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		var ret bool
		return ret
	}
	return *o.RpzQnameWaitRecurse
}

// GetRpzQnameWaitRecurseOk returns a tuple with the RpzQnameWaitRecurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetRpzQnameWaitRecurseOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		return nil, false
	}
	return o.RpzQnameWaitRecurse, true
}

// HasRpzQnameWaitRecurse returns a boolean if a field has been set.
func (o *MemberDns) HasRpzQnameWaitRecurse() bool {
	if o != nil && !IsNil(o.RpzQnameWaitRecurse) {
		return true
	}

	return false
}

// SetRpzQnameWaitRecurse gets a reference to the given bool and assigns it to the RpzQnameWaitRecurse field.
func (o *MemberDns) SetRpzQnameWaitRecurse(v bool) {
	o.RpzQnameWaitRecurse = &v
}

// GetSerialQueryRate returns the SerialQueryRate field value if set, zero value otherwise.
func (o *MemberDns) GetSerialQueryRate() int64 {
	if o == nil || IsNil(o.SerialQueryRate) {
		var ret int64
		return ret
	}
	return *o.SerialQueryRate
}

// GetSerialQueryRateOk returns a tuple with the SerialQueryRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetSerialQueryRateOk() (*int64, bool) {
	if o == nil || IsNil(o.SerialQueryRate) {
		return nil, false
	}
	return o.SerialQueryRate, true
}

// HasSerialQueryRate returns a boolean if a field has been set.
func (o *MemberDns) HasSerialQueryRate() bool {
	if o != nil && !IsNil(o.SerialQueryRate) {
		return true
	}

	return false
}

// SetSerialQueryRate gets a reference to the given int64 and assigns it to the SerialQueryRate field.
func (o *MemberDns) SetSerialQueryRate(v int64) {
	o.SerialQueryRate = &v
}

// GetServerIdDirective returns the ServerIdDirective field value if set, zero value otherwise.
func (o *MemberDns) GetServerIdDirective() string {
	if o == nil || IsNil(o.ServerIdDirective) {
		var ret string
		return ret
	}
	return *o.ServerIdDirective
}

// GetServerIdDirectiveOk returns a tuple with the ServerIdDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetServerIdDirectiveOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIdDirective) {
		return nil, false
	}
	return o.ServerIdDirective, true
}

// HasServerIdDirective returns a boolean if a field has been set.
func (o *MemberDns) HasServerIdDirective() bool {
	if o != nil && !IsNil(o.ServerIdDirective) {
		return true
	}

	return false
}

// SetServerIdDirective gets a reference to the given string and assigns it to the ServerIdDirective field.
func (o *MemberDns) SetServerIdDirective(v string) {
	o.ServerIdDirective = &v
}

// GetServerIdDirectiveString returns the ServerIdDirectiveString field value if set, zero value otherwise.
func (o *MemberDns) GetServerIdDirectiveString() string {
	if o == nil || IsNil(o.ServerIdDirectiveString) {
		var ret string
		return ret
	}
	return *o.ServerIdDirectiveString
}

// GetServerIdDirectiveStringOk returns a tuple with the ServerIdDirectiveString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetServerIdDirectiveStringOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIdDirectiveString) {
		return nil, false
	}
	return o.ServerIdDirectiveString, true
}

// HasServerIdDirectiveString returns a boolean if a field has been set.
func (o *MemberDns) HasServerIdDirectiveString() bool {
	if o != nil && !IsNil(o.ServerIdDirectiveString) {
		return true
	}

	return false
}

// SetServerIdDirectiveString gets a reference to the given string and assigns it to the ServerIdDirectiveString field.
func (o *MemberDns) SetServerIdDirectiveString(v string) {
	o.ServerIdDirectiveString = &v
}

// GetSkipInGridRpzQueries returns the SkipInGridRpzQueries field value if set, zero value otherwise.
func (o *MemberDns) GetSkipInGridRpzQueries() bool {
	if o == nil || IsNil(o.SkipInGridRpzQueries) {
		var ret bool
		return ret
	}
	return *o.SkipInGridRpzQueries
}

// GetSkipInGridRpzQueriesOk returns a tuple with the SkipInGridRpzQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetSkipInGridRpzQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipInGridRpzQueries) {
		return nil, false
	}
	return o.SkipInGridRpzQueries, true
}

// HasSkipInGridRpzQueries returns a boolean if a field has been set.
func (o *MemberDns) HasSkipInGridRpzQueries() bool {
	if o != nil && !IsNil(o.SkipInGridRpzQueries) {
		return true
	}

	return false
}

// SetSkipInGridRpzQueries gets a reference to the given bool and assigns it to the SkipInGridRpzQueries field.
func (o *MemberDns) SetSkipInGridRpzQueries(v bool) {
	o.SkipInGridRpzQueries = &v
}

// GetSortlist returns the Sortlist field value if set, zero value otherwise.
func (o *MemberDns) GetSortlist() []MemberDnsSortlist {
	if o == nil || IsNil(o.Sortlist) {
		var ret []MemberDnsSortlist
		return ret
	}
	return o.Sortlist
}

// GetSortlistOk returns a tuple with the Sortlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetSortlistOk() ([]MemberDnsSortlist, bool) {
	if o == nil || IsNil(o.Sortlist) {
		return nil, false
	}
	return o.Sortlist, true
}

// HasSortlist returns a boolean if a field has been set.
func (o *MemberDns) HasSortlist() bool {
	if o != nil && !IsNil(o.Sortlist) {
		return true
	}

	return false
}

// SetSortlist gets a reference to the given []MemberDnsSortlist and assigns it to the Sortlist field.
func (o *MemberDns) SetSortlist(v []MemberDnsSortlist) {
	o.Sortlist = v
}

// GetStoreLocally returns the StoreLocally field value if set, zero value otherwise.
func (o *MemberDns) GetStoreLocally() bool {
	if o == nil || IsNil(o.StoreLocally) {
		var ret bool
		return ret
	}
	return *o.StoreLocally
}

// GetStoreLocallyOk returns a tuple with the StoreLocally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetStoreLocallyOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreLocally) {
		return nil, false
	}
	return o.StoreLocally, true
}

// HasStoreLocally returns a boolean if a field has been set.
func (o *MemberDns) HasStoreLocally() bool {
	if o != nil && !IsNil(o.StoreLocally) {
		return true
	}

	return false
}

// SetStoreLocally gets a reference to the given bool and assigns it to the StoreLocally field.
func (o *MemberDns) SetStoreLocally(v bool) {
	o.StoreLocally = &v
}

// GetSyslogFacility returns the SyslogFacility field value if set, zero value otherwise.
func (o *MemberDns) GetSyslogFacility() string {
	if o == nil || IsNil(o.SyslogFacility) {
		var ret string
		return ret
	}
	return *o.SyslogFacility
}

// GetSyslogFacilityOk returns a tuple with the SyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetSyslogFacilityOk() (*string, bool) {
	if o == nil || IsNil(o.SyslogFacility) {
		return nil, false
	}
	return o.SyslogFacility, true
}

// HasSyslogFacility returns a boolean if a field has been set.
func (o *MemberDns) HasSyslogFacility() bool {
	if o != nil && !IsNil(o.SyslogFacility) {
		return true
	}

	return false
}

// SetSyslogFacility gets a reference to the given string and assigns it to the SyslogFacility field.
func (o *MemberDns) SetSyslogFacility(v string) {
	o.SyslogFacility = &v
}

// GetTcpIdleTimeout returns the TcpIdleTimeout field value if set, zero value otherwise.
func (o *MemberDns) GetTcpIdleTimeout() int64 {
	if o == nil || IsNil(o.TcpIdleTimeout) {
		var ret int64
		return ret
	}
	return *o.TcpIdleTimeout
}

// GetTcpIdleTimeoutOk returns a tuple with the TcpIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTcpIdleTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.TcpIdleTimeout) {
		return nil, false
	}
	return o.TcpIdleTimeout, true
}

// HasTcpIdleTimeout returns a boolean if a field has been set.
func (o *MemberDns) HasTcpIdleTimeout() bool {
	if o != nil && !IsNil(o.TcpIdleTimeout) {
		return true
	}

	return false
}

// SetTcpIdleTimeout gets a reference to the given int64 and assigns it to the TcpIdleTimeout field.
func (o *MemberDns) SetTcpIdleTimeout(v int64) {
	o.TcpIdleTimeout = &v
}

// GetTlsSessionDuration returns the TlsSessionDuration field value if set, zero value otherwise.
func (o *MemberDns) GetTlsSessionDuration() int64 {
	if o == nil || IsNil(o.TlsSessionDuration) {
		var ret int64
		return ret
	}
	return *o.TlsSessionDuration
}

// GetTlsSessionDurationOk returns a tuple with the TlsSessionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTlsSessionDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.TlsSessionDuration) {
		return nil, false
	}
	return o.TlsSessionDuration, true
}

// HasTlsSessionDuration returns a boolean if a field has been set.
func (o *MemberDns) HasTlsSessionDuration() bool {
	if o != nil && !IsNil(o.TlsSessionDuration) {
		return true
	}

	return false
}

// SetTlsSessionDuration gets a reference to the given int64 and assigns it to the TlsSessionDuration field.
func (o *MemberDns) SetTlsSessionDuration(v int64) {
	o.TlsSessionDuration = &v
}

// GetTransferExcludedServers returns the TransferExcludedServers field value if set, zero value otherwise.
func (o *MemberDns) GetTransferExcludedServers() []string {
	if o == nil || IsNil(o.TransferExcludedServers) {
		var ret []string
		return ret
	}
	return o.TransferExcludedServers
}

// GetTransferExcludedServersOk returns a tuple with the TransferExcludedServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTransferExcludedServersOk() ([]string, bool) {
	if o == nil || IsNil(o.TransferExcludedServers) {
		return nil, false
	}
	return o.TransferExcludedServers, true
}

// HasTransferExcludedServers returns a boolean if a field has been set.
func (o *MemberDns) HasTransferExcludedServers() bool {
	if o != nil && !IsNil(o.TransferExcludedServers) {
		return true
	}

	return false
}

// SetTransferExcludedServers gets a reference to the given []string and assigns it to the TransferExcludedServers field.
func (o *MemberDns) SetTransferExcludedServers(v []string) {
	o.TransferExcludedServers = v
}

// GetTransferFormat returns the TransferFormat field value if set, zero value otherwise.
func (o *MemberDns) GetTransferFormat() string {
	if o == nil || IsNil(o.TransferFormat) {
		var ret string
		return ret
	}
	return *o.TransferFormat
}

// GetTransferFormatOk returns a tuple with the TransferFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTransferFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TransferFormat) {
		return nil, false
	}
	return o.TransferFormat, true
}

// HasTransferFormat returns a boolean if a field has been set.
func (o *MemberDns) HasTransferFormat() bool {
	if o != nil && !IsNil(o.TransferFormat) {
		return true
	}

	return false
}

// SetTransferFormat gets a reference to the given string and assigns it to the TransferFormat field.
func (o *MemberDns) SetTransferFormat(v string) {
	o.TransferFormat = &v
}

// GetTransfersIn returns the TransfersIn field value if set, zero value otherwise.
func (o *MemberDns) GetTransfersIn() int64 {
	if o == nil || IsNil(o.TransfersIn) {
		var ret int64
		return ret
	}
	return *o.TransfersIn
}

// GetTransfersInOk returns a tuple with the TransfersIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTransfersInOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersIn) {
		return nil, false
	}
	return o.TransfersIn, true
}

// HasTransfersIn returns a boolean if a field has been set.
func (o *MemberDns) HasTransfersIn() bool {
	if o != nil && !IsNil(o.TransfersIn) {
		return true
	}

	return false
}

// SetTransfersIn gets a reference to the given int64 and assigns it to the TransfersIn field.
func (o *MemberDns) SetTransfersIn(v int64) {
	o.TransfersIn = &v
}

// GetTransfersOut returns the TransfersOut field value if set, zero value otherwise.
func (o *MemberDns) GetTransfersOut() int64 {
	if o == nil || IsNil(o.TransfersOut) {
		var ret int64
		return ret
	}
	return *o.TransfersOut
}

// GetTransfersOutOk returns a tuple with the TransfersOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTransfersOutOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersOut) {
		return nil, false
	}
	return o.TransfersOut, true
}

// HasTransfersOut returns a boolean if a field has been set.
func (o *MemberDns) HasTransfersOut() bool {
	if o != nil && !IsNil(o.TransfersOut) {
		return true
	}

	return false
}

// SetTransfersOut gets a reference to the given int64 and assigns it to the TransfersOut field.
func (o *MemberDns) SetTransfersOut(v int64) {
	o.TransfersOut = &v
}

// GetTransfersPerNs returns the TransfersPerNs field value if set, zero value otherwise.
func (o *MemberDns) GetTransfersPerNs() int64 {
	if o == nil || IsNil(o.TransfersPerNs) {
		var ret int64
		return ret
	}
	return *o.TransfersPerNs
}

// GetTransfersPerNsOk returns a tuple with the TransfersPerNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetTransfersPerNsOk() (*int64, bool) {
	if o == nil || IsNil(o.TransfersPerNs) {
		return nil, false
	}
	return o.TransfersPerNs, true
}

// HasTransfersPerNs returns a boolean if a field has been set.
func (o *MemberDns) HasTransfersPerNs() bool {
	if o != nil && !IsNil(o.TransfersPerNs) {
		return true
	}

	return false
}

// SetTransfersPerNs gets a reference to the given int64 and assigns it to the TransfersPerNs field.
func (o *MemberDns) SetTransfersPerNs(v int64) {
	o.TransfersPerNs = &v
}

// GetUseAddClientIpMacOptions returns the UseAddClientIpMacOptions field value if set, zero value otherwise.
func (o *MemberDns) GetUseAddClientIpMacOptions() bool {
	if o == nil || IsNil(o.UseAddClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.UseAddClientIpMacOptions
}

// GetUseAddClientIpMacOptionsOk returns a tuple with the UseAddClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseAddClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAddClientIpMacOptions) {
		return nil, false
	}
	return o.UseAddClientIpMacOptions, true
}

// HasUseAddClientIpMacOptions returns a boolean if a field has been set.
func (o *MemberDns) HasUseAddClientIpMacOptions() bool {
	if o != nil && !IsNil(o.UseAddClientIpMacOptions) {
		return true
	}

	return false
}

// SetUseAddClientIpMacOptions gets a reference to the given bool and assigns it to the UseAddClientIpMacOptions field.
func (o *MemberDns) SetUseAddClientIpMacOptions(v bool) {
	o.UseAddClientIpMacOptions = &v
}

// GetUseAllowQuery returns the UseAllowQuery field value if set, zero value otherwise.
func (o *MemberDns) GetUseAllowQuery() bool {
	if o == nil || IsNil(o.UseAllowQuery) {
		var ret bool
		return ret
	}
	return *o.UseAllowQuery
}

// GetUseAllowQueryOk returns a tuple with the UseAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseAllowQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowQuery) {
		return nil, false
	}
	return o.UseAllowQuery, true
}

// HasUseAllowQuery returns a boolean if a field has been set.
func (o *MemberDns) HasUseAllowQuery() bool {
	if o != nil && !IsNil(o.UseAllowQuery) {
		return true
	}

	return false
}

// SetUseAllowQuery gets a reference to the given bool and assigns it to the UseAllowQuery field.
func (o *MemberDns) SetUseAllowQuery(v bool) {
	o.UseAllowQuery = &v
}

// GetUseAllowTransfer returns the UseAllowTransfer field value if set, zero value otherwise.
func (o *MemberDns) GetUseAllowTransfer() bool {
	if o == nil || IsNil(o.UseAllowTransfer) {
		var ret bool
		return ret
	}
	return *o.UseAllowTransfer
}

// GetUseAllowTransferOk returns a tuple with the UseAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseAllowTransferOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAllowTransfer) {
		return nil, false
	}
	return o.UseAllowTransfer, true
}

// HasUseAllowTransfer returns a boolean if a field has been set.
func (o *MemberDns) HasUseAllowTransfer() bool {
	if o != nil && !IsNil(o.UseAllowTransfer) {
		return true
	}

	return false
}

// SetUseAllowTransfer gets a reference to the given bool and assigns it to the UseAllowTransfer field.
func (o *MemberDns) SetUseAllowTransfer(v bool) {
	o.UseAllowTransfer = &v
}

// GetUseAttackMitigation returns the UseAttackMitigation field value if set, zero value otherwise.
func (o *MemberDns) GetUseAttackMitigation() bool {
	if o == nil || IsNil(o.UseAttackMitigation) {
		var ret bool
		return ret
	}
	return *o.UseAttackMitigation
}

// GetUseAttackMitigationOk returns a tuple with the UseAttackMitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseAttackMitigationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAttackMitigation) {
		return nil, false
	}
	return o.UseAttackMitigation, true
}

// HasUseAttackMitigation returns a boolean if a field has been set.
func (o *MemberDns) HasUseAttackMitigation() bool {
	if o != nil && !IsNil(o.UseAttackMitigation) {
		return true
	}

	return false
}

// SetUseAttackMitigation gets a reference to the given bool and assigns it to the UseAttackMitigation field.
func (o *MemberDns) SetUseAttackMitigation(v bool) {
	o.UseAttackMitigation = &v
}

// GetUseAutoBlackhole returns the UseAutoBlackhole field value if set, zero value otherwise.
func (o *MemberDns) GetUseAutoBlackhole() bool {
	if o == nil || IsNil(o.UseAutoBlackhole) {
		var ret bool
		return ret
	}
	return *o.UseAutoBlackhole
}

// GetUseAutoBlackholeOk returns a tuple with the UseAutoBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseAutoBlackholeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAutoBlackhole) {
		return nil, false
	}
	return o.UseAutoBlackhole, true
}

// HasUseAutoBlackhole returns a boolean if a field has been set.
func (o *MemberDns) HasUseAutoBlackhole() bool {
	if o != nil && !IsNil(o.UseAutoBlackhole) {
		return true
	}

	return false
}

// SetUseAutoBlackhole gets a reference to the given bool and assigns it to the UseAutoBlackhole field.
func (o *MemberDns) SetUseAutoBlackhole(v bool) {
	o.UseAutoBlackhole = &v
}

// GetUseBindHostnameDirective returns the UseBindHostnameDirective field value if set, zero value otherwise.
func (o *MemberDns) GetUseBindHostnameDirective() bool {
	if o == nil || IsNil(o.UseBindHostnameDirective) {
		var ret bool
		return ret
	}
	return *o.UseBindHostnameDirective
}

// GetUseBindHostnameDirectiveOk returns a tuple with the UseBindHostnameDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseBindHostnameDirectiveOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBindHostnameDirective) {
		return nil, false
	}
	return o.UseBindHostnameDirective, true
}

// HasUseBindHostnameDirective returns a boolean if a field has been set.
func (o *MemberDns) HasUseBindHostnameDirective() bool {
	if o != nil && !IsNil(o.UseBindHostnameDirective) {
		return true
	}

	return false
}

// SetUseBindHostnameDirective gets a reference to the given bool and assigns it to the UseBindHostnameDirective field.
func (o *MemberDns) SetUseBindHostnameDirective(v bool) {
	o.UseBindHostnameDirective = &v
}

// GetUseBlackhole returns the UseBlackhole field value if set, zero value otherwise.
func (o *MemberDns) GetUseBlackhole() bool {
	if o == nil || IsNil(o.UseBlackhole) {
		var ret bool
		return ret
	}
	return *o.UseBlackhole
}

// GetUseBlackholeOk returns a tuple with the UseBlackhole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseBlackholeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackhole) {
		return nil, false
	}
	return o.UseBlackhole, true
}

// HasUseBlackhole returns a boolean if a field has been set.
func (o *MemberDns) HasUseBlackhole() bool {
	if o != nil && !IsNil(o.UseBlackhole) {
		return true
	}

	return false
}

// SetUseBlackhole gets a reference to the given bool and assigns it to the UseBlackhole field.
func (o *MemberDns) SetUseBlackhole(v bool) {
	o.UseBlackhole = &v
}

// GetUseBlacklist returns the UseBlacklist field value if set, zero value otherwise.
func (o *MemberDns) GetUseBlacklist() bool {
	if o == nil || IsNil(o.UseBlacklist) {
		var ret bool
		return ret
	}
	return *o.UseBlacklist
}

// GetUseBlacklistOk returns a tuple with the UseBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlacklist) {
		return nil, false
	}
	return o.UseBlacklist, true
}

// HasUseBlacklist returns a boolean if a field has been set.
func (o *MemberDns) HasUseBlacklist() bool {
	if o != nil && !IsNil(o.UseBlacklist) {
		return true
	}

	return false
}

// SetUseBlacklist gets a reference to the given bool and assigns it to the UseBlacklist field.
func (o *MemberDns) SetUseBlacklist(v bool) {
	o.UseBlacklist = &v
}

// GetUseCaptureDnsQueriesOnAllDomains returns the UseCaptureDnsQueriesOnAllDomains field value if set, zero value otherwise.
func (o *MemberDns) GetUseCaptureDnsQueriesOnAllDomains() bool {
	if o == nil || IsNil(o.UseCaptureDnsQueriesOnAllDomains) {
		var ret bool
		return ret
	}
	return *o.UseCaptureDnsQueriesOnAllDomains
}

// GetUseCaptureDnsQueriesOnAllDomainsOk returns a tuple with the UseCaptureDnsQueriesOnAllDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseCaptureDnsQueriesOnAllDomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCaptureDnsQueriesOnAllDomains) {
		return nil, false
	}
	return o.UseCaptureDnsQueriesOnAllDomains, true
}

// HasUseCaptureDnsQueriesOnAllDomains returns a boolean if a field has been set.
func (o *MemberDns) HasUseCaptureDnsQueriesOnAllDomains() bool {
	if o != nil && !IsNil(o.UseCaptureDnsQueriesOnAllDomains) {
		return true
	}

	return false
}

// SetUseCaptureDnsQueriesOnAllDomains gets a reference to the given bool and assigns it to the UseCaptureDnsQueriesOnAllDomains field.
func (o *MemberDns) SetUseCaptureDnsQueriesOnAllDomains(v bool) {
	o.UseCaptureDnsQueriesOnAllDomains = &v
}

// GetUseCopyClientIpMacOptions returns the UseCopyClientIpMacOptions field value if set, zero value otherwise.
func (o *MemberDns) GetUseCopyClientIpMacOptions() bool {
	if o == nil || IsNil(o.UseCopyClientIpMacOptions) {
		var ret bool
		return ret
	}
	return *o.UseCopyClientIpMacOptions
}

// GetUseCopyClientIpMacOptionsOk returns a tuple with the UseCopyClientIpMacOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseCopyClientIpMacOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCopyClientIpMacOptions) {
		return nil, false
	}
	return o.UseCopyClientIpMacOptions, true
}

// HasUseCopyClientIpMacOptions returns a boolean if a field has been set.
func (o *MemberDns) HasUseCopyClientIpMacOptions() bool {
	if o != nil && !IsNil(o.UseCopyClientIpMacOptions) {
		return true
	}

	return false
}

// SetUseCopyClientIpMacOptions gets a reference to the given bool and assigns it to the UseCopyClientIpMacOptions field.
func (o *MemberDns) SetUseCopyClientIpMacOptions(v bool) {
	o.UseCopyClientIpMacOptions = &v
}

// GetUseCopyXferToNotify returns the UseCopyXferToNotify field value if set, zero value otherwise.
func (o *MemberDns) GetUseCopyXferToNotify() bool {
	if o == nil || IsNil(o.UseCopyXferToNotify) {
		var ret bool
		return ret
	}
	return *o.UseCopyXferToNotify
}

// GetUseCopyXferToNotifyOk returns a tuple with the UseCopyXferToNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseCopyXferToNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCopyXferToNotify) {
		return nil, false
	}
	return o.UseCopyXferToNotify, true
}

// HasUseCopyXferToNotify returns a boolean if a field has been set.
func (o *MemberDns) HasUseCopyXferToNotify() bool {
	if o != nil && !IsNil(o.UseCopyXferToNotify) {
		return true
	}

	return false
}

// SetUseCopyXferToNotify gets a reference to the given bool and assigns it to the UseCopyXferToNotify field.
func (o *MemberDns) SetUseCopyXferToNotify(v bool) {
	o.UseCopyXferToNotify = &v
}

// GetUseDisableEdns returns the UseDisableEdns field value if set, zero value otherwise.
func (o *MemberDns) GetUseDisableEdns() bool {
	if o == nil || IsNil(o.UseDisableEdns) {
		var ret bool
		return ret
	}
	return *o.UseDisableEdns
}

// GetUseDisableEdnsOk returns a tuple with the UseDisableEdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDisableEdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDisableEdns) {
		return nil, false
	}
	return o.UseDisableEdns, true
}

// HasUseDisableEdns returns a boolean if a field has been set.
func (o *MemberDns) HasUseDisableEdns() bool {
	if o != nil && !IsNil(o.UseDisableEdns) {
		return true
	}

	return false
}

// SetUseDisableEdns gets a reference to the given bool and assigns it to the UseDisableEdns field.
func (o *MemberDns) SetUseDisableEdns(v bool) {
	o.UseDisableEdns = &v
}

// GetUseDns64 returns the UseDns64 field value if set, zero value otherwise.
func (o *MemberDns) GetUseDns64() bool {
	if o == nil || IsNil(o.UseDns64) {
		var ret bool
		return ret
	}
	return *o.UseDns64
}

// GetUseDns64Ok returns a tuple with the UseDns64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDns64Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDns64) {
		return nil, false
	}
	return o.UseDns64, true
}

// HasUseDns64 returns a boolean if a field has been set.
func (o *MemberDns) HasUseDns64() bool {
	if o != nil && !IsNil(o.UseDns64) {
		return true
	}

	return false
}

// SetUseDns64 gets a reference to the given bool and assigns it to the UseDns64 field.
func (o *MemberDns) SetUseDns64(v bool) {
	o.UseDns64 = &v
}

// GetUseDnsCacheAccelerationTtl returns the UseDnsCacheAccelerationTtl field value if set, zero value otherwise.
func (o *MemberDns) GetUseDnsCacheAccelerationTtl() bool {
	if o == nil || IsNil(o.UseDnsCacheAccelerationTtl) {
		var ret bool
		return ret
	}
	return *o.UseDnsCacheAccelerationTtl
}

// GetUseDnsCacheAccelerationTtlOk returns a tuple with the UseDnsCacheAccelerationTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDnsCacheAccelerationTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnsCacheAccelerationTtl) {
		return nil, false
	}
	return o.UseDnsCacheAccelerationTtl, true
}

// HasUseDnsCacheAccelerationTtl returns a boolean if a field has been set.
func (o *MemberDns) HasUseDnsCacheAccelerationTtl() bool {
	if o != nil && !IsNil(o.UseDnsCacheAccelerationTtl) {
		return true
	}

	return false
}

// SetUseDnsCacheAccelerationTtl gets a reference to the given bool and assigns it to the UseDnsCacheAccelerationTtl field.
func (o *MemberDns) SetUseDnsCacheAccelerationTtl(v bool) {
	o.UseDnsCacheAccelerationTtl = &v
}

// GetUseDnsHealthCheck returns the UseDnsHealthCheck field value if set, zero value otherwise.
func (o *MemberDns) GetUseDnsHealthCheck() bool {
	if o == nil || IsNil(o.UseDnsHealthCheck) {
		var ret bool
		return ret
	}
	return *o.UseDnsHealthCheck
}

// GetUseDnsHealthCheckOk returns a tuple with the UseDnsHealthCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDnsHealthCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnsHealthCheck) {
		return nil, false
	}
	return o.UseDnsHealthCheck, true
}

// HasUseDnsHealthCheck returns a boolean if a field has been set.
func (o *MemberDns) HasUseDnsHealthCheck() bool {
	if o != nil && !IsNil(o.UseDnsHealthCheck) {
		return true
	}

	return false
}

// SetUseDnsHealthCheck gets a reference to the given bool and assigns it to the UseDnsHealthCheck field.
func (o *MemberDns) SetUseDnsHealthCheck(v bool) {
	o.UseDnsHealthCheck = &v
}

// GetUseDnssec returns the UseDnssec field value if set, zero value otherwise.
func (o *MemberDns) GetUseDnssec() bool {
	if o == nil || IsNil(o.UseDnssec) {
		var ret bool
		return ret
	}
	return *o.UseDnssec
}

// GetUseDnssecOk returns a tuple with the UseDnssec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDnssecOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnssec) {
		return nil, false
	}
	return o.UseDnssec, true
}

// HasUseDnssec returns a boolean if a field has been set.
func (o *MemberDns) HasUseDnssec() bool {
	if o != nil && !IsNil(o.UseDnssec) {
		return true
	}

	return false
}

// SetUseDnssec gets a reference to the given bool and assigns it to the UseDnssec field.
func (o *MemberDns) SetUseDnssec(v bool) {
	o.UseDnssec = &v
}

// GetUseDnstapSetting returns the UseDnstapSetting field value if set, zero value otherwise.
func (o *MemberDns) GetUseDnstapSetting() bool {
	if o == nil || IsNil(o.UseDnstapSetting) {
		var ret bool
		return ret
	}
	return *o.UseDnstapSetting
}

// GetUseDnstapSettingOk returns a tuple with the UseDnstapSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDnstapSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnstapSetting) {
		return nil, false
	}
	return o.UseDnstapSetting, true
}

// HasUseDnstapSetting returns a boolean if a field has been set.
func (o *MemberDns) HasUseDnstapSetting() bool {
	if o != nil && !IsNil(o.UseDnstapSetting) {
		return true
	}

	return false
}

// SetUseDnstapSetting gets a reference to the given bool and assigns it to the UseDnstapSetting field.
func (o *MemberDns) SetUseDnstapSetting(v bool) {
	o.UseDnstapSetting = &v
}

// GetUseDtcDnsQueriesSpecificBehavior returns the UseDtcDnsQueriesSpecificBehavior field value if set, zero value otherwise.
func (o *MemberDns) GetUseDtcDnsQueriesSpecificBehavior() bool {
	if o == nil || IsNil(o.UseDtcDnsQueriesSpecificBehavior) {
		var ret bool
		return ret
	}
	return *o.UseDtcDnsQueriesSpecificBehavior
}

// GetUseDtcDnsQueriesSpecificBehaviorOk returns a tuple with the UseDtcDnsQueriesSpecificBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDtcDnsQueriesSpecificBehaviorOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDtcDnsQueriesSpecificBehavior) {
		return nil, false
	}
	return o.UseDtcDnsQueriesSpecificBehavior, true
}

// HasUseDtcDnsQueriesSpecificBehavior returns a boolean if a field has been set.
func (o *MemberDns) HasUseDtcDnsQueriesSpecificBehavior() bool {
	if o != nil && !IsNil(o.UseDtcDnsQueriesSpecificBehavior) {
		return true
	}

	return false
}

// SetUseDtcDnsQueriesSpecificBehavior gets a reference to the given bool and assigns it to the UseDtcDnsQueriesSpecificBehavior field.
func (o *MemberDns) SetUseDtcDnsQueriesSpecificBehavior(v bool) {
	o.UseDtcDnsQueriesSpecificBehavior = &v
}

// GetUseDtcEdnsPreferClientSubnet returns the UseDtcEdnsPreferClientSubnet field value if set, zero value otherwise.
func (o *MemberDns) GetUseDtcEdnsPreferClientSubnet() bool {
	if o == nil || IsNil(o.UseDtcEdnsPreferClientSubnet) {
		var ret bool
		return ret
	}
	return *o.UseDtcEdnsPreferClientSubnet
}

// GetUseDtcEdnsPreferClientSubnetOk returns a tuple with the UseDtcEdnsPreferClientSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseDtcEdnsPreferClientSubnetOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDtcEdnsPreferClientSubnet) {
		return nil, false
	}
	return o.UseDtcEdnsPreferClientSubnet, true
}

// HasUseDtcEdnsPreferClientSubnet returns a boolean if a field has been set.
func (o *MemberDns) HasUseDtcEdnsPreferClientSubnet() bool {
	if o != nil && !IsNil(o.UseDtcEdnsPreferClientSubnet) {
		return true
	}

	return false
}

// SetUseDtcEdnsPreferClientSubnet gets a reference to the given bool and assigns it to the UseDtcEdnsPreferClientSubnet field.
func (o *MemberDns) SetUseDtcEdnsPreferClientSubnet(v bool) {
	o.UseDtcEdnsPreferClientSubnet = &v
}

// GetUseEdnsUdpSize returns the UseEdnsUdpSize field value if set, zero value otherwise.
func (o *MemberDns) GetUseEdnsUdpSize() bool {
	if o == nil || IsNil(o.UseEdnsUdpSize) {
		var ret bool
		return ret
	}
	return *o.UseEdnsUdpSize
}

// GetUseEdnsUdpSizeOk returns a tuple with the UseEdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseEdnsUdpSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEdnsUdpSize) {
		return nil, false
	}
	return o.UseEdnsUdpSize, true
}

// HasUseEdnsUdpSize returns a boolean if a field has been set.
func (o *MemberDns) HasUseEdnsUdpSize() bool {
	if o != nil && !IsNil(o.UseEdnsUdpSize) {
		return true
	}

	return false
}

// SetUseEdnsUdpSize gets a reference to the given bool and assigns it to the UseEdnsUdpSize field.
func (o *MemberDns) SetUseEdnsUdpSize(v bool) {
	o.UseEdnsUdpSize = &v
}

// GetUseEnableCaptureDns returns the UseEnableCaptureDns field value if set, zero value otherwise.
func (o *MemberDns) GetUseEnableCaptureDns() bool {
	if o == nil || IsNil(o.UseEnableCaptureDns) {
		var ret bool
		return ret
	}
	return *o.UseEnableCaptureDns
}

// GetUseEnableCaptureDnsOk returns a tuple with the UseEnableCaptureDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseEnableCaptureDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableCaptureDns) {
		return nil, false
	}
	return o.UseEnableCaptureDns, true
}

// HasUseEnableCaptureDns returns a boolean if a field has been set.
func (o *MemberDns) HasUseEnableCaptureDns() bool {
	if o != nil && !IsNil(o.UseEnableCaptureDns) {
		return true
	}

	return false
}

// SetUseEnableCaptureDns gets a reference to the given bool and assigns it to the UseEnableCaptureDns field.
func (o *MemberDns) SetUseEnableCaptureDns(v bool) {
	o.UseEnableCaptureDns = &v
}

// GetUseEnableExcludedDomainNames returns the UseEnableExcludedDomainNames field value if set, zero value otherwise.
func (o *MemberDns) GetUseEnableExcludedDomainNames() bool {
	if o == nil || IsNil(o.UseEnableExcludedDomainNames) {
		var ret bool
		return ret
	}
	return *o.UseEnableExcludedDomainNames
}

// GetUseEnableExcludedDomainNamesOk returns a tuple with the UseEnableExcludedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseEnableExcludedDomainNamesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableExcludedDomainNames) {
		return nil, false
	}
	return o.UseEnableExcludedDomainNames, true
}

// HasUseEnableExcludedDomainNames returns a boolean if a field has been set.
func (o *MemberDns) HasUseEnableExcludedDomainNames() bool {
	if o != nil && !IsNil(o.UseEnableExcludedDomainNames) {
		return true
	}

	return false
}

// SetUseEnableExcludedDomainNames gets a reference to the given bool and assigns it to the UseEnableExcludedDomainNames field.
func (o *MemberDns) SetUseEnableExcludedDomainNames(v bool) {
	o.UseEnableExcludedDomainNames = &v
}

// GetUseEnableGssTsig returns the UseEnableGssTsig field value if set, zero value otherwise.
func (o *MemberDns) GetUseEnableGssTsig() bool {
	if o == nil || IsNil(o.UseEnableGssTsig) {
		var ret bool
		return ret
	}
	return *o.UseEnableGssTsig
}

// GetUseEnableGssTsigOk returns a tuple with the UseEnableGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseEnableGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableGssTsig) {
		return nil, false
	}
	return o.UseEnableGssTsig, true
}

// HasUseEnableGssTsig returns a boolean if a field has been set.
func (o *MemberDns) HasUseEnableGssTsig() bool {
	if o != nil && !IsNil(o.UseEnableGssTsig) {
		return true
	}

	return false
}

// SetUseEnableGssTsig gets a reference to the given bool and assigns it to the UseEnableGssTsig field.
func (o *MemberDns) SetUseEnableGssTsig(v bool) {
	o.UseEnableGssTsig = &v
}

// GetUseEnableQueryRewrite returns the UseEnableQueryRewrite field value if set, zero value otherwise.
func (o *MemberDns) GetUseEnableQueryRewrite() bool {
	if o == nil || IsNil(o.UseEnableQueryRewrite) {
		var ret bool
		return ret
	}
	return *o.UseEnableQueryRewrite
}

// GetUseEnableQueryRewriteOk returns a tuple with the UseEnableQueryRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseEnableQueryRewriteOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableQueryRewrite) {
		return nil, false
	}
	return o.UseEnableQueryRewrite, true
}

// HasUseEnableQueryRewrite returns a boolean if a field has been set.
func (o *MemberDns) HasUseEnableQueryRewrite() bool {
	if o != nil && !IsNil(o.UseEnableQueryRewrite) {
		return true
	}

	return false
}

// SetUseEnableQueryRewrite gets a reference to the given bool and assigns it to the UseEnableQueryRewrite field.
func (o *MemberDns) SetUseEnableQueryRewrite(v bool) {
	o.UseEnableQueryRewrite = &v
}

// GetUseFilterAaaa returns the UseFilterAaaa field value if set, zero value otherwise.
func (o *MemberDns) GetUseFilterAaaa() bool {
	if o == nil || IsNil(o.UseFilterAaaa) {
		var ret bool
		return ret
	}
	return *o.UseFilterAaaa
}

// GetUseFilterAaaaOk returns a tuple with the UseFilterAaaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseFilterAaaaOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFilterAaaa) {
		return nil, false
	}
	return o.UseFilterAaaa, true
}

// HasUseFilterAaaa returns a boolean if a field has been set.
func (o *MemberDns) HasUseFilterAaaa() bool {
	if o != nil && !IsNil(o.UseFilterAaaa) {
		return true
	}

	return false
}

// SetUseFilterAaaa gets a reference to the given bool and assigns it to the UseFilterAaaa field.
func (o *MemberDns) SetUseFilterAaaa(v bool) {
	o.UseFilterAaaa = &v
}

// GetUseFixedRrsetOrderFqdns returns the UseFixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *MemberDns) GetUseFixedRrsetOrderFqdns() bool {
	if o == nil || IsNil(o.UseFixedRrsetOrderFqdns) {
		var ret bool
		return ret
	}
	return *o.UseFixedRrsetOrderFqdns
}

// GetUseFixedRrsetOrderFqdnsOk returns a tuple with the UseFixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseFixedRrsetOrderFqdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.UseFixedRrsetOrderFqdns, true
}

// HasUseFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *MemberDns) HasUseFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.UseFixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetUseFixedRrsetOrderFqdns gets a reference to the given bool and assigns it to the UseFixedRrsetOrderFqdns field.
func (o *MemberDns) SetUseFixedRrsetOrderFqdns(v bool) {
	o.UseFixedRrsetOrderFqdns = &v
}

// GetUseForwardUpdates returns the UseForwardUpdates field value if set, zero value otherwise.
func (o *MemberDns) GetUseForwardUpdates() bool {
	if o == nil || IsNil(o.UseForwardUpdates) {
		var ret bool
		return ret
	}
	return *o.UseForwardUpdates
}

// GetUseForwardUpdatesOk returns a tuple with the UseForwardUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseForwardUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwardUpdates) {
		return nil, false
	}
	return o.UseForwardUpdates, true
}

// HasUseForwardUpdates returns a boolean if a field has been set.
func (o *MemberDns) HasUseForwardUpdates() bool {
	if o != nil && !IsNil(o.UseForwardUpdates) {
		return true
	}

	return false
}

// SetUseForwardUpdates gets a reference to the given bool and assigns it to the UseForwardUpdates field.
func (o *MemberDns) SetUseForwardUpdates(v bool) {
	o.UseForwardUpdates = &v
}

// GetUseForwarders returns the UseForwarders field value if set, zero value otherwise.
func (o *MemberDns) GetUseForwarders() bool {
	if o == nil || IsNil(o.UseForwarders) {
		var ret bool
		return ret
	}
	return *o.UseForwarders
}

// GetUseForwardersOk returns a tuple with the UseForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseForwardersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwarders) {
		return nil, false
	}
	return o.UseForwarders, true
}

// HasUseForwarders returns a boolean if a field has been set.
func (o *MemberDns) HasUseForwarders() bool {
	if o != nil && !IsNil(o.UseForwarders) {
		return true
	}

	return false
}

// SetUseForwarders gets a reference to the given bool and assigns it to the UseForwarders field.
func (o *MemberDns) SetUseForwarders(v bool) {
	o.UseForwarders = &v
}

// GetUseFtc returns the UseFtc field value if set, zero value otherwise.
func (o *MemberDns) GetUseFtc() bool {
	if o == nil || IsNil(o.UseFtc) {
		var ret bool
		return ret
	}
	return *o.UseFtc
}

// GetUseFtcOk returns a tuple with the UseFtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseFtcOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFtc) {
		return nil, false
	}
	return o.UseFtc, true
}

// HasUseFtc returns a boolean if a field has been set.
func (o *MemberDns) HasUseFtc() bool {
	if o != nil && !IsNil(o.UseFtc) {
		return true
	}

	return false
}

// SetUseFtc gets a reference to the given bool and assigns it to the UseFtc field.
func (o *MemberDns) SetUseFtc(v bool) {
	o.UseFtc = &v
}

// GetUseGssTsigKeys returns the UseGssTsigKeys field value if set, zero value otherwise.
func (o *MemberDns) GetUseGssTsigKeys() bool {
	if o == nil || IsNil(o.UseGssTsigKeys) {
		var ret bool
		return ret
	}
	return *o.UseGssTsigKeys
}

// GetUseGssTsigKeysOk returns a tuple with the UseGssTsigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseGssTsigKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGssTsigKeys) {
		return nil, false
	}
	return o.UseGssTsigKeys, true
}

// HasUseGssTsigKeys returns a boolean if a field has been set.
func (o *MemberDns) HasUseGssTsigKeys() bool {
	if o != nil && !IsNil(o.UseGssTsigKeys) {
		return true
	}

	return false
}

// SetUseGssTsigKeys gets a reference to the given bool and assigns it to the UseGssTsigKeys field.
func (o *MemberDns) SetUseGssTsigKeys(v bool) {
	o.UseGssTsigKeys = &v
}

// GetUseLan2Ipv6Port returns the UseLan2Ipv6Port field value if set, zero value otherwise.
func (o *MemberDns) GetUseLan2Ipv6Port() bool {
	if o == nil || IsNil(o.UseLan2Ipv6Port) {
		var ret bool
		return ret
	}
	return *o.UseLan2Ipv6Port
}

// GetUseLan2Ipv6PortOk returns a tuple with the UseLan2Ipv6Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseLan2Ipv6PortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLan2Ipv6Port) {
		return nil, false
	}
	return o.UseLan2Ipv6Port, true
}

// HasUseLan2Ipv6Port returns a boolean if a field has been set.
func (o *MemberDns) HasUseLan2Ipv6Port() bool {
	if o != nil && !IsNil(o.UseLan2Ipv6Port) {
		return true
	}

	return false
}

// SetUseLan2Ipv6Port gets a reference to the given bool and assigns it to the UseLan2Ipv6Port field.
func (o *MemberDns) SetUseLan2Ipv6Port(v bool) {
	o.UseLan2Ipv6Port = &v
}

// GetUseLan2Port returns the UseLan2Port field value if set, zero value otherwise.
func (o *MemberDns) GetUseLan2Port() bool {
	if o == nil || IsNil(o.UseLan2Port) {
		var ret bool
		return ret
	}
	return *o.UseLan2Port
}

// GetUseLan2PortOk returns a tuple with the UseLan2Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseLan2PortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLan2Port) {
		return nil, false
	}
	return o.UseLan2Port, true
}

// HasUseLan2Port returns a boolean if a field has been set.
func (o *MemberDns) HasUseLan2Port() bool {
	if o != nil && !IsNil(o.UseLan2Port) {
		return true
	}

	return false
}

// SetUseLan2Port gets a reference to the given bool and assigns it to the UseLan2Port field.
func (o *MemberDns) SetUseLan2Port(v bool) {
	o.UseLan2Port = &v
}

// GetUseLanIpv6Port returns the UseLanIpv6Port field value if set, zero value otherwise.
func (o *MemberDns) GetUseLanIpv6Port() bool {
	if o == nil || IsNil(o.UseLanIpv6Port) {
		var ret bool
		return ret
	}
	return *o.UseLanIpv6Port
}

// GetUseLanIpv6PortOk returns a tuple with the UseLanIpv6Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseLanIpv6PortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLanIpv6Port) {
		return nil, false
	}
	return o.UseLanIpv6Port, true
}

// HasUseLanIpv6Port returns a boolean if a field has been set.
func (o *MemberDns) HasUseLanIpv6Port() bool {
	if o != nil && !IsNil(o.UseLanIpv6Port) {
		return true
	}

	return false
}

// SetUseLanIpv6Port gets a reference to the given bool and assigns it to the UseLanIpv6Port field.
func (o *MemberDns) SetUseLanIpv6Port(v bool) {
	o.UseLanIpv6Port = &v
}

// GetUseLanPort returns the UseLanPort field value if set, zero value otherwise.
func (o *MemberDns) GetUseLanPort() bool {
	if o == nil || IsNil(o.UseLanPort) {
		var ret bool
		return ret
	}
	return *o.UseLanPort
}

// GetUseLanPortOk returns a tuple with the UseLanPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseLanPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLanPort) {
		return nil, false
	}
	return o.UseLanPort, true
}

// HasUseLanPort returns a boolean if a field has been set.
func (o *MemberDns) HasUseLanPort() bool {
	if o != nil && !IsNil(o.UseLanPort) {
		return true
	}

	return false
}

// SetUseLanPort gets a reference to the given bool and assigns it to the UseLanPort field.
func (o *MemberDns) SetUseLanPort(v bool) {
	o.UseLanPort = &v
}

// GetUseLoggingCategories returns the UseLoggingCategories field value if set, zero value otherwise.
func (o *MemberDns) GetUseLoggingCategories() bool {
	if o == nil || IsNil(o.UseLoggingCategories) {
		var ret bool
		return ret
	}
	return *o.UseLoggingCategories
}

// GetUseLoggingCategoriesOk returns a tuple with the UseLoggingCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseLoggingCategoriesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLoggingCategories) {
		return nil, false
	}
	return o.UseLoggingCategories, true
}

// HasUseLoggingCategories returns a boolean if a field has been set.
func (o *MemberDns) HasUseLoggingCategories() bool {
	if o != nil && !IsNil(o.UseLoggingCategories) {
		return true
	}

	return false
}

// SetUseLoggingCategories gets a reference to the given bool and assigns it to the UseLoggingCategories field.
func (o *MemberDns) SetUseLoggingCategories(v bool) {
	o.UseLoggingCategories = &v
}

// GetUseMaxCacheTtl returns the UseMaxCacheTtl field value if set, zero value otherwise.
func (o *MemberDns) GetUseMaxCacheTtl() bool {
	if o == nil || IsNil(o.UseMaxCacheTtl) {
		var ret bool
		return ret
	}
	return *o.UseMaxCacheTtl
}

// GetUseMaxCacheTtlOk returns a tuple with the UseMaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMaxCacheTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxCacheTtl) {
		return nil, false
	}
	return o.UseMaxCacheTtl, true
}

// HasUseMaxCacheTtl returns a boolean if a field has been set.
func (o *MemberDns) HasUseMaxCacheTtl() bool {
	if o != nil && !IsNil(o.UseMaxCacheTtl) {
		return true
	}

	return false
}

// SetUseMaxCacheTtl gets a reference to the given bool and assigns it to the UseMaxCacheTtl field.
func (o *MemberDns) SetUseMaxCacheTtl(v bool) {
	o.UseMaxCacheTtl = &v
}

// GetUseMaxCachedLifetime returns the UseMaxCachedLifetime field value if set, zero value otherwise.
func (o *MemberDns) GetUseMaxCachedLifetime() bool {
	if o == nil || IsNil(o.UseMaxCachedLifetime) {
		var ret bool
		return ret
	}
	return *o.UseMaxCachedLifetime
}

// GetUseMaxCachedLifetimeOk returns a tuple with the UseMaxCachedLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMaxCachedLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxCachedLifetime) {
		return nil, false
	}
	return o.UseMaxCachedLifetime, true
}

// HasUseMaxCachedLifetime returns a boolean if a field has been set.
func (o *MemberDns) HasUseMaxCachedLifetime() bool {
	if o != nil && !IsNil(o.UseMaxCachedLifetime) {
		return true
	}

	return false
}

// SetUseMaxCachedLifetime gets a reference to the given bool and assigns it to the UseMaxCachedLifetime field.
func (o *MemberDns) SetUseMaxCachedLifetime(v bool) {
	o.UseMaxCachedLifetime = &v
}

// GetUseMaxNcacheTtl returns the UseMaxNcacheTtl field value if set, zero value otherwise.
func (o *MemberDns) GetUseMaxNcacheTtl() bool {
	if o == nil || IsNil(o.UseMaxNcacheTtl) {
		var ret bool
		return ret
	}
	return *o.UseMaxNcacheTtl
}

// GetUseMaxNcacheTtlOk returns a tuple with the UseMaxNcacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMaxNcacheTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxNcacheTtl) {
		return nil, false
	}
	return o.UseMaxNcacheTtl, true
}

// HasUseMaxNcacheTtl returns a boolean if a field has been set.
func (o *MemberDns) HasUseMaxNcacheTtl() bool {
	if o != nil && !IsNil(o.UseMaxNcacheTtl) {
		return true
	}

	return false
}

// SetUseMaxNcacheTtl gets a reference to the given bool and assigns it to the UseMaxNcacheTtl field.
func (o *MemberDns) SetUseMaxNcacheTtl(v bool) {
	o.UseMaxNcacheTtl = &v
}

// GetUseMaxUdpSize returns the UseMaxUdpSize field value if set, zero value otherwise.
func (o *MemberDns) GetUseMaxUdpSize() bool {
	if o == nil || IsNil(o.UseMaxUdpSize) {
		var ret bool
		return ret
	}
	return *o.UseMaxUdpSize
}

// GetUseMaxUdpSizeOk returns a tuple with the UseMaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMaxUdpSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxUdpSize) {
		return nil, false
	}
	return o.UseMaxUdpSize, true
}

// HasUseMaxUdpSize returns a boolean if a field has been set.
func (o *MemberDns) HasUseMaxUdpSize() bool {
	if o != nil && !IsNil(o.UseMaxUdpSize) {
		return true
	}

	return false
}

// SetUseMaxUdpSize gets a reference to the given bool and assigns it to the UseMaxUdpSize field.
func (o *MemberDns) SetUseMaxUdpSize(v bool) {
	o.UseMaxUdpSize = &v
}

// GetUseMgmtIpv6Port returns the UseMgmtIpv6Port field value if set, zero value otherwise.
func (o *MemberDns) GetUseMgmtIpv6Port() bool {
	if o == nil || IsNil(o.UseMgmtIpv6Port) {
		var ret bool
		return ret
	}
	return *o.UseMgmtIpv6Port
}

// GetUseMgmtIpv6PortOk returns a tuple with the UseMgmtIpv6Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMgmtIpv6PortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtIpv6Port) {
		return nil, false
	}
	return o.UseMgmtIpv6Port, true
}

// HasUseMgmtIpv6Port returns a boolean if a field has been set.
func (o *MemberDns) HasUseMgmtIpv6Port() bool {
	if o != nil && !IsNil(o.UseMgmtIpv6Port) {
		return true
	}

	return false
}

// SetUseMgmtIpv6Port gets a reference to the given bool and assigns it to the UseMgmtIpv6Port field.
func (o *MemberDns) SetUseMgmtIpv6Port(v bool) {
	o.UseMgmtIpv6Port = &v
}

// GetUseMgmtPort returns the UseMgmtPort field value if set, zero value otherwise.
func (o *MemberDns) GetUseMgmtPort() bool {
	if o == nil || IsNil(o.UseMgmtPort) {
		var ret bool
		return ret
	}
	return *o.UseMgmtPort
}

// GetUseMgmtPortOk returns a tuple with the UseMgmtPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseMgmtPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtPort) {
		return nil, false
	}
	return o.UseMgmtPort, true
}

// HasUseMgmtPort returns a boolean if a field has been set.
func (o *MemberDns) HasUseMgmtPort() bool {
	if o != nil && !IsNil(o.UseMgmtPort) {
		return true
	}

	return false
}

// SetUseMgmtPort gets a reference to the given bool and assigns it to the UseMgmtPort field.
func (o *MemberDns) SetUseMgmtPort(v bool) {
	o.UseMgmtPort = &v
}

// GetUseNotifyDelay returns the UseNotifyDelay field value if set, zero value otherwise.
func (o *MemberDns) GetUseNotifyDelay() bool {
	if o == nil || IsNil(o.UseNotifyDelay) {
		var ret bool
		return ret
	}
	return *o.UseNotifyDelay
}

// GetUseNotifyDelayOk returns a tuple with the UseNotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseNotifyDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNotifyDelay) {
		return nil, false
	}
	return o.UseNotifyDelay, true
}

// HasUseNotifyDelay returns a boolean if a field has been set.
func (o *MemberDns) HasUseNotifyDelay() bool {
	if o != nil && !IsNil(o.UseNotifyDelay) {
		return true
	}

	return false
}

// SetUseNotifyDelay gets a reference to the given bool and assigns it to the UseNotifyDelay field.
func (o *MemberDns) SetUseNotifyDelay(v bool) {
	o.UseNotifyDelay = &v
}

// GetUseNxdomainRedirect returns the UseNxdomainRedirect field value if set, zero value otherwise.
func (o *MemberDns) GetUseNxdomainRedirect() bool {
	if o == nil || IsNil(o.UseNxdomainRedirect) {
		var ret bool
		return ret
	}
	return *o.UseNxdomainRedirect
}

// GetUseNxdomainRedirectOk returns a tuple with the UseNxdomainRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseNxdomainRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNxdomainRedirect) {
		return nil, false
	}
	return o.UseNxdomainRedirect, true
}

// HasUseNxdomainRedirect returns a boolean if a field has been set.
func (o *MemberDns) HasUseNxdomainRedirect() bool {
	if o != nil && !IsNil(o.UseNxdomainRedirect) {
		return true
	}

	return false
}

// SetUseNxdomainRedirect gets a reference to the given bool and assigns it to the UseNxdomainRedirect field.
func (o *MemberDns) SetUseNxdomainRedirect(v bool) {
	o.UseNxdomainRedirect = &v
}

// GetUseRecordNamePolicy returns the UseRecordNamePolicy field value if set, zero value otherwise.
func (o *MemberDns) GetUseRecordNamePolicy() bool {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		var ret bool
		return ret
	}
	return *o.UseRecordNamePolicy
}

// GetUseRecordNamePolicyOk returns a tuple with the UseRecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRecordNamePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		return nil, false
	}
	return o.UseRecordNamePolicy, true
}

// HasUseRecordNamePolicy returns a boolean if a field has been set.
func (o *MemberDns) HasUseRecordNamePolicy() bool {
	if o != nil && !IsNil(o.UseRecordNamePolicy) {
		return true
	}

	return false
}

// SetUseRecordNamePolicy gets a reference to the given bool and assigns it to the UseRecordNamePolicy field.
func (o *MemberDns) SetUseRecordNamePolicy(v bool) {
	o.UseRecordNamePolicy = &v
}

// GetUseRecursiveClientLimit returns the UseRecursiveClientLimit field value if set, zero value otherwise.
func (o *MemberDns) GetUseRecursiveClientLimit() bool {
	if o == nil || IsNil(o.UseRecursiveClientLimit) {
		var ret bool
		return ret
	}
	return *o.UseRecursiveClientLimit
}

// GetUseRecursiveClientLimitOk returns a tuple with the UseRecursiveClientLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRecursiveClientLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecursiveClientLimit) {
		return nil, false
	}
	return o.UseRecursiveClientLimit, true
}

// HasUseRecursiveClientLimit returns a boolean if a field has been set.
func (o *MemberDns) HasUseRecursiveClientLimit() bool {
	if o != nil && !IsNil(o.UseRecursiveClientLimit) {
		return true
	}

	return false
}

// SetUseRecursiveClientLimit gets a reference to the given bool and assigns it to the UseRecursiveClientLimit field.
func (o *MemberDns) SetUseRecursiveClientLimit(v bool) {
	o.UseRecursiveClientLimit = &v
}

// GetUseRecursiveQuerySetting returns the UseRecursiveQuerySetting field value if set, zero value otherwise.
func (o *MemberDns) GetUseRecursiveQuerySetting() bool {
	if o == nil || IsNil(o.UseRecursiveQuerySetting) {
		var ret bool
		return ret
	}
	return *o.UseRecursiveQuerySetting
}

// GetUseRecursiveQuerySettingOk returns a tuple with the UseRecursiveQuerySetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRecursiveQuerySettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecursiveQuerySetting) {
		return nil, false
	}
	return o.UseRecursiveQuerySetting, true
}

// HasUseRecursiveQuerySetting returns a boolean if a field has been set.
func (o *MemberDns) HasUseRecursiveQuerySetting() bool {
	if o != nil && !IsNil(o.UseRecursiveQuerySetting) {
		return true
	}

	return false
}

// SetUseRecursiveQuerySetting gets a reference to the given bool and assigns it to the UseRecursiveQuerySetting field.
func (o *MemberDns) SetUseRecursiveQuerySetting(v bool) {
	o.UseRecursiveQuerySetting = &v
}

// GetUseResolverQueryTimeout returns the UseResolverQueryTimeout field value if set, zero value otherwise.
func (o *MemberDns) GetUseResolverQueryTimeout() bool {
	if o == nil || IsNil(o.UseResolverQueryTimeout) {
		var ret bool
		return ret
	}
	return *o.UseResolverQueryTimeout
}

// GetUseResolverQueryTimeoutOk returns a tuple with the UseResolverQueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseResolverQueryTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.UseResolverQueryTimeout) {
		return nil, false
	}
	return o.UseResolverQueryTimeout, true
}

// HasUseResolverQueryTimeout returns a boolean if a field has been set.
func (o *MemberDns) HasUseResolverQueryTimeout() bool {
	if o != nil && !IsNil(o.UseResolverQueryTimeout) {
		return true
	}

	return false
}

// SetUseResolverQueryTimeout gets a reference to the given bool and assigns it to the UseResolverQueryTimeout field.
func (o *MemberDns) SetUseResolverQueryTimeout(v bool) {
	o.UseResolverQueryTimeout = &v
}

// GetUseResponseRateLimiting returns the UseResponseRateLimiting field value if set, zero value otherwise.
func (o *MemberDns) GetUseResponseRateLimiting() bool {
	if o == nil || IsNil(o.UseResponseRateLimiting) {
		var ret bool
		return ret
	}
	return *o.UseResponseRateLimiting
}

// GetUseResponseRateLimitingOk returns a tuple with the UseResponseRateLimiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseResponseRateLimitingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseResponseRateLimiting) {
		return nil, false
	}
	return o.UseResponseRateLimiting, true
}

// HasUseResponseRateLimiting returns a boolean if a field has been set.
func (o *MemberDns) HasUseResponseRateLimiting() bool {
	if o != nil && !IsNil(o.UseResponseRateLimiting) {
		return true
	}

	return false
}

// SetUseResponseRateLimiting gets a reference to the given bool and assigns it to the UseResponseRateLimiting field.
func (o *MemberDns) SetUseResponseRateLimiting(v bool) {
	o.UseResponseRateLimiting = &v
}

// GetUseRootNameServer returns the UseRootNameServer field value if set, zero value otherwise.
func (o *MemberDns) GetUseRootNameServer() bool {
	if o == nil || IsNil(o.UseRootNameServer) {
		var ret bool
		return ret
	}
	return *o.UseRootNameServer
}

// GetUseRootNameServerOk returns a tuple with the UseRootNameServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRootNameServerOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootNameServer) {
		return nil, false
	}
	return o.UseRootNameServer, true
}

// HasUseRootNameServer returns a boolean if a field has been set.
func (o *MemberDns) HasUseRootNameServer() bool {
	if o != nil && !IsNil(o.UseRootNameServer) {
		return true
	}

	return false
}

// SetUseRootNameServer gets a reference to the given bool and assigns it to the UseRootNameServer field.
func (o *MemberDns) SetUseRootNameServer(v bool) {
	o.UseRootNameServer = &v
}

// GetUseRootServerForAllViews returns the UseRootServerForAllViews field value if set, zero value otherwise.
func (o *MemberDns) GetUseRootServerForAllViews() bool {
	if o == nil || IsNil(o.UseRootServerForAllViews) {
		var ret bool
		return ret
	}
	return *o.UseRootServerForAllViews
}

// GetUseRootServerForAllViewsOk returns a tuple with the UseRootServerForAllViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRootServerForAllViewsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootServerForAllViews) {
		return nil, false
	}
	return o.UseRootServerForAllViews, true
}

// HasUseRootServerForAllViews returns a boolean if a field has been set.
func (o *MemberDns) HasUseRootServerForAllViews() bool {
	if o != nil && !IsNil(o.UseRootServerForAllViews) {
		return true
	}

	return false
}

// SetUseRootServerForAllViews gets a reference to the given bool and assigns it to the UseRootServerForAllViews field.
func (o *MemberDns) SetUseRootServerForAllViews(v bool) {
	o.UseRootServerForAllViews = &v
}

// GetUseRpzDisableNsdnameNsip returns the UseRpzDisableNsdnameNsip field value if set, zero value otherwise.
func (o *MemberDns) GetUseRpzDisableNsdnameNsip() bool {
	if o == nil || IsNil(o.UseRpzDisableNsdnameNsip) {
		var ret bool
		return ret
	}
	return *o.UseRpzDisableNsdnameNsip
}

// GetUseRpzDisableNsdnameNsipOk returns a tuple with the UseRpzDisableNsdnameNsip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRpzDisableNsdnameNsipOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzDisableNsdnameNsip) {
		return nil, false
	}
	return o.UseRpzDisableNsdnameNsip, true
}

// HasUseRpzDisableNsdnameNsip returns a boolean if a field has been set.
func (o *MemberDns) HasUseRpzDisableNsdnameNsip() bool {
	if o != nil && !IsNil(o.UseRpzDisableNsdnameNsip) {
		return true
	}

	return false
}

// SetUseRpzDisableNsdnameNsip gets a reference to the given bool and assigns it to the UseRpzDisableNsdnameNsip field.
func (o *MemberDns) SetUseRpzDisableNsdnameNsip(v bool) {
	o.UseRpzDisableNsdnameNsip = &v
}

// GetUseRpzDropIpRule returns the UseRpzDropIpRule field value if set, zero value otherwise.
func (o *MemberDns) GetUseRpzDropIpRule() bool {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		var ret bool
		return ret
	}
	return *o.UseRpzDropIpRule
}

// GetUseRpzDropIpRuleOk returns a tuple with the UseRpzDropIpRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRpzDropIpRuleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		return nil, false
	}
	return o.UseRpzDropIpRule, true
}

// HasUseRpzDropIpRule returns a boolean if a field has been set.
func (o *MemberDns) HasUseRpzDropIpRule() bool {
	if o != nil && !IsNil(o.UseRpzDropIpRule) {
		return true
	}

	return false
}

// SetUseRpzDropIpRule gets a reference to the given bool and assigns it to the UseRpzDropIpRule field.
func (o *MemberDns) SetUseRpzDropIpRule(v bool) {
	o.UseRpzDropIpRule = &v
}

// GetUseRpzQnameWaitRecurse returns the UseRpzQnameWaitRecurse field value if set, zero value otherwise.
func (o *MemberDns) GetUseRpzQnameWaitRecurse() bool {
	if o == nil || IsNil(o.UseRpzQnameWaitRecurse) {
		var ret bool
		return ret
	}
	return *o.UseRpzQnameWaitRecurse
}

// GetUseRpzQnameWaitRecurseOk returns a tuple with the UseRpzQnameWaitRecurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseRpzQnameWaitRecurseOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzQnameWaitRecurse) {
		return nil, false
	}
	return o.UseRpzQnameWaitRecurse, true
}

// HasUseRpzQnameWaitRecurse returns a boolean if a field has been set.
func (o *MemberDns) HasUseRpzQnameWaitRecurse() bool {
	if o != nil && !IsNil(o.UseRpzQnameWaitRecurse) {
		return true
	}

	return false
}

// SetUseRpzQnameWaitRecurse gets a reference to the given bool and assigns it to the UseRpzQnameWaitRecurse field.
func (o *MemberDns) SetUseRpzQnameWaitRecurse(v bool) {
	o.UseRpzQnameWaitRecurse = &v
}

// GetUseSerialQueryRate returns the UseSerialQueryRate field value if set, zero value otherwise.
func (o *MemberDns) GetUseSerialQueryRate() bool {
	if o == nil || IsNil(o.UseSerialQueryRate) {
		var ret bool
		return ret
	}
	return *o.UseSerialQueryRate
}

// GetUseSerialQueryRateOk returns a tuple with the UseSerialQueryRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseSerialQueryRateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSerialQueryRate) {
		return nil, false
	}
	return o.UseSerialQueryRate, true
}

// HasUseSerialQueryRate returns a boolean if a field has been set.
func (o *MemberDns) HasUseSerialQueryRate() bool {
	if o != nil && !IsNil(o.UseSerialQueryRate) {
		return true
	}

	return false
}

// SetUseSerialQueryRate gets a reference to the given bool and assigns it to the UseSerialQueryRate field.
func (o *MemberDns) SetUseSerialQueryRate(v bool) {
	o.UseSerialQueryRate = &v
}

// GetUseServerIdDirective returns the UseServerIdDirective field value if set, zero value otherwise.
func (o *MemberDns) GetUseServerIdDirective() bool {
	if o == nil || IsNil(o.UseServerIdDirective) {
		var ret bool
		return ret
	}
	return *o.UseServerIdDirective
}

// GetUseServerIdDirectiveOk returns a tuple with the UseServerIdDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseServerIdDirectiveOk() (*bool, bool) {
	if o == nil || IsNil(o.UseServerIdDirective) {
		return nil, false
	}
	return o.UseServerIdDirective, true
}

// HasUseServerIdDirective returns a boolean if a field has been set.
func (o *MemberDns) HasUseServerIdDirective() bool {
	if o != nil && !IsNil(o.UseServerIdDirective) {
		return true
	}

	return false
}

// SetUseServerIdDirective gets a reference to the given bool and assigns it to the UseServerIdDirective field.
func (o *MemberDns) SetUseServerIdDirective(v bool) {
	o.UseServerIdDirective = &v
}

// GetUseSortlist returns the UseSortlist field value if set, zero value otherwise.
func (o *MemberDns) GetUseSortlist() bool {
	if o == nil || IsNil(o.UseSortlist) {
		var ret bool
		return ret
	}
	return *o.UseSortlist
}

// GetUseSortlistOk returns a tuple with the UseSortlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseSortlistOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSortlist) {
		return nil, false
	}
	return o.UseSortlist, true
}

// HasUseSortlist returns a boolean if a field has been set.
func (o *MemberDns) HasUseSortlist() bool {
	if o != nil && !IsNil(o.UseSortlist) {
		return true
	}

	return false
}

// SetUseSortlist gets a reference to the given bool and assigns it to the UseSortlist field.
func (o *MemberDns) SetUseSortlist(v bool) {
	o.UseSortlist = &v
}

// GetUseSourcePorts returns the UseSourcePorts field value if set, zero value otherwise.
func (o *MemberDns) GetUseSourcePorts() bool {
	if o == nil || IsNil(o.UseSourcePorts) {
		var ret bool
		return ret
	}
	return *o.UseSourcePorts
}

// GetUseSourcePortsOk returns a tuple with the UseSourcePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseSourcePortsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSourcePorts) {
		return nil, false
	}
	return o.UseSourcePorts, true
}

// HasUseSourcePorts returns a boolean if a field has been set.
func (o *MemberDns) HasUseSourcePorts() bool {
	if o != nil && !IsNil(o.UseSourcePorts) {
		return true
	}

	return false
}

// SetUseSourcePorts gets a reference to the given bool and assigns it to the UseSourcePorts field.
func (o *MemberDns) SetUseSourcePorts(v bool) {
	o.UseSourcePorts = &v
}

// GetUseSyslogFacility returns the UseSyslogFacility field value if set, zero value otherwise.
func (o *MemberDns) GetUseSyslogFacility() bool {
	if o == nil || IsNil(o.UseSyslogFacility) {
		var ret bool
		return ret
	}
	return *o.UseSyslogFacility
}

// GetUseSyslogFacilityOk returns a tuple with the UseSyslogFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseSyslogFacilityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyslogFacility) {
		return nil, false
	}
	return o.UseSyslogFacility, true
}

// HasUseSyslogFacility returns a boolean if a field has been set.
func (o *MemberDns) HasUseSyslogFacility() bool {
	if o != nil && !IsNil(o.UseSyslogFacility) {
		return true
	}

	return false
}

// SetUseSyslogFacility gets a reference to the given bool and assigns it to the UseSyslogFacility field.
func (o *MemberDns) SetUseSyslogFacility(v bool) {
	o.UseSyslogFacility = &v
}

// GetUseTransfersIn returns the UseTransfersIn field value if set, zero value otherwise.
func (o *MemberDns) GetUseTransfersIn() bool {
	if o == nil || IsNil(o.UseTransfersIn) {
		var ret bool
		return ret
	}
	return *o.UseTransfersIn
}

// GetUseTransfersInOk returns a tuple with the UseTransfersIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseTransfersInOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTransfersIn) {
		return nil, false
	}
	return o.UseTransfersIn, true
}

// HasUseTransfersIn returns a boolean if a field has been set.
func (o *MemberDns) HasUseTransfersIn() bool {
	if o != nil && !IsNil(o.UseTransfersIn) {
		return true
	}

	return false
}

// SetUseTransfersIn gets a reference to the given bool and assigns it to the UseTransfersIn field.
func (o *MemberDns) SetUseTransfersIn(v bool) {
	o.UseTransfersIn = &v
}

// GetUseTransfersOut returns the UseTransfersOut field value if set, zero value otherwise.
func (o *MemberDns) GetUseTransfersOut() bool {
	if o == nil || IsNil(o.UseTransfersOut) {
		var ret bool
		return ret
	}
	return *o.UseTransfersOut
}

// GetUseTransfersOutOk returns a tuple with the UseTransfersOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseTransfersOutOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTransfersOut) {
		return nil, false
	}
	return o.UseTransfersOut, true
}

// HasUseTransfersOut returns a boolean if a field has been set.
func (o *MemberDns) HasUseTransfersOut() bool {
	if o != nil && !IsNil(o.UseTransfersOut) {
		return true
	}

	return false
}

// SetUseTransfersOut gets a reference to the given bool and assigns it to the UseTransfersOut field.
func (o *MemberDns) SetUseTransfersOut(v bool) {
	o.UseTransfersOut = &v
}

// GetUseTransfersPerNs returns the UseTransfersPerNs field value if set, zero value otherwise.
func (o *MemberDns) GetUseTransfersPerNs() bool {
	if o == nil || IsNil(o.UseTransfersPerNs) {
		var ret bool
		return ret
	}
	return *o.UseTransfersPerNs
}

// GetUseTransfersPerNsOk returns a tuple with the UseTransfersPerNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseTransfersPerNsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTransfersPerNs) {
		return nil, false
	}
	return o.UseTransfersPerNs, true
}

// HasUseTransfersPerNs returns a boolean if a field has been set.
func (o *MemberDns) HasUseTransfersPerNs() bool {
	if o != nil && !IsNil(o.UseTransfersPerNs) {
		return true
	}

	return false
}

// SetUseTransfersPerNs gets a reference to the given bool and assigns it to the UseTransfersPerNs field.
func (o *MemberDns) SetUseTransfersPerNs(v bool) {
	o.UseTransfersPerNs = &v
}

// GetUseUpdateSetting returns the UseUpdateSetting field value if set, zero value otherwise.
func (o *MemberDns) GetUseUpdateSetting() bool {
	if o == nil || IsNil(o.UseUpdateSetting) {
		var ret bool
		return ret
	}
	return *o.UseUpdateSetting
}

// GetUseUpdateSettingOk returns a tuple with the UseUpdateSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseUpdateSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateSetting) {
		return nil, false
	}
	return o.UseUpdateSetting, true
}

// HasUseUpdateSetting returns a boolean if a field has been set.
func (o *MemberDns) HasUseUpdateSetting() bool {
	if o != nil && !IsNil(o.UseUpdateSetting) {
		return true
	}

	return false
}

// SetUseUpdateSetting gets a reference to the given bool and assigns it to the UseUpdateSetting field.
func (o *MemberDns) SetUseUpdateSetting(v bool) {
	o.UseUpdateSetting = &v
}

// GetUseZoneTransferFormat returns the UseZoneTransferFormat field value if set, zero value otherwise.
func (o *MemberDns) GetUseZoneTransferFormat() bool {
	if o == nil || IsNil(o.UseZoneTransferFormat) {
		var ret bool
		return ret
	}
	return *o.UseZoneTransferFormat
}

// GetUseZoneTransferFormatOk returns a tuple with the UseZoneTransferFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetUseZoneTransferFormatOk() (*bool, bool) {
	if o == nil || IsNil(o.UseZoneTransferFormat) {
		return nil, false
	}
	return o.UseZoneTransferFormat, true
}

// HasUseZoneTransferFormat returns a boolean if a field has been set.
func (o *MemberDns) HasUseZoneTransferFormat() bool {
	if o != nil && !IsNil(o.UseZoneTransferFormat) {
		return true
	}

	return false
}

// SetUseZoneTransferFormat gets a reference to the given bool and assigns it to the UseZoneTransferFormat field.
func (o *MemberDns) SetUseZoneTransferFormat(v bool) {
	o.UseZoneTransferFormat = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *MemberDns) GetViews() []string {
	if o == nil || IsNil(o.Views) {
		var ret []string
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDns) GetViewsOk() ([]string, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *MemberDns) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given []string and assigns it to the Views field.
func (o *MemberDns) SetViews(v []string) {
	o.Views = v
}

func (o MemberDns) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDns) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddClientIpMacOptions) {
		toSerialize["add_client_ip_mac_options"] = o.AddClientIpMacOptions
	}
	if !IsNil(o.AdditionalIpList) {
		toSerialize["additional_ip_list"] = o.AdditionalIpList
	}
	if !IsNil(o.AdditionalIpListStruct) {
		toSerialize["additional_ip_list_struct"] = o.AdditionalIpListStruct
	}
	if !IsNil(o.AllowGssTsigZoneUpdates) {
		toSerialize["allow_gss_tsig_zone_updates"] = o.AllowGssTsigZoneUpdates
	}
	if !IsNil(o.AllowQuery) {
		toSerialize["allow_query"] = o.AllowQuery
	}
	if !IsNil(o.AllowRecursiveQuery) {
		toSerialize["allow_recursive_query"] = o.AllowRecursiveQuery
	}
	if !IsNil(o.AllowTransfer) {
		toSerialize["allow_transfer"] = o.AllowTransfer
	}
	if !IsNil(o.AllowUpdate) {
		toSerialize["allow_update"] = o.AllowUpdate
	}
	if !IsNil(o.AnonymizeResponseLogging) {
		toSerialize["anonymize_response_logging"] = o.AnonymizeResponseLogging
	}
	if !IsNil(o.AtcFwdEnable) {
		toSerialize["atc_fwd_enable"] = o.AtcFwdEnable
	}
	if !IsNil(o.AttackMitigation) {
		toSerialize["attack_mitigation"] = o.AttackMitigation
	}
	if !IsNil(o.AutoBlackhole) {
		toSerialize["auto_blackhole"] = o.AutoBlackhole
	}
	if !IsNil(o.AutoCreateAAndPtrForLan2) {
		toSerialize["auto_create_a_and_ptr_for_lan2"] = o.AutoCreateAAndPtrForLan2
	}
	if !IsNil(o.AutoCreateAaaaAndIpv6ptrForLan2) {
		toSerialize["auto_create_aaaa_and_ipv6ptr_for_lan2"] = o.AutoCreateAaaaAndIpv6ptrForLan2
	}
	if !IsNil(o.AutoSortViews) {
		toSerialize["auto_sort_views"] = o.AutoSortViews
	}
	if !IsNil(o.BindCheckNamesPolicy) {
		toSerialize["bind_check_names_policy"] = o.BindCheckNamesPolicy
	}
	if !IsNil(o.BindHostnameDirective) {
		toSerialize["bind_hostname_directive"] = o.BindHostnameDirective
	}
	if !IsNil(o.BindHostnameDirectiveFqdn) {
		toSerialize["bind_hostname_directive_fqdn"] = o.BindHostnameDirectiveFqdn
	}
	if !IsNil(o.BlackholeList) {
		toSerialize["blackhole_list"] = o.BlackholeList
	}
	if !IsNil(o.BlacklistAction) {
		toSerialize["blacklist_action"] = o.BlacklistAction
	}
	if !IsNil(o.BlacklistLogQuery) {
		toSerialize["blacklist_log_query"] = o.BlacklistLogQuery
	}
	if !IsNil(o.BlacklistRedirectAddresses) {
		toSerialize["blacklist_redirect_addresses"] = o.BlacklistRedirectAddresses
	}
	if !IsNil(o.BlacklistRedirectTtl) {
		toSerialize["blacklist_redirect_ttl"] = o.BlacklistRedirectTtl
	}
	if !IsNil(o.BlacklistRulesets) {
		toSerialize["blacklist_rulesets"] = o.BlacklistRulesets
	}
	if !IsNil(o.CaptureDnsQueriesOnAllDomains) {
		toSerialize["capture_dns_queries_on_all_domains"] = o.CaptureDnsQueriesOnAllDomains
	}
	if !IsNil(o.CheckNamesForDdnsAndZoneTransfer) {
		toSerialize["check_names_for_ddns_and_zone_transfer"] = o.CheckNamesForDdnsAndZoneTransfer
	}
	if !IsNil(o.ClearDnsCache) {
		toSerialize["clear_dns_cache"] = o.ClearDnsCache
	}
	if !IsNil(o.CopyClientIpMacOptions) {
		toSerialize["copy_client_ip_mac_options"] = o.CopyClientIpMacOptions
	}
	if !IsNil(o.CopyXferToNotify) {
		toSerialize["copy_xfer_to_notify"] = o.CopyXferToNotify
	}
	if !IsNil(o.CustomRootNameServers) {
		toSerialize["custom_root_name_servers"] = o.CustomRootNameServers
	}
	if !IsNil(o.DisableEdns) {
		toSerialize["disable_edns"] = o.DisableEdns
	}
	if !IsNil(o.Dns64Groups) {
		toSerialize["dns64_groups"] = o.Dns64Groups
	}
	if !IsNil(o.DnsCacheAccelerationStatus) {
		toSerialize["dns_cache_acceleration_status"] = o.DnsCacheAccelerationStatus
	}
	if !IsNil(o.DnsCacheAccelerationTtl) {
		toSerialize["dns_cache_acceleration_ttl"] = o.DnsCacheAccelerationTtl
	}
	if !IsNil(o.DnsHealthCheckAnycastControl) {
		toSerialize["dns_health_check_anycast_control"] = o.DnsHealthCheckAnycastControl
	}
	if !IsNil(o.DnsHealthCheckDomainList) {
		toSerialize["dns_health_check_domain_list"] = o.DnsHealthCheckDomainList
	}
	if !IsNil(o.DnsHealthCheckInterval) {
		toSerialize["dns_health_check_interval"] = o.DnsHealthCheckInterval
	}
	if !IsNil(o.DnsHealthCheckRecursionFlag) {
		toSerialize["dns_health_check_recursion_flag"] = o.DnsHealthCheckRecursionFlag
	}
	if !IsNil(o.DnsHealthCheckRetries) {
		toSerialize["dns_health_check_retries"] = o.DnsHealthCheckRetries
	}
	if !IsNil(o.DnsHealthCheckTimeout) {
		toSerialize["dns_health_check_timeout"] = o.DnsHealthCheckTimeout
	}
	if !IsNil(o.DnsNotifyTransferSource) {
		toSerialize["dns_notify_transfer_source"] = o.DnsNotifyTransferSource
	}
	if !IsNil(o.DnsNotifyTransferSourceAddress) {
		toSerialize["dns_notify_transfer_source_address"] = o.DnsNotifyTransferSourceAddress
	}
	if !IsNil(o.DnsOverTlsService) {
		toSerialize["dns_over_tls_service"] = o.DnsOverTlsService
	}
	if !IsNil(o.DnsQueryCaptureFileTimeLimit) {
		toSerialize["dns_query_capture_file_time_limit"] = o.DnsQueryCaptureFileTimeLimit
	}
	if !IsNil(o.DnsQuerySourceAddress) {
		toSerialize["dns_query_source_address"] = o.DnsQuerySourceAddress
	}
	if !IsNil(o.DnsQuerySourceInterface) {
		toSerialize["dns_query_source_interface"] = o.DnsQuerySourceInterface
	}
	if !IsNil(o.DnsViewAddressSettings) {
		toSerialize["dns_view_address_settings"] = o.DnsViewAddressSettings
	}
	if !IsNil(o.DnssecBlacklistEnabled) {
		toSerialize["dnssec_blacklist_enabled"] = o.DnssecBlacklistEnabled
	}
	if !IsNil(o.DnssecDns64Enabled) {
		toSerialize["dnssec_dns64_enabled"] = o.DnssecDns64Enabled
	}
	if !IsNil(o.DnssecEnabled) {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if !IsNil(o.DnssecExpiredSignaturesEnabled) {
		toSerialize["dnssec_expired_signatures_enabled"] = o.DnssecExpiredSignaturesEnabled
	}
	if !IsNil(o.DnssecNegativeTrustAnchors) {
		toSerialize["dnssec_negative_trust_anchors"] = o.DnssecNegativeTrustAnchors
	}
	if !IsNil(o.DnssecNxdomainEnabled) {
		toSerialize["dnssec_nxdomain_enabled"] = o.DnssecNxdomainEnabled
	}
	if !IsNil(o.DnssecRpzEnabled) {
		toSerialize["dnssec_rpz_enabled"] = o.DnssecRpzEnabled
	}
	if !IsNil(o.DnssecTrustedKeys) {
		toSerialize["dnssec_trusted_keys"] = o.DnssecTrustedKeys
	}
	if !IsNil(o.DnssecValidationEnabled) {
		toSerialize["dnssec_validation_enabled"] = o.DnssecValidationEnabled
	}
	if !IsNil(o.DnstapSetting) {
		toSerialize["dnstap_setting"] = o.DnstapSetting
	}
	if !IsNil(o.DohHttpsSessionDuration) {
		toSerialize["doh_https_session_duration"] = o.DohHttpsSessionDuration
	}
	if !IsNil(o.DohService) {
		toSerialize["doh_service"] = o.DohService
	}
	if !IsNil(o.DomainsToCaptureDnsQueries) {
		toSerialize["domains_to_capture_dns_queries"] = o.DomainsToCaptureDnsQueries
	}
	if !IsNil(o.DtcDnsQueriesSpecificBehavior) {
		toSerialize["dtc_dns_queries_specific_behavior"] = o.DtcDnsQueriesSpecificBehavior
	}
	if !IsNil(o.DtcEdnsPreferClientSubnet) {
		toSerialize["dtc_edns_prefer_client_subnet"] = o.DtcEdnsPreferClientSubnet
	}
	if !IsNil(o.DtcHealthSource) {
		toSerialize["dtc_health_source"] = o.DtcHealthSource
	}
	if !IsNil(o.DtcHealthSourceAddress) {
		toSerialize["dtc_health_source_address"] = o.DtcHealthSourceAddress
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.EnableBlackhole) {
		toSerialize["enable_blackhole"] = o.EnableBlackhole
	}
	if !IsNil(o.EnableBlacklist) {
		toSerialize["enable_blacklist"] = o.EnableBlacklist
	}
	if !IsNil(o.EnableCaptureDnsQueries) {
		toSerialize["enable_capture_dns_queries"] = o.EnableCaptureDnsQueries
	}
	if !IsNil(o.EnableCaptureDnsResponses) {
		toSerialize["enable_capture_dns_responses"] = o.EnableCaptureDnsResponses
	}
	if !IsNil(o.EnableDns) {
		toSerialize["enable_dns"] = o.EnableDns
	}
	if !IsNil(o.EnableDns64) {
		toSerialize["enable_dns64"] = o.EnableDns64
	}
	if !IsNil(o.EnableDnsCacheAcceleration) {
		toSerialize["enable_dns_cache_acceleration"] = o.EnableDnsCacheAcceleration
	}
	if !IsNil(o.EnableDnsHealthCheck) {
		toSerialize["enable_dns_health_check"] = o.EnableDnsHealthCheck
	}
	if !IsNil(o.EnableDnstapQueries) {
		toSerialize["enable_dnstap_queries"] = o.EnableDnstapQueries
	}
	if !IsNil(o.EnableDnstapResponses) {
		toSerialize["enable_dnstap_responses"] = o.EnableDnstapResponses
	}
	if !IsNil(o.EnableExcludedDomainNames) {
		toSerialize["enable_excluded_domain_names"] = o.EnableExcludedDomainNames
	}
	if !IsNil(o.EnableFixedRrsetOrderFqdns) {
		toSerialize["enable_fixed_rrset_order_fqdns"] = o.EnableFixedRrsetOrderFqdns
	}
	if !IsNil(o.EnableFtc) {
		toSerialize["enable_ftc"] = o.EnableFtc
	}
	if !IsNil(o.EnableGssTsig) {
		toSerialize["enable_gss_tsig"] = o.EnableGssTsig
	}
	if !IsNil(o.EnableNotifySourcePort) {
		toSerialize["enable_notify_source_port"] = o.EnableNotifySourcePort
	}
	if !IsNil(o.EnableQueryRewrite) {
		toSerialize["enable_query_rewrite"] = o.EnableQueryRewrite
	}
	if !IsNil(o.EnableQuerySourcePort) {
		toSerialize["enable_query_source_port"] = o.EnableQuerySourcePort
	}
	if !IsNil(o.ExcludedDomainNames) {
		toSerialize["excluded_domain_names"] = o.ExcludedDomainNames
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FileTransferSetting) {
		toSerialize["file_transfer_setting"] = o.FileTransferSetting
	}
	if !IsNil(o.FilterAaaa) {
		toSerialize["filter_aaaa"] = o.FilterAaaa
	}
	if !IsNil(o.FilterAaaaList) {
		toSerialize["filter_aaaa_list"] = o.FilterAaaaList
	}
	if !IsNil(o.FixedRrsetOrderFqdns) {
		toSerialize["fixed_rrset_order_fqdns"] = o.FixedRrsetOrderFqdns
	}
	if !IsNil(o.ForwardOnly) {
		toSerialize["forward_only"] = o.ForwardOnly
	}
	if !IsNil(o.ForwardUpdates) {
		toSerialize["forward_updates"] = o.ForwardUpdates
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.FtcExpiredRecordTimeout) {
		toSerialize["ftc_expired_record_timeout"] = o.FtcExpiredRecordTimeout
	}
	if !IsNil(o.FtcExpiredRecordTtl) {
		toSerialize["ftc_expired_record_ttl"] = o.FtcExpiredRecordTtl
	}
	if !IsNil(o.GlueRecordAddresses) {
		toSerialize["glue_record_addresses"] = o.GlueRecordAddresses
	}
	if !IsNil(o.GssTsigKeys) {
		toSerialize["gss_tsig_keys"] = o.GssTsigKeys
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !IsNil(o.Ipv6GlueRecordAddresses) {
		toSerialize["ipv6_glue_record_addresses"] = o.Ipv6GlueRecordAddresses
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.LoggingCategories) {
		toSerialize["logging_categories"] = o.LoggingCategories
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxCachedLifetime) {
		toSerialize["max_cached_lifetime"] = o.MaxCachedLifetime
	}
	if !IsNil(o.MaxNcacheTtl) {
		toSerialize["max_ncache_ttl"] = o.MaxNcacheTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.MinimalResp) {
		toSerialize["minimal_resp"] = o.MinimalResp
	}
	if !IsNil(o.NotifyDelay) {
		toSerialize["notify_delay"] = o.NotifyDelay
	}
	if !IsNil(o.NotifySourcePort) {
		toSerialize["notify_source_port"] = o.NotifySourcePort
	}
	if !IsNil(o.NxdomainLogQuery) {
		toSerialize["nxdomain_log_query"] = o.NxdomainLogQuery
	}
	if !IsNil(o.NxdomainRedirect) {
		toSerialize["nxdomain_redirect"] = o.NxdomainRedirect
	}
	if !IsNil(o.NxdomainRedirectAddresses) {
		toSerialize["nxdomain_redirect_addresses"] = o.NxdomainRedirectAddresses
	}
	if !IsNil(o.NxdomainRedirectAddressesV6) {
		toSerialize["nxdomain_redirect_addresses_v6"] = o.NxdomainRedirectAddressesV6
	}
	if !IsNil(o.NxdomainRedirectTtl) {
		toSerialize["nxdomain_redirect_ttl"] = o.NxdomainRedirectTtl
	}
	if !IsNil(o.NxdomainRulesets) {
		toSerialize["nxdomain_rulesets"] = o.NxdomainRulesets
	}
	if !IsNil(o.QuerySourcePort) {
		toSerialize["query_source_port"] = o.QuerySourcePort
	}
	if !IsNil(o.RecordNamePolicy) {
		toSerialize["record_name_policy"] = o.RecordNamePolicy
	}
	if !IsNil(o.RecursiveClientLimit) {
		toSerialize["recursive_client_limit"] = o.RecursiveClientLimit
	}
	if !IsNil(o.RecursiveQueryList) {
		toSerialize["recursive_query_list"] = o.RecursiveQueryList
	}
	if !IsNil(o.RecursiveResolver) {
		toSerialize["recursive_resolver"] = o.RecursiveResolver
	}
	if !IsNil(o.ResolverQueryTimeout) {
		toSerialize["resolver_query_timeout"] = o.ResolverQueryTimeout
	}
	if !IsNil(o.ResponseRateLimiting) {
		toSerialize["response_rate_limiting"] = o.ResponseRateLimiting
	}
	if !IsNil(o.RootNameServerType) {
		toSerialize["root_name_server_type"] = o.RootNameServerType
	}
	if !IsNil(o.RpzDisableNsdnameNsip) {
		toSerialize["rpz_disable_nsdname_nsip"] = o.RpzDisableNsdnameNsip
	}
	if !IsNil(o.RpzDropIpRuleEnabled) {
		toSerialize["rpz_drop_ip_rule_enabled"] = o.RpzDropIpRuleEnabled
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv4"] = o.RpzDropIpRuleMinPrefixLengthIpv4
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv6"] = o.RpzDropIpRuleMinPrefixLengthIpv6
	}
	if !IsNil(o.RpzQnameWaitRecurse) {
		toSerialize["rpz_qname_wait_recurse"] = o.RpzQnameWaitRecurse
	}
	if !IsNil(o.SerialQueryRate) {
		toSerialize["serial_query_rate"] = o.SerialQueryRate
	}
	if !IsNil(o.ServerIdDirective) {
		toSerialize["server_id_directive"] = o.ServerIdDirective
	}
	if !IsNil(o.ServerIdDirectiveString) {
		toSerialize["server_id_directive_string"] = o.ServerIdDirectiveString
	}
	if !IsNil(o.SkipInGridRpzQueries) {
		toSerialize["skip_in_grid_rpz_queries"] = o.SkipInGridRpzQueries
	}
	if !IsNil(o.Sortlist) {
		toSerialize["sortlist"] = o.Sortlist
	}
	if !IsNil(o.StoreLocally) {
		toSerialize["store_locally"] = o.StoreLocally
	}
	if !IsNil(o.SyslogFacility) {
		toSerialize["syslog_facility"] = o.SyslogFacility
	}
	if !IsNil(o.TcpIdleTimeout) {
		toSerialize["tcp_idle_timeout"] = o.TcpIdleTimeout
	}
	if !IsNil(o.TlsSessionDuration) {
		toSerialize["tls_session_duration"] = o.TlsSessionDuration
	}
	if !IsNil(o.TransferExcludedServers) {
		toSerialize["transfer_excluded_servers"] = o.TransferExcludedServers
	}
	if !IsNil(o.TransferFormat) {
		toSerialize["transfer_format"] = o.TransferFormat
	}
	if !IsNil(o.TransfersIn) {
		toSerialize["transfers_in"] = o.TransfersIn
	}
	if !IsNil(o.TransfersOut) {
		toSerialize["transfers_out"] = o.TransfersOut
	}
	if !IsNil(o.TransfersPerNs) {
		toSerialize["transfers_per_ns"] = o.TransfersPerNs
	}
	if !IsNil(o.UseAddClientIpMacOptions) {
		toSerialize["use_add_client_ip_mac_options"] = o.UseAddClientIpMacOptions
	}
	if !IsNil(o.UseAllowQuery) {
		toSerialize["use_allow_query"] = o.UseAllowQuery
	}
	if !IsNil(o.UseAllowTransfer) {
		toSerialize["use_allow_transfer"] = o.UseAllowTransfer
	}
	if !IsNil(o.UseAttackMitigation) {
		toSerialize["use_attack_mitigation"] = o.UseAttackMitigation
	}
	if !IsNil(o.UseAutoBlackhole) {
		toSerialize["use_auto_blackhole"] = o.UseAutoBlackhole
	}
	if !IsNil(o.UseBindHostnameDirective) {
		toSerialize["use_bind_hostname_directive"] = o.UseBindHostnameDirective
	}
	if !IsNil(o.UseBlackhole) {
		toSerialize["use_blackhole"] = o.UseBlackhole
	}
	if !IsNil(o.UseBlacklist) {
		toSerialize["use_blacklist"] = o.UseBlacklist
	}
	if !IsNil(o.UseCaptureDnsQueriesOnAllDomains) {
		toSerialize["use_capture_dns_queries_on_all_domains"] = o.UseCaptureDnsQueriesOnAllDomains
	}
	if !IsNil(o.UseCopyClientIpMacOptions) {
		toSerialize["use_copy_client_ip_mac_options"] = o.UseCopyClientIpMacOptions
	}
	if !IsNil(o.UseCopyXferToNotify) {
		toSerialize["use_copy_xfer_to_notify"] = o.UseCopyXferToNotify
	}
	if !IsNil(o.UseDisableEdns) {
		toSerialize["use_disable_edns"] = o.UseDisableEdns
	}
	if !IsNil(o.UseDns64) {
		toSerialize["use_dns64"] = o.UseDns64
	}
	if !IsNil(o.UseDnsCacheAccelerationTtl) {
		toSerialize["use_dns_cache_acceleration_ttl"] = o.UseDnsCacheAccelerationTtl
	}
	if !IsNil(o.UseDnsHealthCheck) {
		toSerialize["use_dns_health_check"] = o.UseDnsHealthCheck
	}
	if !IsNil(o.UseDnssec) {
		toSerialize["use_dnssec"] = o.UseDnssec
	}
	if !IsNil(o.UseDnstapSetting) {
		toSerialize["use_dnstap_setting"] = o.UseDnstapSetting
	}
	if !IsNil(o.UseDtcDnsQueriesSpecificBehavior) {
		toSerialize["use_dtc_dns_queries_specific_behavior"] = o.UseDtcDnsQueriesSpecificBehavior
	}
	if !IsNil(o.UseDtcEdnsPreferClientSubnet) {
		toSerialize["use_dtc_edns_prefer_client_subnet"] = o.UseDtcEdnsPreferClientSubnet
	}
	if !IsNil(o.UseEdnsUdpSize) {
		toSerialize["use_edns_udp_size"] = o.UseEdnsUdpSize
	}
	if !IsNil(o.UseEnableCaptureDns) {
		toSerialize["use_enable_capture_dns"] = o.UseEnableCaptureDns
	}
	if !IsNil(o.UseEnableExcludedDomainNames) {
		toSerialize["use_enable_excluded_domain_names"] = o.UseEnableExcludedDomainNames
	}
	if !IsNil(o.UseEnableGssTsig) {
		toSerialize["use_enable_gss_tsig"] = o.UseEnableGssTsig
	}
	if !IsNil(o.UseEnableQueryRewrite) {
		toSerialize["use_enable_query_rewrite"] = o.UseEnableQueryRewrite
	}
	if !IsNil(o.UseFilterAaaa) {
		toSerialize["use_filter_aaaa"] = o.UseFilterAaaa
	}
	if !IsNil(o.UseFixedRrsetOrderFqdns) {
		toSerialize["use_fixed_rrset_order_fqdns"] = o.UseFixedRrsetOrderFqdns
	}
	if !IsNil(o.UseForwardUpdates) {
		toSerialize["use_forward_updates"] = o.UseForwardUpdates
	}
	if !IsNil(o.UseForwarders) {
		toSerialize["use_forwarders"] = o.UseForwarders
	}
	if !IsNil(o.UseFtc) {
		toSerialize["use_ftc"] = o.UseFtc
	}
	if !IsNil(o.UseGssTsigKeys) {
		toSerialize["use_gss_tsig_keys"] = o.UseGssTsigKeys
	}
	if !IsNil(o.UseLan2Ipv6Port) {
		toSerialize["use_lan2_ipv6_port"] = o.UseLan2Ipv6Port
	}
	if !IsNil(o.UseLan2Port) {
		toSerialize["use_lan2_port"] = o.UseLan2Port
	}
	if !IsNil(o.UseLanIpv6Port) {
		toSerialize["use_lan_ipv6_port"] = o.UseLanIpv6Port
	}
	if !IsNil(o.UseLanPort) {
		toSerialize["use_lan_port"] = o.UseLanPort
	}
	if !IsNil(o.UseLoggingCategories) {
		toSerialize["use_logging_categories"] = o.UseLoggingCategories
	}
	if !IsNil(o.UseMaxCacheTtl) {
		toSerialize["use_max_cache_ttl"] = o.UseMaxCacheTtl
	}
	if !IsNil(o.UseMaxCachedLifetime) {
		toSerialize["use_max_cached_lifetime"] = o.UseMaxCachedLifetime
	}
	if !IsNil(o.UseMaxNcacheTtl) {
		toSerialize["use_max_ncache_ttl"] = o.UseMaxNcacheTtl
	}
	if !IsNil(o.UseMaxUdpSize) {
		toSerialize["use_max_udp_size"] = o.UseMaxUdpSize
	}
	if !IsNil(o.UseMgmtIpv6Port) {
		toSerialize["use_mgmt_ipv6_port"] = o.UseMgmtIpv6Port
	}
	if !IsNil(o.UseMgmtPort) {
		toSerialize["use_mgmt_port"] = o.UseMgmtPort
	}
	if !IsNil(o.UseNotifyDelay) {
		toSerialize["use_notify_delay"] = o.UseNotifyDelay
	}
	if !IsNil(o.UseNxdomainRedirect) {
		toSerialize["use_nxdomain_redirect"] = o.UseNxdomainRedirect
	}
	if !IsNil(o.UseRecordNamePolicy) {
		toSerialize["use_record_name_policy"] = o.UseRecordNamePolicy
	}
	if !IsNil(o.UseRecursiveClientLimit) {
		toSerialize["use_recursive_client_limit"] = o.UseRecursiveClientLimit
	}
	if !IsNil(o.UseRecursiveQuerySetting) {
		toSerialize["use_recursive_query_setting"] = o.UseRecursiveQuerySetting
	}
	if !IsNil(o.UseResolverQueryTimeout) {
		toSerialize["use_resolver_query_timeout"] = o.UseResolverQueryTimeout
	}
	if !IsNil(o.UseResponseRateLimiting) {
		toSerialize["use_response_rate_limiting"] = o.UseResponseRateLimiting
	}
	if !IsNil(o.UseRootNameServer) {
		toSerialize["use_root_name_server"] = o.UseRootNameServer
	}
	if !IsNil(o.UseRootServerForAllViews) {
		toSerialize["use_root_server_for_all_views"] = o.UseRootServerForAllViews
	}
	if !IsNil(o.UseRpzDisableNsdnameNsip) {
		toSerialize["use_rpz_disable_nsdname_nsip"] = o.UseRpzDisableNsdnameNsip
	}
	if !IsNil(o.UseRpzDropIpRule) {
		toSerialize["use_rpz_drop_ip_rule"] = o.UseRpzDropIpRule
	}
	if !IsNil(o.UseRpzQnameWaitRecurse) {
		toSerialize["use_rpz_qname_wait_recurse"] = o.UseRpzQnameWaitRecurse
	}
	if !IsNil(o.UseSerialQueryRate) {
		toSerialize["use_serial_query_rate"] = o.UseSerialQueryRate
	}
	if !IsNil(o.UseServerIdDirective) {
		toSerialize["use_server_id_directive"] = o.UseServerIdDirective
	}
	if !IsNil(o.UseSortlist) {
		toSerialize["use_sortlist"] = o.UseSortlist
	}
	if !IsNil(o.UseSourcePorts) {
		toSerialize["use_source_ports"] = o.UseSourcePorts
	}
	if !IsNil(o.UseSyslogFacility) {
		toSerialize["use_syslog_facility"] = o.UseSyslogFacility
	}
	if !IsNil(o.UseTransfersIn) {
		toSerialize["use_transfers_in"] = o.UseTransfersIn
	}
	if !IsNil(o.UseTransfersOut) {
		toSerialize["use_transfers_out"] = o.UseTransfersOut
	}
	if !IsNil(o.UseTransfersPerNs) {
		toSerialize["use_transfers_per_ns"] = o.UseTransfersPerNs
	}
	if !IsNil(o.UseUpdateSetting) {
		toSerialize["use_update_setting"] = o.UseUpdateSetting
	}
	if !IsNil(o.UseZoneTransferFormat) {
		toSerialize["use_zone_transfer_format"] = o.UseZoneTransferFormat
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	return toSerialize, nil
}

type NullableMemberDns struct {
	value *MemberDns
	isSet bool
}

func (v NullableMemberDns) Get() *MemberDns {
	return v.value
}

func (v *NullableMemberDns) Set(val *MemberDns) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDns) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDns(val *MemberDns) *NullableMemberDns {
	return &NullableMemberDns{value: val, isSet: true}
}

func (v NullableMemberDns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
