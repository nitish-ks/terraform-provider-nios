/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDnsDnsViewAddressSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDnsDnsViewAddressSettings{}

// MemberDnsDnsViewAddressSettings struct for MemberDnsDnsViewAddressSettings
type MemberDnsDnsViewAddressSettings struct {
	// The reference to DNS View
	ViewName *string `json:"view_name,omitempty"`
	// Determines which IP address is used as the source for DDNS notify and transfer operations.
	DnsNotifyTransferSource *string `json:"dns_notify_transfer_source,omitempty"`
	// The source address used if dns_notify_transfer_source type is \"IP\".
	DnsNotifyTransferSourceAddress *string `json:"dns_notify_transfer_source_address,omitempty"`
	// Determines which IP address is used as the source for DDNS query operations.
	DnsQuerySourceInterface *string `json:"dns_query_source_interface,omitempty"`
	// The source address used if dns_query_source_interface type is \"IP\".
	DnsQuerySourceAddress *string `json:"dns_query_source_address,omitempty"`
	// Determines if the notify source port for a view is enabled or not.
	EnableNotifySourcePort *bool `json:"enable_notify_source_port,omitempty"`
	// The source port for notify messages. When requesting zone transfers from the primary server, some secondary DNS servers use the source port number (the primary server used to send the notify message) as the destination port number in the zone transfer request. This setting overrides Grid static source port settings. Valid values are between 1 and 63999. The default is selected by BIND.
	NotifySourcePort *int64 `json:"notify_source_port,omitempty"`
	// Determines if the query source port for a view is enabled or not.
	EnableQuerySourcePort *bool `json:"enable_query_source_port,omitempty"`
	// The source port for queries. Specifying a source port number for recursive queries ensures that a firewall will allow the response. Valid values are between 1 and 63999. The default is selected by BIND.
	QuerySourcePort *int64 `json:"query_source_port,omitempty"`
	// Specifies the number of seconds of delay the notify messages are sent to secondaries.
	NotifyDelay *int64 `json:"notify_delay,omitempty"`
	// Use flag for: enable_notify_source_port , notify_source_port, enable_query_source_port, query_source_port
	UseSourcePorts *bool `json:"use_source_ports,omitempty"`
	// Use flag for: notify_delay
	UseNotifyDelay       *bool `json:"use_notify_delay,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberDnsDnsViewAddressSettings MemberDnsDnsViewAddressSettings

// NewMemberDnsDnsViewAddressSettings instantiates a new MemberDnsDnsViewAddressSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDnsDnsViewAddressSettings() *MemberDnsDnsViewAddressSettings {
	this := MemberDnsDnsViewAddressSettings{}
	return &this
}

// NewMemberDnsDnsViewAddressSettingsWithDefaults instantiates a new MemberDnsDnsViewAddressSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDnsDnsViewAddressSettingsWithDefaults() *MemberDnsDnsViewAddressSettings {
	this := MemberDnsDnsViewAddressSettings{}
	return &this
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *MemberDnsDnsViewAddressSettings) SetViewName(v string) {
	o.ViewName = &v
}

// GetDnsNotifyTransferSource returns the DnsNotifyTransferSource field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetDnsNotifyTransferSource() string {
	if o == nil || IsNil(o.DnsNotifyTransferSource) {
		var ret string
		return ret
	}
	return *o.DnsNotifyTransferSource
}

// GetDnsNotifyTransferSourceOk returns a tuple with the DnsNotifyTransferSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetDnsNotifyTransferSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DnsNotifyTransferSource) {
		return nil, false
	}
	return o.DnsNotifyTransferSource, true
}

// HasDnsNotifyTransferSource returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasDnsNotifyTransferSource() bool {
	if o != nil && !IsNil(o.DnsNotifyTransferSource) {
		return true
	}

	return false
}

// SetDnsNotifyTransferSource gets a reference to the given string and assigns it to the DnsNotifyTransferSource field.
func (o *MemberDnsDnsViewAddressSettings) SetDnsNotifyTransferSource(v string) {
	o.DnsNotifyTransferSource = &v
}

// GetDnsNotifyTransferSourceAddress returns the DnsNotifyTransferSourceAddress field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetDnsNotifyTransferSourceAddress() string {
	if o == nil || IsNil(o.DnsNotifyTransferSourceAddress) {
		var ret string
		return ret
	}
	return *o.DnsNotifyTransferSourceAddress
}

// GetDnsNotifyTransferSourceAddressOk returns a tuple with the DnsNotifyTransferSourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetDnsNotifyTransferSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DnsNotifyTransferSourceAddress) {
		return nil, false
	}
	return o.DnsNotifyTransferSourceAddress, true
}

// HasDnsNotifyTransferSourceAddress returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasDnsNotifyTransferSourceAddress() bool {
	if o != nil && !IsNil(o.DnsNotifyTransferSourceAddress) {
		return true
	}

	return false
}

// SetDnsNotifyTransferSourceAddress gets a reference to the given string and assigns it to the DnsNotifyTransferSourceAddress field.
func (o *MemberDnsDnsViewAddressSettings) SetDnsNotifyTransferSourceAddress(v string) {
	o.DnsNotifyTransferSourceAddress = &v
}

// GetDnsQuerySourceInterface returns the DnsQuerySourceInterface field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetDnsQuerySourceInterface() string {
	if o == nil || IsNil(o.DnsQuerySourceInterface) {
		var ret string
		return ret
	}
	return *o.DnsQuerySourceInterface
}

// GetDnsQuerySourceInterfaceOk returns a tuple with the DnsQuerySourceInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetDnsQuerySourceInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.DnsQuerySourceInterface) {
		return nil, false
	}
	return o.DnsQuerySourceInterface, true
}

// HasDnsQuerySourceInterface returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasDnsQuerySourceInterface() bool {
	if o != nil && !IsNil(o.DnsQuerySourceInterface) {
		return true
	}

	return false
}

// SetDnsQuerySourceInterface gets a reference to the given string and assigns it to the DnsQuerySourceInterface field.
func (o *MemberDnsDnsViewAddressSettings) SetDnsQuerySourceInterface(v string) {
	o.DnsQuerySourceInterface = &v
}

// GetDnsQuerySourceAddress returns the DnsQuerySourceAddress field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetDnsQuerySourceAddress() string {
	if o == nil || IsNil(o.DnsQuerySourceAddress) {
		var ret string
		return ret
	}
	return *o.DnsQuerySourceAddress
}

// GetDnsQuerySourceAddressOk returns a tuple with the DnsQuerySourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetDnsQuerySourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DnsQuerySourceAddress) {
		return nil, false
	}
	return o.DnsQuerySourceAddress, true
}

// HasDnsQuerySourceAddress returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasDnsQuerySourceAddress() bool {
	if o != nil && !IsNil(o.DnsQuerySourceAddress) {
		return true
	}

	return false
}

// SetDnsQuerySourceAddress gets a reference to the given string and assigns it to the DnsQuerySourceAddress field.
func (o *MemberDnsDnsViewAddressSettings) SetDnsQuerySourceAddress(v string) {
	o.DnsQuerySourceAddress = &v
}

// GetEnableNotifySourcePort returns the EnableNotifySourcePort field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetEnableNotifySourcePort() bool {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySourcePort
}

// GetEnableNotifySourcePortOk returns a tuple with the EnableNotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetEnableNotifySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySourcePort) {
		return nil, false
	}
	return o.EnableNotifySourcePort, true
}

// HasEnableNotifySourcePort returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasEnableNotifySourcePort() bool {
	if o != nil && !IsNil(o.EnableNotifySourcePort) {
		return true
	}

	return false
}

// SetEnableNotifySourcePort gets a reference to the given bool and assigns it to the EnableNotifySourcePort field.
func (o *MemberDnsDnsViewAddressSettings) SetEnableNotifySourcePort(v bool) {
	o.EnableNotifySourcePort = &v
}

// GetNotifySourcePort returns the NotifySourcePort field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetNotifySourcePort() int64 {
	if o == nil || IsNil(o.NotifySourcePort) {
		var ret int64
		return ret
	}
	return *o.NotifySourcePort
}

// GetNotifySourcePortOk returns a tuple with the NotifySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetNotifySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifySourcePort) {
		return nil, false
	}
	return o.NotifySourcePort, true
}

// HasNotifySourcePort returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasNotifySourcePort() bool {
	if o != nil && !IsNil(o.NotifySourcePort) {
		return true
	}

	return false
}

// SetNotifySourcePort gets a reference to the given int64 and assigns it to the NotifySourcePort field.
func (o *MemberDnsDnsViewAddressSettings) SetNotifySourcePort(v int64) {
	o.NotifySourcePort = &v
}

// GetEnableQuerySourcePort returns the EnableQuerySourcePort field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetEnableQuerySourcePort() bool {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		var ret bool
		return ret
	}
	return *o.EnableQuerySourcePort
}

// GetEnableQuerySourcePortOk returns a tuple with the EnableQuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetEnableQuerySourcePortOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQuerySourcePort) {
		return nil, false
	}
	return o.EnableQuerySourcePort, true
}

// HasEnableQuerySourcePort returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasEnableQuerySourcePort() bool {
	if o != nil && !IsNil(o.EnableQuerySourcePort) {
		return true
	}

	return false
}

// SetEnableQuerySourcePort gets a reference to the given bool and assigns it to the EnableQuerySourcePort field.
func (o *MemberDnsDnsViewAddressSettings) SetEnableQuerySourcePort(v bool) {
	o.EnableQuerySourcePort = &v
}

// GetQuerySourcePort returns the QuerySourcePort field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetQuerySourcePort() int64 {
	if o == nil || IsNil(o.QuerySourcePort) {
		var ret int64
		return ret
	}
	return *o.QuerySourcePort
}

// GetQuerySourcePortOk returns a tuple with the QuerySourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetQuerySourcePortOk() (*int64, bool) {
	if o == nil || IsNil(o.QuerySourcePort) {
		return nil, false
	}
	return o.QuerySourcePort, true
}

// HasQuerySourcePort returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasQuerySourcePort() bool {
	if o != nil && !IsNil(o.QuerySourcePort) {
		return true
	}

	return false
}

// SetQuerySourcePort gets a reference to the given int64 and assigns it to the QuerySourcePort field.
func (o *MemberDnsDnsViewAddressSettings) SetQuerySourcePort(v int64) {
	o.QuerySourcePort = &v
}

// GetNotifyDelay returns the NotifyDelay field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetNotifyDelay() int64 {
	if o == nil || IsNil(o.NotifyDelay) {
		var ret int64
		return ret
	}
	return *o.NotifyDelay
}

// GetNotifyDelayOk returns a tuple with the NotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetNotifyDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifyDelay) {
		return nil, false
	}
	return o.NotifyDelay, true
}

// HasNotifyDelay returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasNotifyDelay() bool {
	if o != nil && !IsNil(o.NotifyDelay) {
		return true
	}

	return false
}

// SetNotifyDelay gets a reference to the given int64 and assigns it to the NotifyDelay field.
func (o *MemberDnsDnsViewAddressSettings) SetNotifyDelay(v int64) {
	o.NotifyDelay = &v
}

// GetUseSourcePorts returns the UseSourcePorts field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetUseSourcePorts() bool {
	if o == nil || IsNil(o.UseSourcePorts) {
		var ret bool
		return ret
	}
	return *o.UseSourcePorts
}

// GetUseSourcePortsOk returns a tuple with the UseSourcePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetUseSourcePortsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSourcePorts) {
		return nil, false
	}
	return o.UseSourcePorts, true
}

// HasUseSourcePorts returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasUseSourcePorts() bool {
	if o != nil && !IsNil(o.UseSourcePorts) {
		return true
	}

	return false
}

// SetUseSourcePorts gets a reference to the given bool and assigns it to the UseSourcePorts field.
func (o *MemberDnsDnsViewAddressSettings) SetUseSourcePorts(v bool) {
	o.UseSourcePorts = &v
}

// GetUseNotifyDelay returns the UseNotifyDelay field value if set, zero value otherwise.
func (o *MemberDnsDnsViewAddressSettings) GetUseNotifyDelay() bool {
	if o == nil || IsNil(o.UseNotifyDelay) {
		var ret bool
		return ret
	}
	return *o.UseNotifyDelay
}

// GetUseNotifyDelayOk returns a tuple with the UseNotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsDnsViewAddressSettings) GetUseNotifyDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNotifyDelay) {
		return nil, false
	}
	return o.UseNotifyDelay, true
}

// HasUseNotifyDelay returns a boolean if a field has been set.
func (o *MemberDnsDnsViewAddressSettings) HasUseNotifyDelay() bool {
	if o != nil && !IsNil(o.UseNotifyDelay) {
		return true
	}

	return false
}

// SetUseNotifyDelay gets a reference to the given bool and assigns it to the UseNotifyDelay field.
func (o *MemberDnsDnsViewAddressSettings) SetUseNotifyDelay(v bool) {
	o.UseNotifyDelay = &v
}

func (o MemberDnsDnsViewAddressSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDnsDnsViewAddressSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ViewName) {
		toSerialize["view_name"] = o.ViewName
	}
	if !IsNil(o.DnsNotifyTransferSource) {
		toSerialize["dns_notify_transfer_source"] = o.DnsNotifyTransferSource
	}
	if !IsNil(o.DnsNotifyTransferSourceAddress) {
		toSerialize["dns_notify_transfer_source_address"] = o.DnsNotifyTransferSourceAddress
	}
	if !IsNil(o.DnsQuerySourceInterface) {
		toSerialize["dns_query_source_interface"] = o.DnsQuerySourceInterface
	}
	if !IsNil(o.DnsQuerySourceAddress) {
		toSerialize["dns_query_source_address"] = o.DnsQuerySourceAddress
	}
	if !IsNil(o.EnableNotifySourcePort) {
		toSerialize["enable_notify_source_port"] = o.EnableNotifySourcePort
	}
	if !IsNil(o.NotifySourcePort) {
		toSerialize["notify_source_port"] = o.NotifySourcePort
	}
	if !IsNil(o.EnableQuerySourcePort) {
		toSerialize["enable_query_source_port"] = o.EnableQuerySourcePort
	}
	if !IsNil(o.QuerySourcePort) {
		toSerialize["query_source_port"] = o.QuerySourcePort
	}
	if !IsNil(o.NotifyDelay) {
		toSerialize["notify_delay"] = o.NotifyDelay
	}
	if !IsNil(o.UseSourcePorts) {
		toSerialize["use_source_ports"] = o.UseSourcePorts
	}
	if !IsNil(o.UseNotifyDelay) {
		toSerialize["use_notify_delay"] = o.UseNotifyDelay
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberDnsDnsViewAddressSettings) UnmarshalJSON(data []byte) (err error) {
	varMemberDnsDnsViewAddressSettings := _MemberDnsDnsViewAddressSettings{}

	err = json.Unmarshal(data, &varMemberDnsDnsViewAddressSettings)

	if err != nil {
		return err
	}

	*o = MemberDnsDnsViewAddressSettings(varMemberDnsDnsViewAddressSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "view_name")
		delete(additionalProperties, "dns_notify_transfer_source")
		delete(additionalProperties, "dns_notify_transfer_source_address")
		delete(additionalProperties, "dns_query_source_interface")
		delete(additionalProperties, "dns_query_source_address")
		delete(additionalProperties, "enable_notify_source_port")
		delete(additionalProperties, "notify_source_port")
		delete(additionalProperties, "enable_query_source_port")
		delete(additionalProperties, "query_source_port")
		delete(additionalProperties, "notify_delay")
		delete(additionalProperties, "use_source_ports")
		delete(additionalProperties, "use_notify_delay")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberDnsDnsViewAddressSettings struct {
	value *MemberDnsDnsViewAddressSettings
	isSet bool
}

func (v NullableMemberDnsDnsViewAddressSettings) Get() *MemberDnsDnsViewAddressSettings {
	return v.value
}

func (v *NullableMemberDnsDnsViewAddressSettings) Set(val *MemberDnsDnsViewAddressSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDnsDnsViewAddressSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDnsDnsViewAddressSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDnsDnsViewAddressSettings(val *MemberDnsDnsViewAddressSettings) *NullableMemberDnsDnsViewAddressSettings {
	return &NullableMemberDnsDnsViewAddressSettings{value: val, isSet: true}
}

func (v NullableMemberDnsDnsViewAddressSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDnsDnsViewAddressSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
