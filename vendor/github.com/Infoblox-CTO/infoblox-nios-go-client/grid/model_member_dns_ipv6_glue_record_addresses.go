/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDnsIpv6GlueRecordAddresses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDnsIpv6GlueRecordAddresses{}

// MemberDnsIpv6GlueRecordAddresses struct for MemberDnsIpv6GlueRecordAddresses
type MemberDnsIpv6GlueRecordAddresses struct {
	// Determines if empty view with recursion enabled will be written into the conf file.
	AttachEmptyRecursiveView *bool `json:"attach_empty_recursive_view,omitempty"`
	// The address the appliance uses to generate the glue record.
	GlueRecordAddress *string `json:"glue_record_address,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The address choice for auto-created glue records for this view.
	GlueAddressChoice    *string `json:"glue_address_choice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberDnsIpv6GlueRecordAddresses MemberDnsIpv6GlueRecordAddresses

// NewMemberDnsIpv6GlueRecordAddresses instantiates a new MemberDnsIpv6GlueRecordAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDnsIpv6GlueRecordAddresses() *MemberDnsIpv6GlueRecordAddresses {
	this := MemberDnsIpv6GlueRecordAddresses{}
	return &this
}

// NewMemberDnsIpv6GlueRecordAddressesWithDefaults instantiates a new MemberDnsIpv6GlueRecordAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDnsIpv6GlueRecordAddressesWithDefaults() *MemberDnsIpv6GlueRecordAddresses {
	this := MemberDnsIpv6GlueRecordAddresses{}
	return &this
}

// GetAttachEmptyRecursiveView returns the AttachEmptyRecursiveView field value if set, zero value otherwise.
func (o *MemberDnsIpv6GlueRecordAddresses) GetAttachEmptyRecursiveView() bool {
	if o == nil || IsNil(o.AttachEmptyRecursiveView) {
		var ret bool
		return ret
	}
	return *o.AttachEmptyRecursiveView
}

// GetAttachEmptyRecursiveViewOk returns a tuple with the AttachEmptyRecursiveView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) GetAttachEmptyRecursiveViewOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachEmptyRecursiveView) {
		return nil, false
	}
	return o.AttachEmptyRecursiveView, true
}

// HasAttachEmptyRecursiveView returns a boolean if a field has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) HasAttachEmptyRecursiveView() bool {
	if o != nil && !IsNil(o.AttachEmptyRecursiveView) {
		return true
	}

	return false
}

// SetAttachEmptyRecursiveView gets a reference to the given bool and assigns it to the AttachEmptyRecursiveView field.
func (o *MemberDnsIpv6GlueRecordAddresses) SetAttachEmptyRecursiveView(v bool) {
	o.AttachEmptyRecursiveView = &v
}

// GetGlueRecordAddress returns the GlueRecordAddress field value if set, zero value otherwise.
func (o *MemberDnsIpv6GlueRecordAddresses) GetGlueRecordAddress() string {
	if o == nil || IsNil(o.GlueRecordAddress) {
		var ret string
		return ret
	}
	return *o.GlueRecordAddress
}

// GetGlueRecordAddressOk returns a tuple with the GlueRecordAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) GetGlueRecordAddressOk() (*string, bool) {
	if o == nil || IsNil(o.GlueRecordAddress) {
		return nil, false
	}
	return o.GlueRecordAddress, true
}

// HasGlueRecordAddress returns a boolean if a field has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) HasGlueRecordAddress() bool {
	if o != nil && !IsNil(o.GlueRecordAddress) {
		return true
	}

	return false
}

// SetGlueRecordAddress gets a reference to the given string and assigns it to the GlueRecordAddress field.
func (o *MemberDnsIpv6GlueRecordAddresses) SetGlueRecordAddress(v string) {
	o.GlueRecordAddress = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *MemberDnsIpv6GlueRecordAddresses) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *MemberDnsIpv6GlueRecordAddresses) SetView(v string) {
	o.View = &v
}

// GetGlueAddressChoice returns the GlueAddressChoice field value if set, zero value otherwise.
func (o *MemberDnsIpv6GlueRecordAddresses) GetGlueAddressChoice() string {
	if o == nil || IsNil(o.GlueAddressChoice) {
		var ret string
		return ret
	}
	return *o.GlueAddressChoice
}

// GetGlueAddressChoiceOk returns a tuple with the GlueAddressChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) GetGlueAddressChoiceOk() (*string, bool) {
	if o == nil || IsNil(o.GlueAddressChoice) {
		return nil, false
	}
	return o.GlueAddressChoice, true
}

// HasGlueAddressChoice returns a boolean if a field has been set.
func (o *MemberDnsIpv6GlueRecordAddresses) HasGlueAddressChoice() bool {
	if o != nil && !IsNil(o.GlueAddressChoice) {
		return true
	}

	return false
}

// SetGlueAddressChoice gets a reference to the given string and assigns it to the GlueAddressChoice field.
func (o *MemberDnsIpv6GlueRecordAddresses) SetGlueAddressChoice(v string) {
	o.GlueAddressChoice = &v
}

func (o MemberDnsIpv6GlueRecordAddresses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDnsIpv6GlueRecordAddresses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachEmptyRecursiveView) {
		toSerialize["attach_empty_recursive_view"] = o.AttachEmptyRecursiveView
	}
	if !IsNil(o.GlueRecordAddress) {
		toSerialize["glue_record_address"] = o.GlueRecordAddress
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.GlueAddressChoice) {
		toSerialize["glue_address_choice"] = o.GlueAddressChoice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberDnsIpv6GlueRecordAddresses) UnmarshalJSON(data []byte) (err error) {
	varMemberDnsIpv6GlueRecordAddresses := _MemberDnsIpv6GlueRecordAddresses{}

	err = json.Unmarshal(data, &varMemberDnsIpv6GlueRecordAddresses)

	if err != nil {
		return err
	}

	*o = MemberDnsIpv6GlueRecordAddresses(varMemberDnsIpv6GlueRecordAddresses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attach_empty_recursive_view")
		delete(additionalProperties, "glue_record_address")
		delete(additionalProperties, "view")
		delete(additionalProperties, "glue_address_choice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberDnsIpv6GlueRecordAddresses struct {
	value *MemberDnsIpv6GlueRecordAddresses
	isSet bool
}

func (v NullableMemberDnsIpv6GlueRecordAddresses) Get() *MemberDnsIpv6GlueRecordAddresses {
	return v.value
}

func (v *NullableMemberDnsIpv6GlueRecordAddresses) Set(val *MemberDnsIpv6GlueRecordAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDnsIpv6GlueRecordAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDnsIpv6GlueRecordAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDnsIpv6GlueRecordAddresses(val *MemberDnsIpv6GlueRecordAddresses) *NullableMemberDnsIpv6GlueRecordAddresses {
	return &NullableMemberDnsIpv6GlueRecordAddresses{value: val, isSet: true}
}

func (v NullableMemberDnsIpv6GlueRecordAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDnsIpv6GlueRecordAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
