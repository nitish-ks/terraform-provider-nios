/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDnsResolverSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDnsResolverSetting{}

// MemberDnsResolverSetting struct for MemberDnsResolverSetting
type MemberDnsResolverSetting struct {
	// The resolvers of a Grid member. The Grid member sends queries to the first name server address in the list. The second name server address is used if first one does not response.
	Resolvers []string `json:"resolvers,omitempty"`
	// The Search Domain Group, which is a group of domain names that the Infoblox device can add to partial queries that do not specify a domain name. Note that you can set this parameter only when prefer_resolver or alternate_resolver is set.
	SearchDomains        []string `json:"search_domains,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberDnsResolverSetting MemberDnsResolverSetting

// NewMemberDnsResolverSetting instantiates a new MemberDnsResolverSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDnsResolverSetting() *MemberDnsResolverSetting {
	this := MemberDnsResolverSetting{}
	return &this
}

// NewMemberDnsResolverSettingWithDefaults instantiates a new MemberDnsResolverSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDnsResolverSettingWithDefaults() *MemberDnsResolverSetting {
	this := MemberDnsResolverSetting{}
	return &this
}

// GetResolvers returns the Resolvers field value if set, zero value otherwise.
func (o *MemberDnsResolverSetting) GetResolvers() []string {
	if o == nil || IsNil(o.Resolvers) {
		var ret []string
		return ret
	}
	return o.Resolvers
}

// GetResolversOk returns a tuple with the Resolvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsResolverSetting) GetResolversOk() ([]string, bool) {
	if o == nil || IsNil(o.Resolvers) {
		return nil, false
	}
	return o.Resolvers, true
}

// HasResolvers returns a boolean if a field has been set.
func (o *MemberDnsResolverSetting) HasResolvers() bool {
	if o != nil && !IsNil(o.Resolvers) {
		return true
	}

	return false
}

// SetResolvers gets a reference to the given []string and assigns it to the Resolvers field.
func (o *MemberDnsResolverSetting) SetResolvers(v []string) {
	o.Resolvers = v
}

// GetSearchDomains returns the SearchDomains field value if set, zero value otherwise.
func (o *MemberDnsResolverSetting) GetSearchDomains() []string {
	if o == nil || IsNil(o.SearchDomains) {
		var ret []string
		return ret
	}
	return o.SearchDomains
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsResolverSetting) GetSearchDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchDomains) {
		return nil, false
	}
	return o.SearchDomains, true
}

// HasSearchDomains returns a boolean if a field has been set.
func (o *MemberDnsResolverSetting) HasSearchDomains() bool {
	if o != nil && !IsNil(o.SearchDomains) {
		return true
	}

	return false
}

// SetSearchDomains gets a reference to the given []string and assigns it to the SearchDomains field.
func (o *MemberDnsResolverSetting) SetSearchDomains(v []string) {
	o.SearchDomains = v
}

func (o MemberDnsResolverSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDnsResolverSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resolvers) {
		toSerialize["resolvers"] = o.Resolvers
	}
	if !IsNil(o.SearchDomains) {
		toSerialize["search_domains"] = o.SearchDomains
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberDnsResolverSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberDnsResolverSetting := _MemberDnsResolverSetting{}

	err = json.Unmarshal(data, &varMemberDnsResolverSetting)

	if err != nil {
		return err
	}

	*o = MemberDnsResolverSetting(varMemberDnsResolverSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resolvers")
		delete(additionalProperties, "search_domains")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberDnsResolverSetting struct {
	value *MemberDnsResolverSetting
	isSet bool
}

func (v NullableMemberDnsResolverSetting) Get() *MemberDnsResolverSetting {
	return v.value
}

func (v *NullableMemberDnsResolverSetting) Set(val *MemberDnsResolverSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDnsResolverSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDnsResolverSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDnsResolverSetting(val *MemberDnsResolverSetting) *NullableMemberDnsResolverSetting {
	return &NullableMemberDnsResolverSetting{value: val, isSet: true}
}

func (v NullableMemberDnsResolverSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDnsResolverSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
