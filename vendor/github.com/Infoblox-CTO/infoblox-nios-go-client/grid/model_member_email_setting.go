/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberEmailSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberEmailSetting{}

// MemberEmailSetting struct for MemberEmailSetting
type MemberEmailSetting struct {
	// Determines if email notification is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// The email address of a Grid Member for 'from' field in notification.
	FromAddress *string `json:"from_address,omitempty"`
	// The notification email address of a Grid member.
	Address *string `json:"address,omitempty"`
	// Determines if email relay is enabled or not.
	RelayEnabled *bool `json:"relay_enabled,omitempty"`
	// The relay name or IP address.
	Relay *string `json:"relay,omitempty"`
	// Password to validate from address
	Password *string `json:"password,omitempty"`
	// SMTP over TLS
	Smtps *bool `json:"smtps,omitempty"`
	// SMTP port number
	PortNumber *int64 `json:"port_number,omitempty"`
	// Enable or disable SMTP auth
	UseAuthentication    *bool `json:"use_authentication,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberEmailSetting MemberEmailSetting

// NewMemberEmailSetting instantiates a new MemberEmailSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberEmailSetting() *MemberEmailSetting {
	this := MemberEmailSetting{}
	return &this
}

// NewMemberEmailSettingWithDefaults instantiates a new MemberEmailSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberEmailSettingWithDefaults() *MemberEmailSetting {
	this := MemberEmailSetting{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MemberEmailSetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress) {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *MemberEmailSetting) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MemberEmailSetting) SetAddress(v string) {
	o.Address = &v
}

// GetRelayEnabled returns the RelayEnabled field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetRelayEnabled() bool {
	if o == nil || IsNil(o.RelayEnabled) {
		var ret bool
		return ret
	}
	return *o.RelayEnabled
}

// GetRelayEnabledOk returns a tuple with the RelayEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetRelayEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RelayEnabled) {
		return nil, false
	}
	return o.RelayEnabled, true
}

// HasRelayEnabled returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasRelayEnabled() bool {
	if o != nil && !IsNil(o.RelayEnabled) {
		return true
	}

	return false
}

// SetRelayEnabled gets a reference to the given bool and assigns it to the RelayEnabled field.
func (o *MemberEmailSetting) SetRelayEnabled(v bool) {
	o.RelayEnabled = &v
}

// GetRelay returns the Relay field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetRelay() string {
	if o == nil || IsNil(o.Relay) {
		var ret string
		return ret
	}
	return *o.Relay
}

// GetRelayOk returns a tuple with the Relay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetRelayOk() (*string, bool) {
	if o == nil || IsNil(o.Relay) {
		return nil, false
	}
	return o.Relay, true
}

// HasRelay returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasRelay() bool {
	if o != nil && !IsNil(o.Relay) {
		return true
	}

	return false
}

// SetRelay gets a reference to the given string and assigns it to the Relay field.
func (o *MemberEmailSetting) SetRelay(v string) {
	o.Relay = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MemberEmailSetting) SetPassword(v string) {
	o.Password = &v
}

// GetSmtps returns the Smtps field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetSmtps() bool {
	if o == nil || IsNil(o.Smtps) {
		var ret bool
		return ret
	}
	return *o.Smtps
}

// GetSmtpsOk returns a tuple with the Smtps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetSmtpsOk() (*bool, bool) {
	if o == nil || IsNil(o.Smtps) {
		return nil, false
	}
	return o.Smtps, true
}

// HasSmtps returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasSmtps() bool {
	if o != nil && !IsNil(o.Smtps) {
		return true
	}

	return false
}

// SetSmtps gets a reference to the given bool and assigns it to the Smtps field.
func (o *MemberEmailSetting) SetSmtps(v bool) {
	o.Smtps = &v
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetPortNumber() int64 {
	if o == nil || IsNil(o.PortNumber) {
		var ret int64
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetPortNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given int64 and assigns it to the PortNumber field.
func (o *MemberEmailSetting) SetPortNumber(v int64) {
	o.PortNumber = &v
}

// GetUseAuthentication returns the UseAuthentication field value if set, zero value otherwise.
func (o *MemberEmailSetting) GetUseAuthentication() bool {
	if o == nil || IsNil(o.UseAuthentication) {
		var ret bool
		return ret
	}
	return *o.UseAuthentication
}

// GetUseAuthenticationOk returns a tuple with the UseAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberEmailSetting) GetUseAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAuthentication) {
		return nil, false
	}
	return o.UseAuthentication, true
}

// HasUseAuthentication returns a boolean if a field has been set.
func (o *MemberEmailSetting) HasUseAuthentication() bool {
	if o != nil && !IsNil(o.UseAuthentication) {
		return true
	}

	return false
}

// SetUseAuthentication gets a reference to the given bool and assigns it to the UseAuthentication field.
func (o *MemberEmailSetting) SetUseAuthentication(v bool) {
	o.UseAuthentication = &v
}

func (o MemberEmailSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberEmailSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FromAddress) {
		toSerialize["from_address"] = o.FromAddress
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.RelayEnabled) {
		toSerialize["relay_enabled"] = o.RelayEnabled
	}
	if !IsNil(o.Relay) {
		toSerialize["relay"] = o.Relay
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Smtps) {
		toSerialize["smtps"] = o.Smtps
	}
	if !IsNil(o.PortNumber) {
		toSerialize["port_number"] = o.PortNumber
	}
	if !IsNil(o.UseAuthentication) {
		toSerialize["use_authentication"] = o.UseAuthentication
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberEmailSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberEmailSetting := _MemberEmailSetting{}

	err = json.Unmarshal(data, &varMemberEmailSetting)

	if err != nil {
		return err
	}

	*o = MemberEmailSetting(varMemberEmailSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "from_address")
		delete(additionalProperties, "address")
		delete(additionalProperties, "relay_enabled")
		delete(additionalProperties, "relay")
		delete(additionalProperties, "password")
		delete(additionalProperties, "smtps")
		delete(additionalProperties, "port_number")
		delete(additionalProperties, "use_authentication")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberEmailSetting struct {
	value *MemberEmailSetting
	isSet bool
}

func (v NullableMemberEmailSetting) Get() *MemberEmailSetting {
	return v.value
}

func (v *NullableMemberEmailSetting) Set(val *MemberEmailSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberEmailSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberEmailSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberEmailSetting(val *MemberEmailSetting) *NullableMemberEmailSetting {
	return &NullableMemberEmailSetting{value: val, isSet: true}
}

func (v NullableMemberEmailSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberEmailSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
