/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberLan2PortSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberLan2PortSetting{}

// MemberLan2PortSetting struct for MemberLan2PortSetting
type MemberLan2PortSetting struct {
	// If the 'enabled' field is set to True, this defines the virtual router ID for the LAN2 port.
	VirtualRouterId *int64 `json:"virtual_router_id,omitempty"`
	// If this field is set to True, then it has its own IP settings. Otherwise, port redundancy mechanism is used, in which the LAN1 and LAN2 ports share the same IP settings for failover purposes.
	Enabled          *bool                                  `json:"enabled,omitempty"`
	NetworkSetting   *Memberlan2portsettingNetworkSetting   `json:"network_setting,omitempty"`
	V6NetworkSetting *Memberlan2portsettingV6NetworkSetting `json:"v6_network_setting,omitempty"`
	// Determines if NIC failover is enabled or not.
	NicFailoverEnabled *bool `json:"nic_failover_enabled,omitempty"`
	// Prefer LAN1 when available.
	NicFailoverEnablePrimary *bool `json:"nic_failover_enable_primary,omitempty"`
	// Default route failover for LAN1 and LAN2.
	DefaultRouteFailoverEnabled *bool `json:"default_route_failover_enabled,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _MemberLan2PortSetting MemberLan2PortSetting

// NewMemberLan2PortSetting instantiates a new MemberLan2PortSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberLan2PortSetting() *MemberLan2PortSetting {
	this := MemberLan2PortSetting{}
	return &this
}

// NewMemberLan2PortSettingWithDefaults instantiates a new MemberLan2PortSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberLan2PortSettingWithDefaults() *MemberLan2PortSetting {
	this := MemberLan2PortSetting{}
	return &this
}

// GetVirtualRouterId returns the VirtualRouterId field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetVirtualRouterId() int64 {
	if o == nil || IsNil(o.VirtualRouterId) {
		var ret int64
		return ret
	}
	return *o.VirtualRouterId
}

// GetVirtualRouterIdOk returns a tuple with the VirtualRouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetVirtualRouterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VirtualRouterId) {
		return nil, false
	}
	return o.VirtualRouterId, true
}

// HasVirtualRouterId returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasVirtualRouterId() bool {
	if o != nil && !IsNil(o.VirtualRouterId) {
		return true
	}

	return false
}

// SetVirtualRouterId gets a reference to the given int64 and assigns it to the VirtualRouterId field.
func (o *MemberLan2PortSetting) SetVirtualRouterId(v int64) {
	o.VirtualRouterId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MemberLan2PortSetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNetworkSetting returns the NetworkSetting field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetNetworkSetting() Memberlan2portsettingNetworkSetting {
	if o == nil || IsNil(o.NetworkSetting) {
		var ret Memberlan2portsettingNetworkSetting
		return ret
	}
	return *o.NetworkSetting
}

// GetNetworkSettingOk returns a tuple with the NetworkSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetNetworkSettingOk() (*Memberlan2portsettingNetworkSetting, bool) {
	if o == nil || IsNil(o.NetworkSetting) {
		return nil, false
	}
	return o.NetworkSetting, true
}

// HasNetworkSetting returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasNetworkSetting() bool {
	if o != nil && !IsNil(o.NetworkSetting) {
		return true
	}

	return false
}

// SetNetworkSetting gets a reference to the given Memberlan2portsettingNetworkSetting and assigns it to the NetworkSetting field.
func (o *MemberLan2PortSetting) SetNetworkSetting(v Memberlan2portsettingNetworkSetting) {
	o.NetworkSetting = &v
}

// GetV6NetworkSetting returns the V6NetworkSetting field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetV6NetworkSetting() Memberlan2portsettingV6NetworkSetting {
	if o == nil || IsNil(o.V6NetworkSetting) {
		var ret Memberlan2portsettingV6NetworkSetting
		return ret
	}
	return *o.V6NetworkSetting
}

// GetV6NetworkSettingOk returns a tuple with the V6NetworkSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetV6NetworkSettingOk() (*Memberlan2portsettingV6NetworkSetting, bool) {
	if o == nil || IsNil(o.V6NetworkSetting) {
		return nil, false
	}
	return o.V6NetworkSetting, true
}

// HasV6NetworkSetting returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasV6NetworkSetting() bool {
	if o != nil && !IsNil(o.V6NetworkSetting) {
		return true
	}

	return false
}

// SetV6NetworkSetting gets a reference to the given Memberlan2portsettingV6NetworkSetting and assigns it to the V6NetworkSetting field.
func (o *MemberLan2PortSetting) SetV6NetworkSetting(v Memberlan2portsettingV6NetworkSetting) {
	o.V6NetworkSetting = &v
}

// GetNicFailoverEnabled returns the NicFailoverEnabled field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetNicFailoverEnabled() bool {
	if o == nil || IsNil(o.NicFailoverEnabled) {
		var ret bool
		return ret
	}
	return *o.NicFailoverEnabled
}

// GetNicFailoverEnabledOk returns a tuple with the NicFailoverEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetNicFailoverEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NicFailoverEnabled) {
		return nil, false
	}
	return o.NicFailoverEnabled, true
}

// HasNicFailoverEnabled returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasNicFailoverEnabled() bool {
	if o != nil && !IsNil(o.NicFailoverEnabled) {
		return true
	}

	return false
}

// SetNicFailoverEnabled gets a reference to the given bool and assigns it to the NicFailoverEnabled field.
func (o *MemberLan2PortSetting) SetNicFailoverEnabled(v bool) {
	o.NicFailoverEnabled = &v
}

// GetNicFailoverEnablePrimary returns the NicFailoverEnablePrimary field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetNicFailoverEnablePrimary() bool {
	if o == nil || IsNil(o.NicFailoverEnablePrimary) {
		var ret bool
		return ret
	}
	return *o.NicFailoverEnablePrimary
}

// GetNicFailoverEnablePrimaryOk returns a tuple with the NicFailoverEnablePrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetNicFailoverEnablePrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.NicFailoverEnablePrimary) {
		return nil, false
	}
	return o.NicFailoverEnablePrimary, true
}

// HasNicFailoverEnablePrimary returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasNicFailoverEnablePrimary() bool {
	if o != nil && !IsNil(o.NicFailoverEnablePrimary) {
		return true
	}

	return false
}

// SetNicFailoverEnablePrimary gets a reference to the given bool and assigns it to the NicFailoverEnablePrimary field.
func (o *MemberLan2PortSetting) SetNicFailoverEnablePrimary(v bool) {
	o.NicFailoverEnablePrimary = &v
}

// GetDefaultRouteFailoverEnabled returns the DefaultRouteFailoverEnabled field value if set, zero value otherwise.
func (o *MemberLan2PortSetting) GetDefaultRouteFailoverEnabled() bool {
	if o == nil || IsNil(o.DefaultRouteFailoverEnabled) {
		var ret bool
		return ret
	}
	return *o.DefaultRouteFailoverEnabled
}

// GetDefaultRouteFailoverEnabledOk returns a tuple with the DefaultRouteFailoverEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLan2PortSetting) GetDefaultRouteFailoverEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultRouteFailoverEnabled) {
		return nil, false
	}
	return o.DefaultRouteFailoverEnabled, true
}

// HasDefaultRouteFailoverEnabled returns a boolean if a field has been set.
func (o *MemberLan2PortSetting) HasDefaultRouteFailoverEnabled() bool {
	if o != nil && !IsNil(o.DefaultRouteFailoverEnabled) {
		return true
	}

	return false
}

// SetDefaultRouteFailoverEnabled gets a reference to the given bool and assigns it to the DefaultRouteFailoverEnabled field.
func (o *MemberLan2PortSetting) SetDefaultRouteFailoverEnabled(v bool) {
	o.DefaultRouteFailoverEnabled = &v
}

func (o MemberLan2PortSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberLan2PortSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VirtualRouterId) {
		toSerialize["virtual_router_id"] = o.VirtualRouterId
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.NetworkSetting) {
		toSerialize["network_setting"] = o.NetworkSetting
	}
	if !IsNil(o.V6NetworkSetting) {
		toSerialize["v6_network_setting"] = o.V6NetworkSetting
	}
	if !IsNil(o.NicFailoverEnabled) {
		toSerialize["nic_failover_enabled"] = o.NicFailoverEnabled
	}
	if !IsNil(o.NicFailoverEnablePrimary) {
		toSerialize["nic_failover_enable_primary"] = o.NicFailoverEnablePrimary
	}
	if !IsNil(o.DefaultRouteFailoverEnabled) {
		toSerialize["default_route_failover_enabled"] = o.DefaultRouteFailoverEnabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberLan2PortSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberLan2PortSetting := _MemberLan2PortSetting{}

	err = json.Unmarshal(data, &varMemberLan2PortSetting)

	if err != nil {
		return err
	}

	*o = MemberLan2PortSetting(varMemberLan2PortSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "virtual_router_id")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "network_setting")
		delete(additionalProperties, "v6_network_setting")
		delete(additionalProperties, "nic_failover_enabled")
		delete(additionalProperties, "nic_failover_enable_primary")
		delete(additionalProperties, "default_route_failover_enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberLan2PortSetting struct {
	value *MemberLan2PortSetting
	isSet bool
}

func (v NullableMemberLan2PortSetting) Get() *MemberLan2PortSetting {
	return v.value
}

func (v *NullableMemberLan2PortSetting) Set(val *MemberLan2PortSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberLan2PortSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberLan2PortSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberLan2PortSetting(val *MemberLan2PortSetting) *NullableMemberLan2PortSetting {
	return &NullableMemberLan2PortSetting{value: val, isSet: true}
}

func (v NullableMemberLan2PortSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberLan2PortSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
