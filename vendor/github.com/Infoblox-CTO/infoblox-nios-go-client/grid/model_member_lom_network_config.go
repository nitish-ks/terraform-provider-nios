/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberLomNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberLomNetworkConfig{}

// MemberLomNetworkConfig struct for MemberLomNetworkConfig
type MemberLomNetworkConfig struct {
	// The IPv4 Address of the Grid member.
	Address *string `json:"address,omitempty"`
	// The default gateway for the Grid member.
	Gateway *string `json:"gateway,omitempty"`
	// The subnet mask for the Grid member.
	SubnetMask *string `json:"subnet_mask,omitempty"`
	// Determines if the physical node supports LOM or not.
	IsLomCapable         *bool `json:"is_lom_capable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberLomNetworkConfig MemberLomNetworkConfig

// NewMemberLomNetworkConfig instantiates a new MemberLomNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberLomNetworkConfig() *MemberLomNetworkConfig {
	this := MemberLomNetworkConfig{}
	return &this
}

// NewMemberLomNetworkConfigWithDefaults instantiates a new MemberLomNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberLomNetworkConfigWithDefaults() *MemberLomNetworkConfig {
	this := MemberLomNetworkConfig{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MemberLomNetworkConfig) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomNetworkConfig) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MemberLomNetworkConfig) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MemberLomNetworkConfig) SetAddress(v string) {
	o.Address = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *MemberLomNetworkConfig) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomNetworkConfig) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *MemberLomNetworkConfig) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *MemberLomNetworkConfig) SetGateway(v string) {
	o.Gateway = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *MemberLomNetworkConfig) GetSubnetMask() string {
	if o == nil || IsNil(o.SubnetMask) {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomNetworkConfig) GetSubnetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetMask) {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *MemberLomNetworkConfig) HasSubnetMask() bool {
	if o != nil && !IsNil(o.SubnetMask) {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *MemberLomNetworkConfig) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetIsLomCapable returns the IsLomCapable field value if set, zero value otherwise.
func (o *MemberLomNetworkConfig) GetIsLomCapable() bool {
	if o == nil || IsNil(o.IsLomCapable) {
		var ret bool
		return ret
	}
	return *o.IsLomCapable
}

// GetIsLomCapableOk returns a tuple with the IsLomCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomNetworkConfig) GetIsLomCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLomCapable) {
		return nil, false
	}
	return o.IsLomCapable, true
}

// HasIsLomCapable returns a boolean if a field has been set.
func (o *MemberLomNetworkConfig) HasIsLomCapable() bool {
	if o != nil && !IsNil(o.IsLomCapable) {
		return true
	}

	return false
}

// SetIsLomCapable gets a reference to the given bool and assigns it to the IsLomCapable field.
func (o *MemberLomNetworkConfig) SetIsLomCapable(v bool) {
	o.IsLomCapable = &v
}

func (o MemberLomNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberLomNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.SubnetMask) {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if !IsNil(o.IsLomCapable) {
		toSerialize["is_lom_capable"] = o.IsLomCapable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberLomNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	varMemberLomNetworkConfig := _MemberLomNetworkConfig{}

	err = json.Unmarshal(data, &varMemberLomNetworkConfig)

	if err != nil {
		return err
	}

	*o = MemberLomNetworkConfig(varMemberLomNetworkConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "subnet_mask")
		delete(additionalProperties, "is_lom_capable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberLomNetworkConfig struct {
	value *MemberLomNetworkConfig
	isSet bool
}

func (v NullableMemberLomNetworkConfig) Get() *MemberLomNetworkConfig {
	return v.value
}

func (v *NullableMemberLomNetworkConfig) Set(val *MemberLomNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberLomNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberLomNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberLomNetworkConfig(val *MemberLomNetworkConfig) *NullableMemberLomNetworkConfig {
	return &NullableMemberLomNetworkConfig{value: val, isSet: true}
}

func (v NullableMemberLomNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberLomNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
