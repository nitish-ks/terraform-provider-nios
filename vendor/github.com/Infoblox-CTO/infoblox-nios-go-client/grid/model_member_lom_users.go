/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberLomUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberLomUsers{}

// MemberLomUsers struct for MemberLomUsers
type MemberLomUsers struct {
	// The LOM user name.
	Name *string `json:"name,omitempty"`
	// The LOM user password.
	Password *string `json:"password,omitempty"`
	// The LOM user role which specifies the list of actions that are allowed for the user.
	Role *string `json:"role,omitempty"`
	// Determines whether the LOM user is disabled.
	Disable *bool `json:"disable,omitempty"`
	// The descriptive comment for the LOM user.
	Comment              *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberLomUsers MemberLomUsers

// NewMemberLomUsers instantiates a new MemberLomUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberLomUsers() *MemberLomUsers {
	this := MemberLomUsers{}
	return &this
}

// NewMemberLomUsersWithDefaults instantiates a new MemberLomUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberLomUsersWithDefaults() *MemberLomUsers {
	this := MemberLomUsers{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemberLomUsers) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomUsers) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemberLomUsers) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemberLomUsers) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MemberLomUsers) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomUsers) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MemberLomUsers) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MemberLomUsers) SetPassword(v string) {
	o.Password = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *MemberLomUsers) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomUsers) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *MemberLomUsers) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *MemberLomUsers) SetRole(v string) {
	o.Role = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *MemberLomUsers) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomUsers) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *MemberLomUsers) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *MemberLomUsers) SetDisable(v bool) {
	o.Disable = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MemberLomUsers) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberLomUsers) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MemberLomUsers) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MemberLomUsers) SetComment(v string) {
	o.Comment = &v
}

func (o MemberLomUsers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberLomUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberLomUsers) UnmarshalJSON(data []byte) (err error) {
	varMemberLomUsers := _MemberLomUsers{}

	err = json.Unmarshal(data, &varMemberLomUsers)

	if err != nil {
		return err
	}

	*o = MemberLomUsers(varMemberLomUsers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "password")
		delete(additionalProperties, "role")
		delete(additionalProperties, "disable")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberLomUsers struct {
	value *MemberLomUsers
	isSet bool
}

func (v NullableMemberLomUsers) Get() *MemberLomUsers {
	return v.value
}

func (v *NullableMemberLomUsers) Set(val *MemberLomUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberLomUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberLomUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberLomUsers(val *MemberLomUsers) *NullableMemberLomUsers {
	return &NullableMemberLomUsers{value: val, isSet: true}
}

func (v NullableMemberLomUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberLomUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
