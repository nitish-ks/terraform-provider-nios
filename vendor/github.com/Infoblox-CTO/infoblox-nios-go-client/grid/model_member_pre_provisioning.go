/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberPreProvisioning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberPreProvisioning{}

// MemberPreProvisioning struct for MemberPreProvisioning
type MemberPreProvisioning struct {
	HardwareInfo *MemberpreprovisioningHardwareInfo `json:"hardware_info,omitempty"`
	// An array of license types the pre-provisioned member should have in order to join the Grid, or the licenses that must be allocated to the member when it joins the Grid using the token-based authentication.
	Licenses             []string `json:"licenses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberPreProvisioning MemberPreProvisioning

// NewMemberPreProvisioning instantiates a new MemberPreProvisioning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberPreProvisioning() *MemberPreProvisioning {
	this := MemberPreProvisioning{}
	return &this
}

// NewMemberPreProvisioningWithDefaults instantiates a new MemberPreProvisioning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberPreProvisioningWithDefaults() *MemberPreProvisioning {
	this := MemberPreProvisioning{}
	return &this
}

// GetHardwareInfo returns the HardwareInfo field value if set, zero value otherwise.
func (o *MemberPreProvisioning) GetHardwareInfo() MemberpreprovisioningHardwareInfo {
	if o == nil || IsNil(o.HardwareInfo) {
		var ret MemberpreprovisioningHardwareInfo
		return ret
	}
	return *o.HardwareInfo
}

// GetHardwareInfoOk returns a tuple with the HardwareInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPreProvisioning) GetHardwareInfoOk() (*MemberpreprovisioningHardwareInfo, bool) {
	if o == nil || IsNil(o.HardwareInfo) {
		return nil, false
	}
	return o.HardwareInfo, true
}

// HasHardwareInfo returns a boolean if a field has been set.
func (o *MemberPreProvisioning) HasHardwareInfo() bool {
	if o != nil && !IsNil(o.HardwareInfo) {
		return true
	}

	return false
}

// SetHardwareInfo gets a reference to the given MemberpreprovisioningHardwareInfo and assigns it to the HardwareInfo field.
func (o *MemberPreProvisioning) SetHardwareInfo(v MemberpreprovisioningHardwareInfo) {
	o.HardwareInfo = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *MemberPreProvisioning) GetLicenses() []string {
	if o == nil || IsNil(o.Licenses) {
		var ret []string
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPreProvisioning) GetLicensesOk() ([]string, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *MemberPreProvisioning) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []string and assigns it to the Licenses field.
func (o *MemberPreProvisioning) SetLicenses(v []string) {
	o.Licenses = v
}

func (o MemberPreProvisioning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberPreProvisioning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HardwareInfo) {
		toSerialize["hardware_info"] = o.HardwareInfo
	}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberPreProvisioning) UnmarshalJSON(data []byte) (err error) {
	varMemberPreProvisioning := _MemberPreProvisioning{}

	err = json.Unmarshal(data, &varMemberPreProvisioning)

	if err != nil {
		return err
	}

	*o = MemberPreProvisioning(varMemberPreProvisioning)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hardware_info")
		delete(additionalProperties, "licenses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberPreProvisioning struct {
	value *MemberPreProvisioning
	isSet bool
}

func (v NullableMemberPreProvisioning) Get() *MemberPreProvisioning {
	return v.value
}

func (v *NullableMemberPreProvisioning) Set(val *MemberPreProvisioning) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberPreProvisioning) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberPreProvisioning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberPreProvisioning(val *MemberPreProvisioning) *NullableMemberPreProvisioning {
	return &NullableMemberPreProvisioning{value: val, isSet: true}
}

func (v NullableMemberPreProvisioning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberPreProvisioning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
