/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberThresholdTraps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberThresholdTraps{}

// MemberThresholdTraps struct for MemberThresholdTraps
type MemberThresholdTraps struct {
	// Determines the type of a given trap.
	TrapType *string `json:"trap_type,omitempty"`
	// Determines the threshold value to reset the trap.
	TrapReset *int64 `json:"trap_reset,omitempty"`
	// Determines the threshold value to trigger the trap.
	TrapTrigger          *int64 `json:"trap_trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberThresholdTraps MemberThresholdTraps

// NewMemberThresholdTraps instantiates a new MemberThresholdTraps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberThresholdTraps() *MemberThresholdTraps {
	this := MemberThresholdTraps{}
	return &this
}

// NewMemberThresholdTrapsWithDefaults instantiates a new MemberThresholdTraps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberThresholdTrapsWithDefaults() *MemberThresholdTraps {
	this := MemberThresholdTraps{}
	return &this
}

// GetTrapType returns the TrapType field value if set, zero value otherwise.
func (o *MemberThresholdTraps) GetTrapType() string {
	if o == nil || IsNil(o.TrapType) {
		var ret string
		return ret
	}
	return *o.TrapType
}

// GetTrapTypeOk returns a tuple with the TrapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberThresholdTraps) GetTrapTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrapType) {
		return nil, false
	}
	return o.TrapType, true
}

// HasTrapType returns a boolean if a field has been set.
func (o *MemberThresholdTraps) HasTrapType() bool {
	if o != nil && !IsNil(o.TrapType) {
		return true
	}

	return false
}

// SetTrapType gets a reference to the given string and assigns it to the TrapType field.
func (o *MemberThresholdTraps) SetTrapType(v string) {
	o.TrapType = &v
}

// GetTrapReset returns the TrapReset field value if set, zero value otherwise.
func (o *MemberThresholdTraps) GetTrapReset() int64 {
	if o == nil || IsNil(o.TrapReset) {
		var ret int64
		return ret
	}
	return *o.TrapReset
}

// GetTrapResetOk returns a tuple with the TrapReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberThresholdTraps) GetTrapResetOk() (*int64, bool) {
	if o == nil || IsNil(o.TrapReset) {
		return nil, false
	}
	return o.TrapReset, true
}

// HasTrapReset returns a boolean if a field has been set.
func (o *MemberThresholdTraps) HasTrapReset() bool {
	if o != nil && !IsNil(o.TrapReset) {
		return true
	}

	return false
}

// SetTrapReset gets a reference to the given int64 and assigns it to the TrapReset field.
func (o *MemberThresholdTraps) SetTrapReset(v int64) {
	o.TrapReset = &v
}

// GetTrapTrigger returns the TrapTrigger field value if set, zero value otherwise.
func (o *MemberThresholdTraps) GetTrapTrigger() int64 {
	if o == nil || IsNil(o.TrapTrigger) {
		var ret int64
		return ret
	}
	return *o.TrapTrigger
}

// GetTrapTriggerOk returns a tuple with the TrapTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberThresholdTraps) GetTrapTriggerOk() (*int64, bool) {
	if o == nil || IsNil(o.TrapTrigger) {
		return nil, false
	}
	return o.TrapTrigger, true
}

// HasTrapTrigger returns a boolean if a field has been set.
func (o *MemberThresholdTraps) HasTrapTrigger() bool {
	if o != nil && !IsNil(o.TrapTrigger) {
		return true
	}

	return false
}

// SetTrapTrigger gets a reference to the given int64 and assigns it to the TrapTrigger field.
func (o *MemberThresholdTraps) SetTrapTrigger(v int64) {
	o.TrapTrigger = &v
}

func (o MemberThresholdTraps) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberThresholdTraps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrapType) {
		toSerialize["trap_type"] = o.TrapType
	}
	if !IsNil(o.TrapReset) {
		toSerialize["trap_reset"] = o.TrapReset
	}
	if !IsNil(o.TrapTrigger) {
		toSerialize["trap_trigger"] = o.TrapTrigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberThresholdTraps) UnmarshalJSON(data []byte) (err error) {
	varMemberThresholdTraps := _MemberThresholdTraps{}

	err = json.Unmarshal(data, &varMemberThresholdTraps)

	if err != nil {
		return err
	}

	*o = MemberThresholdTraps(varMemberThresholdTraps)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "trap_type")
		delete(additionalProperties, "trap_reset")
		delete(additionalProperties, "trap_trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberThresholdTraps struct {
	value *MemberThresholdTraps
	isSet bool
}

func (v NullableMemberThresholdTraps) Get() *MemberThresholdTraps {
	return v.value
}

func (v *NullableMemberThresholdTraps) Set(val *MemberThresholdTraps) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberThresholdTraps) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberThresholdTraps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberThresholdTraps(val *MemberThresholdTraps) *NullableMemberThresholdTraps {
	return &NullableMemberThresholdTraps{value: val, isSet: true}
}

func (v NullableMemberThresholdTraps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberThresholdTraps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
