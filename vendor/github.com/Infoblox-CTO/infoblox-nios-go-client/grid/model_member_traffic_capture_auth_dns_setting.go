/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberTrafficCaptureAuthDnsSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberTrafficCaptureAuthDnsSetting{}

// MemberTrafficCaptureAuthDnsSetting struct for MemberTrafficCaptureAuthDnsSetting
type MemberTrafficCaptureAuthDnsSetting struct {
	// Enabling trigger automated traffic capture based on authoritative DNS latency.
	AuthDnsLatencyTriggerEnable *bool `json:"auth_dns_latency_trigger_enable,omitempty"`
	// Authoritative DNS latency below which traffic capture will be triggered.
	AuthDnsLatencyThreshold *int64 `json:"auth_dns_latency_threshold,omitempty"`
	// Authoritative DNS latency above which traffic capture will stopped.
	AuthDnsLatencyReset *int64 `json:"auth_dns_latency_reset,omitempty"`
	// The local IP DNS service is listen on (for authoritative DNS latency trigger).
	AuthDnsLatencyListenOnSource *string `json:"auth_dns_latency_listen_on_source,omitempty"`
	// The DNS listen-on IP address used if auth_dns_latency_on_source is IP.
	AuthDnsLatencyListenOnIp *string `json:"auth_dns_latency_listen_on_ip,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _MemberTrafficCaptureAuthDnsSetting MemberTrafficCaptureAuthDnsSetting

// NewMemberTrafficCaptureAuthDnsSetting instantiates a new MemberTrafficCaptureAuthDnsSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberTrafficCaptureAuthDnsSetting() *MemberTrafficCaptureAuthDnsSetting {
	this := MemberTrafficCaptureAuthDnsSetting{}
	return &this
}

// NewMemberTrafficCaptureAuthDnsSettingWithDefaults instantiates a new MemberTrafficCaptureAuthDnsSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberTrafficCaptureAuthDnsSettingWithDefaults() *MemberTrafficCaptureAuthDnsSetting {
	this := MemberTrafficCaptureAuthDnsSetting{}
	return &this
}

// GetAuthDnsLatencyTriggerEnable returns the AuthDnsLatencyTriggerEnable field value if set, zero value otherwise.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyTriggerEnable() bool {
	if o == nil || IsNil(o.AuthDnsLatencyTriggerEnable) {
		var ret bool
		return ret
	}
	return *o.AuthDnsLatencyTriggerEnable
}

// GetAuthDnsLatencyTriggerEnableOk returns a tuple with the AuthDnsLatencyTriggerEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyTriggerEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthDnsLatencyTriggerEnable) {
		return nil, false
	}
	return o.AuthDnsLatencyTriggerEnable, true
}

// HasAuthDnsLatencyTriggerEnable returns a boolean if a field has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) HasAuthDnsLatencyTriggerEnable() bool {
	if o != nil && !IsNil(o.AuthDnsLatencyTriggerEnable) {
		return true
	}

	return false
}

// SetAuthDnsLatencyTriggerEnable gets a reference to the given bool and assigns it to the AuthDnsLatencyTriggerEnable field.
func (o *MemberTrafficCaptureAuthDnsSetting) SetAuthDnsLatencyTriggerEnable(v bool) {
	o.AuthDnsLatencyTriggerEnable = &v
}

// GetAuthDnsLatencyThreshold returns the AuthDnsLatencyThreshold field value if set, zero value otherwise.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyThreshold() int64 {
	if o == nil || IsNil(o.AuthDnsLatencyThreshold) {
		var ret int64
		return ret
	}
	return *o.AuthDnsLatencyThreshold
}

// GetAuthDnsLatencyThresholdOk returns a tuple with the AuthDnsLatencyThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthDnsLatencyThreshold) {
		return nil, false
	}
	return o.AuthDnsLatencyThreshold, true
}

// HasAuthDnsLatencyThreshold returns a boolean if a field has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) HasAuthDnsLatencyThreshold() bool {
	if o != nil && !IsNil(o.AuthDnsLatencyThreshold) {
		return true
	}

	return false
}

// SetAuthDnsLatencyThreshold gets a reference to the given int64 and assigns it to the AuthDnsLatencyThreshold field.
func (o *MemberTrafficCaptureAuthDnsSetting) SetAuthDnsLatencyThreshold(v int64) {
	o.AuthDnsLatencyThreshold = &v
}

// GetAuthDnsLatencyReset returns the AuthDnsLatencyReset field value if set, zero value otherwise.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyReset() int64 {
	if o == nil || IsNil(o.AuthDnsLatencyReset) {
		var ret int64
		return ret
	}
	return *o.AuthDnsLatencyReset
}

// GetAuthDnsLatencyResetOk returns a tuple with the AuthDnsLatencyReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyResetOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthDnsLatencyReset) {
		return nil, false
	}
	return o.AuthDnsLatencyReset, true
}

// HasAuthDnsLatencyReset returns a boolean if a field has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) HasAuthDnsLatencyReset() bool {
	if o != nil && !IsNil(o.AuthDnsLatencyReset) {
		return true
	}

	return false
}

// SetAuthDnsLatencyReset gets a reference to the given int64 and assigns it to the AuthDnsLatencyReset field.
func (o *MemberTrafficCaptureAuthDnsSetting) SetAuthDnsLatencyReset(v int64) {
	o.AuthDnsLatencyReset = &v
}

// GetAuthDnsLatencyListenOnSource returns the AuthDnsLatencyListenOnSource field value if set, zero value otherwise.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyListenOnSource() string {
	if o == nil || IsNil(o.AuthDnsLatencyListenOnSource) {
		var ret string
		return ret
	}
	return *o.AuthDnsLatencyListenOnSource
}

// GetAuthDnsLatencyListenOnSourceOk returns a tuple with the AuthDnsLatencyListenOnSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyListenOnSourceOk() (*string, bool) {
	if o == nil || IsNil(o.AuthDnsLatencyListenOnSource) {
		return nil, false
	}
	return o.AuthDnsLatencyListenOnSource, true
}

// HasAuthDnsLatencyListenOnSource returns a boolean if a field has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) HasAuthDnsLatencyListenOnSource() bool {
	if o != nil && !IsNil(o.AuthDnsLatencyListenOnSource) {
		return true
	}

	return false
}

// SetAuthDnsLatencyListenOnSource gets a reference to the given string and assigns it to the AuthDnsLatencyListenOnSource field.
func (o *MemberTrafficCaptureAuthDnsSetting) SetAuthDnsLatencyListenOnSource(v string) {
	o.AuthDnsLatencyListenOnSource = &v
}

// GetAuthDnsLatencyListenOnIp returns the AuthDnsLatencyListenOnIp field value if set, zero value otherwise.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyListenOnIp() string {
	if o == nil || IsNil(o.AuthDnsLatencyListenOnIp) {
		var ret string
		return ret
	}
	return *o.AuthDnsLatencyListenOnIp
}

// GetAuthDnsLatencyListenOnIpOk returns a tuple with the AuthDnsLatencyListenOnIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) GetAuthDnsLatencyListenOnIpOk() (*string, bool) {
	if o == nil || IsNil(o.AuthDnsLatencyListenOnIp) {
		return nil, false
	}
	return o.AuthDnsLatencyListenOnIp, true
}

// HasAuthDnsLatencyListenOnIp returns a boolean if a field has been set.
func (o *MemberTrafficCaptureAuthDnsSetting) HasAuthDnsLatencyListenOnIp() bool {
	if o != nil && !IsNil(o.AuthDnsLatencyListenOnIp) {
		return true
	}

	return false
}

// SetAuthDnsLatencyListenOnIp gets a reference to the given string and assigns it to the AuthDnsLatencyListenOnIp field.
func (o *MemberTrafficCaptureAuthDnsSetting) SetAuthDnsLatencyListenOnIp(v string) {
	o.AuthDnsLatencyListenOnIp = &v
}

func (o MemberTrafficCaptureAuthDnsSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberTrafficCaptureAuthDnsSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthDnsLatencyTriggerEnable) {
		toSerialize["auth_dns_latency_trigger_enable"] = o.AuthDnsLatencyTriggerEnable
	}
	if !IsNil(o.AuthDnsLatencyThreshold) {
		toSerialize["auth_dns_latency_threshold"] = o.AuthDnsLatencyThreshold
	}
	if !IsNil(o.AuthDnsLatencyReset) {
		toSerialize["auth_dns_latency_reset"] = o.AuthDnsLatencyReset
	}
	if !IsNil(o.AuthDnsLatencyListenOnSource) {
		toSerialize["auth_dns_latency_listen_on_source"] = o.AuthDnsLatencyListenOnSource
	}
	if !IsNil(o.AuthDnsLatencyListenOnIp) {
		toSerialize["auth_dns_latency_listen_on_ip"] = o.AuthDnsLatencyListenOnIp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberTrafficCaptureAuthDnsSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberTrafficCaptureAuthDnsSetting := _MemberTrafficCaptureAuthDnsSetting{}

	err = json.Unmarshal(data, &varMemberTrafficCaptureAuthDnsSetting)

	if err != nil {
		return err
	}

	*o = MemberTrafficCaptureAuthDnsSetting(varMemberTrafficCaptureAuthDnsSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth_dns_latency_trigger_enable")
		delete(additionalProperties, "auth_dns_latency_threshold")
		delete(additionalProperties, "auth_dns_latency_reset")
		delete(additionalProperties, "auth_dns_latency_listen_on_source")
		delete(additionalProperties, "auth_dns_latency_listen_on_ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberTrafficCaptureAuthDnsSetting struct {
	value *MemberTrafficCaptureAuthDnsSetting
	isSet bool
}

func (v NullableMemberTrafficCaptureAuthDnsSetting) Get() *MemberTrafficCaptureAuthDnsSetting {
	return v.value
}

func (v *NullableMemberTrafficCaptureAuthDnsSetting) Set(val *MemberTrafficCaptureAuthDnsSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberTrafficCaptureAuthDnsSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberTrafficCaptureAuthDnsSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberTrafficCaptureAuthDnsSetting(val *MemberTrafficCaptureAuthDnsSetting) *NullableMemberTrafficCaptureAuthDnsSetting {
	return &NullableMemberTrafficCaptureAuthDnsSetting{value: val, isSet: true}
}

func (v NullableMemberTrafficCaptureAuthDnsSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberTrafficCaptureAuthDnsSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
