/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Membercloudsync type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Membercloudsync{}

// Membercloudsync struct for Membercloudsync
type Membercloudsync struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Option to enable/disable Cloud Sync.
	CloudSyncEnabled *bool `json:"cloud_sync_enabled,omitempty"`
	// Host name of the parent Member
	HostName *string `json:"host_name,omitempty"`
}

// NewMembercloudsync instantiates a new Membercloudsync object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembercloudsync() *Membercloudsync {
	this := Membercloudsync{}
	return &this
}

// NewMembercloudsyncWithDefaults instantiates a new Membercloudsync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembercloudsyncWithDefaults() *Membercloudsync {
	this := Membercloudsync{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Membercloudsync) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Membercloudsync) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Membercloudsync) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Membercloudsync) SetRef(v string) {
	o.Ref = &v
}

// GetCloudSyncEnabled returns the CloudSyncEnabled field value if set, zero value otherwise.
func (o *Membercloudsync) GetCloudSyncEnabled() bool {
	if o == nil || IsNil(o.CloudSyncEnabled) {
		var ret bool
		return ret
	}
	return *o.CloudSyncEnabled
}

// GetCloudSyncEnabledOk returns a tuple with the CloudSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Membercloudsync) GetCloudSyncEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudSyncEnabled) {
		return nil, false
	}
	return o.CloudSyncEnabled, true
}

// HasCloudSyncEnabled returns a boolean if a field has been set.
func (o *Membercloudsync) HasCloudSyncEnabled() bool {
	if o != nil && !IsNil(o.CloudSyncEnabled) {
		return true
	}

	return false
}

// SetCloudSyncEnabled gets a reference to the given bool and assigns it to the CloudSyncEnabled field.
func (o *Membercloudsync) SetCloudSyncEnabled(v bool) {
	o.CloudSyncEnabled = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *Membercloudsync) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Membercloudsync) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *Membercloudsync) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *Membercloudsync) SetHostName(v string) {
	o.HostName = &v
}

func (o Membercloudsync) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Membercloudsync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CloudSyncEnabled) {
		toSerialize["cloud_sync_enabled"] = o.CloudSyncEnabled
	}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	return toSerialize, nil
}

type NullableMembercloudsync struct {
	value *Membercloudsync
	isSet bool
}

func (v NullableMembercloudsync) Get() *Membercloudsync {
	return v.value
}

func (v *NullableMembercloudsync) Set(val *Membercloudsync) {
	v.value = val
	v.isSet = true
}

func (v NullableMembercloudsync) IsSet() bool {
	return v.isSet
}

func (v *NullableMembercloudsync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembercloudsync(val *Membercloudsync) *NullableMembercloudsync {
	return &NullableMembercloudsync{value: val, isSet: true}
}

func (v NullableMembercloudsync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembercloudsync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
