/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MembernodeinfoV6MgmtNetworkSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembernodeinfoV6MgmtNetworkSetting{}

// MembernodeinfoV6MgmtNetworkSetting struct for MembernodeinfoV6MgmtNetworkSetting
type MembernodeinfoV6MgmtNetworkSetting struct {
	// Determines if IPv6 networking should be enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// IPv6 address.
	VirtualIp *string `json:"virtual_ip,omitempty"`
	// IPv6 cidr prefix
	CidrPrefix *int64 `json:"cidr_prefix,omitempty"`
	// Gateway address.
	Gateway *string `json:"gateway,omitempty"`
	// Determines if automatic router configuration should be enabled.
	AutoRouterConfigEnabled *bool `json:"auto_router_config_enabled,omitempty"`
	// The identifier for the VLAN. Valid values are from 1 to 4096.
	VlanId *int64 `json:"vlan_id,omitempty"`
	// Determines if the current address is the primary VLAN address or not.
	Primary *bool `json:"primary,omitempty"`
	// The DSCP (Differentiated Services Code Point) value determines relative priorities for the type of services on your network. The appliance implements QoS (Quality of Service) rules based on this configuration. Valid values are from 0 to 63.
	Dscp *int64 `json:"dscp,omitempty"`
	// Use flag for: dscp
	UseDscp              *bool `json:"use_dscp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MembernodeinfoV6MgmtNetworkSetting MembernodeinfoV6MgmtNetworkSetting

// NewMembernodeinfoV6MgmtNetworkSetting instantiates a new MembernodeinfoV6MgmtNetworkSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembernodeinfoV6MgmtNetworkSetting() *MembernodeinfoV6MgmtNetworkSetting {
	this := MembernodeinfoV6MgmtNetworkSetting{}
	return &this
}

// NewMembernodeinfoV6MgmtNetworkSettingWithDefaults instantiates a new MembernodeinfoV6MgmtNetworkSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembernodeinfoV6MgmtNetworkSettingWithDefaults() *MembernodeinfoV6MgmtNetworkSetting {
	this := MembernodeinfoV6MgmtNetworkSetting{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetVirtualIp returns the VirtualIp field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetVirtualIp() string {
	if o == nil || IsNil(o.VirtualIp) {
		var ret string
		return ret
	}
	return *o.VirtualIp
}

// GetVirtualIpOk returns a tuple with the VirtualIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetVirtualIpOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualIp) {
		return nil, false
	}
	return o.VirtualIp, true
}

// HasVirtualIp returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasVirtualIp() bool {
	if o != nil && !IsNil(o.VirtualIp) {
		return true
	}

	return false
}

// SetVirtualIp gets a reference to the given string and assigns it to the VirtualIp field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetVirtualIp(v string) {
	o.VirtualIp = &v
}

// GetCidrPrefix returns the CidrPrefix field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetCidrPrefix() int64 {
	if o == nil || IsNil(o.CidrPrefix) {
		var ret int64
		return ret
	}
	return *o.CidrPrefix
}

// GetCidrPrefixOk returns a tuple with the CidrPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetCidrPrefixOk() (*int64, bool) {
	if o == nil || IsNil(o.CidrPrefix) {
		return nil, false
	}
	return o.CidrPrefix, true
}

// HasCidrPrefix returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasCidrPrefix() bool {
	if o != nil && !IsNil(o.CidrPrefix) {
		return true
	}

	return false
}

// SetCidrPrefix gets a reference to the given int64 and assigns it to the CidrPrefix field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetCidrPrefix(v int64) {
	o.CidrPrefix = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetGateway(v string) {
	o.Gateway = &v
}

// GetAutoRouterConfigEnabled returns the AutoRouterConfigEnabled field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetAutoRouterConfigEnabled() bool {
	if o == nil || IsNil(o.AutoRouterConfigEnabled) {
		var ret bool
		return ret
	}
	return *o.AutoRouterConfigEnabled
}

// GetAutoRouterConfigEnabledOk returns a tuple with the AutoRouterConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetAutoRouterConfigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoRouterConfigEnabled) {
		return nil, false
	}
	return o.AutoRouterConfigEnabled, true
}

// HasAutoRouterConfigEnabled returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasAutoRouterConfigEnabled() bool {
	if o != nil && !IsNil(o.AutoRouterConfigEnabled) {
		return true
	}

	return false
}

// SetAutoRouterConfigEnabled gets a reference to the given bool and assigns it to the AutoRouterConfigEnabled field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetAutoRouterConfigEnabled(v bool) {
	o.AutoRouterConfigEnabled = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetVlanId() int64 {
	if o == nil || IsNil(o.VlanId) {
		var ret int64
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetVlanIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int64 and assigns it to the VlanId field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetVlanId(v int64) {
	o.VlanId = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetPrimary(v bool) {
	o.Primary = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetDscp() int64 {
	if o == nil || IsNil(o.Dscp) {
		var ret int64
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetDscpOk() (*int64, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int64 and assigns it to the Dscp field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetDscp(v int64) {
	o.Dscp = &v
}

// GetUseDscp returns the UseDscp field value if set, zero value otherwise.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetUseDscp() bool {
	if o == nil || IsNil(o.UseDscp) {
		var ret bool
		return ret
	}
	return *o.UseDscp
}

// GetUseDscpOk returns a tuple with the UseDscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) GetUseDscpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDscp) {
		return nil, false
	}
	return o.UseDscp, true
}

// HasUseDscp returns a boolean if a field has been set.
func (o *MembernodeinfoV6MgmtNetworkSetting) HasUseDscp() bool {
	if o != nil && !IsNil(o.UseDscp) {
		return true
	}

	return false
}

// SetUseDscp gets a reference to the given bool and assigns it to the UseDscp field.
func (o *MembernodeinfoV6MgmtNetworkSetting) SetUseDscp(v bool) {
	o.UseDscp = &v
}

func (o MembernodeinfoV6MgmtNetworkSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembernodeinfoV6MgmtNetworkSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.VirtualIp) {
		toSerialize["virtual_ip"] = o.VirtualIp
	}
	if !IsNil(o.CidrPrefix) {
		toSerialize["cidr_prefix"] = o.CidrPrefix
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.AutoRouterConfigEnabled) {
		toSerialize["auto_router_config_enabled"] = o.AutoRouterConfigEnabled
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.UseDscp) {
		toSerialize["use_dscp"] = o.UseDscp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MembernodeinfoV6MgmtNetworkSetting) UnmarshalJSON(data []byte) (err error) {
	varMembernodeinfoV6MgmtNetworkSetting := _MembernodeinfoV6MgmtNetworkSetting{}

	err = json.Unmarshal(data, &varMembernodeinfoV6MgmtNetworkSetting)

	if err != nil {
		return err
	}

	*o = MembernodeinfoV6MgmtNetworkSetting(varMembernodeinfoV6MgmtNetworkSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "virtual_ip")
		delete(additionalProperties, "cidr_prefix")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "auto_router_config_enabled")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "dscp")
		delete(additionalProperties, "use_dscp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMembernodeinfoV6MgmtNetworkSetting struct {
	value *MembernodeinfoV6MgmtNetworkSetting
	isSet bool
}

func (v NullableMembernodeinfoV6MgmtNetworkSetting) Get() *MembernodeinfoV6MgmtNetworkSetting {
	return v.value
}

func (v *NullableMembernodeinfoV6MgmtNetworkSetting) Set(val *MembernodeinfoV6MgmtNetworkSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMembernodeinfoV6MgmtNetworkSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMembernodeinfoV6MgmtNetworkSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembernodeinfoV6MgmtNetworkSetting(val *MembernodeinfoV6MgmtNetworkSetting) *NullableMembernodeinfoV6MgmtNetworkSetting {
	return &NullableMembernodeinfoV6MgmtNetworkSetting{value: val, isSet: true}
}

func (v NullableMembernodeinfoV6MgmtNetworkSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembernodeinfoV6MgmtNetworkSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
