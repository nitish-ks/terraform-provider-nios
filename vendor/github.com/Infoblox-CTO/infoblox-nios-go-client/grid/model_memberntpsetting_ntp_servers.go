/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberntpsettingNtpServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberntpsettingNtpServers{}

// MemberntpsettingNtpServers struct for MemberntpsettingNtpServers
type MemberntpsettingNtpServers struct {
	// The NTP server IP address or FQDN.
	Address *string `json:"address,omitempty"`
	// Determines whether the NTP authentication is enabled.
	EnableAuthentication *bool `json:"enable_authentication,omitempty"`
	// The NTP authentication key number.
	NtpKeyNumber *int64 `json:"ntp_key_number,omitempty"`
	// Determines whether the NTP server is a preferred one or not.
	Preferred *bool `json:"preferred,omitempty"`
	// Determines whether the BURST operation mode is enabled. In BURST operating mode, when the external server is reachable and a valid source of synchronization is available, NTP sends a burst of 8 packets with a 2 second interval between packets.
	Burst *bool `json:"burst,omitempty"`
	// Determines whether the IBURST operation mode is enabled. In IBURST operating mode, when the external server is unreachable, NTP server sends a burst of 8 packets with a 2 second interval between packets.
	Iburst               *bool `json:"iburst,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberntpsettingNtpServers MemberntpsettingNtpServers

// NewMemberntpsettingNtpServers instantiates a new MemberntpsettingNtpServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberntpsettingNtpServers() *MemberntpsettingNtpServers {
	this := MemberntpsettingNtpServers{}
	return &this
}

// NewMemberntpsettingNtpServersWithDefaults instantiates a new MemberntpsettingNtpServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberntpsettingNtpServersWithDefaults() *MemberntpsettingNtpServers {
	this := MemberntpsettingNtpServers{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MemberntpsettingNtpServers) SetAddress(v string) {
	o.Address = &v
}

// GetEnableAuthentication returns the EnableAuthentication field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetEnableAuthentication() bool {
	if o == nil || IsNil(o.EnableAuthentication) {
		var ret bool
		return ret
	}
	return *o.EnableAuthentication
}

// GetEnableAuthenticationOk returns a tuple with the EnableAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetEnableAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAuthentication) {
		return nil, false
	}
	return o.EnableAuthentication, true
}

// HasEnableAuthentication returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasEnableAuthentication() bool {
	if o != nil && !IsNil(o.EnableAuthentication) {
		return true
	}

	return false
}

// SetEnableAuthentication gets a reference to the given bool and assigns it to the EnableAuthentication field.
func (o *MemberntpsettingNtpServers) SetEnableAuthentication(v bool) {
	o.EnableAuthentication = &v
}

// GetNtpKeyNumber returns the NtpKeyNumber field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetNtpKeyNumber() int64 {
	if o == nil || IsNil(o.NtpKeyNumber) {
		var ret int64
		return ret
	}
	return *o.NtpKeyNumber
}

// GetNtpKeyNumberOk returns a tuple with the NtpKeyNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetNtpKeyNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.NtpKeyNumber) {
		return nil, false
	}
	return o.NtpKeyNumber, true
}

// HasNtpKeyNumber returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasNtpKeyNumber() bool {
	if o != nil && !IsNil(o.NtpKeyNumber) {
		return true
	}

	return false
}

// SetNtpKeyNumber gets a reference to the given int64 and assigns it to the NtpKeyNumber field.
func (o *MemberntpsettingNtpServers) SetNtpKeyNumber(v int64) {
	o.NtpKeyNumber = &v
}

// GetPreferred returns the Preferred field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetPreferred() bool {
	if o == nil || IsNil(o.Preferred) {
		var ret bool
		return ret
	}
	return *o.Preferred
}

// GetPreferredOk returns a tuple with the Preferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetPreferredOk() (*bool, bool) {
	if o == nil || IsNil(o.Preferred) {
		return nil, false
	}
	return o.Preferred, true
}

// HasPreferred returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasPreferred() bool {
	if o != nil && !IsNil(o.Preferred) {
		return true
	}

	return false
}

// SetPreferred gets a reference to the given bool and assigns it to the Preferred field.
func (o *MemberntpsettingNtpServers) SetPreferred(v bool) {
	o.Preferred = &v
}

// GetBurst returns the Burst field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetBurst() bool {
	if o == nil || IsNil(o.Burst) {
		var ret bool
		return ret
	}
	return *o.Burst
}

// GetBurstOk returns a tuple with the Burst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetBurstOk() (*bool, bool) {
	if o == nil || IsNil(o.Burst) {
		return nil, false
	}
	return o.Burst, true
}

// HasBurst returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasBurst() bool {
	if o != nil && !IsNil(o.Burst) {
		return true
	}

	return false
}

// SetBurst gets a reference to the given bool and assigns it to the Burst field.
func (o *MemberntpsettingNtpServers) SetBurst(v bool) {
	o.Burst = &v
}

// GetIburst returns the Iburst field value if set, zero value otherwise.
func (o *MemberntpsettingNtpServers) GetIburst() bool {
	if o == nil || IsNil(o.Iburst) {
		var ret bool
		return ret
	}
	return *o.Iburst
}

// GetIburstOk returns a tuple with the Iburst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberntpsettingNtpServers) GetIburstOk() (*bool, bool) {
	if o == nil || IsNil(o.Iburst) {
		return nil, false
	}
	return o.Iburst, true
}

// HasIburst returns a boolean if a field has been set.
func (o *MemberntpsettingNtpServers) HasIburst() bool {
	if o != nil && !IsNil(o.Iburst) {
		return true
	}

	return false
}

// SetIburst gets a reference to the given bool and assigns it to the Iburst field.
func (o *MemberntpsettingNtpServers) SetIburst(v bool) {
	o.Iburst = &v
}

func (o MemberntpsettingNtpServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberntpsettingNtpServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.EnableAuthentication) {
		toSerialize["enable_authentication"] = o.EnableAuthentication
	}
	if !IsNil(o.NtpKeyNumber) {
		toSerialize["ntp_key_number"] = o.NtpKeyNumber
	}
	if !IsNil(o.Preferred) {
		toSerialize["preferred"] = o.Preferred
	}
	if !IsNil(o.Burst) {
		toSerialize["burst"] = o.Burst
	}
	if !IsNil(o.Iburst) {
		toSerialize["iburst"] = o.Iburst
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberntpsettingNtpServers) UnmarshalJSON(data []byte) (err error) {
	varMemberntpsettingNtpServers := _MemberntpsettingNtpServers{}

	err = json.Unmarshal(data, &varMemberntpsettingNtpServers)

	if err != nil {
		return err
	}

	*o = MemberntpsettingNtpServers(varMemberntpsettingNtpServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "enable_authentication")
		delete(additionalProperties, "ntp_key_number")
		delete(additionalProperties, "preferred")
		delete(additionalProperties, "burst")
		delete(additionalProperties, "iburst")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberntpsettingNtpServers struct {
	value *MemberntpsettingNtpServers
	isSet bool
}

func (v NullableMemberntpsettingNtpServers) Get() *MemberntpsettingNtpServers {
	return v.value
}

func (v *NullableMemberntpsettingNtpServers) Set(val *MemberntpsettingNtpServers) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberntpsettingNtpServers) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberntpsettingNtpServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberntpsettingNtpServers(val *MemberntpsettingNtpServers) *NullableMemberntpsettingNtpServers {
	return &NullableMemberntpsettingNtpServers{value: val, isSet: true}
}

func (v NullableMemberntpsettingNtpServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberntpsettingNtpServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
