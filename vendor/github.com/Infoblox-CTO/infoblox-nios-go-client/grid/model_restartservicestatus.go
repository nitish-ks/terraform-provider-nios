/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Restartservicestatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Restartservicestatus{}

// Restartservicestatus struct for Restartservicestatus
type Restartservicestatus struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The status of the DHCP service.
	DhcpStatus *string `json:"dhcp_status,omitempty"`
	// The status of the DNS service.
	DnsStatus *string `json:"dns_status,omitempty"`
	// The name of this Grid member in FQDN format.
	Member *string `json:"member,omitempty"`
	// The status of the reporting service.
	ReportingStatus *string `json:"reporting_status,omitempty"`
}

// NewRestartservicestatus instantiates a new Restartservicestatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestartservicestatus() *Restartservicestatus {
	this := Restartservicestatus{}
	return &this
}

// NewRestartservicestatusWithDefaults instantiates a new Restartservicestatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestartservicestatusWithDefaults() *Restartservicestatus {
	this := Restartservicestatus{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Restartservicestatus) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restartservicestatus) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Restartservicestatus) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Restartservicestatus) SetRef(v string) {
	o.Ref = &v
}

// GetDhcpStatus returns the DhcpStatus field value if set, zero value otherwise.
func (o *Restartservicestatus) GetDhcpStatus() string {
	if o == nil || IsNil(o.DhcpStatus) {
		var ret string
		return ret
	}
	return *o.DhcpStatus
}

// GetDhcpStatusOk returns a tuple with the DhcpStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restartservicestatus) GetDhcpStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpStatus) {
		return nil, false
	}
	return o.DhcpStatus, true
}

// HasDhcpStatus returns a boolean if a field has been set.
func (o *Restartservicestatus) HasDhcpStatus() bool {
	if o != nil && !IsNil(o.DhcpStatus) {
		return true
	}

	return false
}

// SetDhcpStatus gets a reference to the given string and assigns it to the DhcpStatus field.
func (o *Restartservicestatus) SetDhcpStatus(v string) {
	o.DhcpStatus = &v
}

// GetDnsStatus returns the DnsStatus field value if set, zero value otherwise.
func (o *Restartservicestatus) GetDnsStatus() string {
	if o == nil || IsNil(o.DnsStatus) {
		var ret string
		return ret
	}
	return *o.DnsStatus
}

// GetDnsStatusOk returns a tuple with the DnsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restartservicestatus) GetDnsStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DnsStatus) {
		return nil, false
	}
	return o.DnsStatus, true
}

// HasDnsStatus returns a boolean if a field has been set.
func (o *Restartservicestatus) HasDnsStatus() bool {
	if o != nil && !IsNil(o.DnsStatus) {
		return true
	}

	return false
}

// SetDnsStatus gets a reference to the given string and assigns it to the DnsStatus field.
func (o *Restartservicestatus) SetDnsStatus(v string) {
	o.DnsStatus = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Restartservicestatus) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restartservicestatus) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Restartservicestatus) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *Restartservicestatus) SetMember(v string) {
	o.Member = &v
}

// GetReportingStatus returns the ReportingStatus field value if set, zero value otherwise.
func (o *Restartservicestatus) GetReportingStatus() string {
	if o == nil || IsNil(o.ReportingStatus) {
		var ret string
		return ret
	}
	return *o.ReportingStatus
}

// GetReportingStatusOk returns a tuple with the ReportingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restartservicestatus) GetReportingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingStatus) {
		return nil, false
	}
	return o.ReportingStatus, true
}

// HasReportingStatus returns a boolean if a field has been set.
func (o *Restartservicestatus) HasReportingStatus() bool {
	if o != nil && !IsNil(o.ReportingStatus) {
		return true
	}

	return false
}

// SetReportingStatus gets a reference to the given string and assigns it to the ReportingStatus field.
func (o *Restartservicestatus) SetReportingStatus(v string) {
	o.ReportingStatus = &v
}

func (o Restartservicestatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Restartservicestatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.DhcpStatus) {
		toSerialize["dhcp_status"] = o.DhcpStatus
	}
	if !IsNil(o.DnsStatus) {
		toSerialize["dns_status"] = o.DnsStatus
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.ReportingStatus) {
		toSerialize["reporting_status"] = o.ReportingStatus
	}
	return toSerialize, nil
}

type NullableRestartservicestatus struct {
	value *Restartservicestatus
	isSet bool
}

func (v NullableRestartservicestatus) Get() *Restartservicestatus {
	return v.value
}

func (v *NullableRestartservicestatus) Set(val *Restartservicestatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartservicestatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartservicestatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartservicestatus(val *Restartservicestatus) *NullableRestartservicestatus {
	return &NullableRestartservicestatus{value: val, isSet: true}
}

func (v NullableRestartservicestatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartservicestatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
