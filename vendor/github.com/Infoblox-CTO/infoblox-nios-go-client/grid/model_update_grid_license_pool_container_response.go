/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// UpdateGridLicensePoolContainerResponse - struct for UpdateGridLicensePoolContainerResponse
type UpdateGridLicensePoolContainerResponse struct {
	UpdateGridLicensePoolContainerResponseAsObject *UpdateGridLicensePoolContainerResponseAsObject
	String                                         *string
}

// UpdateGridLicensePoolContainerResponseAsObjectAsUpdateGridLicensePoolContainerResponse is a convenience function that returns UpdateGridLicensePoolContainerResponseAsObject wrapped in UpdateGridLicensePoolContainerResponse
func UpdateGridLicensePoolContainerResponseAsObjectAsUpdateGridLicensePoolContainerResponse(v *UpdateGridLicensePoolContainerResponseAsObject) UpdateGridLicensePoolContainerResponse {
	return UpdateGridLicensePoolContainerResponse{
		UpdateGridLicensePoolContainerResponseAsObject: v,
	}
}

// stringAsUpdateGridLicensePoolContainerResponse is a convenience function that returns string wrapped in UpdateGridLicensePoolContainerResponse
func StringAsUpdateGridLicensePoolContainerResponse(v *string) UpdateGridLicensePoolContainerResponse {
	return UpdateGridLicensePoolContainerResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateGridLicensePoolContainerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateGridLicensePoolContainerResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateGridLicensePoolContainerResponseAsObject)
	if err == nil {
		jsonUpdateGridLicensePoolContainerResponseAsObject, _ := json.Marshal(dst.UpdateGridLicensePoolContainerResponseAsObject)
		if string(jsonUpdateGridLicensePoolContainerResponseAsObject) == "{}" { // empty struct
			dst.UpdateGridLicensePoolContainerResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateGridLicensePoolContainerResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateGridLicensePoolContainerResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateGridLicensePoolContainerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateGridLicensePoolContainerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateGridLicensePoolContainerResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateGridLicensePoolContainerResponseAsObject != nil {
		return json.Marshal(&src.UpdateGridLicensePoolContainerResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateGridLicensePoolContainerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateGridLicensePoolContainerResponseAsObject != nil {
		return obj.UpdateGridLicensePoolContainerResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateGridLicensePoolContainerResponse struct {
	value *UpdateGridLicensePoolContainerResponse
	isSet bool
}

func (v NullableUpdateGridLicensePoolContainerResponse) Get() *UpdateGridLicensePoolContainerResponse {
	return v.value
}

func (v *NullableUpdateGridLicensePoolContainerResponse) Set(val *UpdateGridLicensePoolContainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGridLicensePoolContainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGridLicensePoolContainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGridLicensePoolContainerResponse(val *UpdateGridLicensePoolContainerResponse) *NullableUpdateGridLicensePoolContainerResponse {
	return &NullableUpdateGridLicensePoolContainerResponse{value: val, isSet: true}
}

func (v NullableUpdateGridLicensePoolContainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGridLicensePoolContainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
