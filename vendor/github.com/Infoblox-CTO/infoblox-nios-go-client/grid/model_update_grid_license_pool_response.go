/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// UpdateGridLicensePoolResponse - struct for UpdateGridLicensePoolResponse
type UpdateGridLicensePoolResponse struct {
	UpdateGridLicensePoolResponseAsObject *UpdateGridLicensePoolResponseAsObject
	String                                *string
}

// UpdateGridLicensePoolResponseAsObjectAsUpdateGridLicensePoolResponse is a convenience function that returns UpdateGridLicensePoolResponseAsObject wrapped in UpdateGridLicensePoolResponse
func UpdateGridLicensePoolResponseAsObjectAsUpdateGridLicensePoolResponse(v *UpdateGridLicensePoolResponseAsObject) UpdateGridLicensePoolResponse {
	return UpdateGridLicensePoolResponse{
		UpdateGridLicensePoolResponseAsObject: v,
	}
}

// stringAsUpdateGridLicensePoolResponse is a convenience function that returns string wrapped in UpdateGridLicensePoolResponse
func StringAsUpdateGridLicensePoolResponse(v *string) UpdateGridLicensePoolResponse {
	return UpdateGridLicensePoolResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateGridLicensePoolResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateGridLicensePoolResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateGridLicensePoolResponseAsObject)
	if err == nil {
		jsonUpdateGridLicensePoolResponseAsObject, _ := json.Marshal(dst.UpdateGridLicensePoolResponseAsObject)
		if string(jsonUpdateGridLicensePoolResponseAsObject) == "{}" { // empty struct
			dst.UpdateGridLicensePoolResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateGridLicensePoolResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateGridLicensePoolResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateGridLicensePoolResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateGridLicensePoolResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateGridLicensePoolResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateGridLicensePoolResponseAsObject != nil {
		return json.Marshal(&src.UpdateGridLicensePoolResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateGridLicensePoolResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateGridLicensePoolResponseAsObject != nil {
		return obj.UpdateGridLicensePoolResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateGridLicensePoolResponse struct {
	value *UpdateGridLicensePoolResponse
	isSet bool
}

func (v NullableUpdateGridLicensePoolResponse) Get() *UpdateGridLicensePoolResponse {
	return v.value
}

func (v *NullableUpdateGridLicensePoolResponse) Set(val *UpdateGridLicensePoolResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGridLicensePoolResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGridLicensePoolResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGridLicensePoolResponse(val *UpdateGridLicensePoolResponse) *NullableUpdateGridLicensePoolResponse {
	return &NullableUpdateGridLicensePoolResponse{value: val, isSet: true}
}

func (v NullableUpdateGridLicensePoolResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGridLicensePoolResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
