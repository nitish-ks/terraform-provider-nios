/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// UpdateGridX509certificateResponse - struct for UpdateGridX509certificateResponse
type UpdateGridX509certificateResponse struct {
	UpdateGridX509certificateResponseAsObject *UpdateGridX509certificateResponseAsObject
	String                                    *string
}

// UpdateGridX509certificateResponseAsObjectAsUpdateGridX509certificateResponse is a convenience function that returns UpdateGridX509certificateResponseAsObject wrapped in UpdateGridX509certificateResponse
func UpdateGridX509certificateResponseAsObjectAsUpdateGridX509certificateResponse(v *UpdateGridX509certificateResponseAsObject) UpdateGridX509certificateResponse {
	return UpdateGridX509certificateResponse{
		UpdateGridX509certificateResponseAsObject: v,
	}
}

// stringAsUpdateGridX509certificateResponse is a convenience function that returns string wrapped in UpdateGridX509certificateResponse
func StringAsUpdateGridX509certificateResponse(v *string) UpdateGridX509certificateResponse {
	return UpdateGridX509certificateResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateGridX509certificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateGridX509certificateResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateGridX509certificateResponseAsObject)
	if err == nil {
		jsonUpdateGridX509certificateResponseAsObject, _ := json.Marshal(dst.UpdateGridX509certificateResponseAsObject)
		if string(jsonUpdateGridX509certificateResponseAsObject) == "{}" { // empty struct
			dst.UpdateGridX509certificateResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateGridX509certificateResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateGridX509certificateResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateGridX509certificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateGridX509certificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateGridX509certificateResponseAsObject != nil {
		return json.Marshal(&src.UpdateGridX509certificateResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateGridX509certificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateGridX509certificateResponseAsObject != nil {
		return obj.UpdateGridX509certificateResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateGridX509certificateResponse struct {
	value *UpdateGridX509certificateResponse
	isSet bool
}

func (v NullableUpdateGridX509certificateResponse) Get() *UpdateGridX509certificateResponse {
	return v.value
}

func (v *NullableUpdateGridX509certificateResponse) Set(val *UpdateGridX509certificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGridX509certificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGridX509certificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGridX509certificateResponse(val *UpdateGridX509certificateResponse) *NullableUpdateGridX509certificateResponse {
	return &NullableUpdateGridX509certificateResponse{value: val, isSet: true}
}

func (v NullableUpdateGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGridX509certificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
