/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// UpdateUpgradescheduleResponse - struct for UpdateUpgradescheduleResponse
type UpdateUpgradescheduleResponse struct {
	UpdateUpgradescheduleResponseAsObject *UpdateUpgradescheduleResponseAsObject
	String                                *string
}

// UpdateUpgradescheduleResponseAsObjectAsUpdateUpgradescheduleResponse is a convenience function that returns UpdateUpgradescheduleResponseAsObject wrapped in UpdateUpgradescheduleResponse
func UpdateUpgradescheduleResponseAsObjectAsUpdateUpgradescheduleResponse(v *UpdateUpgradescheduleResponseAsObject) UpdateUpgradescheduleResponse {
	return UpdateUpgradescheduleResponse{
		UpdateUpgradescheduleResponseAsObject: v,
	}
}

// stringAsUpdateUpgradescheduleResponse is a convenience function that returns string wrapped in UpdateUpgradescheduleResponse
func StringAsUpdateUpgradescheduleResponse(v *string) UpdateUpgradescheduleResponse {
	return UpdateUpgradescheduleResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateUpgradescheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateUpgradescheduleResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateUpgradescheduleResponseAsObject)
	if err == nil {
		jsonUpdateUpgradescheduleResponseAsObject, _ := json.Marshal(dst.UpdateUpgradescheduleResponseAsObject)
		if string(jsonUpdateUpgradescheduleResponseAsObject) == "{}" { // empty struct
			dst.UpdateUpgradescheduleResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateUpgradescheduleResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateUpgradescheduleResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateUpgradescheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateUpgradescheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateUpgradescheduleResponseAsObject != nil {
		return json.Marshal(&src.UpdateUpgradescheduleResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateUpgradescheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateUpgradescheduleResponseAsObject != nil {
		return obj.UpdateUpgradescheduleResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateUpgradescheduleResponse struct {
	value *UpdateUpgradescheduleResponse
	isSet bool
}

func (v NullableUpdateUpgradescheduleResponse) Get() *UpdateUpgradescheduleResponse {
	return v.value
}

func (v *NullableUpdateUpgradescheduleResponse) Set(val *UpdateUpgradescheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUpgradescheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUpgradescheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUpgradescheduleResponse(val *UpdateUpgradescheduleResponse) *NullableUpdateUpgradescheduleResponse {
	return &NullableUpdateUpgradescheduleResponse{value: val, isSet: true}
}

func (v NullableUpdateUpgradescheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUpgradescheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
