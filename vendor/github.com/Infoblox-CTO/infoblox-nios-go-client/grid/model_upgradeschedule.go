/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Upgradeschedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upgradeschedule{}

// Upgradeschedule struct for Upgradeschedule
type Upgradeschedule struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines whether the upgrade schedule is active.
	Active *bool `json:"active,omitempty"`
	// The start time of the upgrade.
	StartTime *int64 `json:"start_time,omitempty"`
	// The time zone for upgrade start time.
	TimeZone *string `json:"time_zone,omitempty"`
	// The upgrade groups scheduling settings.
	UpgradeGroups []UpgradescheduleUpgradeGroups `json:"upgrade_groups,omitempty"`
}

// NewUpgradeschedule instantiates a new Upgradeschedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeschedule() *Upgradeschedule {
	this := Upgradeschedule{}
	return &this
}

// NewUpgradescheduleWithDefaults instantiates a new Upgradeschedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradescheduleWithDefaults() *Upgradeschedule {
	this := Upgradeschedule{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Upgradeschedule) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradeschedule) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Upgradeschedule) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Upgradeschedule) SetRef(v string) {
	o.Ref = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Upgradeschedule) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradeschedule) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Upgradeschedule) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Upgradeschedule) SetActive(v bool) {
	o.Active = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Upgradeschedule) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradeschedule) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Upgradeschedule) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *Upgradeschedule) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Upgradeschedule) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradeschedule) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Upgradeschedule) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Upgradeschedule) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetUpgradeGroups returns the UpgradeGroups field value if set, zero value otherwise.
func (o *Upgradeschedule) GetUpgradeGroups() []UpgradescheduleUpgradeGroups {
	if o == nil || IsNil(o.UpgradeGroups) {
		var ret []UpgradescheduleUpgradeGroups
		return ret
	}
	return o.UpgradeGroups
}

// GetUpgradeGroupsOk returns a tuple with the UpgradeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradeschedule) GetUpgradeGroupsOk() ([]UpgradescheduleUpgradeGroups, bool) {
	if o == nil || IsNil(o.UpgradeGroups) {
		return nil, false
	}
	return o.UpgradeGroups, true
}

// HasUpgradeGroups returns a boolean if a field has been set.
func (o *Upgradeschedule) HasUpgradeGroups() bool {
	if o != nil && !IsNil(o.UpgradeGroups) {
		return true
	}

	return false
}

// SetUpgradeGroups gets a reference to the given []UpgradescheduleUpgradeGroups and assigns it to the UpgradeGroups field.
func (o *Upgradeschedule) SetUpgradeGroups(v []UpgradescheduleUpgradeGroups) {
	o.UpgradeGroups = v
}

func (o Upgradeschedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upgradeschedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.UpgradeGroups) {
		toSerialize["upgrade_groups"] = o.UpgradeGroups
	}
	return toSerialize, nil
}

type NullableUpgradeschedule struct {
	value *Upgradeschedule
	isSet bool
}

func (v NullableUpgradeschedule) Get() *Upgradeschedule {
	return v.value
}

func (v *NullableUpgradeschedule) Set(val *Upgradeschedule) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeschedule) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeschedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeschedule(val *Upgradeschedule) *NullableUpgradeschedule {
	return &NullableUpgradeschedule{value: val, isSet: true}
}

func (v NullableUpgradeschedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeschedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
