/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the UpgradestatusHotfixes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradestatusHotfixes{}

// UpgradestatusHotfixes struct for UpgradestatusHotfixes
type UpgradestatusHotfixes struct {
	// The status text of the hotfix.
	StatusText *string `json:"status_text,omitempty"`
	// Unique ID of the hotfix.
	UniqueId             *string `json:"unique_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpgradestatusHotfixes UpgradestatusHotfixes

// NewUpgradestatusHotfixes instantiates a new UpgradestatusHotfixes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradestatusHotfixes() *UpgradestatusHotfixes {
	this := UpgradestatusHotfixes{}
	return &this
}

// NewUpgradestatusHotfixesWithDefaults instantiates a new UpgradestatusHotfixes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradestatusHotfixesWithDefaults() *UpgradestatusHotfixes {
	this := UpgradestatusHotfixes{}
	return &this
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *UpgradestatusHotfixes) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradestatusHotfixes) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *UpgradestatusHotfixes) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *UpgradestatusHotfixes) SetStatusText(v string) {
	o.StatusText = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *UpgradestatusHotfixes) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradestatusHotfixes) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *UpgradestatusHotfixes) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *UpgradestatusHotfixes) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o UpgradestatusHotfixes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradestatusHotfixes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}
	if !IsNil(o.UniqueId) {
		toSerialize["unique_id"] = o.UniqueId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpgradestatusHotfixes) UnmarshalJSON(data []byte) (err error) {
	varUpgradestatusHotfixes := _UpgradestatusHotfixes{}

	err = json.Unmarshal(data, &varUpgradestatusHotfixes)

	if err != nil {
		return err
	}

	*o = UpgradestatusHotfixes(varUpgradestatusHotfixes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status_text")
		delete(additionalProperties, "unique_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpgradestatusHotfixes struct {
	value *UpgradestatusHotfixes
	isSet bool
}

func (v NullableUpgradestatusHotfixes) Get() *UpgradestatusHotfixes {
	return v.value
}

func (v *NullableUpgradestatusHotfixes) Set(val *UpgradestatusHotfixes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradestatusHotfixes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradestatusHotfixes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradestatusHotfixes(val *UpgradestatusHotfixes) *NullableUpgradestatusHotfixes {
	return &NullableUpgradestatusHotfixes{value: val, isSet: true}
}

func (v NullableUpgradestatusHotfixes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradestatusHotfixes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
