/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the UpgradestatusSteps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradestatusSteps{}

// UpgradestatusSteps struct for UpgradestatusSteps
type UpgradestatusSteps struct {
	// The status value of a step.
	StatusValue *string `json:"status_value,omitempty"`
	// The status text that describes a step.
	StatusText           *string `json:"status_text,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpgradestatusSteps UpgradestatusSteps

// NewUpgradestatusSteps instantiates a new UpgradestatusSteps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradestatusSteps() *UpgradestatusSteps {
	this := UpgradestatusSteps{}
	return &this
}

// NewUpgradestatusStepsWithDefaults instantiates a new UpgradestatusSteps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradestatusStepsWithDefaults() *UpgradestatusSteps {
	this := UpgradestatusSteps{}
	return &this
}

// GetStatusValue returns the StatusValue field value if set, zero value otherwise.
func (o *UpgradestatusSteps) GetStatusValue() string {
	if o == nil || IsNil(o.StatusValue) {
		var ret string
		return ret
	}
	return *o.StatusValue
}

// GetStatusValueOk returns a tuple with the StatusValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradestatusSteps) GetStatusValueOk() (*string, bool) {
	if o == nil || IsNil(o.StatusValue) {
		return nil, false
	}
	return o.StatusValue, true
}

// HasStatusValue returns a boolean if a field has been set.
func (o *UpgradestatusSteps) HasStatusValue() bool {
	if o != nil && !IsNil(o.StatusValue) {
		return true
	}

	return false
}

// SetStatusValue gets a reference to the given string and assigns it to the StatusValue field.
func (o *UpgradestatusSteps) SetStatusValue(v string) {
	o.StatusValue = &v
}

// GetStatusText returns the StatusText field value if set, zero value otherwise.
func (o *UpgradestatusSteps) GetStatusText() string {
	if o == nil || IsNil(o.StatusText) {
		var ret string
		return ret
	}
	return *o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradestatusSteps) GetStatusTextOk() (*string, bool) {
	if o == nil || IsNil(o.StatusText) {
		return nil, false
	}
	return o.StatusText, true
}

// HasStatusText returns a boolean if a field has been set.
func (o *UpgradestatusSteps) HasStatusText() bool {
	if o != nil && !IsNil(o.StatusText) {
		return true
	}

	return false
}

// SetStatusText gets a reference to the given string and assigns it to the StatusText field.
func (o *UpgradestatusSteps) SetStatusText(v string) {
	o.StatusText = &v
}

func (o UpgradestatusSteps) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradestatusSteps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatusValue) {
		toSerialize["status_value"] = o.StatusValue
	}
	if !IsNil(o.StatusText) {
		toSerialize["status_text"] = o.StatusText
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpgradestatusSteps) UnmarshalJSON(data []byte) (err error) {
	varUpgradestatusSteps := _UpgradestatusSteps{}

	err = json.Unmarshal(data, &varUpgradestatusSteps)

	if err != nil {
		return err
	}

	*o = UpgradestatusSteps(varUpgradestatusSteps)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status_value")
		delete(additionalProperties, "status_text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpgradestatusSteps struct {
	value *UpgradestatusSteps
	isSet bool
}

func (v NullableUpgradestatusSteps) Get() *UpgradestatusSteps {
	return v.value
}

func (v *NullableUpgradestatusSteps) Set(val *UpgradestatusSteps) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradestatusSteps) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradestatusSteps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradestatusSteps(val *UpgradestatusSteps) *NullableUpgradestatusSteps {
	return &NullableUpgradestatusSteps{value: val, isSet: true}
}

func (v NullableUpgradestatusSteps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradestatusSteps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
