/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type HostnamerewritepolicyAPI interface {
	/*
		List Retrieve hostnamerewritepolicy objects

		Returns a list of hostnamerewritepolicy objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return HostnamerewritepolicyAPIListRequest
	*/
	List(ctx context.Context) HostnamerewritepolicyAPIListRequest

	// ListExecute executes the request
	//  @return ListHostnamerewritepolicyResponse
	ListExecute(r HostnamerewritepolicyAPIListRequest) (*ListHostnamerewritepolicyResponse, *http.Response, error)
	/*
		Read Get a specific hostnamerewritepolicy object

		Returns a specific hostnamerewritepolicy object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hostnamerewritepolicy object
		@return HostnamerewritepolicyAPIReadRequest
	*/
	Read(ctx context.Context, reference string) HostnamerewritepolicyAPIReadRequest

	// ReadExecute executes the request
	//  @return GetHostnamerewritepolicyResponse
	ReadExecute(r HostnamerewritepolicyAPIReadRequest) (*GetHostnamerewritepolicyResponse, *http.Response, error)
	/*
		Update Update a hostnamerewritepolicy object

		Updates a specific hostnamerewritepolicy object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hostnamerewritepolicy object
		@return HostnamerewritepolicyAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) HostnamerewritepolicyAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateHostnamerewritepolicyResponse
	UpdateExecute(r HostnamerewritepolicyAPIUpdateRequest) (*UpdateHostnamerewritepolicyResponse, *http.Response, error)
}

// HostnamerewritepolicyAPIService HostnamerewritepolicyAPI service
type HostnamerewritepolicyAPIService internal.Service

type HostnamerewritepolicyAPIListRequest struct {
	ctx              context.Context
	ApiService       HostnamerewritepolicyAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r HostnamerewritepolicyAPIListRequest) ReturnFields(returnFields string) HostnamerewritepolicyAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HostnamerewritepolicyAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) HostnamerewritepolicyAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r HostnamerewritepolicyAPIListRequest) MaxResults(maxResults int32) HostnamerewritepolicyAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r HostnamerewritepolicyAPIListRequest) ReturnAsObject(returnAsObject int32) HostnamerewritepolicyAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r HostnamerewritepolicyAPIListRequest) Paging(paging int32) HostnamerewritepolicyAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r HostnamerewritepolicyAPIListRequest) PageId(pageId string) HostnamerewritepolicyAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r HostnamerewritepolicyAPIListRequest) Filters(filters map[string]interface{}) HostnamerewritepolicyAPIListRequest {
	r.filters = &filters
	return r
}

func (r HostnamerewritepolicyAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) HostnamerewritepolicyAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r HostnamerewritepolicyAPIListRequest) Execute() (*ListHostnamerewritepolicyResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve hostnamerewritepolicy objects

Returns a list of hostnamerewritepolicy objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return HostnamerewritepolicyAPIListRequest
*/
func (a *HostnamerewritepolicyAPIService) List(ctx context.Context) HostnamerewritepolicyAPIListRequest {
	return HostnamerewritepolicyAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListHostnamerewritepolicyResponse
func (a *HostnamerewritepolicyAPIService) ListExecute(r HostnamerewritepolicyAPIListRequest) (*ListHostnamerewritepolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListHostnamerewritepolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HostnamerewritepolicyAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hostnamerewritepolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HostnamerewritepolicyAPIReadRequest struct {
	ctx              context.Context
	ApiService       HostnamerewritepolicyAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r HostnamerewritepolicyAPIReadRequest) ReturnFields(returnFields string) HostnamerewritepolicyAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HostnamerewritepolicyAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) HostnamerewritepolicyAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r HostnamerewritepolicyAPIReadRequest) ReturnAsObject(returnAsObject int32) HostnamerewritepolicyAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HostnamerewritepolicyAPIReadRequest) Execute() (*GetHostnamerewritepolicyResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific hostnamerewritepolicy object

Returns a specific hostnamerewritepolicy object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hostnamerewritepolicy object
	@return HostnamerewritepolicyAPIReadRequest
*/
func (a *HostnamerewritepolicyAPIService) Read(ctx context.Context, reference string) HostnamerewritepolicyAPIReadRequest {
	return HostnamerewritepolicyAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetHostnamerewritepolicyResponse
func (a *HostnamerewritepolicyAPIService) ReadExecute(r HostnamerewritepolicyAPIReadRequest) (*GetHostnamerewritepolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetHostnamerewritepolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HostnamerewritepolicyAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hostnamerewritepolicy/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HostnamerewritepolicyAPIUpdateRequest struct {
	ctx                   context.Context
	ApiService            HostnamerewritepolicyAPI
	reference             string
	hostnamerewritepolicy *Hostnamerewritepolicy
	returnFields          *string
	returnFieldsPlus      *string
	returnAsObject        *int32
}

// Object data to update
func (r HostnamerewritepolicyAPIUpdateRequest) Hostnamerewritepolicy(hostnamerewritepolicy Hostnamerewritepolicy) HostnamerewritepolicyAPIUpdateRequest {
	r.hostnamerewritepolicy = &hostnamerewritepolicy
	return r
}

// Enter the field names followed by comma
func (r HostnamerewritepolicyAPIUpdateRequest) ReturnFields(returnFields string) HostnamerewritepolicyAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HostnamerewritepolicyAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) HostnamerewritepolicyAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r HostnamerewritepolicyAPIUpdateRequest) ReturnAsObject(returnAsObject int32) HostnamerewritepolicyAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HostnamerewritepolicyAPIUpdateRequest) Execute() (*UpdateHostnamerewritepolicyResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a hostnamerewritepolicy object

Updates a specific hostnamerewritepolicy object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hostnamerewritepolicy object
	@return HostnamerewritepolicyAPIUpdateRequest
*/
func (a *HostnamerewritepolicyAPIService) Update(ctx context.Context, reference string) HostnamerewritepolicyAPIUpdateRequest {
	return HostnamerewritepolicyAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateHostnamerewritepolicyResponse
func (a *HostnamerewritepolicyAPIService) UpdateExecute(r HostnamerewritepolicyAPIUpdateRequest) (*UpdateHostnamerewritepolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateHostnamerewritepolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HostnamerewritepolicyAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hostnamerewritepolicy/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hostnamerewritepolicy == nil {
		return localVarReturnValue, nil, internal.ReportError("hostnamerewritepolicy is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hostnamerewritepolicy
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
