/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type Ipv6networkcontainerAPI interface {
	/*
		Create Create a ipv6networkcontainer object

		Creates a new ipv6networkcontainer object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6networkcontainerAPICreateRequest
	*/
	Create(ctx context.Context) Ipv6networkcontainerAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateIpv6networkcontainerResponse
	CreateExecute(r Ipv6networkcontainerAPICreateRequest) (*CreateIpv6networkcontainerResponse, *http.Response, error)
	/*
		Delete Delete a ipv6networkcontainer object

		Deletes a specific ipv6networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6networkcontainer object
		@return Ipv6networkcontainerAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) Ipv6networkcontainerAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r Ipv6networkcontainerAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve ipv6networkcontainer objects

		Returns a list of ipv6networkcontainer objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6networkcontainerAPIListRequest
	*/
	List(ctx context.Context) Ipv6networkcontainerAPIListRequest

	// ListExecute executes the request
	//  @return ListIpv6networkcontainerResponse
	ListExecute(r Ipv6networkcontainerAPIListRequest) (*ListIpv6networkcontainerResponse, *http.Response, error)
	/*
		Read Get a specific ipv6networkcontainer object

		Returns a specific ipv6networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6networkcontainer object
		@return Ipv6networkcontainerAPIReadRequest
	*/
	Read(ctx context.Context, reference string) Ipv6networkcontainerAPIReadRequest

	// ReadExecute executes the request
	//  @return GetIpv6networkcontainerResponse
	ReadExecute(r Ipv6networkcontainerAPIReadRequest) (*GetIpv6networkcontainerResponse, *http.Response, error)
	/*
		Update Update a ipv6networkcontainer object

		Updates a specific ipv6networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6networkcontainer object
		@return Ipv6networkcontainerAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) Ipv6networkcontainerAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateIpv6networkcontainerResponse
	UpdateExecute(r Ipv6networkcontainerAPIUpdateRequest) (*UpdateIpv6networkcontainerResponse, *http.Response, error)
}

// Ipv6networkcontainerAPIService Ipv6networkcontainerAPI service
type Ipv6networkcontainerAPIService internal.Service

type Ipv6networkcontainerAPICreateRequest struct {
	ctx                  context.Context
	ApiService           Ipv6networkcontainerAPI
	ipv6networkcontainer *Ipv6networkcontainer
	returnFields         *string
	returnFieldsPlus     *string
	returnAsObject       *int32
}

// Object data to create
func (r Ipv6networkcontainerAPICreateRequest) Ipv6networkcontainer(ipv6networkcontainer Ipv6networkcontainer) Ipv6networkcontainerAPICreateRequest {
	r.ipv6networkcontainer = &ipv6networkcontainer
	return r
}

// Enter the field names followed by comma
func (r Ipv6networkcontainerAPICreateRequest) ReturnFields(returnFields string) Ipv6networkcontainerAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6networkcontainerAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6networkcontainerAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6networkcontainerAPICreateRequest) ReturnAsObject(returnAsObject int32) Ipv6networkcontainerAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6networkcontainerAPICreateRequest) Execute() (*CreateIpv6networkcontainerResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a ipv6networkcontainer object

Creates a new ipv6networkcontainer object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6networkcontainerAPICreateRequest
*/
func (a *Ipv6networkcontainerAPIService) Create(ctx context.Context) Ipv6networkcontainerAPICreateRequest {
	return Ipv6networkcontainerAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIpv6networkcontainerResponse
func (a *Ipv6networkcontainerAPIService) CreateExecute(r Ipv6networkcontainerAPICreateRequest) (*CreateIpv6networkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateIpv6networkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6networkcontainerAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6networkcontainer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6networkcontainer == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6networkcontainer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.ipv6networkcontainer != nil {
		if r.ipv6networkcontainer.Extattrs == nil {
			r.ipv6networkcontainer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.ipv6networkcontainer.Extattrs)[k]; !ok {
				(*r.ipv6networkcontainer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.ipv6networkcontainer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6networkcontainerAPIDeleteRequest struct {
	ctx           context.Context
	ApiService    Ipv6networkcontainerAPI
	reference     string
	removeSubnets *bool
}

// Remove subnets delete option. Determines whether all child objects should be removed alongside with the IPv6 network container or child objects should be assigned to another parental container. By default child objects are deleted with this network container.
func (r Ipv6networkcontainerAPIDeleteRequest) RemoveSubnets(removeSubnets bool) Ipv6networkcontainerAPIDeleteRequest {
	r.removeSubnets = &removeSubnets
	return r
}

func (r Ipv6networkcontainerAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a ipv6networkcontainer object

Deletes a specific ipv6networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6networkcontainer object
	@return Ipv6networkcontainerAPIDeleteRequest
*/
func (a *Ipv6networkcontainerAPIService) Delete(ctx context.Context, reference string) Ipv6networkcontainerAPIDeleteRequest {
	return Ipv6networkcontainerAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *Ipv6networkcontainerAPIService) DeleteExecute(r Ipv6networkcontainerAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6networkcontainerAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.removeSubnets != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "remove_subnets", r.removeSubnets, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Ipv6networkcontainerAPIListRequest struct {
	ctx              context.Context
	ApiService       Ipv6networkcontainerAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r Ipv6networkcontainerAPIListRequest) ReturnFields(returnFields string) Ipv6networkcontainerAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6networkcontainerAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6networkcontainerAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r Ipv6networkcontainerAPIListRequest) MaxResults(maxResults int32) Ipv6networkcontainerAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r Ipv6networkcontainerAPIListRequest) ReturnAsObject(returnAsObject int32) Ipv6networkcontainerAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r Ipv6networkcontainerAPIListRequest) Paging(paging int32) Ipv6networkcontainerAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r Ipv6networkcontainerAPIListRequest) PageId(pageId string) Ipv6networkcontainerAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r Ipv6networkcontainerAPIListRequest) Filters(filters map[string]interface{}) Ipv6networkcontainerAPIListRequest {
	r.filters = &filters
	return r
}

func (r Ipv6networkcontainerAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) Ipv6networkcontainerAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r Ipv6networkcontainerAPIListRequest) Execute() (*ListIpv6networkcontainerResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve ipv6networkcontainer objects

Returns a list of ipv6networkcontainer objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6networkcontainerAPIListRequest
*/
func (a *Ipv6networkcontainerAPIService) List(ctx context.Context) Ipv6networkcontainerAPIListRequest {
	return Ipv6networkcontainerAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListIpv6networkcontainerResponse
func (a *Ipv6networkcontainerAPIService) ListExecute(r Ipv6networkcontainerAPIListRequest) (*ListIpv6networkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListIpv6networkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6networkcontainerAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6networkcontainer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6networkcontainerAPIReadRequest struct {
	ctx              context.Context
	ApiService       Ipv6networkcontainerAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r Ipv6networkcontainerAPIReadRequest) ReturnFields(returnFields string) Ipv6networkcontainerAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6networkcontainerAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6networkcontainerAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6networkcontainerAPIReadRequest) ReturnAsObject(returnAsObject int32) Ipv6networkcontainerAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6networkcontainerAPIReadRequest) Execute() (*GetIpv6networkcontainerResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific ipv6networkcontainer object

Returns a specific ipv6networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6networkcontainer object
	@return Ipv6networkcontainerAPIReadRequest
*/
func (a *Ipv6networkcontainerAPIService) Read(ctx context.Context, reference string) Ipv6networkcontainerAPIReadRequest {
	return Ipv6networkcontainerAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetIpv6networkcontainerResponse
func (a *Ipv6networkcontainerAPIService) ReadExecute(r Ipv6networkcontainerAPIReadRequest) (*GetIpv6networkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetIpv6networkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6networkcontainerAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6networkcontainerAPIUpdateRequest struct {
	ctx                  context.Context
	ApiService           Ipv6networkcontainerAPI
	reference            string
	ipv6networkcontainer *Ipv6networkcontainer
	returnFields         *string
	returnFieldsPlus     *string
	returnAsObject       *int32
}

// Object data to update
func (r Ipv6networkcontainerAPIUpdateRequest) Ipv6networkcontainer(ipv6networkcontainer Ipv6networkcontainer) Ipv6networkcontainerAPIUpdateRequest {
	r.ipv6networkcontainer = &ipv6networkcontainer
	return r
}

// Enter the field names followed by comma
func (r Ipv6networkcontainerAPIUpdateRequest) ReturnFields(returnFields string) Ipv6networkcontainerAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6networkcontainerAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6networkcontainerAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6networkcontainerAPIUpdateRequest) ReturnAsObject(returnAsObject int32) Ipv6networkcontainerAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6networkcontainerAPIUpdateRequest) Execute() (*UpdateIpv6networkcontainerResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a ipv6networkcontainer object

Updates a specific ipv6networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6networkcontainer object
	@return Ipv6networkcontainerAPIUpdateRequest
*/
func (a *Ipv6networkcontainerAPIService) Update(ctx context.Context, reference string) Ipv6networkcontainerAPIUpdateRequest {
	return Ipv6networkcontainerAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateIpv6networkcontainerResponse
func (a *Ipv6networkcontainerAPIService) UpdateExecute(r Ipv6networkcontainerAPIUpdateRequest) (*UpdateIpv6networkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateIpv6networkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6networkcontainerAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6networkcontainer == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6networkcontainer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.ipv6networkcontainer != nil {
		if r.ipv6networkcontainer.Extattrs == nil {
			r.ipv6networkcontainer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.ipv6networkcontainer.Extattrs)[k]; !ok {
				(*r.ipv6networkcontainer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.ipv6networkcontainer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
