/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type NetworkcontainerAPI interface {
	/*
		Get Retrieve networkcontainer objects

		Returns a list of networkcontainer objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NetworkcontainerAPIGetRequest
	*/
	Get(ctx context.Context) NetworkcontainerAPIGetRequest

	// GetExecute executes the request
	//  @return ListNetworkcontainerResponse
	GetExecute(r NetworkcontainerAPIGetRequest) (*ListNetworkcontainerResponse, *http.Response, error)
	/*
		Post Create a networkcontainer object

		Creates a new networkcontainer object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NetworkcontainerAPIPostRequest
	*/
	Post(ctx context.Context) NetworkcontainerAPIPostRequest

	// PostExecute executes the request
	//  @return CreateNetworkcontainerResponse
	PostExecute(r NetworkcontainerAPIPostRequest) (*CreateNetworkcontainerResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a networkcontainer object

		Deletes a specific networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the networkcontainer object
		@return NetworkcontainerAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) NetworkcontainerAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r NetworkcontainerAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific networkcontainer object

		Returns a specific networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the networkcontainer object
		@return NetworkcontainerAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) NetworkcontainerAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetNetworkcontainerResponse
	ReferenceGetExecute(r NetworkcontainerAPIReferenceGetRequest) (*GetNetworkcontainerResponse, *http.Response, error)
	/*
		ReferencePut Update a networkcontainer object

		Updates a specific networkcontainer object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the networkcontainer object
		@return NetworkcontainerAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) NetworkcontainerAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateNetworkcontainerResponse
	ReferencePutExecute(r NetworkcontainerAPIReferencePutRequest) (*UpdateNetworkcontainerResponse, *http.Response, error)
}

// NetworkcontainerAPIService NetworkcontainerAPI service
type NetworkcontainerAPIService internal.Service

type NetworkcontainerAPIGetRequest struct {
	ctx            context.Context
	ApiService     NetworkcontainerAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r NetworkcontainerAPIGetRequest) ReturnFields(returnFields string) NetworkcontainerAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NetworkcontainerAPIGetRequest) ReturnFields2(returnFields2 string) NetworkcontainerAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r NetworkcontainerAPIGetRequest) MaxResults(maxResults int32) NetworkcontainerAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NetworkcontainerAPIGetRequest) ReturnAsObject(returnAsObject int32) NetworkcontainerAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NetworkcontainerAPIGetRequest) Paging(paging int32) NetworkcontainerAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NetworkcontainerAPIGetRequest) PageId(pageId string) NetworkcontainerAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r NetworkcontainerAPIGetRequest) Filters(filters map[string]interface{}) NetworkcontainerAPIGetRequest {
	r.filters = &filters
	return r
}

func (r NetworkcontainerAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) NetworkcontainerAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NetworkcontainerAPIGetRequest) Execute() (*ListNetworkcontainerResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve networkcontainer objects

Returns a list of networkcontainer objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NetworkcontainerAPIGetRequest
*/
func (a *NetworkcontainerAPIService) Get(ctx context.Context) NetworkcontainerAPIGetRequest {
	return NetworkcontainerAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNetworkcontainerResponse
func (a *NetworkcontainerAPIService) GetExecute(r NetworkcontainerAPIGetRequest) (*ListNetworkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNetworkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NetworkcontainerAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/networkcontainer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkcontainerAPIPostRequest struct {
	ctx              context.Context
	ApiService       NetworkcontainerAPI
	networkcontainer *Networkcontainer
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to create
func (r NetworkcontainerAPIPostRequest) Networkcontainer(networkcontainer Networkcontainer) NetworkcontainerAPIPostRequest {
	r.networkcontainer = &networkcontainer
	return r
}

// Enter the field names followed by comma
func (r NetworkcontainerAPIPostRequest) ReturnFields(returnFields string) NetworkcontainerAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NetworkcontainerAPIPostRequest) ReturnFields2(returnFields2 string) NetworkcontainerAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NetworkcontainerAPIPostRequest) ReturnAsObject(returnAsObject int32) NetworkcontainerAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NetworkcontainerAPIPostRequest) Execute() (*CreateNetworkcontainerResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a networkcontainer object

Creates a new networkcontainer object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NetworkcontainerAPIPostRequest
*/
func (a *NetworkcontainerAPIService) Post(ctx context.Context) NetworkcontainerAPIPostRequest {
	return NetworkcontainerAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNetworkcontainerResponse
func (a *NetworkcontainerAPIService) PostExecute(r NetworkcontainerAPIPostRequest) (*CreateNetworkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNetworkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NetworkcontainerAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/networkcontainer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkcontainer == nil {
		return localVarReturnValue, nil, internal.ReportError("networkcontainer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.networkcontainer != nil {
		if r.networkcontainer.Extattrs == nil {
			r.networkcontainer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.networkcontainer.Extattrs)[k]; !ok {
				(*r.networkcontainer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.networkcontainer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkcontainerAPIReferenceDeleteRequest struct {
	ctx           context.Context
	ApiService    NetworkcontainerAPI
	reference     string
	removeSubnets *bool
}

// Remove subnets delete option. Determines whether all child objects should be removed alongside with the network container or child objects should be assigned to another parental container. By default child objects are deleted with the network container.
func (r NetworkcontainerAPIReferenceDeleteRequest) RemoveSubnets(removeSubnets bool) NetworkcontainerAPIReferenceDeleteRequest {
	r.removeSubnets = &removeSubnets
	return r
}

func (r NetworkcontainerAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a networkcontainer object

Deletes a specific networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the networkcontainer object
	@return NetworkcontainerAPIReferenceDeleteRequest
*/
func (a *NetworkcontainerAPIService) ReferenceDelete(ctx context.Context, reference string) NetworkcontainerAPIReferenceDeleteRequest {
	return NetworkcontainerAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NetworkcontainerAPIService) ReferenceDeleteExecute(r NetworkcontainerAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NetworkcontainerAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.removeSubnets != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "remove_subnets", r.removeSubnets, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetworkcontainerAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     NetworkcontainerAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r NetworkcontainerAPIReferenceGetRequest) ReturnFields(returnFields string) NetworkcontainerAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NetworkcontainerAPIReferenceGetRequest) ReturnFields2(returnFields2 string) NetworkcontainerAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NetworkcontainerAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) NetworkcontainerAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NetworkcontainerAPIReferenceGetRequest) Execute() (*GetNetworkcontainerResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific networkcontainer object

Returns a specific networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the networkcontainer object
	@return NetworkcontainerAPIReferenceGetRequest
*/
func (a *NetworkcontainerAPIService) ReferenceGet(ctx context.Context, reference string) NetworkcontainerAPIReferenceGetRequest {
	return NetworkcontainerAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNetworkcontainerResponse
func (a *NetworkcontainerAPIService) ReferenceGetExecute(r NetworkcontainerAPIReferenceGetRequest) (*GetNetworkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNetworkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NetworkcontainerAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkcontainerAPIReferencePutRequest struct {
	ctx              context.Context
	ApiService       NetworkcontainerAPI
	reference        string
	networkcontainer *Networkcontainer
	returnFields     *string
	returnFields2    *string
	returnAsObject   *int32
}

// Object data to update
func (r NetworkcontainerAPIReferencePutRequest) Networkcontainer(networkcontainer Networkcontainer) NetworkcontainerAPIReferencePutRequest {
	r.networkcontainer = &networkcontainer
	return r
}

// Enter the field names followed by comma
func (r NetworkcontainerAPIReferencePutRequest) ReturnFields(returnFields string) NetworkcontainerAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NetworkcontainerAPIReferencePutRequest) ReturnFields2(returnFields2 string) NetworkcontainerAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r NetworkcontainerAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) NetworkcontainerAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NetworkcontainerAPIReferencePutRequest) Execute() (*UpdateNetworkcontainerResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a networkcontainer object

Updates a specific networkcontainer object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the networkcontainer object
	@return NetworkcontainerAPIReferencePutRequest
*/
func (a *NetworkcontainerAPIService) ReferencePut(ctx context.Context, reference string) NetworkcontainerAPIReferencePutRequest {
	return NetworkcontainerAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNetworkcontainerResponse
func (a *NetworkcontainerAPIService) ReferencePutExecute(r NetworkcontainerAPIReferencePutRequest) (*UpdateNetworkcontainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNetworkcontainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NetworkcontainerAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/networkcontainer/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkcontainer == nil {
		return localVarReturnValue, nil, internal.ReportError("networkcontainer is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.networkcontainer != nil {
		if r.networkcontainer.Extattrs == nil {
			r.networkcontainer.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.networkcontainer.Extattrs)[k]; !ok {
				(*r.networkcontainer.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.networkcontainer
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
