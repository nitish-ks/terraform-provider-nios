/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type VlanrangeAPI interface {
	/*
		Get Retrieve vlanrange objects

		Returns a list of vlanrange objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return VlanrangeAPIGetRequest
	*/
	Get(ctx context.Context) VlanrangeAPIGetRequest

	// GetExecute executes the request
	//  @return ListVlanrangeResponse
	GetExecute(r VlanrangeAPIGetRequest) (*ListVlanrangeResponse, *http.Response, error)
	/*
		Post Create a vlanrange object

		Creates a new vlanrange object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return VlanrangeAPIPostRequest
	*/
	Post(ctx context.Context) VlanrangeAPIPostRequest

	// PostExecute executes the request
	//  @return CreateVlanrangeResponse
	PostExecute(r VlanrangeAPIPostRequest) (*CreateVlanrangeResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a vlanrange object

		Deletes a specific vlanrange object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the vlanrange object
		@return VlanrangeAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) VlanrangeAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r VlanrangeAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific vlanrange object

		Returns a specific vlanrange object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the vlanrange object
		@return VlanrangeAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) VlanrangeAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetVlanrangeResponse
	ReferenceGetExecute(r VlanrangeAPIReferenceGetRequest) (*GetVlanrangeResponse, *http.Response, error)
	/*
		ReferencePut Update a vlanrange object

		Updates a specific vlanrange object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the vlanrange object
		@return VlanrangeAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) VlanrangeAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateVlanrangeResponse
	ReferencePutExecute(r VlanrangeAPIReferencePutRequest) (*UpdateVlanrangeResponse, *http.Response, error)
}

// VlanrangeAPIService VlanrangeAPI service
type VlanrangeAPIService internal.Service

type VlanrangeAPIGetRequest struct {
	ctx            context.Context
	ApiService     VlanrangeAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r VlanrangeAPIGetRequest) ReturnFields(returnFields string) VlanrangeAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r VlanrangeAPIGetRequest) ReturnFields2(returnFields2 string) VlanrangeAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r VlanrangeAPIGetRequest) MaxResults(maxResults int32) VlanrangeAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r VlanrangeAPIGetRequest) ReturnAsObject(returnAsObject int32) VlanrangeAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r VlanrangeAPIGetRequest) Paging(paging int32) VlanrangeAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r VlanrangeAPIGetRequest) PageId(pageId string) VlanrangeAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r VlanrangeAPIGetRequest) Filters(filters map[string]interface{}) VlanrangeAPIGetRequest {
	r.filters = &filters
	return r
}

func (r VlanrangeAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) VlanrangeAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r VlanrangeAPIGetRequest) Execute() (*ListVlanrangeResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve vlanrange objects

Returns a list of vlanrange objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VlanrangeAPIGetRequest
*/
func (a *VlanrangeAPIService) Get(ctx context.Context) VlanrangeAPIGetRequest {
	return VlanrangeAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListVlanrangeResponse
func (a *VlanrangeAPIService) GetExecute(r VlanrangeAPIGetRequest) (*ListVlanrangeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListVlanrangeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "VlanrangeAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/vlanrange"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type VlanrangeAPIPostRequest struct {
	ctx            context.Context
	ApiService     VlanrangeAPI
	vlanrange      *Vlanrange
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to create
func (r VlanrangeAPIPostRequest) Vlanrange(vlanrange Vlanrange) VlanrangeAPIPostRequest {
	r.vlanrange = &vlanrange
	return r
}

// Enter the field names followed by comma
func (r VlanrangeAPIPostRequest) ReturnFields(returnFields string) VlanrangeAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r VlanrangeAPIPostRequest) ReturnFields2(returnFields2 string) VlanrangeAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r VlanrangeAPIPostRequest) ReturnAsObject(returnAsObject int32) VlanrangeAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r VlanrangeAPIPostRequest) Execute() (*CreateVlanrangeResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a vlanrange object

Creates a new vlanrange object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VlanrangeAPIPostRequest
*/
func (a *VlanrangeAPIService) Post(ctx context.Context) VlanrangeAPIPostRequest {
	return VlanrangeAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateVlanrangeResponse
func (a *VlanrangeAPIService) PostExecute(r VlanrangeAPIPostRequest) (*CreateVlanrangeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateVlanrangeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "VlanrangeAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/vlanrange"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vlanrange == nil {
		return localVarReturnValue, nil, internal.ReportError("vlanrange is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.vlanrange != nil {
		if r.vlanrange.Extattrs == nil {
			r.vlanrange.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.vlanrange.Extattrs)[k]; !ok {
				(*r.vlanrange.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.vlanrange
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type VlanrangeAPIReferenceDeleteRequest struct {
	ctx         context.Context
	ApiService  VlanrangeAPI
	reference   string
	deleteVlans *bool
}

// Vlans delete option. Determines whether all child objects should be removed alongside with the VLAN Range or child objects should be assigned to another parental VLAN Range/View. By default child objects are re-parented.
func (r VlanrangeAPIReferenceDeleteRequest) DeleteVlans(deleteVlans bool) VlanrangeAPIReferenceDeleteRequest {
	r.deleteVlans = &deleteVlans
	return r
}

func (r VlanrangeAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a vlanrange object

Deletes a specific vlanrange object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the vlanrange object
	@return VlanrangeAPIReferenceDeleteRequest
*/
func (a *VlanrangeAPIService) ReferenceDelete(ctx context.Context, reference string) VlanrangeAPIReferenceDeleteRequest {
	return VlanrangeAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *VlanrangeAPIService) ReferenceDeleteExecute(r VlanrangeAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "VlanrangeAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/vlanrange/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deleteVlans != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "delete_vlans", r.deleteVlans, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VlanrangeAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     VlanrangeAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r VlanrangeAPIReferenceGetRequest) ReturnFields(returnFields string) VlanrangeAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r VlanrangeAPIReferenceGetRequest) ReturnFields2(returnFields2 string) VlanrangeAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r VlanrangeAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) VlanrangeAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r VlanrangeAPIReferenceGetRequest) Execute() (*GetVlanrangeResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific vlanrange object

Returns a specific vlanrange object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the vlanrange object
	@return VlanrangeAPIReferenceGetRequest
*/
func (a *VlanrangeAPIService) ReferenceGet(ctx context.Context, reference string) VlanrangeAPIReferenceGetRequest {
	return VlanrangeAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetVlanrangeResponse
func (a *VlanrangeAPIService) ReferenceGetExecute(r VlanrangeAPIReferenceGetRequest) (*GetVlanrangeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetVlanrangeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "VlanrangeAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/vlanrange/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type VlanrangeAPIReferencePutRequest struct {
	ctx            context.Context
	ApiService     VlanrangeAPI
	reference      string
	vlanrange      *Vlanrange
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Object data to update
func (r VlanrangeAPIReferencePutRequest) Vlanrange(vlanrange Vlanrange) VlanrangeAPIReferencePutRequest {
	r.vlanrange = &vlanrange
	return r
}

// Enter the field names followed by comma
func (r VlanrangeAPIReferencePutRequest) ReturnFields(returnFields string) VlanrangeAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r VlanrangeAPIReferencePutRequest) ReturnFields2(returnFields2 string) VlanrangeAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r VlanrangeAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) VlanrangeAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r VlanrangeAPIReferencePutRequest) Execute() (*UpdateVlanrangeResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a vlanrange object

Updates a specific vlanrange object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the vlanrange object
	@return VlanrangeAPIReferencePutRequest
*/
func (a *VlanrangeAPIService) ReferencePut(ctx context.Context, reference string) VlanrangeAPIReferencePutRequest {
	return VlanrangeAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateVlanrangeResponse
func (a *VlanrangeAPIService) ReferencePutExecute(r VlanrangeAPIReferencePutRequest) (*UpdateVlanrangeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateVlanrangeResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "VlanrangeAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/vlanrange/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vlanrange == nil {
		return localVarReturnValue, nil, internal.ReportError("vlanrange is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.vlanrange != nil {
		if r.vlanrange.Extattrs == nil {
			r.vlanrange.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.vlanrange.Extattrs)[k]; !ok {
				(*r.vlanrange.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.vlanrange
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
