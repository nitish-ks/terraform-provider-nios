/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
	"github.com/Infoblox-CTO/infoblox-nios-go-client/option"
)

const serviceBasePath = "/wapi/v2.13.6"

// APIClient manages communication with the Infoblox IPAM API 2.13.6
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
	BulkhostAPI BulkhostAPI
	BulkhostnametemplateAPI BulkhostnametemplateAPI
	DiscoverytaskAPI DiscoverytaskAPI
	HostnamerewritepolicyAPI HostnamerewritepolicyAPI
	IpamStatisticsAPI IpamStatisticsAPI
	Ipv4addressAPI Ipv4addressAPI
	Ipv6addressAPI Ipv6addressAPI
	Ipv6networkAPI Ipv6networkAPI
	Ipv6networkcontainerAPI Ipv6networkcontainerAPI
	Ipv6networktemplateAPI Ipv6networktemplateAPI
	NetworkAPI NetworkAPI
	NetworkDiscoveryAPI NetworkDiscoveryAPI
	NetworkcontainerAPI NetworkcontainerAPI
	NetworktemplateAPI NetworktemplateAPI
	NetworkviewAPI NetworkviewAPI
	SuperhostAPI SuperhostAPI
	SuperhostchildAPI SuperhostchildAPI
	VlanAPI VlanAPI
	VlanrangeAPI VlanrangeAPI
	VlanviewAPI VlanviewAPI
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithNIOSHostUrl(string) sets the URL for NIOS Portal.
// - WithNIOSUsername(string) sets the Username for the NIOS Portal.
// - WithNIOSPassword(string) sets the Password for the NIOS Portal.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultExtAttrs(map[string]struct{ Value string }) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

	// API Services
	c.BulkhostAPI = (*BulkhostAPIService)(&c.Common)
	c.BulkhostnametemplateAPI = (*BulkhostnametemplateAPIService)(&c.Common)
	c.DiscoverytaskAPI = (*DiscoverytaskAPIService)(&c.Common)
	c.HostnamerewritepolicyAPI = (*HostnamerewritepolicyAPIService)(&c.Common)
	c.IpamStatisticsAPI = (*IpamStatisticsAPIService)(&c.Common)
	c.Ipv4addressAPI = (*Ipv4addressAPIService)(&c.Common)
	c.Ipv6addressAPI = (*Ipv6addressAPIService)(&c.Common)
	c.Ipv6networkAPI = (*Ipv6networkAPIService)(&c.Common)
	c.Ipv6networkcontainerAPI = (*Ipv6networkcontainerAPIService)(&c.Common)
	c.Ipv6networktemplateAPI = (*Ipv6networktemplateAPIService)(&c.Common)
	c.NetworkAPI = (*NetworkAPIService)(&c.Common)
	c.NetworkDiscoveryAPI = (*NetworkDiscoveryAPIService)(&c.Common)
	c.NetworkcontainerAPI = (*NetworkcontainerAPIService)(&c.Common)
	c.NetworktemplateAPI = (*NetworktemplateAPIService)(&c.Common)
	c.NetworkviewAPI = (*NetworkviewAPIService)(&c.Common)
	c.SuperhostAPI = (*SuperhostAPIService)(&c.Common)
	c.SuperhostchildAPI = (*SuperhostchildAPIService)(&c.Common)
	c.VlanAPI = (*VlanAPIService)(&c.Common)
	c.VlanrangeAPI = (*VlanrangeAPIService)(&c.Common)
	c.VlanviewAPI = (*VlanviewAPIService)(&c.Common)

	return c
}