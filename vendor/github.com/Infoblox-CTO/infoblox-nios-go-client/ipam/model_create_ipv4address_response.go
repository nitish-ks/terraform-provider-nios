/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// CreateIpv4addressResponse - struct for CreateIpv4addressResponse
type CreateIpv4addressResponse struct {
	CreateIpv4addressResponseAsObject *CreateIpv4addressResponseAsObject
	String                            *string
}

// CreateIpv4addressResponseAsObjectAsCreateIpv4addressResponse is a convenience function that returns CreateIpv4addressResponseAsObject wrapped in CreateIpv4addressResponse
func CreateIpv4addressResponseAsObjectAsCreateIpv4addressResponse(v *CreateIpv4addressResponseAsObject) CreateIpv4addressResponse {
	return CreateIpv4addressResponse{
		CreateIpv4addressResponseAsObject: v,
	}
}

// stringAsCreateIpv4addressResponse is a convenience function that returns string wrapped in CreateIpv4addressResponse
func StringAsCreateIpv4addressResponse(v *string) CreateIpv4addressResponse {
	return CreateIpv4addressResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateIpv4addressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateIpv4addressResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateIpv4addressResponseAsObject)
	if err == nil {
		jsonCreateIpv4addressResponseAsObject, _ := json.Marshal(dst.CreateIpv4addressResponseAsObject)
		if string(jsonCreateIpv4addressResponseAsObject) == "{}" { // empty struct
			dst.CreateIpv4addressResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateIpv4addressResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateIpv4addressResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateIpv4addressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateIpv4addressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateIpv4addressResponse) MarshalJSON() ([]byte, error) {
	if src.CreateIpv4addressResponseAsObject != nil {
		return json.Marshal(&src.CreateIpv4addressResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateIpv4addressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateIpv4addressResponseAsObject != nil {
		return obj.CreateIpv4addressResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateIpv4addressResponse struct {
	value *CreateIpv4addressResponse
	isSet bool
}

func (v NullableCreateIpv4addressResponse) Get() *CreateIpv4addressResponse {
	return v.value
}

func (v *NullableCreateIpv4addressResponse) Set(val *CreateIpv4addressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIpv4addressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIpv4addressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIpv4addressResponse(val *CreateIpv4addressResponse) *NullableCreateIpv4addressResponse {
	return &NullableCreateIpv4addressResponse{value: val, isSet: true}
}

func (v NullableCreateIpv4addressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIpv4addressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
