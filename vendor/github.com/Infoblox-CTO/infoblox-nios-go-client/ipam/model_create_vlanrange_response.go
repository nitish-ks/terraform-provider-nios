/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// CreateVlanrangeResponse - struct for CreateVlanrangeResponse
type CreateVlanrangeResponse struct {
	CreateVlanrangeResponseAsObject *CreateVlanrangeResponseAsObject
	String                          *string
}

// CreateVlanrangeResponseAsObjectAsCreateVlanrangeResponse is a convenience function that returns CreateVlanrangeResponseAsObject wrapped in CreateVlanrangeResponse
func CreateVlanrangeResponseAsObjectAsCreateVlanrangeResponse(v *CreateVlanrangeResponseAsObject) CreateVlanrangeResponse {
	return CreateVlanrangeResponse{
		CreateVlanrangeResponseAsObject: v,
	}
}

// stringAsCreateVlanrangeResponse is a convenience function that returns string wrapped in CreateVlanrangeResponse
func StringAsCreateVlanrangeResponse(v *string) CreateVlanrangeResponse {
	return CreateVlanrangeResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateVlanrangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateVlanrangeResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateVlanrangeResponseAsObject)
	if err == nil {
		jsonCreateVlanrangeResponseAsObject, _ := json.Marshal(dst.CreateVlanrangeResponseAsObject)
		if string(jsonCreateVlanrangeResponseAsObject) == "{}" { // empty struct
			dst.CreateVlanrangeResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateVlanrangeResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateVlanrangeResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateVlanrangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateVlanrangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateVlanrangeResponse) MarshalJSON() ([]byte, error) {
	if src.CreateVlanrangeResponseAsObject != nil {
		return json.Marshal(&src.CreateVlanrangeResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateVlanrangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateVlanrangeResponseAsObject != nil {
		return obj.CreateVlanrangeResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateVlanrangeResponse struct {
	value *CreateVlanrangeResponse
	isSet bool
}

func (v NullableCreateVlanrangeResponse) Get() *CreateVlanrangeResponse {
	return v.value
}

func (v *NullableCreateVlanrangeResponse) Set(val *CreateVlanrangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVlanrangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVlanrangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVlanrangeResponse(val *CreateVlanrangeResponse) *NullableCreateVlanrangeResponse {
	return &NullableCreateVlanrangeResponse{value: val, isSet: true}
}

func (v NullableCreateVlanrangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVlanrangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
