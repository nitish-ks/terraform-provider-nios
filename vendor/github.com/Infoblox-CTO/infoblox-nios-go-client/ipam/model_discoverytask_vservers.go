/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the DiscoverytaskVservers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoverytaskVservers{}

// DiscoverytaskVservers struct for DiscoverytaskVservers
type DiscoverytaskVservers struct {
	// The disable flag of a vSphere server.
	Disable *bool `json:"disable,omitempty"`
	// The connection protocol of a vSphere server.
	ConnectionProtocol *string `json:"connection_protocol,omitempty"`
	// The FQDN (Fully Qualified Domain Name) or IP address of the vShpere server.
	FqdnOrIp *string `json:"fqdn_or_ip,omitempty"`
	// The user password on the vSphere server.
	Password *string `json:"password,omitempty"`
	// The connection port that the vSphere server uses.
	Port *int64 `json:"port,omitempty"`
	// The user name on the vSphere server.
	Username             *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiscoverytaskVservers DiscoverytaskVservers

// NewDiscoverytaskVservers instantiates a new DiscoverytaskVservers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoverytaskVservers() *DiscoverytaskVservers {
	this := DiscoverytaskVservers{}
	return &this
}

// NewDiscoverytaskVserversWithDefaults instantiates a new DiscoverytaskVservers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoverytaskVserversWithDefaults() *DiscoverytaskVservers {
	this := DiscoverytaskVservers{}
	return &this
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DiscoverytaskVservers) SetDisable(v bool) {
	o.Disable = &v
}

// GetConnectionProtocol returns the ConnectionProtocol field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetConnectionProtocol() string {
	if o == nil || IsNil(o.ConnectionProtocol) {
		var ret string
		return ret
	}
	return *o.ConnectionProtocol
}

// GetConnectionProtocolOk returns a tuple with the ConnectionProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetConnectionProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionProtocol) {
		return nil, false
	}
	return o.ConnectionProtocol, true
}

// HasConnectionProtocol returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasConnectionProtocol() bool {
	if o != nil && !IsNil(o.ConnectionProtocol) {
		return true
	}

	return false
}

// SetConnectionProtocol gets a reference to the given string and assigns it to the ConnectionProtocol field.
func (o *DiscoverytaskVservers) SetConnectionProtocol(v string) {
	o.ConnectionProtocol = &v
}

// GetFqdnOrIp returns the FqdnOrIp field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetFqdnOrIp() string {
	if o == nil || IsNil(o.FqdnOrIp) {
		var ret string
		return ret
	}
	return *o.FqdnOrIp
}

// GetFqdnOrIpOk returns a tuple with the FqdnOrIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetFqdnOrIpOk() (*string, bool) {
	if o == nil || IsNil(o.FqdnOrIp) {
		return nil, false
	}
	return o.FqdnOrIp, true
}

// HasFqdnOrIp returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasFqdnOrIp() bool {
	if o != nil && !IsNil(o.FqdnOrIp) {
		return true
	}

	return false
}

// SetFqdnOrIp gets a reference to the given string and assigns it to the FqdnOrIp field.
func (o *DiscoverytaskVservers) SetFqdnOrIp(v string) {
	o.FqdnOrIp = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *DiscoverytaskVservers) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DiscoverytaskVservers) SetPort(v int64) {
	o.Port = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DiscoverytaskVservers) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverytaskVservers) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DiscoverytaskVservers) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DiscoverytaskVservers) SetUsername(v string) {
	o.Username = &v
}

func (o DiscoverytaskVservers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoverytaskVservers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.ConnectionProtocol) {
		toSerialize["connection_protocol"] = o.ConnectionProtocol
	}
	if !IsNil(o.FqdnOrIp) {
		toSerialize["fqdn_or_ip"] = o.FqdnOrIp
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiscoverytaskVservers) UnmarshalJSON(data []byte) (err error) {
	varDiscoverytaskVservers := _DiscoverytaskVservers{}

	err = json.Unmarshal(data, &varDiscoverytaskVservers)

	if err != nil {
		return err
	}

	*o = DiscoverytaskVservers(varDiscoverytaskVservers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disable")
		delete(additionalProperties, "connection_protocol")
		delete(additionalProperties, "fqdn_or_ip")
		delete(additionalProperties, "password")
		delete(additionalProperties, "port")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiscoverytaskVservers struct {
	value *DiscoverytaskVservers
	isSet bool
}

func (v NullableDiscoverytaskVservers) Get() *DiscoverytaskVservers {
	return v.value
}

func (v *NullableDiscoverytaskVservers) Set(val *DiscoverytaskVservers) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoverytaskVservers) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoverytaskVservers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoverytaskVservers(val *DiscoverytaskVservers) *NullableDiscoverytaskVservers {
	return &NullableDiscoverytaskVservers{value: val, isSet: true}
}

func (v NullableDiscoverytaskVservers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoverytaskVservers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
