/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetBulkhostnametemplateResponse - struct for GetBulkhostnametemplateResponse
type GetBulkhostnametemplateResponse struct {
	Bulkhostnametemplate                          *Bulkhostnametemplate
	GetBulkhostnametemplateResponseObjectAsResult *GetBulkhostnametemplateResponseObjectAsResult
}

// BulkhostnametemplateAsGetBulkhostnametemplateResponse is a convenience function that returns Bulkhostnametemplate wrapped in GetBulkhostnametemplateResponse
func BulkhostnametemplateAsGetBulkhostnametemplateResponse(v *Bulkhostnametemplate) GetBulkhostnametemplateResponse {
	return GetBulkhostnametemplateResponse{
		Bulkhostnametemplate: v,
	}
}

// GetBulkhostnametemplateResponseObjectAsResultAsGetBulkhostnametemplateResponse is a convenience function that returns GetBulkhostnametemplateResponseObjectAsResult wrapped in GetBulkhostnametemplateResponse
func GetBulkhostnametemplateResponseObjectAsResultAsGetBulkhostnametemplateResponse(v *GetBulkhostnametemplateResponseObjectAsResult) GetBulkhostnametemplateResponse {
	return GetBulkhostnametemplateResponse{
		GetBulkhostnametemplateResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBulkhostnametemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bulkhostnametemplate
	err = newStrictDecoder(data).Decode(&dst.Bulkhostnametemplate)
	if err == nil {
		jsonBulkhostnametemplate, _ := json.Marshal(dst.Bulkhostnametemplate)
		if string(jsonBulkhostnametemplate) == "{}" { // empty struct
			dst.Bulkhostnametemplate = nil
		} else {
			match++
		}
	} else {
		dst.Bulkhostnametemplate = nil
	}

	// try to unmarshal data into GetBulkhostnametemplateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetBulkhostnametemplateResponseObjectAsResult)
	if err == nil {
		jsonGetBulkhostnametemplateResponseObjectAsResult, _ := json.Marshal(dst.GetBulkhostnametemplateResponseObjectAsResult)
		if string(jsonGetBulkhostnametemplateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetBulkhostnametemplateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetBulkhostnametemplateResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bulkhostnametemplate = nil
		dst.GetBulkhostnametemplateResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetBulkhostnametemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetBulkhostnametemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBulkhostnametemplateResponse) MarshalJSON() ([]byte, error) {
	if src.Bulkhostnametemplate != nil {
		return json.Marshal(&src.Bulkhostnametemplate)
	}

	if src.GetBulkhostnametemplateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetBulkhostnametemplateResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBulkhostnametemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Bulkhostnametemplate != nil {
		return obj.Bulkhostnametemplate
	}

	if obj.GetBulkhostnametemplateResponseObjectAsResult != nil {
		return obj.GetBulkhostnametemplateResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetBulkhostnametemplateResponse struct {
	value *GetBulkhostnametemplateResponse
	isSet bool
}

func (v NullableGetBulkhostnametemplateResponse) Get() *GetBulkhostnametemplateResponse {
	return v.value
}

func (v *NullableGetBulkhostnametemplateResponse) Set(val *GetBulkhostnametemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBulkhostnametemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBulkhostnametemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBulkhostnametemplateResponse(val *GetBulkhostnametemplateResponse) *NullableGetBulkhostnametemplateResponse {
	return &NullableGetBulkhostnametemplateResponse{value: val, isSet: true}
}

func (v NullableGetBulkhostnametemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBulkhostnametemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
