/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetCapacityreportResponse - struct for GetCapacityreportResponse
type GetCapacityreportResponse struct {
	Capacityreport                          *Capacityreport
	GetCapacityreportResponseObjectAsResult *GetCapacityreportResponseObjectAsResult
}

// CapacityreportAsGetCapacityreportResponse is a convenience function that returns Capacityreport wrapped in GetCapacityreportResponse
func CapacityreportAsGetCapacityreportResponse(v *Capacityreport) GetCapacityreportResponse {
	return GetCapacityreportResponse{
		Capacityreport: v,
	}
}

// GetCapacityreportResponseObjectAsResultAsGetCapacityreportResponse is a convenience function that returns GetCapacityreportResponseObjectAsResult wrapped in GetCapacityreportResponse
func GetCapacityreportResponseObjectAsResultAsGetCapacityreportResponse(v *GetCapacityreportResponseObjectAsResult) GetCapacityreportResponse {
	return GetCapacityreportResponse{
		GetCapacityreportResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCapacityreportResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Capacityreport
	err = newStrictDecoder(data).Decode(&dst.Capacityreport)
	if err == nil {
		jsonCapacityreport, _ := json.Marshal(dst.Capacityreport)
		if string(jsonCapacityreport) == "{}" { // empty struct
			dst.Capacityreport = nil
		} else {
			match++
		}
	} else {
		dst.Capacityreport = nil
	}

	// try to unmarshal data into GetCapacityreportResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetCapacityreportResponseObjectAsResult)
	if err == nil {
		jsonGetCapacityreportResponseObjectAsResult, _ := json.Marshal(dst.GetCapacityreportResponseObjectAsResult)
		if string(jsonGetCapacityreportResponseObjectAsResult) == "{}" { // empty struct
			dst.GetCapacityreportResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetCapacityreportResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Capacityreport = nil
		dst.GetCapacityreportResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetCapacityreportResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetCapacityreportResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCapacityreportResponse) MarshalJSON() ([]byte, error) {
	if src.Capacityreport != nil {
		return json.Marshal(&src.Capacityreport)
	}

	if src.GetCapacityreportResponseObjectAsResult != nil {
		return json.Marshal(&src.GetCapacityreportResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCapacityreportResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Capacityreport != nil {
		return obj.Capacityreport
	}

	if obj.GetCapacityreportResponseObjectAsResult != nil {
		return obj.GetCapacityreportResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetCapacityreportResponse struct {
	value *GetCapacityreportResponse
	isSet bool
}

func (v NullableGetCapacityreportResponse) Get() *GetCapacityreportResponse {
	return v.value
}

func (v *NullableGetCapacityreportResponse) Set(val *GetCapacityreportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCapacityreportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCapacityreportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCapacityreportResponse(val *GetCapacityreportResponse) *NullableGetCapacityreportResponse {
	return &NullableGetCapacityreportResponse{value: val, isSet: true}
}

func (v NullableGetCapacityreportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCapacityreportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
