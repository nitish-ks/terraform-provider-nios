/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetDiscoverytaskResponse - struct for GetDiscoverytaskResponse
type GetDiscoverytaskResponse struct {
	Discoverytask                          *Discoverytask
	GetDiscoverytaskResponseObjectAsResult *GetDiscoverytaskResponseObjectAsResult
}

// DiscoverytaskAsGetDiscoverytaskResponse is a convenience function that returns Discoverytask wrapped in GetDiscoverytaskResponse
func DiscoverytaskAsGetDiscoverytaskResponse(v *Discoverytask) GetDiscoverytaskResponse {
	return GetDiscoverytaskResponse{
		Discoverytask: v,
	}
}

// GetDiscoverytaskResponseObjectAsResultAsGetDiscoverytaskResponse is a convenience function that returns GetDiscoverytaskResponseObjectAsResult wrapped in GetDiscoverytaskResponse
func GetDiscoverytaskResponseObjectAsResultAsGetDiscoverytaskResponse(v *GetDiscoverytaskResponseObjectAsResult) GetDiscoverytaskResponse {
	return GetDiscoverytaskResponse{
		GetDiscoverytaskResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDiscoverytaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Discoverytask
	err = newStrictDecoder(data).Decode(&dst.Discoverytask)
	if err == nil {
		jsonDiscoverytask, _ := json.Marshal(dst.Discoverytask)
		if string(jsonDiscoverytask) == "{}" { // empty struct
			dst.Discoverytask = nil
		} else {
			match++
		}
	} else {
		dst.Discoverytask = nil
	}

	// try to unmarshal data into GetDiscoverytaskResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDiscoverytaskResponseObjectAsResult)
	if err == nil {
		jsonGetDiscoverytaskResponseObjectAsResult, _ := json.Marshal(dst.GetDiscoverytaskResponseObjectAsResult)
		if string(jsonGetDiscoverytaskResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDiscoverytaskResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDiscoverytaskResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Discoverytask = nil
		dst.GetDiscoverytaskResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDiscoverytaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDiscoverytaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDiscoverytaskResponse) MarshalJSON() ([]byte, error) {
	if src.Discoverytask != nil {
		return json.Marshal(&src.Discoverytask)
	}

	if src.GetDiscoverytaskResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDiscoverytaskResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDiscoverytaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Discoverytask != nil {
		return obj.Discoverytask
	}

	if obj.GetDiscoverytaskResponseObjectAsResult != nil {
		return obj.GetDiscoverytaskResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDiscoverytaskResponse struct {
	value *GetDiscoverytaskResponse
	isSet bool
}

func (v NullableGetDiscoverytaskResponse) Get() *GetDiscoverytaskResponse {
	return v.value
}

func (v *NullableGetDiscoverytaskResponse) Set(val *GetDiscoverytaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDiscoverytaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDiscoverytaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDiscoverytaskResponse(val *GetDiscoverytaskResponse) *NullableGetDiscoverytaskResponse {
	return &NullableGetDiscoverytaskResponse{value: val, isSet: true}
}

func (v NullableGetDiscoverytaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDiscoverytaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
