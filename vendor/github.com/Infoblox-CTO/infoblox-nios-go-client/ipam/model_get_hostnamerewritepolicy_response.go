/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetHostnamerewritepolicyResponse - struct for GetHostnamerewritepolicyResponse
type GetHostnamerewritepolicyResponse struct {
	GetHostnamerewritepolicyResponseObjectAsResult *GetHostnamerewritepolicyResponseObjectAsResult
	Hostnamerewritepolicy                          *Hostnamerewritepolicy
}

// GetHostnamerewritepolicyResponseObjectAsResultAsGetHostnamerewritepolicyResponse is a convenience function that returns GetHostnamerewritepolicyResponseObjectAsResult wrapped in GetHostnamerewritepolicyResponse
func GetHostnamerewritepolicyResponseObjectAsResultAsGetHostnamerewritepolicyResponse(v *GetHostnamerewritepolicyResponseObjectAsResult) GetHostnamerewritepolicyResponse {
	return GetHostnamerewritepolicyResponse{
		GetHostnamerewritepolicyResponseObjectAsResult: v,
	}
}

// HostnamerewritepolicyAsGetHostnamerewritepolicyResponse is a convenience function that returns Hostnamerewritepolicy wrapped in GetHostnamerewritepolicyResponse
func HostnamerewritepolicyAsGetHostnamerewritepolicyResponse(v *Hostnamerewritepolicy) GetHostnamerewritepolicyResponse {
	return GetHostnamerewritepolicyResponse{
		Hostnamerewritepolicy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetHostnamerewritepolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetHostnamerewritepolicyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetHostnamerewritepolicyResponseObjectAsResult)
	if err == nil {
		jsonGetHostnamerewritepolicyResponseObjectAsResult, _ := json.Marshal(dst.GetHostnamerewritepolicyResponseObjectAsResult)
		if string(jsonGetHostnamerewritepolicyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetHostnamerewritepolicyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetHostnamerewritepolicyResponseObjectAsResult = nil
	}

	// try to unmarshal data into Hostnamerewritepolicy
	err = newStrictDecoder(data).Decode(&dst.Hostnamerewritepolicy)
	if err == nil {
		jsonHostnamerewritepolicy, _ := json.Marshal(dst.Hostnamerewritepolicy)
		if string(jsonHostnamerewritepolicy) == "{}" { // empty struct
			dst.Hostnamerewritepolicy = nil
		} else {
			match++
		}
	} else {
		dst.Hostnamerewritepolicy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetHostnamerewritepolicyResponseObjectAsResult = nil
		dst.Hostnamerewritepolicy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetHostnamerewritepolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetHostnamerewritepolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetHostnamerewritepolicyResponse) MarshalJSON() ([]byte, error) {
	if src.GetHostnamerewritepolicyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetHostnamerewritepolicyResponseObjectAsResult)
	}

	if src.Hostnamerewritepolicy != nil {
		return json.Marshal(&src.Hostnamerewritepolicy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetHostnamerewritepolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetHostnamerewritepolicyResponseObjectAsResult != nil {
		return obj.GetHostnamerewritepolicyResponseObjectAsResult
	}

	if obj.Hostnamerewritepolicy != nil {
		return obj.Hostnamerewritepolicy
	}

	// all schemas are nil
	return nil
}

type NullableGetHostnamerewritepolicyResponse struct {
	value *GetHostnamerewritepolicyResponse
	isSet bool
}

func (v NullableGetHostnamerewritepolicyResponse) Get() *GetHostnamerewritepolicyResponse {
	return v.value
}

func (v *NullableGetHostnamerewritepolicyResponse) Set(val *GetHostnamerewritepolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHostnamerewritepolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHostnamerewritepolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHostnamerewritepolicyResponse(val *GetHostnamerewritepolicyResponse) *NullableGetHostnamerewritepolicyResponse {
	return &NullableGetHostnamerewritepolicyResponse{value: val, isSet: true}
}

func (v NullableGetHostnamerewritepolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHostnamerewritepolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
