/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetIpv4addressResponse - struct for GetIpv4addressResponse
type GetIpv4addressResponse struct {
	GetIpv4addressResponseObjectAsResult *GetIpv4addressResponseObjectAsResult
	Ipv4address                          *Ipv4address
}

// GetIpv4addressResponseObjectAsResultAsGetIpv4addressResponse is a convenience function that returns GetIpv4addressResponseObjectAsResult wrapped in GetIpv4addressResponse
func GetIpv4addressResponseObjectAsResultAsGetIpv4addressResponse(v *GetIpv4addressResponseObjectAsResult) GetIpv4addressResponse {
	return GetIpv4addressResponse{
		GetIpv4addressResponseObjectAsResult: v,
	}
}

// Ipv4addressAsGetIpv4addressResponse is a convenience function that returns Ipv4address wrapped in GetIpv4addressResponse
func Ipv4addressAsGetIpv4addressResponse(v *Ipv4address) GetIpv4addressResponse {
	return GetIpv4addressResponse{
		Ipv4address: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv4addressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv4addressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv4addressResponseObjectAsResult)
	if err == nil {
		jsonGetIpv4addressResponseObjectAsResult, _ := json.Marshal(dst.GetIpv4addressResponseObjectAsResult)
		if string(jsonGetIpv4addressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv4addressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv4addressResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv4address
	err = newStrictDecoder(data).Decode(&dst.Ipv4address)
	if err == nil {
		jsonIpv4address, _ := json.Marshal(dst.Ipv4address)
		if string(jsonIpv4address) == "{}" { // empty struct
			dst.Ipv4address = nil
		} else {
			match++
		}
	} else {
		dst.Ipv4address = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv4addressResponseObjectAsResult = nil
		dst.Ipv4address = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv4addressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv4addressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv4addressResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv4addressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv4addressResponseObjectAsResult)
	}

	if src.Ipv4address != nil {
		return json.Marshal(&src.Ipv4address)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv4addressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv4addressResponseObjectAsResult != nil {
		return obj.GetIpv4addressResponseObjectAsResult
	}

	if obj.Ipv4address != nil {
		return obj.Ipv4address
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv4addressResponse struct {
	value *GetIpv4addressResponse
	isSet bool
}

func (v NullableGetIpv4addressResponse) Get() *GetIpv4addressResponse {
	return v.value
}

func (v *NullableGetIpv4addressResponse) Set(val *GetIpv4addressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv4addressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv4addressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv4addressResponse(val *GetIpv4addressResponse) *NullableGetIpv4addressResponse {
	return &NullableGetIpv4addressResponse{value: val, isSet: true}
}

func (v NullableGetIpv4addressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv4addressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
