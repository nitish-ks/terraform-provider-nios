/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetIpv6addressResponse - struct for GetIpv6addressResponse
type GetIpv6addressResponse struct {
	GetIpv6addressResponseObjectAsResult *GetIpv6addressResponseObjectAsResult
	Ipv6address                          *Ipv6address
}

// GetIpv6addressResponseObjectAsResultAsGetIpv6addressResponse is a convenience function that returns GetIpv6addressResponseObjectAsResult wrapped in GetIpv6addressResponse
func GetIpv6addressResponseObjectAsResultAsGetIpv6addressResponse(v *GetIpv6addressResponseObjectAsResult) GetIpv6addressResponse {
	return GetIpv6addressResponse{
		GetIpv6addressResponseObjectAsResult: v,
	}
}

// Ipv6addressAsGetIpv6addressResponse is a convenience function that returns Ipv6address wrapped in GetIpv6addressResponse
func Ipv6addressAsGetIpv6addressResponse(v *Ipv6address) GetIpv6addressResponse {
	return GetIpv6addressResponse{
		Ipv6address: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6addressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6addressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6addressResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6addressResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6addressResponseObjectAsResult)
		if string(jsonGetIpv6addressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6addressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6addressResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6address
	err = newStrictDecoder(data).Decode(&dst.Ipv6address)
	if err == nil {
		jsonIpv6address, _ := json.Marshal(dst.Ipv6address)
		if string(jsonIpv6address) == "{}" { // empty struct
			dst.Ipv6address = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6address = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6addressResponseObjectAsResult = nil
		dst.Ipv6address = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6addressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6addressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6addressResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6addressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6addressResponseObjectAsResult)
	}

	if src.Ipv6address != nil {
		return json.Marshal(&src.Ipv6address)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6addressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6addressResponseObjectAsResult != nil {
		return obj.GetIpv6addressResponseObjectAsResult
	}

	if obj.Ipv6address != nil {
		return obj.Ipv6address
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6addressResponse struct {
	value *GetIpv6addressResponse
	isSet bool
}

func (v NullableGetIpv6addressResponse) Get() *GetIpv6addressResponse {
	return v.value
}

func (v *NullableGetIpv6addressResponse) Set(val *GetIpv6addressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6addressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6addressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6addressResponse(val *GetIpv6addressResponse) *NullableGetIpv6addressResponse {
	return &NullableGetIpv6addressResponse{value: val, isSet: true}
}

func (v NullableGetIpv6addressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6addressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
