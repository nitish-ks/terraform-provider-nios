/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetIpv6networkResponse - struct for GetIpv6networkResponse
type GetIpv6networkResponse struct {
	GetIpv6networkResponseObjectAsResult *GetIpv6networkResponseObjectAsResult
	Ipv6network                          *Ipv6network
}

// GetIpv6networkResponseObjectAsResultAsGetIpv6networkResponse is a convenience function that returns GetIpv6networkResponseObjectAsResult wrapped in GetIpv6networkResponse
func GetIpv6networkResponseObjectAsResultAsGetIpv6networkResponse(v *GetIpv6networkResponseObjectAsResult) GetIpv6networkResponse {
	return GetIpv6networkResponse{
		GetIpv6networkResponseObjectAsResult: v,
	}
}

// Ipv6networkAsGetIpv6networkResponse is a convenience function that returns Ipv6network wrapped in GetIpv6networkResponse
func Ipv6networkAsGetIpv6networkResponse(v *Ipv6network) GetIpv6networkResponse {
	return GetIpv6networkResponse{
		Ipv6network: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6networkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6networkResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6networkResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6networkResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6networkResponseObjectAsResult)
		if string(jsonGetIpv6networkResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6networkResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6networkResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6network
	err = newStrictDecoder(data).Decode(&dst.Ipv6network)
	if err == nil {
		jsonIpv6network, _ := json.Marshal(dst.Ipv6network)
		if string(jsonIpv6network) == "{}" { // empty struct
			dst.Ipv6network = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6network = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6networkResponseObjectAsResult = nil
		dst.Ipv6network = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6networkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6networkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6networkResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6networkResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6networkResponseObjectAsResult)
	}

	if src.Ipv6network != nil {
		return json.Marshal(&src.Ipv6network)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6networkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6networkResponseObjectAsResult != nil {
		return obj.GetIpv6networkResponseObjectAsResult
	}

	if obj.Ipv6network != nil {
		return obj.Ipv6network
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6networkResponse struct {
	value *GetIpv6networkResponse
	isSet bool
}

func (v NullableGetIpv6networkResponse) Get() *GetIpv6networkResponse {
	return v.value
}

func (v *NullableGetIpv6networkResponse) Set(val *GetIpv6networkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6networkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6networkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6networkResponse(val *GetIpv6networkResponse) *NullableGetIpv6networkResponse {
	return &NullableGetIpv6networkResponse{value: val, isSet: true}
}

func (v NullableGetIpv6networkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6networkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
