/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetIpv6networkcontainerResponse - struct for GetIpv6networkcontainerResponse
type GetIpv6networkcontainerResponse struct {
	GetIpv6networkcontainerResponseObjectAsResult *GetIpv6networkcontainerResponseObjectAsResult
	Ipv6networkcontainer                          *Ipv6networkcontainer
}

// GetIpv6networkcontainerResponseObjectAsResultAsGetIpv6networkcontainerResponse is a convenience function that returns GetIpv6networkcontainerResponseObjectAsResult wrapped in GetIpv6networkcontainerResponse
func GetIpv6networkcontainerResponseObjectAsResultAsGetIpv6networkcontainerResponse(v *GetIpv6networkcontainerResponseObjectAsResult) GetIpv6networkcontainerResponse {
	return GetIpv6networkcontainerResponse{
		GetIpv6networkcontainerResponseObjectAsResult: v,
	}
}

// Ipv6networkcontainerAsGetIpv6networkcontainerResponse is a convenience function that returns Ipv6networkcontainer wrapped in GetIpv6networkcontainerResponse
func Ipv6networkcontainerAsGetIpv6networkcontainerResponse(v *Ipv6networkcontainer) GetIpv6networkcontainerResponse {
	return GetIpv6networkcontainerResponse{
		Ipv6networkcontainer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6networkcontainerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6networkcontainerResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6networkcontainerResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6networkcontainerResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6networkcontainerResponseObjectAsResult)
		if string(jsonGetIpv6networkcontainerResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6networkcontainerResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6networkcontainerResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6networkcontainer
	err = newStrictDecoder(data).Decode(&dst.Ipv6networkcontainer)
	if err == nil {
		jsonIpv6networkcontainer, _ := json.Marshal(dst.Ipv6networkcontainer)
		if string(jsonIpv6networkcontainer) == "{}" { // empty struct
			dst.Ipv6networkcontainer = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6networkcontainer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6networkcontainerResponseObjectAsResult = nil
		dst.Ipv6networkcontainer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6networkcontainerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6networkcontainerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6networkcontainerResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6networkcontainerResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6networkcontainerResponseObjectAsResult)
	}

	if src.Ipv6networkcontainer != nil {
		return json.Marshal(&src.Ipv6networkcontainer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6networkcontainerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6networkcontainerResponseObjectAsResult != nil {
		return obj.GetIpv6networkcontainerResponseObjectAsResult
	}

	if obj.Ipv6networkcontainer != nil {
		return obj.Ipv6networkcontainer
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6networkcontainerResponse struct {
	value *GetIpv6networkcontainerResponse
	isSet bool
}

func (v NullableGetIpv6networkcontainerResponse) Get() *GetIpv6networkcontainerResponse {
	return v.value
}

func (v *NullableGetIpv6networkcontainerResponse) Set(val *GetIpv6networkcontainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6networkcontainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6networkcontainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6networkcontainerResponse(val *GetIpv6networkcontainerResponse) *NullableGetIpv6networkcontainerResponse {
	return &NullableGetIpv6networkcontainerResponse{value: val, isSet: true}
}

func (v NullableGetIpv6networkcontainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6networkcontainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
