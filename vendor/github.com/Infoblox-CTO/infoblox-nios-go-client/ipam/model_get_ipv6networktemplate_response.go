/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetIpv6networktemplateResponse - struct for GetIpv6networktemplateResponse
type GetIpv6networktemplateResponse struct {
	GetIpv6networktemplateResponseObjectAsResult *GetIpv6networktemplateResponseObjectAsResult
	Ipv6networktemplate                          *Ipv6networktemplate
}

// GetIpv6networktemplateResponseObjectAsResultAsGetIpv6networktemplateResponse is a convenience function that returns GetIpv6networktemplateResponseObjectAsResult wrapped in GetIpv6networktemplateResponse
func GetIpv6networktemplateResponseObjectAsResultAsGetIpv6networktemplateResponse(v *GetIpv6networktemplateResponseObjectAsResult) GetIpv6networktemplateResponse {
	return GetIpv6networktemplateResponse{
		GetIpv6networktemplateResponseObjectAsResult: v,
	}
}

// Ipv6networktemplateAsGetIpv6networktemplateResponse is a convenience function that returns Ipv6networktemplate wrapped in GetIpv6networktemplateResponse
func Ipv6networktemplateAsGetIpv6networktemplateResponse(v *Ipv6networktemplate) GetIpv6networktemplateResponse {
	return GetIpv6networktemplateResponse{
		Ipv6networktemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIpv6networktemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIpv6networktemplateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetIpv6networktemplateResponseObjectAsResult)
	if err == nil {
		jsonGetIpv6networktemplateResponseObjectAsResult, _ := json.Marshal(dst.GetIpv6networktemplateResponseObjectAsResult)
		if string(jsonGetIpv6networktemplateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetIpv6networktemplateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetIpv6networktemplateResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ipv6networktemplate
	err = newStrictDecoder(data).Decode(&dst.Ipv6networktemplate)
	if err == nil {
		jsonIpv6networktemplate, _ := json.Marshal(dst.Ipv6networktemplate)
		if string(jsonIpv6networktemplate) == "{}" { // empty struct
			dst.Ipv6networktemplate = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6networktemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIpv6networktemplateResponseObjectAsResult = nil
		dst.Ipv6networktemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIpv6networktemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIpv6networktemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIpv6networktemplateResponse) MarshalJSON() ([]byte, error) {
	if src.GetIpv6networktemplateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetIpv6networktemplateResponseObjectAsResult)
	}

	if src.Ipv6networktemplate != nil {
		return json.Marshal(&src.Ipv6networktemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIpv6networktemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetIpv6networktemplateResponseObjectAsResult != nil {
		return obj.GetIpv6networktemplateResponseObjectAsResult
	}

	if obj.Ipv6networktemplate != nil {
		return obj.Ipv6networktemplate
	}

	// all schemas are nil
	return nil
}

type NullableGetIpv6networktemplateResponse struct {
	value *GetIpv6networktemplateResponse
	isSet bool
}

func (v NullableGetIpv6networktemplateResponse) Get() *GetIpv6networktemplateResponse {
	return v.value
}

func (v *NullableGetIpv6networktemplateResponse) Set(val *GetIpv6networktemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIpv6networktemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIpv6networktemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIpv6networktemplateResponse(val *GetIpv6networktemplateResponse) *NullableGetIpv6networktemplateResponse {
	return &NullableGetIpv6networktemplateResponse{value: val, isSet: true}
}

func (v NullableGetIpv6networktemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIpv6networktemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
