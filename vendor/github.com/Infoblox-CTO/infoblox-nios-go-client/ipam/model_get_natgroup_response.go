/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetNatgroupResponse - struct for GetNatgroupResponse
type GetNatgroupResponse struct {
	GetNatgroupResponseObjectAsResult *GetNatgroupResponseObjectAsResult
	Natgroup                          *Natgroup
}

// GetNatgroupResponseObjectAsResultAsGetNatgroupResponse is a convenience function that returns GetNatgroupResponseObjectAsResult wrapped in GetNatgroupResponse
func GetNatgroupResponseObjectAsResultAsGetNatgroupResponse(v *GetNatgroupResponseObjectAsResult) GetNatgroupResponse {
	return GetNatgroupResponse{
		GetNatgroupResponseObjectAsResult: v,
	}
}

// NatgroupAsGetNatgroupResponse is a convenience function that returns Natgroup wrapped in GetNatgroupResponse
func NatgroupAsGetNatgroupResponse(v *Natgroup) GetNatgroupResponse {
	return GetNatgroupResponse{
		Natgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNatgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNatgroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNatgroupResponseObjectAsResult)
	if err == nil {
		jsonGetNatgroupResponseObjectAsResult, _ := json.Marshal(dst.GetNatgroupResponseObjectAsResult)
		if string(jsonGetNatgroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNatgroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNatgroupResponseObjectAsResult = nil
	}

	// try to unmarshal data into Natgroup
	err = newStrictDecoder(data).Decode(&dst.Natgroup)
	if err == nil {
		jsonNatgroup, _ := json.Marshal(dst.Natgroup)
		if string(jsonNatgroup) == "{}" { // empty struct
			dst.Natgroup = nil
		} else {
			match++
		}
	} else {
		dst.Natgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNatgroupResponseObjectAsResult = nil
		dst.Natgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNatgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNatgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNatgroupResponse) MarshalJSON() ([]byte, error) {
	if src.GetNatgroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNatgroupResponseObjectAsResult)
	}

	if src.Natgroup != nil {
		return json.Marshal(&src.Natgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNatgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNatgroupResponseObjectAsResult != nil {
		return obj.GetNatgroupResponseObjectAsResult
	}

	if obj.Natgroup != nil {
		return obj.Natgroup
	}

	// all schemas are nil
	return nil
}

type NullableGetNatgroupResponse struct {
	value *GetNatgroupResponse
	isSet bool
}

func (v NullableGetNatgroupResponse) Get() *GetNatgroupResponse {
	return v.value
}

func (v *NullableGetNatgroupResponse) Set(val *GetNatgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNatgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNatgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNatgroupResponse(val *GetNatgroupResponse) *NullableGetNatgroupResponse {
	return &NullableGetNatgroupResponse{value: val, isSet: true}
}

func (v NullableGetNatgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNatgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
