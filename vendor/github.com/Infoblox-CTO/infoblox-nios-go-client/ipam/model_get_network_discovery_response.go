/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetNetworkDiscoveryResponse - struct for GetNetworkDiscoveryResponse
type GetNetworkDiscoveryResponse struct {
	GetNetworkDiscoveryResponseObjectAsResult *GetNetworkDiscoveryResponseObjectAsResult
	NetworkDiscovery                          *NetworkDiscovery
}

// GetNetworkDiscoveryResponseObjectAsResultAsGetNetworkDiscoveryResponse is a convenience function that returns GetNetworkDiscoveryResponseObjectAsResult wrapped in GetNetworkDiscoveryResponse
func GetNetworkDiscoveryResponseObjectAsResultAsGetNetworkDiscoveryResponse(v *GetNetworkDiscoveryResponseObjectAsResult) GetNetworkDiscoveryResponse {
	return GetNetworkDiscoveryResponse{
		GetNetworkDiscoveryResponseObjectAsResult: v,
	}
}

// NetworkDiscoveryAsGetNetworkDiscoveryResponse is a convenience function that returns NetworkDiscovery wrapped in GetNetworkDiscoveryResponse
func NetworkDiscoveryAsGetNetworkDiscoveryResponse(v *NetworkDiscovery) GetNetworkDiscoveryResponse {
	return GetNetworkDiscoveryResponse{
		NetworkDiscovery: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNetworkDiscoveryResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNetworkDiscoveryResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNetworkDiscoveryResponseObjectAsResult)
	if err == nil {
		jsonGetNetworkDiscoveryResponseObjectAsResult, _ := json.Marshal(dst.GetNetworkDiscoveryResponseObjectAsResult)
		if string(jsonGetNetworkDiscoveryResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNetworkDiscoveryResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNetworkDiscoveryResponseObjectAsResult = nil
	}

	// try to unmarshal data into NetworkDiscovery
	err = newStrictDecoder(data).Decode(&dst.NetworkDiscovery)
	if err == nil {
		jsonNetworkDiscovery, _ := json.Marshal(dst.NetworkDiscovery)
		if string(jsonNetworkDiscovery) == "{}" { // empty struct
			dst.NetworkDiscovery = nil
		} else {
			match++
		}
	} else {
		dst.NetworkDiscovery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNetworkDiscoveryResponseObjectAsResult = nil
		dst.NetworkDiscovery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNetworkDiscoveryResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNetworkDiscoveryResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNetworkDiscoveryResponse) MarshalJSON() ([]byte, error) {
	if src.GetNetworkDiscoveryResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNetworkDiscoveryResponseObjectAsResult)
	}

	if src.NetworkDiscovery != nil {
		return json.Marshal(&src.NetworkDiscovery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNetworkDiscoveryResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNetworkDiscoveryResponseObjectAsResult != nil {
		return obj.GetNetworkDiscoveryResponseObjectAsResult
	}

	if obj.NetworkDiscovery != nil {
		return obj.NetworkDiscovery
	}

	// all schemas are nil
	return nil
}

type NullableGetNetworkDiscoveryResponse struct {
	value *GetNetworkDiscoveryResponse
	isSet bool
}

func (v NullableGetNetworkDiscoveryResponse) Get() *GetNetworkDiscoveryResponse {
	return v.value
}

func (v *NullableGetNetworkDiscoveryResponse) Set(val *GetNetworkDiscoveryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkDiscoveryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkDiscoveryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkDiscoveryResponse(val *GetNetworkDiscoveryResponse) *NullableGetNetworkDiscoveryResponse {
	return &NullableGetNetworkDiscoveryResponse{value: val, isSet: true}
}

func (v NullableGetNetworkDiscoveryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkDiscoveryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
