/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetNetworkResponse - struct for GetNetworkResponse
type GetNetworkResponse struct {
	GetNetworkResponseObjectAsResult *GetNetworkResponseObjectAsResult
	Network                          *Network
}

// GetNetworkResponseObjectAsResultAsGetNetworkResponse is a convenience function that returns GetNetworkResponseObjectAsResult wrapped in GetNetworkResponse
func GetNetworkResponseObjectAsResultAsGetNetworkResponse(v *GetNetworkResponseObjectAsResult) GetNetworkResponse {
	return GetNetworkResponse{
		GetNetworkResponseObjectAsResult: v,
	}
}

// NetworkAsGetNetworkResponse is a convenience function that returns Network wrapped in GetNetworkResponse
func NetworkAsGetNetworkResponse(v *Network) GetNetworkResponse {
	return GetNetworkResponse{
		Network: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNetworkResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNetworkResponseObjectAsResult)
	if err == nil {
		jsonGetNetworkResponseObjectAsResult, _ := json.Marshal(dst.GetNetworkResponseObjectAsResult)
		if string(jsonGetNetworkResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNetworkResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNetworkResponseObjectAsResult = nil
	}

	// try to unmarshal data into Network
	err = newStrictDecoder(data).Decode(&dst.Network)
	if err == nil {
		jsonNetwork, _ := json.Marshal(dst.Network)
		if string(jsonNetwork) == "{}" { // empty struct
			dst.Network = nil
		} else {
			match++
		}
	} else {
		dst.Network = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNetworkResponseObjectAsResult = nil
		dst.Network = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNetworkResponse) MarshalJSON() ([]byte, error) {
	if src.GetNetworkResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNetworkResponseObjectAsResult)
	}

	if src.Network != nil {
		return json.Marshal(&src.Network)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNetworkResponseObjectAsResult != nil {
		return obj.GetNetworkResponseObjectAsResult
	}

	if obj.Network != nil {
		return obj.Network
	}

	// all schemas are nil
	return nil
}

type NullableGetNetworkResponse struct {
	value *GetNetworkResponse
	isSet bool
}

func (v NullableGetNetworkResponse) Get() *GetNetworkResponse {
	return v.value
}

func (v *NullableGetNetworkResponse) Set(val *GetNetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkResponse(val *GetNetworkResponse) *NullableGetNetworkResponse {
	return &NullableGetNetworkResponse{value: val, isSet: true}
}

func (v NullableGetNetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
