/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetRirResponse - struct for GetRirResponse
type GetRirResponse struct {
	GetRirResponseObjectAsResult *GetRirResponseObjectAsResult
	Rir                          *Rir
}

// GetRirResponseObjectAsResultAsGetRirResponse is a convenience function that returns GetRirResponseObjectAsResult wrapped in GetRirResponse
func GetRirResponseObjectAsResultAsGetRirResponse(v *GetRirResponseObjectAsResult) GetRirResponse {
	return GetRirResponse{
		GetRirResponseObjectAsResult: v,
	}
}

// RirAsGetRirResponse is a convenience function that returns Rir wrapped in GetRirResponse
func RirAsGetRirResponse(v *Rir) GetRirResponse {
	return GetRirResponse{
		Rir: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRirResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRirResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRirResponseObjectAsResult)
	if err == nil {
		jsonGetRirResponseObjectAsResult, _ := json.Marshal(dst.GetRirResponseObjectAsResult)
		if string(jsonGetRirResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRirResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRirResponseObjectAsResult = nil
	}

	// try to unmarshal data into Rir
	err = newStrictDecoder(data).Decode(&dst.Rir)
	if err == nil {
		jsonRir, _ := json.Marshal(dst.Rir)
		if string(jsonRir) == "{}" { // empty struct
			dst.Rir = nil
		} else {
			match++
		}
	} else {
		dst.Rir = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRirResponseObjectAsResult = nil
		dst.Rir = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRirResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRirResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRirResponse) MarshalJSON() ([]byte, error) {
	if src.GetRirResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRirResponseObjectAsResult)
	}

	if src.Rir != nil {
		return json.Marshal(&src.Rir)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRirResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRirResponseObjectAsResult != nil {
		return obj.GetRirResponseObjectAsResult
	}

	if obj.Rir != nil {
		return obj.Rir
	}

	// all schemas are nil
	return nil
}

type NullableGetRirResponse struct {
	value *GetRirResponse
	isSet bool
}

func (v NullableGetRirResponse) Get() *GetRirResponse {
	return v.value
}

func (v *NullableGetRirResponse) Set(val *GetRirResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRirResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRirResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRirResponse(val *GetRirResponse) *NullableGetRirResponse {
	return &NullableGetRirResponse{value: val, isSet: true}
}

func (v NullableGetRirResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRirResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
