/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetSuperhostResponse - struct for GetSuperhostResponse
type GetSuperhostResponse struct {
	GetSuperhostResponseObjectAsResult *GetSuperhostResponseObjectAsResult
	Superhost                          *Superhost
}

// GetSuperhostResponseObjectAsResultAsGetSuperhostResponse is a convenience function that returns GetSuperhostResponseObjectAsResult wrapped in GetSuperhostResponse
func GetSuperhostResponseObjectAsResultAsGetSuperhostResponse(v *GetSuperhostResponseObjectAsResult) GetSuperhostResponse {
	return GetSuperhostResponse{
		GetSuperhostResponseObjectAsResult: v,
	}
}

// SuperhostAsGetSuperhostResponse is a convenience function that returns Superhost wrapped in GetSuperhostResponse
func SuperhostAsGetSuperhostResponse(v *Superhost) GetSuperhostResponse {
	return GetSuperhostResponse{
		Superhost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSuperhostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSuperhostResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSuperhostResponseObjectAsResult)
	if err == nil {
		jsonGetSuperhostResponseObjectAsResult, _ := json.Marshal(dst.GetSuperhostResponseObjectAsResult)
		if string(jsonGetSuperhostResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSuperhostResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSuperhostResponseObjectAsResult = nil
	}

	// try to unmarshal data into Superhost
	err = newStrictDecoder(data).Decode(&dst.Superhost)
	if err == nil {
		jsonSuperhost, _ := json.Marshal(dst.Superhost)
		if string(jsonSuperhost) == "{}" { // empty struct
			dst.Superhost = nil
		} else {
			match++
		}
	} else {
		dst.Superhost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSuperhostResponseObjectAsResult = nil
		dst.Superhost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSuperhostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSuperhostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSuperhostResponse) MarshalJSON() ([]byte, error) {
	if src.GetSuperhostResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSuperhostResponseObjectAsResult)
	}

	if src.Superhost != nil {
		return json.Marshal(&src.Superhost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSuperhostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSuperhostResponseObjectAsResult != nil {
		return obj.GetSuperhostResponseObjectAsResult
	}

	if obj.Superhost != nil {
		return obj.Superhost
	}

	// all schemas are nil
	return nil
}

type NullableGetSuperhostResponse struct {
	value *GetSuperhostResponse
	isSet bool
}

func (v NullableGetSuperhostResponse) Get() *GetSuperhostResponse {
	return v.value
}

func (v *NullableGetSuperhostResponse) Set(val *GetSuperhostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSuperhostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSuperhostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSuperhostResponse(val *GetSuperhostResponse) *NullableGetSuperhostResponse {
	return &NullableGetSuperhostResponse{value: val, isSet: true}
}

func (v NullableGetSuperhostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSuperhostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
