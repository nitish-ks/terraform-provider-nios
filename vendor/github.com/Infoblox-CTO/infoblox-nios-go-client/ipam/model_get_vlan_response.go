/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetVlanResponse - struct for GetVlanResponse
type GetVlanResponse struct {
	GetVlanResponseObjectAsResult *GetVlanResponseObjectAsResult
	Vlan                          *Vlan
}

// GetVlanResponseObjectAsResultAsGetVlanResponse is a convenience function that returns GetVlanResponseObjectAsResult wrapped in GetVlanResponse
func GetVlanResponseObjectAsResultAsGetVlanResponse(v *GetVlanResponseObjectAsResult) GetVlanResponse {
	return GetVlanResponse{
		GetVlanResponseObjectAsResult: v,
	}
}

// VlanAsGetVlanResponse is a convenience function that returns Vlan wrapped in GetVlanResponse
func VlanAsGetVlanResponse(v *Vlan) GetVlanResponse {
	return GetVlanResponse{
		Vlan: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetVlanResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetVlanResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetVlanResponseObjectAsResult)
	if err == nil {
		jsonGetVlanResponseObjectAsResult, _ := json.Marshal(dst.GetVlanResponseObjectAsResult)
		if string(jsonGetVlanResponseObjectAsResult) == "{}" { // empty struct
			dst.GetVlanResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetVlanResponseObjectAsResult = nil
	}

	// try to unmarshal data into Vlan
	err = newStrictDecoder(data).Decode(&dst.Vlan)
	if err == nil {
		jsonVlan, _ := json.Marshal(dst.Vlan)
		if string(jsonVlan) == "{}" { // empty struct
			dst.Vlan = nil
		} else {
			match++
		}
	} else {
		dst.Vlan = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetVlanResponseObjectAsResult = nil
		dst.Vlan = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetVlanResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetVlanResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetVlanResponse) MarshalJSON() ([]byte, error) {
	if src.GetVlanResponseObjectAsResult != nil {
		return json.Marshal(&src.GetVlanResponseObjectAsResult)
	}

	if src.Vlan != nil {
		return json.Marshal(&src.Vlan)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetVlanResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetVlanResponseObjectAsResult != nil {
		return obj.GetVlanResponseObjectAsResult
	}

	if obj.Vlan != nil {
		return obj.Vlan
	}

	// all schemas are nil
	return nil
}

type NullableGetVlanResponse struct {
	value *GetVlanResponse
	isSet bool
}

func (v NullableGetVlanResponse) Get() *GetVlanResponse {
	return v.value
}

func (v *NullableGetVlanResponse) Set(val *GetVlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVlanResponse(val *GetVlanResponse) *NullableGetVlanResponse {
	return &NullableGetVlanResponse{value: val, isSet: true}
}

func (v NullableGetVlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
