/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetVlanrangeResponse - struct for GetVlanrangeResponse
type GetVlanrangeResponse struct {
	GetVlanrangeResponseObjectAsResult *GetVlanrangeResponseObjectAsResult
	Vlanrange                          *Vlanrange
}

// GetVlanrangeResponseObjectAsResultAsGetVlanrangeResponse is a convenience function that returns GetVlanrangeResponseObjectAsResult wrapped in GetVlanrangeResponse
func GetVlanrangeResponseObjectAsResultAsGetVlanrangeResponse(v *GetVlanrangeResponseObjectAsResult) GetVlanrangeResponse {
	return GetVlanrangeResponse{
		GetVlanrangeResponseObjectAsResult: v,
	}
}

// VlanrangeAsGetVlanrangeResponse is a convenience function that returns Vlanrange wrapped in GetVlanrangeResponse
func VlanrangeAsGetVlanrangeResponse(v *Vlanrange) GetVlanrangeResponse {
	return GetVlanrangeResponse{
		Vlanrange: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetVlanrangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetVlanrangeResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetVlanrangeResponseObjectAsResult)
	if err == nil {
		jsonGetVlanrangeResponseObjectAsResult, _ := json.Marshal(dst.GetVlanrangeResponseObjectAsResult)
		if string(jsonGetVlanrangeResponseObjectAsResult) == "{}" { // empty struct
			dst.GetVlanrangeResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetVlanrangeResponseObjectAsResult = nil
	}

	// try to unmarshal data into Vlanrange
	err = newStrictDecoder(data).Decode(&dst.Vlanrange)
	if err == nil {
		jsonVlanrange, _ := json.Marshal(dst.Vlanrange)
		if string(jsonVlanrange) == "{}" { // empty struct
			dst.Vlanrange = nil
		} else {
			match++
		}
	} else {
		dst.Vlanrange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetVlanrangeResponseObjectAsResult = nil
		dst.Vlanrange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetVlanrangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetVlanrangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetVlanrangeResponse) MarshalJSON() ([]byte, error) {
	if src.GetVlanrangeResponseObjectAsResult != nil {
		return json.Marshal(&src.GetVlanrangeResponseObjectAsResult)
	}

	if src.Vlanrange != nil {
		return json.Marshal(&src.Vlanrange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetVlanrangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetVlanrangeResponseObjectAsResult != nil {
		return obj.GetVlanrangeResponseObjectAsResult
	}

	if obj.Vlanrange != nil {
		return obj.Vlanrange
	}

	// all schemas are nil
	return nil
}

type NullableGetVlanrangeResponse struct {
	value *GetVlanrangeResponse
	isSet bool
}

func (v NullableGetVlanrangeResponse) Get() *GetVlanrangeResponse {
	return v.value
}

func (v *NullableGetVlanrangeResponse) Set(val *GetVlanrangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVlanrangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVlanrangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVlanrangeResponse(val *GetVlanrangeResponse) *NullableGetVlanrangeResponse {
	return &NullableGetVlanrangeResponse{value: val, isSet: true}
}

func (v NullableGetVlanrangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVlanrangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
