/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetVlanviewResponse - struct for GetVlanviewResponse
type GetVlanviewResponse struct {
	GetVlanviewResponseObjectAsResult *GetVlanviewResponseObjectAsResult
	Vlanview                          *Vlanview
}

// GetVlanviewResponseObjectAsResultAsGetVlanviewResponse is a convenience function that returns GetVlanviewResponseObjectAsResult wrapped in GetVlanviewResponse
func GetVlanviewResponseObjectAsResultAsGetVlanviewResponse(v *GetVlanviewResponseObjectAsResult) GetVlanviewResponse {
	return GetVlanviewResponse{
		GetVlanviewResponseObjectAsResult: v,
	}
}

// VlanviewAsGetVlanviewResponse is a convenience function that returns Vlanview wrapped in GetVlanviewResponse
func VlanviewAsGetVlanviewResponse(v *Vlanview) GetVlanviewResponse {
	return GetVlanviewResponse{
		Vlanview: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetVlanviewResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetVlanviewResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetVlanviewResponseObjectAsResult)
	if err == nil {
		jsonGetVlanviewResponseObjectAsResult, _ := json.Marshal(dst.GetVlanviewResponseObjectAsResult)
		if string(jsonGetVlanviewResponseObjectAsResult) == "{}" { // empty struct
			dst.GetVlanviewResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetVlanviewResponseObjectAsResult = nil
	}

	// try to unmarshal data into Vlanview
	err = newStrictDecoder(data).Decode(&dst.Vlanview)
	if err == nil {
		jsonVlanview, _ := json.Marshal(dst.Vlanview)
		if string(jsonVlanview) == "{}" { // empty struct
			dst.Vlanview = nil
		} else {
			match++
		}
	} else {
		dst.Vlanview = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetVlanviewResponseObjectAsResult = nil
		dst.Vlanview = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetVlanviewResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetVlanviewResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetVlanviewResponse) MarshalJSON() ([]byte, error) {
	if src.GetVlanviewResponseObjectAsResult != nil {
		return json.Marshal(&src.GetVlanviewResponseObjectAsResult)
	}

	if src.Vlanview != nil {
		return json.Marshal(&src.Vlanview)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetVlanviewResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetVlanviewResponseObjectAsResult != nil {
		return obj.GetVlanviewResponseObjectAsResult
	}

	if obj.Vlanview != nil {
		return obj.Vlanview
	}

	// all schemas are nil
	return nil
}

type NullableGetVlanviewResponse struct {
	value *GetVlanviewResponse
	isSet bool
}

func (v NullableGetVlanviewResponse) Get() *GetVlanviewResponse {
	return v.value
}

func (v *NullableGetVlanviewResponse) Set(val *GetVlanviewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVlanviewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVlanviewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVlanviewResponse(val *GetVlanviewResponse) *NullableGetVlanviewResponse {
	return &NullableGetVlanviewResponse{value: val, isSet: true}
}

func (v NullableGetVlanviewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVlanviewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
