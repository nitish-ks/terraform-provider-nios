/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv4address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv4address{}

// Ipv4address struct for Ipv4address
type Ipv4address struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for the address; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Types of the conflict.
	ConflictTypes []string `json:"conflict_types,omitempty"`
	// The client unique identifier.
	DhcpClientIdentifier *string `json:"dhcp_client_identifier,omitempty"`
	// Discover now status for this address.
	DiscoverNowStatus *string                    `json:"discover_now_status,omitempty"`
	DiscoveredData    *Ipv4addressDiscoveredData `json:"discovered_data,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// DHCP fingerprint for the address.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// The IP address.
	IpAddress *string `json:"ip_address,omitempty"`
	// If set to True, the IP address has either a MAC address conflict or a DHCP lease conflict detected through a network discovery.
	IsConflict *bool `json:"is_conflict,omitempty"`
	// This flag reflects whether the MAC address for this address is invalid.
	IsInvalidMac *bool `json:"is_invalid_mac,omitempty"`
	// The lease state of the address.
	LeaseState *string `json:"lease_state,omitempty"`
	// The MAC address.
	MacAddress   *string                  `json:"mac_address,omitempty"`
	MsAdUserData *Ipv4addressMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The DNS names. For example, if the IP address belongs to a host record, this field contains the hostname. This field supports both single and array search.
	Names []string `json:"names,omitempty"`
	// The network to which this address belongs, in FQDN/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view.
	NetworkView *string `json:"network_view,omitempty"`
	// The objects associated with the IP address.
	Objects *string `json:"objects,omitempty"`
	// The reserved port for the address.
	ReservedPort *string `json:"reserved_port,omitempty"`
	// The current status of the address.
	Status *string `json:"status,omitempty"`
	// The types of associated objects. This field supports both single and array search.
	Types []string `json:"types,omitempty"`
	// Indicates whether the IP address is configured for DNS or DHCP. This field supports both single and array search.
	Usage []string `json:"usage,omitempty"`
	// The name of the user who created or modified the record.
	Username *string `json:"username,omitempty"`
}

// NewIpv4address instantiates a new Ipv4address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv4address() *Ipv4address {
	this := Ipv4address{}
	return &this
}

// NewIpv4addressWithDefaults instantiates a new Ipv4address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv4addressWithDefaults() *Ipv4address {
	this := Ipv4address{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv4address) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv4address) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv4address) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv4address) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv4address) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv4address) SetComment(v string) {
	o.Comment = &v
}

// GetConflictTypes returns the ConflictTypes field value if set, zero value otherwise.
func (o *Ipv4address) GetConflictTypes() []string {
	if o == nil || IsNil(o.ConflictTypes) {
		var ret []string
		return ret
	}
	return o.ConflictTypes
}

// GetConflictTypesOk returns a tuple with the ConflictTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetConflictTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ConflictTypes) {
		return nil, false
	}
	return o.ConflictTypes, true
}

// HasConflictTypes returns a boolean if a field has been set.
func (o *Ipv4address) HasConflictTypes() bool {
	if o != nil && !IsNil(o.ConflictTypes) {
		return true
	}

	return false
}

// SetConflictTypes gets a reference to the given []string and assigns it to the ConflictTypes field.
func (o *Ipv4address) SetConflictTypes(v []string) {
	o.ConflictTypes = v
}

// GetDhcpClientIdentifier returns the DhcpClientIdentifier field value if set, zero value otherwise.
func (o *Ipv4address) GetDhcpClientIdentifier() string {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		var ret string
		return ret
	}
	return *o.DhcpClientIdentifier
}

// GetDhcpClientIdentifierOk returns a tuple with the DhcpClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetDhcpClientIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpClientIdentifier) {
		return nil, false
	}
	return o.DhcpClientIdentifier, true
}

// HasDhcpClientIdentifier returns a boolean if a field has been set.
func (o *Ipv4address) HasDhcpClientIdentifier() bool {
	if o != nil && !IsNil(o.DhcpClientIdentifier) {
		return true
	}

	return false
}

// SetDhcpClientIdentifier gets a reference to the given string and assigns it to the DhcpClientIdentifier field.
func (o *Ipv4address) SetDhcpClientIdentifier(v string) {
	o.DhcpClientIdentifier = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Ipv4address) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Ipv4address) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Ipv4address) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *Ipv4address) GetDiscoveredData() Ipv4addressDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret Ipv4addressDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetDiscoveredDataOk() (*Ipv4addressDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *Ipv4address) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given Ipv4addressDiscoveredData and assigns it to the DiscoveredData field.
func (o *Ipv4address) SetDiscoveredData(v Ipv4addressDiscoveredData) {
	o.DiscoveredData = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ipv4address) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ipv4address) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ipv4address) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *Ipv4address) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *Ipv4address) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *Ipv4address) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Ipv4address) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Ipv4address) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *Ipv4address) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIsConflict returns the IsConflict field value if set, zero value otherwise.
func (o *Ipv4address) GetIsConflict() bool {
	if o == nil || IsNil(o.IsConflict) {
		var ret bool
		return ret
	}
	return *o.IsConflict
}

// GetIsConflictOk returns a tuple with the IsConflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetIsConflictOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConflict) {
		return nil, false
	}
	return o.IsConflict, true
}

// HasIsConflict returns a boolean if a field has been set.
func (o *Ipv4address) HasIsConflict() bool {
	if o != nil && !IsNil(o.IsConflict) {
		return true
	}

	return false
}

// SetIsConflict gets a reference to the given bool and assigns it to the IsConflict field.
func (o *Ipv4address) SetIsConflict(v bool) {
	o.IsConflict = &v
}

// GetIsInvalidMac returns the IsInvalidMac field value if set, zero value otherwise.
func (o *Ipv4address) GetIsInvalidMac() bool {
	if o == nil || IsNil(o.IsInvalidMac) {
		var ret bool
		return ret
	}
	return *o.IsInvalidMac
}

// GetIsInvalidMacOk returns a tuple with the IsInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetIsInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInvalidMac) {
		return nil, false
	}
	return o.IsInvalidMac, true
}

// HasIsInvalidMac returns a boolean if a field has been set.
func (o *Ipv4address) HasIsInvalidMac() bool {
	if o != nil && !IsNil(o.IsInvalidMac) {
		return true
	}

	return false
}

// SetIsInvalidMac gets a reference to the given bool and assigns it to the IsInvalidMac field.
func (o *Ipv4address) SetIsInvalidMac(v bool) {
	o.IsInvalidMac = &v
}

// GetLeaseState returns the LeaseState field value if set, zero value otherwise.
func (o *Ipv4address) GetLeaseState() string {
	if o == nil || IsNil(o.LeaseState) {
		var ret string
		return ret
	}
	return *o.LeaseState
}

// GetLeaseStateOk returns a tuple with the LeaseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetLeaseStateOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseState) {
		return nil, false
	}
	return o.LeaseState, true
}

// HasLeaseState returns a boolean if a field has been set.
func (o *Ipv4address) HasLeaseState() bool {
	if o != nil && !IsNil(o.LeaseState) {
		return true
	}

	return false
}

// SetLeaseState gets a reference to the given string and assigns it to the LeaseState field.
func (o *Ipv4address) SetLeaseState(v string) {
	o.LeaseState = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *Ipv4address) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *Ipv4address) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *Ipv4address) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Ipv4address) GetMsAdUserData() Ipv4addressMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret Ipv4addressMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetMsAdUserDataOk() (*Ipv4addressMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Ipv4address) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given Ipv4addressMsAdUserData and assigns it to the MsAdUserData field.
func (o *Ipv4address) SetMsAdUserData(v Ipv4addressMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Ipv4address) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Ipv4address) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *Ipv4address) SetNames(v []string) {
	o.Names = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Ipv4address) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Ipv4address) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Ipv4address) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Ipv4address) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Ipv4address) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Ipv4address) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *Ipv4address) GetObjects() string {
	if o == nil || IsNil(o.Objects) {
		var ret string
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetObjectsOk() (*string, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *Ipv4address) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given string and assigns it to the Objects field.
func (o *Ipv4address) SetObjects(v string) {
	o.Objects = &v
}

// GetReservedPort returns the ReservedPort field value if set, zero value otherwise.
func (o *Ipv4address) GetReservedPort() string {
	if o == nil || IsNil(o.ReservedPort) {
		var ret string
		return ret
	}
	return *o.ReservedPort
}

// GetReservedPortOk returns a tuple with the ReservedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetReservedPortOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedPort) {
		return nil, false
	}
	return o.ReservedPort, true
}

// HasReservedPort returns a boolean if a field has been set.
func (o *Ipv4address) HasReservedPort() bool {
	if o != nil && !IsNil(o.ReservedPort) {
		return true
	}

	return false
}

// SetReservedPort gets a reference to the given string and assigns it to the ReservedPort field.
func (o *Ipv4address) SetReservedPort(v string) {
	o.ReservedPort = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Ipv4address) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Ipv4address) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Ipv4address) SetStatus(v string) {
	o.Status = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *Ipv4address) GetTypes() []string {
	if o == nil || IsNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *Ipv4address) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *Ipv4address) SetTypes(v []string) {
	o.Types = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *Ipv4address) GetUsage() []string {
	if o == nil || IsNil(o.Usage) {
		var ret []string
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *Ipv4address) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []string and assigns it to the Usage field.
func (o *Ipv4address) SetUsage(v []string) {
	o.Usage = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Ipv4address) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4address) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Ipv4address) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Ipv4address) SetUsername(v string) {
	o.Username = &v
}

func (o Ipv4address) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv4address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ConflictTypes) {
		toSerialize["conflict_types"] = o.ConflictTypes
	}
	if !IsNil(o.DhcpClientIdentifier) {
		toSerialize["dhcp_client_identifier"] = o.DhcpClientIdentifier
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.IsConflict) {
		toSerialize["is_conflict"] = o.IsConflict
	}
	if !IsNil(o.IsInvalidMac) {
		toSerialize["is_invalid_mac"] = o.IsInvalidMac
	}
	if !IsNil(o.LeaseState) {
		toSerialize["lease_state"] = o.LeaseState
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if !IsNil(o.ReservedPort) {
		toSerialize["reserved_port"] = o.ReservedPort
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableIpv4address struct {
	value *Ipv4address
	isSet bool
}

func (v NullableIpv4address) Get() *Ipv4address {
	return v.value
}

func (v *NullableIpv4address) Set(val *Ipv4address) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv4address) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv4address) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv4address(val *Ipv4address) *NullableIpv4address {
	return &NullableIpv4address{value: val, isSet: true}
}

func (v NullableIpv4address) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv4address) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
