/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv4addressDiscoveredData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv4addressDiscoveredData{}

// Ipv4addressDiscoveredData struct for Ipv4addressDiscoveredData
type Ipv4addressDiscoveredData struct {
	// The model name of the end device in the vendor terminology.
	DeviceModel *string `json:"device_model,omitempty"`
	// The system name of the interface associated with the discovered IP address.
	DevicePortName *string `json:"device_port_name,omitempty"`
	// The hardware type of the interface associated with the discovered IP address.
	DevicePortType *string `json:"device_port_type,omitempty"`
	// The type of end host in vendor terminology.
	DeviceType *string `json:"device_type,omitempty"`
	// The vendor name of the end host.
	DeviceVendor *string `json:"device_vendor,omitempty"`
	// The name of the network device associated with the discovered IP address.
	DiscoveredName *string `json:"discovered_name,omitempty"`
	// Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.
	Discoverer *string `json:"discoverer,omitempty"`
	// For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.
	Duid *string `json:"duid,omitempty"`
	// The date and time the IP address was first discovered in Epoch seconds format.
	FirstDiscovered *int64 `json:"first_discovered,omitempty"`
	// The port redundant group number.
	IprgNo *int64 `json:"iprg_no,omitempty"`
	// The status for the IP address within port redundant group.
	IprgState *string `json:"iprg_state,omitempty"`
	// The port redundant group type.
	IprgType *string `json:"iprg_type,omitempty"`
	// The date and time the IP address was last discovered in Epoch seconds format.
	LastDiscovered *int64 `json:"last_discovered,omitempty"`
	// The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.
	MacAddress *string `json:"mac_address,omitempty"`
	// The management IP address of the end host that has more than one IP.
	MgmtIpAddress *string `json:"mgmt_ip_address,omitempty"`
	// The name returned in the NetBIOS reply or the name you manually register for the discovered host.
	NetbiosName *string `json:"netbios_name,omitempty"`
	// A textual description of the switch that is connected to the end device.
	NetworkComponentDescription *string `json:"network_component_description,omitempty"`
	// The IPv4 Address or IPv6 Address of the switch that is connected to the end device.
	NetworkComponentIp *string `json:"network_component_ip,omitempty"`
	// Model name of the switch port connected to the end host in vendor terminology.
	NetworkComponentModel *string `json:"network_component_model,omitempty"`
	// If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.
	NetworkComponentName *string `json:"network_component_name,omitempty"`
	// A textual description of the switch port that is connected to the end device.
	NetworkComponentPortDescription *string `json:"network_component_port_description,omitempty"`
	// The name of the switch port connected to the end device.
	NetworkComponentPortName *string `json:"network_component_port_name,omitempty"`
	// The number of the switch port connected to the end device.
	NetworkComponentPortNumber *string `json:"network_component_port_number,omitempty"`
	// Identifies the switch that is connected to the end device.
	NetworkComponentType *string `json:"network_component_type,omitempty"`
	// The vendor name of the switch port connected to the end host.
	NetworkComponentVendor *string `json:"network_component_vendor,omitempty"`
	// The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.
	OpenPorts *string `json:"open_ports,omitempty"`
	// The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.
	Os *string `json:"os,omitempty"`
	// The negotiated or operational duplex setting of the switch port connected to the end device.
	PortDuplex *string `json:"port_duplex,omitempty"`
	// The link status of the switch port connected to the end device. Indicates whether it is connected.
	PortLinkStatus *string `json:"port_link_status,omitempty"`
	// The interface speed, in Mbps, of the switch port.
	PortSpeed *string `json:"port_speed,omitempty"`
	// The operational status of the switch port. Indicates whether the port is up or down.
	PortStatus *string `json:"port_status,omitempty"`
	// The type of switch port.
	PortType *string `json:"port_type,omitempty"`
	// The description of the VLAN of the switch port that is connected to the end device.
	PortVlanDescription *string `json:"port_vlan_description,omitempty"`
	// The name of the VLAN of the switch port.
	PortVlanName *string `json:"port_vlan_name,omitempty"`
	// The ID of the VLAN of the switch port.
	PortVlanNumber *string `json:"port_vlan_number,omitempty"`
	// The name of the physical network adapter through which the virtual entity is connected to the appliance.
	VAdapter *string `json:"v_adapter,omitempty"`
	// The name of the VMware cluster to which the virtual entity belongs.
	VCluster *string `json:"v_cluster,omitempty"`
	// The name of the vSphere datacenter or container to which the virtual entity belongs.
	VDatacenter *string `json:"v_datacenter,omitempty"`
	// The name of the virtual entity.
	VEntityName *string `json:"v_entity_name,omitempty"`
	// The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.
	VEntityType *string `json:"v_entity_type,omitempty"`
	// The name of the VMware server on which the virtual entity was discovered.
	VHost *string `json:"v_host,omitempty"`
	// The name of the switch to which the virtual entity is connected.
	VSwitch *string `json:"v_switch,omitempty"`
	// Name of the virtual machine.
	VmiName *string `json:"vmi_name,omitempty"`
	// ID of the virtual machine.
	VmiId *string `json:"vmi_id,omitempty"`
	// Port group which the virtual machine belongs to.
	VlanPortGroup *string `json:"vlan_port_group,omitempty"`
	// Name of the virtual switch.
	VswitchName *string `json:"vswitch_name,omitempty"`
	// ID of the virtual switch.
	VswitchId *string `json:"vswitch_id,omitempty"`
	// Type of the virtual switch: standard or distributed.
	VswitchType *string `json:"vswitch_type,omitempty"`
	// Indicates the virtual switch has IPV6 enabled.
	VswitchIpv6Enabled *bool `json:"vswitch_ipv6_enabled,omitempty"`
	// Name of the network adapter on the virtual switch connected with the virtual machine.
	VportName *string `json:"vport_name,omitempty"`
	// MAC address of the network adapter on the virtual switch where the virtual machine connected to.
	VportMacAddress *string `json:"vport_mac_address,omitempty"`
	// Link status of the network adapter on the virtual switch where the virtual machine connected to.
	VportLinkStatus *string `json:"vport_link_status,omitempty"`
	// Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.
	VportConfSpeed *string `json:"vport_conf_speed,omitempty"`
	// Configured mode of the network adapter on the virtual switch where the virtual machine connected to.
	VportConfMode *string `json:"vport_conf_mode,omitempty"`
	// Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.
	VportSpeed *string `json:"vport_speed,omitempty"`
	// Actual mode of the network adapter on the virtual switch where the virtual machine connected to.
	VportMode *string `json:"vport_mode,omitempty"`
	// Type of the network segment on which the current virtual machine/vport connected to.
	VswitchSegmentType *string `json:"vswitch_segment_type,omitempty"`
	// Name of the network segment on which the current virtual machine/vport connected to.
	VswitchSegmentName *string `json:"vswitch_segment_name,omitempty"`
	// ID of the network segment on which the current virtual machine/vport connected to.
	VswitchSegmentId *string `json:"vswitch_segment_id,omitempty"`
	// Port group of the network segment on which the current virtual machine/vport connected to.
	VswitchSegmentPortGroup *string `json:"vswitch_segment_port_group,omitempty"`
	// Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.
	VswitchAvailablePortsCount *int64 `json:"vswitch_available_ports_count,omitempty"`
	// Type of virtual tunnel endpoint (VTEP) in the virtual switch.
	VswitchTepType *string `json:"vswitch_tep_type,omitempty"`
	// IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.
	VswitchTepIp *string `json:"vswitch_tep_ip,omitempty"`
	// Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.
	VswitchTepPortGroup *string `json:"vswitch_tep_port_group,omitempty"`
	// VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.
	VswitchTepVlan *string `json:"vswitch_tep_vlan,omitempty"`
	// DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.
	VswitchTepDhcpServer *string `json:"vswitch_tep_dhcp_server,omitempty"`
	// Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.
	VswitchTepMulticast *string `json:"vswitch_tep_multicast,omitempty"`
	// IP address of the physical node on which the virtual machine is hosted.
	VmhostIpAddress *string `json:"vmhost_ip_address,omitempty"`
	// Name of the physical node on which the virtual machine is hosted.
	VmhostName *string `json:"vmhost_name,omitempty"`
	// MAC address of the physical node on which the virtual machine is hosted.
	VmhostMacAddress *string `json:"vmhost_mac_address,omitempty"`
	// CIDR subnet of the physical node on which the virtual machine is hosted.
	VmhostSubnetCidr *int64 `json:"vmhost_subnet_cidr,omitempty"`
	// List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".
	VmhostNicNames *string `json:"vmhost_nic_names,omitempty"`
	// ID of the tenant which virtual machine belongs to.
	VmiTenantId *string `json:"vmi_tenant_id,omitempty"`
	// If the IP is coming from a Cloud environment, the Cloud Management Platform type.
	CmpType *string `json:"cmp_type,omitempty"`
	// Discovered IP address type.
	VmiIpType *string `json:"vmi_ip_type,omitempty"`
	// Private IP address of the virtual machine.
	VmiPrivateAddress *string `json:"vmi_private_address,omitempty"`
	// Indicates whether the IP address is a public address.
	VmiIsPublicAddress *bool `json:"vmi_is_public_address,omitempty"`
	// The Cisco ISE SSID.
	CiscoIseSsid *string `json:"cisco_ise_ssid,omitempty"`
	// The Endpoint Profile created in Cisco ISE.
	CiscoIseEndpointProfile *string `json:"cisco_ise_endpoint_profile,omitempty"`
	// The Cisco ISE connection session state.
	CiscoIseSessionState *string `json:"cisco_ise_session_state,omitempty"`
	// The Cisco ISE security group name.
	CiscoIseSecurityGroup *string `json:"cisco_ise_security_group,omitempty"`
	// The name of the discovery task.
	TaskName *string `json:"task_name,omitempty"`
	// Location of the network component on which the IP address was discovered.
	NetworkComponentLocation *string `json:"network_component_location,omitempty"`
	// Contact information from the network component on which the IP address was discovered.
	NetworkComponentContact *string `json:"network_component_contact,omitempty"`
	// Location of device on which the IP address was discovered.
	DeviceLocation *string `json:"device_location,omitempty"`
	// Contact information from device on which the IP address was discovered.
	DeviceContact *string `json:"device_contact,omitempty"`
	// Discovered name of Wireless Access Point.
	ApName *string `json:"ap_name,omitempty"`
	// Discovered IP address of Wireless Access Point.
	ApIpAddress *string `json:"ap_ip_address,omitempty"`
	// Service set identifier (SSID) associated with Wireless Access Point.
	ApSsid *string `json:"ap_ssid,omitempty"`
	// Discovered bridge domain.
	BridgeDomain *string `json:"bridge_domain,omitempty"`
	// A comma-separated list of the discovered endpoint groups.
	EndpointGroups *string `json:"endpoint_groups,omitempty"`
	// Discovered tenant.
	Tenant *string `json:"tenant,omitempty"`
	// The name of the VRF.
	VrfName *string `json:"vrf_name,omitempty"`
	// Description of the VRF.
	VrfDescription *string `json:"vrf_description,omitempty"`
	// Route distinguisher of the VRF.
	VrfRd *string `json:"vrf_rd,omitempty"`
	// The BGP autonomous system number.
	BgpAs                *int64 `json:"bgp_as,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv4addressDiscoveredData Ipv4addressDiscoveredData

// NewIpv4addressDiscoveredData instantiates a new Ipv4addressDiscoveredData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv4addressDiscoveredData() *Ipv4addressDiscoveredData {
	this := Ipv4addressDiscoveredData{}
	return &this
}

// NewIpv4addressDiscoveredDataWithDefaults instantiates a new Ipv4addressDiscoveredData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv4addressDiscoveredDataWithDefaults() *Ipv4addressDiscoveredData {
	this := Ipv4addressDiscoveredData{}
	return &this
}

// GetDeviceModel returns the DeviceModel field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDeviceModel() string {
	if o == nil || IsNil(o.DeviceModel) {
		var ret string
		return ret
	}
	return *o.DeviceModel
}

// GetDeviceModelOk returns a tuple with the DeviceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDeviceModelOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceModel) {
		return nil, false
	}
	return o.DeviceModel, true
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDeviceModel() bool {
	if o != nil && !IsNil(o.DeviceModel) {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given string and assigns it to the DeviceModel field.
func (o *Ipv4addressDiscoveredData) SetDeviceModel(v string) {
	o.DeviceModel = &v
}

// GetDevicePortName returns the DevicePortName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDevicePortName() string {
	if o == nil || IsNil(o.DevicePortName) {
		var ret string
		return ret
	}
	return *o.DevicePortName
}

// GetDevicePortNameOk returns a tuple with the DevicePortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDevicePortNameOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortName) {
		return nil, false
	}
	return o.DevicePortName, true
}

// HasDevicePortName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDevicePortName() bool {
	if o != nil && !IsNil(o.DevicePortName) {
		return true
	}

	return false
}

// SetDevicePortName gets a reference to the given string and assigns it to the DevicePortName field.
func (o *Ipv4addressDiscoveredData) SetDevicePortName(v string) {
	o.DevicePortName = &v
}

// GetDevicePortType returns the DevicePortType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDevicePortType() string {
	if o == nil || IsNil(o.DevicePortType) {
		var ret string
		return ret
	}
	return *o.DevicePortType
}

// GetDevicePortTypeOk returns a tuple with the DevicePortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDevicePortTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortType) {
		return nil, false
	}
	return o.DevicePortType, true
}

// HasDevicePortType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDevicePortType() bool {
	if o != nil && !IsNil(o.DevicePortType) {
		return true
	}

	return false
}

// SetDevicePortType gets a reference to the given string and assigns it to the DevicePortType field.
func (o *Ipv4addressDiscoveredData) SetDevicePortType(v string) {
	o.DevicePortType = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *Ipv4addressDiscoveredData) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceVendor returns the DeviceVendor field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDeviceVendor() string {
	if o == nil || IsNil(o.DeviceVendor) {
		var ret string
		return ret
	}
	return *o.DeviceVendor
}

// GetDeviceVendorOk returns a tuple with the DeviceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDeviceVendorOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceVendor) {
		return nil, false
	}
	return o.DeviceVendor, true
}

// HasDeviceVendor returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDeviceVendor() bool {
	if o != nil && !IsNil(o.DeviceVendor) {
		return true
	}

	return false
}

// SetDeviceVendor gets a reference to the given string and assigns it to the DeviceVendor field.
func (o *Ipv4addressDiscoveredData) SetDeviceVendor(v string) {
	o.DeviceVendor = &v
}

// GetDiscoveredName returns the DiscoveredName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDiscoveredName() string {
	if o == nil || IsNil(o.DiscoveredName) {
		var ret string
		return ret
	}
	return *o.DiscoveredName
}

// GetDiscoveredNameOk returns a tuple with the DiscoveredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDiscoveredNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredName) {
		return nil, false
	}
	return o.DiscoveredName, true
}

// HasDiscoveredName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDiscoveredName() bool {
	if o != nil && !IsNil(o.DiscoveredName) {
		return true
	}

	return false
}

// SetDiscoveredName gets a reference to the given string and assigns it to the DiscoveredName field.
func (o *Ipv4addressDiscoveredData) SetDiscoveredName(v string) {
	o.DiscoveredName = &v
}

// GetDiscoverer returns the Discoverer field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDiscoverer() string {
	if o == nil || IsNil(o.Discoverer) {
		var ret string
		return ret
	}
	return *o.Discoverer
}

// GetDiscovererOk returns a tuple with the Discoverer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDiscovererOk() (*string, bool) {
	if o == nil || IsNil(o.Discoverer) {
		return nil, false
	}
	return o.Discoverer, true
}

// HasDiscoverer returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDiscoverer() bool {
	if o != nil && !IsNil(o.Discoverer) {
		return true
	}

	return false
}

// SetDiscoverer gets a reference to the given string and assigns it to the Discoverer field.
func (o *Ipv4addressDiscoveredData) SetDiscoverer(v string) {
	o.Discoverer = &v
}

// GetDuid returns the Duid field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDuid() string {
	if o == nil || IsNil(o.Duid) {
		var ret string
		return ret
	}
	return *o.Duid
}

// GetDuidOk returns a tuple with the Duid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDuidOk() (*string, bool) {
	if o == nil || IsNil(o.Duid) {
		return nil, false
	}
	return o.Duid, true
}

// HasDuid returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDuid() bool {
	if o != nil && !IsNil(o.Duid) {
		return true
	}

	return false
}

// SetDuid gets a reference to the given string and assigns it to the Duid field.
func (o *Ipv4addressDiscoveredData) SetDuid(v string) {
	o.Duid = &v
}

// GetFirstDiscovered returns the FirstDiscovered field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetFirstDiscovered() int64 {
	if o == nil || IsNil(o.FirstDiscovered) {
		var ret int64
		return ret
	}
	return *o.FirstDiscovered
}

// GetFirstDiscoveredOk returns a tuple with the FirstDiscovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetFirstDiscoveredOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstDiscovered) {
		return nil, false
	}
	return o.FirstDiscovered, true
}

// HasFirstDiscovered returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasFirstDiscovered() bool {
	if o != nil && !IsNil(o.FirstDiscovered) {
		return true
	}

	return false
}

// SetFirstDiscovered gets a reference to the given int64 and assigns it to the FirstDiscovered field.
func (o *Ipv4addressDiscoveredData) SetFirstDiscovered(v int64) {
	o.FirstDiscovered = &v
}

// GetIprgNo returns the IprgNo field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetIprgNo() int64 {
	if o == nil || IsNil(o.IprgNo) {
		var ret int64
		return ret
	}
	return *o.IprgNo
}

// GetIprgNoOk returns a tuple with the IprgNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetIprgNoOk() (*int64, bool) {
	if o == nil || IsNil(o.IprgNo) {
		return nil, false
	}
	return o.IprgNo, true
}

// HasIprgNo returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasIprgNo() bool {
	if o != nil && !IsNil(o.IprgNo) {
		return true
	}

	return false
}

// SetIprgNo gets a reference to the given int64 and assigns it to the IprgNo field.
func (o *Ipv4addressDiscoveredData) SetIprgNo(v int64) {
	o.IprgNo = &v
}

// GetIprgState returns the IprgState field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetIprgState() string {
	if o == nil || IsNil(o.IprgState) {
		var ret string
		return ret
	}
	return *o.IprgState
}

// GetIprgStateOk returns a tuple with the IprgState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetIprgStateOk() (*string, bool) {
	if o == nil || IsNil(o.IprgState) {
		return nil, false
	}
	return o.IprgState, true
}

// HasIprgState returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasIprgState() bool {
	if o != nil && !IsNil(o.IprgState) {
		return true
	}

	return false
}

// SetIprgState gets a reference to the given string and assigns it to the IprgState field.
func (o *Ipv4addressDiscoveredData) SetIprgState(v string) {
	o.IprgState = &v
}

// GetIprgType returns the IprgType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetIprgType() string {
	if o == nil || IsNil(o.IprgType) {
		var ret string
		return ret
	}
	return *o.IprgType
}

// GetIprgTypeOk returns a tuple with the IprgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetIprgTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IprgType) {
		return nil, false
	}
	return o.IprgType, true
}

// HasIprgType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasIprgType() bool {
	if o != nil && !IsNil(o.IprgType) {
		return true
	}

	return false
}

// SetIprgType gets a reference to the given string and assigns it to the IprgType field.
func (o *Ipv4addressDiscoveredData) SetIprgType(v string) {
	o.IprgType = &v
}

// GetLastDiscovered returns the LastDiscovered field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetLastDiscovered() int64 {
	if o == nil || IsNil(o.LastDiscovered) {
		var ret int64
		return ret
	}
	return *o.LastDiscovered
}

// GetLastDiscoveredOk returns a tuple with the LastDiscovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetLastDiscoveredOk() (*int64, bool) {
	if o == nil || IsNil(o.LastDiscovered) {
		return nil, false
	}
	return o.LastDiscovered, true
}

// HasLastDiscovered returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasLastDiscovered() bool {
	if o != nil && !IsNil(o.LastDiscovered) {
		return true
	}

	return false
}

// SetLastDiscovered gets a reference to the given int64 and assigns it to the LastDiscovered field.
func (o *Ipv4addressDiscoveredData) SetLastDiscovered(v int64) {
	o.LastDiscovered = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *Ipv4addressDiscoveredData) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMgmtIpAddress returns the MgmtIpAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetMgmtIpAddress() string {
	if o == nil || IsNil(o.MgmtIpAddress) {
		var ret string
		return ret
	}
	return *o.MgmtIpAddress
}

// GetMgmtIpAddressOk returns a tuple with the MgmtIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetMgmtIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtIpAddress) {
		return nil, false
	}
	return o.MgmtIpAddress, true
}

// HasMgmtIpAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasMgmtIpAddress() bool {
	if o != nil && !IsNil(o.MgmtIpAddress) {
		return true
	}

	return false
}

// SetMgmtIpAddress gets a reference to the given string and assigns it to the MgmtIpAddress field.
func (o *Ipv4addressDiscoveredData) SetMgmtIpAddress(v string) {
	o.MgmtIpAddress = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetbiosName() string {
	if o == nil || IsNil(o.NetbiosName) {
		var ret string
		return ret
	}
	return *o.NetbiosName
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetbiosNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosName) {
		return nil, false
	}
	return o.NetbiosName, true
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetbiosName() bool {
	if o != nil && !IsNil(o.NetbiosName) {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given string and assigns it to the NetbiosName field.
func (o *Ipv4addressDiscoveredData) SetNetbiosName(v string) {
	o.NetbiosName = &v
}

// GetNetworkComponentDescription returns the NetworkComponentDescription field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentDescription() string {
	if o == nil || IsNil(o.NetworkComponentDescription) {
		var ret string
		return ret
	}
	return *o.NetworkComponentDescription
}

// GetNetworkComponentDescriptionOk returns a tuple with the NetworkComponentDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentDescription) {
		return nil, false
	}
	return o.NetworkComponentDescription, true
}

// HasNetworkComponentDescription returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentDescription() bool {
	if o != nil && !IsNil(o.NetworkComponentDescription) {
		return true
	}

	return false
}

// SetNetworkComponentDescription gets a reference to the given string and assigns it to the NetworkComponentDescription field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentDescription(v string) {
	o.NetworkComponentDescription = &v
}

// GetNetworkComponentIp returns the NetworkComponentIp field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentIp() string {
	if o == nil || IsNil(o.NetworkComponentIp) {
		var ret string
		return ret
	}
	return *o.NetworkComponentIp
}

// GetNetworkComponentIpOk returns a tuple with the NetworkComponentIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentIpOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentIp) {
		return nil, false
	}
	return o.NetworkComponentIp, true
}

// HasNetworkComponentIp returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentIp() bool {
	if o != nil && !IsNil(o.NetworkComponentIp) {
		return true
	}

	return false
}

// SetNetworkComponentIp gets a reference to the given string and assigns it to the NetworkComponentIp field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentIp(v string) {
	o.NetworkComponentIp = &v
}

// GetNetworkComponentModel returns the NetworkComponentModel field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentModel() string {
	if o == nil || IsNil(o.NetworkComponentModel) {
		var ret string
		return ret
	}
	return *o.NetworkComponentModel
}

// GetNetworkComponentModelOk returns a tuple with the NetworkComponentModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentModelOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentModel) {
		return nil, false
	}
	return o.NetworkComponentModel, true
}

// HasNetworkComponentModel returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentModel() bool {
	if o != nil && !IsNil(o.NetworkComponentModel) {
		return true
	}

	return false
}

// SetNetworkComponentModel gets a reference to the given string and assigns it to the NetworkComponentModel field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentModel(v string) {
	o.NetworkComponentModel = &v
}

// GetNetworkComponentName returns the NetworkComponentName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentName() string {
	if o == nil || IsNil(o.NetworkComponentName) {
		var ret string
		return ret
	}
	return *o.NetworkComponentName
}

// GetNetworkComponentNameOk returns a tuple with the NetworkComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentName) {
		return nil, false
	}
	return o.NetworkComponentName, true
}

// HasNetworkComponentName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentName() bool {
	if o != nil && !IsNil(o.NetworkComponentName) {
		return true
	}

	return false
}

// SetNetworkComponentName gets a reference to the given string and assigns it to the NetworkComponentName field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentName(v string) {
	o.NetworkComponentName = &v
}

// GetNetworkComponentPortDescription returns the NetworkComponentPortDescription field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortDescription() string {
	if o == nil || IsNil(o.NetworkComponentPortDescription) {
		var ret string
		return ret
	}
	return *o.NetworkComponentPortDescription
}

// GetNetworkComponentPortDescriptionOk returns a tuple with the NetworkComponentPortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentPortDescription) {
		return nil, false
	}
	return o.NetworkComponentPortDescription, true
}

// HasNetworkComponentPortDescription returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentPortDescription() bool {
	if o != nil && !IsNil(o.NetworkComponentPortDescription) {
		return true
	}

	return false
}

// SetNetworkComponentPortDescription gets a reference to the given string and assigns it to the NetworkComponentPortDescription field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentPortDescription(v string) {
	o.NetworkComponentPortDescription = &v
}

// GetNetworkComponentPortName returns the NetworkComponentPortName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortName() string {
	if o == nil || IsNil(o.NetworkComponentPortName) {
		var ret string
		return ret
	}
	return *o.NetworkComponentPortName
}

// GetNetworkComponentPortNameOk returns a tuple with the NetworkComponentPortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentPortName) {
		return nil, false
	}
	return o.NetworkComponentPortName, true
}

// HasNetworkComponentPortName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentPortName() bool {
	if o != nil && !IsNil(o.NetworkComponentPortName) {
		return true
	}

	return false
}

// SetNetworkComponentPortName gets a reference to the given string and assigns it to the NetworkComponentPortName field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentPortName(v string) {
	o.NetworkComponentPortName = &v
}

// GetNetworkComponentPortNumber returns the NetworkComponentPortNumber field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortNumber() string {
	if o == nil || IsNil(o.NetworkComponentPortNumber) {
		var ret string
		return ret
	}
	return *o.NetworkComponentPortNumber
}

// GetNetworkComponentPortNumberOk returns a tuple with the NetworkComponentPortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentPortNumberOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentPortNumber) {
		return nil, false
	}
	return o.NetworkComponentPortNumber, true
}

// HasNetworkComponentPortNumber returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentPortNumber() bool {
	if o != nil && !IsNil(o.NetworkComponentPortNumber) {
		return true
	}

	return false
}

// SetNetworkComponentPortNumber gets a reference to the given string and assigns it to the NetworkComponentPortNumber field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentPortNumber(v string) {
	o.NetworkComponentPortNumber = &v
}

// GetNetworkComponentType returns the NetworkComponentType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentType() string {
	if o == nil || IsNil(o.NetworkComponentType) {
		var ret string
		return ret
	}
	return *o.NetworkComponentType
}

// GetNetworkComponentTypeOk returns a tuple with the NetworkComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentType) {
		return nil, false
	}
	return o.NetworkComponentType, true
}

// HasNetworkComponentType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentType() bool {
	if o != nil && !IsNil(o.NetworkComponentType) {
		return true
	}

	return false
}

// SetNetworkComponentType gets a reference to the given string and assigns it to the NetworkComponentType field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentType(v string) {
	o.NetworkComponentType = &v
}

// GetNetworkComponentVendor returns the NetworkComponentVendor field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentVendor() string {
	if o == nil || IsNil(o.NetworkComponentVendor) {
		var ret string
		return ret
	}
	return *o.NetworkComponentVendor
}

// GetNetworkComponentVendorOk returns a tuple with the NetworkComponentVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentVendorOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentVendor) {
		return nil, false
	}
	return o.NetworkComponentVendor, true
}

// HasNetworkComponentVendor returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentVendor() bool {
	if o != nil && !IsNil(o.NetworkComponentVendor) {
		return true
	}

	return false
}

// SetNetworkComponentVendor gets a reference to the given string and assigns it to the NetworkComponentVendor field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentVendor(v string) {
	o.NetworkComponentVendor = &v
}

// GetOpenPorts returns the OpenPorts field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetOpenPorts() string {
	if o == nil || IsNil(o.OpenPorts) {
		var ret string
		return ret
	}
	return *o.OpenPorts
}

// GetOpenPortsOk returns a tuple with the OpenPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetOpenPortsOk() (*string, bool) {
	if o == nil || IsNil(o.OpenPorts) {
		return nil, false
	}
	return o.OpenPorts, true
}

// HasOpenPorts returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasOpenPorts() bool {
	if o != nil && !IsNil(o.OpenPorts) {
		return true
	}

	return false
}

// SetOpenPorts gets a reference to the given string and assigns it to the OpenPorts field.
func (o *Ipv4addressDiscoveredData) SetOpenPorts(v string) {
	o.OpenPorts = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetOs() string {
	if o == nil || IsNil(o.Os) {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetOsOk() (*string, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *Ipv4addressDiscoveredData) SetOs(v string) {
	o.Os = &v
}

// GetPortDuplex returns the PortDuplex field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortDuplex() string {
	if o == nil || IsNil(o.PortDuplex) {
		var ret string
		return ret
	}
	return *o.PortDuplex
}

// GetPortDuplexOk returns a tuple with the PortDuplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortDuplexOk() (*string, bool) {
	if o == nil || IsNil(o.PortDuplex) {
		return nil, false
	}
	return o.PortDuplex, true
}

// HasPortDuplex returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortDuplex() bool {
	if o != nil && !IsNil(o.PortDuplex) {
		return true
	}

	return false
}

// SetPortDuplex gets a reference to the given string and assigns it to the PortDuplex field.
func (o *Ipv4addressDiscoveredData) SetPortDuplex(v string) {
	o.PortDuplex = &v
}

// GetPortLinkStatus returns the PortLinkStatus field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortLinkStatus() string {
	if o == nil || IsNil(o.PortLinkStatus) {
		var ret string
		return ret
	}
	return *o.PortLinkStatus
}

// GetPortLinkStatusOk returns a tuple with the PortLinkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortLinkStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PortLinkStatus) {
		return nil, false
	}
	return o.PortLinkStatus, true
}

// HasPortLinkStatus returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortLinkStatus() bool {
	if o != nil && !IsNil(o.PortLinkStatus) {
		return true
	}

	return false
}

// SetPortLinkStatus gets a reference to the given string and assigns it to the PortLinkStatus field.
func (o *Ipv4addressDiscoveredData) SetPortLinkStatus(v string) {
	o.PortLinkStatus = &v
}

// GetPortSpeed returns the PortSpeed field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortSpeed() string {
	if o == nil || IsNil(o.PortSpeed) {
		var ret string
		return ret
	}
	return *o.PortSpeed
}

// GetPortSpeedOk returns a tuple with the PortSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.PortSpeed) {
		return nil, false
	}
	return o.PortSpeed, true
}

// HasPortSpeed returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortSpeed() bool {
	if o != nil && !IsNil(o.PortSpeed) {
		return true
	}

	return false
}

// SetPortSpeed gets a reference to the given string and assigns it to the PortSpeed field.
func (o *Ipv4addressDiscoveredData) SetPortSpeed(v string) {
	o.PortSpeed = &v
}

// GetPortStatus returns the PortStatus field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortStatus() string {
	if o == nil || IsNil(o.PortStatus) {
		var ret string
		return ret
	}
	return *o.PortStatus
}

// GetPortStatusOk returns a tuple with the PortStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PortStatus) {
		return nil, false
	}
	return o.PortStatus, true
}

// HasPortStatus returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortStatus() bool {
	if o != nil && !IsNil(o.PortStatus) {
		return true
	}

	return false
}

// SetPortStatus gets a reference to the given string and assigns it to the PortStatus field.
func (o *Ipv4addressDiscoveredData) SetPortStatus(v string) {
	o.PortStatus = &v
}

// GetPortType returns the PortType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortType() string {
	if o == nil || IsNil(o.PortType) {
		var ret string
		return ret
	}
	return *o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PortType) {
		return nil, false
	}
	return o.PortType, true
}

// HasPortType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortType() bool {
	if o != nil && !IsNil(o.PortType) {
		return true
	}

	return false
}

// SetPortType gets a reference to the given string and assigns it to the PortType field.
func (o *Ipv4addressDiscoveredData) SetPortType(v string) {
	o.PortType = &v
}

// GetPortVlanDescription returns the PortVlanDescription field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortVlanDescription() string {
	if o == nil || IsNil(o.PortVlanDescription) {
		var ret string
		return ret
	}
	return *o.PortVlanDescription
}

// GetPortVlanDescriptionOk returns a tuple with the PortVlanDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortVlanDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PortVlanDescription) {
		return nil, false
	}
	return o.PortVlanDescription, true
}

// HasPortVlanDescription returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortVlanDescription() bool {
	if o != nil && !IsNil(o.PortVlanDescription) {
		return true
	}

	return false
}

// SetPortVlanDescription gets a reference to the given string and assigns it to the PortVlanDescription field.
func (o *Ipv4addressDiscoveredData) SetPortVlanDescription(v string) {
	o.PortVlanDescription = &v
}

// GetPortVlanName returns the PortVlanName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortVlanName() string {
	if o == nil || IsNil(o.PortVlanName) {
		var ret string
		return ret
	}
	return *o.PortVlanName
}

// GetPortVlanNameOk returns a tuple with the PortVlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortVlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortVlanName) {
		return nil, false
	}
	return o.PortVlanName, true
}

// HasPortVlanName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortVlanName() bool {
	if o != nil && !IsNil(o.PortVlanName) {
		return true
	}

	return false
}

// SetPortVlanName gets a reference to the given string and assigns it to the PortVlanName field.
func (o *Ipv4addressDiscoveredData) SetPortVlanName(v string) {
	o.PortVlanName = &v
}

// GetPortVlanNumber returns the PortVlanNumber field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetPortVlanNumber() string {
	if o == nil || IsNil(o.PortVlanNumber) {
		var ret string
		return ret
	}
	return *o.PortVlanNumber
}

// GetPortVlanNumberOk returns a tuple with the PortVlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetPortVlanNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PortVlanNumber) {
		return nil, false
	}
	return o.PortVlanNumber, true
}

// HasPortVlanNumber returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasPortVlanNumber() bool {
	if o != nil && !IsNil(o.PortVlanNumber) {
		return true
	}

	return false
}

// SetPortVlanNumber gets a reference to the given string and assigns it to the PortVlanNumber field.
func (o *Ipv4addressDiscoveredData) SetPortVlanNumber(v string) {
	o.PortVlanNumber = &v
}

// GetVAdapter returns the VAdapter field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVAdapter() string {
	if o == nil || IsNil(o.VAdapter) {
		var ret string
		return ret
	}
	return *o.VAdapter
}

// GetVAdapterOk returns a tuple with the VAdapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVAdapterOk() (*string, bool) {
	if o == nil || IsNil(o.VAdapter) {
		return nil, false
	}
	return o.VAdapter, true
}

// HasVAdapter returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVAdapter() bool {
	if o != nil && !IsNil(o.VAdapter) {
		return true
	}

	return false
}

// SetVAdapter gets a reference to the given string and assigns it to the VAdapter field.
func (o *Ipv4addressDiscoveredData) SetVAdapter(v string) {
	o.VAdapter = &v
}

// GetVCluster returns the VCluster field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVCluster() string {
	if o == nil || IsNil(o.VCluster) {
		var ret string
		return ret
	}
	return *o.VCluster
}

// GetVClusterOk returns a tuple with the VCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVClusterOk() (*string, bool) {
	if o == nil || IsNil(o.VCluster) {
		return nil, false
	}
	return o.VCluster, true
}

// HasVCluster returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVCluster() bool {
	if o != nil && !IsNil(o.VCluster) {
		return true
	}

	return false
}

// SetVCluster gets a reference to the given string and assigns it to the VCluster field.
func (o *Ipv4addressDiscoveredData) SetVCluster(v string) {
	o.VCluster = &v
}

// GetVDatacenter returns the VDatacenter field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVDatacenter() string {
	if o == nil || IsNil(o.VDatacenter) {
		var ret string
		return ret
	}
	return *o.VDatacenter
}

// GetVDatacenterOk returns a tuple with the VDatacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVDatacenterOk() (*string, bool) {
	if o == nil || IsNil(o.VDatacenter) {
		return nil, false
	}
	return o.VDatacenter, true
}

// HasVDatacenter returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVDatacenter() bool {
	if o != nil && !IsNil(o.VDatacenter) {
		return true
	}

	return false
}

// SetVDatacenter gets a reference to the given string and assigns it to the VDatacenter field.
func (o *Ipv4addressDiscoveredData) SetVDatacenter(v string) {
	o.VDatacenter = &v
}

// GetVEntityName returns the VEntityName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVEntityName() string {
	if o == nil || IsNil(o.VEntityName) {
		var ret string
		return ret
	}
	return *o.VEntityName
}

// GetVEntityNameOk returns a tuple with the VEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.VEntityName) {
		return nil, false
	}
	return o.VEntityName, true
}

// HasVEntityName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVEntityName() bool {
	if o != nil && !IsNil(o.VEntityName) {
		return true
	}

	return false
}

// SetVEntityName gets a reference to the given string and assigns it to the VEntityName field.
func (o *Ipv4addressDiscoveredData) SetVEntityName(v string) {
	o.VEntityName = &v
}

// GetVEntityType returns the VEntityType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVEntityType() string {
	if o == nil || IsNil(o.VEntityType) {
		var ret string
		return ret
	}
	return *o.VEntityType
}

// GetVEntityTypeOk returns a tuple with the VEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VEntityType) {
		return nil, false
	}
	return o.VEntityType, true
}

// HasVEntityType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVEntityType() bool {
	if o != nil && !IsNil(o.VEntityType) {
		return true
	}

	return false
}

// SetVEntityType gets a reference to the given string and assigns it to the VEntityType field.
func (o *Ipv4addressDiscoveredData) SetVEntityType(v string) {
	o.VEntityType = &v
}

// GetVHost returns the VHost field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVHost() string {
	if o == nil || IsNil(o.VHost) {
		var ret string
		return ret
	}
	return *o.VHost
}

// GetVHostOk returns a tuple with the VHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVHostOk() (*string, bool) {
	if o == nil || IsNil(o.VHost) {
		return nil, false
	}
	return o.VHost, true
}

// HasVHost returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVHost() bool {
	if o != nil && !IsNil(o.VHost) {
		return true
	}

	return false
}

// SetVHost gets a reference to the given string and assigns it to the VHost field.
func (o *Ipv4addressDiscoveredData) SetVHost(v string) {
	o.VHost = &v
}

// GetVSwitch returns the VSwitch field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVSwitch() string {
	if o == nil || IsNil(o.VSwitch) {
		var ret string
		return ret
	}
	return *o.VSwitch
}

// GetVSwitchOk returns a tuple with the VSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVSwitchOk() (*string, bool) {
	if o == nil || IsNil(o.VSwitch) {
		return nil, false
	}
	return o.VSwitch, true
}

// HasVSwitch returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVSwitch() bool {
	if o != nil && !IsNil(o.VSwitch) {
		return true
	}

	return false
}

// SetVSwitch gets a reference to the given string and assigns it to the VSwitch field.
func (o *Ipv4addressDiscoveredData) SetVSwitch(v string) {
	o.VSwitch = &v
}

// GetVmiName returns the VmiName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiName() string {
	if o == nil || IsNil(o.VmiName) {
		var ret string
		return ret
	}
	return *o.VmiName
}

// GetVmiNameOk returns a tuple with the VmiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiNameOk() (*string, bool) {
	if o == nil || IsNil(o.VmiName) {
		return nil, false
	}
	return o.VmiName, true
}

// HasVmiName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiName() bool {
	if o != nil && !IsNil(o.VmiName) {
		return true
	}

	return false
}

// SetVmiName gets a reference to the given string and assigns it to the VmiName field.
func (o *Ipv4addressDiscoveredData) SetVmiName(v string) {
	o.VmiName = &v
}

// GetVmiId returns the VmiId field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiId() string {
	if o == nil || IsNil(o.VmiId) {
		var ret string
		return ret
	}
	return *o.VmiId
}

// GetVmiIdOk returns a tuple with the VmiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmiId) {
		return nil, false
	}
	return o.VmiId, true
}

// HasVmiId returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiId() bool {
	if o != nil && !IsNil(o.VmiId) {
		return true
	}

	return false
}

// SetVmiId gets a reference to the given string and assigns it to the VmiId field.
func (o *Ipv4addressDiscoveredData) SetVmiId(v string) {
	o.VmiId = &v
}

// GetVlanPortGroup returns the VlanPortGroup field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVlanPortGroup() string {
	if o == nil || IsNil(o.VlanPortGroup) {
		var ret string
		return ret
	}
	return *o.VlanPortGroup
}

// GetVlanPortGroupOk returns a tuple with the VlanPortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVlanPortGroupOk() (*string, bool) {
	if o == nil || IsNil(o.VlanPortGroup) {
		return nil, false
	}
	return o.VlanPortGroup, true
}

// HasVlanPortGroup returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVlanPortGroup() bool {
	if o != nil && !IsNil(o.VlanPortGroup) {
		return true
	}

	return false
}

// SetVlanPortGroup gets a reference to the given string and assigns it to the VlanPortGroup field.
func (o *Ipv4addressDiscoveredData) SetVlanPortGroup(v string) {
	o.VlanPortGroup = &v
}

// GetVswitchName returns the VswitchName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchName() string {
	if o == nil || IsNil(o.VswitchName) {
		var ret string
		return ret
	}
	return *o.VswitchName
}

// GetVswitchNameOk returns a tuple with the VswitchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchNameOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchName) {
		return nil, false
	}
	return o.VswitchName, true
}

// HasVswitchName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchName() bool {
	if o != nil && !IsNil(o.VswitchName) {
		return true
	}

	return false
}

// SetVswitchName gets a reference to the given string and assigns it to the VswitchName field.
func (o *Ipv4addressDiscoveredData) SetVswitchName(v string) {
	o.VswitchName = &v
}

// GetVswitchId returns the VswitchId field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchId() string {
	if o == nil || IsNil(o.VswitchId) {
		var ret string
		return ret
	}
	return *o.VswitchId
}

// GetVswitchIdOk returns a tuple with the VswitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchIdOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchId) {
		return nil, false
	}
	return o.VswitchId, true
}

// HasVswitchId returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchId() bool {
	if o != nil && !IsNil(o.VswitchId) {
		return true
	}

	return false
}

// SetVswitchId gets a reference to the given string and assigns it to the VswitchId field.
func (o *Ipv4addressDiscoveredData) SetVswitchId(v string) {
	o.VswitchId = &v
}

// GetVswitchType returns the VswitchType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchType() string {
	if o == nil || IsNil(o.VswitchType) {
		var ret string
		return ret
	}
	return *o.VswitchType
}

// GetVswitchTypeOk returns a tuple with the VswitchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchType) {
		return nil, false
	}
	return o.VswitchType, true
}

// HasVswitchType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchType() bool {
	if o != nil && !IsNil(o.VswitchType) {
		return true
	}

	return false
}

// SetVswitchType gets a reference to the given string and assigns it to the VswitchType field.
func (o *Ipv4addressDiscoveredData) SetVswitchType(v string) {
	o.VswitchType = &v
}

// GetVswitchIpv6Enabled returns the VswitchIpv6Enabled field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchIpv6Enabled() bool {
	if o == nil || IsNil(o.VswitchIpv6Enabled) {
		var ret bool
		return ret
	}
	return *o.VswitchIpv6Enabled
}

// GetVswitchIpv6EnabledOk returns a tuple with the VswitchIpv6Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchIpv6EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.VswitchIpv6Enabled) {
		return nil, false
	}
	return o.VswitchIpv6Enabled, true
}

// HasVswitchIpv6Enabled returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchIpv6Enabled() bool {
	if o != nil && !IsNil(o.VswitchIpv6Enabled) {
		return true
	}

	return false
}

// SetVswitchIpv6Enabled gets a reference to the given bool and assigns it to the VswitchIpv6Enabled field.
func (o *Ipv4addressDiscoveredData) SetVswitchIpv6Enabled(v bool) {
	o.VswitchIpv6Enabled = &v
}

// GetVportName returns the VportName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportName() string {
	if o == nil || IsNil(o.VportName) {
		var ret string
		return ret
	}
	return *o.VportName
}

// GetVportNameOk returns a tuple with the VportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportNameOk() (*string, bool) {
	if o == nil || IsNil(o.VportName) {
		return nil, false
	}
	return o.VportName, true
}

// HasVportName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportName() bool {
	if o != nil && !IsNil(o.VportName) {
		return true
	}

	return false
}

// SetVportName gets a reference to the given string and assigns it to the VportName field.
func (o *Ipv4addressDiscoveredData) SetVportName(v string) {
	o.VportName = &v
}

// GetVportMacAddress returns the VportMacAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportMacAddress() string {
	if o == nil || IsNil(o.VportMacAddress) {
		var ret string
		return ret
	}
	return *o.VportMacAddress
}

// GetVportMacAddressOk returns a tuple with the VportMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VportMacAddress) {
		return nil, false
	}
	return o.VportMacAddress, true
}

// HasVportMacAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportMacAddress() bool {
	if o != nil && !IsNil(o.VportMacAddress) {
		return true
	}

	return false
}

// SetVportMacAddress gets a reference to the given string and assigns it to the VportMacAddress field.
func (o *Ipv4addressDiscoveredData) SetVportMacAddress(v string) {
	o.VportMacAddress = &v
}

// GetVportLinkStatus returns the VportLinkStatus field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportLinkStatus() string {
	if o == nil || IsNil(o.VportLinkStatus) {
		var ret string
		return ret
	}
	return *o.VportLinkStatus
}

// GetVportLinkStatusOk returns a tuple with the VportLinkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportLinkStatusOk() (*string, bool) {
	if o == nil || IsNil(o.VportLinkStatus) {
		return nil, false
	}
	return o.VportLinkStatus, true
}

// HasVportLinkStatus returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportLinkStatus() bool {
	if o != nil && !IsNil(o.VportLinkStatus) {
		return true
	}

	return false
}

// SetVportLinkStatus gets a reference to the given string and assigns it to the VportLinkStatus field.
func (o *Ipv4addressDiscoveredData) SetVportLinkStatus(v string) {
	o.VportLinkStatus = &v
}

// GetVportConfSpeed returns the VportConfSpeed field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportConfSpeed() string {
	if o == nil || IsNil(o.VportConfSpeed) {
		var ret string
		return ret
	}
	return *o.VportConfSpeed
}

// GetVportConfSpeedOk returns a tuple with the VportConfSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportConfSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.VportConfSpeed) {
		return nil, false
	}
	return o.VportConfSpeed, true
}

// HasVportConfSpeed returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportConfSpeed() bool {
	if o != nil && !IsNil(o.VportConfSpeed) {
		return true
	}

	return false
}

// SetVportConfSpeed gets a reference to the given string and assigns it to the VportConfSpeed field.
func (o *Ipv4addressDiscoveredData) SetVportConfSpeed(v string) {
	o.VportConfSpeed = &v
}

// GetVportConfMode returns the VportConfMode field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportConfMode() string {
	if o == nil || IsNil(o.VportConfMode) {
		var ret string
		return ret
	}
	return *o.VportConfMode
}

// GetVportConfModeOk returns a tuple with the VportConfMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportConfModeOk() (*string, bool) {
	if o == nil || IsNil(o.VportConfMode) {
		return nil, false
	}
	return o.VportConfMode, true
}

// HasVportConfMode returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportConfMode() bool {
	if o != nil && !IsNil(o.VportConfMode) {
		return true
	}

	return false
}

// SetVportConfMode gets a reference to the given string and assigns it to the VportConfMode field.
func (o *Ipv4addressDiscoveredData) SetVportConfMode(v string) {
	o.VportConfMode = &v
}

// GetVportSpeed returns the VportSpeed field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportSpeed() string {
	if o == nil || IsNil(o.VportSpeed) {
		var ret string
		return ret
	}
	return *o.VportSpeed
}

// GetVportSpeedOk returns a tuple with the VportSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.VportSpeed) {
		return nil, false
	}
	return o.VportSpeed, true
}

// HasVportSpeed returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportSpeed() bool {
	if o != nil && !IsNil(o.VportSpeed) {
		return true
	}

	return false
}

// SetVportSpeed gets a reference to the given string and assigns it to the VportSpeed field.
func (o *Ipv4addressDiscoveredData) SetVportSpeed(v string) {
	o.VportSpeed = &v
}

// GetVportMode returns the VportMode field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVportMode() string {
	if o == nil || IsNil(o.VportMode) {
		var ret string
		return ret
	}
	return *o.VportMode
}

// GetVportModeOk returns a tuple with the VportMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVportModeOk() (*string, bool) {
	if o == nil || IsNil(o.VportMode) {
		return nil, false
	}
	return o.VportMode, true
}

// HasVportMode returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVportMode() bool {
	if o != nil && !IsNil(o.VportMode) {
		return true
	}

	return false
}

// SetVportMode gets a reference to the given string and assigns it to the VportMode field.
func (o *Ipv4addressDiscoveredData) SetVportMode(v string) {
	o.VportMode = &v
}

// GetVswitchSegmentType returns the VswitchSegmentType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentType() string {
	if o == nil || IsNil(o.VswitchSegmentType) {
		var ret string
		return ret
	}
	return *o.VswitchSegmentType
}

// GetVswitchSegmentTypeOk returns a tuple with the VswitchSegmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchSegmentType) {
		return nil, false
	}
	return o.VswitchSegmentType, true
}

// HasVswitchSegmentType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchSegmentType() bool {
	if o != nil && !IsNil(o.VswitchSegmentType) {
		return true
	}

	return false
}

// SetVswitchSegmentType gets a reference to the given string and assigns it to the VswitchSegmentType field.
func (o *Ipv4addressDiscoveredData) SetVswitchSegmentType(v string) {
	o.VswitchSegmentType = &v
}

// GetVswitchSegmentName returns the VswitchSegmentName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentName() string {
	if o == nil || IsNil(o.VswitchSegmentName) {
		var ret string
		return ret
	}
	return *o.VswitchSegmentName
}

// GetVswitchSegmentNameOk returns a tuple with the VswitchSegmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchSegmentName) {
		return nil, false
	}
	return o.VswitchSegmentName, true
}

// HasVswitchSegmentName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchSegmentName() bool {
	if o != nil && !IsNil(o.VswitchSegmentName) {
		return true
	}

	return false
}

// SetVswitchSegmentName gets a reference to the given string and assigns it to the VswitchSegmentName field.
func (o *Ipv4addressDiscoveredData) SetVswitchSegmentName(v string) {
	o.VswitchSegmentName = &v
}

// GetVswitchSegmentId returns the VswitchSegmentId field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentId() string {
	if o == nil || IsNil(o.VswitchSegmentId) {
		var ret string
		return ret
	}
	return *o.VswitchSegmentId
}

// GetVswitchSegmentIdOk returns a tuple with the VswitchSegmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchSegmentId) {
		return nil, false
	}
	return o.VswitchSegmentId, true
}

// HasVswitchSegmentId returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchSegmentId() bool {
	if o != nil && !IsNil(o.VswitchSegmentId) {
		return true
	}

	return false
}

// SetVswitchSegmentId gets a reference to the given string and assigns it to the VswitchSegmentId field.
func (o *Ipv4addressDiscoveredData) SetVswitchSegmentId(v string) {
	o.VswitchSegmentId = &v
}

// GetVswitchSegmentPortGroup returns the VswitchSegmentPortGroup field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentPortGroup() string {
	if o == nil || IsNil(o.VswitchSegmentPortGroup) {
		var ret string
		return ret
	}
	return *o.VswitchSegmentPortGroup
}

// GetVswitchSegmentPortGroupOk returns a tuple with the VswitchSegmentPortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchSegmentPortGroupOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchSegmentPortGroup) {
		return nil, false
	}
	return o.VswitchSegmentPortGroup, true
}

// HasVswitchSegmentPortGroup returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchSegmentPortGroup() bool {
	if o != nil && !IsNil(o.VswitchSegmentPortGroup) {
		return true
	}

	return false
}

// SetVswitchSegmentPortGroup gets a reference to the given string and assigns it to the VswitchSegmentPortGroup field.
func (o *Ipv4addressDiscoveredData) SetVswitchSegmentPortGroup(v string) {
	o.VswitchSegmentPortGroup = &v
}

// GetVswitchAvailablePortsCount returns the VswitchAvailablePortsCount field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchAvailablePortsCount() int64 {
	if o == nil || IsNil(o.VswitchAvailablePortsCount) {
		var ret int64
		return ret
	}
	return *o.VswitchAvailablePortsCount
}

// GetVswitchAvailablePortsCountOk returns a tuple with the VswitchAvailablePortsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchAvailablePortsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VswitchAvailablePortsCount) {
		return nil, false
	}
	return o.VswitchAvailablePortsCount, true
}

// HasVswitchAvailablePortsCount returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchAvailablePortsCount() bool {
	if o != nil && !IsNil(o.VswitchAvailablePortsCount) {
		return true
	}

	return false
}

// SetVswitchAvailablePortsCount gets a reference to the given int64 and assigns it to the VswitchAvailablePortsCount field.
func (o *Ipv4addressDiscoveredData) SetVswitchAvailablePortsCount(v int64) {
	o.VswitchAvailablePortsCount = &v
}

// GetVswitchTepType returns the VswitchTepType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepType() string {
	if o == nil || IsNil(o.VswitchTepType) {
		var ret string
		return ret
	}
	return *o.VswitchTepType
}

// GetVswitchTepTypeOk returns a tuple with the VswitchTepType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepType) {
		return nil, false
	}
	return o.VswitchTepType, true
}

// HasVswitchTepType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepType() bool {
	if o != nil && !IsNil(o.VswitchTepType) {
		return true
	}

	return false
}

// SetVswitchTepType gets a reference to the given string and assigns it to the VswitchTepType field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepType(v string) {
	o.VswitchTepType = &v
}

// GetVswitchTepIp returns the VswitchTepIp field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepIp() string {
	if o == nil || IsNil(o.VswitchTepIp) {
		var ret string
		return ret
	}
	return *o.VswitchTepIp
}

// GetVswitchTepIpOk returns a tuple with the VswitchTepIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepIpOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepIp) {
		return nil, false
	}
	return o.VswitchTepIp, true
}

// HasVswitchTepIp returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepIp() bool {
	if o != nil && !IsNil(o.VswitchTepIp) {
		return true
	}

	return false
}

// SetVswitchTepIp gets a reference to the given string and assigns it to the VswitchTepIp field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepIp(v string) {
	o.VswitchTepIp = &v
}

// GetVswitchTepPortGroup returns the VswitchTepPortGroup field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepPortGroup() string {
	if o == nil || IsNil(o.VswitchTepPortGroup) {
		var ret string
		return ret
	}
	return *o.VswitchTepPortGroup
}

// GetVswitchTepPortGroupOk returns a tuple with the VswitchTepPortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepPortGroupOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepPortGroup) {
		return nil, false
	}
	return o.VswitchTepPortGroup, true
}

// HasVswitchTepPortGroup returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepPortGroup() bool {
	if o != nil && !IsNil(o.VswitchTepPortGroup) {
		return true
	}

	return false
}

// SetVswitchTepPortGroup gets a reference to the given string and assigns it to the VswitchTepPortGroup field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepPortGroup(v string) {
	o.VswitchTepPortGroup = &v
}

// GetVswitchTepVlan returns the VswitchTepVlan field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepVlan() string {
	if o == nil || IsNil(o.VswitchTepVlan) {
		var ret string
		return ret
	}
	return *o.VswitchTepVlan
}

// GetVswitchTepVlanOk returns a tuple with the VswitchTepVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepVlanOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepVlan) {
		return nil, false
	}
	return o.VswitchTepVlan, true
}

// HasVswitchTepVlan returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepVlan() bool {
	if o != nil && !IsNil(o.VswitchTepVlan) {
		return true
	}

	return false
}

// SetVswitchTepVlan gets a reference to the given string and assigns it to the VswitchTepVlan field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepVlan(v string) {
	o.VswitchTepVlan = &v
}

// GetVswitchTepDhcpServer returns the VswitchTepDhcpServer field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepDhcpServer() string {
	if o == nil || IsNil(o.VswitchTepDhcpServer) {
		var ret string
		return ret
	}
	return *o.VswitchTepDhcpServer
}

// GetVswitchTepDhcpServerOk returns a tuple with the VswitchTepDhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepDhcpServerOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepDhcpServer) {
		return nil, false
	}
	return o.VswitchTepDhcpServer, true
}

// HasVswitchTepDhcpServer returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepDhcpServer() bool {
	if o != nil && !IsNil(o.VswitchTepDhcpServer) {
		return true
	}

	return false
}

// SetVswitchTepDhcpServer gets a reference to the given string and assigns it to the VswitchTepDhcpServer field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepDhcpServer(v string) {
	o.VswitchTepDhcpServer = &v
}

// GetVswitchTepMulticast returns the VswitchTepMulticast field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVswitchTepMulticast() string {
	if o == nil || IsNil(o.VswitchTepMulticast) {
		var ret string
		return ret
	}
	return *o.VswitchTepMulticast
}

// GetVswitchTepMulticastOk returns a tuple with the VswitchTepMulticast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVswitchTepMulticastOk() (*string, bool) {
	if o == nil || IsNil(o.VswitchTepMulticast) {
		return nil, false
	}
	return o.VswitchTepMulticast, true
}

// HasVswitchTepMulticast returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVswitchTepMulticast() bool {
	if o != nil && !IsNil(o.VswitchTepMulticast) {
		return true
	}

	return false
}

// SetVswitchTepMulticast gets a reference to the given string and assigns it to the VswitchTepMulticast field.
func (o *Ipv4addressDiscoveredData) SetVswitchTepMulticast(v string) {
	o.VswitchTepMulticast = &v
}

// GetVmhostIpAddress returns the VmhostIpAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmhostIpAddress() string {
	if o == nil || IsNil(o.VmhostIpAddress) {
		var ret string
		return ret
	}
	return *o.VmhostIpAddress
}

// GetVmhostIpAddressOk returns a tuple with the VmhostIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmhostIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VmhostIpAddress) {
		return nil, false
	}
	return o.VmhostIpAddress, true
}

// HasVmhostIpAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmhostIpAddress() bool {
	if o != nil && !IsNil(o.VmhostIpAddress) {
		return true
	}

	return false
}

// SetVmhostIpAddress gets a reference to the given string and assigns it to the VmhostIpAddress field.
func (o *Ipv4addressDiscoveredData) SetVmhostIpAddress(v string) {
	o.VmhostIpAddress = &v
}

// GetVmhostName returns the VmhostName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmhostName() string {
	if o == nil || IsNil(o.VmhostName) {
		var ret string
		return ret
	}
	return *o.VmhostName
}

// GetVmhostNameOk returns a tuple with the VmhostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmhostNameOk() (*string, bool) {
	if o == nil || IsNil(o.VmhostName) {
		return nil, false
	}
	return o.VmhostName, true
}

// HasVmhostName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmhostName() bool {
	if o != nil && !IsNil(o.VmhostName) {
		return true
	}

	return false
}

// SetVmhostName gets a reference to the given string and assigns it to the VmhostName field.
func (o *Ipv4addressDiscoveredData) SetVmhostName(v string) {
	o.VmhostName = &v
}

// GetVmhostMacAddress returns the VmhostMacAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmhostMacAddress() string {
	if o == nil || IsNil(o.VmhostMacAddress) {
		var ret string
		return ret
	}
	return *o.VmhostMacAddress
}

// GetVmhostMacAddressOk returns a tuple with the VmhostMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmhostMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VmhostMacAddress) {
		return nil, false
	}
	return o.VmhostMacAddress, true
}

// HasVmhostMacAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmhostMacAddress() bool {
	if o != nil && !IsNil(o.VmhostMacAddress) {
		return true
	}

	return false
}

// SetVmhostMacAddress gets a reference to the given string and assigns it to the VmhostMacAddress field.
func (o *Ipv4addressDiscoveredData) SetVmhostMacAddress(v string) {
	o.VmhostMacAddress = &v
}

// GetVmhostSubnetCidr returns the VmhostSubnetCidr field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmhostSubnetCidr() int64 {
	if o == nil || IsNil(o.VmhostSubnetCidr) {
		var ret int64
		return ret
	}
	return *o.VmhostSubnetCidr
}

// GetVmhostSubnetCidrOk returns a tuple with the VmhostSubnetCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmhostSubnetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.VmhostSubnetCidr) {
		return nil, false
	}
	return o.VmhostSubnetCidr, true
}

// HasVmhostSubnetCidr returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmhostSubnetCidr() bool {
	if o != nil && !IsNil(o.VmhostSubnetCidr) {
		return true
	}

	return false
}

// SetVmhostSubnetCidr gets a reference to the given int64 and assigns it to the VmhostSubnetCidr field.
func (o *Ipv4addressDiscoveredData) SetVmhostSubnetCidr(v int64) {
	o.VmhostSubnetCidr = &v
}

// GetVmhostNicNames returns the VmhostNicNames field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmhostNicNames() string {
	if o == nil || IsNil(o.VmhostNicNames) {
		var ret string
		return ret
	}
	return *o.VmhostNicNames
}

// GetVmhostNicNamesOk returns a tuple with the VmhostNicNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmhostNicNamesOk() (*string, bool) {
	if o == nil || IsNil(o.VmhostNicNames) {
		return nil, false
	}
	return o.VmhostNicNames, true
}

// HasVmhostNicNames returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmhostNicNames() bool {
	if o != nil && !IsNil(o.VmhostNicNames) {
		return true
	}

	return false
}

// SetVmhostNicNames gets a reference to the given string and assigns it to the VmhostNicNames field.
func (o *Ipv4addressDiscoveredData) SetVmhostNicNames(v string) {
	o.VmhostNicNames = &v
}

// GetVmiTenantId returns the VmiTenantId field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiTenantId() string {
	if o == nil || IsNil(o.VmiTenantId) {
		var ret string
		return ret
	}
	return *o.VmiTenantId
}

// GetVmiTenantIdOk returns a tuple with the VmiTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.VmiTenantId) {
		return nil, false
	}
	return o.VmiTenantId, true
}

// HasVmiTenantId returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiTenantId() bool {
	if o != nil && !IsNil(o.VmiTenantId) {
		return true
	}

	return false
}

// SetVmiTenantId gets a reference to the given string and assigns it to the VmiTenantId field.
func (o *Ipv4addressDiscoveredData) SetVmiTenantId(v string) {
	o.VmiTenantId = &v
}

// GetCmpType returns the CmpType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetCmpType() string {
	if o == nil || IsNil(o.CmpType) {
		var ret string
		return ret
	}
	return *o.CmpType
}

// GetCmpTypeOk returns a tuple with the CmpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetCmpTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CmpType) {
		return nil, false
	}
	return o.CmpType, true
}

// HasCmpType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasCmpType() bool {
	if o != nil && !IsNil(o.CmpType) {
		return true
	}

	return false
}

// SetCmpType gets a reference to the given string and assigns it to the CmpType field.
func (o *Ipv4addressDiscoveredData) SetCmpType(v string) {
	o.CmpType = &v
}

// GetVmiIpType returns the VmiIpType field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiIpType() string {
	if o == nil || IsNil(o.VmiIpType) {
		var ret string
		return ret
	}
	return *o.VmiIpType
}

// GetVmiIpTypeOk returns a tuple with the VmiIpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiIpTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VmiIpType) {
		return nil, false
	}
	return o.VmiIpType, true
}

// HasVmiIpType returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiIpType() bool {
	if o != nil && !IsNil(o.VmiIpType) {
		return true
	}

	return false
}

// SetVmiIpType gets a reference to the given string and assigns it to the VmiIpType field.
func (o *Ipv4addressDiscoveredData) SetVmiIpType(v string) {
	o.VmiIpType = &v
}

// GetVmiPrivateAddress returns the VmiPrivateAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiPrivateAddress() string {
	if o == nil || IsNil(o.VmiPrivateAddress) {
		var ret string
		return ret
	}
	return *o.VmiPrivateAddress
}

// GetVmiPrivateAddressOk returns a tuple with the VmiPrivateAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiPrivateAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VmiPrivateAddress) {
		return nil, false
	}
	return o.VmiPrivateAddress, true
}

// HasVmiPrivateAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiPrivateAddress() bool {
	if o != nil && !IsNil(o.VmiPrivateAddress) {
		return true
	}

	return false
}

// SetVmiPrivateAddress gets a reference to the given string and assigns it to the VmiPrivateAddress field.
func (o *Ipv4addressDiscoveredData) SetVmiPrivateAddress(v string) {
	o.VmiPrivateAddress = &v
}

// GetVmiIsPublicAddress returns the VmiIsPublicAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVmiIsPublicAddress() bool {
	if o == nil || IsNil(o.VmiIsPublicAddress) {
		var ret bool
		return ret
	}
	return *o.VmiIsPublicAddress
}

// GetVmiIsPublicAddressOk returns a tuple with the VmiIsPublicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVmiIsPublicAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.VmiIsPublicAddress) {
		return nil, false
	}
	return o.VmiIsPublicAddress, true
}

// HasVmiIsPublicAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVmiIsPublicAddress() bool {
	if o != nil && !IsNil(o.VmiIsPublicAddress) {
		return true
	}

	return false
}

// SetVmiIsPublicAddress gets a reference to the given bool and assigns it to the VmiIsPublicAddress field.
func (o *Ipv4addressDiscoveredData) SetVmiIsPublicAddress(v bool) {
	o.VmiIsPublicAddress = &v
}

// GetCiscoIseSsid returns the CiscoIseSsid field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSsid() string {
	if o == nil || IsNil(o.CiscoIseSsid) {
		var ret string
		return ret
	}
	return *o.CiscoIseSsid
}

// GetCiscoIseSsidOk returns a tuple with the CiscoIseSsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSsidOk() (*string, bool) {
	if o == nil || IsNil(o.CiscoIseSsid) {
		return nil, false
	}
	return o.CiscoIseSsid, true
}

// HasCiscoIseSsid returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasCiscoIseSsid() bool {
	if o != nil && !IsNil(o.CiscoIseSsid) {
		return true
	}

	return false
}

// SetCiscoIseSsid gets a reference to the given string and assigns it to the CiscoIseSsid field.
func (o *Ipv4addressDiscoveredData) SetCiscoIseSsid(v string) {
	o.CiscoIseSsid = &v
}

// GetCiscoIseEndpointProfile returns the CiscoIseEndpointProfile field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetCiscoIseEndpointProfile() string {
	if o == nil || IsNil(o.CiscoIseEndpointProfile) {
		var ret string
		return ret
	}
	return *o.CiscoIseEndpointProfile
}

// GetCiscoIseEndpointProfileOk returns a tuple with the CiscoIseEndpointProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetCiscoIseEndpointProfileOk() (*string, bool) {
	if o == nil || IsNil(o.CiscoIseEndpointProfile) {
		return nil, false
	}
	return o.CiscoIseEndpointProfile, true
}

// HasCiscoIseEndpointProfile returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasCiscoIseEndpointProfile() bool {
	if o != nil && !IsNil(o.CiscoIseEndpointProfile) {
		return true
	}

	return false
}

// SetCiscoIseEndpointProfile gets a reference to the given string and assigns it to the CiscoIseEndpointProfile field.
func (o *Ipv4addressDiscoveredData) SetCiscoIseEndpointProfile(v string) {
	o.CiscoIseEndpointProfile = &v
}

// GetCiscoIseSessionState returns the CiscoIseSessionState field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSessionState() string {
	if o == nil || IsNil(o.CiscoIseSessionState) {
		var ret string
		return ret
	}
	return *o.CiscoIseSessionState
}

// GetCiscoIseSessionStateOk returns a tuple with the CiscoIseSessionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSessionStateOk() (*string, bool) {
	if o == nil || IsNil(o.CiscoIseSessionState) {
		return nil, false
	}
	return o.CiscoIseSessionState, true
}

// HasCiscoIseSessionState returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasCiscoIseSessionState() bool {
	if o != nil && !IsNil(o.CiscoIseSessionState) {
		return true
	}

	return false
}

// SetCiscoIseSessionState gets a reference to the given string and assigns it to the CiscoIseSessionState field.
func (o *Ipv4addressDiscoveredData) SetCiscoIseSessionState(v string) {
	o.CiscoIseSessionState = &v
}

// GetCiscoIseSecurityGroup returns the CiscoIseSecurityGroup field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSecurityGroup() string {
	if o == nil || IsNil(o.CiscoIseSecurityGroup) {
		var ret string
		return ret
	}
	return *o.CiscoIseSecurityGroup
}

// GetCiscoIseSecurityGroupOk returns a tuple with the CiscoIseSecurityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetCiscoIseSecurityGroupOk() (*string, bool) {
	if o == nil || IsNil(o.CiscoIseSecurityGroup) {
		return nil, false
	}
	return o.CiscoIseSecurityGroup, true
}

// HasCiscoIseSecurityGroup returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasCiscoIseSecurityGroup() bool {
	if o != nil && !IsNil(o.CiscoIseSecurityGroup) {
		return true
	}

	return false
}

// SetCiscoIseSecurityGroup gets a reference to the given string and assigns it to the CiscoIseSecurityGroup field.
func (o *Ipv4addressDiscoveredData) SetCiscoIseSecurityGroup(v string) {
	o.CiscoIseSecurityGroup = &v
}

// GetTaskName returns the TaskName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetTaskName() string {
	if o == nil || IsNil(o.TaskName) {
		var ret string
		return ret
	}
	return *o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetTaskNameOk() (*string, bool) {
	if o == nil || IsNil(o.TaskName) {
		return nil, false
	}
	return o.TaskName, true
}

// HasTaskName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasTaskName() bool {
	if o != nil && !IsNil(o.TaskName) {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given string and assigns it to the TaskName field.
func (o *Ipv4addressDiscoveredData) SetTaskName(v string) {
	o.TaskName = &v
}

// GetNetworkComponentLocation returns the NetworkComponentLocation field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentLocation() string {
	if o == nil || IsNil(o.NetworkComponentLocation) {
		var ret string
		return ret
	}
	return *o.NetworkComponentLocation
}

// GetNetworkComponentLocationOk returns a tuple with the NetworkComponentLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentLocationOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentLocation) {
		return nil, false
	}
	return o.NetworkComponentLocation, true
}

// HasNetworkComponentLocation returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentLocation() bool {
	if o != nil && !IsNil(o.NetworkComponentLocation) {
		return true
	}

	return false
}

// SetNetworkComponentLocation gets a reference to the given string and assigns it to the NetworkComponentLocation field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentLocation(v string) {
	o.NetworkComponentLocation = &v
}

// GetNetworkComponentContact returns the NetworkComponentContact field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentContact() string {
	if o == nil || IsNil(o.NetworkComponentContact) {
		var ret string
		return ret
	}
	return *o.NetworkComponentContact
}

// GetNetworkComponentContactOk returns a tuple with the NetworkComponentContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetNetworkComponentContactOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkComponentContact) {
		return nil, false
	}
	return o.NetworkComponentContact, true
}

// HasNetworkComponentContact returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasNetworkComponentContact() bool {
	if o != nil && !IsNil(o.NetworkComponentContact) {
		return true
	}

	return false
}

// SetNetworkComponentContact gets a reference to the given string and assigns it to the NetworkComponentContact field.
func (o *Ipv4addressDiscoveredData) SetNetworkComponentContact(v string) {
	o.NetworkComponentContact = &v
}

// GetDeviceLocation returns the DeviceLocation field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDeviceLocation() string {
	if o == nil || IsNil(o.DeviceLocation) {
		var ret string
		return ret
	}
	return *o.DeviceLocation
}

// GetDeviceLocationOk returns a tuple with the DeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDeviceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocation) {
		return nil, false
	}
	return o.DeviceLocation, true
}

// HasDeviceLocation returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDeviceLocation() bool {
	if o != nil && !IsNil(o.DeviceLocation) {
		return true
	}

	return false
}

// SetDeviceLocation gets a reference to the given string and assigns it to the DeviceLocation field.
func (o *Ipv4addressDiscoveredData) SetDeviceLocation(v string) {
	o.DeviceLocation = &v
}

// GetDeviceContact returns the DeviceContact field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetDeviceContact() string {
	if o == nil || IsNil(o.DeviceContact) {
		var ret string
		return ret
	}
	return *o.DeviceContact
}

// GetDeviceContactOk returns a tuple with the DeviceContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetDeviceContactOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceContact) {
		return nil, false
	}
	return o.DeviceContact, true
}

// HasDeviceContact returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasDeviceContact() bool {
	if o != nil && !IsNil(o.DeviceContact) {
		return true
	}

	return false
}

// SetDeviceContact gets a reference to the given string and assigns it to the DeviceContact field.
func (o *Ipv4addressDiscoveredData) SetDeviceContact(v string) {
	o.DeviceContact = &v
}

// GetApName returns the ApName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetApName() string {
	if o == nil || IsNil(o.ApName) {
		var ret string
		return ret
	}
	return *o.ApName
}

// GetApNameOk returns a tuple with the ApName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetApNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApName) {
		return nil, false
	}
	return o.ApName, true
}

// HasApName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasApName() bool {
	if o != nil && !IsNil(o.ApName) {
		return true
	}

	return false
}

// SetApName gets a reference to the given string and assigns it to the ApName field.
func (o *Ipv4addressDiscoveredData) SetApName(v string) {
	o.ApName = &v
}

// GetApIpAddress returns the ApIpAddress field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetApIpAddress() string {
	if o == nil || IsNil(o.ApIpAddress) {
		var ret string
		return ret
	}
	return *o.ApIpAddress
}

// GetApIpAddressOk returns a tuple with the ApIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetApIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ApIpAddress) {
		return nil, false
	}
	return o.ApIpAddress, true
}

// HasApIpAddress returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasApIpAddress() bool {
	if o != nil && !IsNil(o.ApIpAddress) {
		return true
	}

	return false
}

// SetApIpAddress gets a reference to the given string and assigns it to the ApIpAddress field.
func (o *Ipv4addressDiscoveredData) SetApIpAddress(v string) {
	o.ApIpAddress = &v
}

// GetApSsid returns the ApSsid field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetApSsid() string {
	if o == nil || IsNil(o.ApSsid) {
		var ret string
		return ret
	}
	return *o.ApSsid
}

// GetApSsidOk returns a tuple with the ApSsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetApSsidOk() (*string, bool) {
	if o == nil || IsNil(o.ApSsid) {
		return nil, false
	}
	return o.ApSsid, true
}

// HasApSsid returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasApSsid() bool {
	if o != nil && !IsNil(o.ApSsid) {
		return true
	}

	return false
}

// SetApSsid gets a reference to the given string and assigns it to the ApSsid field.
func (o *Ipv4addressDiscoveredData) SetApSsid(v string) {
	o.ApSsid = &v
}

// GetBridgeDomain returns the BridgeDomain field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetBridgeDomain() string {
	if o == nil || IsNil(o.BridgeDomain) {
		var ret string
		return ret
	}
	return *o.BridgeDomain
}

// GetBridgeDomainOk returns a tuple with the BridgeDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetBridgeDomainOk() (*string, bool) {
	if o == nil || IsNil(o.BridgeDomain) {
		return nil, false
	}
	return o.BridgeDomain, true
}

// HasBridgeDomain returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasBridgeDomain() bool {
	if o != nil && !IsNil(o.BridgeDomain) {
		return true
	}

	return false
}

// SetBridgeDomain gets a reference to the given string and assigns it to the BridgeDomain field.
func (o *Ipv4addressDiscoveredData) SetBridgeDomain(v string) {
	o.BridgeDomain = &v
}

// GetEndpointGroups returns the EndpointGroups field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetEndpointGroups() string {
	if o == nil || IsNil(o.EndpointGroups) {
		var ret string
		return ret
	}
	return *o.EndpointGroups
}

// GetEndpointGroupsOk returns a tuple with the EndpointGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetEndpointGroupsOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointGroups) {
		return nil, false
	}
	return o.EndpointGroups, true
}

// HasEndpointGroups returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasEndpointGroups() bool {
	if o != nil && !IsNil(o.EndpointGroups) {
		return true
	}

	return false
}

// SetEndpointGroups gets a reference to the given string and assigns it to the EndpointGroups field.
func (o *Ipv4addressDiscoveredData) SetEndpointGroups(v string) {
	o.EndpointGroups = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *Ipv4addressDiscoveredData) SetTenant(v string) {
	o.Tenant = &v
}

// GetVrfName returns the VrfName field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVrfName() string {
	if o == nil || IsNil(o.VrfName) {
		var ret string
		return ret
	}
	return *o.VrfName
}

// GetVrfNameOk returns a tuple with the VrfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVrfNameOk() (*string, bool) {
	if o == nil || IsNil(o.VrfName) {
		return nil, false
	}
	return o.VrfName, true
}

// HasVrfName returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVrfName() bool {
	if o != nil && !IsNil(o.VrfName) {
		return true
	}

	return false
}

// SetVrfName gets a reference to the given string and assigns it to the VrfName field.
func (o *Ipv4addressDiscoveredData) SetVrfName(v string) {
	o.VrfName = &v
}

// GetVrfDescription returns the VrfDescription field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVrfDescription() string {
	if o == nil || IsNil(o.VrfDescription) {
		var ret string
		return ret
	}
	return *o.VrfDescription
}

// GetVrfDescriptionOk returns a tuple with the VrfDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVrfDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.VrfDescription) {
		return nil, false
	}
	return o.VrfDescription, true
}

// HasVrfDescription returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVrfDescription() bool {
	if o != nil && !IsNil(o.VrfDescription) {
		return true
	}

	return false
}

// SetVrfDescription gets a reference to the given string and assigns it to the VrfDescription field.
func (o *Ipv4addressDiscoveredData) SetVrfDescription(v string) {
	o.VrfDescription = &v
}

// GetVrfRd returns the VrfRd field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetVrfRd() string {
	if o == nil || IsNil(o.VrfRd) {
		var ret string
		return ret
	}
	return *o.VrfRd
}

// GetVrfRdOk returns a tuple with the VrfRd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetVrfRdOk() (*string, bool) {
	if o == nil || IsNil(o.VrfRd) {
		return nil, false
	}
	return o.VrfRd, true
}

// HasVrfRd returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasVrfRd() bool {
	if o != nil && !IsNil(o.VrfRd) {
		return true
	}

	return false
}

// SetVrfRd gets a reference to the given string and assigns it to the VrfRd field.
func (o *Ipv4addressDiscoveredData) SetVrfRd(v string) {
	o.VrfRd = &v
}

// GetBgpAs returns the BgpAs field value if set, zero value otherwise.
func (o *Ipv4addressDiscoveredData) GetBgpAs() int64 {
	if o == nil || IsNil(o.BgpAs) {
		var ret int64
		return ret
	}
	return *o.BgpAs
}

// GetBgpAsOk returns a tuple with the BgpAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv4addressDiscoveredData) GetBgpAsOk() (*int64, bool) {
	if o == nil || IsNil(o.BgpAs) {
		return nil, false
	}
	return o.BgpAs, true
}

// HasBgpAs returns a boolean if a field has been set.
func (o *Ipv4addressDiscoveredData) HasBgpAs() bool {
	if o != nil && !IsNil(o.BgpAs) {
		return true
	}

	return false
}

// SetBgpAs gets a reference to the given int64 and assigns it to the BgpAs field.
func (o *Ipv4addressDiscoveredData) SetBgpAs(v int64) {
	o.BgpAs = &v
}

func (o Ipv4addressDiscoveredData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv4addressDiscoveredData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceModel) {
		toSerialize["device_model"] = o.DeviceModel
	}
	if !IsNil(o.DevicePortName) {
		toSerialize["device_port_name"] = o.DevicePortName
	}
	if !IsNil(o.DevicePortType) {
		toSerialize["device_port_type"] = o.DevicePortType
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.DeviceVendor) {
		toSerialize["device_vendor"] = o.DeviceVendor
	}
	if !IsNil(o.DiscoveredName) {
		toSerialize["discovered_name"] = o.DiscoveredName
	}
	if !IsNil(o.Discoverer) {
		toSerialize["discoverer"] = o.Discoverer
	}
	if !IsNil(o.Duid) {
		toSerialize["duid"] = o.Duid
	}
	if !IsNil(o.FirstDiscovered) {
		toSerialize["first_discovered"] = o.FirstDiscovered
	}
	if !IsNil(o.IprgNo) {
		toSerialize["iprg_no"] = o.IprgNo
	}
	if !IsNil(o.IprgState) {
		toSerialize["iprg_state"] = o.IprgState
	}
	if !IsNil(o.IprgType) {
		toSerialize["iprg_type"] = o.IprgType
	}
	if !IsNil(o.LastDiscovered) {
		toSerialize["last_discovered"] = o.LastDiscovered
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.MgmtIpAddress) {
		toSerialize["mgmt_ip_address"] = o.MgmtIpAddress
	}
	if !IsNil(o.NetbiosName) {
		toSerialize["netbios_name"] = o.NetbiosName
	}
	if !IsNil(o.NetworkComponentDescription) {
		toSerialize["network_component_description"] = o.NetworkComponentDescription
	}
	if !IsNil(o.NetworkComponentIp) {
		toSerialize["network_component_ip"] = o.NetworkComponentIp
	}
	if !IsNil(o.NetworkComponentModel) {
		toSerialize["network_component_model"] = o.NetworkComponentModel
	}
	if !IsNil(o.NetworkComponentName) {
		toSerialize["network_component_name"] = o.NetworkComponentName
	}
	if !IsNil(o.NetworkComponentPortDescription) {
		toSerialize["network_component_port_description"] = o.NetworkComponentPortDescription
	}
	if !IsNil(o.NetworkComponentPortName) {
		toSerialize["network_component_port_name"] = o.NetworkComponentPortName
	}
	if !IsNil(o.NetworkComponentPortNumber) {
		toSerialize["network_component_port_number"] = o.NetworkComponentPortNumber
	}
	if !IsNil(o.NetworkComponentType) {
		toSerialize["network_component_type"] = o.NetworkComponentType
	}
	if !IsNil(o.NetworkComponentVendor) {
		toSerialize["network_component_vendor"] = o.NetworkComponentVendor
	}
	if !IsNil(o.OpenPorts) {
		toSerialize["open_ports"] = o.OpenPorts
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.PortDuplex) {
		toSerialize["port_duplex"] = o.PortDuplex
	}
	if !IsNil(o.PortLinkStatus) {
		toSerialize["port_link_status"] = o.PortLinkStatus
	}
	if !IsNil(o.PortSpeed) {
		toSerialize["port_speed"] = o.PortSpeed
	}
	if !IsNil(o.PortStatus) {
		toSerialize["port_status"] = o.PortStatus
	}
	if !IsNil(o.PortType) {
		toSerialize["port_type"] = o.PortType
	}
	if !IsNil(o.PortVlanDescription) {
		toSerialize["port_vlan_description"] = o.PortVlanDescription
	}
	if !IsNil(o.PortVlanName) {
		toSerialize["port_vlan_name"] = o.PortVlanName
	}
	if !IsNil(o.PortVlanNumber) {
		toSerialize["port_vlan_number"] = o.PortVlanNumber
	}
	if !IsNil(o.VAdapter) {
		toSerialize["v_adapter"] = o.VAdapter
	}
	if !IsNil(o.VCluster) {
		toSerialize["v_cluster"] = o.VCluster
	}
	if !IsNil(o.VDatacenter) {
		toSerialize["v_datacenter"] = o.VDatacenter
	}
	if !IsNil(o.VEntityName) {
		toSerialize["v_entity_name"] = o.VEntityName
	}
	if !IsNil(o.VEntityType) {
		toSerialize["v_entity_type"] = o.VEntityType
	}
	if !IsNil(o.VHost) {
		toSerialize["v_host"] = o.VHost
	}
	if !IsNil(o.VSwitch) {
		toSerialize["v_switch"] = o.VSwitch
	}
	if !IsNil(o.VmiName) {
		toSerialize["vmi_name"] = o.VmiName
	}
	if !IsNil(o.VmiId) {
		toSerialize["vmi_id"] = o.VmiId
	}
	if !IsNil(o.VlanPortGroup) {
		toSerialize["vlan_port_group"] = o.VlanPortGroup
	}
	if !IsNil(o.VswitchName) {
		toSerialize["vswitch_name"] = o.VswitchName
	}
	if !IsNil(o.VswitchId) {
		toSerialize["vswitch_id"] = o.VswitchId
	}
	if !IsNil(o.VswitchType) {
		toSerialize["vswitch_type"] = o.VswitchType
	}
	if !IsNil(o.VswitchIpv6Enabled) {
		toSerialize["vswitch_ipv6_enabled"] = o.VswitchIpv6Enabled
	}
	if !IsNil(o.VportName) {
		toSerialize["vport_name"] = o.VportName
	}
	if !IsNil(o.VportMacAddress) {
		toSerialize["vport_mac_address"] = o.VportMacAddress
	}
	if !IsNil(o.VportLinkStatus) {
		toSerialize["vport_link_status"] = o.VportLinkStatus
	}
	if !IsNil(o.VportConfSpeed) {
		toSerialize["vport_conf_speed"] = o.VportConfSpeed
	}
	if !IsNil(o.VportConfMode) {
		toSerialize["vport_conf_mode"] = o.VportConfMode
	}
	if !IsNil(o.VportSpeed) {
		toSerialize["vport_speed"] = o.VportSpeed
	}
	if !IsNil(o.VportMode) {
		toSerialize["vport_mode"] = o.VportMode
	}
	if !IsNil(o.VswitchSegmentType) {
		toSerialize["vswitch_segment_type"] = o.VswitchSegmentType
	}
	if !IsNil(o.VswitchSegmentName) {
		toSerialize["vswitch_segment_name"] = o.VswitchSegmentName
	}
	if !IsNil(o.VswitchSegmentId) {
		toSerialize["vswitch_segment_id"] = o.VswitchSegmentId
	}
	if !IsNil(o.VswitchSegmentPortGroup) {
		toSerialize["vswitch_segment_port_group"] = o.VswitchSegmentPortGroup
	}
	if !IsNil(o.VswitchAvailablePortsCount) {
		toSerialize["vswitch_available_ports_count"] = o.VswitchAvailablePortsCount
	}
	if !IsNil(o.VswitchTepType) {
		toSerialize["vswitch_tep_type"] = o.VswitchTepType
	}
	if !IsNil(o.VswitchTepIp) {
		toSerialize["vswitch_tep_ip"] = o.VswitchTepIp
	}
	if !IsNil(o.VswitchTepPortGroup) {
		toSerialize["vswitch_tep_port_group"] = o.VswitchTepPortGroup
	}
	if !IsNil(o.VswitchTepVlan) {
		toSerialize["vswitch_tep_vlan"] = o.VswitchTepVlan
	}
	if !IsNil(o.VswitchTepDhcpServer) {
		toSerialize["vswitch_tep_dhcp_server"] = o.VswitchTepDhcpServer
	}
	if !IsNil(o.VswitchTepMulticast) {
		toSerialize["vswitch_tep_multicast"] = o.VswitchTepMulticast
	}
	if !IsNil(o.VmhostIpAddress) {
		toSerialize["vmhost_ip_address"] = o.VmhostIpAddress
	}
	if !IsNil(o.VmhostName) {
		toSerialize["vmhost_name"] = o.VmhostName
	}
	if !IsNil(o.VmhostMacAddress) {
		toSerialize["vmhost_mac_address"] = o.VmhostMacAddress
	}
	if !IsNil(o.VmhostSubnetCidr) {
		toSerialize["vmhost_subnet_cidr"] = o.VmhostSubnetCidr
	}
	if !IsNil(o.VmhostNicNames) {
		toSerialize["vmhost_nic_names"] = o.VmhostNicNames
	}
	if !IsNil(o.VmiTenantId) {
		toSerialize["vmi_tenant_id"] = o.VmiTenantId
	}
	if !IsNil(o.CmpType) {
		toSerialize["cmp_type"] = o.CmpType
	}
	if !IsNil(o.VmiIpType) {
		toSerialize["vmi_ip_type"] = o.VmiIpType
	}
	if !IsNil(o.VmiPrivateAddress) {
		toSerialize["vmi_private_address"] = o.VmiPrivateAddress
	}
	if !IsNil(o.VmiIsPublicAddress) {
		toSerialize["vmi_is_public_address"] = o.VmiIsPublicAddress
	}
	if !IsNil(o.CiscoIseSsid) {
		toSerialize["cisco_ise_ssid"] = o.CiscoIseSsid
	}
	if !IsNil(o.CiscoIseEndpointProfile) {
		toSerialize["cisco_ise_endpoint_profile"] = o.CiscoIseEndpointProfile
	}
	if !IsNil(o.CiscoIseSessionState) {
		toSerialize["cisco_ise_session_state"] = o.CiscoIseSessionState
	}
	if !IsNil(o.CiscoIseSecurityGroup) {
		toSerialize["cisco_ise_security_group"] = o.CiscoIseSecurityGroup
	}
	if !IsNil(o.TaskName) {
		toSerialize["task_name"] = o.TaskName
	}
	if !IsNil(o.NetworkComponentLocation) {
		toSerialize["network_component_location"] = o.NetworkComponentLocation
	}
	if !IsNil(o.NetworkComponentContact) {
		toSerialize["network_component_contact"] = o.NetworkComponentContact
	}
	if !IsNil(o.DeviceLocation) {
		toSerialize["device_location"] = o.DeviceLocation
	}
	if !IsNil(o.DeviceContact) {
		toSerialize["device_contact"] = o.DeviceContact
	}
	if !IsNil(o.ApName) {
		toSerialize["ap_name"] = o.ApName
	}
	if !IsNil(o.ApIpAddress) {
		toSerialize["ap_ip_address"] = o.ApIpAddress
	}
	if !IsNil(o.ApSsid) {
		toSerialize["ap_ssid"] = o.ApSsid
	}
	if !IsNil(o.BridgeDomain) {
		toSerialize["bridge_domain"] = o.BridgeDomain
	}
	if !IsNil(o.EndpointGroups) {
		toSerialize["endpoint_groups"] = o.EndpointGroups
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.VrfName) {
		toSerialize["vrf_name"] = o.VrfName
	}
	if !IsNil(o.VrfDescription) {
		toSerialize["vrf_description"] = o.VrfDescription
	}
	if !IsNil(o.VrfRd) {
		toSerialize["vrf_rd"] = o.VrfRd
	}
	if !IsNil(o.BgpAs) {
		toSerialize["bgp_as"] = o.BgpAs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv4addressDiscoveredData) UnmarshalJSON(data []byte) (err error) {
	varIpv4addressDiscoveredData := _Ipv4addressDiscoveredData{}

	err = json.Unmarshal(data, &varIpv4addressDiscoveredData)

	if err != nil {
		return err
	}

	*o = Ipv4addressDiscoveredData(varIpv4addressDiscoveredData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_model")
		delete(additionalProperties, "device_port_name")
		delete(additionalProperties, "device_port_type")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "device_vendor")
		delete(additionalProperties, "discovered_name")
		delete(additionalProperties, "discoverer")
		delete(additionalProperties, "duid")
		delete(additionalProperties, "first_discovered")
		delete(additionalProperties, "iprg_no")
		delete(additionalProperties, "iprg_state")
		delete(additionalProperties, "iprg_type")
		delete(additionalProperties, "last_discovered")
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "mgmt_ip_address")
		delete(additionalProperties, "netbios_name")
		delete(additionalProperties, "network_component_description")
		delete(additionalProperties, "network_component_ip")
		delete(additionalProperties, "network_component_model")
		delete(additionalProperties, "network_component_name")
		delete(additionalProperties, "network_component_port_description")
		delete(additionalProperties, "network_component_port_name")
		delete(additionalProperties, "network_component_port_number")
		delete(additionalProperties, "network_component_type")
		delete(additionalProperties, "network_component_vendor")
		delete(additionalProperties, "open_ports")
		delete(additionalProperties, "os")
		delete(additionalProperties, "port_duplex")
		delete(additionalProperties, "port_link_status")
		delete(additionalProperties, "port_speed")
		delete(additionalProperties, "port_status")
		delete(additionalProperties, "port_type")
		delete(additionalProperties, "port_vlan_description")
		delete(additionalProperties, "port_vlan_name")
		delete(additionalProperties, "port_vlan_number")
		delete(additionalProperties, "v_adapter")
		delete(additionalProperties, "v_cluster")
		delete(additionalProperties, "v_datacenter")
		delete(additionalProperties, "v_entity_name")
		delete(additionalProperties, "v_entity_type")
		delete(additionalProperties, "v_host")
		delete(additionalProperties, "v_switch")
		delete(additionalProperties, "vmi_name")
		delete(additionalProperties, "vmi_id")
		delete(additionalProperties, "vlan_port_group")
		delete(additionalProperties, "vswitch_name")
		delete(additionalProperties, "vswitch_id")
		delete(additionalProperties, "vswitch_type")
		delete(additionalProperties, "vswitch_ipv6_enabled")
		delete(additionalProperties, "vport_name")
		delete(additionalProperties, "vport_mac_address")
		delete(additionalProperties, "vport_link_status")
		delete(additionalProperties, "vport_conf_speed")
		delete(additionalProperties, "vport_conf_mode")
		delete(additionalProperties, "vport_speed")
		delete(additionalProperties, "vport_mode")
		delete(additionalProperties, "vswitch_segment_type")
		delete(additionalProperties, "vswitch_segment_name")
		delete(additionalProperties, "vswitch_segment_id")
		delete(additionalProperties, "vswitch_segment_port_group")
		delete(additionalProperties, "vswitch_available_ports_count")
		delete(additionalProperties, "vswitch_tep_type")
		delete(additionalProperties, "vswitch_tep_ip")
		delete(additionalProperties, "vswitch_tep_port_group")
		delete(additionalProperties, "vswitch_tep_vlan")
		delete(additionalProperties, "vswitch_tep_dhcp_server")
		delete(additionalProperties, "vswitch_tep_multicast")
		delete(additionalProperties, "vmhost_ip_address")
		delete(additionalProperties, "vmhost_name")
		delete(additionalProperties, "vmhost_mac_address")
		delete(additionalProperties, "vmhost_subnet_cidr")
		delete(additionalProperties, "vmhost_nic_names")
		delete(additionalProperties, "vmi_tenant_id")
		delete(additionalProperties, "cmp_type")
		delete(additionalProperties, "vmi_ip_type")
		delete(additionalProperties, "vmi_private_address")
		delete(additionalProperties, "vmi_is_public_address")
		delete(additionalProperties, "cisco_ise_ssid")
		delete(additionalProperties, "cisco_ise_endpoint_profile")
		delete(additionalProperties, "cisco_ise_session_state")
		delete(additionalProperties, "cisco_ise_security_group")
		delete(additionalProperties, "task_name")
		delete(additionalProperties, "network_component_location")
		delete(additionalProperties, "network_component_contact")
		delete(additionalProperties, "device_location")
		delete(additionalProperties, "device_contact")
		delete(additionalProperties, "ap_name")
		delete(additionalProperties, "ap_ip_address")
		delete(additionalProperties, "ap_ssid")
		delete(additionalProperties, "bridge_domain")
		delete(additionalProperties, "endpoint_groups")
		delete(additionalProperties, "tenant")
		delete(additionalProperties, "vrf_name")
		delete(additionalProperties, "vrf_description")
		delete(additionalProperties, "vrf_rd")
		delete(additionalProperties, "bgp_as")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv4addressDiscoveredData struct {
	value *Ipv4addressDiscoveredData
	isSet bool
}

func (v NullableIpv4addressDiscoveredData) Get() *Ipv4addressDiscoveredData {
	return v.value
}

func (v *NullableIpv4addressDiscoveredData) Set(val *Ipv4addressDiscoveredData) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv4addressDiscoveredData) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv4addressDiscoveredData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv4addressDiscoveredData(val *Ipv4addressDiscoveredData) *NullableIpv4addressDiscoveredData {
	return &NullableIpv4addressDiscoveredData{value: val, isSet: true}
}

func (v NullableIpv4addressDiscoveredData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv4addressDiscoveredData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
