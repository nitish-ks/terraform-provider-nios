/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6network{}

// Ipv6network struct for Ipv6network
type Ipv6network struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This flag controls whether reverse zones are automatically created when the network is added.
	AutoCreateReversezone *bool                 `json:"auto_create_reversezone,omitempty"`
	CloudInfo             *Ipv6networkCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the network; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this network.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// Use this method to set or retrieve the ddns_enable_option_fqdn flag of a DHCP IPv6 Network object. This method controls whether the FQDN option sent by the client is to be used, or if the server can automatically generate the FQDN. This setting overrides the upper-level settings.
	DdnsEnableOptionFqdn *bool `json:"ddns_enable_option_fqdn,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether only the DHCP server is allowed to update DNS, regardless of the DHCP clients requests. Note that changes for this field take effect only if ddns_enable_option_fqdn is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a DHCP network object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// The reason for deleting the RIR registration request.
	DeleteReason *string `json:"delete_reason,omitempty"`
	// Determines whether a network is disabled or not. When this is set to False, the network is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Discover now status for this network.
	DiscoverNowStatus *string `json:"discover_now_status,omitempty"`
	// Number of the discovered BGP AS. When multiple BGP autonomous systems are discovered in the network, this field displays \"Multiple\".
	DiscoveredBgpAs *string `json:"discovered_bgp_as,omitempty"`
	// Discovered bridge domain.
	DiscoveredBridgeDomain *string `json:"discovered_bridge_domain,omitempty"`
	// Discovered tenant.
	DiscoveredTenant *string `json:"discovered_tenant,omitempty"`
	// The identifier of the discovered VLAN. When multiple VLANs are discovered in the network, this field displays \"Multiple\".
	DiscoveredVlanId *string `json:"discovered_vlan_id,omitempty"`
	// The name of the discovered VLAN. When multiple VLANs are discovered in the network, this field displays \"Multiple\".
	DiscoveredVlanName *string `json:"discovered_vlan_name,omitempty"`
	// Description of the discovered VRF. When multiple VRFs are discovered in the network, this field displays \"Multiple\".
	DiscoveredVrfDescription *string `json:"discovered_vrf_description,omitempty"`
	// The name of the discovered VRF. When multiple VRFs are discovered in the network, this field displays \"Multiple\".
	DiscoveredVrfName *string `json:"discovered_vrf_name,omitempty"`
	// Route distinguisher of the discovered VRF. When multiple VRFs are discovered in the network, this field displays \"Multiple\".
	DiscoveredVrfRd            *string                                `json:"discovered_vrf_rd,omitempty"`
	DiscoveryBasicPollSettings *Ipv6networkDiscoveryBasicPollSettings `json:"discovery_basic_poll_settings,omitempty"`
	DiscoveryBlackoutSetting   *Ipv6networkDiscoveryBlackoutSetting   `json:"discovery_blackout_setting,omitempty"`
	// The network discovery engine type.
	DiscoveryEngineType *string `json:"discovery_engine_type,omitempty"`
	// The member that will run discovery for this network.
	DiscoveryMember *string `json:"discovery_member,omitempty"`
	// Use this method to set or retrieve the domain_name value of a DHCP IPv6 Network object.
	DomainName *string `json:"domain_name,omitempty"`
	// Use this method to set or retrieve the dynamic DNS updates flag of a DHCP IPv6 Network object. The DHCP server can send DDNS updates to DNS servers in the same Grid and to external DNS servers. This setting overrides the member level settings.
	DomainNameServers []string `json:"domain_name_servers,omitempty"`
	// The dynamic DNS updates flag of a DHCP IPv6 network object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines whether a discovery is enabled or not for this network. When this is set to False, the network discovery is disabled.
	EnableDiscovery *bool `json:"enable_discovery,omitempty"`
	// Determines if IFMAP publishing is enabled for the network.
	EnableIfmapPublishing *bool `json:"enable_ifmap_publishing,omitempty"`
	// Determines if the discovery for the network should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// The endpoints that provides data for the DHCP IPv6 Network object.
	EndpointSources []string `json:"endpoint_sources,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// This field contains the federated realms associated to this network
	FederatedRealms []Ipv6networkFederatedRealms `json:"federated_realms,omitempty"`
	// The timestamp when the last RIR registration update was sent.
	LastRirRegistrationUpdateSent *int64 `json:"last_rir_registration_update_sent,omitempty"`
	// Last RIR registration update status.
	LastRirRegistrationUpdateStatus *string `json:"last_rir_registration_update_status,omitempty"`
	// This field contains the logic filters to be applied on this IPv6 network. This list corresponds to the match rules that are written to the DHCPv6 configuration file.
	LogicFilterRules []Ipv6networkLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// A list of members servers that serve DHCP for the network. All members in the array must be of the same type. The struct type must be indicated in each element, by setting the \"_struct\" member to the struct type.
	Members []Ipv6networkMembers `json:"members,omitempty"`
	// This field controls whether this object is synchronized with the Multi-Grid Master. If this field is set to True, objects are not synchronized.
	MgmPrivate *bool `json:"mgm_private,omitempty"`
	// This field is assumed to be True unless filled by any conforming objects, such as Network, IPv6 Network, Network Container, IPv6 Network Container, and Network View. This value is set to False if mgm_private is set to True in the parent object.
	MgmPrivateOverridable *bool                    `json:"mgm_private_overridable,omitempty"`
	MsAdUserData          *Ipv6networkMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The network address in IPv6 Address/CIDR format. For regular expression searches, only the IPv6 Address portion is supported. Searches for the CIDR portion is always an exact match. For example, both network containers 16::0/28 and 26::0/24 are matched by expression '.6' and only 26::0/24 is matched by '.6/24'.
	Network *string `json:"network,omitempty"`
	// The network container to which this network belongs, if any.
	NetworkContainer *string `json:"network_container,omitempty"`
	// The name of the network view in which this network resides.
	NetworkView *string `json:"network_view,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options                    []Ipv6networkOptions                   `json:"options,omitempty"`
	PortControlBlackoutSetting *Ipv6networkPortControlBlackoutSetting `json:"port_control_blackout_setting,omitempty"`
	// Use this method to set or retrieve the preferred lifetime value of a DHCP IPv6 Network object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// The registry (RIR) that allocated the IPv6 network address space.
	Rir *string `json:"rir,omitempty"`
	// The RIR organization associated with the IPv6 network.
	RirOrganization *string `json:"rir_organization,omitempty"`
	// The RIR registration action.
	RirRegistrationAction *string `json:"rir_registration_action,omitempty"`
	// The registration status of the IPv6 network in RIR.
	RirRegistrationStatus *string `json:"rir_registration_status,omitempty"`
	// If the field is set to True, the discovery blackout setting will be used for port control blackout setting.
	SamePortControlDiscoveryBlackout *bool `json:"same_port_control_discovery_blackout,omitempty"`
	// Determines whether to send the RIR registration request.
	SendRirRequest    *bool                         `json:"send_rir_request,omitempty"`
	SubscribeSettings *Ipv6networkSubscribeSettings `json:"subscribe_settings,omitempty"`
	// If set on creation, the network is created according to the values specified in the selected template.
	Template *string `json:"template,omitempty"`
	// Determines whether the DHCP IPv6 Network is unmanaged or not.
	Unmanaged *bool `json:"unmanaged,omitempty"`
	// The number of unmanaged IP addresses as discovered by network discovery.
	UnmanagedCount *int64 `json:"unmanaged_count,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: discovery_blackout_setting , port_control_blackout_setting, same_port_control_discovery_blackout
	UseBlackoutSetting *bool `json:"use_blackout_setting,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_enable_option_fqdn
	UseDdnsEnableOptionFqdn *bool `json:"use_ddns_enable_option_fqdn,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: discovery_basic_poll_settings
	UseDiscoveryBasicPollingSettings *bool `json:"use_discovery_basic_polling_settings,omitempty"`
	// Use flag for: domain_name
	UseDomainName *bool `json:"use_domain_name,omitempty"`
	// Use flag for: domain_name_servers
	UseDomainNameServers *bool `json:"use_domain_name_servers,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: discovery_member , enable_discovery
	UseEnableDiscovery *bool `json:"use_enable_discovery,omitempty"`
	// Use flag for: enable_ifmap_publishing
	UseEnableIfmapPublishing *bool `json:"use_enable_ifmap_publishing,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: mgm_private
	UseMgmPrivate *bool `json:"use_mgm_private,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: subscribe_settings
	UseSubscribeSettings *bool `json:"use_subscribe_settings,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// Use flag for: zone_associations
	UseZoneAssociations *bool `json:"use_zone_associations,omitempty"`
	// Use this method to set or retrieve the valid lifetime value of a DHCP IPv6 Network object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
	// List of VLANs assigned to Network.
	Vlans []Ipv6networkVlans `json:"vlans,omitempty"`
	// The list of zones associated with this network.
	ZoneAssociations []Ipv6networkZoneAssociations `json:"zone_associations,omitempty"`
}

// NewIpv6network instantiates a new Ipv6network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6network() *Ipv6network {
	this := Ipv6network{}
	return &this
}

// NewIpv6networkWithDefaults instantiates a new Ipv6network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkWithDefaults() *Ipv6network {
	this := Ipv6network{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6network) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6network) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6network) SetRef(v string) {
	o.Ref = &v
}

// GetAutoCreateReversezone returns the AutoCreateReversezone field value if set, zero value otherwise.
func (o *Ipv6network) GetAutoCreateReversezone() bool {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		var ret bool
		return ret
	}
	return *o.AutoCreateReversezone
}

// GetAutoCreateReversezoneOk returns a tuple with the AutoCreateReversezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetAutoCreateReversezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		return nil, false
	}
	return o.AutoCreateReversezone, true
}

// HasAutoCreateReversezone returns a boolean if a field has been set.
func (o *Ipv6network) HasAutoCreateReversezone() bool {
	if o != nil && !IsNil(o.AutoCreateReversezone) {
		return true
	}

	return false
}

// SetAutoCreateReversezone gets a reference to the given bool and assigns it to the AutoCreateReversezone field.
func (o *Ipv6network) SetAutoCreateReversezone(v bool) {
	o.AutoCreateReversezone = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Ipv6network) GetCloudInfo() Ipv6networkCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret Ipv6networkCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetCloudInfoOk() (*Ipv6networkCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Ipv6network) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given Ipv6networkCloudInfo and assigns it to the CloudInfo field.
func (o *Ipv6network) SetCloudInfo(v Ipv6networkCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6network) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6network) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6network) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6network) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6network) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Ipv6network) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsEnableOptionFqdn returns the DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6network) GetDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.DdnsEnableOptionFqdn
}

// GetDdnsEnableOptionFqdnOk returns a tuple with the DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.DdnsEnableOptionFqdn, true
}

// HasDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6network) HasDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the DdnsEnableOptionFqdn field.
func (o *Ipv6network) SetDdnsEnableOptionFqdn(v bool) {
	o.DdnsEnableOptionFqdn = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6network) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6network) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Ipv6network) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Ipv6network) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Ipv6network) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Ipv6network) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Ipv6network) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6network) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Ipv6network) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDeleteReason returns the DeleteReason field value if set, zero value otherwise.
func (o *Ipv6network) GetDeleteReason() string {
	if o == nil || IsNil(o.DeleteReason) {
		var ret string
		return ret
	}
	return *o.DeleteReason
}

// GetDeleteReasonOk returns a tuple with the DeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDeleteReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeleteReason) {
		return nil, false
	}
	return o.DeleteReason, true
}

// HasDeleteReason returns a boolean if a field has been set.
func (o *Ipv6network) HasDeleteReason() bool {
	if o != nil && !IsNil(o.DeleteReason) {
		return true
	}

	return false
}

// SetDeleteReason gets a reference to the given string and assigns it to the DeleteReason field.
func (o *Ipv6network) SetDeleteReason(v string) {
	o.DeleteReason = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Ipv6network) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Ipv6network) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Ipv6network) SetDisable(v bool) {
	o.Disable = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Ipv6network) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredBgpAs returns the DiscoveredBgpAs field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredBgpAs() string {
	if o == nil || IsNil(o.DiscoveredBgpAs) {
		var ret string
		return ret
	}
	return *o.DiscoveredBgpAs
}

// GetDiscoveredBgpAsOk returns a tuple with the DiscoveredBgpAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredBgpAsOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredBgpAs) {
		return nil, false
	}
	return o.DiscoveredBgpAs, true
}

// HasDiscoveredBgpAs returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredBgpAs() bool {
	if o != nil && !IsNil(o.DiscoveredBgpAs) {
		return true
	}

	return false
}

// SetDiscoveredBgpAs gets a reference to the given string and assigns it to the DiscoveredBgpAs field.
func (o *Ipv6network) SetDiscoveredBgpAs(v string) {
	o.DiscoveredBgpAs = &v
}

// GetDiscoveredBridgeDomain returns the DiscoveredBridgeDomain field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredBridgeDomain() string {
	if o == nil || IsNil(o.DiscoveredBridgeDomain) {
		var ret string
		return ret
	}
	return *o.DiscoveredBridgeDomain
}

// GetDiscoveredBridgeDomainOk returns a tuple with the DiscoveredBridgeDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredBridgeDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredBridgeDomain) {
		return nil, false
	}
	return o.DiscoveredBridgeDomain, true
}

// HasDiscoveredBridgeDomain returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredBridgeDomain() bool {
	if o != nil && !IsNil(o.DiscoveredBridgeDomain) {
		return true
	}

	return false
}

// SetDiscoveredBridgeDomain gets a reference to the given string and assigns it to the DiscoveredBridgeDomain field.
func (o *Ipv6network) SetDiscoveredBridgeDomain(v string) {
	o.DiscoveredBridgeDomain = &v
}

// GetDiscoveredTenant returns the DiscoveredTenant field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredTenant() string {
	if o == nil || IsNil(o.DiscoveredTenant) {
		var ret string
		return ret
	}
	return *o.DiscoveredTenant
}

// GetDiscoveredTenantOk returns a tuple with the DiscoveredTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredTenantOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredTenant) {
		return nil, false
	}
	return o.DiscoveredTenant, true
}

// HasDiscoveredTenant returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredTenant() bool {
	if o != nil && !IsNil(o.DiscoveredTenant) {
		return true
	}

	return false
}

// SetDiscoveredTenant gets a reference to the given string and assigns it to the DiscoveredTenant field.
func (o *Ipv6network) SetDiscoveredTenant(v string) {
	o.DiscoveredTenant = &v
}

// GetDiscoveredVlanId returns the DiscoveredVlanId field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredVlanId() string {
	if o == nil || IsNil(o.DiscoveredVlanId) {
		var ret string
		return ret
	}
	return *o.DiscoveredVlanId
}

// GetDiscoveredVlanIdOk returns a tuple with the DiscoveredVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredVlanId) {
		return nil, false
	}
	return o.DiscoveredVlanId, true
}

// HasDiscoveredVlanId returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredVlanId() bool {
	if o != nil && !IsNil(o.DiscoveredVlanId) {
		return true
	}

	return false
}

// SetDiscoveredVlanId gets a reference to the given string and assigns it to the DiscoveredVlanId field.
func (o *Ipv6network) SetDiscoveredVlanId(v string) {
	o.DiscoveredVlanId = &v
}

// GetDiscoveredVlanName returns the DiscoveredVlanName field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredVlanName() string {
	if o == nil || IsNil(o.DiscoveredVlanName) {
		var ret string
		return ret
	}
	return *o.DiscoveredVlanName
}

// GetDiscoveredVlanNameOk returns a tuple with the DiscoveredVlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredVlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredVlanName) {
		return nil, false
	}
	return o.DiscoveredVlanName, true
}

// HasDiscoveredVlanName returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredVlanName() bool {
	if o != nil && !IsNil(o.DiscoveredVlanName) {
		return true
	}

	return false
}

// SetDiscoveredVlanName gets a reference to the given string and assigns it to the DiscoveredVlanName field.
func (o *Ipv6network) SetDiscoveredVlanName(v string) {
	o.DiscoveredVlanName = &v
}

// GetDiscoveredVrfDescription returns the DiscoveredVrfDescription field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredVrfDescription() string {
	if o == nil || IsNil(o.DiscoveredVrfDescription) {
		var ret string
		return ret
	}
	return *o.DiscoveredVrfDescription
}

// GetDiscoveredVrfDescriptionOk returns a tuple with the DiscoveredVrfDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredVrfDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredVrfDescription) {
		return nil, false
	}
	return o.DiscoveredVrfDescription, true
}

// HasDiscoveredVrfDescription returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredVrfDescription() bool {
	if o != nil && !IsNil(o.DiscoveredVrfDescription) {
		return true
	}

	return false
}

// SetDiscoveredVrfDescription gets a reference to the given string and assigns it to the DiscoveredVrfDescription field.
func (o *Ipv6network) SetDiscoveredVrfDescription(v string) {
	o.DiscoveredVrfDescription = &v
}

// GetDiscoveredVrfName returns the DiscoveredVrfName field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredVrfName() string {
	if o == nil || IsNil(o.DiscoveredVrfName) {
		var ret string
		return ret
	}
	return *o.DiscoveredVrfName
}

// GetDiscoveredVrfNameOk returns a tuple with the DiscoveredVrfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredVrfNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredVrfName) {
		return nil, false
	}
	return o.DiscoveredVrfName, true
}

// HasDiscoveredVrfName returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredVrfName() bool {
	if o != nil && !IsNil(o.DiscoveredVrfName) {
		return true
	}

	return false
}

// SetDiscoveredVrfName gets a reference to the given string and assigns it to the DiscoveredVrfName field.
func (o *Ipv6network) SetDiscoveredVrfName(v string) {
	o.DiscoveredVrfName = &v
}

// GetDiscoveredVrfRd returns the DiscoveredVrfRd field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveredVrfRd() string {
	if o == nil || IsNil(o.DiscoveredVrfRd) {
		var ret string
		return ret
	}
	return *o.DiscoveredVrfRd
}

// GetDiscoveredVrfRdOk returns a tuple with the DiscoveredVrfRd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveredVrfRdOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveredVrfRd) {
		return nil, false
	}
	return o.DiscoveredVrfRd, true
}

// HasDiscoveredVrfRd returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveredVrfRd() bool {
	if o != nil && !IsNil(o.DiscoveredVrfRd) {
		return true
	}

	return false
}

// SetDiscoveredVrfRd gets a reference to the given string and assigns it to the DiscoveredVrfRd field.
func (o *Ipv6network) SetDiscoveredVrfRd(v string) {
	o.DiscoveredVrfRd = &v
}

// GetDiscoveryBasicPollSettings returns the DiscoveryBasicPollSettings field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveryBasicPollSettings() Ipv6networkDiscoveryBasicPollSettings {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		var ret Ipv6networkDiscoveryBasicPollSettings
		return ret
	}
	return *o.DiscoveryBasicPollSettings
}

// GetDiscoveryBasicPollSettingsOk returns a tuple with the DiscoveryBasicPollSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveryBasicPollSettingsOk() (*Ipv6networkDiscoveryBasicPollSettings, bool) {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		return nil, false
	}
	return o.DiscoveryBasicPollSettings, true
}

// HasDiscoveryBasicPollSettings returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveryBasicPollSettings() bool {
	if o != nil && !IsNil(o.DiscoveryBasicPollSettings) {
		return true
	}

	return false
}

// SetDiscoveryBasicPollSettings gets a reference to the given Ipv6networkDiscoveryBasicPollSettings and assigns it to the DiscoveryBasicPollSettings field.
func (o *Ipv6network) SetDiscoveryBasicPollSettings(v Ipv6networkDiscoveryBasicPollSettings) {
	o.DiscoveryBasicPollSettings = &v
}

// GetDiscoveryBlackoutSetting returns the DiscoveryBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveryBlackoutSetting() Ipv6networkDiscoveryBlackoutSetting {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		var ret Ipv6networkDiscoveryBlackoutSetting
		return ret
	}
	return *o.DiscoveryBlackoutSetting
}

// GetDiscoveryBlackoutSettingOk returns a tuple with the DiscoveryBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveryBlackoutSettingOk() (*Ipv6networkDiscoveryBlackoutSetting, bool) {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		return nil, false
	}
	return o.DiscoveryBlackoutSetting, true
}

// HasDiscoveryBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveryBlackoutSetting() bool {
	if o != nil && !IsNil(o.DiscoveryBlackoutSetting) {
		return true
	}

	return false
}

// SetDiscoveryBlackoutSetting gets a reference to the given Ipv6networkDiscoveryBlackoutSetting and assigns it to the DiscoveryBlackoutSetting field.
func (o *Ipv6network) SetDiscoveryBlackoutSetting(v Ipv6networkDiscoveryBlackoutSetting) {
	o.DiscoveryBlackoutSetting = &v
}

// GetDiscoveryEngineType returns the DiscoveryEngineType field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveryEngineType() string {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		var ret string
		return ret
	}
	return *o.DiscoveryEngineType
}

// GetDiscoveryEngineTypeOk returns a tuple with the DiscoveryEngineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveryEngineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		return nil, false
	}
	return o.DiscoveryEngineType, true
}

// HasDiscoveryEngineType returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveryEngineType() bool {
	if o != nil && !IsNil(o.DiscoveryEngineType) {
		return true
	}

	return false
}

// SetDiscoveryEngineType gets a reference to the given string and assigns it to the DiscoveryEngineType field.
func (o *Ipv6network) SetDiscoveryEngineType(v string) {
	o.DiscoveryEngineType = &v
}

// GetDiscoveryMember returns the DiscoveryMember field value if set, zero value otherwise.
func (o *Ipv6network) GetDiscoveryMember() string {
	if o == nil || IsNil(o.DiscoveryMember) {
		var ret string
		return ret
	}
	return *o.DiscoveryMember
}

// GetDiscoveryMemberOk returns a tuple with the DiscoveryMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDiscoveryMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMember) {
		return nil, false
	}
	return o.DiscoveryMember, true
}

// HasDiscoveryMember returns a boolean if a field has been set.
func (o *Ipv6network) HasDiscoveryMember() bool {
	if o != nil && !IsNil(o.DiscoveryMember) {
		return true
	}

	return false
}

// SetDiscoveryMember gets a reference to the given string and assigns it to the DiscoveryMember field.
func (o *Ipv6network) SetDiscoveryMember(v string) {
	o.DiscoveryMember = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *Ipv6network) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *Ipv6network) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *Ipv6network) SetDomainName(v string) {
	o.DomainName = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *Ipv6network) GetDomainNameServers() []string {
	if o == nil || IsNil(o.DomainNameServers) {
		var ret []string
		return ret
	}
	return o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNameServers) {
		return nil, false
	}
	return o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6network) HasDomainNameServers() bool {
	if o != nil && !IsNil(o.DomainNameServers) {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *Ipv6network) SetDomainNameServers(v []string) {
	o.DomainNameServers = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Ipv6network) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Ipv6network) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Ipv6network) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDiscovery returns the EnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6network) GetEnableDiscovery() bool {
	if o == nil || IsNil(o.EnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableDiscovery
}

// GetEnableDiscoveryOk returns a tuple with the EnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDiscovery) {
		return nil, false
	}
	return o.EnableDiscovery, true
}

// HasEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6network) HasEnableDiscovery() bool {
	if o != nil && !IsNil(o.EnableDiscovery) {
		return true
	}

	return false
}

// SetEnableDiscovery gets a reference to the given bool and assigns it to the EnableDiscovery field.
func (o *Ipv6network) SetEnableDiscovery(v bool) {
	o.EnableDiscovery = &v
}

// GetEnableIfmapPublishing returns the EnableIfmapPublishing field value if set, zero value otherwise.
func (o *Ipv6network) GetEnableIfmapPublishing() bool {
	if o == nil || IsNil(o.EnableIfmapPublishing) {
		var ret bool
		return ret
	}
	return *o.EnableIfmapPublishing
}

// GetEnableIfmapPublishingOk returns a tuple with the EnableIfmapPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetEnableIfmapPublishingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIfmapPublishing) {
		return nil, false
	}
	return o.EnableIfmapPublishing, true
}

// HasEnableIfmapPublishing returns a boolean if a field has been set.
func (o *Ipv6network) HasEnableIfmapPublishing() bool {
	if o != nil && !IsNil(o.EnableIfmapPublishing) {
		return true
	}

	return false
}

// SetEnableIfmapPublishing gets a reference to the given bool and assigns it to the EnableIfmapPublishing field.
func (o *Ipv6network) SetEnableIfmapPublishing(v bool) {
	o.EnableIfmapPublishing = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Ipv6network) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Ipv6network) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Ipv6network) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEndpointSources returns the EndpointSources field value if set, zero value otherwise.
func (o *Ipv6network) GetEndpointSources() []string {
	if o == nil || IsNil(o.EndpointSources) {
		var ret []string
		return ret
	}
	return o.EndpointSources
}

// GetEndpointSourcesOk returns a tuple with the EndpointSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetEndpointSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.EndpointSources) {
		return nil, false
	}
	return o.EndpointSources, true
}

// HasEndpointSources returns a boolean if a field has been set.
func (o *Ipv6network) HasEndpointSources() bool {
	if o != nil && !IsNil(o.EndpointSources) {
		return true
	}

	return false
}

// SetEndpointSources gets a reference to the given []string and assigns it to the EndpointSources field.
func (o *Ipv6network) SetEndpointSources(v []string) {
	o.EndpointSources = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ipv6network) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ipv6network) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ipv6network) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *Ipv6network) GetFederatedRealms() []Ipv6networkFederatedRealms {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []Ipv6networkFederatedRealms
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetFederatedRealmsOk() ([]Ipv6networkFederatedRealms, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *Ipv6network) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []Ipv6networkFederatedRealms and assigns it to the FederatedRealms field.
func (o *Ipv6network) SetFederatedRealms(v []Ipv6networkFederatedRealms) {
	o.FederatedRealms = v
}

// GetLastRirRegistrationUpdateSent returns the LastRirRegistrationUpdateSent field value if set, zero value otherwise.
func (o *Ipv6network) GetLastRirRegistrationUpdateSent() int64 {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		var ret int64
		return ret
	}
	return *o.LastRirRegistrationUpdateSent
}

// GetLastRirRegistrationUpdateSentOk returns a tuple with the LastRirRegistrationUpdateSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetLastRirRegistrationUpdateSentOk() (*int64, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateSent, true
}

// HasLastRirRegistrationUpdateSent returns a boolean if a field has been set.
func (o *Ipv6network) HasLastRirRegistrationUpdateSent() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateSent) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateSent gets a reference to the given int64 and assigns it to the LastRirRegistrationUpdateSent field.
func (o *Ipv6network) SetLastRirRegistrationUpdateSent(v int64) {
	o.LastRirRegistrationUpdateSent = &v
}

// GetLastRirRegistrationUpdateStatus returns the LastRirRegistrationUpdateStatus field value if set, zero value otherwise.
func (o *Ipv6network) GetLastRirRegistrationUpdateStatus() string {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		var ret string
		return ret
	}
	return *o.LastRirRegistrationUpdateStatus
}

// GetLastRirRegistrationUpdateStatusOk returns a tuple with the LastRirRegistrationUpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetLastRirRegistrationUpdateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateStatus, true
}

// HasLastRirRegistrationUpdateStatus returns a boolean if a field has been set.
func (o *Ipv6network) HasLastRirRegistrationUpdateStatus() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateStatus) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateStatus gets a reference to the given string and assigns it to the LastRirRegistrationUpdateStatus field.
func (o *Ipv6network) SetLastRirRegistrationUpdateStatus(v string) {
	o.LastRirRegistrationUpdateStatus = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6network) GetLogicFilterRules() []Ipv6networkLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6networkLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetLogicFilterRulesOk() ([]Ipv6networkLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6network) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6networkLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6network) SetLogicFilterRules(v []Ipv6networkLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Ipv6network) GetMembers() []Ipv6networkMembers {
	if o == nil || IsNil(o.Members) {
		var ret []Ipv6networkMembers
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetMembersOk() ([]Ipv6networkMembers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Ipv6network) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Ipv6networkMembers and assigns it to the Members field.
func (o *Ipv6network) SetMembers(v []Ipv6networkMembers) {
	o.Members = v
}

// GetMgmPrivate returns the MgmPrivate field value if set, zero value otherwise.
func (o *Ipv6network) GetMgmPrivate() bool {
	if o == nil || IsNil(o.MgmPrivate) {
		var ret bool
		return ret
	}
	return *o.MgmPrivate
}

// GetMgmPrivateOk returns a tuple with the MgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivate) {
		return nil, false
	}
	return o.MgmPrivate, true
}

// HasMgmPrivate returns a boolean if a field has been set.
func (o *Ipv6network) HasMgmPrivate() bool {
	if o != nil && !IsNil(o.MgmPrivate) {
		return true
	}

	return false
}

// SetMgmPrivate gets a reference to the given bool and assigns it to the MgmPrivate field.
func (o *Ipv6network) SetMgmPrivate(v bool) {
	o.MgmPrivate = &v
}

// GetMgmPrivateOverridable returns the MgmPrivateOverridable field value if set, zero value otherwise.
func (o *Ipv6network) GetMgmPrivateOverridable() bool {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		var ret bool
		return ret
	}
	return *o.MgmPrivateOverridable
}

// GetMgmPrivateOverridableOk returns a tuple with the MgmPrivateOverridable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetMgmPrivateOverridableOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		return nil, false
	}
	return o.MgmPrivateOverridable, true
}

// HasMgmPrivateOverridable returns a boolean if a field has been set.
func (o *Ipv6network) HasMgmPrivateOverridable() bool {
	if o != nil && !IsNil(o.MgmPrivateOverridable) {
		return true
	}

	return false
}

// SetMgmPrivateOverridable gets a reference to the given bool and assigns it to the MgmPrivateOverridable field.
func (o *Ipv6network) SetMgmPrivateOverridable(v bool) {
	o.MgmPrivateOverridable = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Ipv6network) GetMsAdUserData() Ipv6networkMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret Ipv6networkMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetMsAdUserDataOk() (*Ipv6networkMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Ipv6network) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given Ipv6networkMsAdUserData and assigns it to the MsAdUserData field.
func (o *Ipv6network) SetMsAdUserData(v Ipv6networkMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Ipv6network) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Ipv6network) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Ipv6network) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkContainer returns the NetworkContainer field value if set, zero value otherwise.
func (o *Ipv6network) GetNetworkContainer() string {
	if o == nil || IsNil(o.NetworkContainer) {
		var ret string
		return ret
	}
	return *o.NetworkContainer
}

// GetNetworkContainerOk returns a tuple with the NetworkContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetNetworkContainerOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkContainer) {
		return nil, false
	}
	return o.NetworkContainer, true
}

// HasNetworkContainer returns a boolean if a field has been set.
func (o *Ipv6network) HasNetworkContainer() bool {
	if o != nil && !IsNil(o.NetworkContainer) {
		return true
	}

	return false
}

// SetNetworkContainer gets a reference to the given string and assigns it to the NetworkContainer field.
func (o *Ipv6network) SetNetworkContainer(v string) {
	o.NetworkContainer = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Ipv6network) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Ipv6network) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Ipv6network) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Ipv6network) GetOptions() []Ipv6networkOptions {
	if o == nil || IsNil(o.Options) {
		var ret []Ipv6networkOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetOptionsOk() ([]Ipv6networkOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Ipv6network) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Ipv6networkOptions and assigns it to the Options field.
func (o *Ipv6network) SetOptions(v []Ipv6networkOptions) {
	o.Options = v
}

// GetPortControlBlackoutSetting returns the PortControlBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6network) GetPortControlBlackoutSetting() Ipv6networkPortControlBlackoutSetting {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		var ret Ipv6networkPortControlBlackoutSetting
		return ret
	}
	return *o.PortControlBlackoutSetting
}

// GetPortControlBlackoutSettingOk returns a tuple with the PortControlBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetPortControlBlackoutSettingOk() (*Ipv6networkPortControlBlackoutSetting, bool) {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		return nil, false
	}
	return o.PortControlBlackoutSetting, true
}

// HasPortControlBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6network) HasPortControlBlackoutSetting() bool {
	if o != nil && !IsNil(o.PortControlBlackoutSetting) {
		return true
	}

	return false
}

// SetPortControlBlackoutSetting gets a reference to the given Ipv6networkPortControlBlackoutSetting and assigns it to the PortControlBlackoutSetting field.
func (o *Ipv6network) SetPortControlBlackoutSetting(v Ipv6networkPortControlBlackoutSetting) {
	o.PortControlBlackoutSetting = &v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6network) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6network) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *Ipv6network) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Ipv6network) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6network) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Ipv6network) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Ipv6network) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Ipv6network) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Ipv6network) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *Ipv6network) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *Ipv6network) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *Ipv6network) SetRir(v string) {
	o.Rir = &v
}

// GetRirOrganization returns the RirOrganization field value if set, zero value otherwise.
func (o *Ipv6network) GetRirOrganization() string {
	if o == nil || IsNil(o.RirOrganization) {
		var ret string
		return ret
	}
	return *o.RirOrganization
}

// GetRirOrganizationOk returns a tuple with the RirOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRirOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.RirOrganization) {
		return nil, false
	}
	return o.RirOrganization, true
}

// HasRirOrganization returns a boolean if a field has been set.
func (o *Ipv6network) HasRirOrganization() bool {
	if o != nil && !IsNil(o.RirOrganization) {
		return true
	}

	return false
}

// SetRirOrganization gets a reference to the given string and assigns it to the RirOrganization field.
func (o *Ipv6network) SetRirOrganization(v string) {
	o.RirOrganization = &v
}

// GetRirRegistrationAction returns the RirRegistrationAction field value if set, zero value otherwise.
func (o *Ipv6network) GetRirRegistrationAction() string {
	if o == nil || IsNil(o.RirRegistrationAction) {
		var ret string
		return ret
	}
	return *o.RirRegistrationAction
}

// GetRirRegistrationActionOk returns a tuple with the RirRegistrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRirRegistrationActionOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationAction) {
		return nil, false
	}
	return o.RirRegistrationAction, true
}

// HasRirRegistrationAction returns a boolean if a field has been set.
func (o *Ipv6network) HasRirRegistrationAction() bool {
	if o != nil && !IsNil(o.RirRegistrationAction) {
		return true
	}

	return false
}

// SetRirRegistrationAction gets a reference to the given string and assigns it to the RirRegistrationAction field.
func (o *Ipv6network) SetRirRegistrationAction(v string) {
	o.RirRegistrationAction = &v
}

// GetRirRegistrationStatus returns the RirRegistrationStatus field value if set, zero value otherwise.
func (o *Ipv6network) GetRirRegistrationStatus() string {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RirRegistrationStatus
}

// GetRirRegistrationStatusOk returns a tuple with the RirRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetRirRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		return nil, false
	}
	return o.RirRegistrationStatus, true
}

// HasRirRegistrationStatus returns a boolean if a field has been set.
func (o *Ipv6network) HasRirRegistrationStatus() bool {
	if o != nil && !IsNil(o.RirRegistrationStatus) {
		return true
	}

	return false
}

// SetRirRegistrationStatus gets a reference to the given string and assigns it to the RirRegistrationStatus field.
func (o *Ipv6network) SetRirRegistrationStatus(v string) {
	o.RirRegistrationStatus = &v
}

// GetSamePortControlDiscoveryBlackout returns the SamePortControlDiscoveryBlackout field value if set, zero value otherwise.
func (o *Ipv6network) GetSamePortControlDiscoveryBlackout() bool {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		var ret bool
		return ret
	}
	return *o.SamePortControlDiscoveryBlackout
}

// GetSamePortControlDiscoveryBlackoutOk returns a tuple with the SamePortControlDiscoveryBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetSamePortControlDiscoveryBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		return nil, false
	}
	return o.SamePortControlDiscoveryBlackout, true
}

// HasSamePortControlDiscoveryBlackout returns a boolean if a field has been set.
func (o *Ipv6network) HasSamePortControlDiscoveryBlackout() bool {
	if o != nil && !IsNil(o.SamePortControlDiscoveryBlackout) {
		return true
	}

	return false
}

// SetSamePortControlDiscoveryBlackout gets a reference to the given bool and assigns it to the SamePortControlDiscoveryBlackout field.
func (o *Ipv6network) SetSamePortControlDiscoveryBlackout(v bool) {
	o.SamePortControlDiscoveryBlackout = &v
}

// GetSendRirRequest returns the SendRirRequest field value if set, zero value otherwise.
func (o *Ipv6network) GetSendRirRequest() bool {
	if o == nil || IsNil(o.SendRirRequest) {
		var ret bool
		return ret
	}
	return *o.SendRirRequest
}

// GetSendRirRequestOk returns a tuple with the SendRirRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetSendRirRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRirRequest) {
		return nil, false
	}
	return o.SendRirRequest, true
}

// HasSendRirRequest returns a boolean if a field has been set.
func (o *Ipv6network) HasSendRirRequest() bool {
	if o != nil && !IsNil(o.SendRirRequest) {
		return true
	}

	return false
}

// SetSendRirRequest gets a reference to the given bool and assigns it to the SendRirRequest field.
func (o *Ipv6network) SetSendRirRequest(v bool) {
	o.SendRirRequest = &v
}

// GetSubscribeSettings returns the SubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6network) GetSubscribeSettings() Ipv6networkSubscribeSettings {
	if o == nil || IsNil(o.SubscribeSettings) {
		var ret Ipv6networkSubscribeSettings
		return ret
	}
	return *o.SubscribeSettings
}

// GetSubscribeSettingsOk returns a tuple with the SubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetSubscribeSettingsOk() (*Ipv6networkSubscribeSettings, bool) {
	if o == nil || IsNil(o.SubscribeSettings) {
		return nil, false
	}
	return o.SubscribeSettings, true
}

// HasSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6network) HasSubscribeSettings() bool {
	if o != nil && !IsNil(o.SubscribeSettings) {
		return true
	}

	return false
}

// SetSubscribeSettings gets a reference to the given Ipv6networkSubscribeSettings and assigns it to the SubscribeSettings field.
func (o *Ipv6network) SetSubscribeSettings(v Ipv6networkSubscribeSettings) {
	o.SubscribeSettings = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Ipv6network) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Ipv6network) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *Ipv6network) SetTemplate(v string) {
	o.Template = &v
}

// GetUnmanaged returns the Unmanaged field value if set, zero value otherwise.
func (o *Ipv6network) GetUnmanaged() bool {
	if o == nil || IsNil(o.Unmanaged) {
		var ret bool
		return ret
	}
	return *o.Unmanaged
}

// GetUnmanagedOk returns a tuple with the Unmanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUnmanagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unmanaged) {
		return nil, false
	}
	return o.Unmanaged, true
}

// HasUnmanaged returns a boolean if a field has been set.
func (o *Ipv6network) HasUnmanaged() bool {
	if o != nil && !IsNil(o.Unmanaged) {
		return true
	}

	return false
}

// SetUnmanaged gets a reference to the given bool and assigns it to the Unmanaged field.
func (o *Ipv6network) SetUnmanaged(v bool) {
	o.Unmanaged = &v
}

// GetUnmanagedCount returns the UnmanagedCount field value if set, zero value otherwise.
func (o *Ipv6network) GetUnmanagedCount() int64 {
	if o == nil || IsNil(o.UnmanagedCount) {
		var ret int64
		return ret
	}
	return *o.UnmanagedCount
}

// GetUnmanagedCountOk returns a tuple with the UnmanagedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUnmanagedCountOk() (*int64, bool) {
	if o == nil || IsNil(o.UnmanagedCount) {
		return nil, false
	}
	return o.UnmanagedCount, true
}

// HasUnmanagedCount returns a boolean if a field has been set.
func (o *Ipv6network) HasUnmanagedCount() bool {
	if o != nil && !IsNil(o.UnmanagedCount) {
		return true
	}

	return false
}

// SetUnmanagedCount gets a reference to the given int64 and assigns it to the UnmanagedCount field.
func (o *Ipv6network) SetUnmanagedCount(v int64) {
	o.UnmanagedCount = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6network) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6network) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Ipv6network) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseBlackoutSetting returns the UseBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6network) GetUseBlackoutSetting() bool {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseBlackoutSetting
}

// GetUseBlackoutSettingOk returns a tuple with the UseBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseBlackoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		return nil, false
	}
	return o.UseBlackoutSetting, true
}

// HasUseBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6network) HasUseBlackoutSetting() bool {
	if o != nil && !IsNil(o.UseBlackoutSetting) {
		return true
	}

	return false
}

// SetUseBlackoutSetting gets a reference to the given bool and assigns it to the UseBlackoutSetting field.
func (o *Ipv6network) SetUseBlackoutSetting(v bool) {
	o.UseBlackoutSetting = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Ipv6network) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsEnableOptionFqdn returns the UseDdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.UseDdnsEnableOptionFqdn
}

// GetUseDdnsEnableOptionFqdnOk returns a tuple with the UseDdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.UseDdnsEnableOptionFqdn, true
}

// HasUseDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.UseDdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetUseDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the UseDdnsEnableOptionFqdn field.
func (o *Ipv6network) SetUseDdnsEnableOptionFqdn(v bool) {
	o.UseDdnsEnableOptionFqdn = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Ipv6network) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Ipv6network) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDiscoveryBasicPollingSettings returns the UseDiscoveryBasicPollingSettings field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDiscoveryBasicPollingSettings() bool {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		var ret bool
		return ret
	}
	return *o.UseDiscoveryBasicPollingSettings
}

// GetUseDiscoveryBasicPollingSettingsOk returns a tuple with the UseDiscoveryBasicPollingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDiscoveryBasicPollingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		return nil, false
	}
	return o.UseDiscoveryBasicPollingSettings, true
}

// HasUseDiscoveryBasicPollingSettings returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDiscoveryBasicPollingSettings() bool {
	if o != nil && !IsNil(o.UseDiscoveryBasicPollingSettings) {
		return true
	}

	return false
}

// SetUseDiscoveryBasicPollingSettings gets a reference to the given bool and assigns it to the UseDiscoveryBasicPollingSettings field.
func (o *Ipv6network) SetUseDiscoveryBasicPollingSettings(v bool) {
	o.UseDiscoveryBasicPollingSettings = &v
}

// GetUseDomainName returns the UseDomainName field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDomainName() bool {
	if o == nil || IsNil(o.UseDomainName) {
		var ret bool
		return ret
	}
	return *o.UseDomainName
}

// GetUseDomainNameOk returns a tuple with the UseDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainName) {
		return nil, false
	}
	return o.UseDomainName, true
}

// HasUseDomainName returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDomainName() bool {
	if o != nil && !IsNil(o.UseDomainName) {
		return true
	}

	return false
}

// SetUseDomainName gets a reference to the given bool and assigns it to the UseDomainName field.
func (o *Ipv6network) SetUseDomainName(v bool) {
	o.UseDomainName = &v
}

// GetUseDomainNameServers returns the UseDomainNameServers field value if set, zero value otherwise.
func (o *Ipv6network) GetUseDomainNameServers() bool {
	if o == nil || IsNil(o.UseDomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseDomainNameServers
}

// GetUseDomainNameServersOk returns a tuple with the UseDomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseDomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainNameServers) {
		return nil, false
	}
	return o.UseDomainNameServers, true
}

// HasUseDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6network) HasUseDomainNameServers() bool {
	if o != nil && !IsNil(o.UseDomainNameServers) {
		return true
	}

	return false
}

// SetUseDomainNameServers gets a reference to the given bool and assigns it to the UseDomainNameServers field.
func (o *Ipv6network) SetUseDomainNameServers(v bool) {
	o.UseDomainNameServers = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Ipv6network) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Ipv6network) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Ipv6network) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDiscovery returns the UseEnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6network) GetUseEnableDiscovery() bool {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.UseEnableDiscovery
}

// GetUseEnableDiscoveryOk returns a tuple with the UseEnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		return nil, false
	}
	return o.UseEnableDiscovery, true
}

// HasUseEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6network) HasUseEnableDiscovery() bool {
	if o != nil && !IsNil(o.UseEnableDiscovery) {
		return true
	}

	return false
}

// SetUseEnableDiscovery gets a reference to the given bool and assigns it to the UseEnableDiscovery field.
func (o *Ipv6network) SetUseEnableDiscovery(v bool) {
	o.UseEnableDiscovery = &v
}

// GetUseEnableIfmapPublishing returns the UseEnableIfmapPublishing field value if set, zero value otherwise.
func (o *Ipv6network) GetUseEnableIfmapPublishing() bool {
	if o == nil || IsNil(o.UseEnableIfmapPublishing) {
		var ret bool
		return ret
	}
	return *o.UseEnableIfmapPublishing
}

// GetUseEnableIfmapPublishingOk returns a tuple with the UseEnableIfmapPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseEnableIfmapPublishingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableIfmapPublishing) {
		return nil, false
	}
	return o.UseEnableIfmapPublishing, true
}

// HasUseEnableIfmapPublishing returns a boolean if a field has been set.
func (o *Ipv6network) HasUseEnableIfmapPublishing() bool {
	if o != nil && !IsNil(o.UseEnableIfmapPublishing) {
		return true
	}

	return false
}

// SetUseEnableIfmapPublishing gets a reference to the given bool and assigns it to the UseEnableIfmapPublishing field.
func (o *Ipv6network) SetUseEnableIfmapPublishing(v bool) {
	o.UseEnableIfmapPublishing = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6network) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6network) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6network) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMgmPrivate returns the UseMgmPrivate field value if set, zero value otherwise.
func (o *Ipv6network) GetUseMgmPrivate() bool {
	if o == nil || IsNil(o.UseMgmPrivate) {
		var ret bool
		return ret
	}
	return *o.UseMgmPrivate
}

// GetUseMgmPrivateOk returns a tuple with the UseMgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmPrivate) {
		return nil, false
	}
	return o.UseMgmPrivate, true
}

// HasUseMgmPrivate returns a boolean if a field has been set.
func (o *Ipv6network) HasUseMgmPrivate() bool {
	if o != nil && !IsNil(o.UseMgmPrivate) {
		return true
	}

	return false
}

// SetUseMgmPrivate gets a reference to the given bool and assigns it to the UseMgmPrivate field.
func (o *Ipv6network) SetUseMgmPrivate(v bool) {
	o.UseMgmPrivate = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Ipv6network) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Ipv6network) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Ipv6network) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6network) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6network) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *Ipv6network) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Ipv6network) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6network) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Ipv6network) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseSubscribeSettings returns the UseSubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6network) GetUseSubscribeSettings() bool {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		var ret bool
		return ret
	}
	return *o.UseSubscribeSettings
}

// GetUseSubscribeSettingsOk returns a tuple with the UseSubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseSubscribeSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		return nil, false
	}
	return o.UseSubscribeSettings, true
}

// HasUseSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6network) HasUseSubscribeSettings() bool {
	if o != nil && !IsNil(o.UseSubscribeSettings) {
		return true
	}

	return false
}

// SetUseSubscribeSettings gets a reference to the given bool and assigns it to the UseSubscribeSettings field.
func (o *Ipv6network) SetUseSubscribeSettings(v bool) {
	o.UseSubscribeSettings = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6network) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6network) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Ipv6network) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *Ipv6network) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *Ipv6network) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *Ipv6network) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetUseZoneAssociations returns the UseZoneAssociations field value if set, zero value otherwise.
func (o *Ipv6network) GetUseZoneAssociations() bool {
	if o == nil || IsNil(o.UseZoneAssociations) {
		var ret bool
		return ret
	}
	return *o.UseZoneAssociations
}

// GetUseZoneAssociationsOk returns a tuple with the UseZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetUseZoneAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseZoneAssociations) {
		return nil, false
	}
	return o.UseZoneAssociations, true
}

// HasUseZoneAssociations returns a boolean if a field has been set.
func (o *Ipv6network) HasUseZoneAssociations() bool {
	if o != nil && !IsNil(o.UseZoneAssociations) {
		return true
	}

	return false
}

// SetUseZoneAssociations gets a reference to the given bool and assigns it to the UseZoneAssociations field.
func (o *Ipv6network) SetUseZoneAssociations(v bool) {
	o.UseZoneAssociations = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *Ipv6network) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *Ipv6network) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *Ipv6network) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

// GetVlans returns the Vlans field value if set, zero value otherwise.
func (o *Ipv6network) GetVlans() []Ipv6networkVlans {
	if o == nil || IsNil(o.Vlans) {
		var ret []Ipv6networkVlans
		return ret
	}
	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetVlansOk() ([]Ipv6networkVlans, bool) {
	if o == nil || IsNil(o.Vlans) {
		return nil, false
	}
	return o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *Ipv6network) HasVlans() bool {
	if o != nil && !IsNil(o.Vlans) {
		return true
	}

	return false
}

// SetVlans gets a reference to the given []Ipv6networkVlans and assigns it to the Vlans field.
func (o *Ipv6network) SetVlans(v []Ipv6networkVlans) {
	o.Vlans = v
}

// GetZoneAssociations returns the ZoneAssociations field value if set, zero value otherwise.
func (o *Ipv6network) GetZoneAssociations() []Ipv6networkZoneAssociations {
	if o == nil || IsNil(o.ZoneAssociations) {
		var ret []Ipv6networkZoneAssociations
		return ret
	}
	return o.ZoneAssociations
}

// GetZoneAssociationsOk returns a tuple with the ZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6network) GetZoneAssociationsOk() ([]Ipv6networkZoneAssociations, bool) {
	if o == nil || IsNil(o.ZoneAssociations) {
		return nil, false
	}
	return o.ZoneAssociations, true
}

// HasZoneAssociations returns a boolean if a field has been set.
func (o *Ipv6network) HasZoneAssociations() bool {
	if o != nil && !IsNil(o.ZoneAssociations) {
		return true
	}

	return false
}

// SetZoneAssociations gets a reference to the given []Ipv6networkZoneAssociations and assigns it to the ZoneAssociations field.
func (o *Ipv6network) SetZoneAssociations(v []Ipv6networkZoneAssociations) {
	o.ZoneAssociations = v
}

func (o Ipv6network) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoCreateReversezone) {
		toSerialize["auto_create_reversezone"] = o.AutoCreateReversezone
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsEnableOptionFqdn) {
		toSerialize["ddns_enable_option_fqdn"] = o.DdnsEnableOptionFqdn
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DeleteReason) {
		toSerialize["delete_reason"] = o.DeleteReason
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredBgpAs) {
		toSerialize["discovered_bgp_as"] = o.DiscoveredBgpAs
	}
	if !IsNil(o.DiscoveredBridgeDomain) {
		toSerialize["discovered_bridge_domain"] = o.DiscoveredBridgeDomain
	}
	if !IsNil(o.DiscoveredTenant) {
		toSerialize["discovered_tenant"] = o.DiscoveredTenant
	}
	if !IsNil(o.DiscoveredVlanId) {
		toSerialize["discovered_vlan_id"] = o.DiscoveredVlanId
	}
	if !IsNil(o.DiscoveredVlanName) {
		toSerialize["discovered_vlan_name"] = o.DiscoveredVlanName
	}
	if !IsNil(o.DiscoveredVrfDescription) {
		toSerialize["discovered_vrf_description"] = o.DiscoveredVrfDescription
	}
	if !IsNil(o.DiscoveredVrfName) {
		toSerialize["discovered_vrf_name"] = o.DiscoveredVrfName
	}
	if !IsNil(o.DiscoveredVrfRd) {
		toSerialize["discovered_vrf_rd"] = o.DiscoveredVrfRd
	}
	if !IsNil(o.DiscoveryBasicPollSettings) {
		toSerialize["discovery_basic_poll_settings"] = o.DiscoveryBasicPollSettings
	}
	if !IsNil(o.DiscoveryBlackoutSetting) {
		toSerialize["discovery_blackout_setting"] = o.DiscoveryBlackoutSetting
	}
	if !IsNil(o.DiscoveryEngineType) {
		toSerialize["discovery_engine_type"] = o.DiscoveryEngineType
	}
	if !IsNil(o.DiscoveryMember) {
		toSerialize["discovery_member"] = o.DiscoveryMember
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.DomainNameServers) {
		toSerialize["domain_name_servers"] = o.DomainNameServers
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDiscovery) {
		toSerialize["enable_discovery"] = o.EnableDiscovery
	}
	if !IsNil(o.EnableIfmapPublishing) {
		toSerialize["enable_ifmap_publishing"] = o.EnableIfmapPublishing
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EndpointSources) {
		toSerialize["endpoint_sources"] = o.EndpointSources
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.LastRirRegistrationUpdateSent) {
		toSerialize["last_rir_registration_update_sent"] = o.LastRirRegistrationUpdateSent
	}
	if !IsNil(o.LastRirRegistrationUpdateStatus) {
		toSerialize["last_rir_registration_update_status"] = o.LastRirRegistrationUpdateStatus
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.MgmPrivate) {
		toSerialize["mgm_private"] = o.MgmPrivate
	}
	if !IsNil(o.MgmPrivateOverridable) {
		toSerialize["mgm_private_overridable"] = o.MgmPrivateOverridable
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkContainer) {
		toSerialize["network_container"] = o.NetworkContainer
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PortControlBlackoutSetting) {
		toSerialize["port_control_blackout_setting"] = o.PortControlBlackoutSetting
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.RirOrganization) {
		toSerialize["rir_organization"] = o.RirOrganization
	}
	if !IsNil(o.RirRegistrationAction) {
		toSerialize["rir_registration_action"] = o.RirRegistrationAction
	}
	if !IsNil(o.RirRegistrationStatus) {
		toSerialize["rir_registration_status"] = o.RirRegistrationStatus
	}
	if !IsNil(o.SamePortControlDiscoveryBlackout) {
		toSerialize["same_port_control_discovery_blackout"] = o.SamePortControlDiscoveryBlackout
	}
	if !IsNil(o.SendRirRequest) {
		toSerialize["send_rir_request"] = o.SendRirRequest
	}
	if !IsNil(o.SubscribeSettings) {
		toSerialize["subscribe_settings"] = o.SubscribeSettings
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.Unmanaged) {
		toSerialize["unmanaged"] = o.Unmanaged
	}
	if !IsNil(o.UnmanagedCount) {
		toSerialize["unmanaged_count"] = o.UnmanagedCount
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseBlackoutSetting) {
		toSerialize["use_blackout_setting"] = o.UseBlackoutSetting
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsEnableOptionFqdn) {
		toSerialize["use_ddns_enable_option_fqdn"] = o.UseDdnsEnableOptionFqdn
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDiscoveryBasicPollingSettings) {
		toSerialize["use_discovery_basic_polling_settings"] = o.UseDiscoveryBasicPollingSettings
	}
	if !IsNil(o.UseDomainName) {
		toSerialize["use_domain_name"] = o.UseDomainName
	}
	if !IsNil(o.UseDomainNameServers) {
		toSerialize["use_domain_name_servers"] = o.UseDomainNameServers
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDiscovery) {
		toSerialize["use_enable_discovery"] = o.UseEnableDiscovery
	}
	if !IsNil(o.UseEnableIfmapPublishing) {
		toSerialize["use_enable_ifmap_publishing"] = o.UseEnableIfmapPublishing
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMgmPrivate) {
		toSerialize["use_mgm_private"] = o.UseMgmPrivate
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseSubscribeSettings) {
		toSerialize["use_subscribe_settings"] = o.UseSubscribeSettings
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.UseZoneAssociations) {
		toSerialize["use_zone_associations"] = o.UseZoneAssociations
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	if !IsNil(o.Vlans) {
		toSerialize["vlans"] = o.Vlans
	}
	if !IsNil(o.ZoneAssociations) {
		toSerialize["zone_associations"] = o.ZoneAssociations
	}
	return toSerialize, nil
}

type NullableIpv6network struct {
	value *Ipv6network
	isSet bool
}

func (v NullableIpv6network) Get() *Ipv6network {
	return v.value
}

func (v *NullableIpv6network) Set(val *Ipv6network) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6network) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6network) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6network(val *Ipv6network) *NullableIpv6network {
	return &NullableIpv6network{value: val, isSet: true}
}

func (v NullableIpv6network) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6network) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
