/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkPortControlBlackoutSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkPortControlBlackoutSetting{}

// Ipv6networkPortControlBlackoutSetting struct for Ipv6networkPortControlBlackoutSetting
type Ipv6networkPortControlBlackoutSetting struct {
	// Determines whether a blackout is enabled or not.
	EnableBlackout *bool `json:"enable_blackout,omitempty"`
	// The blackout duration in seconds; minimum value is 1 minute.
	BlackoutDuration     *int64                                                 `json:"blackout_duration,omitempty"`
	BlackoutSchedule     *Ipv6networkportcontrolblackoutsettingBlackoutSchedule `json:"blackout_schedule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6networkPortControlBlackoutSetting Ipv6networkPortControlBlackoutSetting

// NewIpv6networkPortControlBlackoutSetting instantiates a new Ipv6networkPortControlBlackoutSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkPortControlBlackoutSetting() *Ipv6networkPortControlBlackoutSetting {
	this := Ipv6networkPortControlBlackoutSetting{}
	return &this
}

// NewIpv6networkPortControlBlackoutSettingWithDefaults instantiates a new Ipv6networkPortControlBlackoutSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkPortControlBlackoutSettingWithDefaults() *Ipv6networkPortControlBlackoutSetting {
	this := Ipv6networkPortControlBlackoutSetting{}
	return &this
}

// GetEnableBlackout returns the EnableBlackout field value if set, zero value otherwise.
func (o *Ipv6networkPortControlBlackoutSetting) GetEnableBlackout() bool {
	if o == nil || IsNil(o.EnableBlackout) {
		var ret bool
		return ret
	}
	return *o.EnableBlackout
}

// GetEnableBlackoutOk returns a tuple with the EnableBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkPortControlBlackoutSetting) GetEnableBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlackout) {
		return nil, false
	}
	return o.EnableBlackout, true
}

// HasEnableBlackout returns a boolean if a field has been set.
func (o *Ipv6networkPortControlBlackoutSetting) HasEnableBlackout() bool {
	if o != nil && !IsNil(o.EnableBlackout) {
		return true
	}

	return false
}

// SetEnableBlackout gets a reference to the given bool and assigns it to the EnableBlackout field.
func (o *Ipv6networkPortControlBlackoutSetting) SetEnableBlackout(v bool) {
	o.EnableBlackout = &v
}

// GetBlackoutDuration returns the BlackoutDuration field value if set, zero value otherwise.
func (o *Ipv6networkPortControlBlackoutSetting) GetBlackoutDuration() int64 {
	if o == nil || IsNil(o.BlackoutDuration) {
		var ret int64
		return ret
	}
	return *o.BlackoutDuration
}

// GetBlackoutDurationOk returns a tuple with the BlackoutDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkPortControlBlackoutSetting) GetBlackoutDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.BlackoutDuration) {
		return nil, false
	}
	return o.BlackoutDuration, true
}

// HasBlackoutDuration returns a boolean if a field has been set.
func (o *Ipv6networkPortControlBlackoutSetting) HasBlackoutDuration() bool {
	if o != nil && !IsNil(o.BlackoutDuration) {
		return true
	}

	return false
}

// SetBlackoutDuration gets a reference to the given int64 and assigns it to the BlackoutDuration field.
func (o *Ipv6networkPortControlBlackoutSetting) SetBlackoutDuration(v int64) {
	o.BlackoutDuration = &v
}

// GetBlackoutSchedule returns the BlackoutSchedule field value if set, zero value otherwise.
func (o *Ipv6networkPortControlBlackoutSetting) GetBlackoutSchedule() Ipv6networkportcontrolblackoutsettingBlackoutSchedule {
	if o == nil || IsNil(o.BlackoutSchedule) {
		var ret Ipv6networkportcontrolblackoutsettingBlackoutSchedule
		return ret
	}
	return *o.BlackoutSchedule
}

// GetBlackoutScheduleOk returns a tuple with the BlackoutSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkPortControlBlackoutSetting) GetBlackoutScheduleOk() (*Ipv6networkportcontrolblackoutsettingBlackoutSchedule, bool) {
	if o == nil || IsNil(o.BlackoutSchedule) {
		return nil, false
	}
	return o.BlackoutSchedule, true
}

// HasBlackoutSchedule returns a boolean if a field has been set.
func (o *Ipv6networkPortControlBlackoutSetting) HasBlackoutSchedule() bool {
	if o != nil && !IsNil(o.BlackoutSchedule) {
		return true
	}

	return false
}

// SetBlackoutSchedule gets a reference to the given Ipv6networkportcontrolblackoutsettingBlackoutSchedule and assigns it to the BlackoutSchedule field.
func (o *Ipv6networkPortControlBlackoutSetting) SetBlackoutSchedule(v Ipv6networkportcontrolblackoutsettingBlackoutSchedule) {
	o.BlackoutSchedule = &v
}

func (o Ipv6networkPortControlBlackoutSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkPortControlBlackoutSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableBlackout) {
		toSerialize["enable_blackout"] = o.EnableBlackout
	}
	if !IsNil(o.BlackoutDuration) {
		toSerialize["blackout_duration"] = o.BlackoutDuration
	}
	if !IsNil(o.BlackoutSchedule) {
		toSerialize["blackout_schedule"] = o.BlackoutSchedule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6networkPortControlBlackoutSetting) UnmarshalJSON(data []byte) (err error) {
	varIpv6networkPortControlBlackoutSetting := _Ipv6networkPortControlBlackoutSetting{}

	err = json.Unmarshal(data, &varIpv6networkPortControlBlackoutSetting)

	if err != nil {
		return err
	}

	*o = Ipv6networkPortControlBlackoutSetting(varIpv6networkPortControlBlackoutSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable_blackout")
		delete(additionalProperties, "blackout_duration")
		delete(additionalProperties, "blackout_schedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6networkPortControlBlackoutSetting struct {
	value *Ipv6networkPortControlBlackoutSetting
	isSet bool
}

func (v NullableIpv6networkPortControlBlackoutSetting) Get() *Ipv6networkPortControlBlackoutSetting {
	return v.value
}

func (v *NullableIpv6networkPortControlBlackoutSetting) Set(val *Ipv6networkPortControlBlackoutSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkPortControlBlackoutSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkPortControlBlackoutSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkPortControlBlackoutSetting(val *Ipv6networkPortControlBlackoutSetting) *NullableIpv6networkPortControlBlackoutSetting {
	return &NullableIpv6networkPortControlBlackoutSetting{value: val, isSet: true}
}

func (v NullableIpv6networkPortControlBlackoutSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkPortControlBlackoutSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
