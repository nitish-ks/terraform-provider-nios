/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkSubscribeSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkSubscribeSettings{}

// Ipv6networkSubscribeSettings struct for Ipv6networkSubscribeSettings
type Ipv6networkSubscribeSettings struct {
	// The list of Cisco ISE attributes allowed for subscription.
	EnabledAttributes    []string                                        `json:"enabled_attributes,omitempty"`
	MappedEaAttributes   *Ipv6networksubscribesettingsMappedEaAttributes `json:"mapped_ea_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6networkSubscribeSettings Ipv6networkSubscribeSettings

// NewIpv6networkSubscribeSettings instantiates a new Ipv6networkSubscribeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkSubscribeSettings() *Ipv6networkSubscribeSettings {
	this := Ipv6networkSubscribeSettings{}
	return &this
}

// NewIpv6networkSubscribeSettingsWithDefaults instantiates a new Ipv6networkSubscribeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkSubscribeSettingsWithDefaults() *Ipv6networkSubscribeSettings {
	this := Ipv6networkSubscribeSettings{}
	return &this
}

// GetEnabledAttributes returns the EnabledAttributes field value if set, zero value otherwise.
func (o *Ipv6networkSubscribeSettings) GetEnabledAttributes() []string {
	if o == nil || IsNil(o.EnabledAttributes) {
		var ret []string
		return ret
	}
	return o.EnabledAttributes
}

// GetEnabledAttributesOk returns a tuple with the EnabledAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkSubscribeSettings) GetEnabledAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledAttributes) {
		return nil, false
	}
	return o.EnabledAttributes, true
}

// HasEnabledAttributes returns a boolean if a field has been set.
func (o *Ipv6networkSubscribeSettings) HasEnabledAttributes() bool {
	if o != nil && !IsNil(o.EnabledAttributes) {
		return true
	}

	return false
}

// SetEnabledAttributes gets a reference to the given []string and assigns it to the EnabledAttributes field.
func (o *Ipv6networkSubscribeSettings) SetEnabledAttributes(v []string) {
	o.EnabledAttributes = v
}

// GetMappedEaAttributes returns the MappedEaAttributes field value if set, zero value otherwise.
func (o *Ipv6networkSubscribeSettings) GetMappedEaAttributes() Ipv6networksubscribesettingsMappedEaAttributes {
	if o == nil || IsNil(o.MappedEaAttributes) {
		var ret Ipv6networksubscribesettingsMappedEaAttributes
		return ret
	}
	return *o.MappedEaAttributes
}

// GetMappedEaAttributesOk returns a tuple with the MappedEaAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkSubscribeSettings) GetMappedEaAttributesOk() (*Ipv6networksubscribesettingsMappedEaAttributes, bool) {
	if o == nil || IsNil(o.MappedEaAttributes) {
		return nil, false
	}
	return o.MappedEaAttributes, true
}

// HasMappedEaAttributes returns a boolean if a field has been set.
func (o *Ipv6networkSubscribeSettings) HasMappedEaAttributes() bool {
	if o != nil && !IsNil(o.MappedEaAttributes) {
		return true
	}

	return false
}

// SetMappedEaAttributes gets a reference to the given Ipv6networksubscribesettingsMappedEaAttributes and assigns it to the MappedEaAttributes field.
func (o *Ipv6networkSubscribeSettings) SetMappedEaAttributes(v Ipv6networksubscribesettingsMappedEaAttributes) {
	o.MappedEaAttributes = &v
}

func (o Ipv6networkSubscribeSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkSubscribeSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnabledAttributes) {
		toSerialize["enabled_attributes"] = o.EnabledAttributes
	}
	if !IsNil(o.MappedEaAttributes) {
		toSerialize["mapped_ea_attributes"] = o.MappedEaAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6networkSubscribeSettings) UnmarshalJSON(data []byte) (err error) {
	varIpv6networkSubscribeSettings := _Ipv6networkSubscribeSettings{}

	err = json.Unmarshal(data, &varIpv6networkSubscribeSettings)

	if err != nil {
		return err
	}

	*o = Ipv6networkSubscribeSettings(varIpv6networkSubscribeSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled_attributes")
		delete(additionalProperties, "mapped_ea_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6networkSubscribeSettings struct {
	value *Ipv6networkSubscribeSettings
	isSet bool
}

func (v NullableIpv6networkSubscribeSettings) Get() *Ipv6networkSubscribeSettings {
	return v.value
}

func (v *NullableIpv6networkSubscribeSettings) Set(val *Ipv6networkSubscribeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkSubscribeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkSubscribeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkSubscribeSettings(val *Ipv6networkSubscribeSettings) *NullableIpv6networkSubscribeSettings {
	return &NullableIpv6networkSubscribeSettings{value: val, isSet: true}
}

func (v NullableIpv6networkSubscribeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkSubscribeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
