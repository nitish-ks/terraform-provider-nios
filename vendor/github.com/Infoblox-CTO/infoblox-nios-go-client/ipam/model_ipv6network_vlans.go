/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkVlans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkVlans{}

// Ipv6networkVlans struct for Ipv6networkVlans
type Ipv6networkVlans struct {
	// Reference to the underlying StaticVlan object vlan.
	Vlan *string `json:"vlan,omitempty"`
	// VLAN ID value.
	Id *int64 `json:"id,omitempty"`
	// Name of the VLAN.
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6networkVlans Ipv6networkVlans

// NewIpv6networkVlans instantiates a new Ipv6networkVlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkVlans() *Ipv6networkVlans {
	this := Ipv6networkVlans{}
	return &this
}

// NewIpv6networkVlansWithDefaults instantiates a new Ipv6networkVlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkVlansWithDefaults() *Ipv6networkVlans {
	this := Ipv6networkVlans{}
	return &this
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *Ipv6networkVlans) GetVlan() string {
	if o == nil || IsNil(o.Vlan) {
		var ret string
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkVlans) GetVlanOk() (*string, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *Ipv6networkVlans) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given string and assigns it to the Vlan field.
func (o *Ipv6networkVlans) SetVlan(v string) {
	o.Vlan = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Ipv6networkVlans) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkVlans) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ipv6networkVlans) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Ipv6networkVlans) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6networkVlans) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkVlans) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6networkVlans) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6networkVlans) SetName(v string) {
	o.Name = &v
}

func (o Ipv6networkVlans) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkVlans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6networkVlans) UnmarshalJSON(data []byte) (err error) {
	varIpv6networkVlans := _Ipv6networkVlans{}

	err = json.Unmarshal(data, &varIpv6networkVlans)

	if err != nil {
		return err
	}

	*o = Ipv6networkVlans(varIpv6networkVlans)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6networkVlans struct {
	value *Ipv6networkVlans
	isSet bool
}

func (v NullableIpv6networkVlans) Get() *Ipv6networkVlans {
	return v.value
}

func (v *NullableIpv6networkVlans) Set(val *Ipv6networkVlans) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkVlans) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkVlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkVlans(val *Ipv6networkVlans) *NullableIpv6networkVlans {
	return &NullableIpv6networkVlans{value: val, isSet: true}
}

func (v NullableIpv6networkVlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkVlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
