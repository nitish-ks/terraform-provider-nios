/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkZoneAssociations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkZoneAssociations{}

// Ipv6networkZoneAssociations struct for Ipv6networkZoneAssociations
type Ipv6networkZoneAssociations struct {
	// The FQDN of the authoritative forward zone.
	Fqdn *string `json:"fqdn,omitempty"`
	// True if this is the default zone.
	IsDefault *bool `json:"is_default,omitempty"`
	// The view to which the zone belongs. If a view is not specified, the default view is used.
	View                 *string `json:"view,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6networkZoneAssociations Ipv6networkZoneAssociations

// NewIpv6networkZoneAssociations instantiates a new Ipv6networkZoneAssociations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkZoneAssociations() *Ipv6networkZoneAssociations {
	this := Ipv6networkZoneAssociations{}
	return &this
}

// NewIpv6networkZoneAssociationsWithDefaults instantiates a new Ipv6networkZoneAssociations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkZoneAssociationsWithDefaults() *Ipv6networkZoneAssociations {
	this := Ipv6networkZoneAssociations{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *Ipv6networkZoneAssociations) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkZoneAssociations) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *Ipv6networkZoneAssociations) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *Ipv6networkZoneAssociations) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *Ipv6networkZoneAssociations) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkZoneAssociations) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *Ipv6networkZoneAssociations) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *Ipv6networkZoneAssociations) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Ipv6networkZoneAssociations) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkZoneAssociations) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Ipv6networkZoneAssociations) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *Ipv6networkZoneAssociations) SetView(v string) {
	o.View = &v
}

func (o Ipv6networkZoneAssociations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkZoneAssociations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6networkZoneAssociations) UnmarshalJSON(data []byte) (err error) {
	varIpv6networkZoneAssociations := _Ipv6networkZoneAssociations{}

	err = json.Unmarshal(data, &varIpv6networkZoneAssociations)

	if err != nil {
		return err
	}

	*o = Ipv6networkZoneAssociations(varIpv6networkZoneAssociations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "is_default")
		delete(additionalProperties, "view")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6networkZoneAssociations struct {
	value *Ipv6networkZoneAssociations
	isSet bool
}

func (v NullableIpv6networkZoneAssociations) Get() *Ipv6networkZoneAssociations {
	return v.value
}

func (v *NullableIpv6networkZoneAssociations) Set(val *Ipv6networkZoneAssociations) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkZoneAssociations) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkZoneAssociations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkZoneAssociations(val *Ipv6networkZoneAssociations) *NullableIpv6networkZoneAssociations {
	return &NullableIpv6networkZoneAssociations{value: val, isSet: true}
}

func (v NullableIpv6networkZoneAssociations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkZoneAssociations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
