/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkcontainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkcontainer{}

// Ipv6networkcontainer struct for Ipv6networkcontainer
type Ipv6networkcontainer struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This flag controls whether reverse zones are automatically created when the network is added.
	AutoCreateReversezone *bool                          `json:"auto_create_reversezone,omitempty"`
	CloudInfo             *Ipv6networkcontainerCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the network; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this network container.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// Use this method to set or retrieve the ddns_enable_option_fqdn flag of a DHCP IPv6 Network Container object. This method controls whether the FQDN option sent by the client is to be used, or if the server can automatically generate the FQDN. This setting overrides the upper-level settings.
	DdnsEnableOptionFqdn *bool `json:"ddns_enable_option_fqdn,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether the DHCP server is allowed to update DNS, regardless of the DHCP client requests. Note that changes for this field take effect only if ddns_enable_option_fqdn is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a DHCP network container object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// The reason for deleting the RIR registration request.
	DeleteReason *string `json:"delete_reason,omitempty"`
	// Discover now status for this network container.
	DiscoverNowStatus          *string                                         `json:"discover_now_status,omitempty"`
	DiscoveryBasicPollSettings *Ipv6networkcontainerDiscoveryBasicPollSettings `json:"discovery_basic_poll_settings,omitempty"`
	DiscoveryBlackoutSetting   *Ipv6networkcontainerDiscoveryBlackoutSetting   `json:"discovery_blackout_setting,omitempty"`
	// The network discovery engine type.
	DiscoveryEngineType *string `json:"discovery_engine_type,omitempty"`
	// The member that will run discovery for this network container.
	DiscoveryMember *string `json:"discovery_member,omitempty"`
	// Use this method to set or retrieve the dynamic DNS updates flag of a DHCP IPv6 Network Container object. The DHCP server can send DDNS updates to DNS servers in the same Grid and to external DNS servers. This setting overrides the member level settings.
	DomainNameServers []string `json:"domain_name_servers,omitempty"`
	// The dynamic DNS updates flag of a DHCP IPv6 network container object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines whether a discovery is enabled or not for this network container. When this is set to False, the network container discovery is disabled.
	EnableDiscovery *bool `json:"enable_discovery,omitempty"`
	// Determines if the discovery for the network container should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// The endpoints that provides data for the DHCP IPv6 Network Container.
	EndpointSources []string `json:"endpoint_sources,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// This field contains the federated realms associated to this network container.
	FederatedRealms []Ipv6networkcontainerFederatedRealms `json:"federated_realms,omitempty"`
	// The timestamp when the last RIR registration update was sent.
	LastRirRegistrationUpdateSent *int64 `json:"last_rir_registration_update_sent,omitempty"`
	// Last RIR registration update status.
	LastRirRegistrationUpdateStatus *string `json:"last_rir_registration_update_status,omitempty"`
	// This field contains the logic filters to be applied on the this network container. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []Ipv6networkcontainerLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// This field controls whether this object is synchronized with the Multi-Grid Master. If this field is set to True, objects are not synchronized.
	MgmPrivate *bool `json:"mgm_private,omitempty"`
	// This field is assumed to be True unless filled by any conforming objects, such as Network, IPv6 Network, Network Container, IPv6 Network Container, and Network View. This value is set to False if mgm_private is set to True in the parent object.
	MgmPrivateOverridable *bool                             `json:"mgm_private_overridable,omitempty"`
	MsAdUserData          *Ipv6networkcontainerMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The network address in IPv6 Address/CIDR format. For regular expression searches, only the IPv6 Address portion is supported. Searches for the CIDR portion is always an exact match. For example, both network containers 16::0/28 and 26::0/24 are matched by expression '.6' and only 26::0/24 is matched by '.6/24'.
	Network *string `json:"network,omitempty"`
	// The network container to which this network belongs, if any.
	NetworkContainer *string `json:"network_container,omitempty"`
	// The name of the network view in which this network resides.
	NetworkView *string `json:"network_view,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options                    []Ipv6networkcontainerOptions                   `json:"options,omitempty"`
	PortControlBlackoutSetting *Ipv6networkcontainerPortControlBlackoutSetting `json:"port_control_blackout_setting,omitempty"`
	// Use this method to set or retrieve the preferred lifetime value of a DHCP IPv6 Network Container object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// Remove subnets delete option. Determines whether all child objects should be removed alongside with the IPv6 network container or child objects should be assigned to another parental container. By default child objects are deleted with this network container.
	RemoveSubnets *bool `json:"remove_subnets,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// The registry (RIR) that allocated the IPv6 network container address space.
	Rir *string `json:"rir,omitempty"`
	// The RIR organization associated with the IPv6 network container.
	RirOrganization *string `json:"rir_organization,omitempty"`
	// The RIR registration action.
	RirRegistrationAction *string `json:"rir_registration_action,omitempty"`
	// The registration status of the IPv6 network container in RIR.
	RirRegistrationStatus *string `json:"rir_registration_status,omitempty"`
	// If the field is set to True, the discovery blackout setting will be used for port control blackout setting.
	SamePortControlDiscoveryBlackout *bool `json:"same_port_control_discovery_blackout,omitempty"`
	// Determines whether to send the RIR registration request.
	SendRirRequest    *bool                                  `json:"send_rir_request,omitempty"`
	SubscribeSettings *Ipv6networkcontainerSubscribeSettings `json:"subscribe_settings,omitempty"`
	// Determines whether the network container is unmanaged or not.
	Unmanaged *bool `json:"unmanaged,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: discovery_blackout_setting , port_control_blackout_setting, same_port_control_discovery_blackout
	UseBlackoutSetting *bool `json:"use_blackout_setting,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_enable_option_fqdn
	UseDdnsEnableOptionFqdn *bool `json:"use_ddns_enable_option_fqdn,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: discovery_basic_poll_settings
	UseDiscoveryBasicPollingSettings *bool `json:"use_discovery_basic_polling_settings,omitempty"`
	// Use flag for: domain_name_servers
	UseDomainNameServers *bool `json:"use_domain_name_servers,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: discovery_member , enable_discovery
	UseEnableDiscovery *bool `json:"use_enable_discovery,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: mgm_private
	UseMgmPrivate *bool `json:"use_mgm_private,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: subscribe_settings
	UseSubscribeSettings *bool `json:"use_subscribe_settings,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// Use flag for: zone_associations
	UseZoneAssociations *bool `json:"use_zone_associations,omitempty"`
	// The network container utilization in percentage.
	Utilization *int64 `json:"utilization,omitempty"`
	// Use this method to set or retrieve the valid lifetime value of a DHCP IPv6 Network Container object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
	// The list of zones associated with this network container.
	ZoneAssociations []Ipv6networkcontainerZoneAssociations `json:"zone_associations,omitempty"`
}

// NewIpv6networkcontainer instantiates a new Ipv6networkcontainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkcontainer() *Ipv6networkcontainer {
	this := Ipv6networkcontainer{}
	return &this
}

// NewIpv6networkcontainerWithDefaults instantiates a new Ipv6networkcontainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkcontainerWithDefaults() *Ipv6networkcontainer {
	this := Ipv6networkcontainer{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6networkcontainer) SetRef(v string) {
	o.Ref = &v
}

// GetAutoCreateReversezone returns the AutoCreateReversezone field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetAutoCreateReversezone() bool {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		var ret bool
		return ret
	}
	return *o.AutoCreateReversezone
}

// GetAutoCreateReversezoneOk returns a tuple with the AutoCreateReversezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetAutoCreateReversezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		return nil, false
	}
	return o.AutoCreateReversezone, true
}

// HasAutoCreateReversezone returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasAutoCreateReversezone() bool {
	if o != nil && !IsNil(o.AutoCreateReversezone) {
		return true
	}

	return false
}

// SetAutoCreateReversezone gets a reference to the given bool and assigns it to the AutoCreateReversezone field.
func (o *Ipv6networkcontainer) SetAutoCreateReversezone(v bool) {
	o.AutoCreateReversezone = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetCloudInfo() Ipv6networkcontainerCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret Ipv6networkcontainerCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetCloudInfoOk() (*Ipv6networkcontainerCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given Ipv6networkcontainerCloudInfo and assigns it to the CloudInfo field.
func (o *Ipv6networkcontainer) SetCloudInfo(v Ipv6networkcontainerCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6networkcontainer) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Ipv6networkcontainer) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsEnableOptionFqdn returns the DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.DdnsEnableOptionFqdn
}

// GetDdnsEnableOptionFqdnOk returns a tuple with the DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.DdnsEnableOptionFqdn, true
}

// HasDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the DdnsEnableOptionFqdn field.
func (o *Ipv6networkcontainer) SetDdnsEnableOptionFqdn(v bool) {
	o.DdnsEnableOptionFqdn = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Ipv6networkcontainer) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Ipv6networkcontainer) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Ipv6networkcontainer) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDeleteReason returns the DeleteReason field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDeleteReason() string {
	if o == nil || IsNil(o.DeleteReason) {
		var ret string
		return ret
	}
	return *o.DeleteReason
}

// GetDeleteReasonOk returns a tuple with the DeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDeleteReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeleteReason) {
		return nil, false
	}
	return o.DeleteReason, true
}

// HasDeleteReason returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDeleteReason() bool {
	if o != nil && !IsNil(o.DeleteReason) {
		return true
	}

	return false
}

// SetDeleteReason gets a reference to the given string and assigns it to the DeleteReason field.
func (o *Ipv6networkcontainer) SetDeleteReason(v string) {
	o.DeleteReason = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Ipv6networkcontainer) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveryBasicPollSettings returns the DiscoveryBasicPollSettings field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDiscoveryBasicPollSettings() Ipv6networkcontainerDiscoveryBasicPollSettings {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		var ret Ipv6networkcontainerDiscoveryBasicPollSettings
		return ret
	}
	return *o.DiscoveryBasicPollSettings
}

// GetDiscoveryBasicPollSettingsOk returns a tuple with the DiscoveryBasicPollSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDiscoveryBasicPollSettingsOk() (*Ipv6networkcontainerDiscoveryBasicPollSettings, bool) {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		return nil, false
	}
	return o.DiscoveryBasicPollSettings, true
}

// HasDiscoveryBasicPollSettings returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDiscoveryBasicPollSettings() bool {
	if o != nil && !IsNil(o.DiscoveryBasicPollSettings) {
		return true
	}

	return false
}

// SetDiscoveryBasicPollSettings gets a reference to the given Ipv6networkcontainerDiscoveryBasicPollSettings and assigns it to the DiscoveryBasicPollSettings field.
func (o *Ipv6networkcontainer) SetDiscoveryBasicPollSettings(v Ipv6networkcontainerDiscoveryBasicPollSettings) {
	o.DiscoveryBasicPollSettings = &v
}

// GetDiscoveryBlackoutSetting returns the DiscoveryBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDiscoveryBlackoutSetting() Ipv6networkcontainerDiscoveryBlackoutSetting {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		var ret Ipv6networkcontainerDiscoveryBlackoutSetting
		return ret
	}
	return *o.DiscoveryBlackoutSetting
}

// GetDiscoveryBlackoutSettingOk returns a tuple with the DiscoveryBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDiscoveryBlackoutSettingOk() (*Ipv6networkcontainerDiscoveryBlackoutSetting, bool) {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		return nil, false
	}
	return o.DiscoveryBlackoutSetting, true
}

// HasDiscoveryBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDiscoveryBlackoutSetting() bool {
	if o != nil && !IsNil(o.DiscoveryBlackoutSetting) {
		return true
	}

	return false
}

// SetDiscoveryBlackoutSetting gets a reference to the given Ipv6networkcontainerDiscoveryBlackoutSetting and assigns it to the DiscoveryBlackoutSetting field.
func (o *Ipv6networkcontainer) SetDiscoveryBlackoutSetting(v Ipv6networkcontainerDiscoveryBlackoutSetting) {
	o.DiscoveryBlackoutSetting = &v
}

// GetDiscoveryEngineType returns the DiscoveryEngineType field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDiscoveryEngineType() string {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		var ret string
		return ret
	}
	return *o.DiscoveryEngineType
}

// GetDiscoveryEngineTypeOk returns a tuple with the DiscoveryEngineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDiscoveryEngineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		return nil, false
	}
	return o.DiscoveryEngineType, true
}

// HasDiscoveryEngineType returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDiscoveryEngineType() bool {
	if o != nil && !IsNil(o.DiscoveryEngineType) {
		return true
	}

	return false
}

// SetDiscoveryEngineType gets a reference to the given string and assigns it to the DiscoveryEngineType field.
func (o *Ipv6networkcontainer) SetDiscoveryEngineType(v string) {
	o.DiscoveryEngineType = &v
}

// GetDiscoveryMember returns the DiscoveryMember field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDiscoveryMember() string {
	if o == nil || IsNil(o.DiscoveryMember) {
		var ret string
		return ret
	}
	return *o.DiscoveryMember
}

// GetDiscoveryMemberOk returns a tuple with the DiscoveryMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDiscoveryMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMember) {
		return nil, false
	}
	return o.DiscoveryMember, true
}

// HasDiscoveryMember returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDiscoveryMember() bool {
	if o != nil && !IsNil(o.DiscoveryMember) {
		return true
	}

	return false
}

// SetDiscoveryMember gets a reference to the given string and assigns it to the DiscoveryMember field.
func (o *Ipv6networkcontainer) SetDiscoveryMember(v string) {
	o.DiscoveryMember = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetDomainNameServers() []string {
	if o == nil || IsNil(o.DomainNameServers) {
		var ret []string
		return ret
	}
	return o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNameServers) {
		return nil, false
	}
	return o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasDomainNameServers() bool {
	if o != nil && !IsNil(o.DomainNameServers) {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *Ipv6networkcontainer) SetDomainNameServers(v []string) {
	o.DomainNameServers = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Ipv6networkcontainer) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDiscovery returns the EnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetEnableDiscovery() bool {
	if o == nil || IsNil(o.EnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableDiscovery
}

// GetEnableDiscoveryOk returns a tuple with the EnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDiscovery) {
		return nil, false
	}
	return o.EnableDiscovery, true
}

// HasEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasEnableDiscovery() bool {
	if o != nil && !IsNil(o.EnableDiscovery) {
		return true
	}

	return false
}

// SetEnableDiscovery gets a reference to the given bool and assigns it to the EnableDiscovery field.
func (o *Ipv6networkcontainer) SetEnableDiscovery(v bool) {
	o.EnableDiscovery = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Ipv6networkcontainer) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEndpointSources returns the EndpointSources field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetEndpointSources() []string {
	if o == nil || IsNil(o.EndpointSources) {
		var ret []string
		return ret
	}
	return o.EndpointSources
}

// GetEndpointSourcesOk returns a tuple with the EndpointSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetEndpointSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.EndpointSources) {
		return nil, false
	}
	return o.EndpointSources, true
}

// HasEndpointSources returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasEndpointSources() bool {
	if o != nil && !IsNil(o.EndpointSources) {
		return true
	}

	return false
}

// SetEndpointSources gets a reference to the given []string and assigns it to the EndpointSources field.
func (o *Ipv6networkcontainer) SetEndpointSources(v []string) {
	o.EndpointSources = v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Ipv6networkcontainer) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetFederatedRealms() []Ipv6networkcontainerFederatedRealms {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []Ipv6networkcontainerFederatedRealms
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetFederatedRealmsOk() ([]Ipv6networkcontainerFederatedRealms, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []Ipv6networkcontainerFederatedRealms and assigns it to the FederatedRealms field.
func (o *Ipv6networkcontainer) SetFederatedRealms(v []Ipv6networkcontainerFederatedRealms) {
	o.FederatedRealms = v
}

// GetLastRirRegistrationUpdateSent returns the LastRirRegistrationUpdateSent field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetLastRirRegistrationUpdateSent() int64 {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		var ret int64
		return ret
	}
	return *o.LastRirRegistrationUpdateSent
}

// GetLastRirRegistrationUpdateSentOk returns a tuple with the LastRirRegistrationUpdateSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetLastRirRegistrationUpdateSentOk() (*int64, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateSent, true
}

// HasLastRirRegistrationUpdateSent returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasLastRirRegistrationUpdateSent() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateSent) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateSent gets a reference to the given int64 and assigns it to the LastRirRegistrationUpdateSent field.
func (o *Ipv6networkcontainer) SetLastRirRegistrationUpdateSent(v int64) {
	o.LastRirRegistrationUpdateSent = &v
}

// GetLastRirRegistrationUpdateStatus returns the LastRirRegistrationUpdateStatus field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetLastRirRegistrationUpdateStatus() string {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		var ret string
		return ret
	}
	return *o.LastRirRegistrationUpdateStatus
}

// GetLastRirRegistrationUpdateStatusOk returns a tuple with the LastRirRegistrationUpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetLastRirRegistrationUpdateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateStatus, true
}

// HasLastRirRegistrationUpdateStatus returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasLastRirRegistrationUpdateStatus() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateStatus) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateStatus gets a reference to the given string and assigns it to the LastRirRegistrationUpdateStatus field.
func (o *Ipv6networkcontainer) SetLastRirRegistrationUpdateStatus(v string) {
	o.LastRirRegistrationUpdateStatus = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetLogicFilterRules() []Ipv6networkcontainerLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6networkcontainerLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetLogicFilterRulesOk() ([]Ipv6networkcontainerLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6networkcontainerLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6networkcontainer) SetLogicFilterRules(v []Ipv6networkcontainerLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMgmPrivate returns the MgmPrivate field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetMgmPrivate() bool {
	if o == nil || IsNil(o.MgmPrivate) {
		var ret bool
		return ret
	}
	return *o.MgmPrivate
}

// GetMgmPrivateOk returns a tuple with the MgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivate) {
		return nil, false
	}
	return o.MgmPrivate, true
}

// HasMgmPrivate returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasMgmPrivate() bool {
	if o != nil && !IsNil(o.MgmPrivate) {
		return true
	}

	return false
}

// SetMgmPrivate gets a reference to the given bool and assigns it to the MgmPrivate field.
func (o *Ipv6networkcontainer) SetMgmPrivate(v bool) {
	o.MgmPrivate = &v
}

// GetMgmPrivateOverridable returns the MgmPrivateOverridable field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetMgmPrivateOverridable() bool {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		var ret bool
		return ret
	}
	return *o.MgmPrivateOverridable
}

// GetMgmPrivateOverridableOk returns a tuple with the MgmPrivateOverridable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetMgmPrivateOverridableOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		return nil, false
	}
	return o.MgmPrivateOverridable, true
}

// HasMgmPrivateOverridable returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasMgmPrivateOverridable() bool {
	if o != nil && !IsNil(o.MgmPrivateOverridable) {
		return true
	}

	return false
}

// SetMgmPrivateOverridable gets a reference to the given bool and assigns it to the MgmPrivateOverridable field.
func (o *Ipv6networkcontainer) SetMgmPrivateOverridable(v bool) {
	o.MgmPrivateOverridable = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetMsAdUserData() Ipv6networkcontainerMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret Ipv6networkcontainerMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetMsAdUserDataOk() (*Ipv6networkcontainerMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given Ipv6networkcontainerMsAdUserData and assigns it to the MsAdUserData field.
func (o *Ipv6networkcontainer) SetMsAdUserData(v Ipv6networkcontainerMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Ipv6networkcontainer) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkContainer returns the NetworkContainer field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetNetworkContainer() string {
	if o == nil || IsNil(o.NetworkContainer) {
		var ret string
		return ret
	}
	return *o.NetworkContainer
}

// GetNetworkContainerOk returns a tuple with the NetworkContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetNetworkContainerOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkContainer) {
		return nil, false
	}
	return o.NetworkContainer, true
}

// HasNetworkContainer returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasNetworkContainer() bool {
	if o != nil && !IsNil(o.NetworkContainer) {
		return true
	}

	return false
}

// SetNetworkContainer gets a reference to the given string and assigns it to the NetworkContainer field.
func (o *Ipv6networkcontainer) SetNetworkContainer(v string) {
	o.NetworkContainer = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Ipv6networkcontainer) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetOptions() []Ipv6networkcontainerOptions {
	if o == nil || IsNil(o.Options) {
		var ret []Ipv6networkcontainerOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetOptionsOk() ([]Ipv6networkcontainerOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Ipv6networkcontainerOptions and assigns it to the Options field.
func (o *Ipv6networkcontainer) SetOptions(v []Ipv6networkcontainerOptions) {
	o.Options = v
}

// GetPortControlBlackoutSetting returns the PortControlBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetPortControlBlackoutSetting() Ipv6networkcontainerPortControlBlackoutSetting {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		var ret Ipv6networkcontainerPortControlBlackoutSetting
		return ret
	}
	return *o.PortControlBlackoutSetting
}

// GetPortControlBlackoutSettingOk returns a tuple with the PortControlBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetPortControlBlackoutSettingOk() (*Ipv6networkcontainerPortControlBlackoutSetting, bool) {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		return nil, false
	}
	return o.PortControlBlackoutSetting, true
}

// HasPortControlBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasPortControlBlackoutSetting() bool {
	if o != nil && !IsNil(o.PortControlBlackoutSetting) {
		return true
	}

	return false
}

// SetPortControlBlackoutSetting gets a reference to the given Ipv6networkcontainerPortControlBlackoutSetting and assigns it to the PortControlBlackoutSetting field.
func (o *Ipv6networkcontainer) SetPortControlBlackoutSetting(v Ipv6networkcontainerPortControlBlackoutSetting) {
	o.PortControlBlackoutSetting = &v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *Ipv6networkcontainer) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetRemoveSubnets returns the RemoveSubnets field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRemoveSubnets() bool {
	if o == nil || IsNil(o.RemoveSubnets) {
		var ret bool
		return ret
	}
	return *o.RemoveSubnets
}

// GetRemoveSubnetsOk returns a tuple with the RemoveSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRemoveSubnetsOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveSubnets) {
		return nil, false
	}
	return o.RemoveSubnets, true
}

// HasRemoveSubnets returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRemoveSubnets() bool {
	if o != nil && !IsNil(o.RemoveSubnets) {
		return true
	}

	return false
}

// SetRemoveSubnets gets a reference to the given bool and assigns it to the RemoveSubnets field.
func (o *Ipv6networkcontainer) SetRemoveSubnets(v bool) {
	o.RemoveSubnets = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Ipv6networkcontainer) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *Ipv6networkcontainer) SetRir(v string) {
	o.Rir = &v
}

// GetRirOrganization returns the RirOrganization field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRirOrganization() string {
	if o == nil || IsNil(o.RirOrganization) {
		var ret string
		return ret
	}
	return *o.RirOrganization
}

// GetRirOrganizationOk returns a tuple with the RirOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRirOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.RirOrganization) {
		return nil, false
	}
	return o.RirOrganization, true
}

// HasRirOrganization returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRirOrganization() bool {
	if o != nil && !IsNil(o.RirOrganization) {
		return true
	}

	return false
}

// SetRirOrganization gets a reference to the given string and assigns it to the RirOrganization field.
func (o *Ipv6networkcontainer) SetRirOrganization(v string) {
	o.RirOrganization = &v
}

// GetRirRegistrationAction returns the RirRegistrationAction field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRirRegistrationAction() string {
	if o == nil || IsNil(o.RirRegistrationAction) {
		var ret string
		return ret
	}
	return *o.RirRegistrationAction
}

// GetRirRegistrationActionOk returns a tuple with the RirRegistrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRirRegistrationActionOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationAction) {
		return nil, false
	}
	return o.RirRegistrationAction, true
}

// HasRirRegistrationAction returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRirRegistrationAction() bool {
	if o != nil && !IsNil(o.RirRegistrationAction) {
		return true
	}

	return false
}

// SetRirRegistrationAction gets a reference to the given string and assigns it to the RirRegistrationAction field.
func (o *Ipv6networkcontainer) SetRirRegistrationAction(v string) {
	o.RirRegistrationAction = &v
}

// GetRirRegistrationStatus returns the RirRegistrationStatus field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetRirRegistrationStatus() string {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RirRegistrationStatus
}

// GetRirRegistrationStatusOk returns a tuple with the RirRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetRirRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		return nil, false
	}
	return o.RirRegistrationStatus, true
}

// HasRirRegistrationStatus returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasRirRegistrationStatus() bool {
	if o != nil && !IsNil(o.RirRegistrationStatus) {
		return true
	}

	return false
}

// SetRirRegistrationStatus gets a reference to the given string and assigns it to the RirRegistrationStatus field.
func (o *Ipv6networkcontainer) SetRirRegistrationStatus(v string) {
	o.RirRegistrationStatus = &v
}

// GetSamePortControlDiscoveryBlackout returns the SamePortControlDiscoveryBlackout field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetSamePortControlDiscoveryBlackout() bool {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		var ret bool
		return ret
	}
	return *o.SamePortControlDiscoveryBlackout
}

// GetSamePortControlDiscoveryBlackoutOk returns a tuple with the SamePortControlDiscoveryBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetSamePortControlDiscoveryBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		return nil, false
	}
	return o.SamePortControlDiscoveryBlackout, true
}

// HasSamePortControlDiscoveryBlackout returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasSamePortControlDiscoveryBlackout() bool {
	if o != nil && !IsNil(o.SamePortControlDiscoveryBlackout) {
		return true
	}

	return false
}

// SetSamePortControlDiscoveryBlackout gets a reference to the given bool and assigns it to the SamePortControlDiscoveryBlackout field.
func (o *Ipv6networkcontainer) SetSamePortControlDiscoveryBlackout(v bool) {
	o.SamePortControlDiscoveryBlackout = &v
}

// GetSendRirRequest returns the SendRirRequest field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetSendRirRequest() bool {
	if o == nil || IsNil(o.SendRirRequest) {
		var ret bool
		return ret
	}
	return *o.SendRirRequest
}

// GetSendRirRequestOk returns a tuple with the SendRirRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetSendRirRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRirRequest) {
		return nil, false
	}
	return o.SendRirRequest, true
}

// HasSendRirRequest returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasSendRirRequest() bool {
	if o != nil && !IsNil(o.SendRirRequest) {
		return true
	}

	return false
}

// SetSendRirRequest gets a reference to the given bool and assigns it to the SendRirRequest field.
func (o *Ipv6networkcontainer) SetSendRirRequest(v bool) {
	o.SendRirRequest = &v
}

// GetSubscribeSettings returns the SubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetSubscribeSettings() Ipv6networkcontainerSubscribeSettings {
	if o == nil || IsNil(o.SubscribeSettings) {
		var ret Ipv6networkcontainerSubscribeSettings
		return ret
	}
	return *o.SubscribeSettings
}

// GetSubscribeSettingsOk returns a tuple with the SubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetSubscribeSettingsOk() (*Ipv6networkcontainerSubscribeSettings, bool) {
	if o == nil || IsNil(o.SubscribeSettings) {
		return nil, false
	}
	return o.SubscribeSettings, true
}

// HasSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasSubscribeSettings() bool {
	if o != nil && !IsNil(o.SubscribeSettings) {
		return true
	}

	return false
}

// SetSubscribeSettings gets a reference to the given Ipv6networkcontainerSubscribeSettings and assigns it to the SubscribeSettings field.
func (o *Ipv6networkcontainer) SetSubscribeSettings(v Ipv6networkcontainerSubscribeSettings) {
	o.SubscribeSettings = &v
}

// GetUnmanaged returns the Unmanaged field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUnmanaged() bool {
	if o == nil || IsNil(o.Unmanaged) {
		var ret bool
		return ret
	}
	return *o.Unmanaged
}

// GetUnmanagedOk returns a tuple with the Unmanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUnmanagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unmanaged) {
		return nil, false
	}
	return o.Unmanaged, true
}

// HasUnmanaged returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUnmanaged() bool {
	if o != nil && !IsNil(o.Unmanaged) {
		return true
	}

	return false
}

// SetUnmanaged gets a reference to the given bool and assigns it to the Unmanaged field.
func (o *Ipv6networkcontainer) SetUnmanaged(v bool) {
	o.Unmanaged = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Ipv6networkcontainer) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseBlackoutSetting returns the UseBlackoutSetting field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseBlackoutSetting() bool {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseBlackoutSetting
}

// GetUseBlackoutSettingOk returns a tuple with the UseBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseBlackoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		return nil, false
	}
	return o.UseBlackoutSetting, true
}

// HasUseBlackoutSetting returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseBlackoutSetting() bool {
	if o != nil && !IsNil(o.UseBlackoutSetting) {
		return true
	}

	return false
}

// SetUseBlackoutSetting gets a reference to the given bool and assigns it to the UseBlackoutSetting field.
func (o *Ipv6networkcontainer) SetUseBlackoutSetting(v bool) {
	o.UseBlackoutSetting = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Ipv6networkcontainer) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsEnableOptionFqdn returns the UseDdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.UseDdnsEnableOptionFqdn
}

// GetUseDdnsEnableOptionFqdnOk returns a tuple with the UseDdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.UseDdnsEnableOptionFqdn, true
}

// HasUseDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.UseDdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetUseDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the UseDdnsEnableOptionFqdn field.
func (o *Ipv6networkcontainer) SetUseDdnsEnableOptionFqdn(v bool) {
	o.UseDdnsEnableOptionFqdn = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Ipv6networkcontainer) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Ipv6networkcontainer) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDiscoveryBasicPollingSettings returns the UseDiscoveryBasicPollingSettings field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDiscoveryBasicPollingSettings() bool {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		var ret bool
		return ret
	}
	return *o.UseDiscoveryBasicPollingSettings
}

// GetUseDiscoveryBasicPollingSettingsOk returns a tuple with the UseDiscoveryBasicPollingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDiscoveryBasicPollingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		return nil, false
	}
	return o.UseDiscoveryBasicPollingSettings, true
}

// HasUseDiscoveryBasicPollingSettings returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDiscoveryBasicPollingSettings() bool {
	if o != nil && !IsNil(o.UseDiscoveryBasicPollingSettings) {
		return true
	}

	return false
}

// SetUseDiscoveryBasicPollingSettings gets a reference to the given bool and assigns it to the UseDiscoveryBasicPollingSettings field.
func (o *Ipv6networkcontainer) SetUseDiscoveryBasicPollingSettings(v bool) {
	o.UseDiscoveryBasicPollingSettings = &v
}

// GetUseDomainNameServers returns the UseDomainNameServers field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseDomainNameServers() bool {
	if o == nil || IsNil(o.UseDomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseDomainNameServers
}

// GetUseDomainNameServersOk returns a tuple with the UseDomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseDomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainNameServers) {
		return nil, false
	}
	return o.UseDomainNameServers, true
}

// HasUseDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseDomainNameServers() bool {
	if o != nil && !IsNil(o.UseDomainNameServers) {
		return true
	}

	return false
}

// SetUseDomainNameServers gets a reference to the given bool and assigns it to the UseDomainNameServers field.
func (o *Ipv6networkcontainer) SetUseDomainNameServers(v bool) {
	o.UseDomainNameServers = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Ipv6networkcontainer) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDiscovery returns the UseEnableDiscovery field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseEnableDiscovery() bool {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.UseEnableDiscovery
}

// GetUseEnableDiscoveryOk returns a tuple with the UseEnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		return nil, false
	}
	return o.UseEnableDiscovery, true
}

// HasUseEnableDiscovery returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseEnableDiscovery() bool {
	if o != nil && !IsNil(o.UseEnableDiscovery) {
		return true
	}

	return false
}

// SetUseEnableDiscovery gets a reference to the given bool and assigns it to the UseEnableDiscovery field.
func (o *Ipv6networkcontainer) SetUseEnableDiscovery(v bool) {
	o.UseEnableDiscovery = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6networkcontainer) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMgmPrivate returns the UseMgmPrivate field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseMgmPrivate() bool {
	if o == nil || IsNil(o.UseMgmPrivate) {
		var ret bool
		return ret
	}
	return *o.UseMgmPrivate
}

// GetUseMgmPrivateOk returns a tuple with the UseMgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmPrivate) {
		return nil, false
	}
	return o.UseMgmPrivate, true
}

// HasUseMgmPrivate returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseMgmPrivate() bool {
	if o != nil && !IsNil(o.UseMgmPrivate) {
		return true
	}

	return false
}

// SetUseMgmPrivate gets a reference to the given bool and assigns it to the UseMgmPrivate field.
func (o *Ipv6networkcontainer) SetUseMgmPrivate(v bool) {
	o.UseMgmPrivate = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Ipv6networkcontainer) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *Ipv6networkcontainer) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUseSubscribeSettings returns the UseSubscribeSettings field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseSubscribeSettings() bool {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		var ret bool
		return ret
	}
	return *o.UseSubscribeSettings
}

// GetUseSubscribeSettingsOk returns a tuple with the UseSubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseSubscribeSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		return nil, false
	}
	return o.UseSubscribeSettings, true
}

// HasUseSubscribeSettings returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseSubscribeSettings() bool {
	if o != nil && !IsNil(o.UseSubscribeSettings) {
		return true
	}

	return false
}

// SetUseSubscribeSettings gets a reference to the given bool and assigns it to the UseSubscribeSettings field.
func (o *Ipv6networkcontainer) SetUseSubscribeSettings(v bool) {
	o.UseSubscribeSettings = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Ipv6networkcontainer) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *Ipv6networkcontainer) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetUseZoneAssociations returns the UseZoneAssociations field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUseZoneAssociations() bool {
	if o == nil || IsNil(o.UseZoneAssociations) {
		var ret bool
		return ret
	}
	return *o.UseZoneAssociations
}

// GetUseZoneAssociationsOk returns a tuple with the UseZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUseZoneAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseZoneAssociations) {
		return nil, false
	}
	return o.UseZoneAssociations, true
}

// HasUseZoneAssociations returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUseZoneAssociations() bool {
	if o != nil && !IsNil(o.UseZoneAssociations) {
		return true
	}

	return false
}

// SetUseZoneAssociations gets a reference to the given bool and assigns it to the UseZoneAssociations field.
func (o *Ipv6networkcontainer) SetUseZoneAssociations(v bool) {
	o.UseZoneAssociations = &v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetUtilization() int64 {
	if o == nil || IsNil(o.Utilization) {
		var ret int64
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.Utilization) {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasUtilization() bool {
	if o != nil && !IsNil(o.Utilization) {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given int64 and assigns it to the Utilization field.
func (o *Ipv6networkcontainer) SetUtilization(v int64) {
	o.Utilization = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *Ipv6networkcontainer) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

// GetZoneAssociations returns the ZoneAssociations field value if set, zero value otherwise.
func (o *Ipv6networkcontainer) GetZoneAssociations() []Ipv6networkcontainerZoneAssociations {
	if o == nil || IsNil(o.ZoneAssociations) {
		var ret []Ipv6networkcontainerZoneAssociations
		return ret
	}
	return o.ZoneAssociations
}

// GetZoneAssociationsOk returns a tuple with the ZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainer) GetZoneAssociationsOk() ([]Ipv6networkcontainerZoneAssociations, bool) {
	if o == nil || IsNil(o.ZoneAssociations) {
		return nil, false
	}
	return o.ZoneAssociations, true
}

// HasZoneAssociations returns a boolean if a field has been set.
func (o *Ipv6networkcontainer) HasZoneAssociations() bool {
	if o != nil && !IsNil(o.ZoneAssociations) {
		return true
	}

	return false
}

// SetZoneAssociations gets a reference to the given []Ipv6networkcontainerZoneAssociations and assigns it to the ZoneAssociations field.
func (o *Ipv6networkcontainer) SetZoneAssociations(v []Ipv6networkcontainerZoneAssociations) {
	o.ZoneAssociations = v
}

func (o Ipv6networkcontainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkcontainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoCreateReversezone) {
		toSerialize["auto_create_reversezone"] = o.AutoCreateReversezone
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsEnableOptionFqdn) {
		toSerialize["ddns_enable_option_fqdn"] = o.DdnsEnableOptionFqdn
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DeleteReason) {
		toSerialize["delete_reason"] = o.DeleteReason
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveryBasicPollSettings) {
		toSerialize["discovery_basic_poll_settings"] = o.DiscoveryBasicPollSettings
	}
	if !IsNil(o.DiscoveryBlackoutSetting) {
		toSerialize["discovery_blackout_setting"] = o.DiscoveryBlackoutSetting
	}
	if !IsNil(o.DiscoveryEngineType) {
		toSerialize["discovery_engine_type"] = o.DiscoveryEngineType
	}
	if !IsNil(o.DiscoveryMember) {
		toSerialize["discovery_member"] = o.DiscoveryMember
	}
	if !IsNil(o.DomainNameServers) {
		toSerialize["domain_name_servers"] = o.DomainNameServers
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDiscovery) {
		toSerialize["enable_discovery"] = o.EnableDiscovery
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EndpointSources) {
		toSerialize["endpoint_sources"] = o.EndpointSources
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.LastRirRegistrationUpdateSent) {
		toSerialize["last_rir_registration_update_sent"] = o.LastRirRegistrationUpdateSent
	}
	if !IsNil(o.LastRirRegistrationUpdateStatus) {
		toSerialize["last_rir_registration_update_status"] = o.LastRirRegistrationUpdateStatus
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.MgmPrivate) {
		toSerialize["mgm_private"] = o.MgmPrivate
	}
	if !IsNil(o.MgmPrivateOverridable) {
		toSerialize["mgm_private_overridable"] = o.MgmPrivateOverridable
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkContainer) {
		toSerialize["network_container"] = o.NetworkContainer
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PortControlBlackoutSetting) {
		toSerialize["port_control_blackout_setting"] = o.PortControlBlackoutSetting
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.RemoveSubnets) {
		toSerialize["remove_subnets"] = o.RemoveSubnets
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.RirOrganization) {
		toSerialize["rir_organization"] = o.RirOrganization
	}
	if !IsNil(o.RirRegistrationAction) {
		toSerialize["rir_registration_action"] = o.RirRegistrationAction
	}
	if !IsNil(o.RirRegistrationStatus) {
		toSerialize["rir_registration_status"] = o.RirRegistrationStatus
	}
	if !IsNil(o.SamePortControlDiscoveryBlackout) {
		toSerialize["same_port_control_discovery_blackout"] = o.SamePortControlDiscoveryBlackout
	}
	if !IsNil(o.SendRirRequest) {
		toSerialize["send_rir_request"] = o.SendRirRequest
	}
	if !IsNil(o.SubscribeSettings) {
		toSerialize["subscribe_settings"] = o.SubscribeSettings
	}
	if !IsNil(o.Unmanaged) {
		toSerialize["unmanaged"] = o.Unmanaged
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseBlackoutSetting) {
		toSerialize["use_blackout_setting"] = o.UseBlackoutSetting
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsEnableOptionFqdn) {
		toSerialize["use_ddns_enable_option_fqdn"] = o.UseDdnsEnableOptionFqdn
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDiscoveryBasicPollingSettings) {
		toSerialize["use_discovery_basic_polling_settings"] = o.UseDiscoveryBasicPollingSettings
	}
	if !IsNil(o.UseDomainNameServers) {
		toSerialize["use_domain_name_servers"] = o.UseDomainNameServers
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDiscovery) {
		toSerialize["use_enable_discovery"] = o.UseEnableDiscovery
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMgmPrivate) {
		toSerialize["use_mgm_private"] = o.UseMgmPrivate
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UseSubscribeSettings) {
		toSerialize["use_subscribe_settings"] = o.UseSubscribeSettings
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.UseZoneAssociations) {
		toSerialize["use_zone_associations"] = o.UseZoneAssociations
	}
	if !IsNil(o.Utilization) {
		toSerialize["utilization"] = o.Utilization
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	if !IsNil(o.ZoneAssociations) {
		toSerialize["zone_associations"] = o.ZoneAssociations
	}
	return toSerialize, nil
}

type NullableIpv6networkcontainer struct {
	value *Ipv6networkcontainer
	isSet bool
}

func (v NullableIpv6networkcontainer) Get() *Ipv6networkcontainer {
	return v.value
}

func (v *NullableIpv6networkcontainer) Set(val *Ipv6networkcontainer) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkcontainer) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkcontainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkcontainer(val *Ipv6networkcontainer) *NullableIpv6networkcontainer {
	return &NullableIpv6networkcontainer{value: val, isSet: true}
}

func (v NullableIpv6networkcontainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkcontainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
