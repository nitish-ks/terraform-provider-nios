/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networkcontainerOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networkcontainerOptions{}

// Ipv6networkcontainerOptions struct for Ipv6networkcontainerOptions
type Ipv6networkcontainerOptions struct {
	// Name of the DHCP option.
	Name *string `json:"name,omitempty"`
	// The code of the DHCP option.
	Num *int64 `json:"num,omitempty"`
	// The name of the space this DHCP option is associated to.
	VendorClass *string `json:"vendor_class,omitempty"`
	// Value of the DHCP option
	Value *string `json:"value,omitempty"`
	// Only applies to special options that are displayed separately from other options and have a use flag. These options are: * routers * router-templates * domain-name-servers * domain-name * broadcast-address * broadcast-address-offset * dhcp-lease-time * dhcp6.name-servers
	UseOption            *bool `json:"use_option,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ipv6networkcontainerOptions Ipv6networkcontainerOptions

// NewIpv6networkcontainerOptions instantiates a new Ipv6networkcontainerOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networkcontainerOptions() *Ipv6networkcontainerOptions {
	this := Ipv6networkcontainerOptions{}
	return &this
}

// NewIpv6networkcontainerOptionsWithDefaults instantiates a new Ipv6networkcontainerOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networkcontainerOptionsWithDefaults() *Ipv6networkcontainerOptions {
	this := Ipv6networkcontainerOptions{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6networkcontainerOptions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainerOptions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6networkcontainerOptions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6networkcontainerOptions) SetName(v string) {
	o.Name = &v
}

// GetNum returns the Num field value if set, zero value otherwise.
func (o *Ipv6networkcontainerOptions) GetNum() int64 {
	if o == nil || IsNil(o.Num) {
		var ret int64
		return ret
	}
	return *o.Num
}

// GetNumOk returns a tuple with the Num field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainerOptions) GetNumOk() (*int64, bool) {
	if o == nil || IsNil(o.Num) {
		return nil, false
	}
	return o.Num, true
}

// HasNum returns a boolean if a field has been set.
func (o *Ipv6networkcontainerOptions) HasNum() bool {
	if o != nil && !IsNil(o.Num) {
		return true
	}

	return false
}

// SetNum gets a reference to the given int64 and assigns it to the Num field.
func (o *Ipv6networkcontainerOptions) SetNum(v int64) {
	o.Num = &v
}

// GetVendorClass returns the VendorClass field value if set, zero value otherwise.
func (o *Ipv6networkcontainerOptions) GetVendorClass() string {
	if o == nil || IsNil(o.VendorClass) {
		var ret string
		return ret
	}
	return *o.VendorClass
}

// GetVendorClassOk returns a tuple with the VendorClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainerOptions) GetVendorClassOk() (*string, bool) {
	if o == nil || IsNil(o.VendorClass) {
		return nil, false
	}
	return o.VendorClass, true
}

// HasVendorClass returns a boolean if a field has been set.
func (o *Ipv6networkcontainerOptions) HasVendorClass() bool {
	if o != nil && !IsNil(o.VendorClass) {
		return true
	}

	return false
}

// SetVendorClass gets a reference to the given string and assigns it to the VendorClass field.
func (o *Ipv6networkcontainerOptions) SetVendorClass(v string) {
	o.VendorClass = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Ipv6networkcontainerOptions) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainerOptions) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Ipv6networkcontainerOptions) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Ipv6networkcontainerOptions) SetValue(v string) {
	o.Value = &v
}

// GetUseOption returns the UseOption field value if set, zero value otherwise.
func (o *Ipv6networkcontainerOptions) GetUseOption() bool {
	if o == nil || IsNil(o.UseOption) {
		var ret bool
		return ret
	}
	return *o.UseOption
}

// GetUseOptionOk returns a tuple with the UseOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networkcontainerOptions) GetUseOptionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOption) {
		return nil, false
	}
	return o.UseOption, true
}

// HasUseOption returns a boolean if a field has been set.
func (o *Ipv6networkcontainerOptions) HasUseOption() bool {
	if o != nil && !IsNil(o.UseOption) {
		return true
	}

	return false
}

// SetUseOption gets a reference to the given bool and assigns it to the UseOption field.
func (o *Ipv6networkcontainerOptions) SetUseOption(v bool) {
	o.UseOption = &v
}

func (o Ipv6networkcontainerOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networkcontainerOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Num) {
		toSerialize["num"] = o.Num
	}
	if !IsNil(o.VendorClass) {
		toSerialize["vendor_class"] = o.VendorClass
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.UseOption) {
		toSerialize["use_option"] = o.UseOption
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Ipv6networkcontainerOptions) UnmarshalJSON(data []byte) (err error) {
	varIpv6networkcontainerOptions := _Ipv6networkcontainerOptions{}

	err = json.Unmarshal(data, &varIpv6networkcontainerOptions)

	if err != nil {
		return err
	}

	*o = Ipv6networkcontainerOptions(varIpv6networkcontainerOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "num")
		delete(additionalProperties, "vendor_class")
		delete(additionalProperties, "value")
		delete(additionalProperties, "use_option")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpv6networkcontainerOptions struct {
	value *Ipv6networkcontainerOptions
	isSet bool
}

func (v NullableIpv6networkcontainerOptions) Get() *Ipv6networkcontainerOptions {
	return v.value
}

func (v *NullableIpv6networkcontainerOptions) Set(val *Ipv6networkcontainerOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkcontainerOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkcontainerOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkcontainerOptions(val *Ipv6networkcontainerOptions) *NullableIpv6networkcontainerOptions {
	return &NullableIpv6networkcontainerOptions{value: val, isSet: true}
}

func (v NullableIpv6networkcontainerOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkcontainerOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
