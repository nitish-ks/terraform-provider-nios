/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListBulkhostResponse - struct for ListBulkhostResponse
type ListBulkhostResponse struct {
	ListBulkhostResponseObject *ListBulkhostResponseObject
	ArrayOfBulkhost            *[]Bulkhost
}

// ListBulkhostResponseObjectAsListBulkhostResponse is a convenience function that returns ListBulkhostResponseObject wrapped in ListBulkhostResponse
func ListBulkhostResponseObjectAsListBulkhostResponse(v *ListBulkhostResponseObject) ListBulkhostResponse {
	return ListBulkhostResponse{
		ListBulkhostResponseObject: v,
	}
}

// []BulkhostAsListBulkhostResponse is a convenience function that returns []Bulkhost wrapped in ListBulkhostResponse
func ArrayOfBulkhostAsListBulkhostResponse(v *[]Bulkhost) ListBulkhostResponse {
	return ListBulkhostResponse{
		ArrayOfBulkhost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListBulkhostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListBulkhostResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListBulkhostResponseObject)
	if err == nil {
		jsonListBulkhostResponseObject, _ := json.Marshal(dst.ListBulkhostResponseObject)
		if string(jsonListBulkhostResponseObject) == "{}" { // empty struct
			dst.ListBulkhostResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListBulkhostResponseObject = nil
	}

	// try to unmarshal data into ArrayOfBulkhost
	err = newStrictDecoder(data).Decode(&dst.ArrayOfBulkhost)
	if err == nil {
		jsonArrayOfBulkhost, _ := json.Marshal(dst.ArrayOfBulkhost)
		if string(jsonArrayOfBulkhost) == "{}" { // empty struct
			dst.ArrayOfBulkhost = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfBulkhost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListBulkhostResponseObject = nil
		dst.ArrayOfBulkhost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListBulkhostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListBulkhostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListBulkhostResponse) MarshalJSON() ([]byte, error) {
	if src.ListBulkhostResponseObject != nil {
		return json.Marshal(&src.ListBulkhostResponseObject)
	}

	if src.ArrayOfBulkhost != nil {
		return json.Marshal(&src.ArrayOfBulkhost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListBulkhostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListBulkhostResponseObject != nil {
		return obj.ListBulkhostResponseObject
	}

	if obj.ArrayOfBulkhost != nil {
		return obj.ArrayOfBulkhost
	}

	// all schemas are nil
	return nil
}

type NullableListBulkhostResponse struct {
	value *ListBulkhostResponse
	isSet bool
}

func (v NullableListBulkhostResponse) Get() *ListBulkhostResponse {
	return v.value
}

func (v *NullableListBulkhostResponse) Set(val *ListBulkhostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListBulkhostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListBulkhostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBulkhostResponse(val *ListBulkhostResponse) *NullableListBulkhostResponse {
	return &NullableListBulkhostResponse{value: val, isSet: true}
}

func (v NullableListBulkhostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBulkhostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
