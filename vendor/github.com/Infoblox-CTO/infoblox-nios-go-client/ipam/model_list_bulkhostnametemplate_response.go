/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListBulkhostnametemplateResponse - struct for ListBulkhostnametemplateResponse
type ListBulkhostnametemplateResponse struct {
	ListBulkhostnametemplateResponseObject *ListBulkhostnametemplateResponseObject
	ArrayOfBulkhostnametemplate            *[]Bulkhostnametemplate
}

// ListBulkhostnametemplateResponseObjectAsListBulkhostnametemplateResponse is a convenience function that returns ListBulkhostnametemplateResponseObject wrapped in ListBulkhostnametemplateResponse
func ListBulkhostnametemplateResponseObjectAsListBulkhostnametemplateResponse(v *ListBulkhostnametemplateResponseObject) ListBulkhostnametemplateResponse {
	return ListBulkhostnametemplateResponse{
		ListBulkhostnametemplateResponseObject: v,
	}
}

// []BulkhostnametemplateAsListBulkhostnametemplateResponse is a convenience function that returns []Bulkhostnametemplate wrapped in ListBulkhostnametemplateResponse
func ArrayOfBulkhostnametemplateAsListBulkhostnametemplateResponse(v *[]Bulkhostnametemplate) ListBulkhostnametemplateResponse {
	return ListBulkhostnametemplateResponse{
		ArrayOfBulkhostnametemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListBulkhostnametemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListBulkhostnametemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListBulkhostnametemplateResponseObject)
	if err == nil {
		jsonListBulkhostnametemplateResponseObject, _ := json.Marshal(dst.ListBulkhostnametemplateResponseObject)
		if string(jsonListBulkhostnametemplateResponseObject) == "{}" { // empty struct
			dst.ListBulkhostnametemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListBulkhostnametemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfBulkhostnametemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfBulkhostnametemplate)
	if err == nil {
		jsonArrayOfBulkhostnametemplate, _ := json.Marshal(dst.ArrayOfBulkhostnametemplate)
		if string(jsonArrayOfBulkhostnametemplate) == "{}" { // empty struct
			dst.ArrayOfBulkhostnametemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfBulkhostnametemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListBulkhostnametemplateResponseObject = nil
		dst.ArrayOfBulkhostnametemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListBulkhostnametemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListBulkhostnametemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListBulkhostnametemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListBulkhostnametemplateResponseObject != nil {
		return json.Marshal(&src.ListBulkhostnametemplateResponseObject)
	}

	if src.ArrayOfBulkhostnametemplate != nil {
		return json.Marshal(&src.ArrayOfBulkhostnametemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListBulkhostnametemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListBulkhostnametemplateResponseObject != nil {
		return obj.ListBulkhostnametemplateResponseObject
	}

	if obj.ArrayOfBulkhostnametemplate != nil {
		return obj.ArrayOfBulkhostnametemplate
	}

	// all schemas are nil
	return nil
}

type NullableListBulkhostnametemplateResponse struct {
	value *ListBulkhostnametemplateResponse
	isSet bool
}

func (v NullableListBulkhostnametemplateResponse) Get() *ListBulkhostnametemplateResponse {
	return v.value
}

func (v *NullableListBulkhostnametemplateResponse) Set(val *ListBulkhostnametemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListBulkhostnametemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListBulkhostnametemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBulkhostnametemplateResponse(val *ListBulkhostnametemplateResponse) *NullableListBulkhostnametemplateResponse {
	return &NullableListBulkhostnametemplateResponse{value: val, isSet: true}
}

func (v NullableListBulkhostnametemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBulkhostnametemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
