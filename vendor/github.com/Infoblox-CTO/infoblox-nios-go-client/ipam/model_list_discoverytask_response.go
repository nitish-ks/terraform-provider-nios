/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListDiscoverytaskResponse - struct for ListDiscoverytaskResponse
type ListDiscoverytaskResponse struct {
	ListDiscoverytaskResponseObject *ListDiscoverytaskResponseObject
	ArrayOfDiscoverytask            *[]Discoverytask
}

// ListDiscoverytaskResponseObjectAsListDiscoverytaskResponse is a convenience function that returns ListDiscoverytaskResponseObject wrapped in ListDiscoverytaskResponse
func ListDiscoverytaskResponseObjectAsListDiscoverytaskResponse(v *ListDiscoverytaskResponseObject) ListDiscoverytaskResponse {
	return ListDiscoverytaskResponse{
		ListDiscoverytaskResponseObject: v,
	}
}

// []DiscoverytaskAsListDiscoverytaskResponse is a convenience function that returns []Discoverytask wrapped in ListDiscoverytaskResponse
func ArrayOfDiscoverytaskAsListDiscoverytaskResponse(v *[]Discoverytask) ListDiscoverytaskResponse {
	return ListDiscoverytaskResponse{
		ArrayOfDiscoverytask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoverytaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoverytaskResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoverytaskResponseObject)
	if err == nil {
		jsonListDiscoverytaskResponseObject, _ := json.Marshal(dst.ListDiscoverytaskResponseObject)
		if string(jsonListDiscoverytaskResponseObject) == "{}" { // empty struct
			dst.ListDiscoverytaskResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoverytaskResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoverytask
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoverytask)
	if err == nil {
		jsonArrayOfDiscoverytask, _ := json.Marshal(dst.ArrayOfDiscoverytask)
		if string(jsonArrayOfDiscoverytask) == "{}" { // empty struct
			dst.ArrayOfDiscoverytask = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoverytask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoverytaskResponseObject = nil
		dst.ArrayOfDiscoverytask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoverytaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoverytaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoverytaskResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoverytaskResponseObject != nil {
		return json.Marshal(&src.ListDiscoverytaskResponseObject)
	}

	if src.ArrayOfDiscoverytask != nil {
		return json.Marshal(&src.ArrayOfDiscoverytask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoverytaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoverytaskResponseObject != nil {
		return obj.ListDiscoverytaskResponseObject
	}

	if obj.ArrayOfDiscoverytask != nil {
		return obj.ArrayOfDiscoverytask
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoverytaskResponse struct {
	value *ListDiscoverytaskResponse
	isSet bool
}

func (v NullableListDiscoverytaskResponse) Get() *ListDiscoverytaskResponse {
	return v.value
}

func (v *NullableListDiscoverytaskResponse) Set(val *ListDiscoverytaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoverytaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoverytaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoverytaskResponse(val *ListDiscoverytaskResponse) *NullableListDiscoverytaskResponse {
	return &NullableListDiscoverytaskResponse{value: val, isSet: true}
}

func (v NullableListDiscoverytaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoverytaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
