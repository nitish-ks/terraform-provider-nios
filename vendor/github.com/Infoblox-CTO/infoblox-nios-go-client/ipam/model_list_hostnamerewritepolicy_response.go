/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListHostnamerewritepolicyResponse - struct for ListHostnamerewritepolicyResponse
type ListHostnamerewritepolicyResponse struct {
	ListHostnamerewritepolicyResponseObject *ListHostnamerewritepolicyResponseObject
	ArrayOfHostnamerewritepolicy            *[]Hostnamerewritepolicy
}

// ListHostnamerewritepolicyResponseObjectAsListHostnamerewritepolicyResponse is a convenience function that returns ListHostnamerewritepolicyResponseObject wrapped in ListHostnamerewritepolicyResponse
func ListHostnamerewritepolicyResponseObjectAsListHostnamerewritepolicyResponse(v *ListHostnamerewritepolicyResponseObject) ListHostnamerewritepolicyResponse {
	return ListHostnamerewritepolicyResponse{
		ListHostnamerewritepolicyResponseObject: v,
	}
}

// []HostnamerewritepolicyAsListHostnamerewritepolicyResponse is a convenience function that returns []Hostnamerewritepolicy wrapped in ListHostnamerewritepolicyResponse
func ArrayOfHostnamerewritepolicyAsListHostnamerewritepolicyResponse(v *[]Hostnamerewritepolicy) ListHostnamerewritepolicyResponse {
	return ListHostnamerewritepolicyResponse{
		ArrayOfHostnamerewritepolicy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListHostnamerewritepolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListHostnamerewritepolicyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListHostnamerewritepolicyResponseObject)
	if err == nil {
		jsonListHostnamerewritepolicyResponseObject, _ := json.Marshal(dst.ListHostnamerewritepolicyResponseObject)
		if string(jsonListHostnamerewritepolicyResponseObject) == "{}" { // empty struct
			dst.ListHostnamerewritepolicyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListHostnamerewritepolicyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfHostnamerewritepolicy
	err = newStrictDecoder(data).Decode(&dst.ArrayOfHostnamerewritepolicy)
	if err == nil {
		jsonArrayOfHostnamerewritepolicy, _ := json.Marshal(dst.ArrayOfHostnamerewritepolicy)
		if string(jsonArrayOfHostnamerewritepolicy) == "{}" { // empty struct
			dst.ArrayOfHostnamerewritepolicy = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfHostnamerewritepolicy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListHostnamerewritepolicyResponseObject = nil
		dst.ArrayOfHostnamerewritepolicy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListHostnamerewritepolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListHostnamerewritepolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListHostnamerewritepolicyResponse) MarshalJSON() ([]byte, error) {
	if src.ListHostnamerewritepolicyResponseObject != nil {
		return json.Marshal(&src.ListHostnamerewritepolicyResponseObject)
	}

	if src.ArrayOfHostnamerewritepolicy != nil {
		return json.Marshal(&src.ArrayOfHostnamerewritepolicy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListHostnamerewritepolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListHostnamerewritepolicyResponseObject != nil {
		return obj.ListHostnamerewritepolicyResponseObject
	}

	if obj.ArrayOfHostnamerewritepolicy != nil {
		return obj.ArrayOfHostnamerewritepolicy
	}

	// all schemas are nil
	return nil
}

type NullableListHostnamerewritepolicyResponse struct {
	value *ListHostnamerewritepolicyResponse
	isSet bool
}

func (v NullableListHostnamerewritepolicyResponse) Get() *ListHostnamerewritepolicyResponse {
	return v.value
}

func (v *NullableListHostnamerewritepolicyResponse) Set(val *ListHostnamerewritepolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListHostnamerewritepolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListHostnamerewritepolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListHostnamerewritepolicyResponse(val *ListHostnamerewritepolicyResponse) *NullableListHostnamerewritepolicyResponse {
	return &NullableListHostnamerewritepolicyResponse{value: val, isSet: true}
}

func (v NullableListHostnamerewritepolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListHostnamerewritepolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
