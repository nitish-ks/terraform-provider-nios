/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListIpv4addressResponse - struct for ListIpv4addressResponse
type ListIpv4addressResponse struct {
	ListIpv4addressResponseObject *ListIpv4addressResponseObject
	ArrayOfIpv4address            *[]Ipv4address
}

// ListIpv4addressResponseObjectAsListIpv4addressResponse is a convenience function that returns ListIpv4addressResponseObject wrapped in ListIpv4addressResponse
func ListIpv4addressResponseObjectAsListIpv4addressResponse(v *ListIpv4addressResponseObject) ListIpv4addressResponse {
	return ListIpv4addressResponse{
		ListIpv4addressResponseObject: v,
	}
}

// []Ipv4addressAsListIpv4addressResponse is a convenience function that returns []Ipv4address wrapped in ListIpv4addressResponse
func ArrayOfIpv4addressAsListIpv4addressResponse(v *[]Ipv4address) ListIpv4addressResponse {
	return ListIpv4addressResponse{
		ArrayOfIpv4address: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv4addressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv4addressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv4addressResponseObject)
	if err == nil {
		jsonListIpv4addressResponseObject, _ := json.Marshal(dst.ListIpv4addressResponseObject)
		if string(jsonListIpv4addressResponseObject) == "{}" { // empty struct
			dst.ListIpv4addressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv4addressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv4address
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv4address)
	if err == nil {
		jsonArrayOfIpv4address, _ := json.Marshal(dst.ArrayOfIpv4address)
		if string(jsonArrayOfIpv4address) == "{}" { // empty struct
			dst.ArrayOfIpv4address = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv4address = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv4addressResponseObject = nil
		dst.ArrayOfIpv4address = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv4addressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv4addressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv4addressResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv4addressResponseObject != nil {
		return json.Marshal(&src.ListIpv4addressResponseObject)
	}

	if src.ArrayOfIpv4address != nil {
		return json.Marshal(&src.ArrayOfIpv4address)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv4addressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv4addressResponseObject != nil {
		return obj.ListIpv4addressResponseObject
	}

	if obj.ArrayOfIpv4address != nil {
		return obj.ArrayOfIpv4address
	}

	// all schemas are nil
	return nil
}

type NullableListIpv4addressResponse struct {
	value *ListIpv4addressResponse
	isSet bool
}

func (v NullableListIpv4addressResponse) Get() *ListIpv4addressResponse {
	return v.value
}

func (v *NullableListIpv4addressResponse) Set(val *ListIpv4addressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv4addressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv4addressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv4addressResponse(val *ListIpv4addressResponse) *NullableListIpv4addressResponse {
	return &NullableListIpv4addressResponse{value: val, isSet: true}
}

func (v NullableListIpv4addressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv4addressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
