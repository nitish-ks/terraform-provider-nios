/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListIpv6addressResponse - struct for ListIpv6addressResponse
type ListIpv6addressResponse struct {
	ListIpv6addressResponseObject *ListIpv6addressResponseObject
	ArrayOfIpv6address            *[]Ipv6address
}

// ListIpv6addressResponseObjectAsListIpv6addressResponse is a convenience function that returns ListIpv6addressResponseObject wrapped in ListIpv6addressResponse
func ListIpv6addressResponseObjectAsListIpv6addressResponse(v *ListIpv6addressResponseObject) ListIpv6addressResponse {
	return ListIpv6addressResponse{
		ListIpv6addressResponseObject: v,
	}
}

// []Ipv6addressAsListIpv6addressResponse is a convenience function that returns []Ipv6address wrapped in ListIpv6addressResponse
func ArrayOfIpv6addressAsListIpv6addressResponse(v *[]Ipv6address) ListIpv6addressResponse {
	return ListIpv6addressResponse{
		ArrayOfIpv6address: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6addressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6addressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6addressResponseObject)
	if err == nil {
		jsonListIpv6addressResponseObject, _ := json.Marshal(dst.ListIpv6addressResponseObject)
		if string(jsonListIpv6addressResponseObject) == "{}" { // empty struct
			dst.ListIpv6addressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6addressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6address
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6address)
	if err == nil {
		jsonArrayOfIpv6address, _ := json.Marshal(dst.ArrayOfIpv6address)
		if string(jsonArrayOfIpv6address) == "{}" { // empty struct
			dst.ArrayOfIpv6address = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6address = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6addressResponseObject = nil
		dst.ArrayOfIpv6address = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6addressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6addressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6addressResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6addressResponseObject != nil {
		return json.Marshal(&src.ListIpv6addressResponseObject)
	}

	if src.ArrayOfIpv6address != nil {
		return json.Marshal(&src.ArrayOfIpv6address)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6addressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6addressResponseObject != nil {
		return obj.ListIpv6addressResponseObject
	}

	if obj.ArrayOfIpv6address != nil {
		return obj.ArrayOfIpv6address
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6addressResponse struct {
	value *ListIpv6addressResponse
	isSet bool
}

func (v NullableListIpv6addressResponse) Get() *ListIpv6addressResponse {
	return v.value
}

func (v *NullableListIpv6addressResponse) Set(val *ListIpv6addressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6addressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6addressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6addressResponse(val *ListIpv6addressResponse) *NullableListIpv6addressResponse {
	return &NullableListIpv6addressResponse{value: val, isSet: true}
}

func (v NullableListIpv6addressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6addressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
