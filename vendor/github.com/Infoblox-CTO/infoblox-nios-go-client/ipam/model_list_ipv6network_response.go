/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListIpv6networkResponse - struct for ListIpv6networkResponse
type ListIpv6networkResponse struct {
	ListIpv6networkResponseObject *ListIpv6networkResponseObject
	ArrayOfIpv6network            *[]Ipv6network
}

// ListIpv6networkResponseObjectAsListIpv6networkResponse is a convenience function that returns ListIpv6networkResponseObject wrapped in ListIpv6networkResponse
func ListIpv6networkResponseObjectAsListIpv6networkResponse(v *ListIpv6networkResponseObject) ListIpv6networkResponse {
	return ListIpv6networkResponse{
		ListIpv6networkResponseObject: v,
	}
}

// []Ipv6networkAsListIpv6networkResponse is a convenience function that returns []Ipv6network wrapped in ListIpv6networkResponse
func ArrayOfIpv6networkAsListIpv6networkResponse(v *[]Ipv6network) ListIpv6networkResponse {
	return ListIpv6networkResponse{
		ArrayOfIpv6network: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6networkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6networkResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6networkResponseObject)
	if err == nil {
		jsonListIpv6networkResponseObject, _ := json.Marshal(dst.ListIpv6networkResponseObject)
		if string(jsonListIpv6networkResponseObject) == "{}" { // empty struct
			dst.ListIpv6networkResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6networkResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6network
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6network)
	if err == nil {
		jsonArrayOfIpv6network, _ := json.Marshal(dst.ArrayOfIpv6network)
		if string(jsonArrayOfIpv6network) == "{}" { // empty struct
			dst.ArrayOfIpv6network = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6network = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6networkResponseObject = nil
		dst.ArrayOfIpv6network = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6networkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6networkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6networkResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6networkResponseObject != nil {
		return json.Marshal(&src.ListIpv6networkResponseObject)
	}

	if src.ArrayOfIpv6network != nil {
		return json.Marshal(&src.ArrayOfIpv6network)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6networkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6networkResponseObject != nil {
		return obj.ListIpv6networkResponseObject
	}

	if obj.ArrayOfIpv6network != nil {
		return obj.ArrayOfIpv6network
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6networkResponse struct {
	value *ListIpv6networkResponse
	isSet bool
}

func (v NullableListIpv6networkResponse) Get() *ListIpv6networkResponse {
	return v.value
}

func (v *NullableListIpv6networkResponse) Set(val *ListIpv6networkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6networkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6networkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6networkResponse(val *ListIpv6networkResponse) *NullableListIpv6networkResponse {
	return &NullableListIpv6networkResponse{value: val, isSet: true}
}

func (v NullableListIpv6networkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6networkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
