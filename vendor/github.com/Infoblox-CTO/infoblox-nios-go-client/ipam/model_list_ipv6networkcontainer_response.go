/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListIpv6networkcontainerResponse - struct for ListIpv6networkcontainerResponse
type ListIpv6networkcontainerResponse struct {
	ListIpv6networkcontainerResponseObject *ListIpv6networkcontainerResponseObject
	ArrayOfIpv6networkcontainer            *[]Ipv6networkcontainer
}

// ListIpv6networkcontainerResponseObjectAsListIpv6networkcontainerResponse is a convenience function that returns ListIpv6networkcontainerResponseObject wrapped in ListIpv6networkcontainerResponse
func ListIpv6networkcontainerResponseObjectAsListIpv6networkcontainerResponse(v *ListIpv6networkcontainerResponseObject) ListIpv6networkcontainerResponse {
	return ListIpv6networkcontainerResponse{
		ListIpv6networkcontainerResponseObject: v,
	}
}

// []Ipv6networkcontainerAsListIpv6networkcontainerResponse is a convenience function that returns []Ipv6networkcontainer wrapped in ListIpv6networkcontainerResponse
func ArrayOfIpv6networkcontainerAsListIpv6networkcontainerResponse(v *[]Ipv6networkcontainer) ListIpv6networkcontainerResponse {
	return ListIpv6networkcontainerResponse{
		ArrayOfIpv6networkcontainer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6networkcontainerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6networkcontainerResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6networkcontainerResponseObject)
	if err == nil {
		jsonListIpv6networkcontainerResponseObject, _ := json.Marshal(dst.ListIpv6networkcontainerResponseObject)
		if string(jsonListIpv6networkcontainerResponseObject) == "{}" { // empty struct
			dst.ListIpv6networkcontainerResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6networkcontainerResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6networkcontainer
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6networkcontainer)
	if err == nil {
		jsonArrayOfIpv6networkcontainer, _ := json.Marshal(dst.ArrayOfIpv6networkcontainer)
		if string(jsonArrayOfIpv6networkcontainer) == "{}" { // empty struct
			dst.ArrayOfIpv6networkcontainer = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6networkcontainer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6networkcontainerResponseObject = nil
		dst.ArrayOfIpv6networkcontainer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6networkcontainerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6networkcontainerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6networkcontainerResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6networkcontainerResponseObject != nil {
		return json.Marshal(&src.ListIpv6networkcontainerResponseObject)
	}

	if src.ArrayOfIpv6networkcontainer != nil {
		return json.Marshal(&src.ArrayOfIpv6networkcontainer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6networkcontainerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6networkcontainerResponseObject != nil {
		return obj.ListIpv6networkcontainerResponseObject
	}

	if obj.ArrayOfIpv6networkcontainer != nil {
		return obj.ArrayOfIpv6networkcontainer
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6networkcontainerResponse struct {
	value *ListIpv6networkcontainerResponse
	isSet bool
}

func (v NullableListIpv6networkcontainerResponse) Get() *ListIpv6networkcontainerResponse {
	return v.value
}

func (v *NullableListIpv6networkcontainerResponse) Set(val *ListIpv6networkcontainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6networkcontainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6networkcontainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6networkcontainerResponse(val *ListIpv6networkcontainerResponse) *NullableListIpv6networkcontainerResponse {
	return &NullableListIpv6networkcontainerResponse{value: val, isSet: true}
}

func (v NullableListIpv6networkcontainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6networkcontainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
