/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListIpv6networktemplateResponse - struct for ListIpv6networktemplateResponse
type ListIpv6networktemplateResponse struct {
	ListIpv6networktemplateResponseObject *ListIpv6networktemplateResponseObject
	ArrayOfIpv6networktemplate            *[]Ipv6networktemplate
}

// ListIpv6networktemplateResponseObjectAsListIpv6networktemplateResponse is a convenience function that returns ListIpv6networktemplateResponseObject wrapped in ListIpv6networktemplateResponse
func ListIpv6networktemplateResponseObjectAsListIpv6networktemplateResponse(v *ListIpv6networktemplateResponseObject) ListIpv6networktemplateResponse {
	return ListIpv6networktemplateResponse{
		ListIpv6networktemplateResponseObject: v,
	}
}

// []Ipv6networktemplateAsListIpv6networktemplateResponse is a convenience function that returns []Ipv6networktemplate wrapped in ListIpv6networktemplateResponse
func ArrayOfIpv6networktemplateAsListIpv6networktemplateResponse(v *[]Ipv6networktemplate) ListIpv6networktemplateResponse {
	return ListIpv6networktemplateResponse{
		ArrayOfIpv6networktemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListIpv6networktemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListIpv6networktemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListIpv6networktemplateResponseObject)
	if err == nil {
		jsonListIpv6networktemplateResponseObject, _ := json.Marshal(dst.ListIpv6networktemplateResponseObject)
		if string(jsonListIpv6networktemplateResponseObject) == "{}" { // empty struct
			dst.ListIpv6networktemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListIpv6networktemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfIpv6networktemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIpv6networktemplate)
	if err == nil {
		jsonArrayOfIpv6networktemplate, _ := json.Marshal(dst.ArrayOfIpv6networktemplate)
		if string(jsonArrayOfIpv6networktemplate) == "{}" { // empty struct
			dst.ArrayOfIpv6networktemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIpv6networktemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListIpv6networktemplateResponseObject = nil
		dst.ArrayOfIpv6networktemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListIpv6networktemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListIpv6networktemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListIpv6networktemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListIpv6networktemplateResponseObject != nil {
		return json.Marshal(&src.ListIpv6networktemplateResponseObject)
	}

	if src.ArrayOfIpv6networktemplate != nil {
		return json.Marshal(&src.ArrayOfIpv6networktemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListIpv6networktemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListIpv6networktemplateResponseObject != nil {
		return obj.ListIpv6networktemplateResponseObject
	}

	if obj.ArrayOfIpv6networktemplate != nil {
		return obj.ArrayOfIpv6networktemplate
	}

	// all schemas are nil
	return nil
}

type NullableListIpv6networktemplateResponse struct {
	value *ListIpv6networktemplateResponse
	isSet bool
}

func (v NullableListIpv6networktemplateResponse) Get() *ListIpv6networktemplateResponse {
	return v.value
}

func (v *NullableListIpv6networktemplateResponse) Set(val *ListIpv6networktemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIpv6networktemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIpv6networktemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIpv6networktemplateResponse(val *ListIpv6networktemplateResponse) *NullableListIpv6networktemplateResponse {
	return &NullableListIpv6networktemplateResponse{value: val, isSet: true}
}

func (v NullableListIpv6networktemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIpv6networktemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
