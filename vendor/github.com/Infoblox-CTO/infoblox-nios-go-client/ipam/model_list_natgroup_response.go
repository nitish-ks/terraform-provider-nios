/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListNatgroupResponse - struct for ListNatgroupResponse
type ListNatgroupResponse struct {
	ListNatgroupResponseObject *ListNatgroupResponseObject
	ArrayOfNatgroup            *[]Natgroup
}

// ListNatgroupResponseObjectAsListNatgroupResponse is a convenience function that returns ListNatgroupResponseObject wrapped in ListNatgroupResponse
func ListNatgroupResponseObjectAsListNatgroupResponse(v *ListNatgroupResponseObject) ListNatgroupResponse {
	return ListNatgroupResponse{
		ListNatgroupResponseObject: v,
	}
}

// []NatgroupAsListNatgroupResponse is a convenience function that returns []Natgroup wrapped in ListNatgroupResponse
func ArrayOfNatgroupAsListNatgroupResponse(v *[]Natgroup) ListNatgroupResponse {
	return ListNatgroupResponse{
		ArrayOfNatgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNatgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNatgroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNatgroupResponseObject)
	if err == nil {
		jsonListNatgroupResponseObject, _ := json.Marshal(dst.ListNatgroupResponseObject)
		if string(jsonListNatgroupResponseObject) == "{}" { // empty struct
			dst.ListNatgroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNatgroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNatgroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNatgroup)
	if err == nil {
		jsonArrayOfNatgroup, _ := json.Marshal(dst.ArrayOfNatgroup)
		if string(jsonArrayOfNatgroup) == "{}" { // empty struct
			dst.ArrayOfNatgroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNatgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNatgroupResponseObject = nil
		dst.ArrayOfNatgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNatgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNatgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNatgroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListNatgroupResponseObject != nil {
		return json.Marshal(&src.ListNatgroupResponseObject)
	}

	if src.ArrayOfNatgroup != nil {
		return json.Marshal(&src.ArrayOfNatgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNatgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNatgroupResponseObject != nil {
		return obj.ListNatgroupResponseObject
	}

	if obj.ArrayOfNatgroup != nil {
		return obj.ArrayOfNatgroup
	}

	// all schemas are nil
	return nil
}

type NullableListNatgroupResponse struct {
	value *ListNatgroupResponse
	isSet bool
}

func (v NullableListNatgroupResponse) Get() *ListNatgroupResponse {
	return v.value
}

func (v *NullableListNatgroupResponse) Set(val *ListNatgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNatgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNatgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNatgroupResponse(val *ListNatgroupResponse) *NullableListNatgroupResponse {
	return &NullableListNatgroupResponse{value: val, isSet: true}
}

func (v NullableListNatgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNatgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
