/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListNetworkResponse - struct for ListNetworkResponse
type ListNetworkResponse struct {
	ListNetworkResponseObject *ListNetworkResponseObject
	ArrayOfNetwork            *[]Network
}

// ListNetworkResponseObjectAsListNetworkResponse is a convenience function that returns ListNetworkResponseObject wrapped in ListNetworkResponse
func ListNetworkResponseObjectAsListNetworkResponse(v *ListNetworkResponseObject) ListNetworkResponse {
	return ListNetworkResponse{
		ListNetworkResponseObject: v,
	}
}

// []NetworkAsListNetworkResponse is a convenience function that returns []Network wrapped in ListNetworkResponse
func ArrayOfNetworkAsListNetworkResponse(v *[]Network) ListNetworkResponse {
	return ListNetworkResponse{
		ArrayOfNetwork: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNetworkResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNetworkResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNetworkResponseObject)
	if err == nil {
		jsonListNetworkResponseObject, _ := json.Marshal(dst.ListNetworkResponseObject)
		if string(jsonListNetworkResponseObject) == "{}" { // empty struct
			dst.ListNetworkResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNetworkResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNetwork
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNetwork)
	if err == nil {
		jsonArrayOfNetwork, _ := json.Marshal(dst.ArrayOfNetwork)
		if string(jsonArrayOfNetwork) == "{}" { // empty struct
			dst.ArrayOfNetwork = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNetwork = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNetworkResponseObject = nil
		dst.ArrayOfNetwork = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNetworkResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNetworkResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNetworkResponse) MarshalJSON() ([]byte, error) {
	if src.ListNetworkResponseObject != nil {
		return json.Marshal(&src.ListNetworkResponseObject)
	}

	if src.ArrayOfNetwork != nil {
		return json.Marshal(&src.ArrayOfNetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNetworkResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNetworkResponseObject != nil {
		return obj.ListNetworkResponseObject
	}

	if obj.ArrayOfNetwork != nil {
		return obj.ArrayOfNetwork
	}

	// all schemas are nil
	return nil
}

type NullableListNetworkResponse struct {
	value *ListNetworkResponse
	isSet bool
}

func (v NullableListNetworkResponse) Get() *ListNetworkResponse {
	return v.value
}

func (v *NullableListNetworkResponse) Set(val *ListNetworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworkResponse(val *ListNetworkResponse) *NullableListNetworkResponse {
	return &NullableListNetworkResponse{value: val, isSet: true}
}

func (v NullableListNetworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
