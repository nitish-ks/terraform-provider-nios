/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListNetworkcontainerResponse - struct for ListNetworkcontainerResponse
type ListNetworkcontainerResponse struct {
	ListNetworkcontainerResponseObject *ListNetworkcontainerResponseObject
	ArrayOfNetworkcontainer            *[]Networkcontainer
}

// ListNetworkcontainerResponseObjectAsListNetworkcontainerResponse is a convenience function that returns ListNetworkcontainerResponseObject wrapped in ListNetworkcontainerResponse
func ListNetworkcontainerResponseObjectAsListNetworkcontainerResponse(v *ListNetworkcontainerResponseObject) ListNetworkcontainerResponse {
	return ListNetworkcontainerResponse{
		ListNetworkcontainerResponseObject: v,
	}
}

// []NetworkcontainerAsListNetworkcontainerResponse is a convenience function that returns []Networkcontainer wrapped in ListNetworkcontainerResponse
func ArrayOfNetworkcontainerAsListNetworkcontainerResponse(v *[]Networkcontainer) ListNetworkcontainerResponse {
	return ListNetworkcontainerResponse{
		ArrayOfNetworkcontainer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNetworkcontainerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNetworkcontainerResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNetworkcontainerResponseObject)
	if err == nil {
		jsonListNetworkcontainerResponseObject, _ := json.Marshal(dst.ListNetworkcontainerResponseObject)
		if string(jsonListNetworkcontainerResponseObject) == "{}" { // empty struct
			dst.ListNetworkcontainerResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNetworkcontainerResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNetworkcontainer
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNetworkcontainer)
	if err == nil {
		jsonArrayOfNetworkcontainer, _ := json.Marshal(dst.ArrayOfNetworkcontainer)
		if string(jsonArrayOfNetworkcontainer) == "{}" { // empty struct
			dst.ArrayOfNetworkcontainer = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNetworkcontainer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNetworkcontainerResponseObject = nil
		dst.ArrayOfNetworkcontainer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNetworkcontainerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNetworkcontainerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNetworkcontainerResponse) MarshalJSON() ([]byte, error) {
	if src.ListNetworkcontainerResponseObject != nil {
		return json.Marshal(&src.ListNetworkcontainerResponseObject)
	}

	if src.ArrayOfNetworkcontainer != nil {
		return json.Marshal(&src.ArrayOfNetworkcontainer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNetworkcontainerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNetworkcontainerResponseObject != nil {
		return obj.ListNetworkcontainerResponseObject
	}

	if obj.ArrayOfNetworkcontainer != nil {
		return obj.ArrayOfNetworkcontainer
	}

	// all schemas are nil
	return nil
}

type NullableListNetworkcontainerResponse struct {
	value *ListNetworkcontainerResponse
	isSet bool
}

func (v NullableListNetworkcontainerResponse) Get() *ListNetworkcontainerResponse {
	return v.value
}

func (v *NullableListNetworkcontainerResponse) Set(val *ListNetworkcontainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworkcontainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworkcontainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworkcontainerResponse(val *ListNetworkcontainerResponse) *NullableListNetworkcontainerResponse {
	return &NullableListNetworkcontainerResponse{value: val, isSet: true}
}

func (v NullableListNetworkcontainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworkcontainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
