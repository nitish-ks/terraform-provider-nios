/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListNetworktemplateResponse - struct for ListNetworktemplateResponse
type ListNetworktemplateResponse struct {
	ListNetworktemplateResponseObject *ListNetworktemplateResponseObject
	ArrayOfNetworktemplate            *[]Networktemplate
}

// ListNetworktemplateResponseObjectAsListNetworktemplateResponse is a convenience function that returns ListNetworktemplateResponseObject wrapped in ListNetworktemplateResponse
func ListNetworktemplateResponseObjectAsListNetworktemplateResponse(v *ListNetworktemplateResponseObject) ListNetworktemplateResponse {
	return ListNetworktemplateResponse{
		ListNetworktemplateResponseObject: v,
	}
}

// []NetworktemplateAsListNetworktemplateResponse is a convenience function that returns []Networktemplate wrapped in ListNetworktemplateResponse
func ArrayOfNetworktemplateAsListNetworktemplateResponse(v *[]Networktemplate) ListNetworktemplateResponse {
	return ListNetworktemplateResponse{
		ArrayOfNetworktemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNetworktemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNetworktemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNetworktemplateResponseObject)
	if err == nil {
		jsonListNetworktemplateResponseObject, _ := json.Marshal(dst.ListNetworktemplateResponseObject)
		if string(jsonListNetworktemplateResponseObject) == "{}" { // empty struct
			dst.ListNetworktemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNetworktemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNetworktemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNetworktemplate)
	if err == nil {
		jsonArrayOfNetworktemplate, _ := json.Marshal(dst.ArrayOfNetworktemplate)
		if string(jsonArrayOfNetworktemplate) == "{}" { // empty struct
			dst.ArrayOfNetworktemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNetworktemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNetworktemplateResponseObject = nil
		dst.ArrayOfNetworktemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNetworktemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNetworktemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNetworktemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListNetworktemplateResponseObject != nil {
		return json.Marshal(&src.ListNetworktemplateResponseObject)
	}

	if src.ArrayOfNetworktemplate != nil {
		return json.Marshal(&src.ArrayOfNetworktemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNetworktemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNetworktemplateResponseObject != nil {
		return obj.ListNetworktemplateResponseObject
	}

	if obj.ArrayOfNetworktemplate != nil {
		return obj.ArrayOfNetworktemplate
	}

	// all schemas are nil
	return nil
}

type NullableListNetworktemplateResponse struct {
	value *ListNetworktemplateResponse
	isSet bool
}

func (v NullableListNetworktemplateResponse) Get() *ListNetworktemplateResponse {
	return v.value
}

func (v *NullableListNetworktemplateResponse) Set(val *ListNetworktemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworktemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworktemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworktemplateResponse(val *ListNetworktemplateResponse) *NullableListNetworktemplateResponse {
	return &NullableListNetworktemplateResponse{value: val, isSet: true}
}

func (v NullableListNetworktemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworktemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
