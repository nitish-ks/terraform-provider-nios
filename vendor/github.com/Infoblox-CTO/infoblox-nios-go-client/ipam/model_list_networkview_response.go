/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListNetworkviewResponse - struct for ListNetworkviewResponse
type ListNetworkviewResponse struct {
	ListNetworkviewResponseObject *ListNetworkviewResponseObject
	ArrayOfNetworkview            *[]Networkview
}

// ListNetworkviewResponseObjectAsListNetworkviewResponse is a convenience function that returns ListNetworkviewResponseObject wrapped in ListNetworkviewResponse
func ListNetworkviewResponseObjectAsListNetworkviewResponse(v *ListNetworkviewResponseObject) ListNetworkviewResponse {
	return ListNetworkviewResponse{
		ListNetworkviewResponseObject: v,
	}
}

// []NetworkviewAsListNetworkviewResponse is a convenience function that returns []Networkview wrapped in ListNetworkviewResponse
func ArrayOfNetworkviewAsListNetworkviewResponse(v *[]Networkview) ListNetworkviewResponse {
	return ListNetworkviewResponse{
		ArrayOfNetworkview: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNetworkviewResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNetworkviewResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNetworkviewResponseObject)
	if err == nil {
		jsonListNetworkviewResponseObject, _ := json.Marshal(dst.ListNetworkviewResponseObject)
		if string(jsonListNetworkviewResponseObject) == "{}" { // empty struct
			dst.ListNetworkviewResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNetworkviewResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNetworkview
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNetworkview)
	if err == nil {
		jsonArrayOfNetworkview, _ := json.Marshal(dst.ArrayOfNetworkview)
		if string(jsonArrayOfNetworkview) == "{}" { // empty struct
			dst.ArrayOfNetworkview = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNetworkview = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNetworkviewResponseObject = nil
		dst.ArrayOfNetworkview = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNetworkviewResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNetworkviewResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNetworkviewResponse) MarshalJSON() ([]byte, error) {
	if src.ListNetworkviewResponseObject != nil {
		return json.Marshal(&src.ListNetworkviewResponseObject)
	}

	if src.ArrayOfNetworkview != nil {
		return json.Marshal(&src.ArrayOfNetworkview)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNetworkviewResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNetworkviewResponseObject != nil {
		return obj.ListNetworkviewResponseObject
	}

	if obj.ArrayOfNetworkview != nil {
		return obj.ArrayOfNetworkview
	}

	// all schemas are nil
	return nil
}

type NullableListNetworkviewResponse struct {
	value *ListNetworkviewResponse
	isSet bool
}

func (v NullableListNetworkviewResponse) Get() *ListNetworkviewResponse {
	return v.value
}

func (v *NullableListNetworkviewResponse) Set(val *ListNetworkviewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworkviewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworkviewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworkviewResponse(val *ListNetworkviewResponse) *NullableListNetworkviewResponse {
	return &NullableListNetworkviewResponse{value: val, isSet: true}
}

func (v NullableListNetworkviewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworkviewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
