/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListRirOrganizationResponse - struct for ListRirOrganizationResponse
type ListRirOrganizationResponse struct {
	ListRirOrganizationResponseObject *ListRirOrganizationResponseObject
	ArrayOfRirOrganization            *[]RirOrganization
}

// ListRirOrganizationResponseObjectAsListRirOrganizationResponse is a convenience function that returns ListRirOrganizationResponseObject wrapped in ListRirOrganizationResponse
func ListRirOrganizationResponseObjectAsListRirOrganizationResponse(v *ListRirOrganizationResponseObject) ListRirOrganizationResponse {
	return ListRirOrganizationResponse{
		ListRirOrganizationResponseObject: v,
	}
}

// []RirOrganizationAsListRirOrganizationResponse is a convenience function that returns []RirOrganization wrapped in ListRirOrganizationResponse
func ArrayOfRirOrganizationAsListRirOrganizationResponse(v *[]RirOrganization) ListRirOrganizationResponse {
	return ListRirOrganizationResponse{
		ArrayOfRirOrganization: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRirOrganizationResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRirOrganizationResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRirOrganizationResponseObject)
	if err == nil {
		jsonListRirOrganizationResponseObject, _ := json.Marshal(dst.ListRirOrganizationResponseObject)
		if string(jsonListRirOrganizationResponseObject) == "{}" { // empty struct
			dst.ListRirOrganizationResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRirOrganizationResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRirOrganization
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRirOrganization)
	if err == nil {
		jsonArrayOfRirOrganization, _ := json.Marshal(dst.ArrayOfRirOrganization)
		if string(jsonArrayOfRirOrganization) == "{}" { // empty struct
			dst.ArrayOfRirOrganization = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRirOrganization = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRirOrganizationResponseObject = nil
		dst.ArrayOfRirOrganization = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRirOrganizationResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRirOrganizationResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRirOrganizationResponse) MarshalJSON() ([]byte, error) {
	if src.ListRirOrganizationResponseObject != nil {
		return json.Marshal(&src.ListRirOrganizationResponseObject)
	}

	if src.ArrayOfRirOrganization != nil {
		return json.Marshal(&src.ArrayOfRirOrganization)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRirOrganizationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRirOrganizationResponseObject != nil {
		return obj.ListRirOrganizationResponseObject
	}

	if obj.ArrayOfRirOrganization != nil {
		return obj.ArrayOfRirOrganization
	}

	// all schemas are nil
	return nil
}

type NullableListRirOrganizationResponse struct {
	value *ListRirOrganizationResponse
	isSet bool
}

func (v NullableListRirOrganizationResponse) Get() *ListRirOrganizationResponse {
	return v.value
}

func (v *NullableListRirOrganizationResponse) Set(val *ListRirOrganizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRirOrganizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRirOrganizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRirOrganizationResponse(val *ListRirOrganizationResponse) *NullableListRirOrganizationResponse {
	return &NullableListRirOrganizationResponse{value: val, isSet: true}
}

func (v NullableListRirOrganizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRirOrganizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
