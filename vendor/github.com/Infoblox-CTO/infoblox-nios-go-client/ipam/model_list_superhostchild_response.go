/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListSuperhostchildResponse - struct for ListSuperhostchildResponse
type ListSuperhostchildResponse struct {
	ListSuperhostchildResponseObject *ListSuperhostchildResponseObject
	ArrayOfSuperhostchild            *[]Superhostchild
}

// ListSuperhostchildResponseObjectAsListSuperhostchildResponse is a convenience function that returns ListSuperhostchildResponseObject wrapped in ListSuperhostchildResponse
func ListSuperhostchildResponseObjectAsListSuperhostchildResponse(v *ListSuperhostchildResponseObject) ListSuperhostchildResponse {
	return ListSuperhostchildResponse{
		ListSuperhostchildResponseObject: v,
	}
}

// []SuperhostchildAsListSuperhostchildResponse is a convenience function that returns []Superhostchild wrapped in ListSuperhostchildResponse
func ArrayOfSuperhostchildAsListSuperhostchildResponse(v *[]Superhostchild) ListSuperhostchildResponse {
	return ListSuperhostchildResponse{
		ArrayOfSuperhostchild: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSuperhostchildResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSuperhostchildResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSuperhostchildResponseObject)
	if err == nil {
		jsonListSuperhostchildResponseObject, _ := json.Marshal(dst.ListSuperhostchildResponseObject)
		if string(jsonListSuperhostchildResponseObject) == "{}" { // empty struct
			dst.ListSuperhostchildResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSuperhostchildResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSuperhostchild
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSuperhostchild)
	if err == nil {
		jsonArrayOfSuperhostchild, _ := json.Marshal(dst.ArrayOfSuperhostchild)
		if string(jsonArrayOfSuperhostchild) == "{}" { // empty struct
			dst.ArrayOfSuperhostchild = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSuperhostchild = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSuperhostchildResponseObject = nil
		dst.ArrayOfSuperhostchild = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSuperhostchildResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSuperhostchildResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSuperhostchildResponse) MarshalJSON() ([]byte, error) {
	if src.ListSuperhostchildResponseObject != nil {
		return json.Marshal(&src.ListSuperhostchildResponseObject)
	}

	if src.ArrayOfSuperhostchild != nil {
		return json.Marshal(&src.ArrayOfSuperhostchild)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSuperhostchildResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSuperhostchildResponseObject != nil {
		return obj.ListSuperhostchildResponseObject
	}

	if obj.ArrayOfSuperhostchild != nil {
		return obj.ArrayOfSuperhostchild
	}

	// all schemas are nil
	return nil
}

type NullableListSuperhostchildResponse struct {
	value *ListSuperhostchildResponse
	isSet bool
}

func (v NullableListSuperhostchildResponse) Get() *ListSuperhostchildResponse {
	return v.value
}

func (v *NullableListSuperhostchildResponse) Set(val *ListSuperhostchildResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSuperhostchildResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSuperhostchildResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSuperhostchildResponse(val *ListSuperhostchildResponse) *NullableListSuperhostchildResponse {
	return &NullableListSuperhostchildResponse{value: val, isSet: true}
}

func (v NullableListSuperhostchildResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSuperhostchildResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
