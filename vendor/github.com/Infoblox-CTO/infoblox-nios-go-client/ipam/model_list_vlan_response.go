/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListVlanResponse - struct for ListVlanResponse
type ListVlanResponse struct {
	ListVlanResponseObject *ListVlanResponseObject
	ArrayOfVlan            *[]Vlan
}

// ListVlanResponseObjectAsListVlanResponse is a convenience function that returns ListVlanResponseObject wrapped in ListVlanResponse
func ListVlanResponseObjectAsListVlanResponse(v *ListVlanResponseObject) ListVlanResponse {
	return ListVlanResponse{
		ListVlanResponseObject: v,
	}
}

// []VlanAsListVlanResponse is a convenience function that returns []Vlan wrapped in ListVlanResponse
func ArrayOfVlanAsListVlanResponse(v *[]Vlan) ListVlanResponse {
	return ListVlanResponse{
		ArrayOfVlan: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListVlanResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListVlanResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListVlanResponseObject)
	if err == nil {
		jsonListVlanResponseObject, _ := json.Marshal(dst.ListVlanResponseObject)
		if string(jsonListVlanResponseObject) == "{}" { // empty struct
			dst.ListVlanResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListVlanResponseObject = nil
	}

	// try to unmarshal data into ArrayOfVlan
	err = newStrictDecoder(data).Decode(&dst.ArrayOfVlan)
	if err == nil {
		jsonArrayOfVlan, _ := json.Marshal(dst.ArrayOfVlan)
		if string(jsonArrayOfVlan) == "{}" { // empty struct
			dst.ArrayOfVlan = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfVlan = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListVlanResponseObject = nil
		dst.ArrayOfVlan = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListVlanResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListVlanResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListVlanResponse) MarshalJSON() ([]byte, error) {
	if src.ListVlanResponseObject != nil {
		return json.Marshal(&src.ListVlanResponseObject)
	}

	if src.ArrayOfVlan != nil {
		return json.Marshal(&src.ArrayOfVlan)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListVlanResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListVlanResponseObject != nil {
		return obj.ListVlanResponseObject
	}

	if obj.ArrayOfVlan != nil {
		return obj.ArrayOfVlan
	}

	// all schemas are nil
	return nil
}

type NullableListVlanResponse struct {
	value *ListVlanResponse
	isSet bool
}

func (v NullableListVlanResponse) Get() *ListVlanResponse {
	return v.value
}

func (v *NullableListVlanResponse) Set(val *ListVlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListVlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListVlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListVlanResponse(val *ListVlanResponse) *NullableListVlanResponse {
	return &NullableListVlanResponse{value: val, isSet: true}
}

func (v NullableListVlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListVlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
