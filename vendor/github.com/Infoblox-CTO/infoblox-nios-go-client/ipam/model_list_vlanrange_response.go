/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListVlanrangeResponse - struct for ListVlanrangeResponse
type ListVlanrangeResponse struct {
	ListVlanrangeResponseObject *ListVlanrangeResponseObject
	ArrayOfVlanrange            *[]Vlanrange
}

// ListVlanrangeResponseObjectAsListVlanrangeResponse is a convenience function that returns ListVlanrangeResponseObject wrapped in ListVlanrangeResponse
func ListVlanrangeResponseObjectAsListVlanrangeResponse(v *ListVlanrangeResponseObject) ListVlanrangeResponse {
	return ListVlanrangeResponse{
		ListVlanrangeResponseObject: v,
	}
}

// []VlanrangeAsListVlanrangeResponse is a convenience function that returns []Vlanrange wrapped in ListVlanrangeResponse
func ArrayOfVlanrangeAsListVlanrangeResponse(v *[]Vlanrange) ListVlanrangeResponse {
	return ListVlanrangeResponse{
		ArrayOfVlanrange: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListVlanrangeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListVlanrangeResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListVlanrangeResponseObject)
	if err == nil {
		jsonListVlanrangeResponseObject, _ := json.Marshal(dst.ListVlanrangeResponseObject)
		if string(jsonListVlanrangeResponseObject) == "{}" { // empty struct
			dst.ListVlanrangeResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListVlanrangeResponseObject = nil
	}

	// try to unmarshal data into ArrayOfVlanrange
	err = newStrictDecoder(data).Decode(&dst.ArrayOfVlanrange)
	if err == nil {
		jsonArrayOfVlanrange, _ := json.Marshal(dst.ArrayOfVlanrange)
		if string(jsonArrayOfVlanrange) == "{}" { // empty struct
			dst.ArrayOfVlanrange = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfVlanrange = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListVlanrangeResponseObject = nil
		dst.ArrayOfVlanrange = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListVlanrangeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListVlanrangeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListVlanrangeResponse) MarshalJSON() ([]byte, error) {
	if src.ListVlanrangeResponseObject != nil {
		return json.Marshal(&src.ListVlanrangeResponseObject)
	}

	if src.ArrayOfVlanrange != nil {
		return json.Marshal(&src.ArrayOfVlanrange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListVlanrangeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListVlanrangeResponseObject != nil {
		return obj.ListVlanrangeResponseObject
	}

	if obj.ArrayOfVlanrange != nil {
		return obj.ArrayOfVlanrange
	}

	// all schemas are nil
	return nil
}

type NullableListVlanrangeResponse struct {
	value *ListVlanrangeResponse
	isSet bool
}

func (v NullableListVlanrangeResponse) Get() *ListVlanrangeResponse {
	return v.value
}

func (v *NullableListVlanrangeResponse) Set(val *ListVlanrangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListVlanrangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListVlanrangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListVlanrangeResponse(val *ListVlanrangeResponse) *NullableListVlanrangeResponse {
	return &NullableListVlanrangeResponse{value: val, isSet: true}
}

func (v NullableListVlanrangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListVlanrangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
