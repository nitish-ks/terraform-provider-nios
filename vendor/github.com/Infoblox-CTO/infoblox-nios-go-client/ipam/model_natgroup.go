/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Natgroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Natgroup{}

// Natgroup struct for Natgroup
type Natgroup struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The NAT group descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// The name of a NAT group object.
	Name *string `json:"name,omitempty"`
}

// NewNatgroup instantiates a new Natgroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatgroup() *Natgroup {
	this := Natgroup{}
	return &this
}

// NewNatgroupWithDefaults instantiates a new Natgroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatgroupWithDefaults() *Natgroup {
	this := Natgroup{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Natgroup) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Natgroup) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Natgroup) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Natgroup) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Natgroup) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Natgroup) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Natgroup) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Natgroup) SetComment(v string) {
	o.Comment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Natgroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Natgroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Natgroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Natgroup) SetName(v string) {
	o.Name = &v
}

func (o Natgroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Natgroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableNatgroup struct {
	value *Natgroup
	isSet bool
}

func (v NullableNatgroup) Get() *Natgroup {
	return v.value
}

func (v *NullableNatgroup) Set(val *Natgroup) {
	v.value = val
	v.isSet = true
}

func (v NullableNatgroup) IsSet() bool {
	return v.isSet
}

func (v *NullableNatgroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatgroup(val *Natgroup) *NullableNatgroup {
	return &NullableNatgroup{value: val, isSet: true}
}

func (v NullableNatgroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatgroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
