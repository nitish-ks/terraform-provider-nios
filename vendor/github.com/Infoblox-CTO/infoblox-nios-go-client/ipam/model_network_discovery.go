/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the NetworkDiscovery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDiscovery{}

// NetworkDiscovery struct for NetworkDiscovery
type NetworkDiscovery struct {
	// The reference to the object.
	Ref                *string                `json:"_ref,omitempty"`
	ClearDiscoveryData map[string]interface{} `json:"clear_discovery_data,omitempty"`
}

// NewNetworkDiscovery instantiates a new NetworkDiscovery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDiscovery() *NetworkDiscovery {
	this := NetworkDiscovery{}
	return &this
}

// NewNetworkDiscoveryWithDefaults instantiates a new NetworkDiscovery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDiscoveryWithDefaults() *NetworkDiscovery {
	this := NetworkDiscovery{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *NetworkDiscovery) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscovery) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *NetworkDiscovery) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *NetworkDiscovery) SetRef(v string) {
	o.Ref = &v
}

// GetClearDiscoveryData returns the ClearDiscoveryData field value if set, zero value otherwise.
func (o *NetworkDiscovery) GetClearDiscoveryData() map[string]interface{} {
	if o == nil || IsNil(o.ClearDiscoveryData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ClearDiscoveryData
}

// GetClearDiscoveryDataOk returns a tuple with the ClearDiscoveryData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDiscovery) GetClearDiscoveryDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ClearDiscoveryData) {
		return map[string]interface{}{}, false
	}
	return o.ClearDiscoveryData, true
}

// HasClearDiscoveryData returns a boolean if a field has been set.
func (o *NetworkDiscovery) HasClearDiscoveryData() bool {
	if o != nil && !IsNil(o.ClearDiscoveryData) {
		return true
	}

	return false
}

// SetClearDiscoveryData gets a reference to the given map[string]interface{} and assigns it to the ClearDiscoveryData field.
func (o *NetworkDiscovery) SetClearDiscoveryData(v map[string]interface{}) {
	o.ClearDiscoveryData = v
}

func (o NetworkDiscovery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDiscovery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ClearDiscoveryData) {
		toSerialize["clear_discovery_data"] = o.ClearDiscoveryData
	}
	return toSerialize, nil
}

type NullableNetworkDiscovery struct {
	value *NetworkDiscovery
	isSet bool
}

func (v NullableNetworkDiscovery) Get() *NetworkDiscovery {
	return v.value
}

func (v *NullableNetworkDiscovery) Set(val *NetworkDiscovery) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDiscovery) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDiscovery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDiscovery(val *NetworkDiscovery) *NullableNetworkDiscovery {
	return &NullableNetworkDiscovery{value: val, isSet: true}
}

func (v NullableNetworkDiscovery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDiscovery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
