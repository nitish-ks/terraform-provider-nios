/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// NetworkNetwork - The network address in IPv4 Address/CIDR format. For regular expression searches, only the IPv4 Address portion is supported. Searches for the CIDR portion is always an exact match. For example, both network containers 10.0.0.0/8 and 20.1.0.0/16 are matched by expression '.0' and only 20.1.0.0/16 is matched by '.0/16'.
type NetworkNetwork struct {
	NetworkNetworkOneOf *NetworkNetworkOneOf
	String              *string
}

// NetworkNetworkOneOfAsNetworkNetwork is a convenience function that returns NetworkNetworkOneOf wrapped in NetworkNetwork
func NetworkNetworkOneOfAsNetworkNetwork(v *NetworkNetworkOneOf) NetworkNetwork {
	return NetworkNetwork{
		NetworkNetworkOneOf: v,
	}
}

// stringAsNetworkNetwork is a convenience function that returns string wrapped in NetworkNetwork
func StringAsNetworkNetwork(v *string) NetworkNetwork {
	return NetworkNetwork{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkNetwork) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NetworkNetworkOneOf
	err = newStrictDecoder(data).Decode(&dst.NetworkNetworkOneOf)
	if err == nil {
		jsonNetworkNetworkOneOf, _ := json.Marshal(dst.NetworkNetworkOneOf)
		if string(jsonNetworkNetworkOneOf) == "{}" { // empty struct
			dst.NetworkNetworkOneOf = nil
		} else {
			match++
		}
	} else {
		dst.NetworkNetworkOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NetworkNetworkOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NetworkNetwork)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NetworkNetwork)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkNetwork) MarshalJSON() ([]byte, error) {
	if src.NetworkNetworkOneOf != nil {
		return json.Marshal(&src.NetworkNetworkOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkNetwork) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NetworkNetworkOneOf != nil {
		return obj.NetworkNetworkOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableNetworkNetwork struct {
	value *NetworkNetwork
	isSet bool
}

func (v NullableNetworkNetwork) Get() *NetworkNetwork {
	return v.value
}

func (v *NullableNetworkNetwork) Set(val *NetworkNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkNetwork(val *NetworkNetwork) *NullableNetworkNetwork {
	return &NullableNetworkNetwork{value: val, isSet: true}
}

func (v NullableNetworkNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
