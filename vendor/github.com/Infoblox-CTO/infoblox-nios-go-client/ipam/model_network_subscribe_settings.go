/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the NetworkSubscribeSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkSubscribeSettings{}

// NetworkSubscribeSettings struct for NetworkSubscribeSettings
type NetworkSubscribeSettings struct {
	// The list of Cisco ISE attributes allowed for subscription.
	EnabledAttributes []string `json:"enabled_attributes,omitempty"`
	// The list of NIOS extensible attributes to Cisco ISE attributes mappings.
	MappedEaAttributes   []NetworksubscribesettingsMappedEaAttributes `json:"mapped_ea_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkSubscribeSettings NetworkSubscribeSettings

// NewNetworkSubscribeSettings instantiates a new NetworkSubscribeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkSubscribeSettings() *NetworkSubscribeSettings {
	this := NetworkSubscribeSettings{}
	return &this
}

// NewNetworkSubscribeSettingsWithDefaults instantiates a new NetworkSubscribeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkSubscribeSettingsWithDefaults() *NetworkSubscribeSettings {
	this := NetworkSubscribeSettings{}
	return &this
}

// GetEnabledAttributes returns the EnabledAttributes field value if set, zero value otherwise.
func (o *NetworkSubscribeSettings) GetEnabledAttributes() []string {
	if o == nil || IsNil(o.EnabledAttributes) {
		var ret []string
		return ret
	}
	return o.EnabledAttributes
}

// GetEnabledAttributesOk returns a tuple with the EnabledAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSubscribeSettings) GetEnabledAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledAttributes) {
		return nil, false
	}
	return o.EnabledAttributes, true
}

// HasEnabledAttributes returns a boolean if a field has been set.
func (o *NetworkSubscribeSettings) HasEnabledAttributes() bool {
	if o != nil && !IsNil(o.EnabledAttributes) {
		return true
	}

	return false
}

// SetEnabledAttributes gets a reference to the given []string and assigns it to the EnabledAttributes field.
func (o *NetworkSubscribeSettings) SetEnabledAttributes(v []string) {
	o.EnabledAttributes = v
}

// GetMappedEaAttributes returns the MappedEaAttributes field value if set, zero value otherwise.
func (o *NetworkSubscribeSettings) GetMappedEaAttributes() []NetworksubscribesettingsMappedEaAttributes {
	if o == nil || IsNil(o.MappedEaAttributes) {
		var ret []NetworksubscribesettingsMappedEaAttributes
		return ret
	}
	return o.MappedEaAttributes
}

// GetMappedEaAttributesOk returns a tuple with the MappedEaAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkSubscribeSettings) GetMappedEaAttributesOk() ([]NetworksubscribesettingsMappedEaAttributes, bool) {
	if o == nil || IsNil(o.MappedEaAttributes) {
		return nil, false
	}
	return o.MappedEaAttributes, true
}

// HasMappedEaAttributes returns a boolean if a field has been set.
func (o *NetworkSubscribeSettings) HasMappedEaAttributes() bool {
	if o != nil && !IsNil(o.MappedEaAttributes) {
		return true
	}

	return false
}

// SetMappedEaAttributes gets a reference to the given []NetworksubscribesettingsMappedEaAttributes and assigns it to the MappedEaAttributes field.
func (o *NetworkSubscribeSettings) SetMappedEaAttributes(v []NetworksubscribesettingsMappedEaAttributes) {
	o.MappedEaAttributes = v
}

func (o NetworkSubscribeSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkSubscribeSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnabledAttributes) {
		toSerialize["enabled_attributes"] = o.EnabledAttributes
	}
	if !IsNil(o.MappedEaAttributes) {
		toSerialize["mapped_ea_attributes"] = o.MappedEaAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkSubscribeSettings) UnmarshalJSON(data []byte) (err error) {
	varNetworkSubscribeSettings := _NetworkSubscribeSettings{}

	err = json.Unmarshal(data, &varNetworkSubscribeSettings)

	if err != nil {
		return err
	}

	*o = NetworkSubscribeSettings(varNetworkSubscribeSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled_attributes")
		delete(additionalProperties, "mapped_ea_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkSubscribeSettings struct {
	value *NetworkSubscribeSettings
	isSet bool
}

func (v NullableNetworkSubscribeSettings) Get() *NetworkSubscribeSettings {
	return v.value
}

func (v *NullableNetworkSubscribeSettings) Set(val *NetworkSubscribeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkSubscribeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkSubscribeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkSubscribeSettings(val *NetworkSubscribeSettings) *NullableNetworkSubscribeSettings {
	return &NullableNetworkSubscribeSettings{value: val, isSet: true}
}

func (v NullableNetworkSubscribeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkSubscribeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
