/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Networkcontainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Networkcontainer{}

// Networkcontainer struct for Networkcontainer
type Networkcontainer struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Authority for the DHCP network container.
	Authority *bool `json:"authority,omitempty"`
	// This flag controls whether reverse zones are automatically created when the network is added.
	AutoCreateReversezone *bool `json:"auto_create_reversezone,omitempty"`
	// The boot server IPv4 Address or name in FQDN format for the network container. You can specify the name and/or IP address of the boot server that the host needs to boot.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the network container. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string                    `json:"bootserver,omitempty"`
	CloudInfo  *NetworkcontainerCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the network container; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this network container.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether the DHCP server is allowed to update DNS, regardless of the DHCP client requests. Note that changes for this field take effect only if ddns_use_option81 is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a DHCP network container object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// By default, the DHCP server does not update DNS when it allocates a fixed address to a client. You can configure the DHCP server to update the A and PTR records of a client with a fixed address. When this feature is enabled and the DHCP server adds A and PTR records for a fixed address, the DHCP server never discards the records.
	DdnsUpdateFixedAddresses *bool `json:"ddns_update_fixed_addresses,omitempty"`
	// The support for DHCP Option 81 at the network container level.
	DdnsUseOption81 *bool `json:"ddns_use_option81,omitempty"`
	// The reason for deleting the RIR registration request.
	DeleteReason *string `json:"delete_reason,omitempty"`
	// If set to True, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// Discover now status for this network container.
	DiscoverNowStatus          *string                                     `json:"discover_now_status,omitempty"`
	DiscoveryBasicPollSettings *NetworkcontainerDiscoveryBasicPollSettings `json:"discovery_basic_poll_settings,omitempty"`
	DiscoveryBlackoutSetting   *NetworkcontainerDiscoveryBlackoutSetting   `json:"discovery_blackout_setting,omitempty"`
	// The network discovery engine type.
	DiscoveryEngineType *string `json:"discovery_engine_type,omitempty"`
	// The member that will run discovery for this network container.
	DiscoveryMember *string `json:"discovery_member,omitempty"`
	// The e-mail lists to which the appliance sends DHCP threshold alarm e-mail messages.
	EmailList []string `json:"email_list,omitempty"`
	// The dynamic DNS updates flag of a DHCP network container object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if DHCP thresholds are enabled for the network container.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines whether a discovery is enabled or not for this network container. When this is set to False, the network container discovery is disabled.
	EnableDiscovery *bool `json:"enable_discovery,omitempty"`
	// Determines if DHCP threshold warnings are sent through email.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Determines if the discovery for the network container should be immediately enabled.
	EnableImmediateDiscovery *bool `json:"enable_immediate_discovery,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Determines if DHCP threshold warnings are send through SNMP.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// The endpoints that provides data for the DHCP Network Container object.
	EndpointSources []string `json:"endpoint_sources,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// This field contains the federated realms associated to this network container.
	FederatedRealms []NetworkcontainerFederatedRealms `json:"federated_realms,omitempty"`
	// The percentage of DHCP network container usage threshold above which network container usage is not expected and may warrant your attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// The percentage of DHCP network container usage below which the corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// Indicates whether the appliance will ignore DHCP client IDs or MAC addresses.
	IgnoreId *string `json:"ignore_id,omitempty"`
	// A list of MAC addresses the appliance will ignore.
	IgnoreMacAddresses []string `json:"ignore_mac_addresses,omitempty"`
	// The e-mail lists to which the appliance sends IPAM threshold alarm e-mail messages.
	IpamEmailAddresses    []string                               `json:"ipam_email_addresses,omitempty"`
	IpamThresholdSettings *NetworkcontainerIpamThresholdSettings `json:"ipam_threshold_settings,omitempty"`
	IpamTrapSettings      *NetworkcontainerIpamTrapSettings      `json:"ipam_trap_settings,omitempty"`
	// The timestamp when the last RIR registration update was sent.
	LastRirRegistrationUpdateSent *int64 `json:"last_rir_registration_update_sent,omitempty"`
	// Last RIR registration update status.
	LastRirRegistrationUpdateStatus *string `json:"last_rir_registration_update_status,omitempty"`
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *int64 `json:"lease_scavenge_time,omitempty"`
	// This field contains the logic filters to be applied on the this network container. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []NetworkcontainerLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The percentage of DHCP network container usage below which the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// The percentage of DHCP network container usage threshold below which network container usage is not expected and may warrant your attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// This field controls whether this object is synchronized with the Multi-Grid Master. If this field is set to True, objects are not synchronized.
	MgmPrivate *bool `json:"mgm_private,omitempty"`
	// This field is assumed to be True unless filled by any conforming objects, such as Network, IPv6 Network, Network Container, IPv6 Network Container, and Network View. This value is set to False if mgm_private is set to True in the parent object.
	MgmPrivateOverridable *bool                         `json:"mgm_private_overridable,omitempty"`
	MsAdUserData          *NetworkcontainerMsAdUserData `json:"ms_ad_user_data,omitempty"`
	Network               *NetworkcontainerNetwork      `json:"network,omitempty"`
	FuncCall              *FuncCall                     `json:"func_call,omitempty"`
	// The network container to which this network belongs, if any.
	NetworkContainer *string `json:"network_container,omitempty"`
	// The name of the network view in which this network resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The name in FQDN and/or IPv4 Address of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options                    []NetworkcontainerOptions                   `json:"options,omitempty"`
	PortControlBlackoutSetting *NetworkcontainerPortControlBlackoutSetting `json:"port_control_blackout_setting,omitempty"`
	// The PXE lease time value of a DHCP Network container object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// Remove subnets delete option. Determines whether all child objects should be removed alongside with the network container or child objects should be assigned to another parental container. By default child objects are deleted with the network container.
	RemoveSubnets *bool `json:"remove_subnets,omitempty"`
	// Restarts the member service.
	RestartIfNeeded *bool `json:"restart_if_needed,omitempty"`
	// The registry (RIR) that allocated the network container address space.
	Rir *string `json:"rir,omitempty"`
	// The RIR organization assoicated with the network container.
	RirOrganization *string `json:"rir_organization,omitempty"`
	// The RIR registration action.
	RirRegistrationAction *string `json:"rir_registration_action,omitempty"`
	// The registration status of the network container in RIR.
	RirRegistrationStatus *string `json:"rir_registration_status,omitempty"`
	// If the field is set to True, the discovery blackout setting will be used for port control blackout setting.
	SamePortControlDiscoveryBlackout *bool `json:"same_port_control_discovery_blackout,omitempty"`
	// Determines whether to send the RIR registration request.
	SendRirRequest    *bool                              `json:"send_rir_request,omitempty"`
	SubscribeSettings *NetworkcontainerSubscribeSettings `json:"subscribe_settings,omitempty"`
	// Determines whether the network container is unmanaged or not.
	Unmanaged *bool `json:"unmanaged,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: authority
	UseAuthority *bool `json:"use_authority,omitempty"`
	// Use flag for: discovery_blackout_setting , port_control_blackout_setting, same_port_control_discovery_blackout
	UseBlackoutSetting *bool `json:"use_blackout_setting,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: ddns_update_fixed_addresses
	UseDdnsUpdateFixedAddresses *bool `json:"use_ddns_update_fixed_addresses,omitempty"`
	// Use flag for: ddns_use_option81
	UseDdnsUseOption81 *bool `json:"use_ddns_use_option81,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: discovery_basic_poll_settings
	UseDiscoveryBasicPollingSettings *bool `json:"use_discovery_basic_polling_settings,omitempty"`
	// Use flag for: email_list
	UseEmailList *bool `json:"use_email_list,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: enable_dhcp_thresholds
	UseEnableDhcpThresholds *bool `json:"use_enable_dhcp_thresholds,omitempty"`
	// Use flag for: discovery_member , enable_discovery
	UseEnableDiscovery *bool `json:"use_enable_discovery,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ignore_id
	UseIgnoreId *bool `json:"use_ignore_id,omitempty"`
	// Use flag for: ipam_email_addresses
	UseIpamEmailAddresses *bool `json:"use_ipam_email_addresses,omitempty"`
	// Use flag for: ipam_threshold_settings
	UseIpamThresholdSettings *bool `json:"use_ipam_threshold_settings,omitempty"`
	// Use flag for: ipam_trap_settings
	UseIpamTrapSettings *bool `json:"use_ipam_trap_settings,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: mgm_private
	UseMgmPrivate *bool `json:"use_mgm_private,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: subscribe_settings
	UseSubscribeSettings *bool `json:"use_subscribe_settings,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: zone_associations
	UseZoneAssociations *bool `json:"use_zone_associations,omitempty"`
	// The network container utilization in percentage.
	Utilization *int64 `json:"utilization,omitempty"`
	// The list of zones associated with this network.
	ZoneAssociations []NetworkcontainerZoneAssociations `json:"zone_associations,omitempty"`
}

// NewNetworkcontainer instantiates a new Networkcontainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkcontainer() *Networkcontainer {
	this := Networkcontainer{}
	return &this
}

// NewNetworkcontainerWithDefaults instantiates a new Networkcontainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkcontainerWithDefaults() *Networkcontainer {
	this := Networkcontainer{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Networkcontainer) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Networkcontainer) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Networkcontainer) SetRef(v string) {
	o.Ref = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Networkcontainer) GetAuthority() bool {
	if o == nil || IsNil(o.Authority) {
		var ret bool
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *Networkcontainer) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given bool and assigns it to the Authority field.
func (o *Networkcontainer) SetAuthority(v bool) {
	o.Authority = &v
}

// GetAutoCreateReversezone returns the AutoCreateReversezone field value if set, zero value otherwise.
func (o *Networkcontainer) GetAutoCreateReversezone() bool {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		var ret bool
		return ret
	}
	return *o.AutoCreateReversezone
}

// GetAutoCreateReversezoneOk returns a tuple with the AutoCreateReversezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetAutoCreateReversezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		return nil, false
	}
	return o.AutoCreateReversezone, true
}

// HasAutoCreateReversezone returns a boolean if a field has been set.
func (o *Networkcontainer) HasAutoCreateReversezone() bool {
	if o != nil && !IsNil(o.AutoCreateReversezone) {
		return true
	}

	return false
}

// SetAutoCreateReversezone gets a reference to the given bool and assigns it to the AutoCreateReversezone field.
func (o *Networkcontainer) SetAutoCreateReversezone(v bool) {
	o.AutoCreateReversezone = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Networkcontainer) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Networkcontainer) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Networkcontainer) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Networkcontainer) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Networkcontainer) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Networkcontainer) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Networkcontainer) GetCloudInfo() NetworkcontainerCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret NetworkcontainerCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetCloudInfoOk() (*NetworkcontainerCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Networkcontainer) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given NetworkcontainerCloudInfo and assigns it to the CloudInfo field.
func (o *Networkcontainer) SetCloudInfo(v NetworkcontainerCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Networkcontainer) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Networkcontainer) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Networkcontainer) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Networkcontainer) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Networkcontainer) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Networkcontainer) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Networkcontainer) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDdnsUpdateFixedAddresses returns the DdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateFixedAddresses
}

// GetDdnsUpdateFixedAddressesOk returns a tuple with the DdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.DdnsUpdateFixedAddresses, true
}

// HasDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.DdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the DdnsUpdateFixedAddresses field.
func (o *Networkcontainer) SetDdnsUpdateFixedAddresses(v bool) {
	o.DdnsUpdateFixedAddresses = &v
}

// GetDdnsUseOption81 returns the DdnsUseOption81 field value if set, zero value otherwise.
func (o *Networkcontainer) GetDdnsUseOption81() bool {
	if o == nil || IsNil(o.DdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.DdnsUseOption81
}

// GetDdnsUseOption81Ok returns a tuple with the DdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseOption81) {
		return nil, false
	}
	return o.DdnsUseOption81, true
}

// HasDdnsUseOption81 returns a boolean if a field has been set.
func (o *Networkcontainer) HasDdnsUseOption81() bool {
	if o != nil && !IsNil(o.DdnsUseOption81) {
		return true
	}

	return false
}

// SetDdnsUseOption81 gets a reference to the given bool and assigns it to the DdnsUseOption81 field.
func (o *Networkcontainer) SetDdnsUseOption81(v bool) {
	o.DdnsUseOption81 = &v
}

// GetDeleteReason returns the DeleteReason field value if set, zero value otherwise.
func (o *Networkcontainer) GetDeleteReason() string {
	if o == nil || IsNil(o.DeleteReason) {
		var ret string
		return ret
	}
	return *o.DeleteReason
}

// GetDeleteReasonOk returns a tuple with the DeleteReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDeleteReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeleteReason) {
		return nil, false
	}
	return o.DeleteReason, true
}

// HasDeleteReason returns a boolean if a field has been set.
func (o *Networkcontainer) HasDeleteReason() bool {
	if o != nil && !IsNil(o.DeleteReason) {
		return true
	}

	return false
}

// SetDeleteReason gets a reference to the given string and assigns it to the DeleteReason field.
func (o *Networkcontainer) SetDeleteReason(v string) {
	o.DeleteReason = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Networkcontainer) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Networkcontainer) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Networkcontainer) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *Networkcontainer) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *Networkcontainer) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *Networkcontainer) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveryBasicPollSettings returns the DiscoveryBasicPollSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetDiscoveryBasicPollSettings() NetworkcontainerDiscoveryBasicPollSettings {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		var ret NetworkcontainerDiscoveryBasicPollSettings
		return ret
	}
	return *o.DiscoveryBasicPollSettings
}

// GetDiscoveryBasicPollSettingsOk returns a tuple with the DiscoveryBasicPollSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDiscoveryBasicPollSettingsOk() (*NetworkcontainerDiscoveryBasicPollSettings, bool) {
	if o == nil || IsNil(o.DiscoveryBasicPollSettings) {
		return nil, false
	}
	return o.DiscoveryBasicPollSettings, true
}

// HasDiscoveryBasicPollSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasDiscoveryBasicPollSettings() bool {
	if o != nil && !IsNil(o.DiscoveryBasicPollSettings) {
		return true
	}

	return false
}

// SetDiscoveryBasicPollSettings gets a reference to the given NetworkcontainerDiscoveryBasicPollSettings and assigns it to the DiscoveryBasicPollSettings field.
func (o *Networkcontainer) SetDiscoveryBasicPollSettings(v NetworkcontainerDiscoveryBasicPollSettings) {
	o.DiscoveryBasicPollSettings = &v
}

// GetDiscoveryBlackoutSetting returns the DiscoveryBlackoutSetting field value if set, zero value otherwise.
func (o *Networkcontainer) GetDiscoveryBlackoutSetting() NetworkcontainerDiscoveryBlackoutSetting {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		var ret NetworkcontainerDiscoveryBlackoutSetting
		return ret
	}
	return *o.DiscoveryBlackoutSetting
}

// GetDiscoveryBlackoutSettingOk returns a tuple with the DiscoveryBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDiscoveryBlackoutSettingOk() (*NetworkcontainerDiscoveryBlackoutSetting, bool) {
	if o == nil || IsNil(o.DiscoveryBlackoutSetting) {
		return nil, false
	}
	return o.DiscoveryBlackoutSetting, true
}

// HasDiscoveryBlackoutSetting returns a boolean if a field has been set.
func (o *Networkcontainer) HasDiscoveryBlackoutSetting() bool {
	if o != nil && !IsNil(o.DiscoveryBlackoutSetting) {
		return true
	}

	return false
}

// SetDiscoveryBlackoutSetting gets a reference to the given NetworkcontainerDiscoveryBlackoutSetting and assigns it to the DiscoveryBlackoutSetting field.
func (o *Networkcontainer) SetDiscoveryBlackoutSetting(v NetworkcontainerDiscoveryBlackoutSetting) {
	o.DiscoveryBlackoutSetting = &v
}

// GetDiscoveryEngineType returns the DiscoveryEngineType field value if set, zero value otherwise.
func (o *Networkcontainer) GetDiscoveryEngineType() string {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		var ret string
		return ret
	}
	return *o.DiscoveryEngineType
}

// GetDiscoveryEngineTypeOk returns a tuple with the DiscoveryEngineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDiscoveryEngineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryEngineType) {
		return nil, false
	}
	return o.DiscoveryEngineType, true
}

// HasDiscoveryEngineType returns a boolean if a field has been set.
func (o *Networkcontainer) HasDiscoveryEngineType() bool {
	if o != nil && !IsNil(o.DiscoveryEngineType) {
		return true
	}

	return false
}

// SetDiscoveryEngineType gets a reference to the given string and assigns it to the DiscoveryEngineType field.
func (o *Networkcontainer) SetDiscoveryEngineType(v string) {
	o.DiscoveryEngineType = &v
}

// GetDiscoveryMember returns the DiscoveryMember field value if set, zero value otherwise.
func (o *Networkcontainer) GetDiscoveryMember() string {
	if o == nil || IsNil(o.DiscoveryMember) {
		var ret string
		return ret
	}
	return *o.DiscoveryMember
}

// GetDiscoveryMemberOk returns a tuple with the DiscoveryMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetDiscoveryMemberOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMember) {
		return nil, false
	}
	return o.DiscoveryMember, true
}

// HasDiscoveryMember returns a boolean if a field has been set.
func (o *Networkcontainer) HasDiscoveryMember() bool {
	if o != nil && !IsNil(o.DiscoveryMember) {
		return true
	}

	return false
}

// SetDiscoveryMember gets a reference to the given string and assigns it to the DiscoveryMember field.
func (o *Networkcontainer) SetDiscoveryMember(v string) {
	o.DiscoveryMember = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *Networkcontainer) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *Networkcontainer) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *Networkcontainer) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Networkcontainer) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *Networkcontainer) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableDiscovery returns the EnableDiscovery field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableDiscovery() bool {
	if o == nil || IsNil(o.EnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableDiscovery
}

// GetEnableDiscoveryOk returns a tuple with the EnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDiscovery) {
		return nil, false
	}
	return o.EnableDiscovery, true
}

// HasEnableDiscovery returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableDiscovery() bool {
	if o != nil && !IsNil(o.EnableDiscovery) {
		return true
	}

	return false
}

// SetEnableDiscovery gets a reference to the given bool and assigns it to the EnableDiscovery field.
func (o *Networkcontainer) SetEnableDiscovery(v bool) {
	o.EnableDiscovery = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *Networkcontainer) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnableImmediateDiscovery returns the EnableImmediateDiscovery field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableImmediateDiscovery() bool {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		var ret bool
		return ret
	}
	return *o.EnableImmediateDiscovery
}

// GetEnableImmediateDiscoveryOk returns a tuple with the EnableImmediateDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableImmediateDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableImmediateDiscovery) {
		return nil, false
	}
	return o.EnableImmediateDiscovery, true
}

// HasEnableImmediateDiscovery returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableImmediateDiscovery() bool {
	if o != nil && !IsNil(o.EnableImmediateDiscovery) {
		return true
	}

	return false
}

// SetEnableImmediateDiscovery gets a reference to the given bool and assigns it to the EnableImmediateDiscovery field.
func (o *Networkcontainer) SetEnableImmediateDiscovery(v bool) {
	o.EnableImmediateDiscovery = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Networkcontainer) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *Networkcontainer) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *Networkcontainer) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *Networkcontainer) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetEndpointSources returns the EndpointSources field value if set, zero value otherwise.
func (o *Networkcontainer) GetEndpointSources() []string {
	if o == nil || IsNil(o.EndpointSources) {
		var ret []string
		return ret
	}
	return o.EndpointSources
}

// GetEndpointSourcesOk returns a tuple with the EndpointSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetEndpointSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.EndpointSources) {
		return nil, false
	}
	return o.EndpointSources, true
}

// HasEndpointSources returns a boolean if a field has been set.
func (o *Networkcontainer) HasEndpointSources() bool {
	if o != nil && !IsNil(o.EndpointSources) {
		return true
	}

	return false
}

// SetEndpointSources gets a reference to the given []string and assigns it to the EndpointSources field.
func (o *Networkcontainer) SetEndpointSources(v []string) {
	o.EndpointSources = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Networkcontainer) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Networkcontainer) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Networkcontainer) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *Networkcontainer) GetFederatedRealms() []NetworkcontainerFederatedRealms {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []NetworkcontainerFederatedRealms
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetFederatedRealmsOk() ([]NetworkcontainerFederatedRealms, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *Networkcontainer) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []NetworkcontainerFederatedRealms and assigns it to the FederatedRealms field.
func (o *Networkcontainer) SetFederatedRealms(v []NetworkcontainerFederatedRealms) {
	o.FederatedRealms = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *Networkcontainer) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *Networkcontainer) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *Networkcontainer) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *Networkcontainer) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *Networkcontainer) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *Networkcontainer) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Networkcontainer) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Networkcontainer) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Networkcontainer) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIgnoreId returns the IgnoreId field value if set, zero value otherwise.
func (o *Networkcontainer) GetIgnoreId() string {
	if o == nil || IsNil(o.IgnoreId) {
		var ret string
		return ret
	}
	return *o.IgnoreId
}

// GetIgnoreIdOk returns a tuple with the IgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIgnoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreId) {
		return nil, false
	}
	return o.IgnoreId, true
}

// HasIgnoreId returns a boolean if a field has been set.
func (o *Networkcontainer) HasIgnoreId() bool {
	if o != nil && !IsNil(o.IgnoreId) {
		return true
	}

	return false
}

// SetIgnoreId gets a reference to the given string and assigns it to the IgnoreId field.
func (o *Networkcontainer) SetIgnoreId(v string) {
	o.IgnoreId = &v
}

// GetIgnoreMacAddresses returns the IgnoreMacAddresses field value if set, zero value otherwise.
func (o *Networkcontainer) GetIgnoreMacAddresses() []string {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		var ret []string
		return ret
	}
	return o.IgnoreMacAddresses
}

// GetIgnoreMacAddressesOk returns a tuple with the IgnoreMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIgnoreMacAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreMacAddresses) {
		return nil, false
	}
	return o.IgnoreMacAddresses, true
}

// HasIgnoreMacAddresses returns a boolean if a field has been set.
func (o *Networkcontainer) HasIgnoreMacAddresses() bool {
	if o != nil && !IsNil(o.IgnoreMacAddresses) {
		return true
	}

	return false
}

// SetIgnoreMacAddresses gets a reference to the given []string and assigns it to the IgnoreMacAddresses field.
func (o *Networkcontainer) SetIgnoreMacAddresses(v []string) {
	o.IgnoreMacAddresses = v
}

// GetIpamEmailAddresses returns the IpamEmailAddresses field value if set, zero value otherwise.
func (o *Networkcontainer) GetIpamEmailAddresses() []string {
	if o == nil || IsNil(o.IpamEmailAddresses) {
		var ret []string
		return ret
	}
	return o.IpamEmailAddresses
}

// GetIpamEmailAddressesOk returns a tuple with the IpamEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIpamEmailAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpamEmailAddresses) {
		return nil, false
	}
	return o.IpamEmailAddresses, true
}

// HasIpamEmailAddresses returns a boolean if a field has been set.
func (o *Networkcontainer) HasIpamEmailAddresses() bool {
	if o != nil && !IsNil(o.IpamEmailAddresses) {
		return true
	}

	return false
}

// SetIpamEmailAddresses gets a reference to the given []string and assigns it to the IpamEmailAddresses field.
func (o *Networkcontainer) SetIpamEmailAddresses(v []string) {
	o.IpamEmailAddresses = v
}

// GetIpamThresholdSettings returns the IpamThresholdSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetIpamThresholdSettings() NetworkcontainerIpamThresholdSettings {
	if o == nil || IsNil(o.IpamThresholdSettings) {
		var ret NetworkcontainerIpamThresholdSettings
		return ret
	}
	return *o.IpamThresholdSettings
}

// GetIpamThresholdSettingsOk returns a tuple with the IpamThresholdSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIpamThresholdSettingsOk() (*NetworkcontainerIpamThresholdSettings, bool) {
	if o == nil || IsNil(o.IpamThresholdSettings) {
		return nil, false
	}
	return o.IpamThresholdSettings, true
}

// HasIpamThresholdSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasIpamThresholdSettings() bool {
	if o != nil && !IsNil(o.IpamThresholdSettings) {
		return true
	}

	return false
}

// SetIpamThresholdSettings gets a reference to the given NetworkcontainerIpamThresholdSettings and assigns it to the IpamThresholdSettings field.
func (o *Networkcontainer) SetIpamThresholdSettings(v NetworkcontainerIpamThresholdSettings) {
	o.IpamThresholdSettings = &v
}

// GetIpamTrapSettings returns the IpamTrapSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetIpamTrapSettings() NetworkcontainerIpamTrapSettings {
	if o == nil || IsNil(o.IpamTrapSettings) {
		var ret NetworkcontainerIpamTrapSettings
		return ret
	}
	return *o.IpamTrapSettings
}

// GetIpamTrapSettingsOk returns a tuple with the IpamTrapSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetIpamTrapSettingsOk() (*NetworkcontainerIpamTrapSettings, bool) {
	if o == nil || IsNil(o.IpamTrapSettings) {
		return nil, false
	}
	return o.IpamTrapSettings, true
}

// HasIpamTrapSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasIpamTrapSettings() bool {
	if o != nil && !IsNil(o.IpamTrapSettings) {
		return true
	}

	return false
}

// SetIpamTrapSettings gets a reference to the given NetworkcontainerIpamTrapSettings and assigns it to the IpamTrapSettings field.
func (o *Networkcontainer) SetIpamTrapSettings(v NetworkcontainerIpamTrapSettings) {
	o.IpamTrapSettings = &v
}

// GetLastRirRegistrationUpdateSent returns the LastRirRegistrationUpdateSent field value if set, zero value otherwise.
func (o *Networkcontainer) GetLastRirRegistrationUpdateSent() int64 {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		var ret int64
		return ret
	}
	return *o.LastRirRegistrationUpdateSent
}

// GetLastRirRegistrationUpdateSentOk returns a tuple with the LastRirRegistrationUpdateSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLastRirRegistrationUpdateSentOk() (*int64, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateSent) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateSent, true
}

// HasLastRirRegistrationUpdateSent returns a boolean if a field has been set.
func (o *Networkcontainer) HasLastRirRegistrationUpdateSent() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateSent) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateSent gets a reference to the given int64 and assigns it to the LastRirRegistrationUpdateSent field.
func (o *Networkcontainer) SetLastRirRegistrationUpdateSent(v int64) {
	o.LastRirRegistrationUpdateSent = &v
}

// GetLastRirRegistrationUpdateStatus returns the LastRirRegistrationUpdateStatus field value if set, zero value otherwise.
func (o *Networkcontainer) GetLastRirRegistrationUpdateStatus() string {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		var ret string
		return ret
	}
	return *o.LastRirRegistrationUpdateStatus
}

// GetLastRirRegistrationUpdateStatusOk returns a tuple with the LastRirRegistrationUpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLastRirRegistrationUpdateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastRirRegistrationUpdateStatus) {
		return nil, false
	}
	return o.LastRirRegistrationUpdateStatus, true
}

// HasLastRirRegistrationUpdateStatus returns a boolean if a field has been set.
func (o *Networkcontainer) HasLastRirRegistrationUpdateStatus() bool {
	if o != nil && !IsNil(o.LastRirRegistrationUpdateStatus) {
		return true
	}

	return false
}

// SetLastRirRegistrationUpdateStatus gets a reference to the given string and assigns it to the LastRirRegistrationUpdateStatus field.
func (o *Networkcontainer) SetLastRirRegistrationUpdateStatus(v string) {
	o.LastRirRegistrationUpdateStatus = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *Networkcontainer) GetLeaseScavengeTime() int64 {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret int64
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLeaseScavengeTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *Networkcontainer) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given int64 and assigns it to the LeaseScavengeTime field.
func (o *Networkcontainer) SetLeaseScavengeTime(v int64) {
	o.LeaseScavengeTime = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Networkcontainer) GetLogicFilterRules() []NetworkcontainerLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []NetworkcontainerLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLogicFilterRulesOk() ([]NetworkcontainerLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Networkcontainer) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []NetworkcontainerLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Networkcontainer) SetLogicFilterRules(v []NetworkcontainerLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *Networkcontainer) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *Networkcontainer) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *Networkcontainer) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *Networkcontainer) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *Networkcontainer) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *Networkcontainer) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMgmPrivate returns the MgmPrivate field value if set, zero value otherwise.
func (o *Networkcontainer) GetMgmPrivate() bool {
	if o == nil || IsNil(o.MgmPrivate) {
		var ret bool
		return ret
	}
	return *o.MgmPrivate
}

// GetMgmPrivateOk returns a tuple with the MgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivate) {
		return nil, false
	}
	return o.MgmPrivate, true
}

// HasMgmPrivate returns a boolean if a field has been set.
func (o *Networkcontainer) HasMgmPrivate() bool {
	if o != nil && !IsNil(o.MgmPrivate) {
		return true
	}

	return false
}

// SetMgmPrivate gets a reference to the given bool and assigns it to the MgmPrivate field.
func (o *Networkcontainer) SetMgmPrivate(v bool) {
	o.MgmPrivate = &v
}

// GetMgmPrivateOverridable returns the MgmPrivateOverridable field value if set, zero value otherwise.
func (o *Networkcontainer) GetMgmPrivateOverridable() bool {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		var ret bool
		return ret
	}
	return *o.MgmPrivateOverridable
}

// GetMgmPrivateOverridableOk returns a tuple with the MgmPrivateOverridable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetMgmPrivateOverridableOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivateOverridable) {
		return nil, false
	}
	return o.MgmPrivateOverridable, true
}

// HasMgmPrivateOverridable returns a boolean if a field has been set.
func (o *Networkcontainer) HasMgmPrivateOverridable() bool {
	if o != nil && !IsNil(o.MgmPrivateOverridable) {
		return true
	}

	return false
}

// SetMgmPrivateOverridable gets a reference to the given bool and assigns it to the MgmPrivateOverridable field.
func (o *Networkcontainer) SetMgmPrivateOverridable(v bool) {
	o.MgmPrivateOverridable = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Networkcontainer) GetMsAdUserData() NetworkcontainerMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret NetworkcontainerMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetMsAdUserDataOk() (*NetworkcontainerMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Networkcontainer) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given NetworkcontainerMsAdUserData and assigns it to the MsAdUserData field.
func (o *Networkcontainer) SetMsAdUserData(v NetworkcontainerMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Networkcontainer) GetNetwork() NetworkcontainerNetwork {
	if o == nil || IsNil(o.Network) {
		var ret NetworkcontainerNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetNetworkOk() (*NetworkcontainerNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Networkcontainer) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given NetworkcontainerNetwork and assigns it to the Network field.
func (o *Networkcontainer) SetNetwork(v NetworkcontainerNetwork) {
	o.Network = &v
}

// GetFuncCall returns the FuncCall field value if set, zero value otherwise.
func (o *Networkcontainer) GetFuncCall() FuncCall {
	if o == nil || IsNil(o.FuncCall) {
		var ret FuncCall
		return ret
	}
	return *o.FuncCall
}

// GetFuncCallOk returns a tuple with the FuncCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetFuncCallOk() (*FuncCall, bool) {
	if o == nil || IsNil(o.FuncCall) {
		return nil, false
	}
	return o.FuncCall, true
}

// HasFuncCall returns a boolean if a field has been set.
func (o *Networkcontainer) HasFuncCall() bool {
	if o != nil && !IsNil(o.FuncCall) {
		return true
	}

	return false
}

// SetFuncCall gets a reference to the given FuncCall and assigns it to the FuncCall field.
func (o *Networkcontainer) SetFuncCall(v FuncCall) {
	o.FuncCall = &v
}

// GetNetworkContainer returns the NetworkContainer field value if set, zero value otherwise.
func (o *Networkcontainer) GetNetworkContainer() string {
	if o == nil || IsNil(o.NetworkContainer) {
		var ret string
		return ret
	}
	return *o.NetworkContainer
}

// GetNetworkContainerOk returns a tuple with the NetworkContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetNetworkContainerOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkContainer) {
		return nil, false
	}
	return o.NetworkContainer, true
}

// HasNetworkContainer returns a boolean if a field has been set.
func (o *Networkcontainer) HasNetworkContainer() bool {
	if o != nil && !IsNil(o.NetworkContainer) {
		return true
	}

	return false
}

// SetNetworkContainer gets a reference to the given string and assigns it to the NetworkContainer field.
func (o *Networkcontainer) SetNetworkContainer(v string) {
	o.NetworkContainer = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Networkcontainer) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Networkcontainer) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Networkcontainer) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Networkcontainer) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Networkcontainer) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Networkcontainer) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Networkcontainer) GetOptions() []NetworkcontainerOptions {
	if o == nil || IsNil(o.Options) {
		var ret []NetworkcontainerOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetOptionsOk() ([]NetworkcontainerOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Networkcontainer) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []NetworkcontainerOptions and assigns it to the Options field.
func (o *Networkcontainer) SetOptions(v []NetworkcontainerOptions) {
	o.Options = v
}

// GetPortControlBlackoutSetting returns the PortControlBlackoutSetting field value if set, zero value otherwise.
func (o *Networkcontainer) GetPortControlBlackoutSetting() NetworkcontainerPortControlBlackoutSetting {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		var ret NetworkcontainerPortControlBlackoutSetting
		return ret
	}
	return *o.PortControlBlackoutSetting
}

// GetPortControlBlackoutSettingOk returns a tuple with the PortControlBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetPortControlBlackoutSettingOk() (*NetworkcontainerPortControlBlackoutSetting, bool) {
	if o == nil || IsNil(o.PortControlBlackoutSetting) {
		return nil, false
	}
	return o.PortControlBlackoutSetting, true
}

// HasPortControlBlackoutSetting returns a boolean if a field has been set.
func (o *Networkcontainer) HasPortControlBlackoutSetting() bool {
	if o != nil && !IsNil(o.PortControlBlackoutSetting) {
		return true
	}

	return false
}

// SetPortControlBlackoutSetting gets a reference to the given NetworkcontainerPortControlBlackoutSetting and assigns it to the PortControlBlackoutSetting field.
func (o *Networkcontainer) SetPortControlBlackoutSetting(v NetworkcontainerPortControlBlackoutSetting) {
	o.PortControlBlackoutSetting = &v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Networkcontainer) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Networkcontainer) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Networkcontainer) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Networkcontainer) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Networkcontainer) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Networkcontainer) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRemoveSubnets returns the RemoveSubnets field value if set, zero value otherwise.
func (o *Networkcontainer) GetRemoveSubnets() bool {
	if o == nil || IsNil(o.RemoveSubnets) {
		var ret bool
		return ret
	}
	return *o.RemoveSubnets
}

// GetRemoveSubnetsOk returns a tuple with the RemoveSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRemoveSubnetsOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveSubnets) {
		return nil, false
	}
	return o.RemoveSubnets, true
}

// HasRemoveSubnets returns a boolean if a field has been set.
func (o *Networkcontainer) HasRemoveSubnets() bool {
	if o != nil && !IsNil(o.RemoveSubnets) {
		return true
	}

	return false
}

// SetRemoveSubnets gets a reference to the given bool and assigns it to the RemoveSubnets field.
func (o *Networkcontainer) SetRemoveSubnets(v bool) {
	o.RemoveSubnets = &v
}

// GetRestartIfNeeded returns the RestartIfNeeded field value if set, zero value otherwise.
func (o *Networkcontainer) GetRestartIfNeeded() bool {
	if o == nil || IsNil(o.RestartIfNeeded) {
		var ret bool
		return ret
	}
	return *o.RestartIfNeeded
}

// GetRestartIfNeededOk returns a tuple with the RestartIfNeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRestartIfNeededOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartIfNeeded) {
		return nil, false
	}
	return o.RestartIfNeeded, true
}

// HasRestartIfNeeded returns a boolean if a field has been set.
func (o *Networkcontainer) HasRestartIfNeeded() bool {
	if o != nil && !IsNil(o.RestartIfNeeded) {
		return true
	}

	return false
}

// SetRestartIfNeeded gets a reference to the given bool and assigns it to the RestartIfNeeded field.
func (o *Networkcontainer) SetRestartIfNeeded(v bool) {
	o.RestartIfNeeded = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *Networkcontainer) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *Networkcontainer) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *Networkcontainer) SetRir(v string) {
	o.Rir = &v
}

// GetRirOrganization returns the RirOrganization field value if set, zero value otherwise.
func (o *Networkcontainer) GetRirOrganization() string {
	if o == nil || IsNil(o.RirOrganization) {
		var ret string
		return ret
	}
	return *o.RirOrganization
}

// GetRirOrganizationOk returns a tuple with the RirOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRirOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.RirOrganization) {
		return nil, false
	}
	return o.RirOrganization, true
}

// HasRirOrganization returns a boolean if a field has been set.
func (o *Networkcontainer) HasRirOrganization() bool {
	if o != nil && !IsNil(o.RirOrganization) {
		return true
	}

	return false
}

// SetRirOrganization gets a reference to the given string and assigns it to the RirOrganization field.
func (o *Networkcontainer) SetRirOrganization(v string) {
	o.RirOrganization = &v
}

// GetRirRegistrationAction returns the RirRegistrationAction field value if set, zero value otherwise.
func (o *Networkcontainer) GetRirRegistrationAction() string {
	if o == nil || IsNil(o.RirRegistrationAction) {
		var ret string
		return ret
	}
	return *o.RirRegistrationAction
}

// GetRirRegistrationActionOk returns a tuple with the RirRegistrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRirRegistrationActionOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationAction) {
		return nil, false
	}
	return o.RirRegistrationAction, true
}

// HasRirRegistrationAction returns a boolean if a field has been set.
func (o *Networkcontainer) HasRirRegistrationAction() bool {
	if o != nil && !IsNil(o.RirRegistrationAction) {
		return true
	}

	return false
}

// SetRirRegistrationAction gets a reference to the given string and assigns it to the RirRegistrationAction field.
func (o *Networkcontainer) SetRirRegistrationAction(v string) {
	o.RirRegistrationAction = &v
}

// GetRirRegistrationStatus returns the RirRegistrationStatus field value if set, zero value otherwise.
func (o *Networkcontainer) GetRirRegistrationStatus() string {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RirRegistrationStatus
}

// GetRirRegistrationStatusOk returns a tuple with the RirRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetRirRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		return nil, false
	}
	return o.RirRegistrationStatus, true
}

// HasRirRegistrationStatus returns a boolean if a field has been set.
func (o *Networkcontainer) HasRirRegistrationStatus() bool {
	if o != nil && !IsNil(o.RirRegistrationStatus) {
		return true
	}

	return false
}

// SetRirRegistrationStatus gets a reference to the given string and assigns it to the RirRegistrationStatus field.
func (o *Networkcontainer) SetRirRegistrationStatus(v string) {
	o.RirRegistrationStatus = &v
}

// GetSamePortControlDiscoveryBlackout returns the SamePortControlDiscoveryBlackout field value if set, zero value otherwise.
func (o *Networkcontainer) GetSamePortControlDiscoveryBlackout() bool {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		var ret bool
		return ret
	}
	return *o.SamePortControlDiscoveryBlackout
}

// GetSamePortControlDiscoveryBlackoutOk returns a tuple with the SamePortControlDiscoveryBlackout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetSamePortControlDiscoveryBlackoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SamePortControlDiscoveryBlackout) {
		return nil, false
	}
	return o.SamePortControlDiscoveryBlackout, true
}

// HasSamePortControlDiscoveryBlackout returns a boolean if a field has been set.
func (o *Networkcontainer) HasSamePortControlDiscoveryBlackout() bool {
	if o != nil && !IsNil(o.SamePortControlDiscoveryBlackout) {
		return true
	}

	return false
}

// SetSamePortControlDiscoveryBlackout gets a reference to the given bool and assigns it to the SamePortControlDiscoveryBlackout field.
func (o *Networkcontainer) SetSamePortControlDiscoveryBlackout(v bool) {
	o.SamePortControlDiscoveryBlackout = &v
}

// GetSendRirRequest returns the SendRirRequest field value if set, zero value otherwise.
func (o *Networkcontainer) GetSendRirRequest() bool {
	if o == nil || IsNil(o.SendRirRequest) {
		var ret bool
		return ret
	}
	return *o.SendRirRequest
}

// GetSendRirRequestOk returns a tuple with the SendRirRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetSendRirRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRirRequest) {
		return nil, false
	}
	return o.SendRirRequest, true
}

// HasSendRirRequest returns a boolean if a field has been set.
func (o *Networkcontainer) HasSendRirRequest() bool {
	if o != nil && !IsNil(o.SendRirRequest) {
		return true
	}

	return false
}

// SetSendRirRequest gets a reference to the given bool and assigns it to the SendRirRequest field.
func (o *Networkcontainer) SetSendRirRequest(v bool) {
	o.SendRirRequest = &v
}

// GetSubscribeSettings returns the SubscribeSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetSubscribeSettings() NetworkcontainerSubscribeSettings {
	if o == nil || IsNil(o.SubscribeSettings) {
		var ret NetworkcontainerSubscribeSettings
		return ret
	}
	return *o.SubscribeSettings
}

// GetSubscribeSettingsOk returns a tuple with the SubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetSubscribeSettingsOk() (*NetworkcontainerSubscribeSettings, bool) {
	if o == nil || IsNil(o.SubscribeSettings) {
		return nil, false
	}
	return o.SubscribeSettings, true
}

// HasSubscribeSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasSubscribeSettings() bool {
	if o != nil && !IsNil(o.SubscribeSettings) {
		return true
	}

	return false
}

// SetSubscribeSettings gets a reference to the given NetworkcontainerSubscribeSettings and assigns it to the SubscribeSettings field.
func (o *Networkcontainer) SetSubscribeSettings(v NetworkcontainerSubscribeSettings) {
	o.SubscribeSettings = &v
}

// GetUnmanaged returns the Unmanaged field value if set, zero value otherwise.
func (o *Networkcontainer) GetUnmanaged() bool {
	if o == nil || IsNil(o.Unmanaged) {
		var ret bool
		return ret
	}
	return *o.Unmanaged
}

// GetUnmanagedOk returns a tuple with the Unmanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUnmanagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unmanaged) {
		return nil, false
	}
	return o.Unmanaged, true
}

// HasUnmanaged returns a boolean if a field has been set.
func (o *Networkcontainer) HasUnmanaged() bool {
	if o != nil && !IsNil(o.Unmanaged) {
		return true
	}

	return false
}

// SetUnmanaged gets a reference to the given bool and assigns it to the Unmanaged field.
func (o *Networkcontainer) SetUnmanaged(v bool) {
	o.Unmanaged = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Networkcontainer) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Networkcontainer) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Networkcontainer) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseAuthority returns the UseAuthority field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseAuthority() bool {
	if o == nil || IsNil(o.UseAuthority) {
		var ret bool
		return ret
	}
	return *o.UseAuthority
}

// GetUseAuthorityOk returns a tuple with the UseAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAuthority) {
		return nil, false
	}
	return o.UseAuthority, true
}

// HasUseAuthority returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseAuthority() bool {
	if o != nil && !IsNil(o.UseAuthority) {
		return true
	}

	return false
}

// SetUseAuthority gets a reference to the given bool and assigns it to the UseAuthority field.
func (o *Networkcontainer) SetUseAuthority(v bool) {
	o.UseAuthority = &v
}

// GetUseBlackoutSetting returns the UseBlackoutSetting field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseBlackoutSetting() bool {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseBlackoutSetting
}

// GetUseBlackoutSettingOk returns a tuple with the UseBlackoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseBlackoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlackoutSetting) {
		return nil, false
	}
	return o.UseBlackoutSetting, true
}

// HasUseBlackoutSetting returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseBlackoutSetting() bool {
	if o != nil && !IsNil(o.UseBlackoutSetting) {
		return true
	}

	return false
}

// SetUseBlackoutSetting gets a reference to the given bool and assigns it to the UseBlackoutSetting field.
func (o *Networkcontainer) SetUseBlackoutSetting(v bool) {
	o.UseBlackoutSetting = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Networkcontainer) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Networkcontainer) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Networkcontainer) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Networkcontainer) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Networkcontainer) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDdnsUpdateFixedAddresses returns the UseDdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUpdateFixedAddresses
}

// GetUseDdnsUpdateFixedAddressesOk returns a tuple with the UseDdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.UseDdnsUpdateFixedAddresses, true
}

// HasUseDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.UseDdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetUseDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the UseDdnsUpdateFixedAddresses field.
func (o *Networkcontainer) SetUseDdnsUpdateFixedAddresses(v bool) {
	o.UseDdnsUpdateFixedAddresses = &v
}

// GetUseDdnsUseOption81 returns the UseDdnsUseOption81 field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDdnsUseOption81() bool {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUseOption81
}

// GetUseDdnsUseOption81Ok returns a tuple with the UseDdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		return nil, false
	}
	return o.UseDdnsUseOption81, true
}

// HasUseDdnsUseOption81 returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDdnsUseOption81() bool {
	if o != nil && !IsNil(o.UseDdnsUseOption81) {
		return true
	}

	return false
}

// SetUseDdnsUseOption81 gets a reference to the given bool and assigns it to the UseDdnsUseOption81 field.
func (o *Networkcontainer) SetUseDdnsUseOption81(v bool) {
	o.UseDdnsUseOption81 = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Networkcontainer) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseDiscoveryBasicPollingSettings returns the UseDiscoveryBasicPollingSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseDiscoveryBasicPollingSettings() bool {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		var ret bool
		return ret
	}
	return *o.UseDiscoveryBasicPollingSettings
}

// GetUseDiscoveryBasicPollingSettingsOk returns a tuple with the UseDiscoveryBasicPollingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseDiscoveryBasicPollingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDiscoveryBasicPollingSettings) {
		return nil, false
	}
	return o.UseDiscoveryBasicPollingSettings, true
}

// HasUseDiscoveryBasicPollingSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseDiscoveryBasicPollingSettings() bool {
	if o != nil && !IsNil(o.UseDiscoveryBasicPollingSettings) {
		return true
	}

	return false
}

// SetUseDiscoveryBasicPollingSettings gets a reference to the given bool and assigns it to the UseDiscoveryBasicPollingSettings field.
func (o *Networkcontainer) SetUseDiscoveryBasicPollingSettings(v bool) {
	o.UseDiscoveryBasicPollingSettings = &v
}

// GetUseEmailList returns the UseEmailList field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseEmailList() bool {
	if o == nil || IsNil(o.UseEmailList) {
		var ret bool
		return ret
	}
	return *o.UseEmailList
}

// GetUseEmailListOk returns a tuple with the UseEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseEmailListOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailList) {
		return nil, false
	}
	return o.UseEmailList, true
}

// HasUseEmailList returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseEmailList() bool {
	if o != nil && !IsNil(o.UseEmailList) {
		return true
	}

	return false
}

// SetUseEmailList gets a reference to the given bool and assigns it to the UseEmailList field.
func (o *Networkcontainer) SetUseEmailList(v bool) {
	o.UseEmailList = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Networkcontainer) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDhcpThresholds returns the UseEnableDhcpThresholds field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.UseEnableDhcpThresholds
}

// GetUseEnableDhcpThresholdsOk returns a tuple with the UseEnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		return nil, false
	}
	return o.UseEnableDhcpThresholds, true
}

// HasUseEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.UseEnableDhcpThresholds) {
		return true
	}

	return false
}

// SetUseEnableDhcpThresholds gets a reference to the given bool and assigns it to the UseEnableDhcpThresholds field.
func (o *Networkcontainer) SetUseEnableDhcpThresholds(v bool) {
	o.UseEnableDhcpThresholds = &v
}

// GetUseEnableDiscovery returns the UseEnableDiscovery field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseEnableDiscovery() bool {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		var ret bool
		return ret
	}
	return *o.UseEnableDiscovery
}

// GetUseEnableDiscoveryOk returns a tuple with the UseEnableDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseEnableDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDiscovery) {
		return nil, false
	}
	return o.UseEnableDiscovery, true
}

// HasUseEnableDiscovery returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseEnableDiscovery() bool {
	if o != nil && !IsNil(o.UseEnableDiscovery) {
		return true
	}

	return false
}

// SetUseEnableDiscovery gets a reference to the given bool and assigns it to the UseEnableDiscovery field.
func (o *Networkcontainer) SetUseEnableDiscovery(v bool) {
	o.UseEnableDiscovery = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Networkcontainer) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIgnoreId returns the UseIgnoreId field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseIgnoreId() bool {
	if o == nil || IsNil(o.UseIgnoreId) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreId
}

// GetUseIgnoreIdOk returns a tuple with the UseIgnoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseIgnoreIdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreId) {
		return nil, false
	}
	return o.UseIgnoreId, true
}

// HasUseIgnoreId returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseIgnoreId() bool {
	if o != nil && !IsNil(o.UseIgnoreId) {
		return true
	}

	return false
}

// SetUseIgnoreId gets a reference to the given bool and assigns it to the UseIgnoreId field.
func (o *Networkcontainer) SetUseIgnoreId(v bool) {
	o.UseIgnoreId = &v
}

// GetUseIpamEmailAddresses returns the UseIpamEmailAddresses field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseIpamEmailAddresses() bool {
	if o == nil || IsNil(o.UseIpamEmailAddresses) {
		var ret bool
		return ret
	}
	return *o.UseIpamEmailAddresses
}

// GetUseIpamEmailAddressesOk returns a tuple with the UseIpamEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseIpamEmailAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamEmailAddresses) {
		return nil, false
	}
	return o.UseIpamEmailAddresses, true
}

// HasUseIpamEmailAddresses returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseIpamEmailAddresses() bool {
	if o != nil && !IsNil(o.UseIpamEmailAddresses) {
		return true
	}

	return false
}

// SetUseIpamEmailAddresses gets a reference to the given bool and assigns it to the UseIpamEmailAddresses field.
func (o *Networkcontainer) SetUseIpamEmailAddresses(v bool) {
	o.UseIpamEmailAddresses = &v
}

// GetUseIpamThresholdSettings returns the UseIpamThresholdSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseIpamThresholdSettings() bool {
	if o == nil || IsNil(o.UseIpamThresholdSettings) {
		var ret bool
		return ret
	}
	return *o.UseIpamThresholdSettings
}

// GetUseIpamThresholdSettingsOk returns a tuple with the UseIpamThresholdSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseIpamThresholdSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamThresholdSettings) {
		return nil, false
	}
	return o.UseIpamThresholdSettings, true
}

// HasUseIpamThresholdSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseIpamThresholdSettings() bool {
	if o != nil && !IsNil(o.UseIpamThresholdSettings) {
		return true
	}

	return false
}

// SetUseIpamThresholdSettings gets a reference to the given bool and assigns it to the UseIpamThresholdSettings field.
func (o *Networkcontainer) SetUseIpamThresholdSettings(v bool) {
	o.UseIpamThresholdSettings = &v
}

// GetUseIpamTrapSettings returns the UseIpamTrapSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseIpamTrapSettings() bool {
	if o == nil || IsNil(o.UseIpamTrapSettings) {
		var ret bool
		return ret
	}
	return *o.UseIpamTrapSettings
}

// GetUseIpamTrapSettingsOk returns a tuple with the UseIpamTrapSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseIpamTrapSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamTrapSettings) {
		return nil, false
	}
	return o.UseIpamTrapSettings, true
}

// HasUseIpamTrapSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseIpamTrapSettings() bool {
	if o != nil && !IsNil(o.UseIpamTrapSettings) {
		return true
	}

	return false
}

// SetUseIpamTrapSettings gets a reference to the given bool and assigns it to the UseIpamTrapSettings field.
func (o *Networkcontainer) SetUseIpamTrapSettings(v bool) {
	o.UseIpamTrapSettings = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *Networkcontainer) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Networkcontainer) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseMgmPrivate returns the UseMgmPrivate field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseMgmPrivate() bool {
	if o == nil || IsNil(o.UseMgmPrivate) {
		var ret bool
		return ret
	}
	return *o.UseMgmPrivate
}

// GetUseMgmPrivateOk returns a tuple with the UseMgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmPrivate) {
		return nil, false
	}
	return o.UseMgmPrivate, true
}

// HasUseMgmPrivate returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseMgmPrivate() bool {
	if o != nil && !IsNil(o.UseMgmPrivate) {
		return true
	}

	return false
}

// SetUseMgmPrivate gets a reference to the given bool and assigns it to the UseMgmPrivate field.
func (o *Networkcontainer) SetUseMgmPrivate(v bool) {
	o.UseMgmPrivate = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Networkcontainer) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Networkcontainer) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Networkcontainer) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Networkcontainer) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Networkcontainer) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Networkcontainer) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseSubscribeSettings returns the UseSubscribeSettings field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseSubscribeSettings() bool {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		var ret bool
		return ret
	}
	return *o.UseSubscribeSettings
}

// GetUseSubscribeSettingsOk returns a tuple with the UseSubscribeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseSubscribeSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSubscribeSettings) {
		return nil, false
	}
	return o.UseSubscribeSettings, true
}

// HasUseSubscribeSettings returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseSubscribeSettings() bool {
	if o != nil && !IsNil(o.UseSubscribeSettings) {
		return true
	}

	return false
}

// SetUseSubscribeSettings gets a reference to the given bool and assigns it to the UseSubscribeSettings field.
func (o *Networkcontainer) SetUseSubscribeSettings(v bool) {
	o.UseSubscribeSettings = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Networkcontainer) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

// GetUseZoneAssociations returns the UseZoneAssociations field value if set, zero value otherwise.
func (o *Networkcontainer) GetUseZoneAssociations() bool {
	if o == nil || IsNil(o.UseZoneAssociations) {
		var ret bool
		return ret
	}
	return *o.UseZoneAssociations
}

// GetUseZoneAssociationsOk returns a tuple with the UseZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUseZoneAssociationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseZoneAssociations) {
		return nil, false
	}
	return o.UseZoneAssociations, true
}

// HasUseZoneAssociations returns a boolean if a field has been set.
func (o *Networkcontainer) HasUseZoneAssociations() bool {
	if o != nil && !IsNil(o.UseZoneAssociations) {
		return true
	}

	return false
}

// SetUseZoneAssociations gets a reference to the given bool and assigns it to the UseZoneAssociations field.
func (o *Networkcontainer) SetUseZoneAssociations(v bool) {
	o.UseZoneAssociations = &v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *Networkcontainer) GetUtilization() int64 {
	if o == nil || IsNil(o.Utilization) {
		var ret int64
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.Utilization) {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *Networkcontainer) HasUtilization() bool {
	if o != nil && !IsNil(o.Utilization) {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given int64 and assigns it to the Utilization field.
func (o *Networkcontainer) SetUtilization(v int64) {
	o.Utilization = &v
}

// GetZoneAssociations returns the ZoneAssociations field value if set, zero value otherwise.
func (o *Networkcontainer) GetZoneAssociations() []NetworkcontainerZoneAssociations {
	if o == nil || IsNil(o.ZoneAssociations) {
		var ret []NetworkcontainerZoneAssociations
		return ret
	}
	return o.ZoneAssociations
}

// GetZoneAssociationsOk returns a tuple with the ZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkcontainer) GetZoneAssociationsOk() ([]NetworkcontainerZoneAssociations, bool) {
	if o == nil || IsNil(o.ZoneAssociations) {
		return nil, false
	}
	return o.ZoneAssociations, true
}

// HasZoneAssociations returns a boolean if a field has been set.
func (o *Networkcontainer) HasZoneAssociations() bool {
	if o != nil && !IsNil(o.ZoneAssociations) {
		return true
	}

	return false
}

// SetZoneAssociations gets a reference to the given []NetworkcontainerZoneAssociations and assigns it to the ZoneAssociations field.
func (o *Networkcontainer) SetZoneAssociations(v []NetworkcontainerZoneAssociations) {
	o.ZoneAssociations = v
}

func (o Networkcontainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Networkcontainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.AutoCreateReversezone) {
		toSerialize["auto_create_reversezone"] = o.AutoCreateReversezone
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DdnsUpdateFixedAddresses) {
		toSerialize["ddns_update_fixed_addresses"] = o.DdnsUpdateFixedAddresses
	}
	if !IsNil(o.DdnsUseOption81) {
		toSerialize["ddns_use_option81"] = o.DdnsUseOption81
	}
	if !IsNil(o.DeleteReason) {
		toSerialize["delete_reason"] = o.DeleteReason
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveryBasicPollSettings) {
		toSerialize["discovery_basic_poll_settings"] = o.DiscoveryBasicPollSettings
	}
	if !IsNil(o.DiscoveryBlackoutSetting) {
		toSerialize["discovery_blackout_setting"] = o.DiscoveryBlackoutSetting
	}
	if !IsNil(o.DiscoveryEngineType) {
		toSerialize["discovery_engine_type"] = o.DiscoveryEngineType
	}
	if !IsNil(o.DiscoveryMember) {
		toSerialize["discovery_member"] = o.DiscoveryMember
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableDiscovery) {
		toSerialize["enable_discovery"] = o.EnableDiscovery
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnableImmediateDiscovery) {
		toSerialize["enable_immediate_discovery"] = o.EnableImmediateDiscovery
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.EndpointSources) {
		toSerialize["endpoint_sources"] = o.EndpointSources
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IgnoreId) {
		toSerialize["ignore_id"] = o.IgnoreId
	}
	if !IsNil(o.IgnoreMacAddresses) {
		toSerialize["ignore_mac_addresses"] = o.IgnoreMacAddresses
	}
	if !IsNil(o.IpamEmailAddresses) {
		toSerialize["ipam_email_addresses"] = o.IpamEmailAddresses
	}
	if !IsNil(o.IpamThresholdSettings) {
		toSerialize["ipam_threshold_settings"] = o.IpamThresholdSettings
	}
	if !IsNil(o.IpamTrapSettings) {
		toSerialize["ipam_trap_settings"] = o.IpamTrapSettings
	}
	if !IsNil(o.LastRirRegistrationUpdateSent) {
		toSerialize["last_rir_registration_update_sent"] = o.LastRirRegistrationUpdateSent
	}
	if !IsNil(o.LastRirRegistrationUpdateStatus) {
		toSerialize["last_rir_registration_update_status"] = o.LastRirRegistrationUpdateStatus
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.MgmPrivate) {
		toSerialize["mgm_private"] = o.MgmPrivate
	}
	if !IsNil(o.MgmPrivateOverridable) {
		toSerialize["mgm_private_overridable"] = o.MgmPrivateOverridable
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.FuncCall) {
		toSerialize["func_call"] = o.FuncCall
	}
	if !IsNil(o.NetworkContainer) {
		toSerialize["network_container"] = o.NetworkContainer
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PortControlBlackoutSetting) {
		toSerialize["port_control_blackout_setting"] = o.PortControlBlackoutSetting
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.RemoveSubnets) {
		toSerialize["remove_subnets"] = o.RemoveSubnets
	}
	if !IsNil(o.RestartIfNeeded) {
		toSerialize["restart_if_needed"] = o.RestartIfNeeded
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.RirOrganization) {
		toSerialize["rir_organization"] = o.RirOrganization
	}
	if !IsNil(o.RirRegistrationAction) {
		toSerialize["rir_registration_action"] = o.RirRegistrationAction
	}
	if !IsNil(o.RirRegistrationStatus) {
		toSerialize["rir_registration_status"] = o.RirRegistrationStatus
	}
	if !IsNil(o.SamePortControlDiscoveryBlackout) {
		toSerialize["same_port_control_discovery_blackout"] = o.SamePortControlDiscoveryBlackout
	}
	if !IsNil(o.SendRirRequest) {
		toSerialize["send_rir_request"] = o.SendRirRequest
	}
	if !IsNil(o.SubscribeSettings) {
		toSerialize["subscribe_settings"] = o.SubscribeSettings
	}
	if !IsNil(o.Unmanaged) {
		toSerialize["unmanaged"] = o.Unmanaged
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseAuthority) {
		toSerialize["use_authority"] = o.UseAuthority
	}
	if !IsNil(o.UseBlackoutSetting) {
		toSerialize["use_blackout_setting"] = o.UseBlackoutSetting
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDdnsUpdateFixedAddresses) {
		toSerialize["use_ddns_update_fixed_addresses"] = o.UseDdnsUpdateFixedAddresses
	}
	if !IsNil(o.UseDdnsUseOption81) {
		toSerialize["use_ddns_use_option81"] = o.UseDdnsUseOption81
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseDiscoveryBasicPollingSettings) {
		toSerialize["use_discovery_basic_polling_settings"] = o.UseDiscoveryBasicPollingSettings
	}
	if !IsNil(o.UseEmailList) {
		toSerialize["use_email_list"] = o.UseEmailList
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDhcpThresholds) {
		toSerialize["use_enable_dhcp_thresholds"] = o.UseEnableDhcpThresholds
	}
	if !IsNil(o.UseEnableDiscovery) {
		toSerialize["use_enable_discovery"] = o.UseEnableDiscovery
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIgnoreId) {
		toSerialize["use_ignore_id"] = o.UseIgnoreId
	}
	if !IsNil(o.UseIpamEmailAddresses) {
		toSerialize["use_ipam_email_addresses"] = o.UseIpamEmailAddresses
	}
	if !IsNil(o.UseIpamThresholdSettings) {
		toSerialize["use_ipam_threshold_settings"] = o.UseIpamThresholdSettings
	}
	if !IsNil(o.UseIpamTrapSettings) {
		toSerialize["use_ipam_trap_settings"] = o.UseIpamTrapSettings
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseMgmPrivate) {
		toSerialize["use_mgm_private"] = o.UseMgmPrivate
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseSubscribeSettings) {
		toSerialize["use_subscribe_settings"] = o.UseSubscribeSettings
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseZoneAssociations) {
		toSerialize["use_zone_associations"] = o.UseZoneAssociations
	}
	if !IsNil(o.Utilization) {
		toSerialize["utilization"] = o.Utilization
	}
	if !IsNil(o.ZoneAssociations) {
		toSerialize["zone_associations"] = o.ZoneAssociations
	}
	return toSerialize, nil
}

type NullableNetworkcontainer struct {
	value *Networkcontainer
	isSet bool
}

func (v NullableNetworkcontainer) Get() *Networkcontainer {
	return v.value
}

func (v *NullableNetworkcontainer) Set(val *Networkcontainer) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkcontainer) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkcontainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkcontainer(val *Networkcontainer) *NullableNetworkcontainer {
	return &NullableNetworkcontainer{value: val, isSet: true}
}

func (v NullableNetworkcontainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkcontainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
