/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// NetworkcontainerNetwork - The network address in IPv4 Address/CIDR format. For regular expression searches, only the IPv4 Address portion is supported. Searches for the CIDR portion is always an exact match. For example, both network containers 10.0.0.0/8 and 20.1.0.0/16 are matched by expression '.0' and only 20.1.0.0/16 is matched by '.0/16'.
type NetworkcontainerNetwork struct {
	NetworkcontainerNetworkOneOf *NetworkcontainerNetworkOneOf
	String                       *string
}

// NetworkcontainerNetworkOneOfAsNetworkcontainerNetwork is a convenience function that returns NetworkcontainerNetworkOneOf wrapped in NetworkcontainerNetwork
func NetworkcontainerNetworkOneOfAsNetworkcontainerNetwork(v *NetworkcontainerNetworkOneOf) NetworkcontainerNetwork {
	return NetworkcontainerNetwork{
		NetworkcontainerNetworkOneOf: v,
	}
}

// stringAsNetworkcontainerNetwork is a convenience function that returns string wrapped in NetworkcontainerNetwork
func StringAsNetworkcontainerNetwork(v *string) NetworkcontainerNetwork {
	return NetworkcontainerNetwork{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkcontainerNetwork) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NetworkcontainerNetworkOneOf
	err = newStrictDecoder(data).Decode(&dst.NetworkcontainerNetworkOneOf)
	if err == nil {
		jsonNetworkcontainerNetworkOneOf, _ := json.Marshal(dst.NetworkcontainerNetworkOneOf)
		if string(jsonNetworkcontainerNetworkOneOf) == "{}" { // empty struct
			dst.NetworkcontainerNetworkOneOf = nil
		} else {
			match++
		}
	} else {
		dst.NetworkcontainerNetworkOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NetworkcontainerNetworkOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NetworkcontainerNetwork)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NetworkcontainerNetwork)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkcontainerNetwork) MarshalJSON() ([]byte, error) {
	if src.NetworkcontainerNetworkOneOf != nil {
		return json.Marshal(&src.NetworkcontainerNetworkOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkcontainerNetwork) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NetworkcontainerNetworkOneOf != nil {
		return obj.NetworkcontainerNetworkOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableNetworkcontainerNetwork struct {
	value *NetworkcontainerNetwork
	isSet bool
}

func (v NullableNetworkcontainerNetwork) Get() *NetworkcontainerNetwork {
	return v.value
}

func (v *NullableNetworkcontainerNetwork) Set(val *NetworkcontainerNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkcontainerNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkcontainerNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkcontainerNetwork(val *NetworkcontainerNetwork) *NullableNetworkcontainerNetwork {
	return &NullableNetworkcontainerNetwork{value: val, isSet: true}
}

func (v NullableNetworkcontainerNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkcontainerNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
