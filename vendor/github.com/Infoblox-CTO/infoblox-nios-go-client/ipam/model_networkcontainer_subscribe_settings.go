/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the NetworkcontainerSubscribeSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkcontainerSubscribeSettings{}

// NetworkcontainerSubscribeSettings struct for NetworkcontainerSubscribeSettings
type NetworkcontainerSubscribeSettings struct {
	// The list of Cisco ISE attributes allowed for subscription.
	EnabledAttributes    []string                                             `json:"enabled_attributes,omitempty"`
	MappedEaAttributes   *NetworkcontainersubscribesettingsMappedEaAttributes `json:"mapped_ea_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkcontainerSubscribeSettings NetworkcontainerSubscribeSettings

// NewNetworkcontainerSubscribeSettings instantiates a new NetworkcontainerSubscribeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkcontainerSubscribeSettings() *NetworkcontainerSubscribeSettings {
	this := NetworkcontainerSubscribeSettings{}
	return &this
}

// NewNetworkcontainerSubscribeSettingsWithDefaults instantiates a new NetworkcontainerSubscribeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkcontainerSubscribeSettingsWithDefaults() *NetworkcontainerSubscribeSettings {
	this := NetworkcontainerSubscribeSettings{}
	return &this
}

// GetEnabledAttributes returns the EnabledAttributes field value if set, zero value otherwise.
func (o *NetworkcontainerSubscribeSettings) GetEnabledAttributes() []string {
	if o == nil || IsNil(o.EnabledAttributes) {
		var ret []string
		return ret
	}
	return o.EnabledAttributes
}

// GetEnabledAttributesOk returns a tuple with the EnabledAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkcontainerSubscribeSettings) GetEnabledAttributesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledAttributes) {
		return nil, false
	}
	return o.EnabledAttributes, true
}

// HasEnabledAttributes returns a boolean if a field has been set.
func (o *NetworkcontainerSubscribeSettings) HasEnabledAttributes() bool {
	if o != nil && !IsNil(o.EnabledAttributes) {
		return true
	}

	return false
}

// SetEnabledAttributes gets a reference to the given []string and assigns it to the EnabledAttributes field.
func (o *NetworkcontainerSubscribeSettings) SetEnabledAttributes(v []string) {
	o.EnabledAttributes = v
}

// GetMappedEaAttributes returns the MappedEaAttributes field value if set, zero value otherwise.
func (o *NetworkcontainerSubscribeSettings) GetMappedEaAttributes() NetworkcontainersubscribesettingsMappedEaAttributes {
	if o == nil || IsNil(o.MappedEaAttributes) {
		var ret NetworkcontainersubscribesettingsMappedEaAttributes
		return ret
	}
	return *o.MappedEaAttributes
}

// GetMappedEaAttributesOk returns a tuple with the MappedEaAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkcontainerSubscribeSettings) GetMappedEaAttributesOk() (*NetworkcontainersubscribesettingsMappedEaAttributes, bool) {
	if o == nil || IsNil(o.MappedEaAttributes) {
		return nil, false
	}
	return o.MappedEaAttributes, true
}

// HasMappedEaAttributes returns a boolean if a field has been set.
func (o *NetworkcontainerSubscribeSettings) HasMappedEaAttributes() bool {
	if o != nil && !IsNil(o.MappedEaAttributes) {
		return true
	}

	return false
}

// SetMappedEaAttributes gets a reference to the given NetworkcontainersubscribesettingsMappedEaAttributes and assigns it to the MappedEaAttributes field.
func (o *NetworkcontainerSubscribeSettings) SetMappedEaAttributes(v NetworkcontainersubscribesettingsMappedEaAttributes) {
	o.MappedEaAttributes = &v
}

func (o NetworkcontainerSubscribeSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkcontainerSubscribeSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnabledAttributes) {
		toSerialize["enabled_attributes"] = o.EnabledAttributes
	}
	if !IsNil(o.MappedEaAttributes) {
		toSerialize["mapped_ea_attributes"] = o.MappedEaAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkcontainerSubscribeSettings) UnmarshalJSON(data []byte) (err error) {
	varNetworkcontainerSubscribeSettings := _NetworkcontainerSubscribeSettings{}

	err = json.Unmarshal(data, &varNetworkcontainerSubscribeSettings)

	if err != nil {
		return err
	}

	*o = NetworkcontainerSubscribeSettings(varNetworkcontainerSubscribeSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled_attributes")
		delete(additionalProperties, "mapped_ea_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkcontainerSubscribeSettings struct {
	value *NetworkcontainerSubscribeSettings
	isSet bool
}

func (v NullableNetworkcontainerSubscribeSettings) Get() *NetworkcontainerSubscribeSettings {
	return v.value
}

func (v *NullableNetworkcontainerSubscribeSettings) Set(val *NetworkcontainerSubscribeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkcontainerSubscribeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkcontainerSubscribeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkcontainerSubscribeSettings(val *NetworkcontainerSubscribeSettings) *NullableNetworkcontainerSubscribeSettings {
	return &NullableNetworkcontainerSubscribeSettings{value: val, isSet: true}
}

func (v NullableNetworkcontainerSubscribeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkcontainerSubscribeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
