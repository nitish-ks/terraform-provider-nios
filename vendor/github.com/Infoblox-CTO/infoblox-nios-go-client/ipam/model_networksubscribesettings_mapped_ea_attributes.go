/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the NetworksubscribesettingsMappedEaAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworksubscribesettingsMappedEaAttributes{}

// NetworksubscribesettingsMappedEaAttributes struct for NetworksubscribesettingsMappedEaAttributes
type NetworksubscribesettingsMappedEaAttributes struct {
	// The Cisco ISE attribute name that is enabled for publishsing from a Cisco ISE endpoint.
	Name *string `json:"name,omitempty"`
	// The name of the extensible attribute definition object the Cisco ISE attribute that is enabled for subscription is mapped on.
	MappedEa             *string `json:"mapped_ea,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworksubscribesettingsMappedEaAttributes NetworksubscribesettingsMappedEaAttributes

// NewNetworksubscribesettingsMappedEaAttributes instantiates a new NetworksubscribesettingsMappedEaAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworksubscribesettingsMappedEaAttributes() *NetworksubscribesettingsMappedEaAttributes {
	this := NetworksubscribesettingsMappedEaAttributes{}
	return &this
}

// NewNetworksubscribesettingsMappedEaAttributesWithDefaults instantiates a new NetworksubscribesettingsMappedEaAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworksubscribesettingsMappedEaAttributesWithDefaults() *NetworksubscribesettingsMappedEaAttributes {
	this := NetworksubscribesettingsMappedEaAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworksubscribesettingsMappedEaAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworksubscribesettingsMappedEaAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworksubscribesettingsMappedEaAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworksubscribesettingsMappedEaAttributes) SetName(v string) {
	o.Name = &v
}

// GetMappedEa returns the MappedEa field value if set, zero value otherwise.
func (o *NetworksubscribesettingsMappedEaAttributes) GetMappedEa() string {
	if o == nil || IsNil(o.MappedEa) {
		var ret string
		return ret
	}
	return *o.MappedEa
}

// GetMappedEaOk returns a tuple with the MappedEa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworksubscribesettingsMappedEaAttributes) GetMappedEaOk() (*string, bool) {
	if o == nil || IsNil(o.MappedEa) {
		return nil, false
	}
	return o.MappedEa, true
}

// HasMappedEa returns a boolean if a field has been set.
func (o *NetworksubscribesettingsMappedEaAttributes) HasMappedEa() bool {
	if o != nil && !IsNil(o.MappedEa) {
		return true
	}

	return false
}

// SetMappedEa gets a reference to the given string and assigns it to the MappedEa field.
func (o *NetworksubscribesettingsMappedEaAttributes) SetMappedEa(v string) {
	o.MappedEa = &v
}

func (o NetworksubscribesettingsMappedEaAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworksubscribesettingsMappedEaAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MappedEa) {
		toSerialize["mapped_ea"] = o.MappedEa
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworksubscribesettingsMappedEaAttributes) UnmarshalJSON(data []byte) (err error) {
	varNetworksubscribesettingsMappedEaAttributes := _NetworksubscribesettingsMappedEaAttributes{}

	err = json.Unmarshal(data, &varNetworksubscribesettingsMappedEaAttributes)

	if err != nil {
		return err
	}

	*o = NetworksubscribesettingsMappedEaAttributes(varNetworksubscribesettingsMappedEaAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "mapped_ea")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworksubscribesettingsMappedEaAttributes struct {
	value *NetworksubscribesettingsMappedEaAttributes
	isSet bool
}

func (v NullableNetworksubscribesettingsMappedEaAttributes) Get() *NetworksubscribesettingsMappedEaAttributes {
	return v.value
}

func (v *NullableNetworksubscribesettingsMappedEaAttributes) Set(val *NetworksubscribesettingsMappedEaAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworksubscribesettingsMappedEaAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworksubscribesettingsMappedEaAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworksubscribesettingsMappedEaAttributes(val *NetworksubscribesettingsMappedEaAttributes) *NullableNetworksubscribesettingsMappedEaAttributes {
	return &NullableNetworksubscribesettingsMappedEaAttributes{value: val, isSet: true}
}

func (v NullableNetworksubscribesettingsMappedEaAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworksubscribesettingsMappedEaAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
