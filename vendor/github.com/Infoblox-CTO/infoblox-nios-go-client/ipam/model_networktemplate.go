/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Networktemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Networktemplate{}

// Networktemplate struct for Networktemplate
type Networktemplate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This flag controls whether the template allows any netmask. You must specify a netmask when creating a network using this template. If you set this parameter to false, you must specify the \"netmask\" field for the network template object.
	AllowAnyNetmask *bool `json:"allow_any_netmask,omitempty"`
	// Authority for the DHCP network.
	Authority *bool `json:"authority,omitempty"`
	// This flag controls whether reverse zones are automatically created when the network is added.
	AutoCreateReversezone *bool `json:"auto_create_reversezone,omitempty"`
	// The boot server IPv4 Address or name in FQDN format for the network. You can specify the name and/or IP address of the boot server that the host needs to boot.
	Bootfile *string `json:"bootfile,omitempty"`
	// The bootserver address for the network. You can specify the name and/or IP address of the boot server that the host needs to boot. The boot server IPv4 Address or name in FQDN format.
	Bootserver *string `json:"bootserver,omitempty"`
	// This flag controls whether this template can be used to create network objects in a cloud-computing deployment.
	CloudApiCompatible *bool `json:"cloud_api_compatible,omitempty"`
	// Comment for the network; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this network.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether the DHCP server is allowed to update DNS, regardless of the DHCP client requests. Note that changes for this field take effect only if ddns_use_option81 is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a DHCP network object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl *int64 `json:"ddns_ttl,omitempty"`
	// By default, the DHCP server does not update DNS when it allocates a fixed address to a client. You can configure the DHCP server to update the A and PTR records of a client with a fixed address. When this feature is enabled and the DHCP server adds A and PTR records for a fixed address, the DHCP server never discards the records.
	DdnsUpdateFixedAddresses *bool `json:"ddns_update_fixed_addresses,omitempty"`
	// The support for DHCP Option 81 at the network level.
	DdnsUseOption81 *bool                           `json:"ddns_use_option81,omitempty"`
	DelegatedMember *NetworktemplateDelegatedMember `json:"delegated_member,omitempty"`
	// If set to True, BOOTP settings are disabled and BOOTP requests will be denied.
	DenyBootp *bool `json:"deny_bootp,omitempty"`
	// The e-mail lists to which the appliance sends DHCP threshold alarm e-mail messages.
	EmailList []string `json:"email_list,omitempty"`
	// The dynamic DNS updates flag of a DHCP network object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Determines if DHCP thresholds are enabled for the network.
	EnableDhcpThresholds *bool `json:"enable_dhcp_thresholds,omitempty"`
	// Determines if DHCP threshold warnings are sent through email.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Set this to True if you want the DHCP server to use a different lease time for PXE clients.
	EnablePxeLeaseTime *bool `json:"enable_pxe_lease_time,omitempty"`
	// Determines if DHCP threshold warnings are send through SNMP.
	EnableSnmpWarnings *bool `json:"enable_snmp_warnings,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of fixed address templates assigned to this network template object. When you create a network based on a network template object that contains fixed address templates, the fixed addresses are created based on the associated fixed address templates.
	FixedAddressTemplates []string `json:"fixed_address_templates,omitempty"`
	// The percentage of DHCP network usage threshold above which network usage is not expected and may warrant your attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark *int64 `json:"high_water_mark,omitempty"`
	// The percentage of DHCP network usage below which the corresponding SNMP trap is reset. A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the high watermark value.
	HighWaterMarkReset *int64 `json:"high_water_mark_reset,omitempty"`
	// If this field is set to False, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.
	IgnoreDhcpOptionListRequest *bool `json:"ignore_dhcp_option_list_request,omitempty"`
	// The e-mail lists to which the appliance sends IPAM threshold alarm e-mail messages.
	IpamEmailAddresses    []string                              `json:"ipam_email_addresses,omitempty"`
	IpamThresholdSettings *NetworktemplateIpamThresholdSettings `json:"ipam_threshold_settings,omitempty"`
	IpamTrapSettings      *NetworktemplateIpamTrapSettings      `json:"ipam_trap_settings,omitempty"`
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be greater than 86400 seconds (1 day).
	LeaseScavengeTime *int32 `json:"lease_scavenge_time,omitempty"`
	// This field contains the logic filters to be applied on the this network template. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []NetworktemplateLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The percentage of DHCP network usage below which the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark *int64 `json:"low_water_mark,omitempty"`
	// The percentage of DHCP network usage threshold below which network usage is not expected and may warrant your attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value must be higher than the low watermark value.
	LowWaterMarkReset *int64 `json:"low_water_mark_reset,omitempty"`
	// A list of members or Microsoft (r) servers that serve DHCP for this network. All members in the array must be of the same type. The struct type must be indicated in each element, by setting the \"_struct\" member to the struct type.
	Members []NetworktemplateMembers `json:"members,omitempty"`
	// The name of this network template.
	Name *string `json:"name,omitempty"`
	// The netmask of the network in CIDR format.
	Netmask *int64 `json:"netmask,omitempty"`
	// The name in FQDN and/or IPv4 Address of the next server that the host needs to boot.
	Nextserver *string `json:"nextserver,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []NetworktemplateOptions `json:"options,omitempty"`
	// The PXE lease time value of a DHCP Network object. Some hosts use PXE (Preboot Execution Environment) to boot remotely from a server. To better manage your IP resources, set a different lease time for PXE boot requests. You can configure the DHCP server to allocate an IP address with a shorter lease time to hosts that send PXE boot requests, so IP addresses are not leased longer than necessary. A 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	PxeLeaseTime *int64 `json:"pxe_lease_time,omitempty"`
	// The list of IP address range templates assigned to this network template object. When you create a network based on a network template object that contains range templates, the IP address ranges are created based on the associated IP address range templates.
	RangeTemplates []string `json:"range_templates,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// THe registry (RIR) that allocated the network address space.
	Rir *string `json:"rir,omitempty"`
	// The RIR organization assoicated with the network.
	RirOrganization *string `json:"rir_organization,omitempty"`
	// The RIR registration action.
	RirRegistrationAction *string `json:"rir_registration_action,omitempty"`
	// The registration status of the network in RIR.
	RirRegistrationStatus *string `json:"rir_registration_status,omitempty"`
	// Determines whether to send the RIR registration request.
	SendRirRequest *bool `json:"send_rir_request,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: authority
	UseAuthority *bool `json:"use_authority,omitempty"`
	// Use flag for: bootfile
	UseBootfile *bool `json:"use_bootfile,omitempty"`
	// Use flag for: bootserver
	UseBootserver *bool `json:"use_bootserver,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: ddns_update_fixed_addresses
	UseDdnsUpdateFixedAddresses *bool `json:"use_ddns_update_fixed_addresses,omitempty"`
	// Use flag for: ddns_use_option81
	UseDdnsUseOption81 *bool `json:"use_ddns_use_option81,omitempty"`
	// Use flag for: deny_bootp
	UseDenyBootp *bool `json:"use_deny_bootp,omitempty"`
	// Use flag for: email_list
	UseEmailList *bool `json:"use_email_list,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: enable_dhcp_thresholds
	UseEnableDhcpThresholds *bool `json:"use_enable_dhcp_thresholds,omitempty"`
	// Use flag for: ignore_dhcp_option_list_request
	UseIgnoreDhcpOptionListRequest *bool `json:"use_ignore_dhcp_option_list_request,omitempty"`
	// Use flag for: ipam_email_addresses
	UseIpamEmailAddresses *bool `json:"use_ipam_email_addresses,omitempty"`
	// Use flag for: ipam_threshold_settings
	UseIpamThresholdSettings *bool `json:"use_ipam_threshold_settings,omitempty"`
	// Use flag for: ipam_trap_settings
	UseIpamTrapSettings *bool `json:"use_ipam_trap_settings,omitempty"`
	// Use flag for: lease_scavenge_time
	UseLeaseScavengeTime *bool `json:"use_lease_scavenge_time,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: nextserver
	UseNextserver *bool `json:"use_nextserver,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: pxe_lease_time
	UsePxeLeaseTime *bool `json:"use_pxe_lease_time,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
}

// NewNetworktemplate instantiates a new Networktemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworktemplate() *Networktemplate {
	this := Networktemplate{}
	return &this
}

// NewNetworktemplateWithDefaults instantiates a new Networktemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworktemplateWithDefaults() *Networktemplate {
	this := Networktemplate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Networktemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Networktemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Networktemplate) SetRef(v string) {
	o.Ref = &v
}

// GetAllowAnyNetmask returns the AllowAnyNetmask field value if set, zero value otherwise.
func (o *Networktemplate) GetAllowAnyNetmask() bool {
	if o == nil || IsNil(o.AllowAnyNetmask) {
		var ret bool
		return ret
	}
	return *o.AllowAnyNetmask
}

// GetAllowAnyNetmaskOk returns a tuple with the AllowAnyNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetAllowAnyNetmaskOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAnyNetmask) {
		return nil, false
	}
	return o.AllowAnyNetmask, true
}

// HasAllowAnyNetmask returns a boolean if a field has been set.
func (o *Networktemplate) HasAllowAnyNetmask() bool {
	if o != nil && !IsNil(o.AllowAnyNetmask) {
		return true
	}

	return false
}

// SetAllowAnyNetmask gets a reference to the given bool and assigns it to the AllowAnyNetmask field.
func (o *Networktemplate) SetAllowAnyNetmask(v bool) {
	o.AllowAnyNetmask = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Networktemplate) GetAuthority() bool {
	if o == nil || IsNil(o.Authority) {
		var ret bool
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *Networktemplate) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given bool and assigns it to the Authority field.
func (o *Networktemplate) SetAuthority(v bool) {
	o.Authority = &v
}

// GetAutoCreateReversezone returns the AutoCreateReversezone field value if set, zero value otherwise.
func (o *Networktemplate) GetAutoCreateReversezone() bool {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		var ret bool
		return ret
	}
	return *o.AutoCreateReversezone
}

// GetAutoCreateReversezoneOk returns a tuple with the AutoCreateReversezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetAutoCreateReversezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		return nil, false
	}
	return o.AutoCreateReversezone, true
}

// HasAutoCreateReversezone returns a boolean if a field has been set.
func (o *Networktemplate) HasAutoCreateReversezone() bool {
	if o != nil && !IsNil(o.AutoCreateReversezone) {
		return true
	}

	return false
}

// SetAutoCreateReversezone gets a reference to the given bool and assigns it to the AutoCreateReversezone field.
func (o *Networktemplate) SetAutoCreateReversezone(v bool) {
	o.AutoCreateReversezone = &v
}

// GetBootfile returns the Bootfile field value if set, zero value otherwise.
func (o *Networktemplate) GetBootfile() string {
	if o == nil || IsNil(o.Bootfile) {
		var ret string
		return ret
	}
	return *o.Bootfile
}

// GetBootfileOk returns a tuple with the Bootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetBootfileOk() (*string, bool) {
	if o == nil || IsNil(o.Bootfile) {
		return nil, false
	}
	return o.Bootfile, true
}

// HasBootfile returns a boolean if a field has been set.
func (o *Networktemplate) HasBootfile() bool {
	if o != nil && !IsNil(o.Bootfile) {
		return true
	}

	return false
}

// SetBootfile gets a reference to the given string and assigns it to the Bootfile field.
func (o *Networktemplate) SetBootfile(v string) {
	o.Bootfile = &v
}

// GetBootserver returns the Bootserver field value if set, zero value otherwise.
func (o *Networktemplate) GetBootserver() string {
	if o == nil || IsNil(o.Bootserver) {
		var ret string
		return ret
	}
	return *o.Bootserver
}

// GetBootserverOk returns a tuple with the Bootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetBootserverOk() (*string, bool) {
	if o == nil || IsNil(o.Bootserver) {
		return nil, false
	}
	return o.Bootserver, true
}

// HasBootserver returns a boolean if a field has been set.
func (o *Networktemplate) HasBootserver() bool {
	if o != nil && !IsNil(o.Bootserver) {
		return true
	}

	return false
}

// SetBootserver gets a reference to the given string and assigns it to the Bootserver field.
func (o *Networktemplate) SetBootserver(v string) {
	o.Bootserver = &v
}

// GetCloudApiCompatible returns the CloudApiCompatible field value if set, zero value otherwise.
func (o *Networktemplate) GetCloudApiCompatible() bool {
	if o == nil || IsNil(o.CloudApiCompatible) {
		var ret bool
		return ret
	}
	return *o.CloudApiCompatible
}

// GetCloudApiCompatibleOk returns a tuple with the CloudApiCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetCloudApiCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudApiCompatible) {
		return nil, false
	}
	return o.CloudApiCompatible, true
}

// HasCloudApiCompatible returns a boolean if a field has been set.
func (o *Networktemplate) HasCloudApiCompatible() bool {
	if o != nil && !IsNil(o.CloudApiCompatible) {
		return true
	}

	return false
}

// SetCloudApiCompatible gets a reference to the given bool and assigns it to the CloudApiCompatible field.
func (o *Networktemplate) SetCloudApiCompatible(v bool) {
	o.CloudApiCompatible = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Networktemplate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Networktemplate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Networktemplate) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Networktemplate) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Networktemplate) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Networktemplate) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Networktemplate) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDdnsUpdateFixedAddresses returns the DdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateFixedAddresses
}

// GetDdnsUpdateFixedAddressesOk returns a tuple with the DdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.DdnsUpdateFixedAddresses, true
}

// HasDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.DdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the DdnsUpdateFixedAddresses field.
func (o *Networktemplate) SetDdnsUpdateFixedAddresses(v bool) {
	o.DdnsUpdateFixedAddresses = &v
}

// GetDdnsUseOption81 returns the DdnsUseOption81 field value if set, zero value otherwise.
func (o *Networktemplate) GetDdnsUseOption81() bool {
	if o == nil || IsNil(o.DdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.DdnsUseOption81
}

// GetDdnsUseOption81Ok returns a tuple with the DdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseOption81) {
		return nil, false
	}
	return o.DdnsUseOption81, true
}

// HasDdnsUseOption81 returns a boolean if a field has been set.
func (o *Networktemplate) HasDdnsUseOption81() bool {
	if o != nil && !IsNil(o.DdnsUseOption81) {
		return true
	}

	return false
}

// SetDdnsUseOption81 gets a reference to the given bool and assigns it to the DdnsUseOption81 field.
func (o *Networktemplate) SetDdnsUseOption81(v bool) {
	o.DdnsUseOption81 = &v
}

// GetDelegatedMember returns the DelegatedMember field value if set, zero value otherwise.
func (o *Networktemplate) GetDelegatedMember() NetworktemplateDelegatedMember {
	if o == nil || IsNil(o.DelegatedMember) {
		var ret NetworktemplateDelegatedMember
		return ret
	}
	return *o.DelegatedMember
}

// GetDelegatedMemberOk returns a tuple with the DelegatedMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDelegatedMemberOk() (*NetworktemplateDelegatedMember, bool) {
	if o == nil || IsNil(o.DelegatedMember) {
		return nil, false
	}
	return o.DelegatedMember, true
}

// HasDelegatedMember returns a boolean if a field has been set.
func (o *Networktemplate) HasDelegatedMember() bool {
	if o != nil && !IsNil(o.DelegatedMember) {
		return true
	}

	return false
}

// SetDelegatedMember gets a reference to the given NetworktemplateDelegatedMember and assigns it to the DelegatedMember field.
func (o *Networktemplate) SetDelegatedMember(v NetworktemplateDelegatedMember) {
	o.DelegatedMember = &v
}

// GetDenyBootp returns the DenyBootp field value if set, zero value otherwise.
func (o *Networktemplate) GetDenyBootp() bool {
	if o == nil || IsNil(o.DenyBootp) {
		var ret bool
		return ret
	}
	return *o.DenyBootp
}

// GetDenyBootpOk returns a tuple with the DenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.DenyBootp) {
		return nil, false
	}
	return o.DenyBootp, true
}

// HasDenyBootp returns a boolean if a field has been set.
func (o *Networktemplate) HasDenyBootp() bool {
	if o != nil && !IsNil(o.DenyBootp) {
		return true
	}

	return false
}

// SetDenyBootp gets a reference to the given bool and assigns it to the DenyBootp field.
func (o *Networktemplate) SetDenyBootp(v bool) {
	o.DenyBootp = &v
}

// GetEmailList returns the EmailList field value if set, zero value otherwise.
func (o *Networktemplate) GetEmailList() []string {
	if o == nil || IsNil(o.EmailList) {
		var ret []string
		return ret
	}
	return o.EmailList
}

// GetEmailListOk returns a tuple with the EmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEmailListOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailList) {
		return nil, false
	}
	return o.EmailList, true
}

// HasEmailList returns a boolean if a field has been set.
func (o *Networktemplate) HasEmailList() bool {
	if o != nil && !IsNil(o.EmailList) {
		return true
	}

	return false
}

// SetEmailList gets a reference to the given []string and assigns it to the EmailList field.
func (o *Networktemplate) SetEmailList(v []string) {
	o.EmailList = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Networktemplate) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Networktemplate) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Networktemplate) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetEnableDhcpThresholds returns the EnableDhcpThresholds field value if set, zero value otherwise.
func (o *Networktemplate) GetEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.EnableDhcpThresholds
}

// GetEnableDhcpThresholdsOk returns a tuple with the EnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcpThresholds) {
		return nil, false
	}
	return o.EnableDhcpThresholds, true
}

// HasEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Networktemplate) HasEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.EnableDhcpThresholds) {
		return true
	}

	return false
}

// SetEnableDhcpThresholds gets a reference to the given bool and assigns it to the EnableDhcpThresholds field.
func (o *Networktemplate) SetEnableDhcpThresholds(v bool) {
	o.EnableDhcpThresholds = &v
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *Networktemplate) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *Networktemplate) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *Networktemplate) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnablePxeLeaseTime returns the EnablePxeLeaseTime field value if set, zero value otherwise.
func (o *Networktemplate) GetEnablePxeLeaseTime() bool {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.EnablePxeLeaseTime
}

// GetEnablePxeLeaseTimeOk returns a tuple with the EnablePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEnablePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePxeLeaseTime) {
		return nil, false
	}
	return o.EnablePxeLeaseTime, true
}

// HasEnablePxeLeaseTime returns a boolean if a field has been set.
func (o *Networktemplate) HasEnablePxeLeaseTime() bool {
	if o != nil && !IsNil(o.EnablePxeLeaseTime) {
		return true
	}

	return false
}

// SetEnablePxeLeaseTime gets a reference to the given bool and assigns it to the EnablePxeLeaseTime field.
func (o *Networktemplate) SetEnablePxeLeaseTime(v bool) {
	o.EnablePxeLeaseTime = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *Networktemplate) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *Networktemplate) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *Networktemplate) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Networktemplate) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Networktemplate) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Networktemplate) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFixedAddressTemplates returns the FixedAddressTemplates field value if set, zero value otherwise.
func (o *Networktemplate) GetFixedAddressTemplates() []string {
	if o == nil || IsNil(o.FixedAddressTemplates) {
		var ret []string
		return ret
	}
	return o.FixedAddressTemplates
}

// GetFixedAddressTemplatesOk returns a tuple with the FixedAddressTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetFixedAddressTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.FixedAddressTemplates) {
		return nil, false
	}
	return o.FixedAddressTemplates, true
}

// HasFixedAddressTemplates returns a boolean if a field has been set.
func (o *Networktemplate) HasFixedAddressTemplates() bool {
	if o != nil && !IsNil(o.FixedAddressTemplates) {
		return true
	}

	return false
}

// SetFixedAddressTemplates gets a reference to the given []string and assigns it to the FixedAddressTemplates field.
func (o *Networktemplate) SetFixedAddressTemplates(v []string) {
	o.FixedAddressTemplates = v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *Networktemplate) GetHighWaterMark() int64 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int64
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetHighWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *Networktemplate) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int64 and assigns it to the HighWaterMark field.
func (o *Networktemplate) SetHighWaterMark(v int64) {
	o.HighWaterMark = &v
}

// GetHighWaterMarkReset returns the HighWaterMarkReset field value if set, zero value otherwise.
func (o *Networktemplate) GetHighWaterMarkReset() int64 {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.HighWaterMarkReset
}

// GetHighWaterMarkResetOk returns a tuple with the HighWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetHighWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.HighWaterMarkReset) {
		return nil, false
	}
	return o.HighWaterMarkReset, true
}

// HasHighWaterMarkReset returns a boolean if a field has been set.
func (o *Networktemplate) HasHighWaterMarkReset() bool {
	if o != nil && !IsNil(o.HighWaterMarkReset) {
		return true
	}

	return false
}

// SetHighWaterMarkReset gets a reference to the given int64 and assigns it to the HighWaterMarkReset field.
func (o *Networktemplate) SetHighWaterMarkReset(v int64) {
	o.HighWaterMarkReset = &v
}

// GetIgnoreDhcpOptionListRequest returns the IgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Networktemplate) GetIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.IgnoreDhcpOptionListRequest
}

// GetIgnoreDhcpOptionListRequestOk returns a tuple with the IgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.IgnoreDhcpOptionListRequest, true
}

// HasIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Networktemplate) HasIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.IgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the IgnoreDhcpOptionListRequest field.
func (o *Networktemplate) SetIgnoreDhcpOptionListRequest(v bool) {
	o.IgnoreDhcpOptionListRequest = &v
}

// GetIpamEmailAddresses returns the IpamEmailAddresses field value if set, zero value otherwise.
func (o *Networktemplate) GetIpamEmailAddresses() []string {
	if o == nil || IsNil(o.IpamEmailAddresses) {
		var ret []string
		return ret
	}
	return o.IpamEmailAddresses
}

// GetIpamEmailAddressesOk returns a tuple with the IpamEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetIpamEmailAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpamEmailAddresses) {
		return nil, false
	}
	return o.IpamEmailAddresses, true
}

// HasIpamEmailAddresses returns a boolean if a field has been set.
func (o *Networktemplate) HasIpamEmailAddresses() bool {
	if o != nil && !IsNil(o.IpamEmailAddresses) {
		return true
	}

	return false
}

// SetIpamEmailAddresses gets a reference to the given []string and assigns it to the IpamEmailAddresses field.
func (o *Networktemplate) SetIpamEmailAddresses(v []string) {
	o.IpamEmailAddresses = v
}

// GetIpamThresholdSettings returns the IpamThresholdSettings field value if set, zero value otherwise.
func (o *Networktemplate) GetIpamThresholdSettings() NetworktemplateIpamThresholdSettings {
	if o == nil || IsNil(o.IpamThresholdSettings) {
		var ret NetworktemplateIpamThresholdSettings
		return ret
	}
	return *o.IpamThresholdSettings
}

// GetIpamThresholdSettingsOk returns a tuple with the IpamThresholdSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetIpamThresholdSettingsOk() (*NetworktemplateIpamThresholdSettings, bool) {
	if o == nil || IsNil(o.IpamThresholdSettings) {
		return nil, false
	}
	return o.IpamThresholdSettings, true
}

// HasIpamThresholdSettings returns a boolean if a field has been set.
func (o *Networktemplate) HasIpamThresholdSettings() bool {
	if o != nil && !IsNil(o.IpamThresholdSettings) {
		return true
	}

	return false
}

// SetIpamThresholdSettings gets a reference to the given NetworktemplateIpamThresholdSettings and assigns it to the IpamThresholdSettings field.
func (o *Networktemplate) SetIpamThresholdSettings(v NetworktemplateIpamThresholdSettings) {
	o.IpamThresholdSettings = &v
}

// GetIpamTrapSettings returns the IpamTrapSettings field value if set, zero value otherwise.
func (o *Networktemplate) GetIpamTrapSettings() NetworktemplateIpamTrapSettings {
	if o == nil || IsNil(o.IpamTrapSettings) {
		var ret NetworktemplateIpamTrapSettings
		return ret
	}
	return *o.IpamTrapSettings
}

// GetIpamTrapSettingsOk returns a tuple with the IpamTrapSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetIpamTrapSettingsOk() (*NetworktemplateIpamTrapSettings, bool) {
	if o == nil || IsNil(o.IpamTrapSettings) {
		return nil, false
	}
	return o.IpamTrapSettings, true
}

// HasIpamTrapSettings returns a boolean if a field has been set.
func (o *Networktemplate) HasIpamTrapSettings() bool {
	if o != nil && !IsNil(o.IpamTrapSettings) {
		return true
	}

	return false
}

// SetIpamTrapSettings gets a reference to the given NetworktemplateIpamTrapSettings and assigns it to the IpamTrapSettings field.
func (o *Networktemplate) SetIpamTrapSettings(v NetworktemplateIpamTrapSettings) {
	o.IpamTrapSettings = &v
}

// GetLeaseScavengeTime returns the LeaseScavengeTime field value if set, zero value otherwise.
func (o *Networktemplate) GetLeaseScavengeTime() int32 {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		var ret int32
		return ret
	}
	return *o.LeaseScavengeTime
}

// GetLeaseScavengeTimeOk returns a tuple with the LeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetLeaseScavengeTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LeaseScavengeTime) {
		return nil, false
	}
	return o.LeaseScavengeTime, true
}

// HasLeaseScavengeTime returns a boolean if a field has been set.
func (o *Networktemplate) HasLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.LeaseScavengeTime) {
		return true
	}

	return false
}

// SetLeaseScavengeTime gets a reference to the given int32 and assigns it to the LeaseScavengeTime field.
func (o *Networktemplate) SetLeaseScavengeTime(v int32) {
	o.LeaseScavengeTime = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Networktemplate) GetLogicFilterRules() []NetworktemplateLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []NetworktemplateLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetLogicFilterRulesOk() ([]NetworktemplateLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Networktemplate) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []NetworktemplateLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Networktemplate) SetLogicFilterRules(v []NetworktemplateLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *Networktemplate) GetLowWaterMark() int64 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int64
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetLowWaterMarkOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *Networktemplate) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int64 and assigns it to the LowWaterMark field.
func (o *Networktemplate) SetLowWaterMark(v int64) {
	o.LowWaterMark = &v
}

// GetLowWaterMarkReset returns the LowWaterMarkReset field value if set, zero value otherwise.
func (o *Networktemplate) GetLowWaterMarkReset() int64 {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		var ret int64
		return ret
	}
	return *o.LowWaterMarkReset
}

// GetLowWaterMarkResetOk returns a tuple with the LowWaterMarkReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetLowWaterMarkResetOk() (*int64, bool) {
	if o == nil || IsNil(o.LowWaterMarkReset) {
		return nil, false
	}
	return o.LowWaterMarkReset, true
}

// HasLowWaterMarkReset returns a boolean if a field has been set.
func (o *Networktemplate) HasLowWaterMarkReset() bool {
	if o != nil && !IsNil(o.LowWaterMarkReset) {
		return true
	}

	return false
}

// SetLowWaterMarkReset gets a reference to the given int64 and assigns it to the LowWaterMarkReset field.
func (o *Networktemplate) SetLowWaterMarkReset(v int64) {
	o.LowWaterMarkReset = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Networktemplate) GetMembers() []NetworktemplateMembers {
	if o == nil || IsNil(o.Members) {
		var ret []NetworktemplateMembers
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetMembersOk() ([]NetworktemplateMembers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Networktemplate) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []NetworktemplateMembers and assigns it to the Members field.
func (o *Networktemplate) SetMembers(v []NetworktemplateMembers) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Networktemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Networktemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Networktemplate) SetName(v string) {
	o.Name = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *Networktemplate) GetNetmask() int64 {
	if o == nil || IsNil(o.Netmask) {
		var ret int64
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetNetmaskOk() (*int64, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *Networktemplate) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given int64 and assigns it to the Netmask field.
func (o *Networktemplate) SetNetmask(v int64) {
	o.Netmask = &v
}

// GetNextserver returns the Nextserver field value if set, zero value otherwise.
func (o *Networktemplate) GetNextserver() string {
	if o == nil || IsNil(o.Nextserver) {
		var ret string
		return ret
	}
	return *o.Nextserver
}

// GetNextserverOk returns a tuple with the Nextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetNextserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nextserver) {
		return nil, false
	}
	return o.Nextserver, true
}

// HasNextserver returns a boolean if a field has been set.
func (o *Networktemplate) HasNextserver() bool {
	if o != nil && !IsNil(o.Nextserver) {
		return true
	}

	return false
}

// SetNextserver gets a reference to the given string and assigns it to the Nextserver field.
func (o *Networktemplate) SetNextserver(v string) {
	o.Nextserver = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Networktemplate) GetOptions() []NetworktemplateOptions {
	if o == nil || IsNil(o.Options) {
		var ret []NetworktemplateOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetOptionsOk() ([]NetworktemplateOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Networktemplate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []NetworktemplateOptions and assigns it to the Options field.
func (o *Networktemplate) SetOptions(v []NetworktemplateOptions) {
	o.Options = v
}

// GetPxeLeaseTime returns the PxeLeaseTime field value if set, zero value otherwise.
func (o *Networktemplate) GetPxeLeaseTime() int64 {
	if o == nil || IsNil(o.PxeLeaseTime) {
		var ret int64
		return ret
	}
	return *o.PxeLeaseTime
}

// GetPxeLeaseTimeOk returns a tuple with the PxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetPxeLeaseTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PxeLeaseTime) {
		return nil, false
	}
	return o.PxeLeaseTime, true
}

// HasPxeLeaseTime returns a boolean if a field has been set.
func (o *Networktemplate) HasPxeLeaseTime() bool {
	if o != nil && !IsNil(o.PxeLeaseTime) {
		return true
	}

	return false
}

// SetPxeLeaseTime gets a reference to the given int64 and assigns it to the PxeLeaseTime field.
func (o *Networktemplate) SetPxeLeaseTime(v int64) {
	o.PxeLeaseTime = &v
}

// GetRangeTemplates returns the RangeTemplates field value if set, zero value otherwise.
func (o *Networktemplate) GetRangeTemplates() []string {
	if o == nil || IsNil(o.RangeTemplates) {
		var ret []string
		return ret
	}
	return o.RangeTemplates
}

// GetRangeTemplatesOk returns a tuple with the RangeTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRangeTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.RangeTemplates) {
		return nil, false
	}
	return o.RangeTemplates, true
}

// HasRangeTemplates returns a boolean if a field has been set.
func (o *Networktemplate) HasRangeTemplates() bool {
	if o != nil && !IsNil(o.RangeTemplates) {
		return true
	}

	return false
}

// SetRangeTemplates gets a reference to the given []string and assigns it to the RangeTemplates field.
func (o *Networktemplate) SetRangeTemplates(v []string) {
	o.RangeTemplates = v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Networktemplate) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Networktemplate) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Networktemplate) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *Networktemplate) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *Networktemplate) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *Networktemplate) SetRir(v string) {
	o.Rir = &v
}

// GetRirOrganization returns the RirOrganization field value if set, zero value otherwise.
func (o *Networktemplate) GetRirOrganization() string {
	if o == nil || IsNil(o.RirOrganization) {
		var ret string
		return ret
	}
	return *o.RirOrganization
}

// GetRirOrganizationOk returns a tuple with the RirOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRirOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.RirOrganization) {
		return nil, false
	}
	return o.RirOrganization, true
}

// HasRirOrganization returns a boolean if a field has been set.
func (o *Networktemplate) HasRirOrganization() bool {
	if o != nil && !IsNil(o.RirOrganization) {
		return true
	}

	return false
}

// SetRirOrganization gets a reference to the given string and assigns it to the RirOrganization field.
func (o *Networktemplate) SetRirOrganization(v string) {
	o.RirOrganization = &v
}

// GetRirRegistrationAction returns the RirRegistrationAction field value if set, zero value otherwise.
func (o *Networktemplate) GetRirRegistrationAction() string {
	if o == nil || IsNil(o.RirRegistrationAction) {
		var ret string
		return ret
	}
	return *o.RirRegistrationAction
}

// GetRirRegistrationActionOk returns a tuple with the RirRegistrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRirRegistrationActionOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationAction) {
		return nil, false
	}
	return o.RirRegistrationAction, true
}

// HasRirRegistrationAction returns a boolean if a field has been set.
func (o *Networktemplate) HasRirRegistrationAction() bool {
	if o != nil && !IsNil(o.RirRegistrationAction) {
		return true
	}

	return false
}

// SetRirRegistrationAction gets a reference to the given string and assigns it to the RirRegistrationAction field.
func (o *Networktemplate) SetRirRegistrationAction(v string) {
	o.RirRegistrationAction = &v
}

// GetRirRegistrationStatus returns the RirRegistrationStatus field value if set, zero value otherwise.
func (o *Networktemplate) GetRirRegistrationStatus() string {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RirRegistrationStatus
}

// GetRirRegistrationStatusOk returns a tuple with the RirRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetRirRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		return nil, false
	}
	return o.RirRegistrationStatus, true
}

// HasRirRegistrationStatus returns a boolean if a field has been set.
func (o *Networktemplate) HasRirRegistrationStatus() bool {
	if o != nil && !IsNil(o.RirRegistrationStatus) {
		return true
	}

	return false
}

// SetRirRegistrationStatus gets a reference to the given string and assigns it to the RirRegistrationStatus field.
func (o *Networktemplate) SetRirRegistrationStatus(v string) {
	o.RirRegistrationStatus = &v
}

// GetSendRirRequest returns the SendRirRequest field value if set, zero value otherwise.
func (o *Networktemplate) GetSendRirRequest() bool {
	if o == nil || IsNil(o.SendRirRequest) {
		var ret bool
		return ret
	}
	return *o.SendRirRequest
}

// GetSendRirRequestOk returns a tuple with the SendRirRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetSendRirRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRirRequest) {
		return nil, false
	}
	return o.SendRirRequest, true
}

// HasSendRirRequest returns a boolean if a field has been set.
func (o *Networktemplate) HasSendRirRequest() bool {
	if o != nil && !IsNil(o.SendRirRequest) {
		return true
	}

	return false
}

// SetSendRirRequest gets a reference to the given bool and assigns it to the SendRirRequest field.
func (o *Networktemplate) SetSendRirRequest(v bool) {
	o.SendRirRequest = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Networktemplate) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Networktemplate) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Networktemplate) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseAuthority returns the UseAuthority field value if set, zero value otherwise.
func (o *Networktemplate) GetUseAuthority() bool {
	if o == nil || IsNil(o.UseAuthority) {
		var ret bool
		return ret
	}
	return *o.UseAuthority
}

// GetUseAuthorityOk returns a tuple with the UseAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAuthority) {
		return nil, false
	}
	return o.UseAuthority, true
}

// HasUseAuthority returns a boolean if a field has been set.
func (o *Networktemplate) HasUseAuthority() bool {
	if o != nil && !IsNil(o.UseAuthority) {
		return true
	}

	return false
}

// SetUseAuthority gets a reference to the given bool and assigns it to the UseAuthority field.
func (o *Networktemplate) SetUseAuthority(v bool) {
	o.UseAuthority = &v
}

// GetUseBootfile returns the UseBootfile field value if set, zero value otherwise.
func (o *Networktemplate) GetUseBootfile() bool {
	if o == nil || IsNil(o.UseBootfile) {
		var ret bool
		return ret
	}
	return *o.UseBootfile
}

// GetUseBootfileOk returns a tuple with the UseBootfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseBootfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootfile) {
		return nil, false
	}
	return o.UseBootfile, true
}

// HasUseBootfile returns a boolean if a field has been set.
func (o *Networktemplate) HasUseBootfile() bool {
	if o != nil && !IsNil(o.UseBootfile) {
		return true
	}

	return false
}

// SetUseBootfile gets a reference to the given bool and assigns it to the UseBootfile field.
func (o *Networktemplate) SetUseBootfile(v bool) {
	o.UseBootfile = &v
}

// GetUseBootserver returns the UseBootserver field value if set, zero value otherwise.
func (o *Networktemplate) GetUseBootserver() bool {
	if o == nil || IsNil(o.UseBootserver) {
		var ret bool
		return ret
	}
	return *o.UseBootserver
}

// GetUseBootserverOk returns a tuple with the UseBootserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseBootserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBootserver) {
		return nil, false
	}
	return o.UseBootserver, true
}

// HasUseBootserver returns a boolean if a field has been set.
func (o *Networktemplate) HasUseBootserver() bool {
	if o != nil && !IsNil(o.UseBootserver) {
		return true
	}

	return false
}

// SetUseBootserver gets a reference to the given bool and assigns it to the UseBootserver field.
func (o *Networktemplate) SetUseBootserver(v bool) {
	o.UseBootserver = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Networktemplate) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Networktemplate) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Networktemplate) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDdnsUpdateFixedAddresses returns the UseDdnsUpdateFixedAddresses field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDdnsUpdateFixedAddresses() bool {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUpdateFixedAddresses
}

// GetUseDdnsUpdateFixedAddressesOk returns a tuple with the UseDdnsUpdateFixedAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDdnsUpdateFixedAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUpdateFixedAddresses) {
		return nil, false
	}
	return o.UseDdnsUpdateFixedAddresses, true
}

// HasUseDdnsUpdateFixedAddresses returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDdnsUpdateFixedAddresses() bool {
	if o != nil && !IsNil(o.UseDdnsUpdateFixedAddresses) {
		return true
	}

	return false
}

// SetUseDdnsUpdateFixedAddresses gets a reference to the given bool and assigns it to the UseDdnsUpdateFixedAddresses field.
func (o *Networktemplate) SetUseDdnsUpdateFixedAddresses(v bool) {
	o.UseDdnsUpdateFixedAddresses = &v
}

// GetUseDdnsUseOption81 returns the UseDdnsUseOption81 field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDdnsUseOption81() bool {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		var ret bool
		return ret
	}
	return *o.UseDdnsUseOption81
}

// GetUseDdnsUseOption81Ok returns a tuple with the UseDdnsUseOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDdnsUseOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsUseOption81) {
		return nil, false
	}
	return o.UseDdnsUseOption81, true
}

// HasUseDdnsUseOption81 returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDdnsUseOption81() bool {
	if o != nil && !IsNil(o.UseDdnsUseOption81) {
		return true
	}

	return false
}

// SetUseDdnsUseOption81 gets a reference to the given bool and assigns it to the UseDdnsUseOption81 field.
func (o *Networktemplate) SetUseDdnsUseOption81(v bool) {
	o.UseDdnsUseOption81 = &v
}

// GetUseDenyBootp returns the UseDenyBootp field value if set, zero value otherwise.
func (o *Networktemplate) GetUseDenyBootp() bool {
	if o == nil || IsNil(o.UseDenyBootp) {
		var ret bool
		return ret
	}
	return *o.UseDenyBootp
}

// GetUseDenyBootpOk returns a tuple with the UseDenyBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseDenyBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDenyBootp) {
		return nil, false
	}
	return o.UseDenyBootp, true
}

// HasUseDenyBootp returns a boolean if a field has been set.
func (o *Networktemplate) HasUseDenyBootp() bool {
	if o != nil && !IsNil(o.UseDenyBootp) {
		return true
	}

	return false
}

// SetUseDenyBootp gets a reference to the given bool and assigns it to the UseDenyBootp field.
func (o *Networktemplate) SetUseDenyBootp(v bool) {
	o.UseDenyBootp = &v
}

// GetUseEmailList returns the UseEmailList field value if set, zero value otherwise.
func (o *Networktemplate) GetUseEmailList() bool {
	if o == nil || IsNil(o.UseEmailList) {
		var ret bool
		return ret
	}
	return *o.UseEmailList
}

// GetUseEmailListOk returns a tuple with the UseEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseEmailListOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmailList) {
		return nil, false
	}
	return o.UseEmailList, true
}

// HasUseEmailList returns a boolean if a field has been set.
func (o *Networktemplate) HasUseEmailList() bool {
	if o != nil && !IsNil(o.UseEmailList) {
		return true
	}

	return false
}

// SetUseEmailList gets a reference to the given bool and assigns it to the UseEmailList field.
func (o *Networktemplate) SetUseEmailList(v bool) {
	o.UseEmailList = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Networktemplate) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Networktemplate) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Networktemplate) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseEnableDhcpThresholds returns the UseEnableDhcpThresholds field value if set, zero value otherwise.
func (o *Networktemplate) GetUseEnableDhcpThresholds() bool {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		var ret bool
		return ret
	}
	return *o.UseEnableDhcpThresholds
}

// GetUseEnableDhcpThresholdsOk returns a tuple with the UseEnableDhcpThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseEnableDhcpThresholdsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDhcpThresholds) {
		return nil, false
	}
	return o.UseEnableDhcpThresholds, true
}

// HasUseEnableDhcpThresholds returns a boolean if a field has been set.
func (o *Networktemplate) HasUseEnableDhcpThresholds() bool {
	if o != nil && !IsNil(o.UseEnableDhcpThresholds) {
		return true
	}

	return false
}

// SetUseEnableDhcpThresholds gets a reference to the given bool and assigns it to the UseEnableDhcpThresholds field.
func (o *Networktemplate) SetUseEnableDhcpThresholds(v bool) {
	o.UseEnableDhcpThresholds = &v
}

// GetUseIgnoreDhcpOptionListRequest returns the UseIgnoreDhcpOptionListRequest field value if set, zero value otherwise.
func (o *Networktemplate) GetUseIgnoreDhcpOptionListRequest() bool {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		var ret bool
		return ret
	}
	return *o.UseIgnoreDhcpOptionListRequest
}

// GetUseIgnoreDhcpOptionListRequestOk returns a tuple with the UseIgnoreDhcpOptionListRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseIgnoreDhcpOptionListRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return nil, false
	}
	return o.UseIgnoreDhcpOptionListRequest, true
}

// HasUseIgnoreDhcpOptionListRequest returns a boolean if a field has been set.
func (o *Networktemplate) HasUseIgnoreDhcpOptionListRequest() bool {
	if o != nil && !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		return true
	}

	return false
}

// SetUseIgnoreDhcpOptionListRequest gets a reference to the given bool and assigns it to the UseIgnoreDhcpOptionListRequest field.
func (o *Networktemplate) SetUseIgnoreDhcpOptionListRequest(v bool) {
	o.UseIgnoreDhcpOptionListRequest = &v
}

// GetUseIpamEmailAddresses returns the UseIpamEmailAddresses field value if set, zero value otherwise.
func (o *Networktemplate) GetUseIpamEmailAddresses() bool {
	if o == nil || IsNil(o.UseIpamEmailAddresses) {
		var ret bool
		return ret
	}
	return *o.UseIpamEmailAddresses
}

// GetUseIpamEmailAddressesOk returns a tuple with the UseIpamEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseIpamEmailAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamEmailAddresses) {
		return nil, false
	}
	return o.UseIpamEmailAddresses, true
}

// HasUseIpamEmailAddresses returns a boolean if a field has been set.
func (o *Networktemplate) HasUseIpamEmailAddresses() bool {
	if o != nil && !IsNil(o.UseIpamEmailAddresses) {
		return true
	}

	return false
}

// SetUseIpamEmailAddresses gets a reference to the given bool and assigns it to the UseIpamEmailAddresses field.
func (o *Networktemplate) SetUseIpamEmailAddresses(v bool) {
	o.UseIpamEmailAddresses = &v
}

// GetUseIpamThresholdSettings returns the UseIpamThresholdSettings field value if set, zero value otherwise.
func (o *Networktemplate) GetUseIpamThresholdSettings() bool {
	if o == nil || IsNil(o.UseIpamThresholdSettings) {
		var ret bool
		return ret
	}
	return *o.UseIpamThresholdSettings
}

// GetUseIpamThresholdSettingsOk returns a tuple with the UseIpamThresholdSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseIpamThresholdSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamThresholdSettings) {
		return nil, false
	}
	return o.UseIpamThresholdSettings, true
}

// HasUseIpamThresholdSettings returns a boolean if a field has been set.
func (o *Networktemplate) HasUseIpamThresholdSettings() bool {
	if o != nil && !IsNil(o.UseIpamThresholdSettings) {
		return true
	}

	return false
}

// SetUseIpamThresholdSettings gets a reference to the given bool and assigns it to the UseIpamThresholdSettings field.
func (o *Networktemplate) SetUseIpamThresholdSettings(v bool) {
	o.UseIpamThresholdSettings = &v
}

// GetUseIpamTrapSettings returns the UseIpamTrapSettings field value if set, zero value otherwise.
func (o *Networktemplate) GetUseIpamTrapSettings() bool {
	if o == nil || IsNil(o.UseIpamTrapSettings) {
		var ret bool
		return ret
	}
	return *o.UseIpamTrapSettings
}

// GetUseIpamTrapSettingsOk returns a tuple with the UseIpamTrapSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseIpamTrapSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIpamTrapSettings) {
		return nil, false
	}
	return o.UseIpamTrapSettings, true
}

// HasUseIpamTrapSettings returns a boolean if a field has been set.
func (o *Networktemplate) HasUseIpamTrapSettings() bool {
	if o != nil && !IsNil(o.UseIpamTrapSettings) {
		return true
	}

	return false
}

// SetUseIpamTrapSettings gets a reference to the given bool and assigns it to the UseIpamTrapSettings field.
func (o *Networktemplate) SetUseIpamTrapSettings(v bool) {
	o.UseIpamTrapSettings = &v
}

// GetUseLeaseScavengeTime returns the UseLeaseScavengeTime field value if set, zero value otherwise.
func (o *Networktemplate) GetUseLeaseScavengeTime() bool {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		var ret bool
		return ret
	}
	return *o.UseLeaseScavengeTime
}

// GetUseLeaseScavengeTimeOk returns a tuple with the UseLeaseScavengeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseLeaseScavengeTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLeaseScavengeTime) {
		return nil, false
	}
	return o.UseLeaseScavengeTime, true
}

// HasUseLeaseScavengeTime returns a boolean if a field has been set.
func (o *Networktemplate) HasUseLeaseScavengeTime() bool {
	if o != nil && !IsNil(o.UseLeaseScavengeTime) {
		return true
	}

	return false
}

// SetUseLeaseScavengeTime gets a reference to the given bool and assigns it to the UseLeaseScavengeTime field.
func (o *Networktemplate) SetUseLeaseScavengeTime(v bool) {
	o.UseLeaseScavengeTime = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Networktemplate) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Networktemplate) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Networktemplate) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseNextserver returns the UseNextserver field value if set, zero value otherwise.
func (o *Networktemplate) GetUseNextserver() bool {
	if o == nil || IsNil(o.UseNextserver) {
		var ret bool
		return ret
	}
	return *o.UseNextserver
}

// GetUseNextserverOk returns a tuple with the UseNextserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseNextserverOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNextserver) {
		return nil, false
	}
	return o.UseNextserver, true
}

// HasUseNextserver returns a boolean if a field has been set.
func (o *Networktemplate) HasUseNextserver() bool {
	if o != nil && !IsNil(o.UseNextserver) {
		return true
	}

	return false
}

// SetUseNextserver gets a reference to the given bool and assigns it to the UseNextserver field.
func (o *Networktemplate) SetUseNextserver(v bool) {
	o.UseNextserver = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Networktemplate) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Networktemplate) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Networktemplate) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePxeLeaseTime returns the UsePxeLeaseTime field value if set, zero value otherwise.
func (o *Networktemplate) GetUsePxeLeaseTime() bool {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		var ret bool
		return ret
	}
	return *o.UsePxeLeaseTime
}

// GetUsePxeLeaseTimeOk returns a tuple with the UsePxeLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUsePxeLeaseTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePxeLeaseTime) {
		return nil, false
	}
	return o.UsePxeLeaseTime, true
}

// HasUsePxeLeaseTime returns a boolean if a field has been set.
func (o *Networktemplate) HasUsePxeLeaseTime() bool {
	if o != nil && !IsNil(o.UsePxeLeaseTime) {
		return true
	}

	return false
}

// SetUsePxeLeaseTime gets a reference to the given bool and assigns it to the UsePxeLeaseTime field.
func (o *Networktemplate) SetUsePxeLeaseTime(v bool) {
	o.UsePxeLeaseTime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Networktemplate) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Networktemplate) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Networktemplate) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Networktemplate) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networktemplate) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Networktemplate) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Networktemplate) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

func (o Networktemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Networktemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AllowAnyNetmask) {
		toSerialize["allow_any_netmask"] = o.AllowAnyNetmask
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.AutoCreateReversezone) {
		toSerialize["auto_create_reversezone"] = o.AutoCreateReversezone
	}
	if !IsNil(o.Bootfile) {
		toSerialize["bootfile"] = o.Bootfile
	}
	if !IsNil(o.Bootserver) {
		toSerialize["bootserver"] = o.Bootserver
	}
	if !IsNil(o.CloudApiCompatible) {
		toSerialize["cloud_api_compatible"] = o.CloudApiCompatible
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DdnsUpdateFixedAddresses) {
		toSerialize["ddns_update_fixed_addresses"] = o.DdnsUpdateFixedAddresses
	}
	if !IsNil(o.DdnsUseOption81) {
		toSerialize["ddns_use_option81"] = o.DdnsUseOption81
	}
	if !IsNil(o.DelegatedMember) {
		toSerialize["delegated_member"] = o.DelegatedMember
	}
	if !IsNil(o.DenyBootp) {
		toSerialize["deny_bootp"] = o.DenyBootp
	}
	if !IsNil(o.EmailList) {
		toSerialize["email_list"] = o.EmailList
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.EnableDhcpThresholds) {
		toSerialize["enable_dhcp_thresholds"] = o.EnableDhcpThresholds
	}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnablePxeLeaseTime) {
		toSerialize["enable_pxe_lease_time"] = o.EnablePxeLeaseTime
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FixedAddressTemplates) {
		toSerialize["fixed_address_templates"] = o.FixedAddressTemplates
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["high_water_mark"] = o.HighWaterMark
	}
	if !IsNil(o.HighWaterMarkReset) {
		toSerialize["high_water_mark_reset"] = o.HighWaterMarkReset
	}
	if !IsNil(o.IgnoreDhcpOptionListRequest) {
		toSerialize["ignore_dhcp_option_list_request"] = o.IgnoreDhcpOptionListRequest
	}
	if !IsNil(o.IpamEmailAddresses) {
		toSerialize["ipam_email_addresses"] = o.IpamEmailAddresses
	}
	if !IsNil(o.IpamThresholdSettings) {
		toSerialize["ipam_threshold_settings"] = o.IpamThresholdSettings
	}
	if !IsNil(o.IpamTrapSettings) {
		toSerialize["ipam_trap_settings"] = o.IpamTrapSettings
	}
	if !IsNil(o.LeaseScavengeTime) {
		toSerialize["lease_scavenge_time"] = o.LeaseScavengeTime
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["low_water_mark"] = o.LowWaterMark
	}
	if !IsNil(o.LowWaterMarkReset) {
		toSerialize["low_water_mark_reset"] = o.LowWaterMarkReset
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Nextserver) {
		toSerialize["nextserver"] = o.Nextserver
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PxeLeaseTime) {
		toSerialize["pxe_lease_time"] = o.PxeLeaseTime
	}
	if !IsNil(o.RangeTemplates) {
		toSerialize["range_templates"] = o.RangeTemplates
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.RirOrganization) {
		toSerialize["rir_organization"] = o.RirOrganization
	}
	if !IsNil(o.RirRegistrationAction) {
		toSerialize["rir_registration_action"] = o.RirRegistrationAction
	}
	if !IsNil(o.RirRegistrationStatus) {
		toSerialize["rir_registration_status"] = o.RirRegistrationStatus
	}
	if !IsNil(o.SendRirRequest) {
		toSerialize["send_rir_request"] = o.SendRirRequest
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseAuthority) {
		toSerialize["use_authority"] = o.UseAuthority
	}
	if !IsNil(o.UseBootfile) {
		toSerialize["use_bootfile"] = o.UseBootfile
	}
	if !IsNil(o.UseBootserver) {
		toSerialize["use_bootserver"] = o.UseBootserver
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDdnsUpdateFixedAddresses) {
		toSerialize["use_ddns_update_fixed_addresses"] = o.UseDdnsUpdateFixedAddresses
	}
	if !IsNil(o.UseDdnsUseOption81) {
		toSerialize["use_ddns_use_option81"] = o.UseDdnsUseOption81
	}
	if !IsNil(o.UseDenyBootp) {
		toSerialize["use_deny_bootp"] = o.UseDenyBootp
	}
	if !IsNil(o.UseEmailList) {
		toSerialize["use_email_list"] = o.UseEmailList
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseEnableDhcpThresholds) {
		toSerialize["use_enable_dhcp_thresholds"] = o.UseEnableDhcpThresholds
	}
	if !IsNil(o.UseIgnoreDhcpOptionListRequest) {
		toSerialize["use_ignore_dhcp_option_list_request"] = o.UseIgnoreDhcpOptionListRequest
	}
	if !IsNil(o.UseIpamEmailAddresses) {
		toSerialize["use_ipam_email_addresses"] = o.UseIpamEmailAddresses
	}
	if !IsNil(o.UseIpamThresholdSettings) {
		toSerialize["use_ipam_threshold_settings"] = o.UseIpamThresholdSettings
	}
	if !IsNil(o.UseIpamTrapSettings) {
		toSerialize["use_ipam_trap_settings"] = o.UseIpamTrapSettings
	}
	if !IsNil(o.UseLeaseScavengeTime) {
		toSerialize["use_lease_scavenge_time"] = o.UseLeaseScavengeTime
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseNextserver) {
		toSerialize["use_nextserver"] = o.UseNextserver
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePxeLeaseTime) {
		toSerialize["use_pxe_lease_time"] = o.UsePxeLeaseTime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	return toSerialize, nil
}

type NullableNetworktemplate struct {
	value *Networktemplate
	isSet bool
}

func (v NullableNetworktemplate) Get() *Networktemplate {
	return v.value
}

func (v *NullableNetworktemplate) Set(val *Networktemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworktemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworktemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworktemplate(val *Networktemplate) *NullableNetworktemplate {
	return &NullableNetworktemplate{value: val, isSet: true}
}

func (v NullableNetworktemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworktemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
