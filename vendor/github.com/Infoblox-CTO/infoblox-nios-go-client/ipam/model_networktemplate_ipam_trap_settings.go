/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the NetworktemplateIpamTrapSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworktemplateIpamTrapSettings{}

// NetworktemplateIpamTrapSettings struct for NetworktemplateIpamTrapSettings
type NetworktemplateIpamTrapSettings struct {
	// Determines whether sending warnings by email is enabled or not.
	EnableEmailWarnings *bool `json:"enable_email_warnings,omitempty"`
	// Determines whether sending warnings by SNMP is enabled or not.
	EnableSnmpWarnings   *bool `json:"enable_snmp_warnings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworktemplateIpamTrapSettings NetworktemplateIpamTrapSettings

// NewNetworktemplateIpamTrapSettings instantiates a new NetworktemplateIpamTrapSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworktemplateIpamTrapSettings() *NetworktemplateIpamTrapSettings {
	this := NetworktemplateIpamTrapSettings{}
	return &this
}

// NewNetworktemplateIpamTrapSettingsWithDefaults instantiates a new NetworktemplateIpamTrapSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworktemplateIpamTrapSettingsWithDefaults() *NetworktemplateIpamTrapSettings {
	this := NetworktemplateIpamTrapSettings{}
	return &this
}

// GetEnableEmailWarnings returns the EnableEmailWarnings field value if set, zero value otherwise.
func (o *NetworktemplateIpamTrapSettings) GetEnableEmailWarnings() bool {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableEmailWarnings
}

// GetEnableEmailWarningsOk returns a tuple with the EnableEmailWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworktemplateIpamTrapSettings) GetEnableEmailWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailWarnings) {
		return nil, false
	}
	return o.EnableEmailWarnings, true
}

// HasEnableEmailWarnings returns a boolean if a field has been set.
func (o *NetworktemplateIpamTrapSettings) HasEnableEmailWarnings() bool {
	if o != nil && !IsNil(o.EnableEmailWarnings) {
		return true
	}

	return false
}

// SetEnableEmailWarnings gets a reference to the given bool and assigns it to the EnableEmailWarnings field.
func (o *NetworktemplateIpamTrapSettings) SetEnableEmailWarnings(v bool) {
	o.EnableEmailWarnings = &v
}

// GetEnableSnmpWarnings returns the EnableSnmpWarnings field value if set, zero value otherwise.
func (o *NetworktemplateIpamTrapSettings) GetEnableSnmpWarnings() bool {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		var ret bool
		return ret
	}
	return *o.EnableSnmpWarnings
}

// GetEnableSnmpWarningsOk returns a tuple with the EnableSnmpWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworktemplateIpamTrapSettings) GetEnableSnmpWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSnmpWarnings) {
		return nil, false
	}
	return o.EnableSnmpWarnings, true
}

// HasEnableSnmpWarnings returns a boolean if a field has been set.
func (o *NetworktemplateIpamTrapSettings) HasEnableSnmpWarnings() bool {
	if o != nil && !IsNil(o.EnableSnmpWarnings) {
		return true
	}

	return false
}

// SetEnableSnmpWarnings gets a reference to the given bool and assigns it to the EnableSnmpWarnings field.
func (o *NetworktemplateIpamTrapSettings) SetEnableSnmpWarnings(v bool) {
	o.EnableSnmpWarnings = &v
}

func (o NetworktemplateIpamTrapSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworktemplateIpamTrapSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableEmailWarnings) {
		toSerialize["enable_email_warnings"] = o.EnableEmailWarnings
	}
	if !IsNil(o.EnableSnmpWarnings) {
		toSerialize["enable_snmp_warnings"] = o.EnableSnmpWarnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworktemplateIpamTrapSettings) UnmarshalJSON(data []byte) (err error) {
	varNetworktemplateIpamTrapSettings := _NetworktemplateIpamTrapSettings{}

	err = json.Unmarshal(data, &varNetworktemplateIpamTrapSettings)

	if err != nil {
		return err
	}

	*o = NetworktemplateIpamTrapSettings(varNetworktemplateIpamTrapSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable_email_warnings")
		delete(additionalProperties, "enable_snmp_warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworktemplateIpamTrapSettings struct {
	value *NetworktemplateIpamTrapSettings
	isSet bool
}

func (v NullableNetworktemplateIpamTrapSettings) Get() *NetworktemplateIpamTrapSettings {
	return v.value
}

func (v *NullableNetworktemplateIpamTrapSettings) Set(val *NetworktemplateIpamTrapSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworktemplateIpamTrapSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworktemplateIpamTrapSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworktemplateIpamTrapSettings(val *NetworktemplateIpamTrapSettings) *NullableNetworktemplateIpamTrapSettings {
	return &NullableNetworktemplateIpamTrapSettings{value: val, isSet: true}
}

func (v NullableNetworktemplateIpamTrapSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworktemplateIpamTrapSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
