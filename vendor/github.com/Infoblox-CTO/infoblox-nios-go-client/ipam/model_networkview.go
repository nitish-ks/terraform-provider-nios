/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Networkview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Networkview{}

// Networkview struct for Networkview
type Networkview struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The list of DNS views associated with this network view.
	AssociatedDnsViews []string `json:"associated_dns_views,omitempty"`
	// The list of members associated with a network view.
	AssociatedMembers []NetworkviewAssociatedMembers `json:"associated_members,omitempty"`
	CloudInfo         *NetworkviewCloudInfo          `json:"cloud_info,omitempty"`
	// Comment for the network view; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// DNS views that will receive the updates if you enable the appliance to send updates to Grid members.
	DdnsDnsView *string `json:"ddns_dns_view,omitempty"`
	// An array of Ddns Zone Primary dhcpddns structs that lists the information of primary zone to wich DDNS updates should be sent.
	DdnsZonePrimaries []NetworkviewDdnsZonePrimaries `json:"ddns_zone_primaries,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// This field contains the federated realms associated to this network view
	FederatedRealms []NetworkviewFederatedRealms `json:"federated_realms,omitempty"`
	// The list of linked authoritative DNS zones.
	InternalForwardZones []map[string]interface{} `json:"internal_forward_zones,omitempty"`
	// The NIOS appliance provides one default network view. You can rename the default view and change its settings, but you cannot delete it. There must always be at least one network view in the appliance.
	IsDefault *bool `json:"is_default,omitempty"`
	// This field controls whether this object is synchronized with the Multi-Grid Master. If this field is set to True, objects are not synchronized.
	MgmPrivate   *bool                    `json:"mgm_private,omitempty"`
	MsAdUserData *NetworkviewMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// Name of the network view.
	Name *string `json:"name,omitempty"`
	// The list of forward-mapping zones to which the DHCP server sends the updates.
	RemoteForwardZones []NetworkviewRemoteForwardZones `json:"remote_forward_zones,omitempty"`
	// The list of reverse-mapping zones to which the DHCP server sends the updates.
	RemoteReverseZones []NetworkviewRemoteReverseZones `json:"remote_reverse_zones,omitempty"`
}

// NewNetworkview instantiates a new Networkview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkview() *Networkview {
	this := Networkview{}
	return &this
}

// NewNetworkviewWithDefaults instantiates a new Networkview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkviewWithDefaults() *Networkview {
	this := Networkview{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Networkview) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Networkview) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Networkview) SetRef(v string) {
	o.Ref = &v
}

// GetAssociatedDnsViews returns the AssociatedDnsViews field value if set, zero value otherwise.
func (o *Networkview) GetAssociatedDnsViews() []string {
	if o == nil || IsNil(o.AssociatedDnsViews) {
		var ret []string
		return ret
	}
	return o.AssociatedDnsViews
}

// GetAssociatedDnsViewsOk returns a tuple with the AssociatedDnsViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetAssociatedDnsViewsOk() ([]string, bool) {
	if o == nil || IsNil(o.AssociatedDnsViews) {
		return nil, false
	}
	return o.AssociatedDnsViews, true
}

// HasAssociatedDnsViews returns a boolean if a field has been set.
func (o *Networkview) HasAssociatedDnsViews() bool {
	if o != nil && !IsNil(o.AssociatedDnsViews) {
		return true
	}

	return false
}

// SetAssociatedDnsViews gets a reference to the given []string and assigns it to the AssociatedDnsViews field.
func (o *Networkview) SetAssociatedDnsViews(v []string) {
	o.AssociatedDnsViews = v
}

// GetAssociatedMembers returns the AssociatedMembers field value if set, zero value otherwise.
func (o *Networkview) GetAssociatedMembers() []NetworkviewAssociatedMembers {
	if o == nil || IsNil(o.AssociatedMembers) {
		var ret []NetworkviewAssociatedMembers
		return ret
	}
	return o.AssociatedMembers
}

// GetAssociatedMembersOk returns a tuple with the AssociatedMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetAssociatedMembersOk() ([]NetworkviewAssociatedMembers, bool) {
	if o == nil || IsNil(o.AssociatedMembers) {
		return nil, false
	}
	return o.AssociatedMembers, true
}

// HasAssociatedMembers returns a boolean if a field has been set.
func (o *Networkview) HasAssociatedMembers() bool {
	if o != nil && !IsNil(o.AssociatedMembers) {
		return true
	}

	return false
}

// SetAssociatedMembers gets a reference to the given []NetworkviewAssociatedMembers and assigns it to the AssociatedMembers field.
func (o *Networkview) SetAssociatedMembers(v []NetworkviewAssociatedMembers) {
	o.AssociatedMembers = v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *Networkview) GetCloudInfo() NetworkviewCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret NetworkviewCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetCloudInfoOk() (*NetworkviewCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *Networkview) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given NetworkviewCloudInfo and assigns it to the CloudInfo field.
func (o *Networkview) SetCloudInfo(v NetworkviewCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Networkview) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Networkview) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Networkview) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDnsView returns the DdnsDnsView field value if set, zero value otherwise.
func (o *Networkview) GetDdnsDnsView() string {
	if o == nil || IsNil(o.DdnsDnsView) {
		var ret string
		return ret
	}
	return *o.DdnsDnsView
}

// GetDdnsDnsViewOk returns a tuple with the DdnsDnsView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetDdnsDnsViewOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDnsView) {
		return nil, false
	}
	return o.DdnsDnsView, true
}

// HasDdnsDnsView returns a boolean if a field has been set.
func (o *Networkview) HasDdnsDnsView() bool {
	if o != nil && !IsNil(o.DdnsDnsView) {
		return true
	}

	return false
}

// SetDdnsDnsView gets a reference to the given string and assigns it to the DdnsDnsView field.
func (o *Networkview) SetDdnsDnsView(v string) {
	o.DdnsDnsView = &v
}

// GetDdnsZonePrimaries returns the DdnsZonePrimaries field value if set, zero value otherwise.
func (o *Networkview) GetDdnsZonePrimaries() []NetworkviewDdnsZonePrimaries {
	if o == nil || IsNil(o.DdnsZonePrimaries) {
		var ret []NetworkviewDdnsZonePrimaries
		return ret
	}
	return o.DdnsZonePrimaries
}

// GetDdnsZonePrimariesOk returns a tuple with the DdnsZonePrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetDdnsZonePrimariesOk() ([]NetworkviewDdnsZonePrimaries, bool) {
	if o == nil || IsNil(o.DdnsZonePrimaries) {
		return nil, false
	}
	return o.DdnsZonePrimaries, true
}

// HasDdnsZonePrimaries returns a boolean if a field has been set.
func (o *Networkview) HasDdnsZonePrimaries() bool {
	if o != nil && !IsNil(o.DdnsZonePrimaries) {
		return true
	}

	return false
}

// SetDdnsZonePrimaries gets a reference to the given []NetworkviewDdnsZonePrimaries and assigns it to the DdnsZonePrimaries field.
func (o *Networkview) SetDdnsZonePrimaries(v []NetworkviewDdnsZonePrimaries) {
	o.DdnsZonePrimaries = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Networkview) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Networkview) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Networkview) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *Networkview) GetFederatedRealms() []NetworkviewFederatedRealms {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []NetworkviewFederatedRealms
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetFederatedRealmsOk() ([]NetworkviewFederatedRealms, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *Networkview) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []NetworkviewFederatedRealms and assigns it to the FederatedRealms field.
func (o *Networkview) SetFederatedRealms(v []NetworkviewFederatedRealms) {
	o.FederatedRealms = v
}

// GetInternalForwardZones returns the InternalForwardZones field value if set, zero value otherwise.
func (o *Networkview) GetInternalForwardZones() []map[string]interface{} {
	if o == nil || IsNil(o.InternalForwardZones) {
		var ret []map[string]interface{}
		return ret
	}
	return o.InternalForwardZones
}

// GetInternalForwardZonesOk returns a tuple with the InternalForwardZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetInternalForwardZonesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.InternalForwardZones) {
		return nil, false
	}
	return o.InternalForwardZones, true
}

// HasInternalForwardZones returns a boolean if a field has been set.
func (o *Networkview) HasInternalForwardZones() bool {
	if o != nil && !IsNil(o.InternalForwardZones) {
		return true
	}

	return false
}

// SetInternalForwardZones gets a reference to the given []map[string]interface{} and assigns it to the InternalForwardZones field.
func (o *Networkview) SetInternalForwardZones(v []map[string]interface{}) {
	o.InternalForwardZones = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *Networkview) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *Networkview) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *Networkview) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetMgmPrivate returns the MgmPrivate field value if set, zero value otherwise.
func (o *Networkview) GetMgmPrivate() bool {
	if o == nil || IsNil(o.MgmPrivate) {
		var ret bool
		return ret
	}
	return *o.MgmPrivate
}

// GetMgmPrivateOk returns a tuple with the MgmPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetMgmPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmPrivate) {
		return nil, false
	}
	return o.MgmPrivate, true
}

// HasMgmPrivate returns a boolean if a field has been set.
func (o *Networkview) HasMgmPrivate() bool {
	if o != nil && !IsNil(o.MgmPrivate) {
		return true
	}

	return false
}

// SetMgmPrivate gets a reference to the given bool and assigns it to the MgmPrivate field.
func (o *Networkview) SetMgmPrivate(v bool) {
	o.MgmPrivate = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *Networkview) GetMsAdUserData() NetworkviewMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret NetworkviewMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetMsAdUserDataOk() (*NetworkviewMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *Networkview) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given NetworkviewMsAdUserData and assigns it to the MsAdUserData field.
func (o *Networkview) SetMsAdUserData(v NetworkviewMsAdUserData) {
	o.MsAdUserData = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Networkview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Networkview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Networkview) SetName(v string) {
	o.Name = &v
}

// GetRemoteForwardZones returns the RemoteForwardZones field value if set, zero value otherwise.
func (o *Networkview) GetRemoteForwardZones() []NetworkviewRemoteForwardZones {
	if o == nil || IsNil(o.RemoteForwardZones) {
		var ret []NetworkviewRemoteForwardZones
		return ret
	}
	return o.RemoteForwardZones
}

// GetRemoteForwardZonesOk returns a tuple with the RemoteForwardZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetRemoteForwardZonesOk() ([]NetworkviewRemoteForwardZones, bool) {
	if o == nil || IsNil(o.RemoteForwardZones) {
		return nil, false
	}
	return o.RemoteForwardZones, true
}

// HasRemoteForwardZones returns a boolean if a field has been set.
func (o *Networkview) HasRemoteForwardZones() bool {
	if o != nil && !IsNil(o.RemoteForwardZones) {
		return true
	}

	return false
}

// SetRemoteForwardZones gets a reference to the given []NetworkviewRemoteForwardZones and assigns it to the RemoteForwardZones field.
func (o *Networkview) SetRemoteForwardZones(v []NetworkviewRemoteForwardZones) {
	o.RemoteForwardZones = v
}

// GetRemoteReverseZones returns the RemoteReverseZones field value if set, zero value otherwise.
func (o *Networkview) GetRemoteReverseZones() []NetworkviewRemoteReverseZones {
	if o == nil || IsNil(o.RemoteReverseZones) {
		var ret []NetworkviewRemoteReverseZones
		return ret
	}
	return o.RemoteReverseZones
}

// GetRemoteReverseZonesOk returns a tuple with the RemoteReverseZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networkview) GetRemoteReverseZonesOk() ([]NetworkviewRemoteReverseZones, bool) {
	if o == nil || IsNil(o.RemoteReverseZones) {
		return nil, false
	}
	return o.RemoteReverseZones, true
}

// HasRemoteReverseZones returns a boolean if a field has been set.
func (o *Networkview) HasRemoteReverseZones() bool {
	if o != nil && !IsNil(o.RemoteReverseZones) {
		return true
	}

	return false
}

// SetRemoteReverseZones gets a reference to the given []NetworkviewRemoteReverseZones and assigns it to the RemoteReverseZones field.
func (o *Networkview) SetRemoteReverseZones(v []NetworkviewRemoteReverseZones) {
	o.RemoteReverseZones = v
}

func (o Networkview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Networkview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AssociatedDnsViews) {
		toSerialize["associated_dns_views"] = o.AssociatedDnsViews
	}
	if !IsNil(o.AssociatedMembers) {
		toSerialize["associated_members"] = o.AssociatedMembers
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDnsView) {
		toSerialize["ddns_dns_view"] = o.DdnsDnsView
	}
	if !IsNil(o.DdnsZonePrimaries) {
		toSerialize["ddns_zone_primaries"] = o.DdnsZonePrimaries
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.InternalForwardZones) {
		toSerialize["internal_forward_zones"] = o.InternalForwardZones
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.MgmPrivate) {
		toSerialize["mgm_private"] = o.MgmPrivate
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteForwardZones) {
		toSerialize["remote_forward_zones"] = o.RemoteForwardZones
	}
	if !IsNil(o.RemoteReverseZones) {
		toSerialize["remote_reverse_zones"] = o.RemoteReverseZones
	}
	return toSerialize, nil
}

type NullableNetworkview struct {
	value *Networkview
	isSet bool
}

func (v NullableNetworkview) Get() *Networkview {
	return v.value
}

func (v *NullableNetworkview) Set(val *Networkview) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkview) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkview(val *Networkview) *NullableNetworkview {
	return &NullableNetworkview{value: val, isSet: true}
}

func (v NullableNetworkview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
