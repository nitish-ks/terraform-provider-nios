/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Rir type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rir{}

// Rir struct for Rir
type Rir struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The communication mode for RIR.
	CommunicationMode *string `json:"communication_mode,omitempty"`
	// The e-mail address for RIR.
	Email *string `json:"email,omitempty"`
	// The name of RIR.
	Name *string `json:"name,omitempty"`
	// The WebAPI URL for RIR.
	Url *string `json:"url,omitempty"`
	// Use flag for: email
	UseEmail *bool `json:"use_email,omitempty"`
	// Use flag for: url
	UseUrl *bool `json:"use_url,omitempty"`
}

// NewRir instantiates a new Rir object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRir() *Rir {
	this := Rir{}
	return &this
}

// NewRirWithDefaults instantiates a new Rir object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRirWithDefaults() *Rir {
	this := Rir{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Rir) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Rir) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Rir) SetRef(v string) {
	o.Ref = &v
}

// GetCommunicationMode returns the CommunicationMode field value if set, zero value otherwise.
func (o *Rir) GetCommunicationMode() string {
	if o == nil || IsNil(o.CommunicationMode) {
		var ret string
		return ret
	}
	return *o.CommunicationMode
}

// GetCommunicationModeOk returns a tuple with the CommunicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetCommunicationModeOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationMode) {
		return nil, false
	}
	return o.CommunicationMode, true
}

// HasCommunicationMode returns a boolean if a field has been set.
func (o *Rir) HasCommunicationMode() bool {
	if o != nil && !IsNil(o.CommunicationMode) {
		return true
	}

	return false
}

// SetCommunicationMode gets a reference to the given string and assigns it to the CommunicationMode field.
func (o *Rir) SetCommunicationMode(v string) {
	o.CommunicationMode = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Rir) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Rir) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Rir) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Rir) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Rir) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Rir) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Rir) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Rir) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Rir) SetUrl(v string) {
	o.Url = &v
}

// GetUseEmail returns the UseEmail field value if set, zero value otherwise.
func (o *Rir) GetUseEmail() bool {
	if o == nil || IsNil(o.UseEmail) {
		var ret bool
		return ret
	}
	return *o.UseEmail
}

// GetUseEmailOk returns a tuple with the UseEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetUseEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEmail) {
		return nil, false
	}
	return o.UseEmail, true
}

// HasUseEmail returns a boolean if a field has been set.
func (o *Rir) HasUseEmail() bool {
	if o != nil && !IsNil(o.UseEmail) {
		return true
	}

	return false
}

// SetUseEmail gets a reference to the given bool and assigns it to the UseEmail field.
func (o *Rir) SetUseEmail(v bool) {
	o.UseEmail = &v
}

// GetUseUrl returns the UseUrl field value if set, zero value otherwise.
func (o *Rir) GetUseUrl() bool {
	if o == nil || IsNil(o.UseUrl) {
		var ret bool
		return ret
	}
	return *o.UseUrl
}

// GetUseUrlOk returns a tuple with the UseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rir) GetUseUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUrl) {
		return nil, false
	}
	return o.UseUrl, true
}

// HasUseUrl returns a boolean if a field has been set.
func (o *Rir) HasUseUrl() bool {
	if o != nil && !IsNil(o.UseUrl) {
		return true
	}

	return false
}

// SetUseUrl gets a reference to the given bool and assigns it to the UseUrl field.
func (o *Rir) SetUseUrl(v bool) {
	o.UseUrl = &v
}

func (o Rir) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rir) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CommunicationMode) {
		toSerialize["communication_mode"] = o.CommunicationMode
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseEmail) {
		toSerialize["use_email"] = o.UseEmail
	}
	if !IsNil(o.UseUrl) {
		toSerialize["use_url"] = o.UseUrl
	}
	return toSerialize, nil
}

type NullableRir struct {
	value *Rir
	isSet bool
}

func (v NullableRir) Get() *Rir {
	return v.value
}

func (v *NullableRir) Set(val *Rir) {
	v.value = val
	v.isSet = true
}

func (v NullableRir) IsSet() bool {
	return v.isSet
}

func (v *NullableRir) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRir(val *Rir) *NullableRir {
	return &NullableRir{value: val, isSet: true}
}

func (v NullableRir) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRir) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
