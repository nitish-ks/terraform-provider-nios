/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Superhost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Superhost{}

// Superhost struct for Superhost
type Superhost struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The comment for Super Host.
	Comment *string `json:"comment,omitempty"`
	// True if we have to delete all DNS/DHCP associated objects with Super Host, false by default.
	DeleteAssociatedObjects *bool `json:"delete_associated_objects,omitempty"`
	// A list of DHCP objects refs which are associated with Super Host.
	DhcpAssociatedObjects []string `json:"dhcp_associated_objects,omitempty"`
	// Disable all DNS/DHCP associated objects with Super Host if True, False by default.
	Disabled *bool `json:"disabled,omitempty"`
	// A list of object refs of the DNS resource records which are associated with Super Host.
	DnsAssociatedObjects []string `json:"dns_associated_objects,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Name of the Superhost.
	Name *string `json:"name,omitempty"`
}

// NewSuperhost instantiates a new Superhost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperhost() *Superhost {
	this := Superhost{}
	return &this
}

// NewSuperhostWithDefaults instantiates a new Superhost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperhostWithDefaults() *Superhost {
	this := Superhost{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Superhost) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Superhost) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Superhost) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Superhost) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Superhost) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Superhost) SetComment(v string) {
	o.Comment = &v
}

// GetDeleteAssociatedObjects returns the DeleteAssociatedObjects field value if set, zero value otherwise.
func (o *Superhost) GetDeleteAssociatedObjects() bool {
	if o == nil || IsNil(o.DeleteAssociatedObjects) {
		var ret bool
		return ret
	}
	return *o.DeleteAssociatedObjects
}

// GetDeleteAssociatedObjectsOk returns a tuple with the DeleteAssociatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetDeleteAssociatedObjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteAssociatedObjects) {
		return nil, false
	}
	return o.DeleteAssociatedObjects, true
}

// HasDeleteAssociatedObjects returns a boolean if a field has been set.
func (o *Superhost) HasDeleteAssociatedObjects() bool {
	if o != nil && !IsNil(o.DeleteAssociatedObjects) {
		return true
	}

	return false
}

// SetDeleteAssociatedObjects gets a reference to the given bool and assigns it to the DeleteAssociatedObjects field.
func (o *Superhost) SetDeleteAssociatedObjects(v bool) {
	o.DeleteAssociatedObjects = &v
}

// GetDhcpAssociatedObjects returns the DhcpAssociatedObjects field value if set, zero value otherwise.
func (o *Superhost) GetDhcpAssociatedObjects() []string {
	if o == nil || IsNil(o.DhcpAssociatedObjects) {
		var ret []string
		return ret
	}
	return o.DhcpAssociatedObjects
}

// GetDhcpAssociatedObjectsOk returns a tuple with the DhcpAssociatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetDhcpAssociatedObjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.DhcpAssociatedObjects) {
		return nil, false
	}
	return o.DhcpAssociatedObjects, true
}

// HasDhcpAssociatedObjects returns a boolean if a field has been set.
func (o *Superhost) HasDhcpAssociatedObjects() bool {
	if o != nil && !IsNil(o.DhcpAssociatedObjects) {
		return true
	}

	return false
}

// SetDhcpAssociatedObjects gets a reference to the given []string and assigns it to the DhcpAssociatedObjects field.
func (o *Superhost) SetDhcpAssociatedObjects(v []string) {
	o.DhcpAssociatedObjects = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Superhost) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Superhost) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Superhost) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDnsAssociatedObjects returns the DnsAssociatedObjects field value if set, zero value otherwise.
func (o *Superhost) GetDnsAssociatedObjects() []string {
	if o == nil || IsNil(o.DnsAssociatedObjects) {
		var ret []string
		return ret
	}
	return o.DnsAssociatedObjects
}

// GetDnsAssociatedObjectsOk returns a tuple with the DnsAssociatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetDnsAssociatedObjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsAssociatedObjects) {
		return nil, false
	}
	return o.DnsAssociatedObjects, true
}

// HasDnsAssociatedObjects returns a boolean if a field has been set.
func (o *Superhost) HasDnsAssociatedObjects() bool {
	if o != nil && !IsNil(o.DnsAssociatedObjects) {
		return true
	}

	return false
}

// SetDnsAssociatedObjects gets a reference to the given []string and assigns it to the DnsAssociatedObjects field.
func (o *Superhost) SetDnsAssociatedObjects(v []string) {
	o.DnsAssociatedObjects = v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Superhost) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Superhost) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Superhost) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Superhost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Superhost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Superhost) SetName(v string) {
	o.Name = &v
}

func (o Superhost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Superhost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DeleteAssociatedObjects) {
		toSerialize["delete_associated_objects"] = o.DeleteAssociatedObjects
	}
	if !IsNil(o.DhcpAssociatedObjects) {
		toSerialize["dhcp_associated_objects"] = o.DhcpAssociatedObjects
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DnsAssociatedObjects) {
		toSerialize["dns_associated_objects"] = o.DnsAssociatedObjects
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSuperhost struct {
	value *Superhost
	isSet bool
}

func (v NullableSuperhost) Get() *Superhost {
	return v.value
}

func (v *NullableSuperhost) Set(val *Superhost) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperhost) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperhost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperhost(val *Superhost) *NullableSuperhost {
	return &NullableSuperhost{value: val, isSet: true}
}

func (v NullableSuperhost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperhost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
