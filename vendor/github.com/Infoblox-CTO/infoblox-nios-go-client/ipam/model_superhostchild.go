/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Superhostchild type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Superhostchild{}

// Superhostchild struct for Superhostchild
type Superhostchild struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The record object, if supported by the WAPI. Otherwise, the value is \"None\".
	AssociatedObject *string `json:"associated_object,omitempty"`
	// The record comment.
	Comment *string `json:"comment,omitempty"`
	// Time at which DNS RR was created.
	CreationTimestamp *int64 `json:"creation_timestamp,omitempty"`
	// Specific data of DNS/DHCP records.
	Data *string `json:"data,omitempty"`
	// True if the child DNS/DHCP object is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Name of the associated DNS/DHCP object.
	Name *string `json:"name,omitempty"`
	// The name of the network view in which this network record resides.
	NetworkView *string `json:"network_view,omitempty"`
	// Name of the Super Host object in which record resides.
	Parent *string `json:"parent,omitempty"`
	// Name of a parent zone/network.
	RecordParent *string `json:"record_parent,omitempty"`
	// The record type. When searching for an unspecified record type, the search is performed for all records.
	Type *string `json:"type,omitempty"`
	// Name of the DNS View in which the record resides.
	View *string `json:"view,omitempty"`
}

// NewSuperhostchild instantiates a new Superhostchild object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperhostchild() *Superhostchild {
	this := Superhostchild{}
	return &this
}

// NewSuperhostchildWithDefaults instantiates a new Superhostchild object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperhostchildWithDefaults() *Superhostchild {
	this := Superhostchild{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Superhostchild) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Superhostchild) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Superhostchild) SetRef(v string) {
	o.Ref = &v
}

// GetAssociatedObject returns the AssociatedObject field value if set, zero value otherwise.
func (o *Superhostchild) GetAssociatedObject() string {
	if o == nil || IsNil(o.AssociatedObject) {
		var ret string
		return ret
	}
	return *o.AssociatedObject
}

// GetAssociatedObjectOk returns a tuple with the AssociatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetAssociatedObjectOk() (*string, bool) {
	if o == nil || IsNil(o.AssociatedObject) {
		return nil, false
	}
	return o.AssociatedObject, true
}

// HasAssociatedObject returns a boolean if a field has been set.
func (o *Superhostchild) HasAssociatedObject() bool {
	if o != nil && !IsNil(o.AssociatedObject) {
		return true
	}

	return false
}

// SetAssociatedObject gets a reference to the given string and assigns it to the AssociatedObject field.
func (o *Superhostchild) SetAssociatedObject(v string) {
	o.AssociatedObject = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Superhostchild) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Superhostchild) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Superhostchild) SetComment(v string) {
	o.Comment = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *Superhostchild) GetCreationTimestamp() int64 {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetCreationTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *Superhostchild) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given int64 and assigns it to the CreationTimestamp field.
func (o *Superhostchild) SetCreationTimestamp(v int64) {
	o.CreationTimestamp = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Superhostchild) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Superhostchild) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *Superhostchild) SetData(v string) {
	o.Data = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Superhostchild) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Superhostchild) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Superhostchild) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Superhostchild) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Superhostchild) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Superhostchild) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *Superhostchild) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *Superhostchild) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *Superhostchild) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Superhostchild) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Superhostchild) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *Superhostchild) SetParent(v string) {
	o.Parent = &v
}

// GetRecordParent returns the RecordParent field value if set, zero value otherwise.
func (o *Superhostchild) GetRecordParent() string {
	if o == nil || IsNil(o.RecordParent) {
		var ret string
		return ret
	}
	return *o.RecordParent
}

// GetRecordParentOk returns a tuple with the RecordParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetRecordParentOk() (*string, bool) {
	if o == nil || IsNil(o.RecordParent) {
		return nil, false
	}
	return o.RecordParent, true
}

// HasRecordParent returns a boolean if a field has been set.
func (o *Superhostchild) HasRecordParent() bool {
	if o != nil && !IsNil(o.RecordParent) {
		return true
	}

	return false
}

// SetRecordParent gets a reference to the given string and assigns it to the RecordParent field.
func (o *Superhostchild) SetRecordParent(v string) {
	o.RecordParent = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Superhostchild) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Superhostchild) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Superhostchild) SetType(v string) {
	o.Type = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Superhostchild) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Superhostchild) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Superhostchild) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *Superhostchild) SetView(v string) {
	o.View = &v
}

func (o Superhostchild) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Superhostchild) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AssociatedObject) {
		toSerialize["associated_object"] = o.AssociatedObject
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creation_timestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.RecordParent) {
		toSerialize["record_parent"] = o.RecordParent
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableSuperhostchild struct {
	value *Superhostchild
	isSet bool
}

func (v NullableSuperhostchild) Get() *Superhostchild {
	return v.value
}

func (v *NullableSuperhostchild) Set(val *Superhostchild) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperhostchild) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperhostchild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperhostchild(val *Superhostchild) *NullableSuperhostchild {
	return &NullableSuperhostchild{value: val, isSet: true}
}

func (v NullableSuperhostchild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperhostchild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
