/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// UpdateNetworkviewResponse - struct for UpdateNetworkviewResponse
type UpdateNetworkviewResponse struct {
	UpdateNetworkviewResponseAsObject *UpdateNetworkviewResponseAsObject
	String                            *string
}

// UpdateNetworkviewResponseAsObjectAsUpdateNetworkviewResponse is a convenience function that returns UpdateNetworkviewResponseAsObject wrapped in UpdateNetworkviewResponse
func UpdateNetworkviewResponseAsObjectAsUpdateNetworkviewResponse(v *UpdateNetworkviewResponseAsObject) UpdateNetworkviewResponse {
	return UpdateNetworkviewResponse{
		UpdateNetworkviewResponseAsObject: v,
	}
}

// stringAsUpdateNetworkviewResponse is a convenience function that returns string wrapped in UpdateNetworkviewResponse
func StringAsUpdateNetworkviewResponse(v *string) UpdateNetworkviewResponse {
	return UpdateNetworkviewResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateNetworkviewResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateNetworkviewResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateNetworkviewResponseAsObject)
	if err == nil {
		jsonUpdateNetworkviewResponseAsObject, _ := json.Marshal(dst.UpdateNetworkviewResponseAsObject)
		if string(jsonUpdateNetworkviewResponseAsObject) == "{}" { // empty struct
			dst.UpdateNetworkviewResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateNetworkviewResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateNetworkviewResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateNetworkviewResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateNetworkviewResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateNetworkviewResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateNetworkviewResponseAsObject != nil {
		return json.Marshal(&src.UpdateNetworkviewResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateNetworkviewResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateNetworkviewResponseAsObject != nil {
		return obj.UpdateNetworkviewResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateNetworkviewResponse struct {
	value *UpdateNetworkviewResponse
	isSet bool
}

func (v NullableUpdateNetworkviewResponse) Get() *UpdateNetworkviewResponse {
	return v.value
}

func (v *NullableUpdateNetworkviewResponse) Set(val *UpdateNetworkviewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkviewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkviewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkviewResponse(val *UpdateNetworkviewResponse) *NullableUpdateNetworkviewResponse {
	return &NullableUpdateNetworkviewResponse{value: val, isSet: true}
}

func (v NullableUpdateNetworkviewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkviewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
