/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// UpdateVlanResponse - struct for UpdateVlanResponse
type UpdateVlanResponse struct {
	UpdateVlanResponseAsObject *UpdateVlanResponseAsObject
	String                     *string
}

// UpdateVlanResponseAsObjectAsUpdateVlanResponse is a convenience function that returns UpdateVlanResponseAsObject wrapped in UpdateVlanResponse
func UpdateVlanResponseAsObjectAsUpdateVlanResponse(v *UpdateVlanResponseAsObject) UpdateVlanResponse {
	return UpdateVlanResponse{
		UpdateVlanResponseAsObject: v,
	}
}

// stringAsUpdateVlanResponse is a convenience function that returns string wrapped in UpdateVlanResponse
func StringAsUpdateVlanResponse(v *string) UpdateVlanResponse {
	return UpdateVlanResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateVlanResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateVlanResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateVlanResponseAsObject)
	if err == nil {
		jsonUpdateVlanResponseAsObject, _ := json.Marshal(dst.UpdateVlanResponseAsObject)
		if string(jsonUpdateVlanResponseAsObject) == "{}" { // empty struct
			dst.UpdateVlanResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateVlanResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateVlanResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateVlanResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateVlanResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateVlanResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateVlanResponseAsObject != nil {
		return json.Marshal(&src.UpdateVlanResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateVlanResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateVlanResponseAsObject != nil {
		return obj.UpdateVlanResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateVlanResponse struct {
	value *UpdateVlanResponse
	isSet bool
}

func (v NullableUpdateVlanResponse) Get() *UpdateVlanResponse {
	return v.value
}

func (v *NullableUpdateVlanResponse) Set(val *UpdateVlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVlanResponse(val *UpdateVlanResponse) *NullableUpdateVlanResponse {
	return &NullableUpdateVlanResponse{value: val, isSet: true}
}

func (v NullableUpdateVlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
