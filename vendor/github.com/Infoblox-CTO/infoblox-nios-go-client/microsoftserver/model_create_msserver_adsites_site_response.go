/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// CreateMsserverAdsitesSiteResponse - struct for CreateMsserverAdsitesSiteResponse
type CreateMsserverAdsitesSiteResponse struct {
	CreateMsserverAdsitesSiteResponseAsObject *CreateMsserverAdsitesSiteResponseAsObject
	String                                    *string
}

// CreateMsserverAdsitesSiteResponseAsObjectAsCreateMsserverAdsitesSiteResponse is a convenience function that returns CreateMsserverAdsitesSiteResponseAsObject wrapped in CreateMsserverAdsitesSiteResponse
func CreateMsserverAdsitesSiteResponseAsObjectAsCreateMsserverAdsitesSiteResponse(v *CreateMsserverAdsitesSiteResponseAsObject) CreateMsserverAdsitesSiteResponse {
	return CreateMsserverAdsitesSiteResponse{
		CreateMsserverAdsitesSiteResponseAsObject: v,
	}
}

// stringAsCreateMsserverAdsitesSiteResponse is a convenience function that returns string wrapped in CreateMsserverAdsitesSiteResponse
func StringAsCreateMsserverAdsitesSiteResponse(v *string) CreateMsserverAdsitesSiteResponse {
	return CreateMsserverAdsitesSiteResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateMsserverAdsitesSiteResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateMsserverAdsitesSiteResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateMsserverAdsitesSiteResponseAsObject)
	if err == nil {
		jsonCreateMsserverAdsitesSiteResponseAsObject, _ := json.Marshal(dst.CreateMsserverAdsitesSiteResponseAsObject)
		if string(jsonCreateMsserverAdsitesSiteResponseAsObject) == "{}" { // empty struct
			dst.CreateMsserverAdsitesSiteResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateMsserverAdsitesSiteResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateMsserverAdsitesSiteResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateMsserverAdsitesSiteResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateMsserverAdsitesSiteResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	if src.CreateMsserverAdsitesSiteResponseAsObject != nil {
		return json.Marshal(&src.CreateMsserverAdsitesSiteResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateMsserverAdsitesSiteResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateMsserverAdsitesSiteResponseAsObject != nil {
		return obj.CreateMsserverAdsitesSiteResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateMsserverAdsitesSiteResponse struct {
	value *CreateMsserverAdsitesSiteResponse
	isSet bool
}

func (v NullableCreateMsserverAdsitesSiteResponse) Get() *CreateMsserverAdsitesSiteResponse {
	return v.value
}

func (v *NullableCreateMsserverAdsitesSiteResponse) Set(val *CreateMsserverAdsitesSiteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMsserverAdsitesSiteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMsserverAdsitesSiteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMsserverAdsitesSiteResponse(val *CreateMsserverAdsitesSiteResponse) *NullableCreateMsserverAdsitesSiteResponse {
	return &NullableCreateMsserverAdsitesSiteResponse{value: val, isSet: true}
}

func (v NullableCreateMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMsserverAdsitesSiteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
