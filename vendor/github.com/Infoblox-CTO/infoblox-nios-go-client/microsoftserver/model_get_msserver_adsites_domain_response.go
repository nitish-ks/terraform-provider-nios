/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// GetMsserverAdsitesDomainResponse - struct for GetMsserverAdsitesDomainResponse
type GetMsserverAdsitesDomainResponse struct {
	GetMsserverAdsitesDomainResponseObjectAsResult *GetMsserverAdsitesDomainResponseObjectAsResult
	MsserverAdsitesDomain                          *MsserverAdsitesDomain
}

// GetMsserverAdsitesDomainResponseObjectAsResultAsGetMsserverAdsitesDomainResponse is a convenience function that returns GetMsserverAdsitesDomainResponseObjectAsResult wrapped in GetMsserverAdsitesDomainResponse
func GetMsserverAdsitesDomainResponseObjectAsResultAsGetMsserverAdsitesDomainResponse(v *GetMsserverAdsitesDomainResponseObjectAsResult) GetMsserverAdsitesDomainResponse {
	return GetMsserverAdsitesDomainResponse{
		GetMsserverAdsitesDomainResponseObjectAsResult: v,
	}
}

// MsserverAdsitesDomainAsGetMsserverAdsitesDomainResponse is a convenience function that returns MsserverAdsitesDomain wrapped in GetMsserverAdsitesDomainResponse
func MsserverAdsitesDomainAsGetMsserverAdsitesDomainResponse(v *MsserverAdsitesDomain) GetMsserverAdsitesDomainResponse {
	return GetMsserverAdsitesDomainResponse{
		MsserverAdsitesDomain: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMsserverAdsitesDomainResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMsserverAdsitesDomainResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMsserverAdsitesDomainResponseObjectAsResult)
	if err == nil {
		jsonGetMsserverAdsitesDomainResponseObjectAsResult, _ := json.Marshal(dst.GetMsserverAdsitesDomainResponseObjectAsResult)
		if string(jsonGetMsserverAdsitesDomainResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMsserverAdsitesDomainResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMsserverAdsitesDomainResponseObjectAsResult = nil
	}

	// try to unmarshal data into MsserverAdsitesDomain
	err = newStrictDecoder(data).Decode(&dst.MsserverAdsitesDomain)
	if err == nil {
		jsonMsserverAdsitesDomain, _ := json.Marshal(dst.MsserverAdsitesDomain)
		if string(jsonMsserverAdsitesDomain) == "{}" { // empty struct
			dst.MsserverAdsitesDomain = nil
		} else {
			match++
		}
	} else {
		dst.MsserverAdsitesDomain = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMsserverAdsitesDomainResponseObjectAsResult = nil
		dst.MsserverAdsitesDomain = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMsserverAdsitesDomainResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMsserverAdsitesDomainResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMsserverAdsitesDomainResponse) MarshalJSON() ([]byte, error) {
	if src.GetMsserverAdsitesDomainResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMsserverAdsitesDomainResponseObjectAsResult)
	}

	if src.MsserverAdsitesDomain != nil {
		return json.Marshal(&src.MsserverAdsitesDomain)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMsserverAdsitesDomainResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMsserverAdsitesDomainResponseObjectAsResult != nil {
		return obj.GetMsserverAdsitesDomainResponseObjectAsResult
	}

	if obj.MsserverAdsitesDomain != nil {
		return obj.MsserverAdsitesDomain
	}

	// all schemas are nil
	return nil
}

type NullableGetMsserverAdsitesDomainResponse struct {
	value *GetMsserverAdsitesDomainResponse
	isSet bool
}

func (v NullableGetMsserverAdsitesDomainResponse) Get() *GetMsserverAdsitesDomainResponse {
	return v.value
}

func (v *NullableGetMsserverAdsitesDomainResponse) Set(val *GetMsserverAdsitesDomainResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMsserverAdsitesDomainResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMsserverAdsitesDomainResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMsserverAdsitesDomainResponse(val *GetMsserverAdsitesDomainResponse) *NullableGetMsserverAdsitesDomainResponse {
	return &NullableGetMsserverAdsitesDomainResponse{value: val, isSet: true}
}

func (v NullableGetMsserverAdsitesDomainResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMsserverAdsitesDomainResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
