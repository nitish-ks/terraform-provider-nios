/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// GetMsserverResponse - struct for GetMsserverResponse
type GetMsserverResponse struct {
	GetMsserverResponseObjectAsResult *GetMsserverResponseObjectAsResult
	Msserver                          *Msserver
}

// GetMsserverResponseObjectAsResultAsGetMsserverResponse is a convenience function that returns GetMsserverResponseObjectAsResult wrapped in GetMsserverResponse
func GetMsserverResponseObjectAsResultAsGetMsserverResponse(v *GetMsserverResponseObjectAsResult) GetMsserverResponse {
	return GetMsserverResponse{
		GetMsserverResponseObjectAsResult: v,
	}
}

// MsserverAsGetMsserverResponse is a convenience function that returns Msserver wrapped in GetMsserverResponse
func MsserverAsGetMsserverResponse(v *Msserver) GetMsserverResponse {
	return GetMsserverResponse{
		Msserver: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMsserverResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMsserverResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMsserverResponseObjectAsResult)
	if err == nil {
		jsonGetMsserverResponseObjectAsResult, _ := json.Marshal(dst.GetMsserverResponseObjectAsResult)
		if string(jsonGetMsserverResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMsserverResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMsserverResponseObjectAsResult = nil
	}

	// try to unmarshal data into Msserver
	err = newStrictDecoder(data).Decode(&dst.Msserver)
	if err == nil {
		jsonMsserver, _ := json.Marshal(dst.Msserver)
		if string(jsonMsserver) == "{}" { // empty struct
			dst.Msserver = nil
		} else {
			match++
		}
	} else {
		dst.Msserver = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMsserverResponseObjectAsResult = nil
		dst.Msserver = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMsserverResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMsserverResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMsserverResponse) MarshalJSON() ([]byte, error) {
	if src.GetMsserverResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMsserverResponseObjectAsResult)
	}

	if src.Msserver != nil {
		return json.Marshal(&src.Msserver)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMsserverResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMsserverResponseObjectAsResult != nil {
		return obj.GetMsserverResponseObjectAsResult
	}

	if obj.Msserver != nil {
		return obj.Msserver
	}

	// all schemas are nil
	return nil
}

type NullableGetMsserverResponse struct {
	value *GetMsserverResponse
	isSet bool
}

func (v NullableGetMsserverResponse) Get() *GetMsserverResponse {
	return v.value
}

func (v *NullableGetMsserverResponse) Set(val *GetMsserverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMsserverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMsserverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMsserverResponse(val *GetMsserverResponse) *NullableGetMsserverResponse {
	return &NullableGetMsserverResponse{value: val, isSet: true}
}

func (v NullableGetMsserverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMsserverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
