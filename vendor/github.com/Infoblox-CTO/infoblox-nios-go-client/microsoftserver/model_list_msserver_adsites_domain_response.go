/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// ListMsserverAdsitesDomainResponse - struct for ListMsserverAdsitesDomainResponse
type ListMsserverAdsitesDomainResponse struct {
	ListMsserverAdsitesDomainResponseObject *ListMsserverAdsitesDomainResponseObject
	ArrayOfMsserverAdsitesDomain            *[]MsserverAdsitesDomain
}

// ListMsserverAdsitesDomainResponseObjectAsListMsserverAdsitesDomainResponse is a convenience function that returns ListMsserverAdsitesDomainResponseObject wrapped in ListMsserverAdsitesDomainResponse
func ListMsserverAdsitesDomainResponseObjectAsListMsserverAdsitesDomainResponse(v *ListMsserverAdsitesDomainResponseObject) ListMsserverAdsitesDomainResponse {
	return ListMsserverAdsitesDomainResponse{
		ListMsserverAdsitesDomainResponseObject: v,
	}
}

// []MsserverAdsitesDomainAsListMsserverAdsitesDomainResponse is a convenience function that returns []MsserverAdsitesDomain wrapped in ListMsserverAdsitesDomainResponse
func ArrayOfMsserverAdsitesDomainAsListMsserverAdsitesDomainResponse(v *[]MsserverAdsitesDomain) ListMsserverAdsitesDomainResponse {
	return ListMsserverAdsitesDomainResponse{
		ArrayOfMsserverAdsitesDomain: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMsserverAdsitesDomainResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMsserverAdsitesDomainResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMsserverAdsitesDomainResponseObject)
	if err == nil {
		jsonListMsserverAdsitesDomainResponseObject, _ := json.Marshal(dst.ListMsserverAdsitesDomainResponseObject)
		if string(jsonListMsserverAdsitesDomainResponseObject) == "{}" { // empty struct
			dst.ListMsserverAdsitesDomainResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMsserverAdsitesDomainResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMsserverAdsitesDomain
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMsserverAdsitesDomain)
	if err == nil {
		jsonArrayOfMsserverAdsitesDomain, _ := json.Marshal(dst.ArrayOfMsserverAdsitesDomain)
		if string(jsonArrayOfMsserverAdsitesDomain) == "{}" { // empty struct
			dst.ArrayOfMsserverAdsitesDomain = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMsserverAdsitesDomain = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMsserverAdsitesDomainResponseObject = nil
		dst.ArrayOfMsserverAdsitesDomain = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMsserverAdsitesDomainResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMsserverAdsitesDomainResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMsserverAdsitesDomainResponse) MarshalJSON() ([]byte, error) {
	if src.ListMsserverAdsitesDomainResponseObject != nil {
		return json.Marshal(&src.ListMsserverAdsitesDomainResponseObject)
	}

	if src.ArrayOfMsserverAdsitesDomain != nil {
		return json.Marshal(&src.ArrayOfMsserverAdsitesDomain)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMsserverAdsitesDomainResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMsserverAdsitesDomainResponseObject != nil {
		return obj.ListMsserverAdsitesDomainResponseObject
	}

	if obj.ArrayOfMsserverAdsitesDomain != nil {
		return obj.ArrayOfMsserverAdsitesDomain
	}

	// all schemas are nil
	return nil
}

type NullableListMsserverAdsitesDomainResponse struct {
	value *ListMsserverAdsitesDomainResponse
	isSet bool
}

func (v NullableListMsserverAdsitesDomainResponse) Get() *ListMsserverAdsitesDomainResponse {
	return v.value
}

func (v *NullableListMsserverAdsitesDomainResponse) Set(val *ListMsserverAdsitesDomainResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMsserverAdsitesDomainResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMsserverAdsitesDomainResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMsserverAdsitesDomainResponse(val *ListMsserverAdsitesDomainResponse) *NullableListMsserverAdsitesDomainResponse {
	return &NullableListMsserverAdsitesDomainResponse{value: val, isSet: true}
}

func (v NullableListMsserverAdsitesDomainResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMsserverAdsitesDomainResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
