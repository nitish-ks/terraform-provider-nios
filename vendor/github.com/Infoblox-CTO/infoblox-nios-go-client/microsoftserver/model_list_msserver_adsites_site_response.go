/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// ListMsserverAdsitesSiteResponse - struct for ListMsserverAdsitesSiteResponse
type ListMsserverAdsitesSiteResponse struct {
	ListMsserverAdsitesSiteResponseObject *ListMsserverAdsitesSiteResponseObject
	ArrayOfMsserverAdsitesSite            *[]MsserverAdsitesSite
}

// ListMsserverAdsitesSiteResponseObjectAsListMsserverAdsitesSiteResponse is a convenience function that returns ListMsserverAdsitesSiteResponseObject wrapped in ListMsserverAdsitesSiteResponse
func ListMsserverAdsitesSiteResponseObjectAsListMsserverAdsitesSiteResponse(v *ListMsserverAdsitesSiteResponseObject) ListMsserverAdsitesSiteResponse {
	return ListMsserverAdsitesSiteResponse{
		ListMsserverAdsitesSiteResponseObject: v,
	}
}

// []MsserverAdsitesSiteAsListMsserverAdsitesSiteResponse is a convenience function that returns []MsserverAdsitesSite wrapped in ListMsserverAdsitesSiteResponse
func ArrayOfMsserverAdsitesSiteAsListMsserverAdsitesSiteResponse(v *[]MsserverAdsitesSite) ListMsserverAdsitesSiteResponse {
	return ListMsserverAdsitesSiteResponse{
		ArrayOfMsserverAdsitesSite: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMsserverAdsitesSiteResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMsserverAdsitesSiteResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMsserverAdsitesSiteResponseObject)
	if err == nil {
		jsonListMsserverAdsitesSiteResponseObject, _ := json.Marshal(dst.ListMsserverAdsitesSiteResponseObject)
		if string(jsonListMsserverAdsitesSiteResponseObject) == "{}" { // empty struct
			dst.ListMsserverAdsitesSiteResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMsserverAdsitesSiteResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMsserverAdsitesSite
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMsserverAdsitesSite)
	if err == nil {
		jsonArrayOfMsserverAdsitesSite, _ := json.Marshal(dst.ArrayOfMsserverAdsitesSite)
		if string(jsonArrayOfMsserverAdsitesSite) == "{}" { // empty struct
			dst.ArrayOfMsserverAdsitesSite = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMsserverAdsitesSite = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMsserverAdsitesSiteResponseObject = nil
		dst.ArrayOfMsserverAdsitesSite = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMsserverAdsitesSiteResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMsserverAdsitesSiteResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	if src.ListMsserverAdsitesSiteResponseObject != nil {
		return json.Marshal(&src.ListMsserverAdsitesSiteResponseObject)
	}

	if src.ArrayOfMsserverAdsitesSite != nil {
		return json.Marshal(&src.ArrayOfMsserverAdsitesSite)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMsserverAdsitesSiteResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMsserverAdsitesSiteResponseObject != nil {
		return obj.ListMsserverAdsitesSiteResponseObject
	}

	if obj.ArrayOfMsserverAdsitesSite != nil {
		return obj.ArrayOfMsserverAdsitesSite
	}

	// all schemas are nil
	return nil
}

type NullableListMsserverAdsitesSiteResponse struct {
	value *ListMsserverAdsitesSiteResponse
	isSet bool
}

func (v NullableListMsserverAdsitesSiteResponse) Get() *ListMsserverAdsitesSiteResponse {
	return v.value
}

func (v *NullableListMsserverAdsitesSiteResponse) Set(val *ListMsserverAdsitesSiteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMsserverAdsitesSiteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMsserverAdsitesSiteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMsserverAdsitesSiteResponse(val *ListMsserverAdsitesSiteResponse) *NullableListMsserverAdsitesSiteResponse {
	return &NullableListMsserverAdsitesSiteResponse{value: val, isSet: true}
}

func (v NullableListMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMsserverAdsitesSiteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
