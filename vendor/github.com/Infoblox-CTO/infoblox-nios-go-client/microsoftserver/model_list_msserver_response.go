/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// ListMsserverResponse - struct for ListMsserverResponse
type ListMsserverResponse struct {
	ListMsserverResponseObject *ListMsserverResponseObject
	ArrayOfMsserver            *[]Msserver
}

// ListMsserverResponseObjectAsListMsserverResponse is a convenience function that returns ListMsserverResponseObject wrapped in ListMsserverResponse
func ListMsserverResponseObjectAsListMsserverResponse(v *ListMsserverResponseObject) ListMsserverResponse {
	return ListMsserverResponse{
		ListMsserverResponseObject: v,
	}
}

// []MsserverAsListMsserverResponse is a convenience function that returns []Msserver wrapped in ListMsserverResponse
func ArrayOfMsserverAsListMsserverResponse(v *[]Msserver) ListMsserverResponse {
	return ListMsserverResponse{
		ArrayOfMsserver: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMsserverResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMsserverResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMsserverResponseObject)
	if err == nil {
		jsonListMsserverResponseObject, _ := json.Marshal(dst.ListMsserverResponseObject)
		if string(jsonListMsserverResponseObject) == "{}" { // empty struct
			dst.ListMsserverResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMsserverResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMsserver
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMsserver)
	if err == nil {
		jsonArrayOfMsserver, _ := json.Marshal(dst.ArrayOfMsserver)
		if string(jsonArrayOfMsserver) == "{}" { // empty struct
			dst.ArrayOfMsserver = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMsserver = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMsserverResponseObject = nil
		dst.ArrayOfMsserver = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMsserverResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMsserverResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMsserverResponse) MarshalJSON() ([]byte, error) {
	if src.ListMsserverResponseObject != nil {
		return json.Marshal(&src.ListMsserverResponseObject)
	}

	if src.ArrayOfMsserver != nil {
		return json.Marshal(&src.ArrayOfMsserver)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMsserverResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMsserverResponseObject != nil {
		return obj.ListMsserverResponseObject
	}

	if obj.ArrayOfMsserver != nil {
		return obj.ArrayOfMsserver
	}

	// all schemas are nil
	return nil
}

type NullableListMsserverResponse struct {
	value *ListMsserverResponse
	isSet bool
}

func (v NullableListMsserverResponse) Get() *ListMsserverResponse {
	return v.value
}

func (v *NullableListMsserverResponse) Set(val *ListMsserverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMsserverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMsserverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMsserverResponse(val *ListMsserverResponse) *NullableListMsserverResponse {
	return &NullableListMsserverResponse{value: val, isSet: true}
}

func (v NullableListMsserverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMsserverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
