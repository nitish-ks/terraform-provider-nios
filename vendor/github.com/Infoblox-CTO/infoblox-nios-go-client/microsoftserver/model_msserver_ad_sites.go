/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverAdSites type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverAdSites{}

// MsserverAdSites struct for MsserverAdSites
type MsserverAdSites struct {
	// Flag to override MS Server default IP site link
	UseDefaultIpSiteLink *bool `json:"use_default_ip_site_link,omitempty"`
	// Default IP site link for sites created from NIOS
	DefaultIpSiteLink *string `json:"default_ip_site_link,omitempty"`
	// Flag to override login name and password from the MS Server
	UseLogin *bool `json:"use_login,omitempty"`
	// Microsoft Server login name, with optional
	LoginName *string `json:"login_name,omitempty"`
	// Microsoft Server login password.
	LoginPassword *string `json:"login_password,omitempty"`
	// Flag to override synchronization interval from the MS Server
	UseSynchronizationMinDelay *bool `json:"use_synchronization_min_delay,omitempty"`
	// Minimum number of minutes between two synchronizations
	SynchronizationMinDelay *int64 `json:"synchronization_min_delay,omitempty"`
	// Flag to override cluster LDAP timeoutMS Server
	UseLdapTimeout *bool `json:"use_ldap_timeout,omitempty"`
	// Timeout in seconds for LDAP connections for this MS Server
	LdapTimeout *int64 `json:"ldap_timeout,omitempty"`
	// TCP port for LDAP connections for this
	LdapAuthPort *int64 `json:"ldap_auth_port,omitempty"`
	// Encryption for LDAP connections for this MS Server
	LdapEncryption *string `json:"ldap_encryption,omitempty"`
	// Controls whether the Sites of this MS Server are to be synchronized by the assigned managing member or not
	Managed *bool `json:"managed,omitempty"`
	// Enable/disable read-only synchronization of Sites for this Active Directory domain
	ReadOnly *bool `json:"read_only,omitempty"`
	// Timestamp of the last synchronization attempt
	LastSyncTs *int64 `json:"last_sync_ts,omitempty"`
	// Status of the last synchronization attempt
	LastSyncStatus *string `json:"last_sync_status,omitempty"`
	// The detailed status of the last synchronization attempt.
	LastSyncDetail *string `json:"last_sync_detail,omitempty"`
	// Flag indicating if the server supports IPv6
	SupportsIpv6         *bool `json:"supports_ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MsserverAdSites MsserverAdSites

// NewMsserverAdSites instantiates a new MsserverAdSites object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverAdSites() *MsserverAdSites {
	this := MsserverAdSites{}
	return &this
}

// NewMsserverAdSitesWithDefaults instantiates a new MsserverAdSites object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverAdSitesWithDefaults() *MsserverAdSites {
	this := MsserverAdSites{}
	return &this
}

// GetUseDefaultIpSiteLink returns the UseDefaultIpSiteLink field value if set, zero value otherwise.
func (o *MsserverAdSites) GetUseDefaultIpSiteLink() bool {
	if o == nil || IsNil(o.UseDefaultIpSiteLink) {
		var ret bool
		return ret
	}
	return *o.UseDefaultIpSiteLink
}

// GetUseDefaultIpSiteLinkOk returns a tuple with the UseDefaultIpSiteLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetUseDefaultIpSiteLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultIpSiteLink) {
		return nil, false
	}
	return o.UseDefaultIpSiteLink, true
}

// HasUseDefaultIpSiteLink returns a boolean if a field has been set.
func (o *MsserverAdSites) HasUseDefaultIpSiteLink() bool {
	if o != nil && !IsNil(o.UseDefaultIpSiteLink) {
		return true
	}

	return false
}

// SetUseDefaultIpSiteLink gets a reference to the given bool and assigns it to the UseDefaultIpSiteLink field.
func (o *MsserverAdSites) SetUseDefaultIpSiteLink(v bool) {
	o.UseDefaultIpSiteLink = &v
}

// GetDefaultIpSiteLink returns the DefaultIpSiteLink field value if set, zero value otherwise.
func (o *MsserverAdSites) GetDefaultIpSiteLink() string {
	if o == nil || IsNil(o.DefaultIpSiteLink) {
		var ret string
		return ret
	}
	return *o.DefaultIpSiteLink
}

// GetDefaultIpSiteLinkOk returns a tuple with the DefaultIpSiteLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetDefaultIpSiteLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIpSiteLink) {
		return nil, false
	}
	return o.DefaultIpSiteLink, true
}

// HasDefaultIpSiteLink returns a boolean if a field has been set.
func (o *MsserverAdSites) HasDefaultIpSiteLink() bool {
	if o != nil && !IsNil(o.DefaultIpSiteLink) {
		return true
	}

	return false
}

// SetDefaultIpSiteLink gets a reference to the given string and assigns it to the DefaultIpSiteLink field.
func (o *MsserverAdSites) SetDefaultIpSiteLink(v string) {
	o.DefaultIpSiteLink = &v
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverAdSites) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverAdSites) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverAdSites) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverAdSites) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverAdSites) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetUseSynchronizationMinDelay returns the UseSynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverAdSites) GetUseSynchronizationMinDelay() bool {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationMinDelay
}

// GetUseSynchronizationMinDelayOk returns a tuple with the UseSynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetUseSynchronizationMinDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		return nil, false
	}
	return o.UseSynchronizationMinDelay, true
}

// HasUseSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverAdSites) HasUseSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.UseSynchronizationMinDelay) {
		return true
	}

	return false
}

// SetUseSynchronizationMinDelay gets a reference to the given bool and assigns it to the UseSynchronizationMinDelay field.
func (o *MsserverAdSites) SetUseSynchronizationMinDelay(v bool) {
	o.UseSynchronizationMinDelay = &v
}

// GetSynchronizationMinDelay returns the SynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverAdSites) GetSynchronizationMinDelay() int64 {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		var ret int64
		return ret
	}
	return *o.SynchronizationMinDelay
}

// GetSynchronizationMinDelayOk returns a tuple with the SynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetSynchronizationMinDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		return nil, false
	}
	return o.SynchronizationMinDelay, true
}

// HasSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverAdSites) HasSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.SynchronizationMinDelay) {
		return true
	}

	return false
}

// SetSynchronizationMinDelay gets a reference to the given int64 and assigns it to the SynchronizationMinDelay field.
func (o *MsserverAdSites) SetSynchronizationMinDelay(v int64) {
	o.SynchronizationMinDelay = &v
}

// GetUseLdapTimeout returns the UseLdapTimeout field value if set, zero value otherwise.
func (o *MsserverAdSites) GetUseLdapTimeout() bool {
	if o == nil || IsNil(o.UseLdapTimeout) {
		var ret bool
		return ret
	}
	return *o.UseLdapTimeout
}

// GetUseLdapTimeoutOk returns a tuple with the UseLdapTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetUseLdapTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLdapTimeout) {
		return nil, false
	}
	return o.UseLdapTimeout, true
}

// HasUseLdapTimeout returns a boolean if a field has been set.
func (o *MsserverAdSites) HasUseLdapTimeout() bool {
	if o != nil && !IsNil(o.UseLdapTimeout) {
		return true
	}

	return false
}

// SetUseLdapTimeout gets a reference to the given bool and assigns it to the UseLdapTimeout field.
func (o *MsserverAdSites) SetUseLdapTimeout(v bool) {
	o.UseLdapTimeout = &v
}

// GetLdapTimeout returns the LdapTimeout field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLdapTimeout() int64 {
	if o == nil || IsNil(o.LdapTimeout) {
		var ret int64
		return ret
	}
	return *o.LdapTimeout
}

// GetLdapTimeoutOk returns a tuple with the LdapTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLdapTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.LdapTimeout) {
		return nil, false
	}
	return o.LdapTimeout, true
}

// HasLdapTimeout returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLdapTimeout() bool {
	if o != nil && !IsNil(o.LdapTimeout) {
		return true
	}

	return false
}

// SetLdapTimeout gets a reference to the given int64 and assigns it to the LdapTimeout field.
func (o *MsserverAdSites) SetLdapTimeout(v int64) {
	o.LdapTimeout = &v
}

// GetLdapAuthPort returns the LdapAuthPort field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLdapAuthPort() int64 {
	if o == nil || IsNil(o.LdapAuthPort) {
		var ret int64
		return ret
	}
	return *o.LdapAuthPort
}

// GetLdapAuthPortOk returns a tuple with the LdapAuthPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLdapAuthPortOk() (*int64, bool) {
	if o == nil || IsNil(o.LdapAuthPort) {
		return nil, false
	}
	return o.LdapAuthPort, true
}

// HasLdapAuthPort returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLdapAuthPort() bool {
	if o != nil && !IsNil(o.LdapAuthPort) {
		return true
	}

	return false
}

// SetLdapAuthPort gets a reference to the given int64 and assigns it to the LdapAuthPort field.
func (o *MsserverAdSites) SetLdapAuthPort(v int64) {
	o.LdapAuthPort = &v
}

// GetLdapEncryption returns the LdapEncryption field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLdapEncryption() string {
	if o == nil || IsNil(o.LdapEncryption) {
		var ret string
		return ret
	}
	return *o.LdapEncryption
}

// GetLdapEncryptionOk returns a tuple with the LdapEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLdapEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.LdapEncryption) {
		return nil, false
	}
	return o.LdapEncryption, true
}

// HasLdapEncryption returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLdapEncryption() bool {
	if o != nil && !IsNil(o.LdapEncryption) {
		return true
	}

	return false
}

// SetLdapEncryption gets a reference to the given string and assigns it to the LdapEncryption field.
func (o *MsserverAdSites) SetLdapEncryption(v string) {
	o.LdapEncryption = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *MsserverAdSites) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *MsserverAdSites) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *MsserverAdSites) SetManaged(v bool) {
	o.Managed = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *MsserverAdSites) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *MsserverAdSites) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *MsserverAdSites) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetLastSyncTs returns the LastSyncTs field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLastSyncTs() int64 {
	if o == nil || IsNil(o.LastSyncTs) {
		var ret int64
		return ret
	}
	return *o.LastSyncTs
}

// GetLastSyncTsOk returns a tuple with the LastSyncTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLastSyncTsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSyncTs) {
		return nil, false
	}
	return o.LastSyncTs, true
}

// HasLastSyncTs returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLastSyncTs() bool {
	if o != nil && !IsNil(o.LastSyncTs) {
		return true
	}

	return false
}

// SetLastSyncTs gets a reference to the given int64 and assigns it to the LastSyncTs field.
func (o *MsserverAdSites) SetLastSyncTs(v int64) {
	o.LastSyncTs = &v
}

// GetLastSyncStatus returns the LastSyncStatus field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLastSyncStatus() string {
	if o == nil || IsNil(o.LastSyncStatus) {
		var ret string
		return ret
	}
	return *o.LastSyncStatus
}

// GetLastSyncStatusOk returns a tuple with the LastSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLastSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncStatus) {
		return nil, false
	}
	return o.LastSyncStatus, true
}

// HasLastSyncStatus returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLastSyncStatus() bool {
	if o != nil && !IsNil(o.LastSyncStatus) {
		return true
	}

	return false
}

// SetLastSyncStatus gets a reference to the given string and assigns it to the LastSyncStatus field.
func (o *MsserverAdSites) SetLastSyncStatus(v string) {
	o.LastSyncStatus = &v
}

// GetLastSyncDetail returns the LastSyncDetail field value if set, zero value otherwise.
func (o *MsserverAdSites) GetLastSyncDetail() string {
	if o == nil || IsNil(o.LastSyncDetail) {
		var ret string
		return ret
	}
	return *o.LastSyncDetail
}

// GetLastSyncDetailOk returns a tuple with the LastSyncDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetLastSyncDetailOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncDetail) {
		return nil, false
	}
	return o.LastSyncDetail, true
}

// HasLastSyncDetail returns a boolean if a field has been set.
func (o *MsserverAdSites) HasLastSyncDetail() bool {
	if o != nil && !IsNil(o.LastSyncDetail) {
		return true
	}

	return false
}

// SetLastSyncDetail gets a reference to the given string and assigns it to the LastSyncDetail field.
func (o *MsserverAdSites) SetLastSyncDetail(v string) {
	o.LastSyncDetail = &v
}

// GetSupportsIpv6 returns the SupportsIpv6 field value if set, zero value otherwise.
func (o *MsserverAdSites) GetSupportsIpv6() bool {
	if o == nil || IsNil(o.SupportsIpv6) {
		var ret bool
		return ret
	}
	return *o.SupportsIpv6
}

// GetSupportsIpv6Ok returns a tuple with the SupportsIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdSites) GetSupportsIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.SupportsIpv6) {
		return nil, false
	}
	return o.SupportsIpv6, true
}

// HasSupportsIpv6 returns a boolean if a field has been set.
func (o *MsserverAdSites) HasSupportsIpv6() bool {
	if o != nil && !IsNil(o.SupportsIpv6) {
		return true
	}

	return false
}

// SetSupportsIpv6 gets a reference to the given bool and assigns it to the SupportsIpv6 field.
func (o *MsserverAdSites) SetSupportsIpv6(v bool) {
	o.SupportsIpv6 = &v
}

func (o MsserverAdSites) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverAdSites) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseDefaultIpSiteLink) {
		toSerialize["use_default_ip_site_link"] = o.UseDefaultIpSiteLink
	}
	if !IsNil(o.DefaultIpSiteLink) {
		toSerialize["default_ip_site_link"] = o.DefaultIpSiteLink
	}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.UseSynchronizationMinDelay) {
		toSerialize["use_synchronization_min_delay"] = o.UseSynchronizationMinDelay
	}
	if !IsNil(o.SynchronizationMinDelay) {
		toSerialize["synchronization_min_delay"] = o.SynchronizationMinDelay
	}
	if !IsNil(o.UseLdapTimeout) {
		toSerialize["use_ldap_timeout"] = o.UseLdapTimeout
	}
	if !IsNil(o.LdapTimeout) {
		toSerialize["ldap_timeout"] = o.LdapTimeout
	}
	if !IsNil(o.LdapAuthPort) {
		toSerialize["ldap_auth_port"] = o.LdapAuthPort
	}
	if !IsNil(o.LdapEncryption) {
		toSerialize["ldap_encryption"] = o.LdapEncryption
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}
	if !IsNil(o.LastSyncTs) {
		toSerialize["last_sync_ts"] = o.LastSyncTs
	}
	if !IsNil(o.LastSyncStatus) {
		toSerialize["last_sync_status"] = o.LastSyncStatus
	}
	if !IsNil(o.LastSyncDetail) {
		toSerialize["last_sync_detail"] = o.LastSyncDetail
	}
	if !IsNil(o.SupportsIpv6) {
		toSerialize["supports_ipv6"] = o.SupportsIpv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MsserverAdSites) UnmarshalJSON(data []byte) (err error) {
	varMsserverAdSites := _MsserverAdSites{}

	err = json.Unmarshal(data, &varMsserverAdSites)

	if err != nil {
		return err
	}

	*o = MsserverAdSites(varMsserverAdSites)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "use_default_ip_site_link")
		delete(additionalProperties, "default_ip_site_link")
		delete(additionalProperties, "use_login")
		delete(additionalProperties, "login_name")
		delete(additionalProperties, "login_password")
		delete(additionalProperties, "use_synchronization_min_delay")
		delete(additionalProperties, "synchronization_min_delay")
		delete(additionalProperties, "use_ldap_timeout")
		delete(additionalProperties, "ldap_timeout")
		delete(additionalProperties, "ldap_auth_port")
		delete(additionalProperties, "ldap_encryption")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "read_only")
		delete(additionalProperties, "last_sync_ts")
		delete(additionalProperties, "last_sync_status")
		delete(additionalProperties, "last_sync_detail")
		delete(additionalProperties, "supports_ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMsserverAdSites struct {
	value *MsserverAdSites
	isSet bool
}

func (v NullableMsserverAdSites) Get() *MsserverAdSites {
	return v.value
}

func (v *NullableMsserverAdSites) Set(val *MsserverAdSites) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverAdSites) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverAdSites) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverAdSites(val *MsserverAdSites) *NullableMsserverAdSites {
	return &NullableMsserverAdSites{value: val, isSet: true}
}

func (v NullableMsserverAdSites) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverAdSites) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
