/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverAdUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverAdUser{}

// MsserverAdUser struct for MsserverAdUser
type MsserverAdUser struct {
	// The login name of the Microsoft Server.
	LoginName *string `json:"login_name,omitempty"`
	// The login password of the DHCP Microsoft Server.
	LoginPassword *string `json:"login_password,omitempty"`
	// Determines whether the Active Directory user synchronization is enabled or not.
	EnableUserSync *bool `json:"enable_user_sync,omitempty"`
	// The minimum number of minutes between two synchronizations.
	SynchronizationInterval *int64 `json:"synchronization_interval,omitempty"`
	// Timestamp of the last synchronization attempt.
	LastSyncTime *int64 `json:"last_sync_time,omitempty"`
	// The status of the last synchronization attempt.
	LastSyncStatus *string `json:"last_sync_status,omitempty"`
	// The detailed status of the last synchronization attempt.
	LastSyncDetail *string `json:"last_sync_detail,omitempty"`
	// Timestamp of the last successful synchronization attempt.
	LastSuccessSyncTime *int64 `json:"last_success_sync_time,omitempty"`
	// Flag to override login name and password from MS server
	UseLogin *bool `json:"use_login,omitempty"`
	// Flag to override AD User sync from grid level
	UseEnableAdUserSync *bool `json:"use_enable_ad_user_sync,omitempty"`
	// Flag to override synchronization interval from the MS Server
	UseSynchronizationMinDelay *bool `json:"use_synchronization_min_delay,omitempty"`
	// Use flag for: enable_user_sync
	UseEnableUserSync *bool `json:"use_enable_user_sync,omitempty"`
	// Use flag for: synchronization_interval
	UseSynchronizationInterval *bool `json:"use_synchronization_interval,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _MsserverAdUser MsserverAdUser

// NewMsserverAdUser instantiates a new MsserverAdUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverAdUser() *MsserverAdUser {
	this := MsserverAdUser{}
	return &this
}

// NewMsserverAdUserWithDefaults instantiates a new MsserverAdUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverAdUserWithDefaults() *MsserverAdUser {
	this := MsserverAdUser{}
	return &this
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverAdUser) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverAdUser) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetEnableUserSync returns the EnableUserSync field value if set, zero value otherwise.
func (o *MsserverAdUser) GetEnableUserSync() bool {
	if o == nil || IsNil(o.EnableUserSync) {
		var ret bool
		return ret
	}
	return *o.EnableUserSync
}

// GetEnableUserSyncOk returns a tuple with the EnableUserSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetEnableUserSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserSync) {
		return nil, false
	}
	return o.EnableUserSync, true
}

// HasEnableUserSync returns a boolean if a field has been set.
func (o *MsserverAdUser) HasEnableUserSync() bool {
	if o != nil && !IsNil(o.EnableUserSync) {
		return true
	}

	return false
}

// SetEnableUserSync gets a reference to the given bool and assigns it to the EnableUserSync field.
func (o *MsserverAdUser) SetEnableUserSync(v bool) {
	o.EnableUserSync = &v
}

// GetSynchronizationInterval returns the SynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverAdUser) GetSynchronizationInterval() int64 {
	if o == nil || IsNil(o.SynchronizationInterval) {
		var ret int64
		return ret
	}
	return *o.SynchronizationInterval
}

// GetSynchronizationIntervalOk returns a tuple with the SynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetSynchronizationIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationInterval) {
		return nil, false
	}
	return o.SynchronizationInterval, true
}

// HasSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverAdUser) HasSynchronizationInterval() bool {
	if o != nil && !IsNil(o.SynchronizationInterval) {
		return true
	}

	return false
}

// SetSynchronizationInterval gets a reference to the given int64 and assigns it to the SynchronizationInterval field.
func (o *MsserverAdUser) SetSynchronizationInterval(v int64) {
	o.SynchronizationInterval = &v
}

// GetLastSyncTime returns the LastSyncTime field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLastSyncTime() int64 {
	if o == nil || IsNil(o.LastSyncTime) {
		var ret int64
		return ret
	}
	return *o.LastSyncTime
}

// GetLastSyncTimeOk returns a tuple with the LastSyncTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLastSyncTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSyncTime) {
		return nil, false
	}
	return o.LastSyncTime, true
}

// HasLastSyncTime returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLastSyncTime() bool {
	if o != nil && !IsNil(o.LastSyncTime) {
		return true
	}

	return false
}

// SetLastSyncTime gets a reference to the given int64 and assigns it to the LastSyncTime field.
func (o *MsserverAdUser) SetLastSyncTime(v int64) {
	o.LastSyncTime = &v
}

// GetLastSyncStatus returns the LastSyncStatus field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLastSyncStatus() string {
	if o == nil || IsNil(o.LastSyncStatus) {
		var ret string
		return ret
	}
	return *o.LastSyncStatus
}

// GetLastSyncStatusOk returns a tuple with the LastSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLastSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncStatus) {
		return nil, false
	}
	return o.LastSyncStatus, true
}

// HasLastSyncStatus returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLastSyncStatus() bool {
	if o != nil && !IsNil(o.LastSyncStatus) {
		return true
	}

	return false
}

// SetLastSyncStatus gets a reference to the given string and assigns it to the LastSyncStatus field.
func (o *MsserverAdUser) SetLastSyncStatus(v string) {
	o.LastSyncStatus = &v
}

// GetLastSyncDetail returns the LastSyncDetail field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLastSyncDetail() string {
	if o == nil || IsNil(o.LastSyncDetail) {
		var ret string
		return ret
	}
	return *o.LastSyncDetail
}

// GetLastSyncDetailOk returns a tuple with the LastSyncDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLastSyncDetailOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncDetail) {
		return nil, false
	}
	return o.LastSyncDetail, true
}

// HasLastSyncDetail returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLastSyncDetail() bool {
	if o != nil && !IsNil(o.LastSyncDetail) {
		return true
	}

	return false
}

// SetLastSyncDetail gets a reference to the given string and assigns it to the LastSyncDetail field.
func (o *MsserverAdUser) SetLastSyncDetail(v string) {
	o.LastSyncDetail = &v
}

// GetLastSuccessSyncTime returns the LastSuccessSyncTime field value if set, zero value otherwise.
func (o *MsserverAdUser) GetLastSuccessSyncTime() int64 {
	if o == nil || IsNil(o.LastSuccessSyncTime) {
		var ret int64
		return ret
	}
	return *o.LastSuccessSyncTime
}

// GetLastSuccessSyncTimeOk returns a tuple with the LastSuccessSyncTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetLastSuccessSyncTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSuccessSyncTime) {
		return nil, false
	}
	return o.LastSuccessSyncTime, true
}

// HasLastSuccessSyncTime returns a boolean if a field has been set.
func (o *MsserverAdUser) HasLastSuccessSyncTime() bool {
	if o != nil && !IsNil(o.LastSuccessSyncTime) {
		return true
	}

	return false
}

// SetLastSuccessSyncTime gets a reference to the given int64 and assigns it to the LastSuccessSyncTime field.
func (o *MsserverAdUser) SetLastSuccessSyncTime(v int64) {
	o.LastSuccessSyncTime = &v
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverAdUser) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverAdUser) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverAdUser) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetUseEnableAdUserSync returns the UseEnableAdUserSync field value if set, zero value otherwise.
func (o *MsserverAdUser) GetUseEnableAdUserSync() bool {
	if o == nil || IsNil(o.UseEnableAdUserSync) {
		var ret bool
		return ret
	}
	return *o.UseEnableAdUserSync
}

// GetUseEnableAdUserSyncOk returns a tuple with the UseEnableAdUserSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetUseEnableAdUserSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableAdUserSync) {
		return nil, false
	}
	return o.UseEnableAdUserSync, true
}

// HasUseEnableAdUserSync returns a boolean if a field has been set.
func (o *MsserverAdUser) HasUseEnableAdUserSync() bool {
	if o != nil && !IsNil(o.UseEnableAdUserSync) {
		return true
	}

	return false
}

// SetUseEnableAdUserSync gets a reference to the given bool and assigns it to the UseEnableAdUserSync field.
func (o *MsserverAdUser) SetUseEnableAdUserSync(v bool) {
	o.UseEnableAdUserSync = &v
}

// GetUseSynchronizationMinDelay returns the UseSynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverAdUser) GetUseSynchronizationMinDelay() bool {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationMinDelay
}

// GetUseSynchronizationMinDelayOk returns a tuple with the UseSynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetUseSynchronizationMinDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		return nil, false
	}
	return o.UseSynchronizationMinDelay, true
}

// HasUseSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverAdUser) HasUseSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.UseSynchronizationMinDelay) {
		return true
	}

	return false
}

// SetUseSynchronizationMinDelay gets a reference to the given bool and assigns it to the UseSynchronizationMinDelay field.
func (o *MsserverAdUser) SetUseSynchronizationMinDelay(v bool) {
	o.UseSynchronizationMinDelay = &v
}

// GetUseEnableUserSync returns the UseEnableUserSync field value if set, zero value otherwise.
func (o *MsserverAdUser) GetUseEnableUserSync() bool {
	if o == nil || IsNil(o.UseEnableUserSync) {
		var ret bool
		return ret
	}
	return *o.UseEnableUserSync
}

// GetUseEnableUserSyncOk returns a tuple with the UseEnableUserSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetUseEnableUserSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableUserSync) {
		return nil, false
	}
	return o.UseEnableUserSync, true
}

// HasUseEnableUserSync returns a boolean if a field has been set.
func (o *MsserverAdUser) HasUseEnableUserSync() bool {
	if o != nil && !IsNil(o.UseEnableUserSync) {
		return true
	}

	return false
}

// SetUseEnableUserSync gets a reference to the given bool and assigns it to the UseEnableUserSync field.
func (o *MsserverAdUser) SetUseEnableUserSync(v bool) {
	o.UseEnableUserSync = &v
}

// GetUseSynchronizationInterval returns the UseSynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverAdUser) GetUseSynchronizationInterval() bool {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationInterval
}

// GetUseSynchronizationIntervalOk returns a tuple with the UseSynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverAdUser) GetUseSynchronizationIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		return nil, false
	}
	return o.UseSynchronizationInterval, true
}

// HasUseSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverAdUser) HasUseSynchronizationInterval() bool {
	if o != nil && !IsNil(o.UseSynchronizationInterval) {
		return true
	}

	return false
}

// SetUseSynchronizationInterval gets a reference to the given bool and assigns it to the UseSynchronizationInterval field.
func (o *MsserverAdUser) SetUseSynchronizationInterval(v bool) {
	o.UseSynchronizationInterval = &v
}

func (o MsserverAdUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverAdUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.EnableUserSync) {
		toSerialize["enable_user_sync"] = o.EnableUserSync
	}
	if !IsNil(o.SynchronizationInterval) {
		toSerialize["synchronization_interval"] = o.SynchronizationInterval
	}
	if !IsNil(o.LastSyncTime) {
		toSerialize["last_sync_time"] = o.LastSyncTime
	}
	if !IsNil(o.LastSyncStatus) {
		toSerialize["last_sync_status"] = o.LastSyncStatus
	}
	if !IsNil(o.LastSyncDetail) {
		toSerialize["last_sync_detail"] = o.LastSyncDetail
	}
	if !IsNil(o.LastSuccessSyncTime) {
		toSerialize["last_success_sync_time"] = o.LastSuccessSyncTime
	}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.UseEnableAdUserSync) {
		toSerialize["use_enable_ad_user_sync"] = o.UseEnableAdUserSync
	}
	if !IsNil(o.UseSynchronizationMinDelay) {
		toSerialize["use_synchronization_min_delay"] = o.UseSynchronizationMinDelay
	}
	if !IsNil(o.UseEnableUserSync) {
		toSerialize["use_enable_user_sync"] = o.UseEnableUserSync
	}
	if !IsNil(o.UseSynchronizationInterval) {
		toSerialize["use_synchronization_interval"] = o.UseSynchronizationInterval
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MsserverAdUser) UnmarshalJSON(data []byte) (err error) {
	varMsserverAdUser := _MsserverAdUser{}

	err = json.Unmarshal(data, &varMsserverAdUser)

	if err != nil {
		return err
	}

	*o = MsserverAdUser(varMsserverAdUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "login_name")
		delete(additionalProperties, "login_password")
		delete(additionalProperties, "enable_user_sync")
		delete(additionalProperties, "synchronization_interval")
		delete(additionalProperties, "last_sync_time")
		delete(additionalProperties, "last_sync_status")
		delete(additionalProperties, "last_sync_detail")
		delete(additionalProperties, "last_success_sync_time")
		delete(additionalProperties, "use_login")
		delete(additionalProperties, "use_enable_ad_user_sync")
		delete(additionalProperties, "use_synchronization_min_delay")
		delete(additionalProperties, "use_enable_user_sync")
		delete(additionalProperties, "use_synchronization_interval")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMsserverAdUser struct {
	value *MsserverAdUser
	isSet bool
}

func (v NullableMsserverAdUser) Get() *MsserverAdUser {
	return v.value
}

func (v *NullableMsserverAdUser) Set(val *MsserverAdUser) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverAdUser) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverAdUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverAdUser(val *MsserverAdUser) *NullableMsserverAdUser {
	return &NullableMsserverAdUser{value: val, isSet: true}
}

func (v NullableMsserverAdUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverAdUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
