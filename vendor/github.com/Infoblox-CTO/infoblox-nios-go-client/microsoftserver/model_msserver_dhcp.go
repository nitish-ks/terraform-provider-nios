/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverDhcp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverDhcp{}

// MsserverDhcp struct for MsserverDhcp
type MsserverDhcp struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The address or FQDN of the DHCP Microsoft Server.
	Address *string `json:"address,omitempty"`
	// Comment from Microsoft Server
	Comment *string `json:"comment,omitempty"`
	// The percentage of the total DHCP utilization of DHCP objects belonging to the DHCP Microsoft Server multiplied by 1000. This is the percentage of the total number of available IP addresses from all the DHCP objects belonging to the DHCP Microsoft Server versus the total number of all IP addresses in all of the DHCP objects on the DHCP Microsoft Server.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
	// A string describing the utilization level of DHCP objects that belong to the DHCP Microsoft Server.
	DhcpUtilizationStatus *string `json:"dhcp_utilization_status,omitempty"`
	// The total number of DHCP leases issued for the DHCP objects on the DHCP Microsoft Server.
	DynamicHosts *int64 `json:"dynamic_hosts,omitempty"`
	// Timestamp of the last synchronization attempt
	LastSyncTs *int64 `json:"last_sync_ts,omitempty"`
	// The login name of the DHCP Microsoft Server.
	LoginName *string `json:"login_name,omitempty"`
	// The login password of the DHCP Microsoft Server.
	LoginPassword *string `json:"login_password,omitempty"`
	// Network view to update
	NetworkView *string `json:"network_view,omitempty"`
	// Defines what control to apply on the DHCP server
	NextSyncControl *string `json:"next_sync_control,omitempty"`
	// Whether Microsoft server is read only
	ReadOnly *bool `json:"read_only,omitempty"`
	// Microsoft server address
	ServerName *string `json:"server_name,omitempty"`
	// The number of static DHCP addresses configured in DHCP objects that belong to the DHCP Microsoft Server.
	StaticHosts *int64 `json:"static_hosts,omitempty"`
	// Status of the Microsoft DHCP Service
	Status *string `json:"status,omitempty"`
	// Detailed status of the DHCP status
	StatusDetail *string `json:"status_detail,omitempty"`
	// Timestamp of the last update
	StatusLastUpdated *int64 `json:"status_last_updated,omitempty"`
	// Flag indicating if the DHCP supports Failover
	SupportsFailover *bool `json:"supports_failover,omitempty"`
	// The minimum number of minutes between two synchronizations.
	SynchronizationInterval *int64 `json:"synchronization_interval,omitempty"`
	// The total number of DHCP addresses configured in DHCP objects that belong to the DHCP Microsoft Server.
	TotalHosts *int64 `json:"total_hosts,omitempty"`
	// Use flag for: login_name , login_password
	UseLogin *bool `json:"use_login,omitempty"`
	// Use flag for: synchronization_interval
	UseSynchronizationInterval *bool `json:"use_synchronization_interval,omitempty"`
}

// NewMsserverDhcp instantiates a new MsserverDhcp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverDhcp() *MsserverDhcp {
	this := MsserverDhcp{}
	return &this
}

// NewMsserverDhcpWithDefaults instantiates a new MsserverDhcp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverDhcpWithDefaults() *MsserverDhcp {
	this := MsserverDhcp{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *MsserverDhcp) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *MsserverDhcp) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *MsserverDhcp) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MsserverDhcp) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MsserverDhcp) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MsserverDhcp) SetAddress(v string) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MsserverDhcp) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MsserverDhcp) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MsserverDhcp) SetComment(v string) {
	o.Comment = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *MsserverDhcp) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *MsserverDhcp) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *MsserverDhcp) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

// GetDhcpUtilizationStatus returns the DhcpUtilizationStatus field value if set, zero value otherwise.
func (o *MsserverDhcp) GetDhcpUtilizationStatus() string {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		var ret string
		return ret
	}
	return *o.DhcpUtilizationStatus
}

// GetDhcpUtilizationStatusOk returns a tuple with the DhcpUtilizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetDhcpUtilizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUtilizationStatus) {
		return nil, false
	}
	return o.DhcpUtilizationStatus, true
}

// HasDhcpUtilizationStatus returns a boolean if a field has been set.
func (o *MsserverDhcp) HasDhcpUtilizationStatus() bool {
	if o != nil && !IsNil(o.DhcpUtilizationStatus) {
		return true
	}

	return false
}

// SetDhcpUtilizationStatus gets a reference to the given string and assigns it to the DhcpUtilizationStatus field.
func (o *MsserverDhcp) SetDhcpUtilizationStatus(v string) {
	o.DhcpUtilizationStatus = &v
}

// GetDynamicHosts returns the DynamicHosts field value if set, zero value otherwise.
func (o *MsserverDhcp) GetDynamicHosts() int64 {
	if o == nil || IsNil(o.DynamicHosts) {
		var ret int64
		return ret
	}
	return *o.DynamicHosts
}

// GetDynamicHostsOk returns a tuple with the DynamicHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetDynamicHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.DynamicHosts) {
		return nil, false
	}
	return o.DynamicHosts, true
}

// HasDynamicHosts returns a boolean if a field has been set.
func (o *MsserverDhcp) HasDynamicHosts() bool {
	if o != nil && !IsNil(o.DynamicHosts) {
		return true
	}

	return false
}

// SetDynamicHosts gets a reference to the given int64 and assigns it to the DynamicHosts field.
func (o *MsserverDhcp) SetDynamicHosts(v int64) {
	o.DynamicHosts = &v
}

// GetLastSyncTs returns the LastSyncTs field value if set, zero value otherwise.
func (o *MsserverDhcp) GetLastSyncTs() int64 {
	if o == nil || IsNil(o.LastSyncTs) {
		var ret int64
		return ret
	}
	return *o.LastSyncTs
}

// GetLastSyncTsOk returns a tuple with the LastSyncTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetLastSyncTsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSyncTs) {
		return nil, false
	}
	return o.LastSyncTs, true
}

// HasLastSyncTs returns a boolean if a field has been set.
func (o *MsserverDhcp) HasLastSyncTs() bool {
	if o != nil && !IsNil(o.LastSyncTs) {
		return true
	}

	return false
}

// SetLastSyncTs gets a reference to the given int64 and assigns it to the LastSyncTs field.
func (o *MsserverDhcp) SetLastSyncTs(v int64) {
	o.LastSyncTs = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverDhcp) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverDhcp) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverDhcp) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverDhcp) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverDhcp) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverDhcp) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *MsserverDhcp) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *MsserverDhcp) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *MsserverDhcp) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNextSyncControl returns the NextSyncControl field value if set, zero value otherwise.
func (o *MsserverDhcp) GetNextSyncControl() string {
	if o == nil || IsNil(o.NextSyncControl) {
		var ret string
		return ret
	}
	return *o.NextSyncControl
}

// GetNextSyncControlOk returns a tuple with the NextSyncControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetNextSyncControlOk() (*string, bool) {
	if o == nil || IsNil(o.NextSyncControl) {
		return nil, false
	}
	return o.NextSyncControl, true
}

// HasNextSyncControl returns a boolean if a field has been set.
func (o *MsserverDhcp) HasNextSyncControl() bool {
	if o != nil && !IsNil(o.NextSyncControl) {
		return true
	}

	return false
}

// SetNextSyncControl gets a reference to the given string and assigns it to the NextSyncControl field.
func (o *MsserverDhcp) SetNextSyncControl(v string) {
	o.NextSyncControl = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *MsserverDhcp) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *MsserverDhcp) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *MsserverDhcp) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *MsserverDhcp) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *MsserverDhcp) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *MsserverDhcp) SetServerName(v string) {
	o.ServerName = &v
}

// GetStaticHosts returns the StaticHosts field value if set, zero value otherwise.
func (o *MsserverDhcp) GetStaticHosts() int64 {
	if o == nil || IsNil(o.StaticHosts) {
		var ret int64
		return ret
	}
	return *o.StaticHosts
}

// GetStaticHostsOk returns a tuple with the StaticHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetStaticHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.StaticHosts) {
		return nil, false
	}
	return o.StaticHosts, true
}

// HasStaticHosts returns a boolean if a field has been set.
func (o *MsserverDhcp) HasStaticHosts() bool {
	if o != nil && !IsNil(o.StaticHosts) {
		return true
	}

	return false
}

// SetStaticHosts gets a reference to the given int64 and assigns it to the StaticHosts field.
func (o *MsserverDhcp) SetStaticHosts(v int64) {
	o.StaticHosts = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MsserverDhcp) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MsserverDhcp) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MsserverDhcp) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDetail returns the StatusDetail field value if set, zero value otherwise.
func (o *MsserverDhcp) GetStatusDetail() string {
	if o == nil || IsNil(o.StatusDetail) {
		var ret string
		return ret
	}
	return *o.StatusDetail
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetStatusDetailOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDetail) {
		return nil, false
	}
	return o.StatusDetail, true
}

// HasStatusDetail returns a boolean if a field has been set.
func (o *MsserverDhcp) HasStatusDetail() bool {
	if o != nil && !IsNil(o.StatusDetail) {
		return true
	}

	return false
}

// SetStatusDetail gets a reference to the given string and assigns it to the StatusDetail field.
func (o *MsserverDhcp) SetStatusDetail(v string) {
	o.StatusDetail = &v
}

// GetStatusLastUpdated returns the StatusLastUpdated field value if set, zero value otherwise.
func (o *MsserverDhcp) GetStatusLastUpdated() int64 {
	if o == nil || IsNil(o.StatusLastUpdated) {
		var ret int64
		return ret
	}
	return *o.StatusLastUpdated
}

// GetStatusLastUpdatedOk returns a tuple with the StatusLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetStatusLastUpdatedOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusLastUpdated) {
		return nil, false
	}
	return o.StatusLastUpdated, true
}

// HasStatusLastUpdated returns a boolean if a field has been set.
func (o *MsserverDhcp) HasStatusLastUpdated() bool {
	if o != nil && !IsNil(o.StatusLastUpdated) {
		return true
	}

	return false
}

// SetStatusLastUpdated gets a reference to the given int64 and assigns it to the StatusLastUpdated field.
func (o *MsserverDhcp) SetStatusLastUpdated(v int64) {
	o.StatusLastUpdated = &v
}

// GetSupportsFailover returns the SupportsFailover field value if set, zero value otherwise.
func (o *MsserverDhcp) GetSupportsFailover() bool {
	if o == nil || IsNil(o.SupportsFailover) {
		var ret bool
		return ret
	}
	return *o.SupportsFailover
}

// GetSupportsFailoverOk returns a tuple with the SupportsFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetSupportsFailoverOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsFailover) {
		return nil, false
	}
	return o.SupportsFailover, true
}

// HasSupportsFailover returns a boolean if a field has been set.
func (o *MsserverDhcp) HasSupportsFailover() bool {
	if o != nil && !IsNil(o.SupportsFailover) {
		return true
	}

	return false
}

// SetSupportsFailover gets a reference to the given bool and assigns it to the SupportsFailover field.
func (o *MsserverDhcp) SetSupportsFailover(v bool) {
	o.SupportsFailover = &v
}

// GetSynchronizationInterval returns the SynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverDhcp) GetSynchronizationInterval() int64 {
	if o == nil || IsNil(o.SynchronizationInterval) {
		var ret int64
		return ret
	}
	return *o.SynchronizationInterval
}

// GetSynchronizationIntervalOk returns a tuple with the SynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetSynchronizationIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationInterval) {
		return nil, false
	}
	return o.SynchronizationInterval, true
}

// HasSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverDhcp) HasSynchronizationInterval() bool {
	if o != nil && !IsNil(o.SynchronizationInterval) {
		return true
	}

	return false
}

// SetSynchronizationInterval gets a reference to the given int64 and assigns it to the SynchronizationInterval field.
func (o *MsserverDhcp) SetSynchronizationInterval(v int64) {
	o.SynchronizationInterval = &v
}

// GetTotalHosts returns the TotalHosts field value if set, zero value otherwise.
func (o *MsserverDhcp) GetTotalHosts() int64 {
	if o == nil || IsNil(o.TotalHosts) {
		var ret int64
		return ret
	}
	return *o.TotalHosts
}

// GetTotalHostsOk returns a tuple with the TotalHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetTotalHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHosts) {
		return nil, false
	}
	return o.TotalHosts, true
}

// HasTotalHosts returns a boolean if a field has been set.
func (o *MsserverDhcp) HasTotalHosts() bool {
	if o != nil && !IsNil(o.TotalHosts) {
		return true
	}

	return false
}

// SetTotalHosts gets a reference to the given int64 and assigns it to the TotalHosts field.
func (o *MsserverDhcp) SetTotalHosts(v int64) {
	o.TotalHosts = &v
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverDhcp) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverDhcp) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverDhcp) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetUseSynchronizationInterval returns the UseSynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverDhcp) GetUseSynchronizationInterval() bool {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationInterval
}

// GetUseSynchronizationIntervalOk returns a tuple with the UseSynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcp) GetUseSynchronizationIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		return nil, false
	}
	return o.UseSynchronizationInterval, true
}

// HasUseSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverDhcp) HasUseSynchronizationInterval() bool {
	if o != nil && !IsNil(o.UseSynchronizationInterval) {
		return true
	}

	return false
}

// SetUseSynchronizationInterval gets a reference to the given bool and assigns it to the UseSynchronizationInterval field.
func (o *MsserverDhcp) SetUseSynchronizationInterval(v bool) {
	o.UseSynchronizationInterval = &v
}

func (o MsserverDhcp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverDhcp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DhcpUtilizationStatus) {
		toSerialize["dhcp_utilization_status"] = o.DhcpUtilizationStatus
	}
	if !IsNil(o.DynamicHosts) {
		toSerialize["dynamic_hosts"] = o.DynamicHosts
	}
	if !IsNil(o.LastSyncTs) {
		toSerialize["last_sync_ts"] = o.LastSyncTs
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NextSyncControl) {
		toSerialize["next_sync_control"] = o.NextSyncControl
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.StaticHosts) {
		toSerialize["static_hosts"] = o.StaticHosts
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDetail) {
		toSerialize["status_detail"] = o.StatusDetail
	}
	if !IsNil(o.StatusLastUpdated) {
		toSerialize["status_last_updated"] = o.StatusLastUpdated
	}
	if !IsNil(o.SupportsFailover) {
		toSerialize["supports_failover"] = o.SupportsFailover
	}
	if !IsNil(o.SynchronizationInterval) {
		toSerialize["synchronization_interval"] = o.SynchronizationInterval
	}
	if !IsNil(o.TotalHosts) {
		toSerialize["total_hosts"] = o.TotalHosts
	}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.UseSynchronizationInterval) {
		toSerialize["use_synchronization_interval"] = o.UseSynchronizationInterval
	}
	return toSerialize, nil
}

type NullableMsserverDhcp struct {
	value *MsserverDhcp
	isSet bool
}

func (v NullableMsserverDhcp) Get() *MsserverDhcp {
	return v.value
}

func (v *NullableMsserverDhcp) Set(val *MsserverDhcp) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverDhcp) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverDhcp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverDhcp(val *MsserverDhcp) *NullableMsserverDhcp {
	return &NullableMsserverDhcp{value: val, isSet: true}
}

func (v NullableMsserverDhcp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverDhcp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
