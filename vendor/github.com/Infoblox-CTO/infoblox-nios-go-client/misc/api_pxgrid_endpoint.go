/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type PxgridEndpointAPI interface {
	/*
		Create Create a pxgrid:endpoint object

		Creates a new pxgrid:endpoint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return PxgridEndpointAPICreateRequest
	*/
	Create(ctx context.Context) PxgridEndpointAPICreateRequest

	// CreateExecute executes the request
	//  @return CreatePxgridEndpointResponse
	CreateExecute(r PxgridEndpointAPICreateRequest) (*CreatePxgridEndpointResponse, *http.Response, error)
	/*
		Delete Delete a pxgrid:endpoint object

		Deletes a specific pxgrid:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the pxgrid:endpoint object
		@return PxgridEndpointAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) PxgridEndpointAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r PxgridEndpointAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve pxgrid:endpoint objects

		Returns a list of pxgrid:endpoint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return PxgridEndpointAPIListRequest
	*/
	List(ctx context.Context) PxgridEndpointAPIListRequest

	// ListExecute executes the request
	//  @return ListPxgridEndpointResponse
	ListExecute(r PxgridEndpointAPIListRequest) (*ListPxgridEndpointResponse, *http.Response, error)
	/*
		Read Get a specific pxgrid:endpoint object

		Returns a specific pxgrid:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the pxgrid:endpoint object
		@return PxgridEndpointAPIReadRequest
	*/
	Read(ctx context.Context, reference string) PxgridEndpointAPIReadRequest

	// ReadExecute executes the request
	//  @return GetPxgridEndpointResponse
	ReadExecute(r PxgridEndpointAPIReadRequest) (*GetPxgridEndpointResponse, *http.Response, error)
	/*
		Update Update a pxgrid:endpoint object

		Updates a specific pxgrid:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the pxgrid:endpoint object
		@return PxgridEndpointAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) PxgridEndpointAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdatePxgridEndpointResponse
	UpdateExecute(r PxgridEndpointAPIUpdateRequest) (*UpdatePxgridEndpointResponse, *http.Response, error)
}

// PxgridEndpointAPIService PxgridEndpointAPI service
type PxgridEndpointAPIService internal.Service

type PxgridEndpointAPICreateRequest struct {
	ctx              context.Context
	ApiService       PxgridEndpointAPI
	pxgridEndpoint   *PxgridEndpoint
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r PxgridEndpointAPICreateRequest) PxgridEndpoint(pxgridEndpoint PxgridEndpoint) PxgridEndpointAPICreateRequest {
	r.pxgridEndpoint = &pxgridEndpoint
	return r
}

// Enter the field names followed by comma
func (r PxgridEndpointAPICreateRequest) ReturnFields(returnFields string) PxgridEndpointAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r PxgridEndpointAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) PxgridEndpointAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r PxgridEndpointAPICreateRequest) ReturnAsObject(returnAsObject int32) PxgridEndpointAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r PxgridEndpointAPICreateRequest) Execute() (*CreatePxgridEndpointResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a pxgrid:endpoint object

Creates a new pxgrid:endpoint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PxgridEndpointAPICreateRequest
*/
func (a *PxgridEndpointAPIService) Create(ctx context.Context) PxgridEndpointAPICreateRequest {
	return PxgridEndpointAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreatePxgridEndpointResponse
func (a *PxgridEndpointAPIService) CreateExecute(r PxgridEndpointAPICreateRequest) (*CreatePxgridEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreatePxgridEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "PxgridEndpointAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/pxgrid:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pxgridEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("pxgridEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.pxgridEndpoint != nil {
		if r.pxgridEndpoint.Extattrs == nil {
			r.pxgridEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.pxgridEndpoint.Extattrs)[k]; !ok {
				(*r.pxgridEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.pxgridEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type PxgridEndpointAPIDeleteRequest struct {
	ctx        context.Context
	ApiService PxgridEndpointAPI
	reference  string
}

func (r PxgridEndpointAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a pxgrid:endpoint object

Deletes a specific pxgrid:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the pxgrid:endpoint object
	@return PxgridEndpointAPIDeleteRequest
*/
func (a *PxgridEndpointAPIService) Delete(ctx context.Context, reference string) PxgridEndpointAPIDeleteRequest {
	return PxgridEndpointAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *PxgridEndpointAPIService) DeleteExecute(r PxgridEndpointAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "PxgridEndpointAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/pxgrid:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PxgridEndpointAPIListRequest struct {
	ctx              context.Context
	ApiService       PxgridEndpointAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r PxgridEndpointAPIListRequest) ReturnFields(returnFields string) PxgridEndpointAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r PxgridEndpointAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) PxgridEndpointAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r PxgridEndpointAPIListRequest) MaxResults(maxResults int32) PxgridEndpointAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r PxgridEndpointAPIListRequest) ReturnAsObject(returnAsObject int32) PxgridEndpointAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r PxgridEndpointAPIListRequest) Paging(paging int32) PxgridEndpointAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r PxgridEndpointAPIListRequest) PageId(pageId string) PxgridEndpointAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r PxgridEndpointAPIListRequest) Filters(filters map[string]interface{}) PxgridEndpointAPIListRequest {
	r.filters = &filters
	return r
}

func (r PxgridEndpointAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) PxgridEndpointAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r PxgridEndpointAPIListRequest) Execute() (*ListPxgridEndpointResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve pxgrid:endpoint objects

Returns a list of pxgrid:endpoint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PxgridEndpointAPIListRequest
*/
func (a *PxgridEndpointAPIService) List(ctx context.Context) PxgridEndpointAPIListRequest {
	return PxgridEndpointAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListPxgridEndpointResponse
func (a *PxgridEndpointAPIService) ListExecute(r PxgridEndpointAPIListRequest) (*ListPxgridEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListPxgridEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "PxgridEndpointAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/pxgrid:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type PxgridEndpointAPIReadRequest struct {
	ctx              context.Context
	ApiService       PxgridEndpointAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r PxgridEndpointAPIReadRequest) ReturnFields(returnFields string) PxgridEndpointAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r PxgridEndpointAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) PxgridEndpointAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r PxgridEndpointAPIReadRequest) ReturnAsObject(returnAsObject int32) PxgridEndpointAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r PxgridEndpointAPIReadRequest) Execute() (*GetPxgridEndpointResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific pxgrid:endpoint object

Returns a specific pxgrid:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the pxgrid:endpoint object
	@return PxgridEndpointAPIReadRequest
*/
func (a *PxgridEndpointAPIService) Read(ctx context.Context, reference string) PxgridEndpointAPIReadRequest {
	return PxgridEndpointAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetPxgridEndpointResponse
func (a *PxgridEndpointAPIService) ReadExecute(r PxgridEndpointAPIReadRequest) (*GetPxgridEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetPxgridEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "PxgridEndpointAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/pxgrid:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type PxgridEndpointAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       PxgridEndpointAPI
	reference        string
	pxgridEndpoint   *PxgridEndpoint
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r PxgridEndpointAPIUpdateRequest) PxgridEndpoint(pxgridEndpoint PxgridEndpoint) PxgridEndpointAPIUpdateRequest {
	r.pxgridEndpoint = &pxgridEndpoint
	return r
}

// Enter the field names followed by comma
func (r PxgridEndpointAPIUpdateRequest) ReturnFields(returnFields string) PxgridEndpointAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r PxgridEndpointAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) PxgridEndpointAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r PxgridEndpointAPIUpdateRequest) ReturnAsObject(returnAsObject int32) PxgridEndpointAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r PxgridEndpointAPIUpdateRequest) Execute() (*UpdatePxgridEndpointResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a pxgrid:endpoint object

Updates a specific pxgrid:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the pxgrid:endpoint object
	@return PxgridEndpointAPIUpdateRequest
*/
func (a *PxgridEndpointAPIService) Update(ctx context.Context, reference string) PxgridEndpointAPIUpdateRequest {
	return PxgridEndpointAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdatePxgridEndpointResponse
func (a *PxgridEndpointAPIService) UpdateExecute(r PxgridEndpointAPIUpdateRequest) (*UpdatePxgridEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdatePxgridEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "PxgridEndpointAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/pxgrid:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pxgridEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("pxgridEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.pxgridEndpoint != nil {
		if r.pxgridEndpoint.Extattrs == nil {
			r.pxgridEndpoint.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.pxgridEndpoint.Extattrs)[k]; !ok {
				(*r.pxgridEndpoint.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.pxgridEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
