/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the CapacityreportObjectCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapacityreportObjectCounts{}

// CapacityreportObjectCounts struct for CapacityreportObjectCounts
type CapacityreportObjectCounts struct {
	// Object type name.
	TypeName *string `json:"type_name,omitempty"`
	// Number of object type instances created.
	Count                *int64 `json:"count,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapacityreportObjectCounts CapacityreportObjectCounts

// NewCapacityreportObjectCounts instantiates a new CapacityreportObjectCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacityreportObjectCounts() *CapacityreportObjectCounts {
	this := CapacityreportObjectCounts{}
	return &this
}

// NewCapacityreportObjectCountsWithDefaults instantiates a new CapacityreportObjectCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityreportObjectCountsWithDefaults() *CapacityreportObjectCounts {
	this := CapacityreportObjectCounts{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *CapacityreportObjectCounts) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityreportObjectCounts) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *CapacityreportObjectCounts) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *CapacityreportObjectCounts) SetTypeName(v string) {
	o.TypeName = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CapacityreportObjectCounts) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityreportObjectCounts) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CapacityreportObjectCounts) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *CapacityreportObjectCounts) SetCount(v int64) {
	o.Count = &v
}

func (o CapacityreportObjectCounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapacityreportObjectCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TypeName) {
		toSerialize["type_name"] = o.TypeName
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CapacityreportObjectCounts) UnmarshalJSON(data []byte) (err error) {
	varCapacityreportObjectCounts := _CapacityreportObjectCounts{}

	err = json.Unmarshal(data, &varCapacityreportObjectCounts)

	if err != nil {
		return err
	}

	*o = CapacityreportObjectCounts(varCapacityreportObjectCounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type_name")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapacityreportObjectCounts struct {
	value *CapacityreportObjectCounts
	isSet bool
}

func (v NullableCapacityreportObjectCounts) Get() *CapacityreportObjectCounts {
	return v.value
}

func (v *NullableCapacityreportObjectCounts) Set(val *CapacityreportObjectCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityreportObjectCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityreportObjectCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityreportObjectCounts(val *CapacityreportObjectCounts) *NullableCapacityreportObjectCounts {
	return &NullableCapacityreportObjectCounts{value: val, isSet: true}
}

func (v NullableCapacityreportObjectCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityreportObjectCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
