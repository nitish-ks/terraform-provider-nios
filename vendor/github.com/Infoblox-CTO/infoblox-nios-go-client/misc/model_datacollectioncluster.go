/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the Datacollectioncluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Datacollectioncluster{}

// Datacollectioncluster struct for Datacollectioncluster
type Datacollectioncluster struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Enable/disable new registration requests
	EnableRegistration *bool `json:"enable_registration,omitempty"`
	// Display name for cluster
	Name *string `json:"name,omitempty"`
}

// NewDatacollectioncluster instantiates a new Datacollectioncluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatacollectioncluster() *Datacollectioncluster {
	this := Datacollectioncluster{}
	return &this
}

// NewDatacollectionclusterWithDefaults instantiates a new Datacollectioncluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatacollectionclusterWithDefaults() *Datacollectioncluster {
	this := Datacollectioncluster{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Datacollectioncluster) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datacollectioncluster) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Datacollectioncluster) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Datacollectioncluster) SetRef(v string) {
	o.Ref = &v
}

// GetEnableRegistration returns the EnableRegistration field value if set, zero value otherwise.
func (o *Datacollectioncluster) GetEnableRegistration() bool {
	if o == nil || IsNil(o.EnableRegistration) {
		var ret bool
		return ret
	}
	return *o.EnableRegistration
}

// GetEnableRegistrationOk returns a tuple with the EnableRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datacollectioncluster) GetEnableRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRegistration) {
		return nil, false
	}
	return o.EnableRegistration, true
}

// HasEnableRegistration returns a boolean if a field has been set.
func (o *Datacollectioncluster) HasEnableRegistration() bool {
	if o != nil && !IsNil(o.EnableRegistration) {
		return true
	}

	return false
}

// SetEnableRegistration gets a reference to the given bool and assigns it to the EnableRegistration field.
func (o *Datacollectioncluster) SetEnableRegistration(v bool) {
	o.EnableRegistration = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Datacollectioncluster) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datacollectioncluster) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Datacollectioncluster) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Datacollectioncluster) SetName(v string) {
	o.Name = &v
}

func (o Datacollectioncluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Datacollectioncluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.EnableRegistration) {
		toSerialize["enable_registration"] = o.EnableRegistration
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDatacollectioncluster struct {
	value *Datacollectioncluster
	isSet bool
}

func (v NullableDatacollectioncluster) Get() *Datacollectioncluster {
	return v.value
}

func (v *NullableDatacollectioncluster) Set(val *Datacollectioncluster) {
	v.value = val
	v.isSet = true
}

func (v NullableDatacollectioncluster) IsSet() bool {
	return v.isSet
}

func (v *NullableDatacollectioncluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatacollectioncluster(val *Datacollectioncluster) *NullableDatacollectioncluster {
	return &NullableDatacollectioncluster{value: val, isSet: true}
}

func (v NullableDatacollectioncluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatacollectioncluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
