/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the DbObjects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbObjects{}

// DbObjects struct for DbObjects
type DbObjects struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The last returned sequence ID.
	LastSequenceId *string `json:"last_sequence_id,omitempty"`
	// The record object when supported by WAPI. Otherwise, the value is \"None\".
	Object *string `json:"object,omitempty"`
	// The object type. This is undefined if the object is not supported.
	ObjectType *string `json:"object_type,omitempty"`
	// The unique ID of the requested object.
	UniqueId *string `json:"unique_id,omitempty"`
}

// NewDbObjects instantiates a new DbObjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbObjects() *DbObjects {
	this := DbObjects{}
	return &this
}

// NewDbObjectsWithDefaults instantiates a new DbObjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbObjectsWithDefaults() *DbObjects {
	this := DbObjects{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DbObjects) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbObjects) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DbObjects) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DbObjects) SetRef(v string) {
	o.Ref = &v
}

// GetLastSequenceId returns the LastSequenceId field value if set, zero value otherwise.
func (o *DbObjects) GetLastSequenceId() string {
	if o == nil || IsNil(o.LastSequenceId) {
		var ret string
		return ret
	}
	return *o.LastSequenceId
}

// GetLastSequenceIdOk returns a tuple with the LastSequenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbObjects) GetLastSequenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastSequenceId) {
		return nil, false
	}
	return o.LastSequenceId, true
}

// HasLastSequenceId returns a boolean if a field has been set.
func (o *DbObjects) HasLastSequenceId() bool {
	if o != nil && !IsNil(o.LastSequenceId) {
		return true
	}

	return false
}

// SetLastSequenceId gets a reference to the given string and assigns it to the LastSequenceId field.
func (o *DbObjects) SetLastSequenceId(v string) {
	o.LastSequenceId = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *DbObjects) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbObjects) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *DbObjects) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *DbObjects) SetObject(v string) {
	o.Object = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *DbObjects) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbObjects) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *DbObjects) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *DbObjects) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *DbObjects) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbObjects) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *DbObjects) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *DbObjects) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o DbObjects) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbObjects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.LastSequenceId) {
		toSerialize["last_sequence_id"] = o.LastSequenceId
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.UniqueId) {
		toSerialize["unique_id"] = o.UniqueId
	}
	return toSerialize, nil
}

type NullableDbObjects struct {
	value *DbObjects
	isSet bool
}

func (v NullableDbObjects) Get() *DbObjects {
	return v.value
}

func (v *NullableDbObjects) Set(val *DbObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableDbObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableDbObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbObjects(val *DbObjects) *NullableDbObjects {
	return &NullableDbObjects{value: val, isSet: true}
}

func (v NullableDbObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
