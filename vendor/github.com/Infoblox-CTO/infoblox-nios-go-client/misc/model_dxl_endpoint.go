/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the DxlEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DxlEndpoint{}

// DxlEndpoint struct for DxlEndpoint
type DxlEndpoint struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The list of DXL endpoint brokers. Note that you cannot specify brokers and brokers_import_token at the same time.
	Brokers []DxlEndpointBrokers `json:"brokers,omitempty"`
	// The token returned by the uploadinit function call in object fileop for a DXL broker configuration file. Note that you cannot specify brokers and brokers_import_token at the same time.
	BrokersImportToken *string `json:"brokers_import_token,omitempty"`
	// The client certificate subject of a DXL endpoint.
	ClientCertificateSubject *string `json:"client_certificate_subject,omitempty"`
	// The token returned by the uploadinit function call in object fileop for a DXL endpoint client certificate.
	ClientCertificateToken *string `json:"client_certificate_token,omitempty"`
	// The timestamp when client certificate for a DXL endpoint was created.
	ClientCertificateValidFrom *int64 `json:"client_certificate_valid_from,omitempty"`
	// The timestamp when the client certificate for a DXL endpoint expires.
	ClientCertificateValidTo *int64 `json:"client_certificate_valid_to,omitempty"`
	// The comment of a DXL endpoint.
	Comment *string `json:"comment,omitempty"`
	// Determines whether a DXL endpoint is disabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The log level for a DXL endpoint.
	LogLevel *string `json:"log_level,omitempty"`
	// The name of a DXL endpoint.
	Name *string `json:"name,omitempty"`
	// The outbound member that will generate events.
	OutboundMemberType *string `json:"outbound_member_type,omitempty"`
	// The list of members for outbound events.
	OutboundMembers  []string                     `json:"outbound_members,omitempty"`
	TemplateInstance *DxlEndpointTemplateInstance `json:"template_instance,omitempty"`
	// The timeout of session management (in seconds).
	Timeout *int64 `json:"timeout,omitempty"`
	// DXL topics
	Topics []string `json:"topics,omitempty"`
	// The vendor identifier.
	VendorIdentifier *string `json:"vendor_identifier,omitempty"`
	// The user name for WAPI integration.
	WapiUserName *string `json:"wapi_user_name,omitempty"`
	// The user password for WAPI integration.
	WapiUserPassword *string `json:"wapi_user_password,omitempty"`
}

// NewDxlEndpoint instantiates a new DxlEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDxlEndpoint() *DxlEndpoint {
	this := DxlEndpoint{}
	return &this
}

// NewDxlEndpointWithDefaults instantiates a new DxlEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDxlEndpointWithDefaults() *DxlEndpoint {
	this := DxlEndpoint{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DxlEndpoint) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DxlEndpoint) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DxlEndpoint) SetRef(v string) {
	o.Ref = &v
}

// GetBrokers returns the Brokers field value if set, zero value otherwise.
func (o *DxlEndpoint) GetBrokers() []DxlEndpointBrokers {
	if o == nil || IsNil(o.Brokers) {
		var ret []DxlEndpointBrokers
		return ret
	}
	return o.Brokers
}

// GetBrokersOk returns a tuple with the Brokers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetBrokersOk() ([]DxlEndpointBrokers, bool) {
	if o == nil || IsNil(o.Brokers) {
		return nil, false
	}
	return o.Brokers, true
}

// HasBrokers returns a boolean if a field has been set.
func (o *DxlEndpoint) HasBrokers() bool {
	if o != nil && !IsNil(o.Brokers) {
		return true
	}

	return false
}

// SetBrokers gets a reference to the given []DxlEndpointBrokers and assigns it to the Brokers field.
func (o *DxlEndpoint) SetBrokers(v []DxlEndpointBrokers) {
	o.Brokers = v
}

// GetBrokersImportToken returns the BrokersImportToken field value if set, zero value otherwise.
func (o *DxlEndpoint) GetBrokersImportToken() string {
	if o == nil || IsNil(o.BrokersImportToken) {
		var ret string
		return ret
	}
	return *o.BrokersImportToken
}

// GetBrokersImportTokenOk returns a tuple with the BrokersImportToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetBrokersImportTokenOk() (*string, bool) {
	if o == nil || IsNil(o.BrokersImportToken) {
		return nil, false
	}
	return o.BrokersImportToken, true
}

// HasBrokersImportToken returns a boolean if a field has been set.
func (o *DxlEndpoint) HasBrokersImportToken() bool {
	if o != nil && !IsNil(o.BrokersImportToken) {
		return true
	}

	return false
}

// SetBrokersImportToken gets a reference to the given string and assigns it to the BrokersImportToken field.
func (o *DxlEndpoint) SetBrokersImportToken(v string) {
	o.BrokersImportToken = &v
}

// GetClientCertificateSubject returns the ClientCertificateSubject field value if set, zero value otherwise.
func (o *DxlEndpoint) GetClientCertificateSubject() string {
	if o == nil || IsNil(o.ClientCertificateSubject) {
		var ret string
		return ret
	}
	return *o.ClientCertificateSubject
}

// GetClientCertificateSubjectOk returns a tuple with the ClientCertificateSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetClientCertificateSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateSubject) {
		return nil, false
	}
	return o.ClientCertificateSubject, true
}

// HasClientCertificateSubject returns a boolean if a field has been set.
func (o *DxlEndpoint) HasClientCertificateSubject() bool {
	if o != nil && !IsNil(o.ClientCertificateSubject) {
		return true
	}

	return false
}

// SetClientCertificateSubject gets a reference to the given string and assigns it to the ClientCertificateSubject field.
func (o *DxlEndpoint) SetClientCertificateSubject(v string) {
	o.ClientCertificateSubject = &v
}

// GetClientCertificateToken returns the ClientCertificateToken field value if set, zero value otherwise.
func (o *DxlEndpoint) GetClientCertificateToken() string {
	if o == nil || IsNil(o.ClientCertificateToken) {
		var ret string
		return ret
	}
	return *o.ClientCertificateToken
}

// GetClientCertificateTokenOk returns a tuple with the ClientCertificateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetClientCertificateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateToken) {
		return nil, false
	}
	return o.ClientCertificateToken, true
}

// HasClientCertificateToken returns a boolean if a field has been set.
func (o *DxlEndpoint) HasClientCertificateToken() bool {
	if o != nil && !IsNil(o.ClientCertificateToken) {
		return true
	}

	return false
}

// SetClientCertificateToken gets a reference to the given string and assigns it to the ClientCertificateToken field.
func (o *DxlEndpoint) SetClientCertificateToken(v string) {
	o.ClientCertificateToken = &v
}

// GetClientCertificateValidFrom returns the ClientCertificateValidFrom field value if set, zero value otherwise.
func (o *DxlEndpoint) GetClientCertificateValidFrom() int64 {
	if o == nil || IsNil(o.ClientCertificateValidFrom) {
		var ret int64
		return ret
	}
	return *o.ClientCertificateValidFrom
}

// GetClientCertificateValidFromOk returns a tuple with the ClientCertificateValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetClientCertificateValidFromOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientCertificateValidFrom) {
		return nil, false
	}
	return o.ClientCertificateValidFrom, true
}

// HasClientCertificateValidFrom returns a boolean if a field has been set.
func (o *DxlEndpoint) HasClientCertificateValidFrom() bool {
	if o != nil && !IsNil(o.ClientCertificateValidFrom) {
		return true
	}

	return false
}

// SetClientCertificateValidFrom gets a reference to the given int64 and assigns it to the ClientCertificateValidFrom field.
func (o *DxlEndpoint) SetClientCertificateValidFrom(v int64) {
	o.ClientCertificateValidFrom = &v
}

// GetClientCertificateValidTo returns the ClientCertificateValidTo field value if set, zero value otherwise.
func (o *DxlEndpoint) GetClientCertificateValidTo() int64 {
	if o == nil || IsNil(o.ClientCertificateValidTo) {
		var ret int64
		return ret
	}
	return *o.ClientCertificateValidTo
}

// GetClientCertificateValidToOk returns a tuple with the ClientCertificateValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetClientCertificateValidToOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientCertificateValidTo) {
		return nil, false
	}
	return o.ClientCertificateValidTo, true
}

// HasClientCertificateValidTo returns a boolean if a field has been set.
func (o *DxlEndpoint) HasClientCertificateValidTo() bool {
	if o != nil && !IsNil(o.ClientCertificateValidTo) {
		return true
	}

	return false
}

// SetClientCertificateValidTo gets a reference to the given int64 and assigns it to the ClientCertificateValidTo field.
func (o *DxlEndpoint) SetClientCertificateValidTo(v int64) {
	o.ClientCertificateValidTo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DxlEndpoint) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DxlEndpoint) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DxlEndpoint) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DxlEndpoint) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DxlEndpoint) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DxlEndpoint) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *DxlEndpoint) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *DxlEndpoint) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *DxlEndpoint) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *DxlEndpoint) GetLogLevel() string {
	if o == nil || IsNil(o.LogLevel) {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetLogLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *DxlEndpoint) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *DxlEndpoint) SetLogLevel(v string) {
	o.LogLevel = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DxlEndpoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DxlEndpoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DxlEndpoint) SetName(v string) {
	o.Name = &v
}

// GetOutboundMemberType returns the OutboundMemberType field value if set, zero value otherwise.
func (o *DxlEndpoint) GetOutboundMemberType() string {
	if o == nil || IsNil(o.OutboundMemberType) {
		var ret string
		return ret
	}
	return *o.OutboundMemberType
}

// GetOutboundMemberTypeOk returns a tuple with the OutboundMemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetOutboundMemberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OutboundMemberType) {
		return nil, false
	}
	return o.OutboundMemberType, true
}

// HasOutboundMemberType returns a boolean if a field has been set.
func (o *DxlEndpoint) HasOutboundMemberType() bool {
	if o != nil && !IsNil(o.OutboundMemberType) {
		return true
	}

	return false
}

// SetOutboundMemberType gets a reference to the given string and assigns it to the OutboundMemberType field.
func (o *DxlEndpoint) SetOutboundMemberType(v string) {
	o.OutboundMemberType = &v
}

// GetOutboundMembers returns the OutboundMembers field value if set, zero value otherwise.
func (o *DxlEndpoint) GetOutboundMembers() []string {
	if o == nil || IsNil(o.OutboundMembers) {
		var ret []string
		return ret
	}
	return o.OutboundMembers
}

// GetOutboundMembersOk returns a tuple with the OutboundMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetOutboundMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.OutboundMembers) {
		return nil, false
	}
	return o.OutboundMembers, true
}

// HasOutboundMembers returns a boolean if a field has been set.
func (o *DxlEndpoint) HasOutboundMembers() bool {
	if o != nil && !IsNil(o.OutboundMembers) {
		return true
	}

	return false
}

// SetOutboundMembers gets a reference to the given []string and assigns it to the OutboundMembers field.
func (o *DxlEndpoint) SetOutboundMembers(v []string) {
	o.OutboundMembers = v
}

// GetTemplateInstance returns the TemplateInstance field value if set, zero value otherwise.
func (o *DxlEndpoint) GetTemplateInstance() DxlEndpointTemplateInstance {
	if o == nil || IsNil(o.TemplateInstance) {
		var ret DxlEndpointTemplateInstance
		return ret
	}
	return *o.TemplateInstance
}

// GetTemplateInstanceOk returns a tuple with the TemplateInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetTemplateInstanceOk() (*DxlEndpointTemplateInstance, bool) {
	if o == nil || IsNil(o.TemplateInstance) {
		return nil, false
	}
	return o.TemplateInstance, true
}

// HasTemplateInstance returns a boolean if a field has been set.
func (o *DxlEndpoint) HasTemplateInstance() bool {
	if o != nil && !IsNil(o.TemplateInstance) {
		return true
	}

	return false
}

// SetTemplateInstance gets a reference to the given DxlEndpointTemplateInstance and assigns it to the TemplateInstance field.
func (o *DxlEndpoint) SetTemplateInstance(v DxlEndpointTemplateInstance) {
	o.TemplateInstance = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DxlEndpoint) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DxlEndpoint) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *DxlEndpoint) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *DxlEndpoint) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *DxlEndpoint) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *DxlEndpoint) SetTopics(v []string) {
	o.Topics = v
}

// GetVendorIdentifier returns the VendorIdentifier field value if set, zero value otherwise.
func (o *DxlEndpoint) GetVendorIdentifier() string {
	if o == nil || IsNil(o.VendorIdentifier) {
		var ret string
		return ret
	}
	return *o.VendorIdentifier
}

// GetVendorIdentifierOk returns a tuple with the VendorIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetVendorIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VendorIdentifier) {
		return nil, false
	}
	return o.VendorIdentifier, true
}

// HasVendorIdentifier returns a boolean if a field has been set.
func (o *DxlEndpoint) HasVendorIdentifier() bool {
	if o != nil && !IsNil(o.VendorIdentifier) {
		return true
	}

	return false
}

// SetVendorIdentifier gets a reference to the given string and assigns it to the VendorIdentifier field.
func (o *DxlEndpoint) SetVendorIdentifier(v string) {
	o.VendorIdentifier = &v
}

// GetWapiUserName returns the WapiUserName field value if set, zero value otherwise.
func (o *DxlEndpoint) GetWapiUserName() string {
	if o == nil || IsNil(o.WapiUserName) {
		var ret string
		return ret
	}
	return *o.WapiUserName
}

// GetWapiUserNameOk returns a tuple with the WapiUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetWapiUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.WapiUserName) {
		return nil, false
	}
	return o.WapiUserName, true
}

// HasWapiUserName returns a boolean if a field has been set.
func (o *DxlEndpoint) HasWapiUserName() bool {
	if o != nil && !IsNil(o.WapiUserName) {
		return true
	}

	return false
}

// SetWapiUserName gets a reference to the given string and assigns it to the WapiUserName field.
func (o *DxlEndpoint) SetWapiUserName(v string) {
	o.WapiUserName = &v
}

// GetWapiUserPassword returns the WapiUserPassword field value if set, zero value otherwise.
func (o *DxlEndpoint) GetWapiUserPassword() string {
	if o == nil || IsNil(o.WapiUserPassword) {
		var ret string
		return ret
	}
	return *o.WapiUserPassword
}

// GetWapiUserPasswordOk returns a tuple with the WapiUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpoint) GetWapiUserPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.WapiUserPassword) {
		return nil, false
	}
	return o.WapiUserPassword, true
}

// HasWapiUserPassword returns a boolean if a field has been set.
func (o *DxlEndpoint) HasWapiUserPassword() bool {
	if o != nil && !IsNil(o.WapiUserPassword) {
		return true
	}

	return false
}

// SetWapiUserPassword gets a reference to the given string and assigns it to the WapiUserPassword field.
func (o *DxlEndpoint) SetWapiUserPassword(v string) {
	o.WapiUserPassword = &v
}

func (o DxlEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DxlEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Brokers) {
		toSerialize["brokers"] = o.Brokers
	}
	if !IsNil(o.BrokersImportToken) {
		toSerialize["brokers_import_token"] = o.BrokersImportToken
	}
	if !IsNil(o.ClientCertificateSubject) {
		toSerialize["client_certificate_subject"] = o.ClientCertificateSubject
	}
	if !IsNil(o.ClientCertificateToken) {
		toSerialize["client_certificate_token"] = o.ClientCertificateToken
	}
	if !IsNil(o.ClientCertificateValidFrom) {
		toSerialize["client_certificate_valid_from"] = o.ClientCertificateValidFrom
	}
	if !IsNil(o.ClientCertificateValidTo) {
		toSerialize["client_certificate_valid_to"] = o.ClientCertificateValidTo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.LogLevel) {
		toSerialize["log_level"] = o.LogLevel
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OutboundMemberType) {
		toSerialize["outbound_member_type"] = o.OutboundMemberType
	}
	if !IsNil(o.OutboundMembers) {
		toSerialize["outbound_members"] = o.OutboundMembers
	}
	if !IsNil(o.TemplateInstance) {
		toSerialize["template_instance"] = o.TemplateInstance
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.VendorIdentifier) {
		toSerialize["vendor_identifier"] = o.VendorIdentifier
	}
	if !IsNil(o.WapiUserName) {
		toSerialize["wapi_user_name"] = o.WapiUserName
	}
	if !IsNil(o.WapiUserPassword) {
		toSerialize["wapi_user_password"] = o.WapiUserPassword
	}
	return toSerialize, nil
}

type NullableDxlEndpoint struct {
	value *DxlEndpoint
	isSet bool
}

func (v NullableDxlEndpoint) Get() *DxlEndpoint {
	return v.value
}

func (v *NullableDxlEndpoint) Set(val *DxlEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDxlEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDxlEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDxlEndpoint(val *DxlEndpoint) *NullableDxlEndpoint {
	return &NullableDxlEndpoint{value: val, isSet: true}
}

func (v NullableDxlEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDxlEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
