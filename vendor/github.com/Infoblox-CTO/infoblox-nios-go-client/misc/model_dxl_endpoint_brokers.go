/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the DxlEndpointBrokers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DxlEndpointBrokers{}

// DxlEndpointBrokers struct for DxlEndpointBrokers
type DxlEndpointBrokers struct {
	// The FQDN for the DXL endpoint broker.
	HostName *string `json:"host_name,omitempty"`
	// The IPv4 Address or IPv6 Address for the DXL endpoint broker.
	Address *string `json:"address,omitempty"`
	// The communication port for the DXL endpoint broker.
	Port *int64 `json:"port,omitempty"`
	// The unique identifier for the DXL endpoint.
	UniqueId             *string `json:"unique_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DxlEndpointBrokers DxlEndpointBrokers

// NewDxlEndpointBrokers instantiates a new DxlEndpointBrokers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDxlEndpointBrokers() *DxlEndpointBrokers {
	this := DxlEndpointBrokers{}
	return &this
}

// NewDxlEndpointBrokersWithDefaults instantiates a new DxlEndpointBrokers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDxlEndpointBrokersWithDefaults() *DxlEndpointBrokers {
	this := DxlEndpointBrokers{}
	return &this
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *DxlEndpointBrokers) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpointBrokers) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *DxlEndpointBrokers) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *DxlEndpointBrokers) SetHostName(v string) {
	o.HostName = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DxlEndpointBrokers) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpointBrokers) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DxlEndpointBrokers) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DxlEndpointBrokers) SetAddress(v string) {
	o.Address = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DxlEndpointBrokers) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpointBrokers) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DxlEndpointBrokers) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DxlEndpointBrokers) SetPort(v int64) {
	o.Port = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *DxlEndpointBrokers) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DxlEndpointBrokers) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *DxlEndpointBrokers) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *DxlEndpointBrokers) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o DxlEndpointBrokers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DxlEndpointBrokers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostName) {
		toSerialize["host_name"] = o.HostName
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.UniqueId) {
		toSerialize["unique_id"] = o.UniqueId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DxlEndpointBrokers) UnmarshalJSON(data []byte) (err error) {
	varDxlEndpointBrokers := _DxlEndpointBrokers{}

	err = json.Unmarshal(data, &varDxlEndpointBrokers)

	if err != nil {
		return err
	}

	*o = DxlEndpointBrokers(varDxlEndpointBrokers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host_name")
		delete(additionalProperties, "address")
		delete(additionalProperties, "port")
		delete(additionalProperties, "unique_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDxlEndpointBrokers struct {
	value *DxlEndpointBrokers
	isSet bool
}

func (v NullableDxlEndpointBrokers) Get() *DxlEndpointBrokers {
	return v.value
}

func (v *NullableDxlEndpointBrokers) Set(val *DxlEndpointBrokers) {
	v.value = val
	v.isSet = true
}

func (v NullableDxlEndpointBrokers) IsSet() bool {
	return v.isSet
}

func (v *NullableDxlEndpointBrokers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDxlEndpointBrokers(val *DxlEndpointBrokers) *NullableDxlEndpointBrokers {
	return &NullableDxlEndpointBrokers{value: val, isSet: true}
}

func (v NullableDxlEndpointBrokers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDxlEndpointBrokers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
