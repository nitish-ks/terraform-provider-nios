/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetCsvimporttaskResponse - struct for GetCsvimporttaskResponse
type GetCsvimporttaskResponse struct {
	Csvimporttask                          *Csvimporttask
	GetCsvimporttaskResponseObjectAsResult *GetCsvimporttaskResponseObjectAsResult
}

// CsvimporttaskAsGetCsvimporttaskResponse is a convenience function that returns Csvimporttask wrapped in GetCsvimporttaskResponse
func CsvimporttaskAsGetCsvimporttaskResponse(v *Csvimporttask) GetCsvimporttaskResponse {
	return GetCsvimporttaskResponse{
		Csvimporttask: v,
	}
}

// GetCsvimporttaskResponseObjectAsResultAsGetCsvimporttaskResponse is a convenience function that returns GetCsvimporttaskResponseObjectAsResult wrapped in GetCsvimporttaskResponse
func GetCsvimporttaskResponseObjectAsResultAsGetCsvimporttaskResponse(v *GetCsvimporttaskResponseObjectAsResult) GetCsvimporttaskResponse {
	return GetCsvimporttaskResponse{
		GetCsvimporttaskResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCsvimporttaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Csvimporttask
	err = newStrictDecoder(data).Decode(&dst.Csvimporttask)
	if err == nil {
		jsonCsvimporttask, _ := json.Marshal(dst.Csvimporttask)
		if string(jsonCsvimporttask) == "{}" { // empty struct
			dst.Csvimporttask = nil
		} else {
			match++
		}
	} else {
		dst.Csvimporttask = nil
	}

	// try to unmarshal data into GetCsvimporttaskResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetCsvimporttaskResponseObjectAsResult)
	if err == nil {
		jsonGetCsvimporttaskResponseObjectAsResult, _ := json.Marshal(dst.GetCsvimporttaskResponseObjectAsResult)
		if string(jsonGetCsvimporttaskResponseObjectAsResult) == "{}" { // empty struct
			dst.GetCsvimporttaskResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetCsvimporttaskResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Csvimporttask = nil
		dst.GetCsvimporttaskResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetCsvimporttaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetCsvimporttaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCsvimporttaskResponse) MarshalJSON() ([]byte, error) {
	if src.Csvimporttask != nil {
		return json.Marshal(&src.Csvimporttask)
	}

	if src.GetCsvimporttaskResponseObjectAsResult != nil {
		return json.Marshal(&src.GetCsvimporttaskResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCsvimporttaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Csvimporttask != nil {
		return obj.Csvimporttask
	}

	if obj.GetCsvimporttaskResponseObjectAsResult != nil {
		return obj.GetCsvimporttaskResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetCsvimporttaskResponse struct {
	value *GetCsvimporttaskResponse
	isSet bool
}

func (v NullableGetCsvimporttaskResponse) Get() *GetCsvimporttaskResponse {
	return v.value
}

func (v *NullableGetCsvimporttaskResponse) Set(val *GetCsvimporttaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCsvimporttaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCsvimporttaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCsvimporttaskResponse(val *GetCsvimporttaskResponse) *NullableGetCsvimporttaskResponse {
	return &NullableGetCsvimporttaskResponse{value: val, isSet: true}
}

func (v NullableGetCsvimporttaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCsvimporttaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
