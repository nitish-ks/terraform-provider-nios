/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetDbObjectsResponse - struct for GetDbObjectsResponse
type GetDbObjectsResponse struct {
	DbObjects                          *DbObjects
	GetDbObjectsResponseObjectAsResult *GetDbObjectsResponseObjectAsResult
}

// DbObjectsAsGetDbObjectsResponse is a convenience function that returns DbObjects wrapped in GetDbObjectsResponse
func DbObjectsAsGetDbObjectsResponse(v *DbObjects) GetDbObjectsResponse {
	return GetDbObjectsResponse{
		DbObjects: v,
	}
}

// GetDbObjectsResponseObjectAsResultAsGetDbObjectsResponse is a convenience function that returns GetDbObjectsResponseObjectAsResult wrapped in GetDbObjectsResponse
func GetDbObjectsResponseObjectAsResultAsGetDbObjectsResponse(v *GetDbObjectsResponseObjectAsResult) GetDbObjectsResponse {
	return GetDbObjectsResponse{
		GetDbObjectsResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDbObjectsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DbObjects
	err = newStrictDecoder(data).Decode(&dst.DbObjects)
	if err == nil {
		jsonDbObjects, _ := json.Marshal(dst.DbObjects)
		if string(jsonDbObjects) == "{}" { // empty struct
			dst.DbObjects = nil
		} else {
			match++
		}
	} else {
		dst.DbObjects = nil
	}

	// try to unmarshal data into GetDbObjectsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDbObjectsResponseObjectAsResult)
	if err == nil {
		jsonGetDbObjectsResponseObjectAsResult, _ := json.Marshal(dst.GetDbObjectsResponseObjectAsResult)
		if string(jsonGetDbObjectsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDbObjectsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDbObjectsResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DbObjects = nil
		dst.GetDbObjectsResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDbObjectsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDbObjectsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDbObjectsResponse) MarshalJSON() ([]byte, error) {
	if src.DbObjects != nil {
		return json.Marshal(&src.DbObjects)
	}

	if src.GetDbObjectsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDbObjectsResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDbObjectsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DbObjects != nil {
		return obj.DbObjects
	}

	if obj.GetDbObjectsResponseObjectAsResult != nil {
		return obj.GetDbObjectsResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDbObjectsResponse struct {
	value *GetDbObjectsResponse
	isSet bool
}

func (v NullableGetDbObjectsResponse) Get() *GetDbObjectsResponse {
	return v.value
}

func (v *NullableGetDbObjectsResponse) Set(val *GetDbObjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDbObjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDbObjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDbObjectsResponse(val *GetDbObjectsResponse) *NullableGetDbObjectsResponse {
	return &NullableGetDbObjectsResponse{value: val, isSet: true}
}

func (v NullableGetDbObjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDbObjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
