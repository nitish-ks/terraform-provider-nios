/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetFileopResponse - struct for GetFileopResponse
type GetFileopResponse struct {
	Fileop                          *Fileop
	GetFileopResponseObjectAsResult *GetFileopResponseObjectAsResult
}

// FileopAsGetFileopResponse is a convenience function that returns Fileop wrapped in GetFileopResponse
func FileopAsGetFileopResponse(v *Fileop) GetFileopResponse {
	return GetFileopResponse{
		Fileop: v,
	}
}

// GetFileopResponseObjectAsResultAsGetFileopResponse is a convenience function that returns GetFileopResponseObjectAsResult wrapped in GetFileopResponse
func GetFileopResponseObjectAsResultAsGetFileopResponse(v *GetFileopResponseObjectAsResult) GetFileopResponse {
	return GetFileopResponse{
		GetFileopResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFileopResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Fileop
	err = newStrictDecoder(data).Decode(&dst.Fileop)
	if err == nil {
		jsonFileop, _ := json.Marshal(dst.Fileop)
		if string(jsonFileop) == "{}" { // empty struct
			dst.Fileop = nil
		} else {
			match++
		}
	} else {
		dst.Fileop = nil
	}

	// try to unmarshal data into GetFileopResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFileopResponseObjectAsResult)
	if err == nil {
		jsonGetFileopResponseObjectAsResult, _ := json.Marshal(dst.GetFileopResponseObjectAsResult)
		if string(jsonGetFileopResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFileopResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFileopResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Fileop = nil
		dst.GetFileopResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFileopResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFileopResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFileopResponse) MarshalJSON() ([]byte, error) {
	if src.Fileop != nil {
		return json.Marshal(&src.Fileop)
	}

	if src.GetFileopResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFileopResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFileopResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Fileop != nil {
		return obj.Fileop
	}

	if obj.GetFileopResponseObjectAsResult != nil {
		return obj.GetFileopResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFileopResponse struct {
	value *GetFileopResponse
	isSet bool
}

func (v NullableGetFileopResponse) Get() *GetFileopResponse {
	return v.value
}

func (v *NullableGetFileopResponse) Set(val *GetFileopResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFileopResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFileopResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFileopResponse(val *GetFileopResponse) *NullableGetFileopResponse {
	return &NullableGetFileopResponse{value: val, isSet: true}
}

func (v NullableGetFileopResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFileopResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
