/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetKerberoskeyResponse - struct for GetKerberoskeyResponse
type GetKerberoskeyResponse struct {
	GetKerberoskeyResponseObjectAsResult *GetKerberoskeyResponseObjectAsResult
	Kerberoskey                          *Kerberoskey
}

// GetKerberoskeyResponseObjectAsResultAsGetKerberoskeyResponse is a convenience function that returns GetKerberoskeyResponseObjectAsResult wrapped in GetKerberoskeyResponse
func GetKerberoskeyResponseObjectAsResultAsGetKerberoskeyResponse(v *GetKerberoskeyResponseObjectAsResult) GetKerberoskeyResponse {
	return GetKerberoskeyResponse{
		GetKerberoskeyResponseObjectAsResult: v,
	}
}

// KerberoskeyAsGetKerberoskeyResponse is a convenience function that returns Kerberoskey wrapped in GetKerberoskeyResponse
func KerberoskeyAsGetKerberoskeyResponse(v *Kerberoskey) GetKerberoskeyResponse {
	return GetKerberoskeyResponse{
		Kerberoskey: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetKerberoskeyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetKerberoskeyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetKerberoskeyResponseObjectAsResult)
	if err == nil {
		jsonGetKerberoskeyResponseObjectAsResult, _ := json.Marshal(dst.GetKerberoskeyResponseObjectAsResult)
		if string(jsonGetKerberoskeyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetKerberoskeyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetKerberoskeyResponseObjectAsResult = nil
	}

	// try to unmarshal data into Kerberoskey
	err = newStrictDecoder(data).Decode(&dst.Kerberoskey)
	if err == nil {
		jsonKerberoskey, _ := json.Marshal(dst.Kerberoskey)
		if string(jsonKerberoskey) == "{}" { // empty struct
			dst.Kerberoskey = nil
		} else {
			match++
		}
	} else {
		dst.Kerberoskey = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetKerberoskeyResponseObjectAsResult = nil
		dst.Kerberoskey = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetKerberoskeyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetKerberoskeyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetKerberoskeyResponse) MarshalJSON() ([]byte, error) {
	if src.GetKerberoskeyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetKerberoskeyResponseObjectAsResult)
	}

	if src.Kerberoskey != nil {
		return json.Marshal(&src.Kerberoskey)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetKerberoskeyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetKerberoskeyResponseObjectAsResult != nil {
		return obj.GetKerberoskeyResponseObjectAsResult
	}

	if obj.Kerberoskey != nil {
		return obj.Kerberoskey
	}

	// all schemas are nil
	return nil
}

type NullableGetKerberoskeyResponse struct {
	value *GetKerberoskeyResponse
	isSet bool
}

func (v NullableGetKerberoskeyResponse) Get() *GetKerberoskeyResponse {
	return v.value
}

func (v *NullableGetKerberoskeyResponse) Set(val *GetKerberoskeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetKerberoskeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetKerberoskeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetKerberoskeyResponse(val *GetKerberoskeyResponse) *NullableGetKerberoskeyResponse {
	return &NullableGetKerberoskeyResponse{value: val, isSet: true}
}

func (v NullableGetKerberoskeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetKerberoskeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
