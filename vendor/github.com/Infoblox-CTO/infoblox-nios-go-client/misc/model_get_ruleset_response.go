/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetRulesetResponse - struct for GetRulesetResponse
type GetRulesetResponse struct {
	GetRulesetResponseObjectAsResult *GetRulesetResponseObjectAsResult
	Ruleset                          *Ruleset
}

// GetRulesetResponseObjectAsResultAsGetRulesetResponse is a convenience function that returns GetRulesetResponseObjectAsResult wrapped in GetRulesetResponse
func GetRulesetResponseObjectAsResultAsGetRulesetResponse(v *GetRulesetResponseObjectAsResult) GetRulesetResponse {
	return GetRulesetResponse{
		GetRulesetResponseObjectAsResult: v,
	}
}

// RulesetAsGetRulesetResponse is a convenience function that returns Ruleset wrapped in GetRulesetResponse
func RulesetAsGetRulesetResponse(v *Ruleset) GetRulesetResponse {
	return GetRulesetResponse{
		Ruleset: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRulesetResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRulesetResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRulesetResponseObjectAsResult)
	if err == nil {
		jsonGetRulesetResponseObjectAsResult, _ := json.Marshal(dst.GetRulesetResponseObjectAsResult)
		if string(jsonGetRulesetResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRulesetResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRulesetResponseObjectAsResult = nil
	}

	// try to unmarshal data into Ruleset
	err = newStrictDecoder(data).Decode(&dst.Ruleset)
	if err == nil {
		jsonRuleset, _ := json.Marshal(dst.Ruleset)
		if string(jsonRuleset) == "{}" { // empty struct
			dst.Ruleset = nil
		} else {
			match++
		}
	} else {
		dst.Ruleset = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRulesetResponseObjectAsResult = nil
		dst.Ruleset = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRulesetResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRulesetResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRulesetResponse) MarshalJSON() ([]byte, error) {
	if src.GetRulesetResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRulesetResponseObjectAsResult)
	}

	if src.Ruleset != nil {
		return json.Marshal(&src.Ruleset)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRulesetResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRulesetResponseObjectAsResult != nil {
		return obj.GetRulesetResponseObjectAsResult
	}

	if obj.Ruleset != nil {
		return obj.Ruleset
	}

	// all schemas are nil
	return nil
}

type NullableGetRulesetResponse struct {
	value *GetRulesetResponse
	isSet bool
}

func (v NullableGetRulesetResponse) Get() *GetRulesetResponse {
	return v.value
}

func (v *NullableGetRulesetResponse) Set(val *GetRulesetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRulesetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRulesetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRulesetResponse(val *GetRulesetResponse) *NullableGetRulesetResponse {
	return &NullableGetRulesetResponse{value: val, isSet: true}
}

func (v NullableGetRulesetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRulesetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
