/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetScavengingtaskResponse - struct for GetScavengingtaskResponse
type GetScavengingtaskResponse struct {
	GetScavengingtaskResponseObjectAsResult *GetScavengingtaskResponseObjectAsResult
	Scavengingtask                          *Scavengingtask
}

// GetScavengingtaskResponseObjectAsResultAsGetScavengingtaskResponse is a convenience function that returns GetScavengingtaskResponseObjectAsResult wrapped in GetScavengingtaskResponse
func GetScavengingtaskResponseObjectAsResultAsGetScavengingtaskResponse(v *GetScavengingtaskResponseObjectAsResult) GetScavengingtaskResponse {
	return GetScavengingtaskResponse{
		GetScavengingtaskResponseObjectAsResult: v,
	}
}

// ScavengingtaskAsGetScavengingtaskResponse is a convenience function that returns Scavengingtask wrapped in GetScavengingtaskResponse
func ScavengingtaskAsGetScavengingtaskResponse(v *Scavengingtask) GetScavengingtaskResponse {
	return GetScavengingtaskResponse{
		Scavengingtask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetScavengingtaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetScavengingtaskResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetScavengingtaskResponseObjectAsResult)
	if err == nil {
		jsonGetScavengingtaskResponseObjectAsResult, _ := json.Marshal(dst.GetScavengingtaskResponseObjectAsResult)
		if string(jsonGetScavengingtaskResponseObjectAsResult) == "{}" { // empty struct
			dst.GetScavengingtaskResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetScavengingtaskResponseObjectAsResult = nil
	}

	// try to unmarshal data into Scavengingtask
	err = newStrictDecoder(data).Decode(&dst.Scavengingtask)
	if err == nil {
		jsonScavengingtask, _ := json.Marshal(dst.Scavengingtask)
		if string(jsonScavengingtask) == "{}" { // empty struct
			dst.Scavengingtask = nil
		} else {
			match++
		}
	} else {
		dst.Scavengingtask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetScavengingtaskResponseObjectAsResult = nil
		dst.Scavengingtask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetScavengingtaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetScavengingtaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetScavengingtaskResponse) MarshalJSON() ([]byte, error) {
	if src.GetScavengingtaskResponseObjectAsResult != nil {
		return json.Marshal(&src.GetScavengingtaskResponseObjectAsResult)
	}

	if src.Scavengingtask != nil {
		return json.Marshal(&src.Scavengingtask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetScavengingtaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetScavengingtaskResponseObjectAsResult != nil {
		return obj.GetScavengingtaskResponseObjectAsResult
	}

	if obj.Scavengingtask != nil {
		return obj.Scavengingtask
	}

	// all schemas are nil
	return nil
}

type NullableGetScavengingtaskResponse struct {
	value *GetScavengingtaskResponse
	isSet bool
}

func (v NullableGetScavengingtaskResponse) Get() *GetScavengingtaskResponse {
	return v.value
}

func (v *NullableGetScavengingtaskResponse) Set(val *GetScavengingtaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetScavengingtaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetScavengingtaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetScavengingtaskResponse(val *GetScavengingtaskResponse) *NullableGetScavengingtaskResponse {
	return &NullableGetScavengingtaskResponse{value: val, isSet: true}
}

func (v NullableGetScavengingtaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetScavengingtaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
