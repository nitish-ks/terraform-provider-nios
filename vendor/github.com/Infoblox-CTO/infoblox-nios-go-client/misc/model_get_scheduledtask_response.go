/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetScheduledtaskResponse - struct for GetScheduledtaskResponse
type GetScheduledtaskResponse struct {
	GetScheduledtaskResponseObjectAsResult *GetScheduledtaskResponseObjectAsResult
	Scheduledtask                          *Scheduledtask
}

// GetScheduledtaskResponseObjectAsResultAsGetScheduledtaskResponse is a convenience function that returns GetScheduledtaskResponseObjectAsResult wrapped in GetScheduledtaskResponse
func GetScheduledtaskResponseObjectAsResultAsGetScheduledtaskResponse(v *GetScheduledtaskResponseObjectAsResult) GetScheduledtaskResponse {
	return GetScheduledtaskResponse{
		GetScheduledtaskResponseObjectAsResult: v,
	}
}

// ScheduledtaskAsGetScheduledtaskResponse is a convenience function that returns Scheduledtask wrapped in GetScheduledtaskResponse
func ScheduledtaskAsGetScheduledtaskResponse(v *Scheduledtask) GetScheduledtaskResponse {
	return GetScheduledtaskResponse{
		Scheduledtask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetScheduledtaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetScheduledtaskResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetScheduledtaskResponseObjectAsResult)
	if err == nil {
		jsonGetScheduledtaskResponseObjectAsResult, _ := json.Marshal(dst.GetScheduledtaskResponseObjectAsResult)
		if string(jsonGetScheduledtaskResponseObjectAsResult) == "{}" { // empty struct
			dst.GetScheduledtaskResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetScheduledtaskResponseObjectAsResult = nil
	}

	// try to unmarshal data into Scheduledtask
	err = newStrictDecoder(data).Decode(&dst.Scheduledtask)
	if err == nil {
		jsonScheduledtask, _ := json.Marshal(dst.Scheduledtask)
		if string(jsonScheduledtask) == "{}" { // empty struct
			dst.Scheduledtask = nil
		} else {
			match++
		}
	} else {
		dst.Scheduledtask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetScheduledtaskResponseObjectAsResult = nil
		dst.Scheduledtask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetScheduledtaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetScheduledtaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetScheduledtaskResponse) MarshalJSON() ([]byte, error) {
	if src.GetScheduledtaskResponseObjectAsResult != nil {
		return json.Marshal(&src.GetScheduledtaskResponseObjectAsResult)
	}

	if src.Scheduledtask != nil {
		return json.Marshal(&src.Scheduledtask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetScheduledtaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetScheduledtaskResponseObjectAsResult != nil {
		return obj.GetScheduledtaskResponseObjectAsResult
	}

	if obj.Scheduledtask != nil {
		return obj.Scheduledtask
	}

	// all schemas are nil
	return nil
}

type NullableGetScheduledtaskResponse struct {
	value *GetScheduledtaskResponse
	isSet bool
}

func (v NullableGetScheduledtaskResponse) Get() *GetScheduledtaskResponse {
	return v.value
}

func (v *NullableGetScheduledtaskResponse) Set(val *GetScheduledtaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetScheduledtaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetScheduledtaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetScheduledtaskResponse(val *GetScheduledtaskResponse) *NullableGetScheduledtaskResponse {
	return &NullableGetScheduledtaskResponse{value: val, isSet: true}
}

func (v NullableGetScheduledtaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetScheduledtaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
