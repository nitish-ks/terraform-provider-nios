/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetSearchResponse - struct for GetSearchResponse
type GetSearchResponse struct {
	GetSearchResponseObjectAsResult *GetSearchResponseObjectAsResult
	Search                          *Search
}

// GetSearchResponseObjectAsResultAsGetSearchResponse is a convenience function that returns GetSearchResponseObjectAsResult wrapped in GetSearchResponse
func GetSearchResponseObjectAsResultAsGetSearchResponse(v *GetSearchResponseObjectAsResult) GetSearchResponse {
	return GetSearchResponse{
		GetSearchResponseObjectAsResult: v,
	}
}

// SearchAsGetSearchResponse is a convenience function that returns Search wrapped in GetSearchResponse
func SearchAsGetSearchResponse(v *Search) GetSearchResponse {
	return GetSearchResponse{
		Search: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSearchResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSearchResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSearchResponseObjectAsResult)
	if err == nil {
		jsonGetSearchResponseObjectAsResult, _ := json.Marshal(dst.GetSearchResponseObjectAsResult)
		if string(jsonGetSearchResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSearchResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSearchResponseObjectAsResult = nil
	}

	// try to unmarshal data into Search
	err = newStrictDecoder(data).Decode(&dst.Search)
	if err == nil {
		jsonSearch, _ := json.Marshal(dst.Search)
		if string(jsonSearch) == "{}" { // empty struct
			dst.Search = nil
		} else {
			match++
		}
	} else {
		dst.Search = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSearchResponseObjectAsResult = nil
		dst.Search = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSearchResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSearchResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSearchResponse) MarshalJSON() ([]byte, error) {
	if src.GetSearchResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSearchResponseObjectAsResult)
	}

	if src.Search != nil {
		return json.Marshal(&src.Search)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSearchResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSearchResponseObjectAsResult != nil {
		return obj.GetSearchResponseObjectAsResult
	}

	if obj.Search != nil {
		return obj.Search
	}

	// all schemas are nil
	return nil
}

type NullableGetSearchResponse struct {
	value *GetSearchResponse
	isSet bool
}

func (v NullableGetSearchResponse) Get() *GetSearchResponse {
	return v.value
}

func (v *NullableGetSearchResponse) Set(val *GetSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSearchResponse(val *GetSearchResponse) *NullableGetSearchResponse {
	return &NullableGetSearchResponse{value: val, isSet: true}
}

func (v NullableGetSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
