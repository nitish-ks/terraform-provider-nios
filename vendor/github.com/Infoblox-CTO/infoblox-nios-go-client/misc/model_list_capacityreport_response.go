/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListCapacityreportResponse - struct for ListCapacityreportResponse
type ListCapacityreportResponse struct {
	ListCapacityreportResponseObject *ListCapacityreportResponseObject
	ArrayOfCapacityreport            *[]Capacityreport
}

// ListCapacityreportResponseObjectAsListCapacityreportResponse is a convenience function that returns ListCapacityreportResponseObject wrapped in ListCapacityreportResponse
func ListCapacityreportResponseObjectAsListCapacityreportResponse(v *ListCapacityreportResponseObject) ListCapacityreportResponse {
	return ListCapacityreportResponse{
		ListCapacityreportResponseObject: v,
	}
}

// []CapacityreportAsListCapacityreportResponse is a convenience function that returns []Capacityreport wrapped in ListCapacityreportResponse
func ArrayOfCapacityreportAsListCapacityreportResponse(v *[]Capacityreport) ListCapacityreportResponse {
	return ListCapacityreportResponse{
		ArrayOfCapacityreport: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCapacityreportResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListCapacityreportResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListCapacityreportResponseObject)
	if err == nil {
		jsonListCapacityreportResponseObject, _ := json.Marshal(dst.ListCapacityreportResponseObject)
		if string(jsonListCapacityreportResponseObject) == "{}" { // empty struct
			dst.ListCapacityreportResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListCapacityreportResponseObject = nil
	}

	// try to unmarshal data into ArrayOfCapacityreport
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCapacityreport)
	if err == nil {
		jsonArrayOfCapacityreport, _ := json.Marshal(dst.ArrayOfCapacityreport)
		if string(jsonArrayOfCapacityreport) == "{}" { // empty struct
			dst.ArrayOfCapacityreport = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCapacityreport = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListCapacityreportResponseObject = nil
		dst.ArrayOfCapacityreport = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCapacityreportResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCapacityreportResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCapacityreportResponse) MarshalJSON() ([]byte, error) {
	if src.ListCapacityreportResponseObject != nil {
		return json.Marshal(&src.ListCapacityreportResponseObject)
	}

	if src.ArrayOfCapacityreport != nil {
		return json.Marshal(&src.ArrayOfCapacityreport)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCapacityreportResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListCapacityreportResponseObject != nil {
		return obj.ListCapacityreportResponseObject
	}

	if obj.ArrayOfCapacityreport != nil {
		return obj.ArrayOfCapacityreport
	}

	// all schemas are nil
	return nil
}

type NullableListCapacityreportResponse struct {
	value *ListCapacityreportResponse
	isSet bool
}

func (v NullableListCapacityreportResponse) Get() *ListCapacityreportResponse {
	return v.value
}

func (v *NullableListCapacityreportResponse) Set(val *ListCapacityreportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCapacityreportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCapacityreportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCapacityreportResponse(val *ListCapacityreportResponse) *NullableListCapacityreportResponse {
	return &NullableListCapacityreportResponse{value: val, isSet: true}
}

func (v NullableListCapacityreportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCapacityreportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
