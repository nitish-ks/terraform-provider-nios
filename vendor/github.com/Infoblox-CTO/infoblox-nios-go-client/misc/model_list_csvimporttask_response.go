/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListCsvimporttaskResponse - struct for ListCsvimporttaskResponse
type ListCsvimporttaskResponse struct {
	ListCsvimporttaskResponseObject *ListCsvimporttaskResponseObject
	ArrayOfCsvimporttask            *[]Csvimporttask
}

// ListCsvimporttaskResponseObjectAsListCsvimporttaskResponse is a convenience function that returns ListCsvimporttaskResponseObject wrapped in ListCsvimporttaskResponse
func ListCsvimporttaskResponseObjectAsListCsvimporttaskResponse(v *ListCsvimporttaskResponseObject) ListCsvimporttaskResponse {
	return ListCsvimporttaskResponse{
		ListCsvimporttaskResponseObject: v,
	}
}

// []CsvimporttaskAsListCsvimporttaskResponse is a convenience function that returns []Csvimporttask wrapped in ListCsvimporttaskResponse
func ArrayOfCsvimporttaskAsListCsvimporttaskResponse(v *[]Csvimporttask) ListCsvimporttaskResponse {
	return ListCsvimporttaskResponse{
		ArrayOfCsvimporttask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCsvimporttaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListCsvimporttaskResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListCsvimporttaskResponseObject)
	if err == nil {
		jsonListCsvimporttaskResponseObject, _ := json.Marshal(dst.ListCsvimporttaskResponseObject)
		if string(jsonListCsvimporttaskResponseObject) == "{}" { // empty struct
			dst.ListCsvimporttaskResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListCsvimporttaskResponseObject = nil
	}

	// try to unmarshal data into ArrayOfCsvimporttask
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCsvimporttask)
	if err == nil {
		jsonArrayOfCsvimporttask, _ := json.Marshal(dst.ArrayOfCsvimporttask)
		if string(jsonArrayOfCsvimporttask) == "{}" { // empty struct
			dst.ArrayOfCsvimporttask = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCsvimporttask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListCsvimporttaskResponseObject = nil
		dst.ArrayOfCsvimporttask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCsvimporttaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCsvimporttaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCsvimporttaskResponse) MarshalJSON() ([]byte, error) {
	if src.ListCsvimporttaskResponseObject != nil {
		return json.Marshal(&src.ListCsvimporttaskResponseObject)
	}

	if src.ArrayOfCsvimporttask != nil {
		return json.Marshal(&src.ArrayOfCsvimporttask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCsvimporttaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListCsvimporttaskResponseObject != nil {
		return obj.ListCsvimporttaskResponseObject
	}

	if obj.ArrayOfCsvimporttask != nil {
		return obj.ArrayOfCsvimporttask
	}

	// all schemas are nil
	return nil
}

type NullableListCsvimporttaskResponse struct {
	value *ListCsvimporttaskResponse
	isSet bool
}

func (v NullableListCsvimporttaskResponse) Get() *ListCsvimporttaskResponse {
	return v.value
}

func (v *NullableListCsvimporttaskResponse) Set(val *ListCsvimporttaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCsvimporttaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCsvimporttaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCsvimporttaskResponse(val *ListCsvimporttaskResponse) *NullableListCsvimporttaskResponse {
	return &NullableListCsvimporttaskResponse{value: val, isSet: true}
}

func (v NullableListCsvimporttaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCsvimporttaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
