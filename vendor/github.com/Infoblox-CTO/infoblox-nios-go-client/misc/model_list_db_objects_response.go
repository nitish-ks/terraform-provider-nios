/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListDbObjectsResponse - struct for ListDbObjectsResponse
type ListDbObjectsResponse struct {
	ListDbObjectsResponseObject *ListDbObjectsResponseObject
	ArrayOfDbObjects            *[]DbObjects
}

// ListDbObjectsResponseObjectAsListDbObjectsResponse is a convenience function that returns ListDbObjectsResponseObject wrapped in ListDbObjectsResponse
func ListDbObjectsResponseObjectAsListDbObjectsResponse(v *ListDbObjectsResponseObject) ListDbObjectsResponse {
	return ListDbObjectsResponse{
		ListDbObjectsResponseObject: v,
	}
}

// []DbObjectsAsListDbObjectsResponse is a convenience function that returns []DbObjects wrapped in ListDbObjectsResponse
func ArrayOfDbObjectsAsListDbObjectsResponse(v *[]DbObjects) ListDbObjectsResponse {
	return ListDbObjectsResponse{
		ArrayOfDbObjects: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDbObjectsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDbObjectsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDbObjectsResponseObject)
	if err == nil {
		jsonListDbObjectsResponseObject, _ := json.Marshal(dst.ListDbObjectsResponseObject)
		if string(jsonListDbObjectsResponseObject) == "{}" { // empty struct
			dst.ListDbObjectsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDbObjectsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDbObjects
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDbObjects)
	if err == nil {
		jsonArrayOfDbObjects, _ := json.Marshal(dst.ArrayOfDbObjects)
		if string(jsonArrayOfDbObjects) == "{}" { // empty struct
			dst.ArrayOfDbObjects = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDbObjects = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDbObjectsResponseObject = nil
		dst.ArrayOfDbObjects = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDbObjectsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDbObjectsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDbObjectsResponse) MarshalJSON() ([]byte, error) {
	if src.ListDbObjectsResponseObject != nil {
		return json.Marshal(&src.ListDbObjectsResponseObject)
	}

	if src.ArrayOfDbObjects != nil {
		return json.Marshal(&src.ArrayOfDbObjects)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDbObjectsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDbObjectsResponseObject != nil {
		return obj.ListDbObjectsResponseObject
	}

	if obj.ArrayOfDbObjects != nil {
		return obj.ArrayOfDbObjects
	}

	// all schemas are nil
	return nil
}

type NullableListDbObjectsResponse struct {
	value *ListDbObjectsResponse
	isSet bool
}

func (v NullableListDbObjectsResponse) Get() *ListDbObjectsResponse {
	return v.value
}

func (v *NullableListDbObjectsResponse) Set(val *ListDbObjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDbObjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDbObjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDbObjectsResponse(val *ListDbObjectsResponse) *NullableListDbObjectsResponse {
	return &NullableListDbObjectsResponse{value: val, isSet: true}
}

func (v NullableListDbObjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDbObjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
