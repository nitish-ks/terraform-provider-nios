/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListDbsnapshotResponse - struct for ListDbsnapshotResponse
type ListDbsnapshotResponse struct {
	ListDbsnapshotResponseObject *ListDbsnapshotResponseObject
	ArrayOfDbsnapshot            *[]Dbsnapshot
}

// ListDbsnapshotResponseObjectAsListDbsnapshotResponse is a convenience function that returns ListDbsnapshotResponseObject wrapped in ListDbsnapshotResponse
func ListDbsnapshotResponseObjectAsListDbsnapshotResponse(v *ListDbsnapshotResponseObject) ListDbsnapshotResponse {
	return ListDbsnapshotResponse{
		ListDbsnapshotResponseObject: v,
	}
}

// []DbsnapshotAsListDbsnapshotResponse is a convenience function that returns []Dbsnapshot wrapped in ListDbsnapshotResponse
func ArrayOfDbsnapshotAsListDbsnapshotResponse(v *[]Dbsnapshot) ListDbsnapshotResponse {
	return ListDbsnapshotResponse{
		ArrayOfDbsnapshot: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDbsnapshotResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDbsnapshotResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDbsnapshotResponseObject)
	if err == nil {
		jsonListDbsnapshotResponseObject, _ := json.Marshal(dst.ListDbsnapshotResponseObject)
		if string(jsonListDbsnapshotResponseObject) == "{}" { // empty struct
			dst.ListDbsnapshotResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDbsnapshotResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDbsnapshot
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDbsnapshot)
	if err == nil {
		jsonArrayOfDbsnapshot, _ := json.Marshal(dst.ArrayOfDbsnapshot)
		if string(jsonArrayOfDbsnapshot) == "{}" { // empty struct
			dst.ArrayOfDbsnapshot = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDbsnapshot = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDbsnapshotResponseObject = nil
		dst.ArrayOfDbsnapshot = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDbsnapshotResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDbsnapshotResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDbsnapshotResponse) MarshalJSON() ([]byte, error) {
	if src.ListDbsnapshotResponseObject != nil {
		return json.Marshal(&src.ListDbsnapshotResponseObject)
	}

	if src.ArrayOfDbsnapshot != nil {
		return json.Marshal(&src.ArrayOfDbsnapshot)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDbsnapshotResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDbsnapshotResponseObject != nil {
		return obj.ListDbsnapshotResponseObject
	}

	if obj.ArrayOfDbsnapshot != nil {
		return obj.ArrayOfDbsnapshot
	}

	// all schemas are nil
	return nil
}

type NullableListDbsnapshotResponse struct {
	value *ListDbsnapshotResponse
	isSet bool
}

func (v NullableListDbsnapshotResponse) Get() *ListDbsnapshotResponse {
	return v.value
}

func (v *NullableListDbsnapshotResponse) Set(val *ListDbsnapshotResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDbsnapshotResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDbsnapshotResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDbsnapshotResponse(val *ListDbsnapshotResponse) *NullableListDbsnapshotResponse {
	return &NullableListDbsnapshotResponse{value: val, isSet: true}
}

func (v NullableListDbsnapshotResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDbsnapshotResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
