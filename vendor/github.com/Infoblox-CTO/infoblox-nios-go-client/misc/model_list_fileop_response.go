/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListFileopResponse - struct for ListFileopResponse
type ListFileopResponse struct {
	ListFileopResponseObject *ListFileopResponseObject
	ArrayOfFileop            *[]Fileop
}

// ListFileopResponseObjectAsListFileopResponse is a convenience function that returns ListFileopResponseObject wrapped in ListFileopResponse
func ListFileopResponseObjectAsListFileopResponse(v *ListFileopResponseObject) ListFileopResponse {
	return ListFileopResponse{
		ListFileopResponseObject: v,
	}
}

// []FileopAsListFileopResponse is a convenience function that returns []Fileop wrapped in ListFileopResponse
func ArrayOfFileopAsListFileopResponse(v *[]Fileop) ListFileopResponse {
	return ListFileopResponse{
		ArrayOfFileop: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFileopResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFileopResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFileopResponseObject)
	if err == nil {
		jsonListFileopResponseObject, _ := json.Marshal(dst.ListFileopResponseObject)
		if string(jsonListFileopResponseObject) == "{}" { // empty struct
			dst.ListFileopResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFileopResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFileop
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFileop)
	if err == nil {
		jsonArrayOfFileop, _ := json.Marshal(dst.ArrayOfFileop)
		if string(jsonArrayOfFileop) == "{}" { // empty struct
			dst.ArrayOfFileop = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFileop = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFileopResponseObject = nil
		dst.ArrayOfFileop = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFileopResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFileopResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFileopResponse) MarshalJSON() ([]byte, error) {
	if src.ListFileopResponseObject != nil {
		return json.Marshal(&src.ListFileopResponseObject)
	}

	if src.ArrayOfFileop != nil {
		return json.Marshal(&src.ArrayOfFileop)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFileopResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFileopResponseObject != nil {
		return obj.ListFileopResponseObject
	}

	if obj.ArrayOfFileop != nil {
		return obj.ArrayOfFileop
	}

	// all schemas are nil
	return nil
}

type NullableListFileopResponse struct {
	value *ListFileopResponse
	isSet bool
}

func (v NullableListFileopResponse) Get() *ListFileopResponse {
	return v.value
}

func (v *NullableListFileopResponse) Set(val *ListFileopResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFileopResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFileopResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFileopResponse(val *ListFileopResponse) *NullableListFileopResponse {
	return &NullableListFileopResponse{value: val, isSet: true}
}

func (v NullableListFileopResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFileopResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
