/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the ListFileopResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFileopResponseObject{}

// ListFileopResponseObject The response format to retrieve __Fileop__ objects.
type ListFileopResponseObject struct {
	Result               []Fileop `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListFileopResponseObject ListFileopResponseObject

// NewListFileopResponseObject instantiates a new ListFileopResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFileopResponseObject() *ListFileopResponseObject {
	this := ListFileopResponseObject{}
	return &this
}

// NewListFileopResponseObjectWithDefaults instantiates a new ListFileopResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFileopResponseObjectWithDefaults() *ListFileopResponseObject {
	this := ListFileopResponseObject{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ListFileopResponseObject) GetResult() []Fileop {
	if o == nil || IsNil(o.Result) {
		var ret []Fileop
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFileopResponseObject) GetResultOk() ([]Fileop, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ListFileopResponseObject) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []Fileop and assigns it to the Result field.
func (o *ListFileopResponseObject) SetResult(v []Fileop) {
	o.Result = v
}

func (o ListFileopResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFileopResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListFileopResponseObject) UnmarshalJSON(data []byte) (err error) {
	varListFileopResponseObject := _ListFileopResponseObject{}

	err = json.Unmarshal(data, &varListFileopResponseObject)

	if err != nil {
		return err
	}

	*o = ListFileopResponseObject(varListFileopResponseObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListFileopResponseObject struct {
	value *ListFileopResponseObject
	isSet bool
}

func (v NullableListFileopResponseObject) Get() *ListFileopResponseObject {
	return v.value
}

func (v *NullableListFileopResponseObject) Set(val *ListFileopResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableListFileopResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableListFileopResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFileopResponseObject(val *ListFileopResponseObject) *NullableListFileopResponseObject {
	return &NullableListFileopResponseObject{value: val, isSet: true}
}

func (v NullableListFileopResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFileopResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
