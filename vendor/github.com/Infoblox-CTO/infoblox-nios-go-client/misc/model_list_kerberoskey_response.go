/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListKerberoskeyResponse - struct for ListKerberoskeyResponse
type ListKerberoskeyResponse struct {
	ListKerberoskeyResponseObject *ListKerberoskeyResponseObject
	ArrayOfKerberoskey            *[]Kerberoskey
}

// ListKerberoskeyResponseObjectAsListKerberoskeyResponse is a convenience function that returns ListKerberoskeyResponseObject wrapped in ListKerberoskeyResponse
func ListKerberoskeyResponseObjectAsListKerberoskeyResponse(v *ListKerberoskeyResponseObject) ListKerberoskeyResponse {
	return ListKerberoskeyResponse{
		ListKerberoskeyResponseObject: v,
	}
}

// []KerberoskeyAsListKerberoskeyResponse is a convenience function that returns []Kerberoskey wrapped in ListKerberoskeyResponse
func ArrayOfKerberoskeyAsListKerberoskeyResponse(v *[]Kerberoskey) ListKerberoskeyResponse {
	return ListKerberoskeyResponse{
		ArrayOfKerberoskey: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListKerberoskeyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListKerberoskeyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListKerberoskeyResponseObject)
	if err == nil {
		jsonListKerberoskeyResponseObject, _ := json.Marshal(dst.ListKerberoskeyResponseObject)
		if string(jsonListKerberoskeyResponseObject) == "{}" { // empty struct
			dst.ListKerberoskeyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListKerberoskeyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfKerberoskey
	err = newStrictDecoder(data).Decode(&dst.ArrayOfKerberoskey)
	if err == nil {
		jsonArrayOfKerberoskey, _ := json.Marshal(dst.ArrayOfKerberoskey)
		if string(jsonArrayOfKerberoskey) == "{}" { // empty struct
			dst.ArrayOfKerberoskey = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfKerberoskey = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListKerberoskeyResponseObject = nil
		dst.ArrayOfKerberoskey = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListKerberoskeyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListKerberoskeyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListKerberoskeyResponse) MarshalJSON() ([]byte, error) {
	if src.ListKerberoskeyResponseObject != nil {
		return json.Marshal(&src.ListKerberoskeyResponseObject)
	}

	if src.ArrayOfKerberoskey != nil {
		return json.Marshal(&src.ArrayOfKerberoskey)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListKerberoskeyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListKerberoskeyResponseObject != nil {
		return obj.ListKerberoskeyResponseObject
	}

	if obj.ArrayOfKerberoskey != nil {
		return obj.ArrayOfKerberoskey
	}

	// all schemas are nil
	return nil
}

type NullableListKerberoskeyResponse struct {
	value *ListKerberoskeyResponse
	isSet bool
}

func (v NullableListKerberoskeyResponse) Get() *ListKerberoskeyResponse {
	return v.value
}

func (v *NullableListKerberoskeyResponse) Set(val *ListKerberoskeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListKerberoskeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListKerberoskeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListKerberoskeyResponse(val *ListKerberoskeyResponse) *NullableListKerberoskeyResponse {
	return &NullableListKerberoskeyResponse{value: val, isSet: true}
}

func (v NullableListKerberoskeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListKerberoskeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
