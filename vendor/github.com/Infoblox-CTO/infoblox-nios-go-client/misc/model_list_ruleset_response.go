/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListRulesetResponse - struct for ListRulesetResponse
type ListRulesetResponse struct {
	ListRulesetResponseObject *ListRulesetResponseObject
	ArrayOfRuleset            *[]Ruleset
}

// ListRulesetResponseObjectAsListRulesetResponse is a convenience function that returns ListRulesetResponseObject wrapped in ListRulesetResponse
func ListRulesetResponseObjectAsListRulesetResponse(v *ListRulesetResponseObject) ListRulesetResponse {
	return ListRulesetResponse{
		ListRulesetResponseObject: v,
	}
}

// []RulesetAsListRulesetResponse is a convenience function that returns []Ruleset wrapped in ListRulesetResponse
func ArrayOfRulesetAsListRulesetResponse(v *[]Ruleset) ListRulesetResponse {
	return ListRulesetResponse{
		ArrayOfRuleset: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRulesetResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRulesetResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRulesetResponseObject)
	if err == nil {
		jsonListRulesetResponseObject, _ := json.Marshal(dst.ListRulesetResponseObject)
		if string(jsonListRulesetResponseObject) == "{}" { // empty struct
			dst.ListRulesetResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRulesetResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRuleset
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRuleset)
	if err == nil {
		jsonArrayOfRuleset, _ := json.Marshal(dst.ArrayOfRuleset)
		if string(jsonArrayOfRuleset) == "{}" { // empty struct
			dst.ArrayOfRuleset = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRuleset = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRulesetResponseObject = nil
		dst.ArrayOfRuleset = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRulesetResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRulesetResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRulesetResponse) MarshalJSON() ([]byte, error) {
	if src.ListRulesetResponseObject != nil {
		return json.Marshal(&src.ListRulesetResponseObject)
	}

	if src.ArrayOfRuleset != nil {
		return json.Marshal(&src.ArrayOfRuleset)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRulesetResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRulesetResponseObject != nil {
		return obj.ListRulesetResponseObject
	}

	if obj.ArrayOfRuleset != nil {
		return obj.ArrayOfRuleset
	}

	// all schemas are nil
	return nil
}

type NullableListRulesetResponse struct {
	value *ListRulesetResponse
	isSet bool
}

func (v NullableListRulesetResponse) Get() *ListRulesetResponse {
	return v.value
}

func (v *NullableListRulesetResponse) Set(val *ListRulesetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRulesetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRulesetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRulesetResponse(val *ListRulesetResponse) *NullableListRulesetResponse {
	return &NullableListRulesetResponse{value: val, isSet: true}
}

func (v NullableListRulesetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRulesetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
