/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListScavengingtaskResponse - struct for ListScavengingtaskResponse
type ListScavengingtaskResponse struct {
	ListScavengingtaskResponseObject *ListScavengingtaskResponseObject
	ArrayOfScavengingtask            *[]Scavengingtask
}

// ListScavengingtaskResponseObjectAsListScavengingtaskResponse is a convenience function that returns ListScavengingtaskResponseObject wrapped in ListScavengingtaskResponse
func ListScavengingtaskResponseObjectAsListScavengingtaskResponse(v *ListScavengingtaskResponseObject) ListScavengingtaskResponse {
	return ListScavengingtaskResponse{
		ListScavengingtaskResponseObject: v,
	}
}

// []ScavengingtaskAsListScavengingtaskResponse is a convenience function that returns []Scavengingtask wrapped in ListScavengingtaskResponse
func ArrayOfScavengingtaskAsListScavengingtaskResponse(v *[]Scavengingtask) ListScavengingtaskResponse {
	return ListScavengingtaskResponse{
		ArrayOfScavengingtask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListScavengingtaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListScavengingtaskResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListScavengingtaskResponseObject)
	if err == nil {
		jsonListScavengingtaskResponseObject, _ := json.Marshal(dst.ListScavengingtaskResponseObject)
		if string(jsonListScavengingtaskResponseObject) == "{}" { // empty struct
			dst.ListScavengingtaskResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListScavengingtaskResponseObject = nil
	}

	// try to unmarshal data into ArrayOfScavengingtask
	err = newStrictDecoder(data).Decode(&dst.ArrayOfScavengingtask)
	if err == nil {
		jsonArrayOfScavengingtask, _ := json.Marshal(dst.ArrayOfScavengingtask)
		if string(jsonArrayOfScavengingtask) == "{}" { // empty struct
			dst.ArrayOfScavengingtask = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfScavengingtask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListScavengingtaskResponseObject = nil
		dst.ArrayOfScavengingtask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListScavengingtaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListScavengingtaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListScavengingtaskResponse) MarshalJSON() ([]byte, error) {
	if src.ListScavengingtaskResponseObject != nil {
		return json.Marshal(&src.ListScavengingtaskResponseObject)
	}

	if src.ArrayOfScavengingtask != nil {
		return json.Marshal(&src.ArrayOfScavengingtask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListScavengingtaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListScavengingtaskResponseObject != nil {
		return obj.ListScavengingtaskResponseObject
	}

	if obj.ArrayOfScavengingtask != nil {
		return obj.ArrayOfScavengingtask
	}

	// all schemas are nil
	return nil
}

type NullableListScavengingtaskResponse struct {
	value *ListScavengingtaskResponse
	isSet bool
}

func (v NullableListScavengingtaskResponse) Get() *ListScavengingtaskResponse {
	return v.value
}

func (v *NullableListScavengingtaskResponse) Set(val *ListScavengingtaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListScavengingtaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListScavengingtaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListScavengingtaskResponse(val *ListScavengingtaskResponse) *NullableListScavengingtaskResponse {
	return &NullableListScavengingtaskResponse{value: val, isSet: true}
}

func (v NullableListScavengingtaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListScavengingtaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
