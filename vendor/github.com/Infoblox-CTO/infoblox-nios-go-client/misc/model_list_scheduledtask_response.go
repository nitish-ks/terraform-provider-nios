/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListScheduledtaskResponse - struct for ListScheduledtaskResponse
type ListScheduledtaskResponse struct {
	ListScheduledtaskResponseObject *ListScheduledtaskResponseObject
	ArrayOfScheduledtask            *[]Scheduledtask
}

// ListScheduledtaskResponseObjectAsListScheduledtaskResponse is a convenience function that returns ListScheduledtaskResponseObject wrapped in ListScheduledtaskResponse
func ListScheduledtaskResponseObjectAsListScheduledtaskResponse(v *ListScheduledtaskResponseObject) ListScheduledtaskResponse {
	return ListScheduledtaskResponse{
		ListScheduledtaskResponseObject: v,
	}
}

// []ScheduledtaskAsListScheduledtaskResponse is a convenience function that returns []Scheduledtask wrapped in ListScheduledtaskResponse
func ArrayOfScheduledtaskAsListScheduledtaskResponse(v *[]Scheduledtask) ListScheduledtaskResponse {
	return ListScheduledtaskResponse{
		ArrayOfScheduledtask: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListScheduledtaskResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListScheduledtaskResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListScheduledtaskResponseObject)
	if err == nil {
		jsonListScheduledtaskResponseObject, _ := json.Marshal(dst.ListScheduledtaskResponseObject)
		if string(jsonListScheduledtaskResponseObject) == "{}" { // empty struct
			dst.ListScheduledtaskResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListScheduledtaskResponseObject = nil
	}

	// try to unmarshal data into ArrayOfScheduledtask
	err = newStrictDecoder(data).Decode(&dst.ArrayOfScheduledtask)
	if err == nil {
		jsonArrayOfScheduledtask, _ := json.Marshal(dst.ArrayOfScheduledtask)
		if string(jsonArrayOfScheduledtask) == "{}" { // empty struct
			dst.ArrayOfScheduledtask = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfScheduledtask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListScheduledtaskResponseObject = nil
		dst.ArrayOfScheduledtask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListScheduledtaskResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListScheduledtaskResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListScheduledtaskResponse) MarshalJSON() ([]byte, error) {
	if src.ListScheduledtaskResponseObject != nil {
		return json.Marshal(&src.ListScheduledtaskResponseObject)
	}

	if src.ArrayOfScheduledtask != nil {
		return json.Marshal(&src.ArrayOfScheduledtask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListScheduledtaskResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListScheduledtaskResponseObject != nil {
		return obj.ListScheduledtaskResponseObject
	}

	if obj.ArrayOfScheduledtask != nil {
		return obj.ArrayOfScheduledtask
	}

	// all schemas are nil
	return nil
}

type NullableListScheduledtaskResponse struct {
	value *ListScheduledtaskResponse
	isSet bool
}

func (v NullableListScheduledtaskResponse) Get() *ListScheduledtaskResponse {
	return v.value
}

func (v *NullableListScheduledtaskResponse) Set(val *ListScheduledtaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListScheduledtaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListScheduledtaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListScheduledtaskResponse(val *ListScheduledtaskResponse) *NullableListScheduledtaskResponse {
	return &NullableListScheduledtaskResponse{value: val, isSet: true}
}

func (v NullableListScheduledtaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListScheduledtaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
