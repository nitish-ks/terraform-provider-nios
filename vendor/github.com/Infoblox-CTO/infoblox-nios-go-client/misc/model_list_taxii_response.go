/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListTaxiiResponse - struct for ListTaxiiResponse
type ListTaxiiResponse struct {
	ListTaxiiResponseObject *ListTaxiiResponseObject
	ArrayOfTaxii            *[]Taxii
}

// ListTaxiiResponseObjectAsListTaxiiResponse is a convenience function that returns ListTaxiiResponseObject wrapped in ListTaxiiResponse
func ListTaxiiResponseObjectAsListTaxiiResponse(v *ListTaxiiResponseObject) ListTaxiiResponse {
	return ListTaxiiResponse{
		ListTaxiiResponseObject: v,
	}
}

// []TaxiiAsListTaxiiResponse is a convenience function that returns []Taxii wrapped in ListTaxiiResponse
func ArrayOfTaxiiAsListTaxiiResponse(v *[]Taxii) ListTaxiiResponse {
	return ListTaxiiResponse{
		ArrayOfTaxii: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTaxiiResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTaxiiResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListTaxiiResponseObject)
	if err == nil {
		jsonListTaxiiResponseObject, _ := json.Marshal(dst.ListTaxiiResponseObject)
		if string(jsonListTaxiiResponseObject) == "{}" { // empty struct
			dst.ListTaxiiResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListTaxiiResponseObject = nil
	}

	// try to unmarshal data into ArrayOfTaxii
	err = newStrictDecoder(data).Decode(&dst.ArrayOfTaxii)
	if err == nil {
		jsonArrayOfTaxii, _ := json.Marshal(dst.ArrayOfTaxii)
		if string(jsonArrayOfTaxii) == "{}" { // empty struct
			dst.ArrayOfTaxii = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfTaxii = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTaxiiResponseObject = nil
		dst.ArrayOfTaxii = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListTaxiiResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListTaxiiResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTaxiiResponse) MarshalJSON() ([]byte, error) {
	if src.ListTaxiiResponseObject != nil {
		return json.Marshal(&src.ListTaxiiResponseObject)
	}

	if src.ArrayOfTaxii != nil {
		return json.Marshal(&src.ArrayOfTaxii)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTaxiiResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListTaxiiResponseObject != nil {
		return obj.ListTaxiiResponseObject
	}

	if obj.ArrayOfTaxii != nil {
		return obj.ArrayOfTaxii
	}

	// all schemas are nil
	return nil
}

type NullableListTaxiiResponse struct {
	value *ListTaxiiResponse
	isSet bool
}

func (v NullableListTaxiiResponse) Get() *ListTaxiiResponse {
	return v.value
}

func (v *NullableListTaxiiResponse) Set(val *ListTaxiiResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTaxiiResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTaxiiResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTaxiiResponse(val *ListTaxiiResponse) *NullableListTaxiiResponse {
	return &NullableListTaxiiResponse{value: val, isSet: true}
}

func (v NullableListTaxiiResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTaxiiResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
