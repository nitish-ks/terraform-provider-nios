/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the RulesetNxdomainRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RulesetNxdomainRules{}

// RulesetNxdomainRules struct for RulesetNxdomainRules
type RulesetNxdomainRules struct {
	// The action to perform when a domain name matches the pattern defined in this Ruleset.
	Action *string `json:"action,omitempty"`
	// The pattern that is used to match the domain name.
	Pattern              *string `json:"pattern,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RulesetNxdomainRules RulesetNxdomainRules

// NewRulesetNxdomainRules instantiates a new RulesetNxdomainRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesetNxdomainRules() *RulesetNxdomainRules {
	this := RulesetNxdomainRules{}
	return &this
}

// NewRulesetNxdomainRulesWithDefaults instantiates a new RulesetNxdomainRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesetNxdomainRulesWithDefaults() *RulesetNxdomainRules {
	this := RulesetNxdomainRules{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RulesetNxdomainRules) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesetNxdomainRules) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RulesetNxdomainRules) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *RulesetNxdomainRules) SetAction(v string) {
	o.Action = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *RulesetNxdomainRules) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesetNxdomainRules) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *RulesetNxdomainRules) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *RulesetNxdomainRules) SetPattern(v string) {
	o.Pattern = &v
}

func (o RulesetNxdomainRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RulesetNxdomainRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RulesetNxdomainRules) UnmarshalJSON(data []byte) (err error) {
	varRulesetNxdomainRules := _RulesetNxdomainRules{}

	err = json.Unmarshal(data, &varRulesetNxdomainRules)

	if err != nil {
		return err
	}

	*o = RulesetNxdomainRules(varRulesetNxdomainRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "pattern")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRulesetNxdomainRules struct {
	value *RulesetNxdomainRules
	isSet bool
}

func (v NullableRulesetNxdomainRules) Get() *RulesetNxdomainRules {
	return v.value
}

func (v *NullableRulesetNxdomainRules) Set(val *RulesetNxdomainRules) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesetNxdomainRules) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesetNxdomainRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesetNxdomainRules(val *RulesetNxdomainRules) *NullableRulesetNxdomainRules {
	return &NullableRulesetNxdomainRules{value: val, isSet: true}
}

func (v NullableRulesetNxdomainRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesetNxdomainRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
