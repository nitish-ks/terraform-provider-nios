/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"fmt"
)

// GetNotificationRestTemplateResponse - struct for GetNotificationRestTemplateResponse
type GetNotificationRestTemplateResponse struct {
	GetNotificationRestTemplateResponseObjectAsResult *GetNotificationRestTemplateResponseObjectAsResult
	NotificationRestTemplate                          *NotificationRestTemplate
}

// GetNotificationRestTemplateResponseObjectAsResultAsGetNotificationRestTemplateResponse is a convenience function that returns GetNotificationRestTemplateResponseObjectAsResult wrapped in GetNotificationRestTemplateResponse
func GetNotificationRestTemplateResponseObjectAsResultAsGetNotificationRestTemplateResponse(v *GetNotificationRestTemplateResponseObjectAsResult) GetNotificationRestTemplateResponse {
	return GetNotificationRestTemplateResponse{
		GetNotificationRestTemplateResponseObjectAsResult: v,
	}
}

// NotificationRestTemplateAsGetNotificationRestTemplateResponse is a convenience function that returns NotificationRestTemplate wrapped in GetNotificationRestTemplateResponse
func NotificationRestTemplateAsGetNotificationRestTemplateResponse(v *NotificationRestTemplate) GetNotificationRestTemplateResponse {
	return GetNotificationRestTemplateResponse{
		NotificationRestTemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNotificationRestTemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNotificationRestTemplateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNotificationRestTemplateResponseObjectAsResult)
	if err == nil {
		jsonGetNotificationRestTemplateResponseObjectAsResult, _ := json.Marshal(dst.GetNotificationRestTemplateResponseObjectAsResult)
		if string(jsonGetNotificationRestTemplateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNotificationRestTemplateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNotificationRestTemplateResponseObjectAsResult = nil
	}

	// try to unmarshal data into NotificationRestTemplate
	err = newStrictDecoder(data).Decode(&dst.NotificationRestTemplate)
	if err == nil {
		jsonNotificationRestTemplate, _ := json.Marshal(dst.NotificationRestTemplate)
		if string(jsonNotificationRestTemplate) == "{}" { // empty struct
			dst.NotificationRestTemplate = nil
		} else {
			match++
		}
	} else {
		dst.NotificationRestTemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNotificationRestTemplateResponseObjectAsResult = nil
		dst.NotificationRestTemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNotificationRestTemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNotificationRestTemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNotificationRestTemplateResponse) MarshalJSON() ([]byte, error) {
	if src.GetNotificationRestTemplateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNotificationRestTemplateResponseObjectAsResult)
	}

	if src.NotificationRestTemplate != nil {
		return json.Marshal(&src.NotificationRestTemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNotificationRestTemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNotificationRestTemplateResponseObjectAsResult != nil {
		return obj.GetNotificationRestTemplateResponseObjectAsResult
	}

	if obj.NotificationRestTemplate != nil {
		return obj.NotificationRestTemplate
	}

	// all schemas are nil
	return nil
}

type NullableGetNotificationRestTemplateResponse struct {
	value *GetNotificationRestTemplateResponse
	isSet bool
}

func (v NullableGetNotificationRestTemplateResponse) Get() *GetNotificationRestTemplateResponse {
	return v.value
}

func (v *NullableGetNotificationRestTemplateResponse) Set(val *GetNotificationRestTemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNotificationRestTemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNotificationRestTemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNotificationRestTemplateResponse(val *GetNotificationRestTemplateResponse) *NullableGetNotificationRestTemplateResponse {
	return &NullableGetNotificationRestTemplateResponse{value: val, isSet: true}
}

func (v NullableGetNotificationRestTemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNotificationRestTemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
