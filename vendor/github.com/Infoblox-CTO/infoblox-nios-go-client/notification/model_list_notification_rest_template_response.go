/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"fmt"
)

// ListNotificationRestTemplateResponse - struct for ListNotificationRestTemplateResponse
type ListNotificationRestTemplateResponse struct {
	ListNotificationRestTemplateResponseObject *ListNotificationRestTemplateResponseObject
	ArrayOfNotificationRestTemplate            *[]NotificationRestTemplate
}

// ListNotificationRestTemplateResponseObjectAsListNotificationRestTemplateResponse is a convenience function that returns ListNotificationRestTemplateResponseObject wrapped in ListNotificationRestTemplateResponse
func ListNotificationRestTemplateResponseObjectAsListNotificationRestTemplateResponse(v *ListNotificationRestTemplateResponseObject) ListNotificationRestTemplateResponse {
	return ListNotificationRestTemplateResponse{
		ListNotificationRestTemplateResponseObject: v,
	}
}

// []NotificationRestTemplateAsListNotificationRestTemplateResponse is a convenience function that returns []NotificationRestTemplate wrapped in ListNotificationRestTemplateResponse
func ArrayOfNotificationRestTemplateAsListNotificationRestTemplateResponse(v *[]NotificationRestTemplate) ListNotificationRestTemplateResponse {
	return ListNotificationRestTemplateResponse{
		ArrayOfNotificationRestTemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNotificationRestTemplateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNotificationRestTemplateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNotificationRestTemplateResponseObject)
	if err == nil {
		jsonListNotificationRestTemplateResponseObject, _ := json.Marshal(dst.ListNotificationRestTemplateResponseObject)
		if string(jsonListNotificationRestTemplateResponseObject) == "{}" { // empty struct
			dst.ListNotificationRestTemplateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNotificationRestTemplateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNotificationRestTemplate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNotificationRestTemplate)
	if err == nil {
		jsonArrayOfNotificationRestTemplate, _ := json.Marshal(dst.ArrayOfNotificationRestTemplate)
		if string(jsonArrayOfNotificationRestTemplate) == "{}" { // empty struct
			dst.ArrayOfNotificationRestTemplate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNotificationRestTemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNotificationRestTemplateResponseObject = nil
		dst.ArrayOfNotificationRestTemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNotificationRestTemplateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNotificationRestTemplateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNotificationRestTemplateResponse) MarshalJSON() ([]byte, error) {
	if src.ListNotificationRestTemplateResponseObject != nil {
		return json.Marshal(&src.ListNotificationRestTemplateResponseObject)
	}

	if src.ArrayOfNotificationRestTemplate != nil {
		return json.Marshal(&src.ArrayOfNotificationRestTemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNotificationRestTemplateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNotificationRestTemplateResponseObject != nil {
		return obj.ListNotificationRestTemplateResponseObject
	}

	if obj.ArrayOfNotificationRestTemplate != nil {
		return obj.ArrayOfNotificationRestTemplate
	}

	// all schemas are nil
	return nil
}

type NullableListNotificationRestTemplateResponse struct {
	value *ListNotificationRestTemplateResponse
	isSet bool
}

func (v NullableListNotificationRestTemplateResponse) Get() *ListNotificationRestTemplateResponse {
	return v.value
}

func (v *NullableListNotificationRestTemplateResponse) Set(val *ListNotificationRestTemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNotificationRestTemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNotificationRestTemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNotificationRestTemplateResponse(val *ListNotificationRestTemplateResponse) *NullableListNotificationRestTemplateResponse {
	return &NullableListNotificationRestTemplateResponse{value: val, isSet: true}
}

func (v NullableListNotificationRestTemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNotificationRestTemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
