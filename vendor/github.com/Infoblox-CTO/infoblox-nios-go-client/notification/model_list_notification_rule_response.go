/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"fmt"
)

// ListNotificationRuleResponse - struct for ListNotificationRuleResponse
type ListNotificationRuleResponse struct {
	ListNotificationRuleResponseObject *ListNotificationRuleResponseObject
	ArrayOfNotificationRule            *[]NotificationRule
}

// ListNotificationRuleResponseObjectAsListNotificationRuleResponse is a convenience function that returns ListNotificationRuleResponseObject wrapped in ListNotificationRuleResponse
func ListNotificationRuleResponseObjectAsListNotificationRuleResponse(v *ListNotificationRuleResponseObject) ListNotificationRuleResponse {
	return ListNotificationRuleResponse{
		ListNotificationRuleResponseObject: v,
	}
}

// []NotificationRuleAsListNotificationRuleResponse is a convenience function that returns []NotificationRule wrapped in ListNotificationRuleResponse
func ArrayOfNotificationRuleAsListNotificationRuleResponse(v *[]NotificationRule) ListNotificationRuleResponse {
	return ListNotificationRuleResponse{
		ArrayOfNotificationRule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNotificationRuleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNotificationRuleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNotificationRuleResponseObject)
	if err == nil {
		jsonListNotificationRuleResponseObject, _ := json.Marshal(dst.ListNotificationRuleResponseObject)
		if string(jsonListNotificationRuleResponseObject) == "{}" { // empty struct
			dst.ListNotificationRuleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNotificationRuleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNotificationRule
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNotificationRule)
	if err == nil {
		jsonArrayOfNotificationRule, _ := json.Marshal(dst.ArrayOfNotificationRule)
		if string(jsonArrayOfNotificationRule) == "{}" { // empty struct
			dst.ArrayOfNotificationRule = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNotificationRule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNotificationRuleResponseObject = nil
		dst.ArrayOfNotificationRule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNotificationRuleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNotificationRuleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNotificationRuleResponse) MarshalJSON() ([]byte, error) {
	if src.ListNotificationRuleResponseObject != nil {
		return json.Marshal(&src.ListNotificationRuleResponseObject)
	}

	if src.ArrayOfNotificationRule != nil {
		return json.Marshal(&src.ArrayOfNotificationRule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNotificationRuleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNotificationRuleResponseObject != nil {
		return obj.ListNotificationRuleResponseObject
	}

	if obj.ArrayOfNotificationRule != nil {
		return obj.ArrayOfNotificationRule
	}

	// all schemas are nil
	return nil
}

type NullableListNotificationRuleResponse struct {
	value *ListNotificationRuleResponse
	isSet bool
}

func (v NullableListNotificationRuleResponse) Get() *ListNotificationRuleResponse {
	return v.value
}

func (v *NullableListNotificationRuleResponse) Set(val *ListNotificationRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNotificationRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNotificationRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNotificationRuleResponse(val *ListNotificationRuleResponse) *NullableListNotificationRuleResponse {
	return &NullableListNotificationRuleResponse{value: val, isSet: true}
}

func (v NullableListNotificationRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNotificationRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
