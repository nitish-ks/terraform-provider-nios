/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
)

// checks if the NotificationRestEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationRestEndpoint{}

// NotificationRestEndpoint struct for NotificationRestEndpoint
type NotificationRestEndpoint struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The client certificate subject of a notification REST endpoint.
	ClientCertificateSubject *string `json:"client_certificate_subject,omitempty"`
	// The token returned by the uploadinit function call in object fileop for a notification REST endpoit client certificate.
	ClientCertificateToken *string `json:"client_certificate_token,omitempty"`
	// The timestamp when client certificate for a notification REST endpoint was created.
	ClientCertificateValidFrom *int64 `json:"client_certificate_valid_from,omitempty"`
	// The timestamp when client certificate for a notification REST endpoint expires.
	ClientCertificateValidTo *int64 `json:"client_certificate_valid_to,omitempty"`
	// The comment of a notification REST endpoint.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The log level for a notification REST endpoint.
	LogLevel *string `json:"log_level,omitempty"`
	// The name of a notification REST endpoint.
	Name *string `json:"name,omitempty"`
	// The outbound member which will generate an event.
	OutboundMemberType *string `json:"outbound_member_type,omitempty"`
	// The list of members for outbound events.
	OutboundMembers []string `json:"outbound_members,omitempty"`
	// The password of the user that can log into a notification REST endpoint.
	Password *string `json:"password,omitempty"`
	// The server certificate validation type.
	ServerCertValidation *string `json:"server_cert_validation,omitempty"`
	// Determines if the sync process is disabled for a notification REST endpoint.
	SyncDisabled     *bool                                     `json:"sync_disabled,omitempty"`
	TemplateInstance *NotificationRestEndpointTemplateInstance `json:"template_instance,omitempty"`
	// The timeout of session management (in seconds).
	Timeout *int64 `json:"timeout,omitempty"`
	// The URI of a notification REST endpoint.
	Uri *string `json:"uri,omitempty"`
	// The username of the user that can log into a notification REST endpoint.
	Username *string `json:"username,omitempty"`
	// The vendor identifier.
	VendorIdentifier *string `json:"vendor_identifier,omitempty"`
	// The user name for WAPI integration.
	WapiUserName *string `json:"wapi_user_name,omitempty"`
	// The user password for WAPI integration.
	WapiUserPassword *string `json:"wapi_user_password,omitempty"`
}

// NewNotificationRestEndpoint instantiates a new NotificationRestEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRestEndpoint() *NotificationRestEndpoint {
	this := NotificationRestEndpoint{}
	return &this
}

// NewNotificationRestEndpointWithDefaults instantiates a new NotificationRestEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRestEndpointWithDefaults() *NotificationRestEndpoint {
	this := NotificationRestEndpoint{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *NotificationRestEndpoint) SetRef(v string) {
	o.Ref = &v
}

// GetClientCertificateSubject returns the ClientCertificateSubject field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetClientCertificateSubject() string {
	if o == nil || IsNil(o.ClientCertificateSubject) {
		var ret string
		return ret
	}
	return *o.ClientCertificateSubject
}

// GetClientCertificateSubjectOk returns a tuple with the ClientCertificateSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetClientCertificateSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateSubject) {
		return nil, false
	}
	return o.ClientCertificateSubject, true
}

// HasClientCertificateSubject returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasClientCertificateSubject() bool {
	if o != nil && !IsNil(o.ClientCertificateSubject) {
		return true
	}

	return false
}

// SetClientCertificateSubject gets a reference to the given string and assigns it to the ClientCertificateSubject field.
func (o *NotificationRestEndpoint) SetClientCertificateSubject(v string) {
	o.ClientCertificateSubject = &v
}

// GetClientCertificateToken returns the ClientCertificateToken field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetClientCertificateToken() string {
	if o == nil || IsNil(o.ClientCertificateToken) {
		var ret string
		return ret
	}
	return *o.ClientCertificateToken
}

// GetClientCertificateTokenOk returns a tuple with the ClientCertificateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetClientCertificateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateToken) {
		return nil, false
	}
	return o.ClientCertificateToken, true
}

// HasClientCertificateToken returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasClientCertificateToken() bool {
	if o != nil && !IsNil(o.ClientCertificateToken) {
		return true
	}

	return false
}

// SetClientCertificateToken gets a reference to the given string and assigns it to the ClientCertificateToken field.
func (o *NotificationRestEndpoint) SetClientCertificateToken(v string) {
	o.ClientCertificateToken = &v
}

// GetClientCertificateValidFrom returns the ClientCertificateValidFrom field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetClientCertificateValidFrom() int64 {
	if o == nil || IsNil(o.ClientCertificateValidFrom) {
		var ret int64
		return ret
	}
	return *o.ClientCertificateValidFrom
}

// GetClientCertificateValidFromOk returns a tuple with the ClientCertificateValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetClientCertificateValidFromOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientCertificateValidFrom) {
		return nil, false
	}
	return o.ClientCertificateValidFrom, true
}

// HasClientCertificateValidFrom returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasClientCertificateValidFrom() bool {
	if o != nil && !IsNil(o.ClientCertificateValidFrom) {
		return true
	}

	return false
}

// SetClientCertificateValidFrom gets a reference to the given int64 and assigns it to the ClientCertificateValidFrom field.
func (o *NotificationRestEndpoint) SetClientCertificateValidFrom(v int64) {
	o.ClientCertificateValidFrom = &v
}

// GetClientCertificateValidTo returns the ClientCertificateValidTo field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetClientCertificateValidTo() int64 {
	if o == nil || IsNil(o.ClientCertificateValidTo) {
		var ret int64
		return ret
	}
	return *o.ClientCertificateValidTo
}

// GetClientCertificateValidToOk returns a tuple with the ClientCertificateValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetClientCertificateValidToOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientCertificateValidTo) {
		return nil, false
	}
	return o.ClientCertificateValidTo, true
}

// HasClientCertificateValidTo returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasClientCertificateValidTo() bool {
	if o != nil && !IsNil(o.ClientCertificateValidTo) {
		return true
	}

	return false
}

// SetClientCertificateValidTo gets a reference to the given int64 and assigns it to the ClientCertificateValidTo field.
func (o *NotificationRestEndpoint) SetClientCertificateValidTo(v int64) {
	o.ClientCertificateValidTo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NotificationRestEndpoint) SetComment(v string) {
	o.Comment = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *NotificationRestEndpoint) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetLogLevel() string {
	if o == nil || IsNil(o.LogLevel) {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetLogLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *NotificationRestEndpoint) SetLogLevel(v string) {
	o.LogLevel = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationRestEndpoint) SetName(v string) {
	o.Name = &v
}

// GetOutboundMemberType returns the OutboundMemberType field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetOutboundMemberType() string {
	if o == nil || IsNil(o.OutboundMemberType) {
		var ret string
		return ret
	}
	return *o.OutboundMemberType
}

// GetOutboundMemberTypeOk returns a tuple with the OutboundMemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetOutboundMemberTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OutboundMemberType) {
		return nil, false
	}
	return o.OutboundMemberType, true
}

// HasOutboundMemberType returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasOutboundMemberType() bool {
	if o != nil && !IsNil(o.OutboundMemberType) {
		return true
	}

	return false
}

// SetOutboundMemberType gets a reference to the given string and assigns it to the OutboundMemberType field.
func (o *NotificationRestEndpoint) SetOutboundMemberType(v string) {
	o.OutboundMemberType = &v
}

// GetOutboundMembers returns the OutboundMembers field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetOutboundMembers() []string {
	if o == nil || IsNil(o.OutboundMembers) {
		var ret []string
		return ret
	}
	return o.OutboundMembers
}

// GetOutboundMembersOk returns a tuple with the OutboundMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetOutboundMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.OutboundMembers) {
		return nil, false
	}
	return o.OutboundMembers, true
}

// HasOutboundMembers returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasOutboundMembers() bool {
	if o != nil && !IsNil(o.OutboundMembers) {
		return true
	}

	return false
}

// SetOutboundMembers gets a reference to the given []string and assigns it to the OutboundMembers field.
func (o *NotificationRestEndpoint) SetOutboundMembers(v []string) {
	o.OutboundMembers = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *NotificationRestEndpoint) SetPassword(v string) {
	o.Password = &v
}

// GetServerCertValidation returns the ServerCertValidation field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetServerCertValidation() string {
	if o == nil || IsNil(o.ServerCertValidation) {
		var ret string
		return ret
	}
	return *o.ServerCertValidation
}

// GetServerCertValidationOk returns a tuple with the ServerCertValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetServerCertValidationOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCertValidation) {
		return nil, false
	}
	return o.ServerCertValidation, true
}

// HasServerCertValidation returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasServerCertValidation() bool {
	if o != nil && !IsNil(o.ServerCertValidation) {
		return true
	}

	return false
}

// SetServerCertValidation gets a reference to the given string and assigns it to the ServerCertValidation field.
func (o *NotificationRestEndpoint) SetServerCertValidation(v string) {
	o.ServerCertValidation = &v
}

// GetSyncDisabled returns the SyncDisabled field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetSyncDisabled() bool {
	if o == nil || IsNil(o.SyncDisabled) {
		var ret bool
		return ret
	}
	return *o.SyncDisabled
}

// GetSyncDisabledOk returns a tuple with the SyncDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetSyncDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncDisabled) {
		return nil, false
	}
	return o.SyncDisabled, true
}

// HasSyncDisabled returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasSyncDisabled() bool {
	if o != nil && !IsNil(o.SyncDisabled) {
		return true
	}

	return false
}

// SetSyncDisabled gets a reference to the given bool and assigns it to the SyncDisabled field.
func (o *NotificationRestEndpoint) SetSyncDisabled(v bool) {
	o.SyncDisabled = &v
}

// GetTemplateInstance returns the TemplateInstance field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetTemplateInstance() NotificationRestEndpointTemplateInstance {
	if o == nil || IsNil(o.TemplateInstance) {
		var ret NotificationRestEndpointTemplateInstance
		return ret
	}
	return *o.TemplateInstance
}

// GetTemplateInstanceOk returns a tuple with the TemplateInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetTemplateInstanceOk() (*NotificationRestEndpointTemplateInstance, bool) {
	if o == nil || IsNil(o.TemplateInstance) {
		return nil, false
	}
	return o.TemplateInstance, true
}

// HasTemplateInstance returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasTemplateInstance() bool {
	if o != nil && !IsNil(o.TemplateInstance) {
		return true
	}

	return false
}

// SetTemplateInstance gets a reference to the given NotificationRestEndpointTemplateInstance and assigns it to the TemplateInstance field.
func (o *NotificationRestEndpoint) SetTemplateInstance(v NotificationRestEndpointTemplateInstance) {
	o.TemplateInstance = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *NotificationRestEndpoint) SetTimeout(v int64) {
	o.Timeout = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *NotificationRestEndpoint) SetUri(v string) {
	o.Uri = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *NotificationRestEndpoint) SetUsername(v string) {
	o.Username = &v
}

// GetVendorIdentifier returns the VendorIdentifier field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetVendorIdentifier() string {
	if o == nil || IsNil(o.VendorIdentifier) {
		var ret string
		return ret
	}
	return *o.VendorIdentifier
}

// GetVendorIdentifierOk returns a tuple with the VendorIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetVendorIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VendorIdentifier) {
		return nil, false
	}
	return o.VendorIdentifier, true
}

// HasVendorIdentifier returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasVendorIdentifier() bool {
	if o != nil && !IsNil(o.VendorIdentifier) {
		return true
	}

	return false
}

// SetVendorIdentifier gets a reference to the given string and assigns it to the VendorIdentifier field.
func (o *NotificationRestEndpoint) SetVendorIdentifier(v string) {
	o.VendorIdentifier = &v
}

// GetWapiUserName returns the WapiUserName field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetWapiUserName() string {
	if o == nil || IsNil(o.WapiUserName) {
		var ret string
		return ret
	}
	return *o.WapiUserName
}

// GetWapiUserNameOk returns a tuple with the WapiUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetWapiUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.WapiUserName) {
		return nil, false
	}
	return o.WapiUserName, true
}

// HasWapiUserName returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasWapiUserName() bool {
	if o != nil && !IsNil(o.WapiUserName) {
		return true
	}

	return false
}

// SetWapiUserName gets a reference to the given string and assigns it to the WapiUserName field.
func (o *NotificationRestEndpoint) SetWapiUserName(v string) {
	o.WapiUserName = &v
}

// GetWapiUserPassword returns the WapiUserPassword field value if set, zero value otherwise.
func (o *NotificationRestEndpoint) GetWapiUserPassword() string {
	if o == nil || IsNil(o.WapiUserPassword) {
		var ret string
		return ret
	}
	return *o.WapiUserPassword
}

// GetWapiUserPasswordOk returns a tuple with the WapiUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRestEndpoint) GetWapiUserPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.WapiUserPassword) {
		return nil, false
	}
	return o.WapiUserPassword, true
}

// HasWapiUserPassword returns a boolean if a field has been set.
func (o *NotificationRestEndpoint) HasWapiUserPassword() bool {
	if o != nil && !IsNil(o.WapiUserPassword) {
		return true
	}

	return false
}

// SetWapiUserPassword gets a reference to the given string and assigns it to the WapiUserPassword field.
func (o *NotificationRestEndpoint) SetWapiUserPassword(v string) {
	o.WapiUserPassword = &v
}

func (o NotificationRestEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRestEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ClientCertificateSubject) {
		toSerialize["client_certificate_subject"] = o.ClientCertificateSubject
	}
	if !IsNil(o.ClientCertificateToken) {
		toSerialize["client_certificate_token"] = o.ClientCertificateToken
	}
	if !IsNil(o.ClientCertificateValidFrom) {
		toSerialize["client_certificate_valid_from"] = o.ClientCertificateValidFrom
	}
	if !IsNil(o.ClientCertificateValidTo) {
		toSerialize["client_certificate_valid_to"] = o.ClientCertificateValidTo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.LogLevel) {
		toSerialize["log_level"] = o.LogLevel
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OutboundMemberType) {
		toSerialize["outbound_member_type"] = o.OutboundMemberType
	}
	if !IsNil(o.OutboundMembers) {
		toSerialize["outbound_members"] = o.OutboundMembers
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.ServerCertValidation) {
		toSerialize["server_cert_validation"] = o.ServerCertValidation
	}
	if !IsNil(o.SyncDisabled) {
		toSerialize["sync_disabled"] = o.SyncDisabled
	}
	if !IsNil(o.TemplateInstance) {
		toSerialize["template_instance"] = o.TemplateInstance
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.VendorIdentifier) {
		toSerialize["vendor_identifier"] = o.VendorIdentifier
	}
	if !IsNil(o.WapiUserName) {
		toSerialize["wapi_user_name"] = o.WapiUserName
	}
	if !IsNil(o.WapiUserPassword) {
		toSerialize["wapi_user_password"] = o.WapiUserPassword
	}
	return toSerialize, nil
}

type NullableNotificationRestEndpoint struct {
	value *NotificationRestEndpoint
	isSet bool
}

func (v NullableNotificationRestEndpoint) Get() *NotificationRestEndpoint {
	return v.value
}

func (v *NullableNotificationRestEndpoint) Set(val *NotificationRestEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRestEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRestEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRestEndpoint(val *NotificationRestEndpoint) *NullableNotificationRestEndpoint {
	return &NullableNotificationRestEndpoint{value: val, isSet: true}
}

func (v NullableNotificationRestEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRestEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
