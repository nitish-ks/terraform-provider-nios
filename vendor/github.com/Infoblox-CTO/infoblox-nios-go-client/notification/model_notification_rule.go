/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
)

// checks if the NotificationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationRule{}

// NotificationRule struct for NotificationRule
type NotificationRule struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines whether the notification rule is applied on all members or not. When this is set to False, the notification rule is applied only on selected_members.
	AllMembers *bool `json:"all_members,omitempty"`
	// The notification rule descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// Determines whether a notification rule is disabled or not. When this is set to False, the notification rule is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines whether the notification rule for event deduplication is enabled. Note that to enable event deduplication, you must set at least one deduplication field.
	EnableEventDeduplication *bool `json:"enable_event_deduplication,omitempty"`
	// Determines whether the notification rule for the event deduplication syslog is enabled.
	EnableEventDeduplicationLog *bool `json:"enable_event_deduplication_log,omitempty"`
	// The list of fields that must be used in the notification rule for event deduplication.
	EventDeduplicationFields []string `json:"event_deduplication_fields,omitempty"`
	// The lookback period for the notification rule for event deduplication.
	EventDeduplicationLookbackPeriod *int64 `json:"event_deduplication_lookback_period,omitempty"`
	// Event priority.
	EventPriority *string `json:"event_priority,omitempty"`
	// The notification rule event type.
	EventType *string `json:"event_type,omitempty"`
	// The notification rule expression list.
	ExpressionList []NotificationRuleExpressionList `json:"expression_list,omitempty"`
	// The notification rule name.
	Name *string `json:"name,omitempty"`
	// The notification rule action is applied if expression list evaluates to True.
	NotificationAction *string `json:"notification_action,omitempty"`
	// The notification target.
	NotificationTarget *string                          `json:"notification_target,omitempty"`
	PublishSettings    *NotificationRulePublishSettings `json:"publish_settings,omitempty"`
	ScheduledEvent     *NotificationRuleScheduledEvent  `json:"scheduled_event,omitempty"`
	// The list of the members on which the notification rule is applied.
	SelectedMembers  []string                          `json:"selected_members,omitempty"`
	TemplateInstance *NotificationRuleTemplateInstance `json:"template_instance,omitempty"`
	// Use flag for: publish_settings
	UsePublishSettings *bool `json:"use_publish_settings,omitempty"`
}

// NewNotificationRule instantiates a new NotificationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRule() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// NewNotificationRuleWithDefaults instantiates a new NotificationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleWithDefaults() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *NotificationRule) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *NotificationRule) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *NotificationRule) SetRef(v string) {
	o.Ref = &v
}

// GetAllMembers returns the AllMembers field value if set, zero value otherwise.
func (o *NotificationRule) GetAllMembers() bool {
	if o == nil || IsNil(o.AllMembers) {
		var ret bool
		return ret
	}
	return *o.AllMembers
}

// GetAllMembersOk returns a tuple with the AllMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetAllMembersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllMembers) {
		return nil, false
	}
	return o.AllMembers, true
}

// HasAllMembers returns a boolean if a field has been set.
func (o *NotificationRule) HasAllMembers() bool {
	if o != nil && !IsNil(o.AllMembers) {
		return true
	}

	return false
}

// SetAllMembers gets a reference to the given bool and assigns it to the AllMembers field.
func (o *NotificationRule) SetAllMembers(v bool) {
	o.AllMembers = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NotificationRule) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NotificationRule) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NotificationRule) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *NotificationRule) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *NotificationRule) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *NotificationRule) SetDisable(v bool) {
	o.Disable = &v
}

// GetEnableEventDeduplication returns the EnableEventDeduplication field value if set, zero value otherwise.
func (o *NotificationRule) GetEnableEventDeduplication() bool {
	if o == nil || IsNil(o.EnableEventDeduplication) {
		var ret bool
		return ret
	}
	return *o.EnableEventDeduplication
}

// GetEnableEventDeduplicationOk returns a tuple with the EnableEventDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEnableEventDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEventDeduplication) {
		return nil, false
	}
	return o.EnableEventDeduplication, true
}

// HasEnableEventDeduplication returns a boolean if a field has been set.
func (o *NotificationRule) HasEnableEventDeduplication() bool {
	if o != nil && !IsNil(o.EnableEventDeduplication) {
		return true
	}

	return false
}

// SetEnableEventDeduplication gets a reference to the given bool and assigns it to the EnableEventDeduplication field.
func (o *NotificationRule) SetEnableEventDeduplication(v bool) {
	o.EnableEventDeduplication = &v
}

// GetEnableEventDeduplicationLog returns the EnableEventDeduplicationLog field value if set, zero value otherwise.
func (o *NotificationRule) GetEnableEventDeduplicationLog() bool {
	if o == nil || IsNil(o.EnableEventDeduplicationLog) {
		var ret bool
		return ret
	}
	return *o.EnableEventDeduplicationLog
}

// GetEnableEventDeduplicationLogOk returns a tuple with the EnableEventDeduplicationLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEnableEventDeduplicationLogOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEventDeduplicationLog) {
		return nil, false
	}
	return o.EnableEventDeduplicationLog, true
}

// HasEnableEventDeduplicationLog returns a boolean if a field has been set.
func (o *NotificationRule) HasEnableEventDeduplicationLog() bool {
	if o != nil && !IsNil(o.EnableEventDeduplicationLog) {
		return true
	}

	return false
}

// SetEnableEventDeduplicationLog gets a reference to the given bool and assigns it to the EnableEventDeduplicationLog field.
func (o *NotificationRule) SetEnableEventDeduplicationLog(v bool) {
	o.EnableEventDeduplicationLog = &v
}

// GetEventDeduplicationFields returns the EventDeduplicationFields field value if set, zero value otherwise.
func (o *NotificationRule) GetEventDeduplicationFields() []string {
	if o == nil || IsNil(o.EventDeduplicationFields) {
		var ret []string
		return ret
	}
	return o.EventDeduplicationFields
}

// GetEventDeduplicationFieldsOk returns a tuple with the EventDeduplicationFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEventDeduplicationFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.EventDeduplicationFields) {
		return nil, false
	}
	return o.EventDeduplicationFields, true
}

// HasEventDeduplicationFields returns a boolean if a field has been set.
func (o *NotificationRule) HasEventDeduplicationFields() bool {
	if o != nil && !IsNil(o.EventDeduplicationFields) {
		return true
	}

	return false
}

// SetEventDeduplicationFields gets a reference to the given []string and assigns it to the EventDeduplicationFields field.
func (o *NotificationRule) SetEventDeduplicationFields(v []string) {
	o.EventDeduplicationFields = v
}

// GetEventDeduplicationLookbackPeriod returns the EventDeduplicationLookbackPeriod field value if set, zero value otherwise.
func (o *NotificationRule) GetEventDeduplicationLookbackPeriod() int64 {
	if o == nil || IsNil(o.EventDeduplicationLookbackPeriod) {
		var ret int64
		return ret
	}
	return *o.EventDeduplicationLookbackPeriod
}

// GetEventDeduplicationLookbackPeriodOk returns a tuple with the EventDeduplicationLookbackPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEventDeduplicationLookbackPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.EventDeduplicationLookbackPeriod) {
		return nil, false
	}
	return o.EventDeduplicationLookbackPeriod, true
}

// HasEventDeduplicationLookbackPeriod returns a boolean if a field has been set.
func (o *NotificationRule) HasEventDeduplicationLookbackPeriod() bool {
	if o != nil && !IsNil(o.EventDeduplicationLookbackPeriod) {
		return true
	}

	return false
}

// SetEventDeduplicationLookbackPeriod gets a reference to the given int64 and assigns it to the EventDeduplicationLookbackPeriod field.
func (o *NotificationRule) SetEventDeduplicationLookbackPeriod(v int64) {
	o.EventDeduplicationLookbackPeriod = &v
}

// GetEventPriority returns the EventPriority field value if set, zero value otherwise.
func (o *NotificationRule) GetEventPriority() string {
	if o == nil || IsNil(o.EventPriority) {
		var ret string
		return ret
	}
	return *o.EventPriority
}

// GetEventPriorityOk returns a tuple with the EventPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEventPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.EventPriority) {
		return nil, false
	}
	return o.EventPriority, true
}

// HasEventPriority returns a boolean if a field has been set.
func (o *NotificationRule) HasEventPriority() bool {
	if o != nil && !IsNil(o.EventPriority) {
		return true
	}

	return false
}

// SetEventPriority gets a reference to the given string and assigns it to the EventPriority field.
func (o *NotificationRule) SetEventPriority(v string) {
	o.EventPriority = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *NotificationRule) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *NotificationRule) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *NotificationRule) SetEventType(v string) {
	o.EventType = &v
}

// GetExpressionList returns the ExpressionList field value if set, zero value otherwise.
func (o *NotificationRule) GetExpressionList() []NotificationRuleExpressionList {
	if o == nil || IsNil(o.ExpressionList) {
		var ret []NotificationRuleExpressionList
		return ret
	}
	return o.ExpressionList
}

// GetExpressionListOk returns a tuple with the ExpressionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetExpressionListOk() ([]NotificationRuleExpressionList, bool) {
	if o == nil || IsNil(o.ExpressionList) {
		return nil, false
	}
	return o.ExpressionList, true
}

// HasExpressionList returns a boolean if a field has been set.
func (o *NotificationRule) HasExpressionList() bool {
	if o != nil && !IsNil(o.ExpressionList) {
		return true
	}

	return false
}

// SetExpressionList gets a reference to the given []NotificationRuleExpressionList and assigns it to the ExpressionList field.
func (o *NotificationRule) SetExpressionList(v []NotificationRuleExpressionList) {
	o.ExpressionList = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationRule) SetName(v string) {
	o.Name = &v
}

// GetNotificationAction returns the NotificationAction field value if set, zero value otherwise.
func (o *NotificationRule) GetNotificationAction() string {
	if o == nil || IsNil(o.NotificationAction) {
		var ret string
		return ret
	}
	return *o.NotificationAction
}

// GetNotificationActionOk returns a tuple with the NotificationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotificationActionOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationAction) {
		return nil, false
	}
	return o.NotificationAction, true
}

// HasNotificationAction returns a boolean if a field has been set.
func (o *NotificationRule) HasNotificationAction() bool {
	if o != nil && !IsNil(o.NotificationAction) {
		return true
	}

	return false
}

// SetNotificationAction gets a reference to the given string and assigns it to the NotificationAction field.
func (o *NotificationRule) SetNotificationAction(v string) {
	o.NotificationAction = &v
}

// GetNotificationTarget returns the NotificationTarget field value if set, zero value otherwise.
func (o *NotificationRule) GetNotificationTarget() string {
	if o == nil || IsNil(o.NotificationTarget) {
		var ret string
		return ret
	}
	return *o.NotificationTarget
}

// GetNotificationTargetOk returns a tuple with the NotificationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotificationTargetOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationTarget) {
		return nil, false
	}
	return o.NotificationTarget, true
}

// HasNotificationTarget returns a boolean if a field has been set.
func (o *NotificationRule) HasNotificationTarget() bool {
	if o != nil && !IsNil(o.NotificationTarget) {
		return true
	}

	return false
}

// SetNotificationTarget gets a reference to the given string and assigns it to the NotificationTarget field.
func (o *NotificationRule) SetNotificationTarget(v string) {
	o.NotificationTarget = &v
}

// GetPublishSettings returns the PublishSettings field value if set, zero value otherwise.
func (o *NotificationRule) GetPublishSettings() NotificationRulePublishSettings {
	if o == nil || IsNil(o.PublishSettings) {
		var ret NotificationRulePublishSettings
		return ret
	}
	return *o.PublishSettings
}

// GetPublishSettingsOk returns a tuple with the PublishSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetPublishSettingsOk() (*NotificationRulePublishSettings, bool) {
	if o == nil || IsNil(o.PublishSettings) {
		return nil, false
	}
	return o.PublishSettings, true
}

// HasPublishSettings returns a boolean if a field has been set.
func (o *NotificationRule) HasPublishSettings() bool {
	if o != nil && !IsNil(o.PublishSettings) {
		return true
	}

	return false
}

// SetPublishSettings gets a reference to the given NotificationRulePublishSettings and assigns it to the PublishSettings field.
func (o *NotificationRule) SetPublishSettings(v NotificationRulePublishSettings) {
	o.PublishSettings = &v
}

// GetScheduledEvent returns the ScheduledEvent field value if set, zero value otherwise.
func (o *NotificationRule) GetScheduledEvent() NotificationRuleScheduledEvent {
	if o == nil || IsNil(o.ScheduledEvent) {
		var ret NotificationRuleScheduledEvent
		return ret
	}
	return *o.ScheduledEvent
}

// GetScheduledEventOk returns a tuple with the ScheduledEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScheduledEventOk() (*NotificationRuleScheduledEvent, bool) {
	if o == nil || IsNil(o.ScheduledEvent) {
		return nil, false
	}
	return o.ScheduledEvent, true
}

// HasScheduledEvent returns a boolean if a field has been set.
func (o *NotificationRule) HasScheduledEvent() bool {
	if o != nil && !IsNil(o.ScheduledEvent) {
		return true
	}

	return false
}

// SetScheduledEvent gets a reference to the given NotificationRuleScheduledEvent and assigns it to the ScheduledEvent field.
func (o *NotificationRule) SetScheduledEvent(v NotificationRuleScheduledEvent) {
	o.ScheduledEvent = &v
}

// GetSelectedMembers returns the SelectedMembers field value if set, zero value otherwise.
func (o *NotificationRule) GetSelectedMembers() []string {
	if o == nil || IsNil(o.SelectedMembers) {
		var ret []string
		return ret
	}
	return o.SelectedMembers
}

// GetSelectedMembersOk returns a tuple with the SelectedMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetSelectedMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.SelectedMembers) {
		return nil, false
	}
	return o.SelectedMembers, true
}

// HasSelectedMembers returns a boolean if a field has been set.
func (o *NotificationRule) HasSelectedMembers() bool {
	if o != nil && !IsNil(o.SelectedMembers) {
		return true
	}

	return false
}

// SetSelectedMembers gets a reference to the given []string and assigns it to the SelectedMembers field.
func (o *NotificationRule) SetSelectedMembers(v []string) {
	o.SelectedMembers = v
}

// GetTemplateInstance returns the TemplateInstance field value if set, zero value otherwise.
func (o *NotificationRule) GetTemplateInstance() NotificationRuleTemplateInstance {
	if o == nil || IsNil(o.TemplateInstance) {
		var ret NotificationRuleTemplateInstance
		return ret
	}
	return *o.TemplateInstance
}

// GetTemplateInstanceOk returns a tuple with the TemplateInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTemplateInstanceOk() (*NotificationRuleTemplateInstance, bool) {
	if o == nil || IsNil(o.TemplateInstance) {
		return nil, false
	}
	return o.TemplateInstance, true
}

// HasTemplateInstance returns a boolean if a field has been set.
func (o *NotificationRule) HasTemplateInstance() bool {
	if o != nil && !IsNil(o.TemplateInstance) {
		return true
	}

	return false
}

// SetTemplateInstance gets a reference to the given NotificationRuleTemplateInstance and assigns it to the TemplateInstance field.
func (o *NotificationRule) SetTemplateInstance(v NotificationRuleTemplateInstance) {
	o.TemplateInstance = &v
}

// GetUsePublishSettings returns the UsePublishSettings field value if set, zero value otherwise.
func (o *NotificationRule) GetUsePublishSettings() bool {
	if o == nil || IsNil(o.UsePublishSettings) {
		var ret bool
		return ret
	}
	return *o.UsePublishSettings
}

// GetUsePublishSettingsOk returns a tuple with the UsePublishSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetUsePublishSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePublishSettings) {
		return nil, false
	}
	return o.UsePublishSettings, true
}

// HasUsePublishSettings returns a boolean if a field has been set.
func (o *NotificationRule) HasUsePublishSettings() bool {
	if o != nil && !IsNil(o.UsePublishSettings) {
		return true
	}

	return false
}

// SetUsePublishSettings gets a reference to the given bool and assigns it to the UsePublishSettings field.
func (o *NotificationRule) SetUsePublishSettings(v bool) {
	o.UsePublishSettings = &v
}

func (o NotificationRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AllMembers) {
		toSerialize["all_members"] = o.AllMembers
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.EnableEventDeduplication) {
		toSerialize["enable_event_deduplication"] = o.EnableEventDeduplication
	}
	if !IsNil(o.EnableEventDeduplicationLog) {
		toSerialize["enable_event_deduplication_log"] = o.EnableEventDeduplicationLog
	}
	if !IsNil(o.EventDeduplicationFields) {
		toSerialize["event_deduplication_fields"] = o.EventDeduplicationFields
	}
	if !IsNil(o.EventDeduplicationLookbackPeriod) {
		toSerialize["event_deduplication_lookback_period"] = o.EventDeduplicationLookbackPeriod
	}
	if !IsNil(o.EventPriority) {
		toSerialize["event_priority"] = o.EventPriority
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.ExpressionList) {
		toSerialize["expression_list"] = o.ExpressionList
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotificationAction) {
		toSerialize["notification_action"] = o.NotificationAction
	}
	if !IsNil(o.NotificationTarget) {
		toSerialize["notification_target"] = o.NotificationTarget
	}
	if !IsNil(o.PublishSettings) {
		toSerialize["publish_settings"] = o.PublishSettings
	}
	if !IsNil(o.ScheduledEvent) {
		toSerialize["scheduled_event"] = o.ScheduledEvent
	}
	if !IsNil(o.SelectedMembers) {
		toSerialize["selected_members"] = o.SelectedMembers
	}
	if !IsNil(o.TemplateInstance) {
		toSerialize["template_instance"] = o.TemplateInstance
	}
	if !IsNil(o.UsePublishSettings) {
		toSerialize["use_publish_settings"] = o.UsePublishSettings
	}
	return toSerialize, nil
}

type NullableNotificationRule struct {
	value *NotificationRule
	isSet bool
}

func (v NullableNotificationRule) Get() *NotificationRule {
	return v.value
}

func (v *NullableNotificationRule) Set(val *NotificationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRule(val *NotificationRule) *NullableNotificationRule {
	return &NullableNotificationRule{value: val, isSet: true}
}

func (v NullableNotificationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
