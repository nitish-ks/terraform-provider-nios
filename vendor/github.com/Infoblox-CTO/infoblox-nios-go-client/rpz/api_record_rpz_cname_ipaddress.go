/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordRpzCnameIpaddressAPI interface {
	/*
		Create Create a record:rpz:cname:ipaddress object

		Creates a new record:rpz:cname:ipaddress object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameIpaddressAPICreateRequest
	*/
	Create(ctx context.Context) RecordRpzCnameIpaddressAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateRecordRpzCnameIpaddressResponse
	CreateExecute(r RecordRpzCnameIpaddressAPICreateRequest) (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		Delete Delete a record:rpz:cname:ipaddress object

		Deletes a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r RecordRpzCnameIpaddressAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve record:rpz:cname:ipaddress objects

		Returns a list of record:rpz:cname:ipaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameIpaddressAPIListRequest
	*/
	List(ctx context.Context) RecordRpzCnameIpaddressAPIListRequest

	// ListExecute executes the request
	//  @return ListRecordRpzCnameIpaddressResponse
	ListExecute(r RecordRpzCnameIpaddressAPIListRequest) (*ListRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		Read Get a specific record:rpz:cname:ipaddress object

		Returns a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIReadRequest
	*/
	Read(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIReadRequest

	// ReadExecute executes the request
	//  @return GetRecordRpzCnameIpaddressResponse
	ReadExecute(r RecordRpzCnameIpaddressAPIReadRequest) (*GetRecordRpzCnameIpaddressResponse, *http.Response, error)
	/*
		Update Update a record:rpz:cname:ipaddress object

		Updates a specific record:rpz:cname:ipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:ipaddress object
		@return RecordRpzCnameIpaddressAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateRecordRpzCnameIpaddressResponse
	UpdateExecute(r RecordRpzCnameIpaddressAPIUpdateRequest) (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error)
}

// RecordRpzCnameIpaddressAPIService RecordRpzCnameIpaddressAPI service
type RecordRpzCnameIpaddressAPIService internal.Service

type RecordRpzCnameIpaddressAPICreateRequest struct {
	ctx                     context.Context
	ApiService              RecordRpzCnameIpaddressAPI
	recordRpzCnameIpaddress *RecordRpzCnameIpaddress
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to create
func (r RecordRpzCnameIpaddressAPICreateRequest) RecordRpzCnameIpaddress(recordRpzCnameIpaddress RecordRpzCnameIpaddress) RecordRpzCnameIpaddressAPICreateRequest {
	r.recordRpzCnameIpaddress = &recordRpzCnameIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPICreateRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameIpaddressAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPICreateRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPICreateRequest) Execute() (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a record:rpz:cname:ipaddress object

Creates a new record:rpz:cname:ipaddress object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameIpaddressAPICreateRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) Create(ctx context.Context) RecordRpzCnameIpaddressAPICreateRequest {
	return RecordRpzCnameIpaddressAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) CreateExecute(r RecordRpzCnameIpaddressAPICreateRequest) (*CreateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameIpaddress != nil {
		if r.recordRpzCnameIpaddress.ExtAttrs == nil {
			r.recordRpzCnameIpaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameIpaddress.ExtAttrs)[k]; !ok {
				(*r.recordRpzCnameIpaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzCnameIpaddressAPI
	reference  string
}

func (r RecordRpzCnameIpaddressAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a record:rpz:cname:ipaddress object

Deletes a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIDeleteRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) Delete(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIDeleteRequest {
	return RecordRpzCnameIpaddressAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzCnameIpaddressAPIService) DeleteExecute(r RecordRpzCnameIpaddressAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIListRequest struct {
	ctx              context.Context
	ApiService       RecordRpzCnameIpaddressAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIListRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameIpaddressAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzCnameIpaddressAPIListRequest) MaxResults(maxResults int32) RecordRpzCnameIpaddressAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIListRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzCnameIpaddressAPIListRequest) Paging(paging int32) RecordRpzCnameIpaddressAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzCnameIpaddressAPIListRequest) PageId(pageId string) RecordRpzCnameIpaddressAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzCnameIpaddressAPIListRequest) Filters(filters map[string]interface{}) RecordRpzCnameIpaddressAPIListRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzCnameIpaddressAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzCnameIpaddressAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzCnameIpaddressAPIListRequest) Execute() (*ListRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve record:rpz:cname:ipaddress objects

Returns a list of record:rpz:cname:ipaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameIpaddressAPIListRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) List(ctx context.Context) RecordRpzCnameIpaddressAPIListRequest {
	return RecordRpzCnameIpaddressAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) ListExecute(r RecordRpzCnameIpaddressAPIListRequest) (*ListRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIReadRequest struct {
	ctx              context.Context
	ApiService       RecordRpzCnameIpaddressAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIReadRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameIpaddressAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIReadRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPIReadRequest) Execute() (*GetRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific record:rpz:cname:ipaddress object

Returns a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIReadRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) Read(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIReadRequest {
	return RecordRpzCnameIpaddressAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) ReadExecute(r RecordRpzCnameIpaddressAPIReadRequest) (*GetRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameIpaddressAPIUpdateRequest struct {
	ctx                     context.Context
	ApiService              RecordRpzCnameIpaddressAPI
	reference               string
	recordRpzCnameIpaddress *RecordRpzCnameIpaddress
	returnFields            *string
	returnFieldsPlus        *string
	returnAsObject          *int32
}

// Object data to update
func (r RecordRpzCnameIpaddressAPIUpdateRequest) RecordRpzCnameIpaddress(recordRpzCnameIpaddress RecordRpzCnameIpaddress) RecordRpzCnameIpaddressAPIUpdateRequest {
	r.recordRpzCnameIpaddress = &recordRpzCnameIpaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameIpaddressAPIUpdateRequest) ReturnFields(returnFields string) RecordRpzCnameIpaddressAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameIpaddressAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameIpaddressAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameIpaddressAPIUpdateRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameIpaddressAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameIpaddressAPIUpdateRequest) Execute() (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a record:rpz:cname:ipaddress object

Updates a specific record:rpz:cname:ipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:ipaddress object
	@return RecordRpzCnameIpaddressAPIUpdateRequest
*/
func (a *RecordRpzCnameIpaddressAPIService) Update(ctx context.Context, reference string) RecordRpzCnameIpaddressAPIUpdateRequest {
	return RecordRpzCnameIpaddressAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzCnameIpaddressResponse
func (a *RecordRpzCnameIpaddressAPIService) UpdateExecute(r RecordRpzCnameIpaddressAPIUpdateRequest) (*UpdateRecordRpzCnameIpaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzCnameIpaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameIpaddressAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:ipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameIpaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameIpaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameIpaddress != nil {
		if r.recordRpzCnameIpaddress.ExtAttrs == nil {
			r.recordRpzCnameIpaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameIpaddress.ExtAttrs)[k]; !ok {
				(*r.recordRpzCnameIpaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameIpaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
