/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RecordrpzcnameclientipaddressdnAPI interface {
	/*
		Get Retrieve record:rpz:cname:clientipaddressdn objects

		Returns a list of record:rpz:cname:clientipaddressdn objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordrpzcnameclientipaddressdnAPIGetRequest
	*/
	Get(ctx context.Context) RecordrpzcnameclientipaddressdnAPIGetRequest

	// GetExecute executes the request
	//  @return ListRecordRpzCnameClientipaddressdnResponse
	GetExecute(r RecordrpzcnameclientipaddressdnAPIGetRequest) (*ListRecordRpzCnameClientipaddressdnResponse, *http.Response, error)
	/*
		Post Create a record:rpz:cname:clientipaddressdn object

		Creates a new record:rpz:cname:clientipaddressdn object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordrpzcnameclientipaddressdnAPIPostRequest
	*/
	Post(ctx context.Context) RecordrpzcnameclientipaddressdnAPIPostRequest

	// PostExecute executes the request
	//  @return CreateRecordRpzCnameClientipaddressdnResponse
	PostExecute(r RecordrpzcnameclientipaddressdnAPIPostRequest) (*CreateRecordRpzCnameClientipaddressdnResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a record:rpz:cname:clientipaddressdn object

		Deletes a specific record:rpz:cname:clientipaddressdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddressdn object
		@return RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific record:rpz:cname:clientipaddressdn object

		Returns a specific record:rpz:cname:clientipaddressdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddressdn object
		@return RecordrpzcnameclientipaddressdnAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetRecordRpzCnameClientipaddressdnResponse
	ReferenceGetExecute(r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) (*GetRecordRpzCnameClientipaddressdnResponse, *http.Response, error)
	/*
		ReferencePut Update a record:rpz:cname:clientipaddressdn object

		Updates a specific record:rpz:cname:clientipaddressdn object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddressdn object
		@return RecordrpzcnameclientipaddressdnAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateRecordRpzCnameClientipaddressdnResponse
	ReferencePutExecute(r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) (*UpdateRecordRpzCnameClientipaddressdnResponse, *http.Response, error)
}

// RecordrpzcnameclientipaddressdnAPIService RecordrpzcnameclientipaddressdnAPI service
type RecordrpzcnameclientipaddressdnAPIService internal.Service

type RecordrpzcnameclientipaddressdnAPIGetRequest struct {
	ctx            context.Context
	ApiService     RecordrpzcnameclientipaddressdnAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) ReturnFields(returnFields string) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) ReturnFields2(returnFields2 string) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) MaxResults(maxResults int32) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) ReturnAsObject(returnAsObject int32) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) Paging(paging int32) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordrpzcnameclientipaddressdnAPIGetRequest) PageId(pageId string) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIGetRequest) Filters(filters map[string]interface{}) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.filters = &filters
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordrpzcnameclientipaddressdnAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIGetRequest) Execute() (*ListRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve record:rpz:cname:clientipaddressdn objects

Returns a list of record:rpz:cname:clientipaddressdn objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordrpzcnameclientipaddressdnAPIGetRequest
*/
func (a *RecordrpzcnameclientipaddressdnAPIService) Get(ctx context.Context) RecordrpzcnameclientipaddressdnAPIGetRequest {
	return RecordrpzcnameclientipaddressdnAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzCnameClientipaddressdnResponse
func (a *RecordrpzcnameclientipaddressdnAPIService) GetExecute(r RecordrpzcnameclientipaddressdnAPIGetRequest) (*ListRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzCnameClientipaddressdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordrpzcnameclientipaddressdnAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddressdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordrpzcnameclientipaddressdnAPIPostRequest struct {
	ctx                             context.Context
	ApiService                      RecordrpzcnameclientipaddressdnAPI
	recordRpzCnameClientipaddressdn *RecordRpzCnameClientipaddressdn
	returnFields                    *string
	returnFields2                   *string
	returnAsObject                  *int32
}

// Object data to create
func (r RecordrpzcnameclientipaddressdnAPIPostRequest) RecordRpzCnameClientipaddressdn(recordRpzCnameClientipaddressdn RecordRpzCnameClientipaddressdn) RecordrpzcnameclientipaddressdnAPIPostRequest {
	r.recordRpzCnameClientipaddressdn = &recordRpzCnameClientipaddressdn
	return r
}

// Enter the field names followed by comma
func (r RecordrpzcnameclientipaddressdnAPIPostRequest) ReturnFields(returnFields string) RecordrpzcnameclientipaddressdnAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordrpzcnameclientipaddressdnAPIPostRequest) ReturnFields2(returnFields2 string) RecordrpzcnameclientipaddressdnAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordrpzcnameclientipaddressdnAPIPostRequest) ReturnAsObject(returnAsObject int32) RecordrpzcnameclientipaddressdnAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIPostRequest) Execute() (*CreateRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a record:rpz:cname:clientipaddressdn object

Creates a new record:rpz:cname:clientipaddressdn object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordrpzcnameclientipaddressdnAPIPostRequest
*/
func (a *RecordrpzcnameclientipaddressdnAPIService) Post(ctx context.Context) RecordrpzcnameclientipaddressdnAPIPostRequest {
	return RecordrpzcnameclientipaddressdnAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzCnameClientipaddressdnResponse
func (a *RecordrpzcnameclientipaddressdnAPIService) PostExecute(r RecordrpzcnameclientipaddressdnAPIPostRequest) (*CreateRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzCnameClientipaddressdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordrpzcnameclientipaddressdnAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddressdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameClientipaddressdn == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameClientipaddressdn is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameClientipaddressdn != nil {
		if r.recordRpzCnameClientipaddressdn.Extattrs == nil {
			r.recordRpzCnameClientipaddressdn.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameClientipaddressdn.Extattrs)[k]; !ok {
				(*r.recordRpzCnameClientipaddressdn.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameClientipaddressdn
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RecordrpzcnameclientipaddressdnAPI
	reference  string
}

func (r RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a record:rpz:cname:clientipaddressdn object

Deletes a specific record:rpz:cname:clientipaddressdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddressdn object
	@return RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest
*/
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferenceDelete(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest {
	return RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferenceDeleteExecute(r RecordrpzcnameclientipaddressdnAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordrpzcnameclientipaddressdnAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddressdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordrpzcnameclientipaddressdnAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RecordrpzcnameclientipaddressdnAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) ReturnFields(returnFields string) RecordrpzcnameclientipaddressdnAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) ReturnFields2(returnFields2 string) RecordrpzcnameclientipaddressdnAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) RecordrpzcnameclientipaddressdnAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) Execute() (*GetRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific record:rpz:cname:clientipaddressdn object

Returns a specific record:rpz:cname:clientipaddressdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddressdn object
	@return RecordrpzcnameclientipaddressdnAPIReferenceGetRequest
*/
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferenceGet(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferenceGetRequest {
	return RecordrpzcnameclientipaddressdnAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzCnameClientipaddressdnResponse
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferenceGetExecute(r RecordrpzcnameclientipaddressdnAPIReferenceGetRequest) (*GetRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzCnameClientipaddressdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordrpzcnameclientipaddressdnAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddressdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordrpzcnameclientipaddressdnAPIReferencePutRequest struct {
	ctx                             context.Context
	ApiService                      RecordrpzcnameclientipaddressdnAPI
	reference                       string
	recordRpzCnameClientipaddressdn *RecordRpzCnameClientipaddressdn
	returnFields                    *string
	returnFields2                   *string
	returnAsObject                  *int32
}

// Object data to update
func (r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) RecordRpzCnameClientipaddressdn(recordRpzCnameClientipaddressdn RecordRpzCnameClientipaddressdn) RecordrpzcnameclientipaddressdnAPIReferencePutRequest {
	r.recordRpzCnameClientipaddressdn = &recordRpzCnameClientipaddressdn
	return r
}

// Enter the field names followed by comma
func (r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) ReturnFields(returnFields string) RecordrpzcnameclientipaddressdnAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) ReturnFields2(returnFields2 string) RecordrpzcnameclientipaddressdnAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) RecordrpzcnameclientipaddressdnAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) Execute() (*UpdateRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a record:rpz:cname:clientipaddressdn object

Updates a specific record:rpz:cname:clientipaddressdn object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddressdn object
	@return RecordrpzcnameclientipaddressdnAPIReferencePutRequest
*/
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferencePut(ctx context.Context, reference string) RecordrpzcnameclientipaddressdnAPIReferencePutRequest {
	return RecordrpzcnameclientipaddressdnAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzCnameClientipaddressdnResponse
func (a *RecordrpzcnameclientipaddressdnAPIService) ReferencePutExecute(r RecordrpzcnameclientipaddressdnAPIReferencePutRequest) (*UpdateRecordRpzCnameClientipaddressdnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzCnameClientipaddressdnResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordrpzcnameclientipaddressdnAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddressdn/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameClientipaddressdn == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameClientipaddressdn is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameClientipaddressdn != nil {
		if r.recordRpzCnameClientipaddressdn.Extattrs == nil {
			r.recordRpzCnameClientipaddressdn.Extattrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameClientipaddressdn.Extattrs)[k]; !ok {
				(*r.recordRpzCnameClientipaddressdn.Extattrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameClientipaddressdn
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
