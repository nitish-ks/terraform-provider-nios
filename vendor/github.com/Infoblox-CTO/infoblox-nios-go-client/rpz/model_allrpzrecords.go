/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
)

// checks if the Allrpzrecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allrpzrecords{}

// Allrpzrecords struct for Allrpzrecords
type Allrpzrecords struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The alert type of the record associated with the allrpzrecords object.
	AlertType *string `json:"alert_type,omitempty"`
	// The descriptive comment of the record associated with the allrpzrecords object.
	Comment *string `json:"comment,omitempty"`
	// The disable flag of the record associated with the allrpzrecords object (if present).
	Disable *bool `json:"disable,omitempty"`
	// The expiration time of the record associated with the allrpzrecords object.
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	// The time when the record associated with the allrpzrecords object was last updated.
	LastUpdated *int64 `json:"last_updated,omitempty"`
	// The name of the record associated with the allrpzrecords object. Note that this value might be different than the value of the name field for the associated record.
	Name *string `json:"name,omitempty"`
	// The record object associated with the allrpzrecords object.
	Record *string `json:"record,omitempty"`
	// The RPZ rule type of the record associated with the allrpzrecrods object.
	RpzRule *string `json:"rpz_rule,omitempty"`
	// The TTL value of the record associated with the allrpzrecords object (if present).
	Ttl *int64 `json:"ttl,omitempty"`
	// The type of record associated with the allrpzrecords object. This is a descriptive string that identifies the record to which this allrpzrecords object refers. (Examples: 'record:rpz:a', 'record:rpz:mx', etc.)
	Type *string `json:"type,omitempty"`
	// The DNS view name of the record associated with the allrpzrecords object.
	View *string `json:"view,omitempty"`
	// The Response Policy Zone name of the record associated with the allrpzrecords object.
	Zone *string `json:"zone,omitempty"`
}

// NewAllrpzrecords instantiates a new Allrpzrecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllrpzrecords() *Allrpzrecords {
	this := Allrpzrecords{}
	return &this
}

// NewAllrpzrecordsWithDefaults instantiates a new Allrpzrecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllrpzrecordsWithDefaults() *Allrpzrecords {
	this := Allrpzrecords{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Allrpzrecords) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Allrpzrecords) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Allrpzrecords) SetRef(v string) {
	o.Ref = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *Allrpzrecords) GetAlertType() string {
	if o == nil || IsNil(o.AlertType) {
		var ret string
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetAlertTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *Allrpzrecords) HasAlertType() bool {
	if o != nil && !IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given string and assigns it to the AlertType field.
func (o *Allrpzrecords) SetAlertType(v string) {
	o.AlertType = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Allrpzrecords) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Allrpzrecords) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Allrpzrecords) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Allrpzrecords) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Allrpzrecords) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Allrpzrecords) SetDisable(v bool) {
	o.Disable = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *Allrpzrecords) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *Allrpzrecords) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *Allrpzrecords) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Allrpzrecords) GetLastUpdated() int64 {
	if o == nil || IsNil(o.LastUpdated) {
		var ret int64
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetLastUpdatedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Allrpzrecords) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given int64 and assigns it to the LastUpdated field.
func (o *Allrpzrecords) SetLastUpdated(v int64) {
	o.LastUpdated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Allrpzrecords) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Allrpzrecords) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Allrpzrecords) SetName(v string) {
	o.Name = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *Allrpzrecords) GetRecord() string {
	if o == nil || IsNil(o.Record) {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetRecordOk() (*string, bool) {
	if o == nil || IsNil(o.Record) {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *Allrpzrecords) HasRecord() bool {
	if o != nil && !IsNil(o.Record) {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *Allrpzrecords) SetRecord(v string) {
	o.Record = &v
}

// GetRpzRule returns the RpzRule field value if set, zero value otherwise.
func (o *Allrpzrecords) GetRpzRule() string {
	if o == nil || IsNil(o.RpzRule) {
		var ret string
		return ret
	}
	return *o.RpzRule
}

// GetRpzRuleOk returns a tuple with the RpzRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetRpzRuleOk() (*string, bool) {
	if o == nil || IsNil(o.RpzRule) {
		return nil, false
	}
	return o.RpzRule, true
}

// HasRpzRule returns a boolean if a field has been set.
func (o *Allrpzrecords) HasRpzRule() bool {
	if o != nil && !IsNil(o.RpzRule) {
		return true
	}

	return false
}

// SetRpzRule gets a reference to the given string and assigns it to the RpzRule field.
func (o *Allrpzrecords) SetRpzRule(v string) {
	o.RpzRule = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Allrpzrecords) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Allrpzrecords) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *Allrpzrecords) SetTtl(v int64) {
	o.Ttl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Allrpzrecords) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Allrpzrecords) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Allrpzrecords) SetType(v string) {
	o.Type = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Allrpzrecords) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Allrpzrecords) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *Allrpzrecords) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *Allrpzrecords) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allrpzrecords) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *Allrpzrecords) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *Allrpzrecords) SetZone(v string) {
	o.Zone = &v
}

func (o Allrpzrecords) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allrpzrecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AlertType) {
		toSerialize["alert_type"] = o.AlertType
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Record) {
		toSerialize["record"] = o.Record
	}
	if !IsNil(o.RpzRule) {
		toSerialize["rpz_rule"] = o.RpzRule
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableAllrpzrecords struct {
	value *Allrpzrecords
	isSet bool
}

func (v NullableAllrpzrecords) Get() *Allrpzrecords {
	return v.value
}

func (v *NullableAllrpzrecords) Set(val *Allrpzrecords) {
	v.value = val
	v.isSet = true
}

func (v NullableAllrpzrecords) IsSet() bool {
	return v.isSet
}

func (v *NullableAllrpzrecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllrpzrecords(val *Allrpzrecords) *NullableAllrpzrecords {
	return &NullableAllrpzrecords{value: val, isSet: true}
}

func (v NullableAllrpzrecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllrpzrecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
