/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// CreateAllrpzrecordsResponse - struct for CreateAllrpzrecordsResponse
type CreateAllrpzrecordsResponse struct {
	CreateAllrpzrecordsResponseAsObject *CreateAllrpzrecordsResponseAsObject
	String                              *string
}

// CreateAllrpzrecordsResponseAsObjectAsCreateAllrpzrecordsResponse is a convenience function that returns CreateAllrpzrecordsResponseAsObject wrapped in CreateAllrpzrecordsResponse
func CreateAllrpzrecordsResponseAsObjectAsCreateAllrpzrecordsResponse(v *CreateAllrpzrecordsResponseAsObject) CreateAllrpzrecordsResponse {
	return CreateAllrpzrecordsResponse{
		CreateAllrpzrecordsResponseAsObject: v,
	}
}

// stringAsCreateAllrpzrecordsResponse is a convenience function that returns string wrapped in CreateAllrpzrecordsResponse
func StringAsCreateAllrpzrecordsResponse(v *string) CreateAllrpzrecordsResponse {
	return CreateAllrpzrecordsResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAllrpzrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateAllrpzrecordsResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateAllrpzrecordsResponseAsObject)
	if err == nil {
		jsonCreateAllrpzrecordsResponseAsObject, _ := json.Marshal(dst.CreateAllrpzrecordsResponseAsObject)
		if string(jsonCreateAllrpzrecordsResponseAsObject) == "{}" { // empty struct
			dst.CreateAllrpzrecordsResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateAllrpzrecordsResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateAllrpzrecordsResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateAllrpzrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateAllrpzrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.CreateAllrpzrecordsResponseAsObject != nil {
		return json.Marshal(&src.CreateAllrpzrecordsResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAllrpzrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateAllrpzrecordsResponseAsObject != nil {
		return obj.CreateAllrpzrecordsResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateAllrpzrecordsResponse struct {
	value *CreateAllrpzrecordsResponse
	isSet bool
}

func (v NullableCreateAllrpzrecordsResponse) Get() *CreateAllrpzrecordsResponse {
	return v.value
}

func (v *NullableCreateAllrpzrecordsResponse) Set(val *CreateAllrpzrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAllrpzrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAllrpzrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAllrpzrecordsResponse(val *CreateAllrpzrecordsResponse) *NullableCreateAllrpzrecordsResponse {
	return &NullableCreateAllrpzrecordsResponse{value: val, isSet: true}
}

func (v NullableCreateAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAllrpzrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
