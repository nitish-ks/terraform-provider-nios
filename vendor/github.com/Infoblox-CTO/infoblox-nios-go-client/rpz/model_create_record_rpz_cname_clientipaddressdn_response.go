/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// CreateRecordRpzCnameClientipaddressdnResponse - struct for CreateRecordRpzCnameClientipaddressdnResponse
type CreateRecordRpzCnameClientipaddressdnResponse struct {
	CreateRecordRpzCnameClientipaddressdnResponseAsObject *CreateRecordRpzCnameClientipaddressdnResponseAsObject
	String                                                *string
}

// CreateRecordRpzCnameClientipaddressdnResponseAsObjectAsCreateRecordRpzCnameClientipaddressdnResponse is a convenience function that returns CreateRecordRpzCnameClientipaddressdnResponseAsObject wrapped in CreateRecordRpzCnameClientipaddressdnResponse
func CreateRecordRpzCnameClientipaddressdnResponseAsObjectAsCreateRecordRpzCnameClientipaddressdnResponse(v *CreateRecordRpzCnameClientipaddressdnResponseAsObject) CreateRecordRpzCnameClientipaddressdnResponse {
	return CreateRecordRpzCnameClientipaddressdnResponse{
		CreateRecordRpzCnameClientipaddressdnResponseAsObject: v,
	}
}

// stringAsCreateRecordRpzCnameClientipaddressdnResponse is a convenience function that returns string wrapped in CreateRecordRpzCnameClientipaddressdnResponse
func StringAsCreateRecordRpzCnameClientipaddressdnResponse(v *string) CreateRecordRpzCnameClientipaddressdnResponse {
	return CreateRecordRpzCnameClientipaddressdnResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRecordRpzCnameClientipaddressdnResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRecordRpzCnameClientipaddressdnResponseAsObject)
	if err == nil {
		jsonCreateRecordRpzCnameClientipaddressdnResponseAsObject, _ := json.Marshal(dst.CreateRecordRpzCnameClientipaddressdnResponseAsObject)
		if string(jsonCreateRecordRpzCnameClientipaddressdnResponseAsObject) == "{}" { // empty struct
			dst.CreateRecordRpzCnameClientipaddressdnResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRecordRpzCnameClientipaddressdnResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRecordRpzCnameClientipaddressdnResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRecordRpzCnameClientipaddressdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRecordRpzCnameClientipaddressdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRecordRpzCnameClientipaddressdnResponseAsObject != nil {
		return json.Marshal(&src.CreateRecordRpzCnameClientipaddressdnResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRecordRpzCnameClientipaddressdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRecordRpzCnameClientipaddressdnResponseAsObject != nil {
		return obj.CreateRecordRpzCnameClientipaddressdnResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRecordRpzCnameClientipaddressdnResponse struct {
	value *CreateRecordRpzCnameClientipaddressdnResponse
	isSet bool
}

func (v NullableCreateRecordRpzCnameClientipaddressdnResponse) Get() *CreateRecordRpzCnameClientipaddressdnResponse {
	return v.value
}

func (v *NullableCreateRecordRpzCnameClientipaddressdnResponse) Set(val *CreateRecordRpzCnameClientipaddressdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordRpzCnameClientipaddressdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordRpzCnameClientipaddressdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordRpzCnameClientipaddressdnResponse(val *CreateRecordRpzCnameClientipaddressdnResponse) *NullableCreateRecordRpzCnameClientipaddressdnResponse {
	return &NullableCreateRecordRpzCnameClientipaddressdnResponse{value: val, isSet: true}
}

func (v NullableCreateRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
