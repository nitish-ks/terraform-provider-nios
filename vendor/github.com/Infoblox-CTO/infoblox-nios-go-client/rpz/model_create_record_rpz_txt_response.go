/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// CreateRecordRpzTxtResponse - struct for CreateRecordRpzTxtResponse
type CreateRecordRpzTxtResponse struct {
	CreateRecordRpzTxtResponseAsObject *CreateRecordRpzTxtResponseAsObject
	String                             *string
}

// CreateRecordRpzTxtResponseAsObjectAsCreateRecordRpzTxtResponse is a convenience function that returns CreateRecordRpzTxtResponseAsObject wrapped in CreateRecordRpzTxtResponse
func CreateRecordRpzTxtResponseAsObjectAsCreateRecordRpzTxtResponse(v *CreateRecordRpzTxtResponseAsObject) CreateRecordRpzTxtResponse {
	return CreateRecordRpzTxtResponse{
		CreateRecordRpzTxtResponseAsObject: v,
	}
}

// stringAsCreateRecordRpzTxtResponse is a convenience function that returns string wrapped in CreateRecordRpzTxtResponse
func StringAsCreateRecordRpzTxtResponse(v *string) CreateRecordRpzTxtResponse {
	return CreateRecordRpzTxtResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRecordRpzTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRecordRpzTxtResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateRecordRpzTxtResponseAsObject)
	if err == nil {
		jsonCreateRecordRpzTxtResponseAsObject, _ := json.Marshal(dst.CreateRecordRpzTxtResponseAsObject)
		if string(jsonCreateRecordRpzTxtResponseAsObject) == "{}" { // empty struct
			dst.CreateRecordRpzTxtResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateRecordRpzTxtResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRecordRpzTxtResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRecordRpzTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRecordRpzTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	if src.CreateRecordRpzTxtResponseAsObject != nil {
		return json.Marshal(&src.CreateRecordRpzTxtResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRecordRpzTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRecordRpzTxtResponseAsObject != nil {
		return obj.CreateRecordRpzTxtResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRecordRpzTxtResponse struct {
	value *CreateRecordRpzTxtResponse
	isSet bool
}

func (v NullableCreateRecordRpzTxtResponse) Get() *CreateRecordRpzTxtResponse {
	return v.value
}

func (v *NullableCreateRecordRpzTxtResponse) Set(val *CreateRecordRpzTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecordRpzTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecordRpzTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecordRpzTxtResponse(val *CreateRecordRpzTxtResponse) *NullableCreateRecordRpzTxtResponse {
	return &NullableCreateRecordRpzTxtResponse{value: val, isSet: true}
}

func (v NullableCreateRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecordRpzTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
