/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetAllrpzrecordsResponse - struct for GetAllrpzrecordsResponse
type GetAllrpzrecordsResponse struct {
	Allrpzrecords                          *Allrpzrecords
	GetAllrpzrecordsResponseObjectAsResult *GetAllrpzrecordsResponseObjectAsResult
}

// AllrpzrecordsAsGetAllrpzrecordsResponse is a convenience function that returns Allrpzrecords wrapped in GetAllrpzrecordsResponse
func AllrpzrecordsAsGetAllrpzrecordsResponse(v *Allrpzrecords) GetAllrpzrecordsResponse {
	return GetAllrpzrecordsResponse{
		Allrpzrecords: v,
	}
}

// GetAllrpzrecordsResponseObjectAsResultAsGetAllrpzrecordsResponse is a convenience function that returns GetAllrpzrecordsResponseObjectAsResult wrapped in GetAllrpzrecordsResponse
func GetAllrpzrecordsResponseObjectAsResultAsGetAllrpzrecordsResponse(v *GetAllrpzrecordsResponseObjectAsResult) GetAllrpzrecordsResponse {
	return GetAllrpzrecordsResponse{
		GetAllrpzrecordsResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAllrpzrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Allrpzrecords
	err = newStrictDecoder(data).Decode(&dst.Allrpzrecords)
	if err == nil {
		jsonAllrpzrecords, _ := json.Marshal(dst.Allrpzrecords)
		if string(jsonAllrpzrecords) == "{}" { // empty struct
			dst.Allrpzrecords = nil
		} else {
			match++
		}
	} else {
		dst.Allrpzrecords = nil
	}

	// try to unmarshal data into GetAllrpzrecordsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAllrpzrecordsResponseObjectAsResult)
	if err == nil {
		jsonGetAllrpzrecordsResponseObjectAsResult, _ := json.Marshal(dst.GetAllrpzrecordsResponseObjectAsResult)
		if string(jsonGetAllrpzrecordsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAllrpzrecordsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAllrpzrecordsResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Allrpzrecords = nil
		dst.GetAllrpzrecordsResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAllrpzrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAllrpzrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.Allrpzrecords != nil {
		return json.Marshal(&src.Allrpzrecords)
	}

	if src.GetAllrpzrecordsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAllrpzrecordsResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAllrpzrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Allrpzrecords != nil {
		return obj.Allrpzrecords
	}

	if obj.GetAllrpzrecordsResponseObjectAsResult != nil {
		return obj.GetAllrpzrecordsResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAllrpzrecordsResponse struct {
	value *GetAllrpzrecordsResponse
	isSet bool
}

func (v NullableGetAllrpzrecordsResponse) Get() *GetAllrpzrecordsResponse {
	return v.value
}

func (v *NullableGetAllrpzrecordsResponse) Set(val *GetAllrpzrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllrpzrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllrpzrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllrpzrecordsResponse(val *GetAllrpzrecordsResponse) *NullableGetAllrpzrecordsResponse {
	return &NullableGetAllrpzrecordsResponse{value: val, isSet: true}
}

func (v NullableGetAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllrpzrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
