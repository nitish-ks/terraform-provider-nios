/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetOrderedresponsepolicyzonesResponse - struct for GetOrderedresponsepolicyzonesResponse
type GetOrderedresponsepolicyzonesResponse struct {
	GetOrderedresponsepolicyzonesResponseObjectAsResult *GetOrderedresponsepolicyzonesResponseObjectAsResult
	Orderedresponsepolicyzones                          *Orderedresponsepolicyzones
}

// GetOrderedresponsepolicyzonesResponseObjectAsResultAsGetOrderedresponsepolicyzonesResponse is a convenience function that returns GetOrderedresponsepolicyzonesResponseObjectAsResult wrapped in GetOrderedresponsepolicyzonesResponse
func GetOrderedresponsepolicyzonesResponseObjectAsResultAsGetOrderedresponsepolicyzonesResponse(v *GetOrderedresponsepolicyzonesResponseObjectAsResult) GetOrderedresponsepolicyzonesResponse {
	return GetOrderedresponsepolicyzonesResponse{
		GetOrderedresponsepolicyzonesResponseObjectAsResult: v,
	}
}

// OrderedresponsepolicyzonesAsGetOrderedresponsepolicyzonesResponse is a convenience function that returns Orderedresponsepolicyzones wrapped in GetOrderedresponsepolicyzonesResponse
func OrderedresponsepolicyzonesAsGetOrderedresponsepolicyzonesResponse(v *Orderedresponsepolicyzones) GetOrderedresponsepolicyzonesResponse {
	return GetOrderedresponsepolicyzonesResponse{
		Orderedresponsepolicyzones: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetOrderedresponsepolicyzonesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetOrderedresponsepolicyzonesResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetOrderedresponsepolicyzonesResponseObjectAsResult)
	if err == nil {
		jsonGetOrderedresponsepolicyzonesResponseObjectAsResult, _ := json.Marshal(dst.GetOrderedresponsepolicyzonesResponseObjectAsResult)
		if string(jsonGetOrderedresponsepolicyzonesResponseObjectAsResult) == "{}" { // empty struct
			dst.GetOrderedresponsepolicyzonesResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetOrderedresponsepolicyzonesResponseObjectAsResult = nil
	}

	// try to unmarshal data into Orderedresponsepolicyzones
	err = newStrictDecoder(data).Decode(&dst.Orderedresponsepolicyzones)
	if err == nil {
		jsonOrderedresponsepolicyzones, _ := json.Marshal(dst.Orderedresponsepolicyzones)
		if string(jsonOrderedresponsepolicyzones) == "{}" { // empty struct
			dst.Orderedresponsepolicyzones = nil
		} else {
			match++
		}
	} else {
		dst.Orderedresponsepolicyzones = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetOrderedresponsepolicyzonesResponseObjectAsResult = nil
		dst.Orderedresponsepolicyzones = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetOrderedresponsepolicyzonesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetOrderedresponsepolicyzonesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetOrderedresponsepolicyzonesResponse) MarshalJSON() ([]byte, error) {
	if src.GetOrderedresponsepolicyzonesResponseObjectAsResult != nil {
		return json.Marshal(&src.GetOrderedresponsepolicyzonesResponseObjectAsResult)
	}

	if src.Orderedresponsepolicyzones != nil {
		return json.Marshal(&src.Orderedresponsepolicyzones)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetOrderedresponsepolicyzonesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetOrderedresponsepolicyzonesResponseObjectAsResult != nil {
		return obj.GetOrderedresponsepolicyzonesResponseObjectAsResult
	}

	if obj.Orderedresponsepolicyzones != nil {
		return obj.Orderedresponsepolicyzones
	}

	// all schemas are nil
	return nil
}

type NullableGetOrderedresponsepolicyzonesResponse struct {
	value *GetOrderedresponsepolicyzonesResponse
	isSet bool
}

func (v NullableGetOrderedresponsepolicyzonesResponse) Get() *GetOrderedresponsepolicyzonesResponse {
	return v.value
}

func (v *NullableGetOrderedresponsepolicyzonesResponse) Set(val *GetOrderedresponsepolicyzonesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrderedresponsepolicyzonesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrderedresponsepolicyzonesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrderedresponsepolicyzonesResponse(val *GetOrderedresponsepolicyzonesResponse) *NullableGetOrderedresponsepolicyzonesResponse {
	return &NullableGetOrderedresponsepolicyzonesResponse{value: val, isSet: true}
}

func (v NullableGetOrderedresponsepolicyzonesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrderedresponsepolicyzonesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
