/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzAIpaddressResponse - struct for GetRecordRpzAIpaddressResponse
type GetRecordRpzAIpaddressResponse struct {
	GetRecordRpzAIpaddressResponseObjectAsResult *GetRecordRpzAIpaddressResponseObjectAsResult
	RecordRpzAIpaddress                          *RecordRpzAIpaddress
}

// GetRecordRpzAIpaddressResponseObjectAsResultAsGetRecordRpzAIpaddressResponse is a convenience function that returns GetRecordRpzAIpaddressResponseObjectAsResult wrapped in GetRecordRpzAIpaddressResponse
func GetRecordRpzAIpaddressResponseObjectAsResultAsGetRecordRpzAIpaddressResponse(v *GetRecordRpzAIpaddressResponseObjectAsResult) GetRecordRpzAIpaddressResponse {
	return GetRecordRpzAIpaddressResponse{
		GetRecordRpzAIpaddressResponseObjectAsResult: v,
	}
}

// RecordRpzAIpaddressAsGetRecordRpzAIpaddressResponse is a convenience function that returns RecordRpzAIpaddress wrapped in GetRecordRpzAIpaddressResponse
func RecordRpzAIpaddressAsGetRecordRpzAIpaddressResponse(v *RecordRpzAIpaddress) GetRecordRpzAIpaddressResponse {
	return GetRecordRpzAIpaddressResponse{
		RecordRpzAIpaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzAIpaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzAIpaddressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzAIpaddressResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzAIpaddressResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzAIpaddressResponseObjectAsResult)
		if string(jsonGetRecordRpzAIpaddressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzAIpaddressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzAIpaddressResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzAIpaddress
	err = newStrictDecoder(data).Decode(&dst.RecordRpzAIpaddress)
	if err == nil {
		jsonRecordRpzAIpaddress, _ := json.Marshal(dst.RecordRpzAIpaddress)
		if string(jsonRecordRpzAIpaddress) == "{}" { // empty struct
			dst.RecordRpzAIpaddress = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzAIpaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzAIpaddressResponseObjectAsResult = nil
		dst.RecordRpzAIpaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzAIpaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzAIpaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzAIpaddressResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzAIpaddressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzAIpaddressResponseObjectAsResult)
	}

	if src.RecordRpzAIpaddress != nil {
		return json.Marshal(&src.RecordRpzAIpaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzAIpaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzAIpaddressResponseObjectAsResult != nil {
		return obj.GetRecordRpzAIpaddressResponseObjectAsResult
	}

	if obj.RecordRpzAIpaddress != nil {
		return obj.RecordRpzAIpaddress
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzAIpaddressResponse struct {
	value *GetRecordRpzAIpaddressResponse
	isSet bool
}

func (v NullableGetRecordRpzAIpaddressResponse) Get() *GetRecordRpzAIpaddressResponse {
	return v.value
}

func (v *NullableGetRecordRpzAIpaddressResponse) Set(val *GetRecordRpzAIpaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzAIpaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzAIpaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzAIpaddressResponse(val *GetRecordRpzAIpaddressResponse) *NullableGetRecordRpzAIpaddressResponse {
	return &NullableGetRecordRpzAIpaddressResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzAIpaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzAIpaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
