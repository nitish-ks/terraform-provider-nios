/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzAResponse - struct for GetRecordRpzAResponse
type GetRecordRpzAResponse struct {
	GetRecordRpzAResponseObjectAsResult *GetRecordRpzAResponseObjectAsResult
	RecordRpzA                          *RecordRpzA
}

// GetRecordRpzAResponseObjectAsResultAsGetRecordRpzAResponse is a convenience function that returns GetRecordRpzAResponseObjectAsResult wrapped in GetRecordRpzAResponse
func GetRecordRpzAResponseObjectAsResultAsGetRecordRpzAResponse(v *GetRecordRpzAResponseObjectAsResult) GetRecordRpzAResponse {
	return GetRecordRpzAResponse{
		GetRecordRpzAResponseObjectAsResult: v,
	}
}

// RecordRpzAAsGetRecordRpzAResponse is a convenience function that returns RecordRpzA wrapped in GetRecordRpzAResponse
func RecordRpzAAsGetRecordRpzAResponse(v *RecordRpzA) GetRecordRpzAResponse {
	return GetRecordRpzAResponse{
		RecordRpzA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzAResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzAResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzAResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzAResponseObjectAsResult)
		if string(jsonGetRecordRpzAResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzAResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzAResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzA
	err = newStrictDecoder(data).Decode(&dst.RecordRpzA)
	if err == nil {
		jsonRecordRpzA, _ := json.Marshal(dst.RecordRpzA)
		if string(jsonRecordRpzA) == "{}" { // empty struct
			dst.RecordRpzA = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzAResponseObjectAsResult = nil
		dst.RecordRpzA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzAResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzAResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzAResponseObjectAsResult)
	}

	if src.RecordRpzA != nil {
		return json.Marshal(&src.RecordRpzA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzAResponseObjectAsResult != nil {
		return obj.GetRecordRpzAResponseObjectAsResult
	}

	if obj.RecordRpzA != nil {
		return obj.RecordRpzA
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzAResponse struct {
	value *GetRecordRpzAResponse
	isSet bool
}

func (v NullableGetRecordRpzAResponse) Get() *GetRecordRpzAResponse {
	return v.value
}

func (v *NullableGetRecordRpzAResponse) Set(val *GetRecordRpzAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzAResponse(val *GetRecordRpzAResponse) *NullableGetRecordRpzAResponse {
	return &NullableGetRecordRpzAResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
