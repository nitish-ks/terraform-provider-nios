/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzAaaaIpaddressResponse - struct for GetRecordRpzAaaaIpaddressResponse
type GetRecordRpzAaaaIpaddressResponse struct {
	GetRecordRpzAaaaIpaddressResponseObjectAsResult *GetRecordRpzAaaaIpaddressResponseObjectAsResult
	RecordRpzAaaaIpaddress                          *RecordRpzAaaaIpaddress
}

// GetRecordRpzAaaaIpaddressResponseObjectAsResultAsGetRecordRpzAaaaIpaddressResponse is a convenience function that returns GetRecordRpzAaaaIpaddressResponseObjectAsResult wrapped in GetRecordRpzAaaaIpaddressResponse
func GetRecordRpzAaaaIpaddressResponseObjectAsResultAsGetRecordRpzAaaaIpaddressResponse(v *GetRecordRpzAaaaIpaddressResponseObjectAsResult) GetRecordRpzAaaaIpaddressResponse {
	return GetRecordRpzAaaaIpaddressResponse{
		GetRecordRpzAaaaIpaddressResponseObjectAsResult: v,
	}
}

// RecordRpzAaaaIpaddressAsGetRecordRpzAaaaIpaddressResponse is a convenience function that returns RecordRpzAaaaIpaddress wrapped in GetRecordRpzAaaaIpaddressResponse
func RecordRpzAaaaIpaddressAsGetRecordRpzAaaaIpaddressResponse(v *RecordRpzAaaaIpaddress) GetRecordRpzAaaaIpaddressResponse {
	return GetRecordRpzAaaaIpaddressResponse{
		RecordRpzAaaaIpaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzAaaaIpaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzAaaaIpaddressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzAaaaIpaddressResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzAaaaIpaddressResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzAaaaIpaddressResponseObjectAsResult)
		if string(jsonGetRecordRpzAaaaIpaddressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzAaaaIpaddressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzAaaaIpaddressResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzAaaaIpaddress
	err = newStrictDecoder(data).Decode(&dst.RecordRpzAaaaIpaddress)
	if err == nil {
		jsonRecordRpzAaaaIpaddress, _ := json.Marshal(dst.RecordRpzAaaaIpaddress)
		if string(jsonRecordRpzAaaaIpaddress) == "{}" { // empty struct
			dst.RecordRpzAaaaIpaddress = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzAaaaIpaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzAaaaIpaddressResponseObjectAsResult = nil
		dst.RecordRpzAaaaIpaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzAaaaIpaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzAaaaIpaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzAaaaIpaddressResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzAaaaIpaddressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzAaaaIpaddressResponseObjectAsResult)
	}

	if src.RecordRpzAaaaIpaddress != nil {
		return json.Marshal(&src.RecordRpzAaaaIpaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzAaaaIpaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzAaaaIpaddressResponseObjectAsResult != nil {
		return obj.GetRecordRpzAaaaIpaddressResponseObjectAsResult
	}

	if obj.RecordRpzAaaaIpaddress != nil {
		return obj.RecordRpzAaaaIpaddress
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzAaaaIpaddressResponse struct {
	value *GetRecordRpzAaaaIpaddressResponse
	isSet bool
}

func (v NullableGetRecordRpzAaaaIpaddressResponse) Get() *GetRecordRpzAaaaIpaddressResponse {
	return v.value
}

func (v *NullableGetRecordRpzAaaaIpaddressResponse) Set(val *GetRecordRpzAaaaIpaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzAaaaIpaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzAaaaIpaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzAaaaIpaddressResponse(val *GetRecordRpzAaaaIpaddressResponse) *NullableGetRecordRpzAaaaIpaddressResponse {
	return &NullableGetRecordRpzAaaaIpaddressResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzAaaaIpaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzAaaaIpaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
