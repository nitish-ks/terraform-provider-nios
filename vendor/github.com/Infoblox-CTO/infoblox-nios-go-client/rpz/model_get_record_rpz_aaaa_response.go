/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzAaaaResponse - struct for GetRecordRpzAaaaResponse
type GetRecordRpzAaaaResponse struct {
	GetRecordRpzAaaaResponseObjectAsResult *GetRecordRpzAaaaResponseObjectAsResult
	RecordRpzAaaa                          *RecordRpzAaaa
}

// GetRecordRpzAaaaResponseObjectAsResultAsGetRecordRpzAaaaResponse is a convenience function that returns GetRecordRpzAaaaResponseObjectAsResult wrapped in GetRecordRpzAaaaResponse
func GetRecordRpzAaaaResponseObjectAsResultAsGetRecordRpzAaaaResponse(v *GetRecordRpzAaaaResponseObjectAsResult) GetRecordRpzAaaaResponse {
	return GetRecordRpzAaaaResponse{
		GetRecordRpzAaaaResponseObjectAsResult: v,
	}
}

// RecordRpzAaaaAsGetRecordRpzAaaaResponse is a convenience function that returns RecordRpzAaaa wrapped in GetRecordRpzAaaaResponse
func RecordRpzAaaaAsGetRecordRpzAaaaResponse(v *RecordRpzAaaa) GetRecordRpzAaaaResponse {
	return GetRecordRpzAaaaResponse{
		RecordRpzAaaa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzAaaaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzAaaaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzAaaaResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzAaaaResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzAaaaResponseObjectAsResult)
		if string(jsonGetRecordRpzAaaaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzAaaaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzAaaaResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzAaaa
	err = newStrictDecoder(data).Decode(&dst.RecordRpzAaaa)
	if err == nil {
		jsonRecordRpzAaaa, _ := json.Marshal(dst.RecordRpzAaaa)
		if string(jsonRecordRpzAaaa) == "{}" { // empty struct
			dst.RecordRpzAaaa = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzAaaa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzAaaaResponseObjectAsResult = nil
		dst.RecordRpzAaaa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzAaaaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzAaaaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzAaaaResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzAaaaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzAaaaResponseObjectAsResult)
	}

	if src.RecordRpzAaaa != nil {
		return json.Marshal(&src.RecordRpzAaaa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzAaaaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzAaaaResponseObjectAsResult != nil {
		return obj.GetRecordRpzAaaaResponseObjectAsResult
	}

	if obj.RecordRpzAaaa != nil {
		return obj.RecordRpzAaaa
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzAaaaResponse struct {
	value *GetRecordRpzAaaaResponse
	isSet bool
}

func (v NullableGetRecordRpzAaaaResponse) Get() *GetRecordRpzAaaaResponse {
	return v.value
}

func (v *NullableGetRecordRpzAaaaResponse) Set(val *GetRecordRpzAaaaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzAaaaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzAaaaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzAaaaResponse(val *GetRecordRpzAaaaResponse) *NullableGetRecordRpzAaaaResponse {
	return &NullableGetRecordRpzAaaaResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzAaaaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzAaaaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
