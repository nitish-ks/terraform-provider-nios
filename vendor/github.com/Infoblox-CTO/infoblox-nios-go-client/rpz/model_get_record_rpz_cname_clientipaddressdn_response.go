/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzCnameClientipaddressdnResponse - struct for GetRecordRpzCnameClientipaddressdnResponse
type GetRecordRpzCnameClientipaddressdnResponse struct {
	GetRecordRpzCnameClientipaddressdnResponseObjectAsResult *GetRecordRpzCnameClientipaddressdnResponseObjectAsResult
	RecordRpzCnameClientipaddressdn                          *RecordRpzCnameClientipaddressdn
}

// GetRecordRpzCnameClientipaddressdnResponseObjectAsResultAsGetRecordRpzCnameClientipaddressdnResponse is a convenience function that returns GetRecordRpzCnameClientipaddressdnResponseObjectAsResult wrapped in GetRecordRpzCnameClientipaddressdnResponse
func GetRecordRpzCnameClientipaddressdnResponseObjectAsResultAsGetRecordRpzCnameClientipaddressdnResponse(v *GetRecordRpzCnameClientipaddressdnResponseObjectAsResult) GetRecordRpzCnameClientipaddressdnResponse {
	return GetRecordRpzCnameClientipaddressdnResponse{
		GetRecordRpzCnameClientipaddressdnResponseObjectAsResult: v,
	}
}

// RecordRpzCnameClientipaddressdnAsGetRecordRpzCnameClientipaddressdnResponse is a convenience function that returns RecordRpzCnameClientipaddressdn wrapped in GetRecordRpzCnameClientipaddressdnResponse
func RecordRpzCnameClientipaddressdnAsGetRecordRpzCnameClientipaddressdnResponse(v *RecordRpzCnameClientipaddressdn) GetRecordRpzCnameClientipaddressdnResponse {
	return GetRecordRpzCnameClientipaddressdnResponse{
		RecordRpzCnameClientipaddressdn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzCnameClientipaddressdnResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzCnameClientipaddressdnResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult)
		if string(jsonGetRecordRpzCnameClientipaddressdnResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzCnameClientipaddressdn
	err = newStrictDecoder(data).Decode(&dst.RecordRpzCnameClientipaddressdn)
	if err == nil {
		jsonRecordRpzCnameClientipaddressdn, _ := json.Marshal(dst.RecordRpzCnameClientipaddressdn)
		if string(jsonRecordRpzCnameClientipaddressdn) == "{}" { // empty struct
			dst.RecordRpzCnameClientipaddressdn = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzCnameClientipaddressdn = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult = nil
		dst.RecordRpzCnameClientipaddressdn = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzCnameClientipaddressdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzCnameClientipaddressdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult)
	}

	if src.RecordRpzCnameClientipaddressdn != nil {
		return json.Marshal(&src.RecordRpzCnameClientipaddressdn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzCnameClientipaddressdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult != nil {
		return obj.GetRecordRpzCnameClientipaddressdnResponseObjectAsResult
	}

	if obj.RecordRpzCnameClientipaddressdn != nil {
		return obj.RecordRpzCnameClientipaddressdn
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzCnameClientipaddressdnResponse struct {
	value *GetRecordRpzCnameClientipaddressdnResponse
	isSet bool
}

func (v NullableGetRecordRpzCnameClientipaddressdnResponse) Get() *GetRecordRpzCnameClientipaddressdnResponse {
	return v.value
}

func (v *NullableGetRecordRpzCnameClientipaddressdnResponse) Set(val *GetRecordRpzCnameClientipaddressdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzCnameClientipaddressdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzCnameClientipaddressdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzCnameClientipaddressdnResponse(val *GetRecordRpzCnameClientipaddressdnResponse) *NullableGetRecordRpzCnameClientipaddressdnResponse {
	return &NullableGetRecordRpzCnameClientipaddressdnResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
