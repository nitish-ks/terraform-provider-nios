/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzCnameIpaddressdnResponse - struct for GetRecordRpzCnameIpaddressdnResponse
type GetRecordRpzCnameIpaddressdnResponse struct {
	GetRecordRpzCnameIpaddressdnResponseObjectAsResult *GetRecordRpzCnameIpaddressdnResponseObjectAsResult
	RecordRpzCnameIpaddressdn                          *RecordRpzCnameIpaddressdn
}

// GetRecordRpzCnameIpaddressdnResponseObjectAsResultAsGetRecordRpzCnameIpaddressdnResponse is a convenience function that returns GetRecordRpzCnameIpaddressdnResponseObjectAsResult wrapped in GetRecordRpzCnameIpaddressdnResponse
func GetRecordRpzCnameIpaddressdnResponseObjectAsResultAsGetRecordRpzCnameIpaddressdnResponse(v *GetRecordRpzCnameIpaddressdnResponseObjectAsResult) GetRecordRpzCnameIpaddressdnResponse {
	return GetRecordRpzCnameIpaddressdnResponse{
		GetRecordRpzCnameIpaddressdnResponseObjectAsResult: v,
	}
}

// RecordRpzCnameIpaddressdnAsGetRecordRpzCnameIpaddressdnResponse is a convenience function that returns RecordRpzCnameIpaddressdn wrapped in GetRecordRpzCnameIpaddressdnResponse
func RecordRpzCnameIpaddressdnAsGetRecordRpzCnameIpaddressdnResponse(v *RecordRpzCnameIpaddressdn) GetRecordRpzCnameIpaddressdnResponse {
	return GetRecordRpzCnameIpaddressdnResponse{
		RecordRpzCnameIpaddressdn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzCnameIpaddressdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzCnameIpaddressdnResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzCnameIpaddressdnResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzCnameIpaddressdnResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzCnameIpaddressdnResponseObjectAsResult)
		if string(jsonGetRecordRpzCnameIpaddressdnResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzCnameIpaddressdnResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzCnameIpaddressdnResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzCnameIpaddressdn
	err = newStrictDecoder(data).Decode(&dst.RecordRpzCnameIpaddressdn)
	if err == nil {
		jsonRecordRpzCnameIpaddressdn, _ := json.Marshal(dst.RecordRpzCnameIpaddressdn)
		if string(jsonRecordRpzCnameIpaddressdn) == "{}" { // empty struct
			dst.RecordRpzCnameIpaddressdn = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzCnameIpaddressdn = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzCnameIpaddressdnResponseObjectAsResult = nil
		dst.RecordRpzCnameIpaddressdn = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzCnameIpaddressdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzCnameIpaddressdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzCnameIpaddressdnResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzCnameIpaddressdnResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzCnameIpaddressdnResponseObjectAsResult)
	}

	if src.RecordRpzCnameIpaddressdn != nil {
		return json.Marshal(&src.RecordRpzCnameIpaddressdn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzCnameIpaddressdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzCnameIpaddressdnResponseObjectAsResult != nil {
		return obj.GetRecordRpzCnameIpaddressdnResponseObjectAsResult
	}

	if obj.RecordRpzCnameIpaddressdn != nil {
		return obj.RecordRpzCnameIpaddressdn
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzCnameIpaddressdnResponse struct {
	value *GetRecordRpzCnameIpaddressdnResponse
	isSet bool
}

func (v NullableGetRecordRpzCnameIpaddressdnResponse) Get() *GetRecordRpzCnameIpaddressdnResponse {
	return v.value
}

func (v *NullableGetRecordRpzCnameIpaddressdnResponse) Set(val *GetRecordRpzCnameIpaddressdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzCnameIpaddressdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzCnameIpaddressdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzCnameIpaddressdnResponse(val *GetRecordRpzCnameIpaddressdnResponse) *NullableGetRecordRpzCnameIpaddressdnResponse {
	return &NullableGetRecordRpzCnameIpaddressdnResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzCnameIpaddressdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzCnameIpaddressdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
