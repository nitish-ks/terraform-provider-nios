/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzCnameResponse - struct for GetRecordRpzCnameResponse
type GetRecordRpzCnameResponse struct {
	GetRecordRpzCnameResponseObjectAsResult *GetRecordRpzCnameResponseObjectAsResult
	RecordRpzCname                          *RecordRpzCname
}

// GetRecordRpzCnameResponseObjectAsResultAsGetRecordRpzCnameResponse is a convenience function that returns GetRecordRpzCnameResponseObjectAsResult wrapped in GetRecordRpzCnameResponse
func GetRecordRpzCnameResponseObjectAsResultAsGetRecordRpzCnameResponse(v *GetRecordRpzCnameResponseObjectAsResult) GetRecordRpzCnameResponse {
	return GetRecordRpzCnameResponse{
		GetRecordRpzCnameResponseObjectAsResult: v,
	}
}

// RecordRpzCnameAsGetRecordRpzCnameResponse is a convenience function that returns RecordRpzCname wrapped in GetRecordRpzCnameResponse
func RecordRpzCnameAsGetRecordRpzCnameResponse(v *RecordRpzCname) GetRecordRpzCnameResponse {
	return GetRecordRpzCnameResponse{
		RecordRpzCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzCnameResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzCnameResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzCnameResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzCnameResponseObjectAsResult)
		if string(jsonGetRecordRpzCnameResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzCnameResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzCnameResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzCname
	err = newStrictDecoder(data).Decode(&dst.RecordRpzCname)
	if err == nil {
		jsonRecordRpzCname, _ := json.Marshal(dst.RecordRpzCname)
		if string(jsonRecordRpzCname) == "{}" { // empty struct
			dst.RecordRpzCname = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzCnameResponseObjectAsResult = nil
		dst.RecordRpzCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzCnameResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzCnameResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzCnameResponseObjectAsResult)
	}

	if src.RecordRpzCname != nil {
		return json.Marshal(&src.RecordRpzCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzCnameResponseObjectAsResult != nil {
		return obj.GetRecordRpzCnameResponseObjectAsResult
	}

	if obj.RecordRpzCname != nil {
		return obj.RecordRpzCname
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzCnameResponse struct {
	value *GetRecordRpzCnameResponse
	isSet bool
}

func (v NullableGetRecordRpzCnameResponse) Get() *GetRecordRpzCnameResponse {
	return v.value
}

func (v *NullableGetRecordRpzCnameResponse) Set(val *GetRecordRpzCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzCnameResponse(val *GetRecordRpzCnameResponse) *NullableGetRecordRpzCnameResponse {
	return &NullableGetRecordRpzCnameResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
