/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzMxResponse - struct for GetRecordRpzMxResponse
type GetRecordRpzMxResponse struct {
	GetRecordRpzMxResponseObjectAsResult *GetRecordRpzMxResponseObjectAsResult
	RecordRpzMx                          *RecordRpzMx
}

// GetRecordRpzMxResponseObjectAsResultAsGetRecordRpzMxResponse is a convenience function that returns GetRecordRpzMxResponseObjectAsResult wrapped in GetRecordRpzMxResponse
func GetRecordRpzMxResponseObjectAsResultAsGetRecordRpzMxResponse(v *GetRecordRpzMxResponseObjectAsResult) GetRecordRpzMxResponse {
	return GetRecordRpzMxResponse{
		GetRecordRpzMxResponseObjectAsResult: v,
	}
}

// RecordRpzMxAsGetRecordRpzMxResponse is a convenience function that returns RecordRpzMx wrapped in GetRecordRpzMxResponse
func RecordRpzMxAsGetRecordRpzMxResponse(v *RecordRpzMx) GetRecordRpzMxResponse {
	return GetRecordRpzMxResponse{
		RecordRpzMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzMxResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzMxResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzMxResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzMxResponseObjectAsResult)
		if string(jsonGetRecordRpzMxResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzMxResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzMxResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzMx
	err = newStrictDecoder(data).Decode(&dst.RecordRpzMx)
	if err == nil {
		jsonRecordRpzMx, _ := json.Marshal(dst.RecordRpzMx)
		if string(jsonRecordRpzMx) == "{}" { // empty struct
			dst.RecordRpzMx = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzMxResponseObjectAsResult = nil
		dst.RecordRpzMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzMxResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzMxResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzMxResponseObjectAsResult)
	}

	if src.RecordRpzMx != nil {
		return json.Marshal(&src.RecordRpzMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzMxResponseObjectAsResult != nil {
		return obj.GetRecordRpzMxResponseObjectAsResult
	}

	if obj.RecordRpzMx != nil {
		return obj.RecordRpzMx
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzMxResponse struct {
	value *GetRecordRpzMxResponse
	isSet bool
}

func (v NullableGetRecordRpzMxResponse) Get() *GetRecordRpzMxResponse {
	return v.value
}

func (v *NullableGetRecordRpzMxResponse) Set(val *GetRecordRpzMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzMxResponse(val *GetRecordRpzMxResponse) *NullableGetRecordRpzMxResponse {
	return &NullableGetRecordRpzMxResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
