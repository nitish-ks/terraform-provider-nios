/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzNaptrResponse - struct for GetRecordRpzNaptrResponse
type GetRecordRpzNaptrResponse struct {
	GetRecordRpzNaptrResponseObjectAsResult *GetRecordRpzNaptrResponseObjectAsResult
	RecordRpzNaptr                          *RecordRpzNaptr
}

// GetRecordRpzNaptrResponseObjectAsResultAsGetRecordRpzNaptrResponse is a convenience function that returns GetRecordRpzNaptrResponseObjectAsResult wrapped in GetRecordRpzNaptrResponse
func GetRecordRpzNaptrResponseObjectAsResultAsGetRecordRpzNaptrResponse(v *GetRecordRpzNaptrResponseObjectAsResult) GetRecordRpzNaptrResponse {
	return GetRecordRpzNaptrResponse{
		GetRecordRpzNaptrResponseObjectAsResult: v,
	}
}

// RecordRpzNaptrAsGetRecordRpzNaptrResponse is a convenience function that returns RecordRpzNaptr wrapped in GetRecordRpzNaptrResponse
func RecordRpzNaptrAsGetRecordRpzNaptrResponse(v *RecordRpzNaptr) GetRecordRpzNaptrResponse {
	return GetRecordRpzNaptrResponse{
		RecordRpzNaptr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzNaptrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzNaptrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzNaptrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzNaptrResponseObjectAsResult)
		if string(jsonGetRecordRpzNaptrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzNaptrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzNaptrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzNaptr
	err = newStrictDecoder(data).Decode(&dst.RecordRpzNaptr)
	if err == nil {
		jsonRecordRpzNaptr, _ := json.Marshal(dst.RecordRpzNaptr)
		if string(jsonRecordRpzNaptr) == "{}" { // empty struct
			dst.RecordRpzNaptr = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzNaptr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzNaptrResponseObjectAsResult = nil
		dst.RecordRpzNaptr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzNaptrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzNaptrResponseObjectAsResult)
	}

	if src.RecordRpzNaptr != nil {
		return json.Marshal(&src.RecordRpzNaptr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzNaptrResponseObjectAsResult != nil {
		return obj.GetRecordRpzNaptrResponseObjectAsResult
	}

	if obj.RecordRpzNaptr != nil {
		return obj.RecordRpzNaptr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzNaptrResponse struct {
	value *GetRecordRpzNaptrResponse
	isSet bool
}

func (v NullableGetRecordRpzNaptrResponse) Get() *GetRecordRpzNaptrResponse {
	return v.value
}

func (v *NullableGetRecordRpzNaptrResponse) Set(val *GetRecordRpzNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzNaptrResponse(val *GetRecordRpzNaptrResponse) *NullableGetRecordRpzNaptrResponse {
	return &NullableGetRecordRpzNaptrResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
