/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzSrvResponse - struct for GetRecordRpzSrvResponse
type GetRecordRpzSrvResponse struct {
	GetRecordRpzSrvResponseObjectAsResult *GetRecordRpzSrvResponseObjectAsResult
	RecordRpzSrv                          *RecordRpzSrv
}

// GetRecordRpzSrvResponseObjectAsResultAsGetRecordRpzSrvResponse is a convenience function that returns GetRecordRpzSrvResponseObjectAsResult wrapped in GetRecordRpzSrvResponse
func GetRecordRpzSrvResponseObjectAsResultAsGetRecordRpzSrvResponse(v *GetRecordRpzSrvResponseObjectAsResult) GetRecordRpzSrvResponse {
	return GetRecordRpzSrvResponse{
		GetRecordRpzSrvResponseObjectAsResult: v,
	}
}

// RecordRpzSrvAsGetRecordRpzSrvResponse is a convenience function that returns RecordRpzSrv wrapped in GetRecordRpzSrvResponse
func RecordRpzSrvAsGetRecordRpzSrvResponse(v *RecordRpzSrv) GetRecordRpzSrvResponse {
	return GetRecordRpzSrvResponse{
		RecordRpzSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzSrvResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzSrvResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzSrvResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzSrvResponseObjectAsResult)
		if string(jsonGetRecordRpzSrvResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzSrvResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzSrvResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzSrv
	err = newStrictDecoder(data).Decode(&dst.RecordRpzSrv)
	if err == nil {
		jsonRecordRpzSrv, _ := json.Marshal(dst.RecordRpzSrv)
		if string(jsonRecordRpzSrv) == "{}" { // empty struct
			dst.RecordRpzSrv = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzSrvResponseObjectAsResult = nil
		dst.RecordRpzSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzSrvResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzSrvResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzSrvResponseObjectAsResult)
	}

	if src.RecordRpzSrv != nil {
		return json.Marshal(&src.RecordRpzSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzSrvResponseObjectAsResult != nil {
		return obj.GetRecordRpzSrvResponseObjectAsResult
	}

	if obj.RecordRpzSrv != nil {
		return obj.RecordRpzSrv
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzSrvResponse struct {
	value *GetRecordRpzSrvResponse
	isSet bool
}

func (v NullableGetRecordRpzSrvResponse) Get() *GetRecordRpzSrvResponse {
	return v.value
}

func (v *NullableGetRecordRpzSrvResponse) Set(val *GetRecordRpzSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzSrvResponse(val *GetRecordRpzSrvResponse) *NullableGetRecordRpzSrvResponse {
	return &NullableGetRecordRpzSrvResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
