/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzTxtResponse - struct for GetRecordRpzTxtResponse
type GetRecordRpzTxtResponse struct {
	GetRecordRpzTxtResponseObjectAsResult *GetRecordRpzTxtResponseObjectAsResult
	RecordRpzTxt                          *RecordRpzTxt
}

// GetRecordRpzTxtResponseObjectAsResultAsGetRecordRpzTxtResponse is a convenience function that returns GetRecordRpzTxtResponseObjectAsResult wrapped in GetRecordRpzTxtResponse
func GetRecordRpzTxtResponseObjectAsResultAsGetRecordRpzTxtResponse(v *GetRecordRpzTxtResponseObjectAsResult) GetRecordRpzTxtResponse {
	return GetRecordRpzTxtResponse{
		GetRecordRpzTxtResponseObjectAsResult: v,
	}
}

// RecordRpzTxtAsGetRecordRpzTxtResponse is a convenience function that returns RecordRpzTxt wrapped in GetRecordRpzTxtResponse
func RecordRpzTxtAsGetRecordRpzTxtResponse(v *RecordRpzTxt) GetRecordRpzTxtResponse {
	return GetRecordRpzTxtResponse{
		RecordRpzTxt: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzTxtResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzTxtResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzTxtResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzTxtResponseObjectAsResult)
		if string(jsonGetRecordRpzTxtResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzTxtResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzTxtResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzTxt
	err = newStrictDecoder(data).Decode(&dst.RecordRpzTxt)
	if err == nil {
		jsonRecordRpzTxt, _ := json.Marshal(dst.RecordRpzTxt)
		if string(jsonRecordRpzTxt) == "{}" { // empty struct
			dst.RecordRpzTxt = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzTxt = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzTxtResponseObjectAsResult = nil
		dst.RecordRpzTxt = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzTxtResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzTxtResponseObjectAsResult)
	}

	if src.RecordRpzTxt != nil {
		return json.Marshal(&src.RecordRpzTxt)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzTxtResponseObjectAsResult != nil {
		return obj.GetRecordRpzTxtResponseObjectAsResult
	}

	if obj.RecordRpzTxt != nil {
		return obj.RecordRpzTxt
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzTxtResponse struct {
	value *GetRecordRpzTxtResponse
	isSet bool
}

func (v NullableGetRecordRpzTxtResponse) Get() *GetRecordRpzTxtResponse {
	return v.value
}

func (v *NullableGetRecordRpzTxtResponse) Set(val *GetRecordRpzTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzTxtResponse(val *GetRecordRpzTxtResponse) *NullableGetRecordRpzTxtResponse {
	return &NullableGetRecordRpzTxtResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
