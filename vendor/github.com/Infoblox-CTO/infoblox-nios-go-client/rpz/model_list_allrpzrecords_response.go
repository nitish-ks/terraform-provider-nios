/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListAllrpzrecordsResponse - struct for ListAllrpzrecordsResponse
type ListAllrpzrecordsResponse struct {
	ListAllrpzrecordsResponseObject *ListAllrpzrecordsResponseObject
	ArrayOfAllrpzrecords            *[]Allrpzrecords
}

// ListAllrpzrecordsResponseObjectAsListAllrpzrecordsResponse is a convenience function that returns ListAllrpzrecordsResponseObject wrapped in ListAllrpzrecordsResponse
func ListAllrpzrecordsResponseObjectAsListAllrpzrecordsResponse(v *ListAllrpzrecordsResponseObject) ListAllrpzrecordsResponse {
	return ListAllrpzrecordsResponse{
		ListAllrpzrecordsResponseObject: v,
	}
}

// []AllrpzrecordsAsListAllrpzrecordsResponse is a convenience function that returns []Allrpzrecords wrapped in ListAllrpzrecordsResponse
func ArrayOfAllrpzrecordsAsListAllrpzrecordsResponse(v *[]Allrpzrecords) ListAllrpzrecordsResponse {
	return ListAllrpzrecordsResponse{
		ArrayOfAllrpzrecords: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAllrpzrecordsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAllrpzrecordsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAllrpzrecordsResponseObject)
	if err == nil {
		jsonListAllrpzrecordsResponseObject, _ := json.Marshal(dst.ListAllrpzrecordsResponseObject)
		if string(jsonListAllrpzrecordsResponseObject) == "{}" { // empty struct
			dst.ListAllrpzrecordsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAllrpzrecordsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAllrpzrecords
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAllrpzrecords)
	if err == nil {
		jsonArrayOfAllrpzrecords, _ := json.Marshal(dst.ArrayOfAllrpzrecords)
		if string(jsonArrayOfAllrpzrecords) == "{}" { // empty struct
			dst.ArrayOfAllrpzrecords = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAllrpzrecords = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAllrpzrecordsResponseObject = nil
		dst.ArrayOfAllrpzrecords = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAllrpzrecordsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAllrpzrecordsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	if src.ListAllrpzrecordsResponseObject != nil {
		return json.Marshal(&src.ListAllrpzrecordsResponseObject)
	}

	if src.ArrayOfAllrpzrecords != nil {
		return json.Marshal(&src.ArrayOfAllrpzrecords)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAllrpzrecordsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAllrpzrecordsResponseObject != nil {
		return obj.ListAllrpzrecordsResponseObject
	}

	if obj.ArrayOfAllrpzrecords != nil {
		return obj.ArrayOfAllrpzrecords
	}

	// all schemas are nil
	return nil
}

type NullableListAllrpzrecordsResponse struct {
	value *ListAllrpzrecordsResponse
	isSet bool
}

func (v NullableListAllrpzrecordsResponse) Get() *ListAllrpzrecordsResponse {
	return v.value
}

func (v *NullableListAllrpzrecordsResponse) Set(val *ListAllrpzrecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllrpzrecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllrpzrecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllrpzrecordsResponse(val *ListAllrpzrecordsResponse) *NullableListAllrpzrecordsResponse {
	return &NullableListAllrpzrecordsResponse{value: val, isSet: true}
}

func (v NullableListAllrpzrecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllrpzrecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
