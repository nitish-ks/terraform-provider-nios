/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListOrderedresponsepolicyzonesResponse - struct for ListOrderedresponsepolicyzonesResponse
type ListOrderedresponsepolicyzonesResponse struct {
	ListOrderedresponsepolicyzonesResponseObject *ListOrderedresponsepolicyzonesResponseObject
	ArrayOfOrderedresponsepolicyzones            *[]Orderedresponsepolicyzones
}

// ListOrderedresponsepolicyzonesResponseObjectAsListOrderedresponsepolicyzonesResponse is a convenience function that returns ListOrderedresponsepolicyzonesResponseObject wrapped in ListOrderedresponsepolicyzonesResponse
func ListOrderedresponsepolicyzonesResponseObjectAsListOrderedresponsepolicyzonesResponse(v *ListOrderedresponsepolicyzonesResponseObject) ListOrderedresponsepolicyzonesResponse {
	return ListOrderedresponsepolicyzonesResponse{
		ListOrderedresponsepolicyzonesResponseObject: v,
	}
}

// []OrderedresponsepolicyzonesAsListOrderedresponsepolicyzonesResponse is a convenience function that returns []Orderedresponsepolicyzones wrapped in ListOrderedresponsepolicyzonesResponse
func ArrayOfOrderedresponsepolicyzonesAsListOrderedresponsepolicyzonesResponse(v *[]Orderedresponsepolicyzones) ListOrderedresponsepolicyzonesResponse {
	return ListOrderedresponsepolicyzonesResponse{
		ArrayOfOrderedresponsepolicyzones: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListOrderedresponsepolicyzonesResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListOrderedresponsepolicyzonesResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListOrderedresponsepolicyzonesResponseObject)
	if err == nil {
		jsonListOrderedresponsepolicyzonesResponseObject, _ := json.Marshal(dst.ListOrderedresponsepolicyzonesResponseObject)
		if string(jsonListOrderedresponsepolicyzonesResponseObject) == "{}" { // empty struct
			dst.ListOrderedresponsepolicyzonesResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListOrderedresponsepolicyzonesResponseObject = nil
	}

	// try to unmarshal data into ArrayOfOrderedresponsepolicyzones
	err = newStrictDecoder(data).Decode(&dst.ArrayOfOrderedresponsepolicyzones)
	if err == nil {
		jsonArrayOfOrderedresponsepolicyzones, _ := json.Marshal(dst.ArrayOfOrderedresponsepolicyzones)
		if string(jsonArrayOfOrderedresponsepolicyzones) == "{}" { // empty struct
			dst.ArrayOfOrderedresponsepolicyzones = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfOrderedresponsepolicyzones = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListOrderedresponsepolicyzonesResponseObject = nil
		dst.ArrayOfOrderedresponsepolicyzones = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListOrderedresponsepolicyzonesResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListOrderedresponsepolicyzonesResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListOrderedresponsepolicyzonesResponse) MarshalJSON() ([]byte, error) {
	if src.ListOrderedresponsepolicyzonesResponseObject != nil {
		return json.Marshal(&src.ListOrderedresponsepolicyzonesResponseObject)
	}

	if src.ArrayOfOrderedresponsepolicyzones != nil {
		return json.Marshal(&src.ArrayOfOrderedresponsepolicyzones)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListOrderedresponsepolicyzonesResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListOrderedresponsepolicyzonesResponseObject != nil {
		return obj.ListOrderedresponsepolicyzonesResponseObject
	}

	if obj.ArrayOfOrderedresponsepolicyzones != nil {
		return obj.ArrayOfOrderedresponsepolicyzones
	}

	// all schemas are nil
	return nil
}

type NullableListOrderedresponsepolicyzonesResponse struct {
	value *ListOrderedresponsepolicyzonesResponse
	isSet bool
}

func (v NullableListOrderedresponsepolicyzonesResponse) Get() *ListOrderedresponsepolicyzonesResponse {
	return v.value
}

func (v *NullableListOrderedresponsepolicyzonesResponse) Set(val *ListOrderedresponsepolicyzonesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrderedresponsepolicyzonesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrderedresponsepolicyzonesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrderedresponsepolicyzonesResponse(val *ListOrderedresponsepolicyzonesResponse) *NullableListOrderedresponsepolicyzonesResponse {
	return &NullableListOrderedresponsepolicyzonesResponse{value: val, isSet: true}
}

func (v NullableListOrderedresponsepolicyzonesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrderedresponsepolicyzonesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
