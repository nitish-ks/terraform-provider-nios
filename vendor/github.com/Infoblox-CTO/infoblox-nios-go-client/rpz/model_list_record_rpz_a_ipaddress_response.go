/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzAIpaddressResponse - struct for ListRecordRpzAIpaddressResponse
type ListRecordRpzAIpaddressResponse struct {
	ListRecordRpzAIpaddressResponseObject *ListRecordRpzAIpaddressResponseObject
	ArrayOfRecordRpzAIpaddress            *[]RecordRpzAIpaddress
}

// ListRecordRpzAIpaddressResponseObjectAsListRecordRpzAIpaddressResponse is a convenience function that returns ListRecordRpzAIpaddressResponseObject wrapped in ListRecordRpzAIpaddressResponse
func ListRecordRpzAIpaddressResponseObjectAsListRecordRpzAIpaddressResponse(v *ListRecordRpzAIpaddressResponseObject) ListRecordRpzAIpaddressResponse {
	return ListRecordRpzAIpaddressResponse{
		ListRecordRpzAIpaddressResponseObject: v,
	}
}

// []RecordRpzAIpaddressAsListRecordRpzAIpaddressResponse is a convenience function that returns []RecordRpzAIpaddress wrapped in ListRecordRpzAIpaddressResponse
func ArrayOfRecordRpzAIpaddressAsListRecordRpzAIpaddressResponse(v *[]RecordRpzAIpaddress) ListRecordRpzAIpaddressResponse {
	return ListRecordRpzAIpaddressResponse{
		ArrayOfRecordRpzAIpaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzAIpaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzAIpaddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzAIpaddressResponseObject)
	if err == nil {
		jsonListRecordRpzAIpaddressResponseObject, _ := json.Marshal(dst.ListRecordRpzAIpaddressResponseObject)
		if string(jsonListRecordRpzAIpaddressResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzAIpaddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzAIpaddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzAIpaddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzAIpaddress)
	if err == nil {
		jsonArrayOfRecordRpzAIpaddress, _ := json.Marshal(dst.ArrayOfRecordRpzAIpaddress)
		if string(jsonArrayOfRecordRpzAIpaddress) == "{}" { // empty struct
			dst.ArrayOfRecordRpzAIpaddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzAIpaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzAIpaddressResponseObject = nil
		dst.ArrayOfRecordRpzAIpaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzAIpaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzAIpaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzAIpaddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzAIpaddressResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzAIpaddressResponseObject)
	}

	if src.ArrayOfRecordRpzAIpaddress != nil {
		return json.Marshal(&src.ArrayOfRecordRpzAIpaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzAIpaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzAIpaddressResponseObject != nil {
		return obj.ListRecordRpzAIpaddressResponseObject
	}

	if obj.ArrayOfRecordRpzAIpaddress != nil {
		return obj.ArrayOfRecordRpzAIpaddress
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzAIpaddressResponse struct {
	value *ListRecordRpzAIpaddressResponse
	isSet bool
}

func (v NullableListRecordRpzAIpaddressResponse) Get() *ListRecordRpzAIpaddressResponse {
	return v.value
}

func (v *NullableListRecordRpzAIpaddressResponse) Set(val *ListRecordRpzAIpaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzAIpaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzAIpaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzAIpaddressResponse(val *ListRecordRpzAIpaddressResponse) *NullableListRecordRpzAIpaddressResponse {
	return &NullableListRecordRpzAIpaddressResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzAIpaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzAIpaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
