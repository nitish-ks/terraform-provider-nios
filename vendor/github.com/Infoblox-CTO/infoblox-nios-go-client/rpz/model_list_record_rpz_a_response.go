/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzAResponse - struct for ListRecordRpzAResponse
type ListRecordRpzAResponse struct {
	ListRecordRpzAResponseObject *ListRecordRpzAResponseObject
	ArrayOfRecordRpzA            *[]RecordRpzA
}

// ListRecordRpzAResponseObjectAsListRecordRpzAResponse is a convenience function that returns ListRecordRpzAResponseObject wrapped in ListRecordRpzAResponse
func ListRecordRpzAResponseObjectAsListRecordRpzAResponse(v *ListRecordRpzAResponseObject) ListRecordRpzAResponse {
	return ListRecordRpzAResponse{
		ListRecordRpzAResponseObject: v,
	}
}

// []RecordRpzAAsListRecordRpzAResponse is a convenience function that returns []RecordRpzA wrapped in ListRecordRpzAResponse
func ArrayOfRecordRpzAAsListRecordRpzAResponse(v *[]RecordRpzA) ListRecordRpzAResponse {
	return ListRecordRpzAResponse{
		ArrayOfRecordRpzA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzAResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzAResponseObject)
	if err == nil {
		jsonListRecordRpzAResponseObject, _ := json.Marshal(dst.ListRecordRpzAResponseObject)
		if string(jsonListRecordRpzAResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzAResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzAResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzA
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzA)
	if err == nil {
		jsonArrayOfRecordRpzA, _ := json.Marshal(dst.ArrayOfRecordRpzA)
		if string(jsonArrayOfRecordRpzA) == "{}" { // empty struct
			dst.ArrayOfRecordRpzA = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzAResponseObject = nil
		dst.ArrayOfRecordRpzA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzAResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzAResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzAResponseObject)
	}

	if src.ArrayOfRecordRpzA != nil {
		return json.Marshal(&src.ArrayOfRecordRpzA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzAResponseObject != nil {
		return obj.ListRecordRpzAResponseObject
	}

	if obj.ArrayOfRecordRpzA != nil {
		return obj.ArrayOfRecordRpzA
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzAResponse struct {
	value *ListRecordRpzAResponse
	isSet bool
}

func (v NullableListRecordRpzAResponse) Get() *ListRecordRpzAResponse {
	return v.value
}

func (v *NullableListRecordRpzAResponse) Set(val *ListRecordRpzAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzAResponse(val *ListRecordRpzAResponse) *NullableListRecordRpzAResponse {
	return &NullableListRecordRpzAResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
