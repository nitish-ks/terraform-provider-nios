/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzAaaaIpaddressResponse - struct for ListRecordRpzAaaaIpaddressResponse
type ListRecordRpzAaaaIpaddressResponse struct {
	ListRecordRpzAaaaIpaddressResponseObject *ListRecordRpzAaaaIpaddressResponseObject
	ArrayOfRecordRpzAaaaIpaddress            *[]RecordRpzAaaaIpaddress
}

// ListRecordRpzAaaaIpaddressResponseObjectAsListRecordRpzAaaaIpaddressResponse is a convenience function that returns ListRecordRpzAaaaIpaddressResponseObject wrapped in ListRecordRpzAaaaIpaddressResponse
func ListRecordRpzAaaaIpaddressResponseObjectAsListRecordRpzAaaaIpaddressResponse(v *ListRecordRpzAaaaIpaddressResponseObject) ListRecordRpzAaaaIpaddressResponse {
	return ListRecordRpzAaaaIpaddressResponse{
		ListRecordRpzAaaaIpaddressResponseObject: v,
	}
}

// []RecordRpzAaaaIpaddressAsListRecordRpzAaaaIpaddressResponse is a convenience function that returns []RecordRpzAaaaIpaddress wrapped in ListRecordRpzAaaaIpaddressResponse
func ArrayOfRecordRpzAaaaIpaddressAsListRecordRpzAaaaIpaddressResponse(v *[]RecordRpzAaaaIpaddress) ListRecordRpzAaaaIpaddressResponse {
	return ListRecordRpzAaaaIpaddressResponse{
		ArrayOfRecordRpzAaaaIpaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzAaaaIpaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzAaaaIpaddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzAaaaIpaddressResponseObject)
	if err == nil {
		jsonListRecordRpzAaaaIpaddressResponseObject, _ := json.Marshal(dst.ListRecordRpzAaaaIpaddressResponseObject)
		if string(jsonListRecordRpzAaaaIpaddressResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzAaaaIpaddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzAaaaIpaddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzAaaaIpaddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzAaaaIpaddress)
	if err == nil {
		jsonArrayOfRecordRpzAaaaIpaddress, _ := json.Marshal(dst.ArrayOfRecordRpzAaaaIpaddress)
		if string(jsonArrayOfRecordRpzAaaaIpaddress) == "{}" { // empty struct
			dst.ArrayOfRecordRpzAaaaIpaddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzAaaaIpaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzAaaaIpaddressResponseObject = nil
		dst.ArrayOfRecordRpzAaaaIpaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzAaaaIpaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzAaaaIpaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzAaaaIpaddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzAaaaIpaddressResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzAaaaIpaddressResponseObject)
	}

	if src.ArrayOfRecordRpzAaaaIpaddress != nil {
		return json.Marshal(&src.ArrayOfRecordRpzAaaaIpaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzAaaaIpaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzAaaaIpaddressResponseObject != nil {
		return obj.ListRecordRpzAaaaIpaddressResponseObject
	}

	if obj.ArrayOfRecordRpzAaaaIpaddress != nil {
		return obj.ArrayOfRecordRpzAaaaIpaddress
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzAaaaIpaddressResponse struct {
	value *ListRecordRpzAaaaIpaddressResponse
	isSet bool
}

func (v NullableListRecordRpzAaaaIpaddressResponse) Get() *ListRecordRpzAaaaIpaddressResponse {
	return v.value
}

func (v *NullableListRecordRpzAaaaIpaddressResponse) Set(val *ListRecordRpzAaaaIpaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzAaaaIpaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzAaaaIpaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzAaaaIpaddressResponse(val *ListRecordRpzAaaaIpaddressResponse) *NullableListRecordRpzAaaaIpaddressResponse {
	return &NullableListRecordRpzAaaaIpaddressResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzAaaaIpaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzAaaaIpaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
