/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzCnameClientipaddressResponse - struct for ListRecordRpzCnameClientipaddressResponse
type ListRecordRpzCnameClientipaddressResponse struct {
	ListRecordRpzCnameClientipaddressResponseObject *ListRecordRpzCnameClientipaddressResponseObject
	ArrayOfRecordRpzCnameClientipaddress            *[]RecordRpzCnameClientipaddress
}

// ListRecordRpzCnameClientipaddressResponseObjectAsListRecordRpzCnameClientipaddressResponse is a convenience function that returns ListRecordRpzCnameClientipaddressResponseObject wrapped in ListRecordRpzCnameClientipaddressResponse
func ListRecordRpzCnameClientipaddressResponseObjectAsListRecordRpzCnameClientipaddressResponse(v *ListRecordRpzCnameClientipaddressResponseObject) ListRecordRpzCnameClientipaddressResponse {
	return ListRecordRpzCnameClientipaddressResponse{
		ListRecordRpzCnameClientipaddressResponseObject: v,
	}
}

// []RecordRpzCnameClientipaddressAsListRecordRpzCnameClientipaddressResponse is a convenience function that returns []RecordRpzCnameClientipaddress wrapped in ListRecordRpzCnameClientipaddressResponse
func ArrayOfRecordRpzCnameClientipaddressAsListRecordRpzCnameClientipaddressResponse(v *[]RecordRpzCnameClientipaddress) ListRecordRpzCnameClientipaddressResponse {
	return ListRecordRpzCnameClientipaddressResponse{
		ArrayOfRecordRpzCnameClientipaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzCnameClientipaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzCnameClientipaddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzCnameClientipaddressResponseObject)
	if err == nil {
		jsonListRecordRpzCnameClientipaddressResponseObject, _ := json.Marshal(dst.ListRecordRpzCnameClientipaddressResponseObject)
		if string(jsonListRecordRpzCnameClientipaddressResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzCnameClientipaddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzCnameClientipaddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzCnameClientipaddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzCnameClientipaddress)
	if err == nil {
		jsonArrayOfRecordRpzCnameClientipaddress, _ := json.Marshal(dst.ArrayOfRecordRpzCnameClientipaddress)
		if string(jsonArrayOfRecordRpzCnameClientipaddress) == "{}" { // empty struct
			dst.ArrayOfRecordRpzCnameClientipaddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzCnameClientipaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzCnameClientipaddressResponseObject = nil
		dst.ArrayOfRecordRpzCnameClientipaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzCnameClientipaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzCnameClientipaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzCnameClientipaddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzCnameClientipaddressResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzCnameClientipaddressResponseObject)
	}

	if src.ArrayOfRecordRpzCnameClientipaddress != nil {
		return json.Marshal(&src.ArrayOfRecordRpzCnameClientipaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzCnameClientipaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzCnameClientipaddressResponseObject != nil {
		return obj.ListRecordRpzCnameClientipaddressResponseObject
	}

	if obj.ArrayOfRecordRpzCnameClientipaddress != nil {
		return obj.ArrayOfRecordRpzCnameClientipaddress
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzCnameClientipaddressResponse struct {
	value *ListRecordRpzCnameClientipaddressResponse
	isSet bool
}

func (v NullableListRecordRpzCnameClientipaddressResponse) Get() *ListRecordRpzCnameClientipaddressResponse {
	return v.value
}

func (v *NullableListRecordRpzCnameClientipaddressResponse) Set(val *ListRecordRpzCnameClientipaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzCnameClientipaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzCnameClientipaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzCnameClientipaddressResponse(val *ListRecordRpzCnameClientipaddressResponse) *NullableListRecordRpzCnameClientipaddressResponse {
	return &NullableListRecordRpzCnameClientipaddressResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzCnameClientipaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzCnameClientipaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
