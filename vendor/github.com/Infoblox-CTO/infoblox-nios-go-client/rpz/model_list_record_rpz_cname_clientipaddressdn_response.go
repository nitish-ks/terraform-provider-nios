/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzCnameClientipaddressdnResponse - struct for ListRecordRpzCnameClientipaddressdnResponse
type ListRecordRpzCnameClientipaddressdnResponse struct {
	ListRecordRpzCnameClientipaddressdnResponseObject *ListRecordRpzCnameClientipaddressdnResponseObject
	ArrayOfRecordRpzCnameClientipaddressdn            *[]RecordRpzCnameClientipaddressdn
}

// ListRecordRpzCnameClientipaddressdnResponseObjectAsListRecordRpzCnameClientipaddressdnResponse is a convenience function that returns ListRecordRpzCnameClientipaddressdnResponseObject wrapped in ListRecordRpzCnameClientipaddressdnResponse
func ListRecordRpzCnameClientipaddressdnResponseObjectAsListRecordRpzCnameClientipaddressdnResponse(v *ListRecordRpzCnameClientipaddressdnResponseObject) ListRecordRpzCnameClientipaddressdnResponse {
	return ListRecordRpzCnameClientipaddressdnResponse{
		ListRecordRpzCnameClientipaddressdnResponseObject: v,
	}
}

// []RecordRpzCnameClientipaddressdnAsListRecordRpzCnameClientipaddressdnResponse is a convenience function that returns []RecordRpzCnameClientipaddressdn wrapped in ListRecordRpzCnameClientipaddressdnResponse
func ArrayOfRecordRpzCnameClientipaddressdnAsListRecordRpzCnameClientipaddressdnResponse(v *[]RecordRpzCnameClientipaddressdn) ListRecordRpzCnameClientipaddressdnResponse {
	return ListRecordRpzCnameClientipaddressdnResponse{
		ArrayOfRecordRpzCnameClientipaddressdn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzCnameClientipaddressdnResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzCnameClientipaddressdnResponseObject)
	if err == nil {
		jsonListRecordRpzCnameClientipaddressdnResponseObject, _ := json.Marshal(dst.ListRecordRpzCnameClientipaddressdnResponseObject)
		if string(jsonListRecordRpzCnameClientipaddressdnResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzCnameClientipaddressdnResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzCnameClientipaddressdnResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzCnameClientipaddressdn
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzCnameClientipaddressdn)
	if err == nil {
		jsonArrayOfRecordRpzCnameClientipaddressdn, _ := json.Marshal(dst.ArrayOfRecordRpzCnameClientipaddressdn)
		if string(jsonArrayOfRecordRpzCnameClientipaddressdn) == "{}" { // empty struct
			dst.ArrayOfRecordRpzCnameClientipaddressdn = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzCnameClientipaddressdn = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzCnameClientipaddressdnResponseObject = nil
		dst.ArrayOfRecordRpzCnameClientipaddressdn = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzCnameClientipaddressdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzCnameClientipaddressdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzCnameClientipaddressdnResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzCnameClientipaddressdnResponseObject)
	}

	if src.ArrayOfRecordRpzCnameClientipaddressdn != nil {
		return json.Marshal(&src.ArrayOfRecordRpzCnameClientipaddressdn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzCnameClientipaddressdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzCnameClientipaddressdnResponseObject != nil {
		return obj.ListRecordRpzCnameClientipaddressdnResponseObject
	}

	if obj.ArrayOfRecordRpzCnameClientipaddressdn != nil {
		return obj.ArrayOfRecordRpzCnameClientipaddressdn
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzCnameClientipaddressdnResponse struct {
	value *ListRecordRpzCnameClientipaddressdnResponse
	isSet bool
}

func (v NullableListRecordRpzCnameClientipaddressdnResponse) Get() *ListRecordRpzCnameClientipaddressdnResponse {
	return v.value
}

func (v *NullableListRecordRpzCnameClientipaddressdnResponse) Set(val *ListRecordRpzCnameClientipaddressdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzCnameClientipaddressdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzCnameClientipaddressdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzCnameClientipaddressdnResponse(val *ListRecordRpzCnameClientipaddressdnResponse) *NullableListRecordRpzCnameClientipaddressdnResponse {
	return &NullableListRecordRpzCnameClientipaddressdnResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzCnameClientipaddressdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzCnameClientipaddressdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
