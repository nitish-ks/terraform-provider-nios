/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzCnameIpaddressResponse - struct for ListRecordRpzCnameIpaddressResponse
type ListRecordRpzCnameIpaddressResponse struct {
	ListRecordRpzCnameIpaddressResponseObject *ListRecordRpzCnameIpaddressResponseObject
	ArrayOfRecordRpzCnameIpaddress            *[]RecordRpzCnameIpaddress
}

// ListRecordRpzCnameIpaddressResponseObjectAsListRecordRpzCnameIpaddressResponse is a convenience function that returns ListRecordRpzCnameIpaddressResponseObject wrapped in ListRecordRpzCnameIpaddressResponse
func ListRecordRpzCnameIpaddressResponseObjectAsListRecordRpzCnameIpaddressResponse(v *ListRecordRpzCnameIpaddressResponseObject) ListRecordRpzCnameIpaddressResponse {
	return ListRecordRpzCnameIpaddressResponse{
		ListRecordRpzCnameIpaddressResponseObject: v,
	}
}

// []RecordRpzCnameIpaddressAsListRecordRpzCnameIpaddressResponse is a convenience function that returns []RecordRpzCnameIpaddress wrapped in ListRecordRpzCnameIpaddressResponse
func ArrayOfRecordRpzCnameIpaddressAsListRecordRpzCnameIpaddressResponse(v *[]RecordRpzCnameIpaddress) ListRecordRpzCnameIpaddressResponse {
	return ListRecordRpzCnameIpaddressResponse{
		ArrayOfRecordRpzCnameIpaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzCnameIpaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzCnameIpaddressResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzCnameIpaddressResponseObject)
	if err == nil {
		jsonListRecordRpzCnameIpaddressResponseObject, _ := json.Marshal(dst.ListRecordRpzCnameIpaddressResponseObject)
		if string(jsonListRecordRpzCnameIpaddressResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzCnameIpaddressResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzCnameIpaddressResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzCnameIpaddress
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzCnameIpaddress)
	if err == nil {
		jsonArrayOfRecordRpzCnameIpaddress, _ := json.Marshal(dst.ArrayOfRecordRpzCnameIpaddress)
		if string(jsonArrayOfRecordRpzCnameIpaddress) == "{}" { // empty struct
			dst.ArrayOfRecordRpzCnameIpaddress = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzCnameIpaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzCnameIpaddressResponseObject = nil
		dst.ArrayOfRecordRpzCnameIpaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzCnameIpaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzCnameIpaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzCnameIpaddressResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzCnameIpaddressResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzCnameIpaddressResponseObject)
	}

	if src.ArrayOfRecordRpzCnameIpaddress != nil {
		return json.Marshal(&src.ArrayOfRecordRpzCnameIpaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzCnameIpaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzCnameIpaddressResponseObject != nil {
		return obj.ListRecordRpzCnameIpaddressResponseObject
	}

	if obj.ArrayOfRecordRpzCnameIpaddress != nil {
		return obj.ArrayOfRecordRpzCnameIpaddress
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzCnameIpaddressResponse struct {
	value *ListRecordRpzCnameIpaddressResponse
	isSet bool
}

func (v NullableListRecordRpzCnameIpaddressResponse) Get() *ListRecordRpzCnameIpaddressResponse {
	return v.value
}

func (v *NullableListRecordRpzCnameIpaddressResponse) Set(val *ListRecordRpzCnameIpaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzCnameIpaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzCnameIpaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzCnameIpaddressResponse(val *ListRecordRpzCnameIpaddressResponse) *NullableListRecordRpzCnameIpaddressResponse {
	return &NullableListRecordRpzCnameIpaddressResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzCnameIpaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzCnameIpaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
