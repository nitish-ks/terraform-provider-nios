/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzCnameIpaddressdnResponse - struct for ListRecordRpzCnameIpaddressdnResponse
type ListRecordRpzCnameIpaddressdnResponse struct {
	ListRecordRpzCnameIpaddressdnResponseObject *ListRecordRpzCnameIpaddressdnResponseObject
	ArrayOfRecordRpzCnameIpaddressdn            *[]RecordRpzCnameIpaddressdn
}

// ListRecordRpzCnameIpaddressdnResponseObjectAsListRecordRpzCnameIpaddressdnResponse is a convenience function that returns ListRecordRpzCnameIpaddressdnResponseObject wrapped in ListRecordRpzCnameIpaddressdnResponse
func ListRecordRpzCnameIpaddressdnResponseObjectAsListRecordRpzCnameIpaddressdnResponse(v *ListRecordRpzCnameIpaddressdnResponseObject) ListRecordRpzCnameIpaddressdnResponse {
	return ListRecordRpzCnameIpaddressdnResponse{
		ListRecordRpzCnameIpaddressdnResponseObject: v,
	}
}

// []RecordRpzCnameIpaddressdnAsListRecordRpzCnameIpaddressdnResponse is a convenience function that returns []RecordRpzCnameIpaddressdn wrapped in ListRecordRpzCnameIpaddressdnResponse
func ArrayOfRecordRpzCnameIpaddressdnAsListRecordRpzCnameIpaddressdnResponse(v *[]RecordRpzCnameIpaddressdn) ListRecordRpzCnameIpaddressdnResponse {
	return ListRecordRpzCnameIpaddressdnResponse{
		ArrayOfRecordRpzCnameIpaddressdn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzCnameIpaddressdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzCnameIpaddressdnResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzCnameIpaddressdnResponseObject)
	if err == nil {
		jsonListRecordRpzCnameIpaddressdnResponseObject, _ := json.Marshal(dst.ListRecordRpzCnameIpaddressdnResponseObject)
		if string(jsonListRecordRpzCnameIpaddressdnResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzCnameIpaddressdnResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzCnameIpaddressdnResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzCnameIpaddressdn
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzCnameIpaddressdn)
	if err == nil {
		jsonArrayOfRecordRpzCnameIpaddressdn, _ := json.Marshal(dst.ArrayOfRecordRpzCnameIpaddressdn)
		if string(jsonArrayOfRecordRpzCnameIpaddressdn) == "{}" { // empty struct
			dst.ArrayOfRecordRpzCnameIpaddressdn = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzCnameIpaddressdn = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzCnameIpaddressdnResponseObject = nil
		dst.ArrayOfRecordRpzCnameIpaddressdn = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzCnameIpaddressdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzCnameIpaddressdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzCnameIpaddressdnResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzCnameIpaddressdnResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzCnameIpaddressdnResponseObject)
	}

	if src.ArrayOfRecordRpzCnameIpaddressdn != nil {
		return json.Marshal(&src.ArrayOfRecordRpzCnameIpaddressdn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzCnameIpaddressdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzCnameIpaddressdnResponseObject != nil {
		return obj.ListRecordRpzCnameIpaddressdnResponseObject
	}

	if obj.ArrayOfRecordRpzCnameIpaddressdn != nil {
		return obj.ArrayOfRecordRpzCnameIpaddressdn
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzCnameIpaddressdnResponse struct {
	value *ListRecordRpzCnameIpaddressdnResponse
	isSet bool
}

func (v NullableListRecordRpzCnameIpaddressdnResponse) Get() *ListRecordRpzCnameIpaddressdnResponse {
	return v.value
}

func (v *NullableListRecordRpzCnameIpaddressdnResponse) Set(val *ListRecordRpzCnameIpaddressdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzCnameIpaddressdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzCnameIpaddressdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzCnameIpaddressdnResponse(val *ListRecordRpzCnameIpaddressdnResponse) *NullableListRecordRpzCnameIpaddressdnResponse {
	return &NullableListRecordRpzCnameIpaddressdnResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzCnameIpaddressdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzCnameIpaddressdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
