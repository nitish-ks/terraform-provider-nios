/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzCnameResponse - struct for ListRecordRpzCnameResponse
type ListRecordRpzCnameResponse struct {
	ListRecordRpzCnameResponseObject *ListRecordRpzCnameResponseObject
	ArrayOfRecordRpzCname            *[]RecordRpzCname
}

// ListRecordRpzCnameResponseObjectAsListRecordRpzCnameResponse is a convenience function that returns ListRecordRpzCnameResponseObject wrapped in ListRecordRpzCnameResponse
func ListRecordRpzCnameResponseObjectAsListRecordRpzCnameResponse(v *ListRecordRpzCnameResponseObject) ListRecordRpzCnameResponse {
	return ListRecordRpzCnameResponse{
		ListRecordRpzCnameResponseObject: v,
	}
}

// []RecordRpzCnameAsListRecordRpzCnameResponse is a convenience function that returns []RecordRpzCname wrapped in ListRecordRpzCnameResponse
func ArrayOfRecordRpzCnameAsListRecordRpzCnameResponse(v *[]RecordRpzCname) ListRecordRpzCnameResponse {
	return ListRecordRpzCnameResponse{
		ArrayOfRecordRpzCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzCnameResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzCnameResponseObject)
	if err == nil {
		jsonListRecordRpzCnameResponseObject, _ := json.Marshal(dst.ListRecordRpzCnameResponseObject)
		if string(jsonListRecordRpzCnameResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzCnameResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzCnameResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzCname
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzCname)
	if err == nil {
		jsonArrayOfRecordRpzCname, _ := json.Marshal(dst.ArrayOfRecordRpzCname)
		if string(jsonArrayOfRecordRpzCname) == "{}" { // empty struct
			dst.ArrayOfRecordRpzCname = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzCnameResponseObject = nil
		dst.ArrayOfRecordRpzCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzCnameResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzCnameResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzCnameResponseObject)
	}

	if src.ArrayOfRecordRpzCname != nil {
		return json.Marshal(&src.ArrayOfRecordRpzCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzCnameResponseObject != nil {
		return obj.ListRecordRpzCnameResponseObject
	}

	if obj.ArrayOfRecordRpzCname != nil {
		return obj.ArrayOfRecordRpzCname
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzCnameResponse struct {
	value *ListRecordRpzCnameResponse
	isSet bool
}

func (v NullableListRecordRpzCnameResponse) Get() *ListRecordRpzCnameResponse {
	return v.value
}

func (v *NullableListRecordRpzCnameResponse) Set(val *ListRecordRpzCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzCnameResponse(val *ListRecordRpzCnameResponse) *NullableListRecordRpzCnameResponse {
	return &NullableListRecordRpzCnameResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
