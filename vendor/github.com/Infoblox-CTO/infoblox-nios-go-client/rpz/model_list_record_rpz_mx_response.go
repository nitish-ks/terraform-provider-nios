/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzMxResponse - struct for ListRecordRpzMxResponse
type ListRecordRpzMxResponse struct {
	ListRecordRpzMxResponseObject *ListRecordRpzMxResponseObject
	ArrayOfRecordRpzMx            *[]RecordRpzMx
}

// ListRecordRpzMxResponseObjectAsListRecordRpzMxResponse is a convenience function that returns ListRecordRpzMxResponseObject wrapped in ListRecordRpzMxResponse
func ListRecordRpzMxResponseObjectAsListRecordRpzMxResponse(v *ListRecordRpzMxResponseObject) ListRecordRpzMxResponse {
	return ListRecordRpzMxResponse{
		ListRecordRpzMxResponseObject: v,
	}
}

// []RecordRpzMxAsListRecordRpzMxResponse is a convenience function that returns []RecordRpzMx wrapped in ListRecordRpzMxResponse
func ArrayOfRecordRpzMxAsListRecordRpzMxResponse(v *[]RecordRpzMx) ListRecordRpzMxResponse {
	return ListRecordRpzMxResponse{
		ArrayOfRecordRpzMx: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzMxResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzMxResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzMxResponseObject)
	if err == nil {
		jsonListRecordRpzMxResponseObject, _ := json.Marshal(dst.ListRecordRpzMxResponseObject)
		if string(jsonListRecordRpzMxResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzMxResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzMxResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzMx
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzMx)
	if err == nil {
		jsonArrayOfRecordRpzMx, _ := json.Marshal(dst.ArrayOfRecordRpzMx)
		if string(jsonArrayOfRecordRpzMx) == "{}" { // empty struct
			dst.ArrayOfRecordRpzMx = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzMx = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzMxResponseObject = nil
		dst.ArrayOfRecordRpzMx = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzMxResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzMxResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzMxResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzMxResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzMxResponseObject)
	}

	if src.ArrayOfRecordRpzMx != nil {
		return json.Marshal(&src.ArrayOfRecordRpzMx)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzMxResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzMxResponseObject != nil {
		return obj.ListRecordRpzMxResponseObject
	}

	if obj.ArrayOfRecordRpzMx != nil {
		return obj.ArrayOfRecordRpzMx
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzMxResponse struct {
	value *ListRecordRpzMxResponse
	isSet bool
}

func (v NullableListRecordRpzMxResponse) Get() *ListRecordRpzMxResponse {
	return v.value
}

func (v *NullableListRecordRpzMxResponse) Set(val *ListRecordRpzMxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzMxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzMxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzMxResponse(val *ListRecordRpzMxResponse) *NullableListRecordRpzMxResponse {
	return &NullableListRecordRpzMxResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzMxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzMxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
