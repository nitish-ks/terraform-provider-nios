/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzPtrResponse - struct for ListRecordRpzPtrResponse
type ListRecordRpzPtrResponse struct {
	ListRecordRpzPtrResponseObject *ListRecordRpzPtrResponseObject
	ArrayOfRecordRpzPtr            *[]RecordRpzPtr
}

// ListRecordRpzPtrResponseObjectAsListRecordRpzPtrResponse is a convenience function that returns ListRecordRpzPtrResponseObject wrapped in ListRecordRpzPtrResponse
func ListRecordRpzPtrResponseObjectAsListRecordRpzPtrResponse(v *ListRecordRpzPtrResponseObject) ListRecordRpzPtrResponse {
	return ListRecordRpzPtrResponse{
		ListRecordRpzPtrResponseObject: v,
	}
}

// []RecordRpzPtrAsListRecordRpzPtrResponse is a convenience function that returns []RecordRpzPtr wrapped in ListRecordRpzPtrResponse
func ArrayOfRecordRpzPtrAsListRecordRpzPtrResponse(v *[]RecordRpzPtr) ListRecordRpzPtrResponse {
	return ListRecordRpzPtrResponse{
		ArrayOfRecordRpzPtr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzPtrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzPtrResponseObject)
	if err == nil {
		jsonListRecordRpzPtrResponseObject, _ := json.Marshal(dst.ListRecordRpzPtrResponseObject)
		if string(jsonListRecordRpzPtrResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzPtrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzPtrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzPtr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzPtr)
	if err == nil {
		jsonArrayOfRecordRpzPtr, _ := json.Marshal(dst.ArrayOfRecordRpzPtr)
		if string(jsonArrayOfRecordRpzPtr) == "{}" { // empty struct
			dst.ArrayOfRecordRpzPtr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzPtr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzPtrResponseObject = nil
		dst.ArrayOfRecordRpzPtr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzPtrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzPtrResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzPtrResponseObject)
	}

	if src.ArrayOfRecordRpzPtr != nil {
		return json.Marshal(&src.ArrayOfRecordRpzPtr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzPtrResponseObject != nil {
		return obj.ListRecordRpzPtrResponseObject
	}

	if obj.ArrayOfRecordRpzPtr != nil {
		return obj.ArrayOfRecordRpzPtr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzPtrResponse struct {
	value *ListRecordRpzPtrResponse
	isSet bool
}

func (v NullableListRecordRpzPtrResponse) Get() *ListRecordRpzPtrResponse {
	return v.value
}

func (v *NullableListRecordRpzPtrResponse) Set(val *ListRecordRpzPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzPtrResponse(val *ListRecordRpzPtrResponse) *NullableListRecordRpzPtrResponse {
	return &NullableListRecordRpzPtrResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
