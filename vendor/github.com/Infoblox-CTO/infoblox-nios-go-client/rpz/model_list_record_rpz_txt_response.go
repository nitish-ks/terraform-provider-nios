/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzTxtResponse - struct for ListRecordRpzTxtResponse
type ListRecordRpzTxtResponse struct {
	ListRecordRpzTxtResponseObject *ListRecordRpzTxtResponseObject
	ArrayOfRecordRpzTxt            *[]RecordRpzTxt
}

// ListRecordRpzTxtResponseObjectAsListRecordRpzTxtResponse is a convenience function that returns ListRecordRpzTxtResponseObject wrapped in ListRecordRpzTxtResponse
func ListRecordRpzTxtResponseObjectAsListRecordRpzTxtResponse(v *ListRecordRpzTxtResponseObject) ListRecordRpzTxtResponse {
	return ListRecordRpzTxtResponse{
		ListRecordRpzTxtResponseObject: v,
	}
}

// []RecordRpzTxtAsListRecordRpzTxtResponse is a convenience function that returns []RecordRpzTxt wrapped in ListRecordRpzTxtResponse
func ArrayOfRecordRpzTxtAsListRecordRpzTxtResponse(v *[]RecordRpzTxt) ListRecordRpzTxtResponse {
	return ListRecordRpzTxtResponse{
		ArrayOfRecordRpzTxt: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzTxtResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzTxtResponseObject)
	if err == nil {
		jsonListRecordRpzTxtResponseObject, _ := json.Marshal(dst.ListRecordRpzTxtResponseObject)
		if string(jsonListRecordRpzTxtResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzTxtResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzTxtResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzTxt
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzTxt)
	if err == nil {
		jsonArrayOfRecordRpzTxt, _ := json.Marshal(dst.ArrayOfRecordRpzTxt)
		if string(jsonArrayOfRecordRpzTxt) == "{}" { // empty struct
			dst.ArrayOfRecordRpzTxt = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzTxt = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzTxtResponseObject = nil
		dst.ArrayOfRecordRpzTxt = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzTxtResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzTxtResponseObject)
	}

	if src.ArrayOfRecordRpzTxt != nil {
		return json.Marshal(&src.ArrayOfRecordRpzTxt)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzTxtResponseObject != nil {
		return obj.ListRecordRpzTxtResponseObject
	}

	if obj.ArrayOfRecordRpzTxt != nil {
		return obj.ArrayOfRecordRpzTxt
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzTxtResponse struct {
	value *ListRecordRpzTxtResponse
	isSet bool
}

func (v NullableListRecordRpzTxtResponse) Get() *ListRecordRpzTxtResponse {
	return v.value
}

func (v *NullableListRecordRpzTxtResponse) Set(val *ListRecordRpzTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzTxtResponse(val *ListRecordRpzTxtResponse) *NullableListRecordRpzTxtResponse {
	return &NullableListRecordRpzTxtResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
