/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
)

// checks if the RecordRpzCnameClientipaddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordRpzCnameClientipaddress{}

// RecordRpzCnameClientipaddress struct for RecordRpzCnameClientipaddress
type RecordRpzCnameClientipaddress struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The canonical name in FQDN format. This value can be in unicode format.
	Canonical *string `json:"canonical,omitempty"`
	// The comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Indicates whether the record is an IPv4 record. If the return value is \"true\", it is an IPv4 record. Ohterwise, it is an IPv6 record.
	IsIpv4 *bool `json:"is_ipv4,omitempty"`
	// The name for a record in FQDN format. This value cannot be in unicode format.
	Name *string `json:"name,omitempty"`
	// The name of a response policy zone in which the record resides.
	RpZone *string `json:"rp_zone,omitempty"`
	// The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordRpzCnameClientipaddress instantiates a new RecordRpzCnameClientipaddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordRpzCnameClientipaddress() *RecordRpzCnameClientipaddress {
	this := RecordRpzCnameClientipaddress{}
	return &this
}

// NewRecordRpzCnameClientipaddressWithDefaults instantiates a new RecordRpzCnameClientipaddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordRpzCnameClientipaddressWithDefaults() *RecordRpzCnameClientipaddress {
	this := RecordRpzCnameClientipaddress{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordRpzCnameClientipaddress) SetRef(v string) {
	o.Ref = &v
}

// GetCanonical returns the Canonical field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetCanonical() string {
	if o == nil || IsNil(o.Canonical) {
		var ret string
		return ret
	}
	return *o.Canonical
}

// GetCanonicalOk returns a tuple with the Canonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetCanonicalOk() (*string, bool) {
	if o == nil || IsNil(o.Canonical) {
		return nil, false
	}
	return o.Canonical, true
}

// HasCanonical returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasCanonical() bool {
	if o != nil && !IsNil(o.Canonical) {
		return true
	}

	return false
}

// SetCanonical gets a reference to the given string and assigns it to the Canonical field.
func (o *RecordRpzCnameClientipaddress) SetCanonical(v string) {
	o.Canonical = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordRpzCnameClientipaddress) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordRpzCnameClientipaddress) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordRpzCnameClientipaddress) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetIsIpv4 returns the IsIpv4 field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetIsIpv4() bool {
	if o == nil || IsNil(o.IsIpv4) {
		var ret bool
		return ret
	}
	return *o.IsIpv4
}

// GetIsIpv4Ok returns a tuple with the IsIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetIsIpv4Ok() (*bool, bool) {
	if o == nil || IsNil(o.IsIpv4) {
		return nil, false
	}
	return o.IsIpv4, true
}

// HasIsIpv4 returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasIsIpv4() bool {
	if o != nil && !IsNil(o.IsIpv4) {
		return true
	}

	return false
}

// SetIsIpv4 gets a reference to the given bool and assigns it to the IsIpv4 field.
func (o *RecordRpzCnameClientipaddress) SetIsIpv4(v bool) {
	o.IsIpv4 = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordRpzCnameClientipaddress) SetName(v string) {
	o.Name = &v
}

// GetRpZone returns the RpZone field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetRpZone() string {
	if o == nil || IsNil(o.RpZone) {
		var ret string
		return ret
	}
	return *o.RpZone
}

// GetRpZoneOk returns a tuple with the RpZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetRpZoneOk() (*string, bool) {
	if o == nil || IsNil(o.RpZone) {
		return nil, false
	}
	return o.RpZone, true
}

// HasRpZone returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasRpZone() bool {
	if o != nil && !IsNil(o.RpZone) {
		return true
	}

	return false
}

// SetRpZone gets a reference to the given string and assigns it to the RpZone field.
func (o *RecordRpzCnameClientipaddress) SetRpZone(v string) {
	o.RpZone = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordRpzCnameClientipaddress) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordRpzCnameClientipaddress) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordRpzCnameClientipaddress) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordRpzCnameClientipaddress) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzCnameClientipaddress) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordRpzCnameClientipaddress) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordRpzCnameClientipaddress) SetZone(v string) {
	o.Zone = &v
}

func (o RecordRpzCnameClientipaddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordRpzCnameClientipaddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Canonical) {
		toSerialize["canonical"] = o.Canonical
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.IsIpv4) {
		toSerialize["is_ipv4"] = o.IsIpv4
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RpZone) {
		toSerialize["rp_zone"] = o.RpZone
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordRpzCnameClientipaddress struct {
	value *RecordRpzCnameClientipaddress
	isSet bool
}

func (v NullableRecordRpzCnameClientipaddress) Get() *RecordRpzCnameClientipaddress {
	return v.value
}

func (v *NullableRecordRpzCnameClientipaddress) Set(val *RecordRpzCnameClientipaddress) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordRpzCnameClientipaddress) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordRpzCnameClientipaddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordRpzCnameClientipaddress(val *RecordRpzCnameClientipaddress) *NullableRecordRpzCnameClientipaddress {
	return &NullableRecordRpzCnameClientipaddress{value: val, isSet: true}
}

func (v NullableRecordRpzCnameClientipaddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordRpzCnameClientipaddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
