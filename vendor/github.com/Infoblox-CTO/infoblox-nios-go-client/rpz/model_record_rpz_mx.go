/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
)

// checks if the RecordRpzMx type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordRpzMx{}

// RecordRpzMx struct for RecordRpzMx
type RecordRpzMx struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The comment for the record; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Mail exchanger name in FQDN format. This value can be in unicode format.
	MailExchanger *string `json:"mail_exchanger,omitempty"`
	// The name for a record in FQDN format. This value cannot be in unicode format.
	Name *string `json:"name,omitempty"`
	// Preference value, 0 to 65535 (inclusive) in 32-bit unsigned integer format.
	Preference *int64 `json:"preference,omitempty"`
	// The name of a response policy zone in which the record resides.
	RpZone *string `json:"rp_zone,omitempty"`
	// The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides. Example: \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordRpzMx instantiates a new RecordRpzMx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordRpzMx() *RecordRpzMx {
	this := RecordRpzMx{}
	return &this
}

// NewRecordRpzMxWithDefaults instantiates a new RecordRpzMx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordRpzMxWithDefaults() *RecordRpzMx {
	this := RecordRpzMx{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordRpzMx) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordRpzMx) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordRpzMx) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordRpzMx) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordRpzMx) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordRpzMx) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordRpzMx) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordRpzMx) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordRpzMx) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *RecordRpzMx) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *RecordRpzMx) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *RecordRpzMx) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetMailExchanger returns the MailExchanger field value if set, zero value otherwise.
func (o *RecordRpzMx) GetMailExchanger() string {
	if o == nil || IsNil(o.MailExchanger) {
		var ret string
		return ret
	}
	return *o.MailExchanger
}

// GetMailExchangerOk returns a tuple with the MailExchanger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetMailExchangerOk() (*string, bool) {
	if o == nil || IsNil(o.MailExchanger) {
		return nil, false
	}
	return o.MailExchanger, true
}

// HasMailExchanger returns a boolean if a field has been set.
func (o *RecordRpzMx) HasMailExchanger() bool {
	if o != nil && !IsNil(o.MailExchanger) {
		return true
	}

	return false
}

// SetMailExchanger gets a reference to the given string and assigns it to the MailExchanger field.
func (o *RecordRpzMx) SetMailExchanger(v string) {
	o.MailExchanger = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordRpzMx) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordRpzMx) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordRpzMx) SetName(v string) {
	o.Name = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *RecordRpzMx) GetPreference() int64 {
	if o == nil || IsNil(o.Preference) {
		var ret int64
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetPreferenceOk() (*int64, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *RecordRpzMx) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given int64 and assigns it to the Preference field.
func (o *RecordRpzMx) SetPreference(v int64) {
	o.Preference = &v
}

// GetRpZone returns the RpZone field value if set, zero value otherwise.
func (o *RecordRpzMx) GetRpZone() string {
	if o == nil || IsNil(o.RpZone) {
		var ret string
		return ret
	}
	return *o.RpZone
}

// GetRpZoneOk returns a tuple with the RpZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetRpZoneOk() (*string, bool) {
	if o == nil || IsNil(o.RpZone) {
		return nil, false
	}
	return o.RpZone, true
}

// HasRpZone returns a boolean if a field has been set.
func (o *RecordRpzMx) HasRpZone() bool {
	if o != nil && !IsNil(o.RpZone) {
		return true
	}

	return false
}

// SetRpZone gets a reference to the given string and assigns it to the RpZone field.
func (o *RecordRpzMx) SetRpZone(v string) {
	o.RpZone = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordRpzMx) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordRpzMx) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordRpzMx) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordRpzMx) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordRpzMx) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordRpzMx) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordRpzMx) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordRpzMx) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordRpzMx) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordRpzMx) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRpzMx) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordRpzMx) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordRpzMx) SetZone(v string) {
	o.Zone = &v
}

func (o RecordRpzMx) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordRpzMx) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.MailExchanger) {
		toSerialize["mail_exchanger"] = o.MailExchanger
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.RpZone) {
		toSerialize["rp_zone"] = o.RpZone
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordRpzMx struct {
	value *RecordRpzMx
	isSet bool
}

func (v NullableRecordRpzMx) Get() *RecordRpzMx {
	return v.value
}

func (v *NullableRecordRpzMx) Set(val *RecordRpzMx) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordRpzMx) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordRpzMx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordRpzMx(val *RecordRpzMx) *NullableRecordRpzMx {
	return &NullableRecordRpzMx{value: val, isSet: true}
}

func (v NullableRecordRpzMx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordRpzMx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
