/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type AuthpolicyAPI interface {
	/*
		List Retrieve authpolicy objects

		Returns a list of authpolicy objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AuthpolicyAPIListRequest
	*/
	List(ctx context.Context) AuthpolicyAPIListRequest

	// ListExecute executes the request
	//  @return ListAuthpolicyResponse
	ListExecute(r AuthpolicyAPIListRequest) (*ListAuthpolicyResponse, *http.Response, error)
	/*
		Read Get a specific authpolicy object

		Returns a specific authpolicy object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the authpolicy object
		@return AuthpolicyAPIReadRequest
	*/
	Read(ctx context.Context, reference string) AuthpolicyAPIReadRequest

	// ReadExecute executes the request
	//  @return GetAuthpolicyResponse
	ReadExecute(r AuthpolicyAPIReadRequest) (*GetAuthpolicyResponse, *http.Response, error)
	/*
		Update Update a authpolicy object

		Updates a specific authpolicy object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the authpolicy object
		@return AuthpolicyAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) AuthpolicyAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateAuthpolicyResponse
	UpdateExecute(r AuthpolicyAPIUpdateRequest) (*UpdateAuthpolicyResponse, *http.Response, error)
}

// AuthpolicyAPIService AuthpolicyAPI service
type AuthpolicyAPIService internal.Service

type AuthpolicyAPIListRequest struct {
	ctx              context.Context
	ApiService       AuthpolicyAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r AuthpolicyAPIListRequest) ReturnFields(returnFields string) AuthpolicyAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AuthpolicyAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) AuthpolicyAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r AuthpolicyAPIListRequest) MaxResults(maxResults int32) AuthpolicyAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r AuthpolicyAPIListRequest) ReturnAsObject(returnAsObject int32) AuthpolicyAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r AuthpolicyAPIListRequest) Paging(paging int32) AuthpolicyAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r AuthpolicyAPIListRequest) PageId(pageId string) AuthpolicyAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r AuthpolicyAPIListRequest) Filters(filters map[string]interface{}) AuthpolicyAPIListRequest {
	r.filters = &filters
	return r
}

func (r AuthpolicyAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) AuthpolicyAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r AuthpolicyAPIListRequest) Execute() (*ListAuthpolicyResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve authpolicy objects

Returns a list of authpolicy objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AuthpolicyAPIListRequest
*/
func (a *AuthpolicyAPIService) List(ctx context.Context) AuthpolicyAPIListRequest {
	return AuthpolicyAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListAuthpolicyResponse
func (a *AuthpolicyAPIService) ListExecute(r AuthpolicyAPIListRequest) (*ListAuthpolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListAuthpolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AuthpolicyAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/authpolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthpolicyAPIReadRequest struct {
	ctx              context.Context
	ApiService       AuthpolicyAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r AuthpolicyAPIReadRequest) ReturnFields(returnFields string) AuthpolicyAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AuthpolicyAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) AuthpolicyAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r AuthpolicyAPIReadRequest) ReturnAsObject(returnAsObject int32) AuthpolicyAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AuthpolicyAPIReadRequest) Execute() (*GetAuthpolicyResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific authpolicy object

Returns a specific authpolicy object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the authpolicy object
	@return AuthpolicyAPIReadRequest
*/
func (a *AuthpolicyAPIService) Read(ctx context.Context, reference string) AuthpolicyAPIReadRequest {
	return AuthpolicyAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetAuthpolicyResponse
func (a *AuthpolicyAPIService) ReadExecute(r AuthpolicyAPIReadRequest) (*GetAuthpolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetAuthpolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AuthpolicyAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/authpolicy/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthpolicyAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       AuthpolicyAPI
	reference        string
	authpolicy       *Authpolicy
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r AuthpolicyAPIUpdateRequest) Authpolicy(authpolicy Authpolicy) AuthpolicyAPIUpdateRequest {
	r.authpolicy = &authpolicy
	return r
}

// Enter the field names followed by comma
func (r AuthpolicyAPIUpdateRequest) ReturnFields(returnFields string) AuthpolicyAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r AuthpolicyAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) AuthpolicyAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r AuthpolicyAPIUpdateRequest) ReturnAsObject(returnAsObject int32) AuthpolicyAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r AuthpolicyAPIUpdateRequest) Execute() (*UpdateAuthpolicyResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a authpolicy object

Updates a specific authpolicy object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the authpolicy object
	@return AuthpolicyAPIUpdateRequest
*/
func (a *AuthpolicyAPIService) Update(ctx context.Context, reference string) AuthpolicyAPIUpdateRequest {
	return AuthpolicyAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateAuthpolicyResponse
func (a *AuthpolicyAPIService) UpdateExecute(r AuthpolicyAPIUpdateRequest) (*UpdateAuthpolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateAuthpolicyResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "AuthpolicyAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/authpolicy/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authpolicy == nil {
		return localVarReturnValue, nil, internal.ReportError("authpolicy is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authpolicy
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
