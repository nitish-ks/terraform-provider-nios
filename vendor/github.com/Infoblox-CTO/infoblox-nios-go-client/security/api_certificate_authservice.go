/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type CertificateAuthserviceAPI interface {
	/*
		Create Create a certificate:authservice object

		Creates a new certificate:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return CertificateAuthserviceAPICreateRequest
	*/
	Create(ctx context.Context) CertificateAuthserviceAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateCertificateAuthserviceResponse
	CreateExecute(r CertificateAuthserviceAPICreateRequest) (*CreateCertificateAuthserviceResponse, *http.Response, error)
	/*
		Delete Delete a certificate:authservice object

		Deletes a specific certificate:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the certificate:authservice object
		@return CertificateAuthserviceAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) CertificateAuthserviceAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r CertificateAuthserviceAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve certificate:authservice objects

		Returns a list of certificate:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return CertificateAuthserviceAPIListRequest
	*/
	List(ctx context.Context) CertificateAuthserviceAPIListRequest

	// ListExecute executes the request
	//  @return ListCertificateAuthserviceResponse
	ListExecute(r CertificateAuthserviceAPIListRequest) (*ListCertificateAuthserviceResponse, *http.Response, error)
	/*
		Read Get a specific certificate:authservice object

		Returns a specific certificate:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the certificate:authservice object
		@return CertificateAuthserviceAPIReadRequest
	*/
	Read(ctx context.Context, reference string) CertificateAuthserviceAPIReadRequest

	// ReadExecute executes the request
	//  @return GetCertificateAuthserviceResponse
	ReadExecute(r CertificateAuthserviceAPIReadRequest) (*GetCertificateAuthserviceResponse, *http.Response, error)
	/*
		Update Update a certificate:authservice object

		Updates a specific certificate:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the certificate:authservice object
		@return CertificateAuthserviceAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) CertificateAuthserviceAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateCertificateAuthserviceResponse
	UpdateExecute(r CertificateAuthserviceAPIUpdateRequest) (*UpdateCertificateAuthserviceResponse, *http.Response, error)
}

// CertificateAuthserviceAPIService CertificateAuthserviceAPI service
type CertificateAuthserviceAPIService internal.Service

type CertificateAuthserviceAPICreateRequest struct {
	ctx                    context.Context
	ApiService             CertificateAuthserviceAPI
	certificateAuthservice *CertificateAuthservice
	returnFields           *string
	returnFieldsPlus       *string
	returnAsObject         *int32
}

// Object data to create
func (r CertificateAuthserviceAPICreateRequest) CertificateAuthservice(certificateAuthservice CertificateAuthservice) CertificateAuthserviceAPICreateRequest {
	r.certificateAuthservice = &certificateAuthservice
	return r
}

// Enter the field names followed by comma
func (r CertificateAuthserviceAPICreateRequest) ReturnFields(returnFields string) CertificateAuthserviceAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CertificateAuthserviceAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) CertificateAuthserviceAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r CertificateAuthserviceAPICreateRequest) ReturnAsObject(returnAsObject int32) CertificateAuthserviceAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r CertificateAuthserviceAPICreateRequest) Execute() (*CreateCertificateAuthserviceResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a certificate:authservice object

Creates a new certificate:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CertificateAuthserviceAPICreateRequest
*/
func (a *CertificateAuthserviceAPIService) Create(ctx context.Context) CertificateAuthserviceAPICreateRequest {
	return CertificateAuthserviceAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCertificateAuthserviceResponse
func (a *CertificateAuthserviceAPIService) CreateExecute(r CertificateAuthserviceAPICreateRequest) (*CreateCertificateAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateCertificateAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CertificateAuthserviceAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/certificate:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.certificateAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("certificateAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.certificateAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthserviceAPIDeleteRequest struct {
	ctx        context.Context
	ApiService CertificateAuthserviceAPI
	reference  string
}

func (r CertificateAuthserviceAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a certificate:authservice object

Deletes a specific certificate:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the certificate:authservice object
	@return CertificateAuthserviceAPIDeleteRequest
*/
func (a *CertificateAuthserviceAPIService) Delete(ctx context.Context, reference string) CertificateAuthserviceAPIDeleteRequest {
	return CertificateAuthserviceAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *CertificateAuthserviceAPIService) DeleteExecute(r CertificateAuthserviceAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CertificateAuthserviceAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/certificate:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CertificateAuthserviceAPIListRequest struct {
	ctx              context.Context
	ApiService       CertificateAuthserviceAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r CertificateAuthserviceAPIListRequest) ReturnFields(returnFields string) CertificateAuthserviceAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CertificateAuthserviceAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) CertificateAuthserviceAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r CertificateAuthserviceAPIListRequest) MaxResults(maxResults int32) CertificateAuthserviceAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r CertificateAuthserviceAPIListRequest) ReturnAsObject(returnAsObject int32) CertificateAuthserviceAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r CertificateAuthserviceAPIListRequest) Paging(paging int32) CertificateAuthserviceAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r CertificateAuthserviceAPIListRequest) PageId(pageId string) CertificateAuthserviceAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r CertificateAuthserviceAPIListRequest) Filters(filters map[string]interface{}) CertificateAuthserviceAPIListRequest {
	r.filters = &filters
	return r
}

func (r CertificateAuthserviceAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) CertificateAuthserviceAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r CertificateAuthserviceAPIListRequest) Execute() (*ListCertificateAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve certificate:authservice objects

Returns a list of certificate:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CertificateAuthserviceAPIListRequest
*/
func (a *CertificateAuthserviceAPIService) List(ctx context.Context) CertificateAuthserviceAPIListRequest {
	return CertificateAuthserviceAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListCertificateAuthserviceResponse
func (a *CertificateAuthserviceAPIService) ListExecute(r CertificateAuthserviceAPIListRequest) (*ListCertificateAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListCertificateAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CertificateAuthserviceAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/certificate:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthserviceAPIReadRequest struct {
	ctx              context.Context
	ApiService       CertificateAuthserviceAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r CertificateAuthserviceAPIReadRequest) ReturnFields(returnFields string) CertificateAuthserviceAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CertificateAuthserviceAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) CertificateAuthserviceAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r CertificateAuthserviceAPIReadRequest) ReturnAsObject(returnAsObject int32) CertificateAuthserviceAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r CertificateAuthserviceAPIReadRequest) Execute() (*GetCertificateAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific certificate:authservice object

Returns a specific certificate:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the certificate:authservice object
	@return CertificateAuthserviceAPIReadRequest
*/
func (a *CertificateAuthserviceAPIService) Read(ctx context.Context, reference string) CertificateAuthserviceAPIReadRequest {
	return CertificateAuthserviceAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetCertificateAuthserviceResponse
func (a *CertificateAuthserviceAPIService) ReadExecute(r CertificateAuthserviceAPIReadRequest) (*GetCertificateAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetCertificateAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CertificateAuthserviceAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/certificate:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthserviceAPIUpdateRequest struct {
	ctx                    context.Context
	ApiService             CertificateAuthserviceAPI
	reference              string
	certificateAuthservice *CertificateAuthservice
	returnFields           *string
	returnFieldsPlus       *string
	returnAsObject         *int32
}

// Object data to update
func (r CertificateAuthserviceAPIUpdateRequest) CertificateAuthservice(certificateAuthservice CertificateAuthservice) CertificateAuthserviceAPIUpdateRequest {
	r.certificateAuthservice = &certificateAuthservice
	return r
}

// Enter the field names followed by comma
func (r CertificateAuthserviceAPIUpdateRequest) ReturnFields(returnFields string) CertificateAuthserviceAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r CertificateAuthserviceAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) CertificateAuthserviceAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r CertificateAuthserviceAPIUpdateRequest) ReturnAsObject(returnAsObject int32) CertificateAuthserviceAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r CertificateAuthserviceAPIUpdateRequest) Execute() (*UpdateCertificateAuthserviceResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a certificate:authservice object

Updates a specific certificate:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the certificate:authservice object
	@return CertificateAuthserviceAPIUpdateRequest
*/
func (a *CertificateAuthserviceAPIService) Update(ctx context.Context, reference string) CertificateAuthserviceAPIUpdateRequest {
	return CertificateAuthserviceAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateCertificateAuthserviceResponse
func (a *CertificateAuthserviceAPIService) UpdateExecute(r CertificateAuthserviceAPIUpdateRequest) (*UpdateCertificateAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateCertificateAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "CertificateAuthserviceAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/certificate:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.certificateAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("certificateAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.certificateAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
