/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type HsmAllgroupsAPI interface {
	/*
		List Retrieve hsm:allgroups objects

		Returns a list of hsm:allgroups objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return HsmAllgroupsAPIListRequest
	*/
	List(ctx context.Context) HsmAllgroupsAPIListRequest

	// ListExecute executes the request
	//  @return ListHsmAllgroupsResponse
	ListExecute(r HsmAllgroupsAPIListRequest) (*ListHsmAllgroupsResponse, *http.Response, error)
	/*
		Read Get a specific hsm:allgroups object

		Returns a specific hsm:allgroups object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hsm:allgroups object
		@return HsmAllgroupsAPIReadRequest
	*/
	Read(ctx context.Context, reference string) HsmAllgroupsAPIReadRequest

	// ReadExecute executes the request
	//  @return GetHsmAllgroupsResponse
	ReadExecute(r HsmAllgroupsAPIReadRequest) (*GetHsmAllgroupsResponse, *http.Response, error)
	/*
		Update Update a hsm:allgroups object

		Updates a specific hsm:allgroups object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the hsm:allgroups object
		@return HsmAllgroupsAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) HsmAllgroupsAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateHsmAllgroupsResponse
	UpdateExecute(r HsmAllgroupsAPIUpdateRequest) (*UpdateHsmAllgroupsResponse, *http.Response, error)
}

// HsmAllgroupsAPIService HsmAllgroupsAPI service
type HsmAllgroupsAPIService internal.Service

type HsmAllgroupsAPIListRequest struct {
	ctx              context.Context
	ApiService       HsmAllgroupsAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r HsmAllgroupsAPIListRequest) ReturnFields(returnFields string) HsmAllgroupsAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmAllgroupsAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) HsmAllgroupsAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r HsmAllgroupsAPIListRequest) MaxResults(maxResults int32) HsmAllgroupsAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r HsmAllgroupsAPIListRequest) ReturnAsObject(returnAsObject int32) HsmAllgroupsAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r HsmAllgroupsAPIListRequest) Paging(paging int32) HsmAllgroupsAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r HsmAllgroupsAPIListRequest) PageId(pageId string) HsmAllgroupsAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r HsmAllgroupsAPIListRequest) Filters(filters map[string]interface{}) HsmAllgroupsAPIListRequest {
	r.filters = &filters
	return r
}

func (r HsmAllgroupsAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) HsmAllgroupsAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r HsmAllgroupsAPIListRequest) Execute() (*ListHsmAllgroupsResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve hsm:allgroups objects

Returns a list of hsm:allgroups objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return HsmAllgroupsAPIListRequest
*/
func (a *HsmAllgroupsAPIService) List(ctx context.Context) HsmAllgroupsAPIListRequest {
	return HsmAllgroupsAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListHsmAllgroupsResponse
func (a *HsmAllgroupsAPIService) ListExecute(r HsmAllgroupsAPIListRequest) (*ListHsmAllgroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListHsmAllgroupsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmAllgroupsAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:allgroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HsmAllgroupsAPIReadRequest struct {
	ctx              context.Context
	ApiService       HsmAllgroupsAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r HsmAllgroupsAPIReadRequest) ReturnFields(returnFields string) HsmAllgroupsAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmAllgroupsAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) HsmAllgroupsAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r HsmAllgroupsAPIReadRequest) ReturnAsObject(returnAsObject int32) HsmAllgroupsAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HsmAllgroupsAPIReadRequest) Execute() (*GetHsmAllgroupsResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific hsm:allgroups object

Returns a specific hsm:allgroups object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hsm:allgroups object
	@return HsmAllgroupsAPIReadRequest
*/
func (a *HsmAllgroupsAPIService) Read(ctx context.Context, reference string) HsmAllgroupsAPIReadRequest {
	return HsmAllgroupsAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetHsmAllgroupsResponse
func (a *HsmAllgroupsAPIService) ReadExecute(r HsmAllgroupsAPIReadRequest) (*GetHsmAllgroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetHsmAllgroupsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmAllgroupsAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:allgroups/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type HsmAllgroupsAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       HsmAllgroupsAPI
	reference        string
	hsmAllgroups     *HsmAllgroups
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r HsmAllgroupsAPIUpdateRequest) HsmAllgroups(hsmAllgroups HsmAllgroups) HsmAllgroupsAPIUpdateRequest {
	r.hsmAllgroups = &hsmAllgroups
	return r
}

// Enter the field names followed by comma
func (r HsmAllgroupsAPIUpdateRequest) ReturnFields(returnFields string) HsmAllgroupsAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r HsmAllgroupsAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) HsmAllgroupsAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r HsmAllgroupsAPIUpdateRequest) ReturnAsObject(returnAsObject int32) HsmAllgroupsAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r HsmAllgroupsAPIUpdateRequest) Execute() (*UpdateHsmAllgroupsResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a hsm:allgroups object

Updates a specific hsm:allgroups object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the hsm:allgroups object
	@return HsmAllgroupsAPIUpdateRequest
*/
func (a *HsmAllgroupsAPIService) Update(ctx context.Context, reference string) HsmAllgroupsAPIUpdateRequest {
	return HsmAllgroupsAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateHsmAllgroupsResponse
func (a *HsmAllgroupsAPIService) UpdateExecute(r HsmAllgroupsAPIUpdateRequest) (*UpdateHsmAllgroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateHsmAllgroupsResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "HsmAllgroupsAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/hsm:allgroups/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hsmAllgroups == nil {
		return localVarReturnValue, nil, internal.ReportError("hsmAllgroups is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hsmAllgroups
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
