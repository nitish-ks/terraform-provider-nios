/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type RadiusauthserviceAPI interface {
	/*
		Get Retrieve radius:authservice objects

		Returns a list of radius:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RadiusauthserviceAPIGetRequest
	*/
	Get(ctx context.Context) RadiusauthserviceAPIGetRequest

	// GetExecute executes the request
	//  @return ListRadiusAuthserviceResponse
	GetExecute(r RadiusauthserviceAPIGetRequest) (*ListRadiusAuthserviceResponse, *http.Response, error)
	/*
		Post Create a radius:authservice object

		Creates a new radius:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RadiusauthserviceAPIPostRequest
	*/
	Post(ctx context.Context) RadiusauthserviceAPIPostRequest

	// PostExecute executes the request
	//  @return CreateRadiusAuthserviceResponse
	PostExecute(r RadiusauthserviceAPIPostRequest) (*CreateRadiusAuthserviceResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a radius:authservice object

		Deletes a specific radius:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the radius:authservice object
		@return RadiusauthserviceAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) RadiusauthserviceAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r RadiusauthserviceAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific radius:authservice object

		Returns a specific radius:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the radius:authservice object
		@return RadiusauthserviceAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) RadiusauthserviceAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetRadiusAuthserviceResponse
	ReferenceGetExecute(r RadiusauthserviceAPIReferenceGetRequest) (*GetRadiusAuthserviceResponse, *http.Response, error)
	/*
		ReferencePut Update a radius:authservice object

		Updates a specific radius:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the radius:authservice object
		@return RadiusauthserviceAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) RadiusauthserviceAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateRadiusAuthserviceResponse
	ReferencePutExecute(r RadiusauthserviceAPIReferencePutRequest) (*UpdateRadiusAuthserviceResponse, *http.Response, error)
}

// RadiusauthserviceAPIService RadiusauthserviceAPI service
type RadiusauthserviceAPIService internal.Service

type RadiusauthserviceAPIGetRequest struct {
	ctx            context.Context
	ApiService     RadiusauthserviceAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r RadiusauthserviceAPIGetRequest) ReturnFields(returnFields string) RadiusauthserviceAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RadiusauthserviceAPIGetRequest) ReturnFields2(returnFields2 string) RadiusauthserviceAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r RadiusauthserviceAPIGetRequest) MaxResults(maxResults int32) RadiusauthserviceAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RadiusauthserviceAPIGetRequest) ReturnAsObject(returnAsObject int32) RadiusauthserviceAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RadiusauthserviceAPIGetRequest) Paging(paging int32) RadiusauthserviceAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RadiusauthserviceAPIGetRequest) PageId(pageId string) RadiusauthserviceAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r RadiusauthserviceAPIGetRequest) Filters(filters map[string]interface{}) RadiusauthserviceAPIGetRequest {
	r.filters = &filters
	return r
}

func (r RadiusauthserviceAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) RadiusauthserviceAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RadiusauthserviceAPIGetRequest) Execute() (*ListRadiusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve radius:authservice objects

Returns a list of radius:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RadiusauthserviceAPIGetRequest
*/
func (a *RadiusauthserviceAPIService) Get(ctx context.Context) RadiusauthserviceAPIGetRequest {
	return RadiusauthserviceAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRadiusAuthserviceResponse
func (a *RadiusauthserviceAPIService) GetExecute(r RadiusauthserviceAPIGetRequest) (*ListRadiusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRadiusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RadiusauthserviceAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/radius:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RadiusauthserviceAPIPostRequest struct {
	ctx               context.Context
	ApiService        RadiusauthserviceAPI
	radiusAuthservice *RadiusAuthservice
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to create
func (r RadiusauthserviceAPIPostRequest) RadiusAuthservice(radiusAuthservice RadiusAuthservice) RadiusauthserviceAPIPostRequest {
	r.radiusAuthservice = &radiusAuthservice
	return r
}

// Enter the field names followed by comma
func (r RadiusauthserviceAPIPostRequest) ReturnFields(returnFields string) RadiusauthserviceAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RadiusauthserviceAPIPostRequest) ReturnFields2(returnFields2 string) RadiusauthserviceAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RadiusauthserviceAPIPostRequest) ReturnAsObject(returnAsObject int32) RadiusauthserviceAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RadiusauthserviceAPIPostRequest) Execute() (*CreateRadiusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a radius:authservice object

Creates a new radius:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RadiusauthserviceAPIPostRequest
*/
func (a *RadiusauthserviceAPIService) Post(ctx context.Context) RadiusauthserviceAPIPostRequest {
	return RadiusauthserviceAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRadiusAuthserviceResponse
func (a *RadiusauthserviceAPIService) PostExecute(r RadiusauthserviceAPIPostRequest) (*CreateRadiusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRadiusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RadiusauthserviceAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/radius:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.radiusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("radiusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.radiusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RadiusauthserviceAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService RadiusauthserviceAPI
	reference  string
}

func (r RadiusauthserviceAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a radius:authservice object

Deletes a specific radius:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the radius:authservice object
	@return RadiusauthserviceAPIReferenceDeleteRequest
*/
func (a *RadiusauthserviceAPIService) ReferenceDelete(ctx context.Context, reference string) RadiusauthserviceAPIReferenceDeleteRequest {
	return RadiusauthserviceAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RadiusauthserviceAPIService) ReferenceDeleteExecute(r RadiusauthserviceAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RadiusauthserviceAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/radius:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RadiusauthserviceAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     RadiusauthserviceAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r RadiusauthserviceAPIReferenceGetRequest) ReturnFields(returnFields string) RadiusauthserviceAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RadiusauthserviceAPIReferenceGetRequest) ReturnFields2(returnFields2 string) RadiusauthserviceAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RadiusauthserviceAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) RadiusauthserviceAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RadiusauthserviceAPIReferenceGetRequest) Execute() (*GetRadiusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific radius:authservice object

Returns a specific radius:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the radius:authservice object
	@return RadiusauthserviceAPIReferenceGetRequest
*/
func (a *RadiusauthserviceAPIService) ReferenceGet(ctx context.Context, reference string) RadiusauthserviceAPIReferenceGetRequest {
	return RadiusauthserviceAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRadiusAuthserviceResponse
func (a *RadiusauthserviceAPIService) ReferenceGetExecute(r RadiusauthserviceAPIReferenceGetRequest) (*GetRadiusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRadiusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RadiusauthserviceAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/radius:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RadiusauthserviceAPIReferencePutRequest struct {
	ctx               context.Context
	ApiService        RadiusauthserviceAPI
	reference         string
	radiusAuthservice *RadiusAuthservice
	returnFields      *string
	returnFields2     *string
	returnAsObject    *int32
}

// Object data to update
func (r RadiusauthserviceAPIReferencePutRequest) RadiusAuthservice(radiusAuthservice RadiusAuthservice) RadiusauthserviceAPIReferencePutRequest {
	r.radiusAuthservice = &radiusAuthservice
	return r
}

// Enter the field names followed by comma
func (r RadiusauthserviceAPIReferencePutRequest) ReturnFields(returnFields string) RadiusauthserviceAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RadiusauthserviceAPIReferencePutRequest) ReturnFields2(returnFields2 string) RadiusauthserviceAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r RadiusauthserviceAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) RadiusauthserviceAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RadiusauthserviceAPIReferencePutRequest) Execute() (*UpdateRadiusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a radius:authservice object

Updates a specific radius:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the radius:authservice object
	@return RadiusauthserviceAPIReferencePutRequest
*/
func (a *RadiusauthserviceAPIService) ReferencePut(ctx context.Context, reference string) RadiusauthserviceAPIReferencePutRequest {
	return RadiusauthserviceAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRadiusAuthserviceResponse
func (a *RadiusauthserviceAPIService) ReferencePutExecute(r RadiusauthserviceAPIReferencePutRequest) (*UpdateRadiusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRadiusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RadiusauthserviceAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/radius:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.radiusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("radiusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.radiusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
