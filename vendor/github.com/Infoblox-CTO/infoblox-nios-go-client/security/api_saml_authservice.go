/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SamlAuthserviceAPI interface {
	/*
		Create Create a saml:authservice object

		Creates a new saml:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SamlAuthserviceAPICreateRequest
	*/
	Create(ctx context.Context) SamlAuthserviceAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateSamlAuthserviceResponse
	CreateExecute(r SamlAuthserviceAPICreateRequest) (*CreateSamlAuthserviceResponse, *http.Response, error)
	/*
		Delete Delete a saml:authservice object

		Deletes a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlAuthserviceAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) SamlAuthserviceAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r SamlAuthserviceAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve saml:authservice objects

		Returns a list of saml:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SamlAuthserviceAPIListRequest
	*/
	List(ctx context.Context) SamlAuthserviceAPIListRequest

	// ListExecute executes the request
	//  @return ListSamlAuthserviceResponse
	ListExecute(r SamlAuthserviceAPIListRequest) (*ListSamlAuthserviceResponse, *http.Response, error)
	/*
		Read Get a specific saml:authservice object

		Returns a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlAuthserviceAPIReadRequest
	*/
	Read(ctx context.Context, reference string) SamlAuthserviceAPIReadRequest

	// ReadExecute executes the request
	//  @return GetSamlAuthserviceResponse
	ReadExecute(r SamlAuthserviceAPIReadRequest) (*GetSamlAuthserviceResponse, *http.Response, error)
	/*
		Update Update a saml:authservice object

		Updates a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlAuthserviceAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) SamlAuthserviceAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateSamlAuthserviceResponse
	UpdateExecute(r SamlAuthserviceAPIUpdateRequest) (*UpdateSamlAuthserviceResponse, *http.Response, error)
}

// SamlAuthserviceAPIService SamlAuthserviceAPI service
type SamlAuthserviceAPIService internal.Service

type SamlAuthserviceAPICreateRequest struct {
	ctx              context.Context
	ApiService       SamlAuthserviceAPI
	samlAuthservice  *SamlAuthservice
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r SamlAuthserviceAPICreateRequest) SamlAuthservice(samlAuthservice SamlAuthservice) SamlAuthserviceAPICreateRequest {
	r.samlAuthservice = &samlAuthservice
	return r
}

// Enter the field names followed by comma
func (r SamlAuthserviceAPICreateRequest) ReturnFields(returnFields string) SamlAuthserviceAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlAuthserviceAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) SamlAuthserviceAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SamlAuthserviceAPICreateRequest) ReturnAsObject(returnAsObject int32) SamlAuthserviceAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlAuthserviceAPICreateRequest) Execute() (*CreateSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a saml:authservice object

Creates a new saml:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SamlAuthserviceAPICreateRequest
*/
func (a *SamlAuthserviceAPIService) Create(ctx context.Context) SamlAuthserviceAPICreateRequest {
	return SamlAuthserviceAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSamlAuthserviceResponse
func (a *SamlAuthserviceAPIService) CreateExecute(r SamlAuthserviceAPICreateRequest) (*CreateSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlAuthserviceAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.samlAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("samlAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.samlAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlAuthserviceAPIDeleteRequest struct {
	ctx        context.Context
	ApiService SamlAuthserviceAPI
	reference  string
}

func (r SamlAuthserviceAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a saml:authservice object

Deletes a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlAuthserviceAPIDeleteRequest
*/
func (a *SamlAuthserviceAPIService) Delete(ctx context.Context, reference string) SamlAuthserviceAPIDeleteRequest {
	return SamlAuthserviceAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SamlAuthserviceAPIService) DeleteExecute(r SamlAuthserviceAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlAuthserviceAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SamlAuthserviceAPIListRequest struct {
	ctx              context.Context
	ApiService       SamlAuthserviceAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r SamlAuthserviceAPIListRequest) ReturnFields(returnFields string) SamlAuthserviceAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlAuthserviceAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) SamlAuthserviceAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r SamlAuthserviceAPIListRequest) MaxResults(maxResults int32) SamlAuthserviceAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SamlAuthserviceAPIListRequest) ReturnAsObject(returnAsObject int32) SamlAuthserviceAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SamlAuthserviceAPIListRequest) Paging(paging int32) SamlAuthserviceAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SamlAuthserviceAPIListRequest) PageId(pageId string) SamlAuthserviceAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r SamlAuthserviceAPIListRequest) Filters(filters map[string]interface{}) SamlAuthserviceAPIListRequest {
	r.filters = &filters
	return r
}

func (r SamlAuthserviceAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) SamlAuthserviceAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SamlAuthserviceAPIListRequest) Execute() (*ListSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve saml:authservice objects

Returns a list of saml:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SamlAuthserviceAPIListRequest
*/
func (a *SamlAuthserviceAPIService) List(ctx context.Context) SamlAuthserviceAPIListRequest {
	return SamlAuthserviceAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSamlAuthserviceResponse
func (a *SamlAuthserviceAPIService) ListExecute(r SamlAuthserviceAPIListRequest) (*ListSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlAuthserviceAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlAuthserviceAPIReadRequest struct {
	ctx              context.Context
	ApiService       SamlAuthserviceAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r SamlAuthserviceAPIReadRequest) ReturnFields(returnFields string) SamlAuthserviceAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlAuthserviceAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) SamlAuthserviceAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SamlAuthserviceAPIReadRequest) ReturnAsObject(returnAsObject int32) SamlAuthserviceAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlAuthserviceAPIReadRequest) Execute() (*GetSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific saml:authservice object

Returns a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlAuthserviceAPIReadRequest
*/
func (a *SamlAuthserviceAPIService) Read(ctx context.Context, reference string) SamlAuthserviceAPIReadRequest {
	return SamlAuthserviceAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSamlAuthserviceResponse
func (a *SamlAuthserviceAPIService) ReadExecute(r SamlAuthserviceAPIReadRequest) (*GetSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlAuthserviceAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlAuthserviceAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       SamlAuthserviceAPI
	reference        string
	samlAuthservice  *SamlAuthservice
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r SamlAuthserviceAPIUpdateRequest) SamlAuthservice(samlAuthservice SamlAuthservice) SamlAuthserviceAPIUpdateRequest {
	r.samlAuthservice = &samlAuthservice
	return r
}

// Enter the field names followed by comma
func (r SamlAuthserviceAPIUpdateRequest) ReturnFields(returnFields string) SamlAuthserviceAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlAuthserviceAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) SamlAuthserviceAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SamlAuthserviceAPIUpdateRequest) ReturnAsObject(returnAsObject int32) SamlAuthserviceAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlAuthserviceAPIUpdateRequest) Execute() (*UpdateSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a saml:authservice object

Updates a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlAuthserviceAPIUpdateRequest
*/
func (a *SamlAuthserviceAPIService) Update(ctx context.Context, reference string) SamlAuthserviceAPIUpdateRequest {
	return SamlAuthserviceAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSamlAuthserviceResponse
func (a *SamlAuthserviceAPIService) UpdateExecute(r SamlAuthserviceAPIUpdateRequest) (*UpdateSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlAuthserviceAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.samlAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("samlAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.samlAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
