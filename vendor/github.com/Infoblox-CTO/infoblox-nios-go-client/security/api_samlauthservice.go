/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SamlauthserviceAPI interface {
	/*
		Get Retrieve saml:authservice objects

		Returns a list of saml:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SamlauthserviceAPIGetRequest
	*/
	Get(ctx context.Context) SamlauthserviceAPIGetRequest

	// GetExecute executes the request
	//  @return ListSamlAuthserviceResponse
	GetExecute(r SamlauthserviceAPIGetRequest) (*ListSamlAuthserviceResponse, *http.Response, error)
	/*
		Post Create a saml:authservice object

		Creates a new saml:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SamlauthserviceAPIPostRequest
	*/
	Post(ctx context.Context) SamlauthserviceAPIPostRequest

	// PostExecute executes the request
	//  @return CreateSamlAuthserviceResponse
	PostExecute(r SamlauthserviceAPIPostRequest) (*CreateSamlAuthserviceResponse, *http.Response, error)
	/*
		ReferenceDelete Delete a saml:authservice object

		Deletes a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlauthserviceAPIReferenceDeleteRequest
	*/
	ReferenceDelete(ctx context.Context, reference string) SamlauthserviceAPIReferenceDeleteRequest

	// ReferenceDeleteExecute executes the request
	ReferenceDeleteExecute(r SamlauthserviceAPIReferenceDeleteRequest) (*http.Response, error)
	/*
		ReferenceGet Get a specific saml:authservice object

		Returns a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlauthserviceAPIReferenceGetRequest
	*/
	ReferenceGet(ctx context.Context, reference string) SamlauthserviceAPIReferenceGetRequest

	// ReferenceGetExecute executes the request
	//  @return GetSamlAuthserviceResponse
	ReferenceGetExecute(r SamlauthserviceAPIReferenceGetRequest) (*GetSamlAuthserviceResponse, *http.Response, error)
	/*
		ReferencePut Update a saml:authservice object

		Updates a specific saml:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the saml:authservice object
		@return SamlauthserviceAPIReferencePutRequest
	*/
	ReferencePut(ctx context.Context, reference string) SamlauthserviceAPIReferencePutRequest

	// ReferencePutExecute executes the request
	//  @return UpdateSamlAuthserviceResponse
	ReferencePutExecute(r SamlauthserviceAPIReferencePutRequest) (*UpdateSamlAuthserviceResponse, *http.Response, error)
}

// SamlauthserviceAPIService SamlauthserviceAPI service
type SamlauthserviceAPIService internal.Service

type SamlauthserviceAPIGetRequest struct {
	ctx            context.Context
	ApiService     SamlauthserviceAPI
	returnFields   *string
	returnFields2  *string
	maxResults     *int32
	returnAsObject *int32
	paging         *int32
	pageId         *string
	filters        *map[string]interface{}
	extattrfilter  *map[string]interface{}
}

// Enter the field names followed by comma
func (r SamlauthserviceAPIGetRequest) ReturnFields(returnFields string) SamlauthserviceAPIGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlauthserviceAPIGetRequest) ReturnFields2(returnFields2 string) SamlauthserviceAPIGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Enter the number of results to be fetched
func (r SamlauthserviceAPIGetRequest) MaxResults(maxResults int32) SamlauthserviceAPIGetRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SamlauthserviceAPIGetRequest) ReturnAsObject(returnAsObject int32) SamlauthserviceAPIGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SamlauthserviceAPIGetRequest) Paging(paging int32) SamlauthserviceAPIGetRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SamlauthserviceAPIGetRequest) PageId(pageId string) SamlauthserviceAPIGetRequest {
	r.pageId = &pageId
	return r
}

func (r SamlauthserviceAPIGetRequest) Filters(filters map[string]interface{}) SamlauthserviceAPIGetRequest {
	r.filters = &filters
	return r
}

func (r SamlauthserviceAPIGetRequest) Extattrfilter(extattrfilter map[string]interface{}) SamlauthserviceAPIGetRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SamlauthserviceAPIGetRequest) Execute() (*ListSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.GetExecute(r)
}

/*
Get Retrieve saml:authservice objects

Returns a list of saml:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SamlauthserviceAPIGetRequest
*/
func (a *SamlauthserviceAPIService) Get(ctx context.Context) SamlauthserviceAPIGetRequest {
	return SamlauthserviceAPIGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSamlAuthserviceResponse
func (a *SamlauthserviceAPIService) GetExecute(r SamlauthserviceAPIGetRequest) (*ListSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlauthserviceAPIService.Get")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlauthserviceAPIPostRequest struct {
	ctx             context.Context
	ApiService      SamlauthserviceAPI
	samlAuthservice *SamlAuthservice
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to create
func (r SamlauthserviceAPIPostRequest) SamlAuthservice(samlAuthservice SamlAuthservice) SamlauthserviceAPIPostRequest {
	r.samlAuthservice = &samlAuthservice
	return r
}

// Enter the field names followed by comma
func (r SamlauthserviceAPIPostRequest) ReturnFields(returnFields string) SamlauthserviceAPIPostRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlauthserviceAPIPostRequest) ReturnFields2(returnFields2 string) SamlauthserviceAPIPostRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SamlauthserviceAPIPostRequest) ReturnAsObject(returnAsObject int32) SamlauthserviceAPIPostRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlauthserviceAPIPostRequest) Execute() (*CreateSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.PostExecute(r)
}

/*
Post Create a saml:authservice object

Creates a new saml:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SamlauthserviceAPIPostRequest
*/
func (a *SamlauthserviceAPIService) Post(ctx context.Context) SamlauthserviceAPIPostRequest {
	return SamlauthserviceAPIPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSamlAuthserviceResponse
func (a *SamlauthserviceAPIService) PostExecute(r SamlauthserviceAPIPostRequest) (*CreateSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlauthserviceAPIService.Post")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.samlAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("samlAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.samlAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlauthserviceAPIReferenceDeleteRequest struct {
	ctx        context.Context
	ApiService SamlauthserviceAPI
	reference  string
}

func (r SamlauthserviceAPIReferenceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReferenceDeleteExecute(r)
}

/*
ReferenceDelete Delete a saml:authservice object

Deletes a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlauthserviceAPIReferenceDeleteRequest
*/
func (a *SamlauthserviceAPIService) ReferenceDelete(ctx context.Context, reference string) SamlauthserviceAPIReferenceDeleteRequest {
	return SamlauthserviceAPIReferenceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SamlauthserviceAPIService) ReferenceDeleteExecute(r SamlauthserviceAPIReferenceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlauthserviceAPIService.ReferenceDelete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SamlauthserviceAPIReferenceGetRequest struct {
	ctx            context.Context
	ApiService     SamlauthserviceAPI
	reference      string
	returnFields   *string
	returnFields2  *string
	returnAsObject *int32
}

// Enter the field names followed by comma
func (r SamlauthserviceAPIReferenceGetRequest) ReturnFields(returnFields string) SamlauthserviceAPIReferenceGetRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlauthserviceAPIReferenceGetRequest) ReturnFields2(returnFields2 string) SamlauthserviceAPIReferenceGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SamlauthserviceAPIReferenceGetRequest) ReturnAsObject(returnAsObject int32) SamlauthserviceAPIReferenceGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlauthserviceAPIReferenceGetRequest) Execute() (*GetSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReferenceGetExecute(r)
}

/*
ReferenceGet Get a specific saml:authservice object

Returns a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlauthserviceAPIReferenceGetRequest
*/
func (a *SamlauthserviceAPIService) ReferenceGet(ctx context.Context, reference string) SamlauthserviceAPIReferenceGetRequest {
	return SamlauthserviceAPIReferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSamlAuthserviceResponse
func (a *SamlauthserviceAPIService) ReferenceGetExecute(r SamlauthserviceAPIReferenceGetRequest) (*GetSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlauthserviceAPIService.ReferenceGet")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SamlauthserviceAPIReferencePutRequest struct {
	ctx             context.Context
	ApiService      SamlauthserviceAPI
	reference       string
	samlAuthservice *SamlAuthservice
	returnFields    *string
	returnFields2   *string
	returnAsObject  *int32
}

// Object data to update
func (r SamlauthserviceAPIReferencePutRequest) SamlAuthservice(samlAuthservice SamlAuthservice) SamlauthserviceAPIReferencePutRequest {
	r.samlAuthservice = &samlAuthservice
	return r
}

// Enter the field names followed by comma
func (r SamlauthserviceAPIReferencePutRequest) ReturnFields(returnFields string) SamlauthserviceAPIReferencePutRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SamlauthserviceAPIReferencePutRequest) ReturnFields2(returnFields2 string) SamlauthserviceAPIReferencePutRequest {
	r.returnFields2 = &returnFields2
	return r
}

// Select 1 if result is required as an object
func (r SamlauthserviceAPIReferencePutRequest) ReturnAsObject(returnAsObject int32) SamlauthserviceAPIReferencePutRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SamlauthserviceAPIReferencePutRequest) Execute() (*UpdateSamlAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReferencePutExecute(r)
}

/*
ReferencePut Update a saml:authservice object

Updates a specific saml:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the saml:authservice object
	@return SamlauthserviceAPIReferencePutRequest
*/
func (a *SamlauthserviceAPIService) ReferencePut(ctx context.Context, reference string) SamlauthserviceAPIReferencePutRequest {
	return SamlauthserviceAPIReferencePutRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSamlAuthserviceResponse
func (a *SamlauthserviceAPIService) ReferencePutExecute(r SamlauthserviceAPIReferencePutRequest) (*UpdateSamlAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSamlAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SamlauthserviceAPIService.ReferencePut")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/saml:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.samlAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("samlAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFields2 != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.samlAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
