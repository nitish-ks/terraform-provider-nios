/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
	"github.com/Infoblox-CTO/infoblox-nios-go-client/option"
)

const serviceBasePath = "/wapi/v2.13.6"

// APIClient manages communication with the Infoblox SECURITY API 2.13.6
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
	AdAuthServiceAPI AdAuthServiceAPI
	AdmingroupAPI AdmingroupAPI
	AdminroleAPI AdminroleAPI
	AdminuserAPI AdminuserAPI
	ApprovalworkflowAPI ApprovalworkflowAPI
	AuthpolicyAPI AuthpolicyAPI
	CacertificateAPI CacertificateAPI
	CertificateAuthserviceAPI CertificateAuthserviceAPI
	FtpuserAPI FtpuserAPI
	HsmAllgroupsAPI HsmAllgroupsAPI
	HsmEntrustnshieldgroupAPI HsmEntrustnshieldgroupAPI
	HsmThaleslunagroupAPI HsmThaleslunagroupAPI
	LdapAuthServiceAPI LdapAuthServiceAPI
	LocaluserAuthserviceAPI LocaluserAuthserviceAPI
	NetworkuserAPI NetworkuserAPI
	PermissionAPI PermissionAPI
	RadiusAuthserviceAPI RadiusAuthserviceAPI
	SamlAuthserviceAPI SamlAuthserviceAPI
	SnmpuserAPI SnmpuserAPI
	TacacsplusAuthserviceAPI TacacsplusAuthserviceAPI
	UserprofileAPI UserprofileAPI
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithNIOSHostUrl(string) sets the URL for NIOS Portal.
// - WithNIOSUsername(string) sets the Username for the NIOS Portal.
// - WithNIOSPassword(string) sets the Password for the NIOS Portal.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultExtAttrs(map[string]struct{ Value string }) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

	// API Services
	c.AdAuthServiceAPI = (*AdAuthServiceAPIService)(&c.Common)
	c.AdmingroupAPI = (*AdmingroupAPIService)(&c.Common)
	c.AdminroleAPI = (*AdminroleAPIService)(&c.Common)
	c.AdminuserAPI = (*AdminuserAPIService)(&c.Common)
	c.ApprovalworkflowAPI = (*ApprovalworkflowAPIService)(&c.Common)
	c.AuthpolicyAPI = (*AuthpolicyAPIService)(&c.Common)
	c.CacertificateAPI = (*CacertificateAPIService)(&c.Common)
	c.CertificateAuthserviceAPI = (*CertificateAuthserviceAPIService)(&c.Common)
	c.FtpuserAPI = (*FtpuserAPIService)(&c.Common)
	c.HsmAllgroupsAPI = (*HsmAllgroupsAPIService)(&c.Common)
	c.HsmEntrustnshieldgroupAPI = (*HsmEntrustnshieldgroupAPIService)(&c.Common)
	c.HsmThaleslunagroupAPI = (*HsmThaleslunagroupAPIService)(&c.Common)
	c.LdapAuthServiceAPI = (*LdapAuthServiceAPIService)(&c.Common)
	c.LocaluserAuthserviceAPI = (*LocaluserAuthserviceAPIService)(&c.Common)
	c.NetworkuserAPI = (*NetworkuserAPIService)(&c.Common)
	c.PermissionAPI = (*PermissionAPIService)(&c.Common)
	c.RadiusAuthserviceAPI = (*RadiusAuthserviceAPIService)(&c.Common)
	c.SamlAuthserviceAPI = (*SamlAuthserviceAPIService)(&c.Common)
	c.SnmpuserAPI = (*SnmpuserAPIService)(&c.Common)
	c.TacacsplusAuthserviceAPI = (*TacacsplusAuthserviceAPIService)(&c.Common)
	c.UserprofileAPI = (*UserprofileAPIService)(&c.Common)

	return c
}