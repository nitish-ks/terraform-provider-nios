/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Admingroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Admingroup{}

// Admingroup struct for Admingroup
type Admingroup struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Access methods specify whether an admin group can use the GUI and the API to access the appliance or to send Taxii messages to the appliance. Note that API includes both the Perl API and RESTful API.
	AccessMethod          []string                         `json:"access_method,omitempty"`
	AdminSetCommands      *AdmingroupAdminSetCommands      `json:"admin_set_commands,omitempty"`
	AdminShowCommands     *AdmingroupAdminShowCommands     `json:"admin_show_commands,omitempty"`
	AdminToplevelCommands *AdmingroupAdminToplevelCommands `json:"admin_toplevel_commands,omitempty"`
	CloudSetCommands      *AdmingroupCloudSetCommands      `json:"cloud_set_commands,omitempty"`
	CloudShowCommands     *AdmingroupCloudShowCommands     `json:"cloud_show_commands,omitempty"`
	// Comment for the Admin Group; maximum 256 characters.
	Comment              *string                         `json:"comment,omitempty"`
	DatabaseSetCommands  *AdmingroupDatabaseSetCommands  `json:"database_set_commands,omitempty"`
	DatabaseShowCommands *AdmingroupDatabaseShowCommands `json:"database_show_commands,omitempty"`
	DhcpSetCommands      *AdmingroupDhcpSetCommands      `json:"dhcp_set_commands,omitempty"`
	DhcpShowCommands     *AdmingroupDhcpShowCommands     `json:"dhcp_show_commands,omitempty"`
	// Determines whether the Admin Group is disabled or not. When this is set to False, the Admin Group is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Disable concurrent login feature
	DisableConcurrentLogin *bool                          `json:"disable_concurrent_login,omitempty"`
	DnsSetCommands         *AdmingroupDnsSetCommands      `json:"dns_set_commands,omitempty"`
	DnsShowCommands        *AdmingroupDnsShowCommands     `json:"dns_show_commands,omitempty"`
	DnsToplevelCommands    *AdmingroupDnsToplevelCommands `json:"dns_toplevel_commands,omitempty"`
	DockerSetCommands      *AdmingroupDockerSetCommands   `json:"docker_set_commands,omitempty"`
	DockerShowCommands     *AdmingroupDockerShowCommands  `json:"docker_show_commands,omitempty"`
	// The e-mail addresses for the Admin Group.
	EmailAddresses []string `json:"email_addresses,omitempty"`
	// Determines whether the restrictions will be applied to the admin connector level for users of this Admin Group.
	EnableRestrictedUserAccess *bool `json:"enable_restricted_user_access,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs                       *map[string]ExtAttrs                      `json:"extattrs,omitempty"`
	GridSetCommands                *AdmingroupGridSetCommands                `json:"grid_set_commands,omitempty"`
	GridShowCommands               *AdmingroupGridShowCommands               `json:"grid_show_commands,omitempty"`
	InactivityLockoutSetting       *AdmingroupInactivityLockoutSetting       `json:"inactivity_lockout_setting,omitempty"`
	LicensingSetCommands           *AdmingroupLicensingSetCommands           `json:"licensing_set_commands,omitempty"`
	LicensingShowCommands          *AdmingroupLicensingShowCommands          `json:"licensing_show_commands,omitempty"`
	LockoutSetting                 *AdmingroupLockoutSetting                 `json:"lockout_setting,omitempty"`
	MachineControlToplevelCommands *AdmingroupMachineControlToplevelCommands `json:"machine_control_toplevel_commands,omitempty"`
	// The name of the Admin Group.
	Name                   *string                           `json:"name,omitempty"`
	NetworkingSetCommands  *AdmingroupNetworkingSetCommands  `json:"networking_set_commands,omitempty"`
	NetworkingShowCommands *AdmingroupNetworkingShowCommands `json:"networking_show_commands,omitempty"`
	PasswordSetting        *AdmingroupPasswordSetting        `json:"password_setting,omitempty"`
	// The names of roles this Admin Group applies to.
	Roles                []string                        `json:"roles,omitempty"`
	SamlSetting          *AdmingroupSamlSetting          `json:"saml_setting,omitempty"`
	SecuritySetCommands  *AdmingroupSecuritySetCommands  `json:"security_set_commands,omitempty"`
	SecurityShowCommands *AdmingroupSecurityShowCommands `json:"security_show_commands,omitempty"`
	// Determines whether this Admin Group is a superuser group. A superuser group can perform all operations on the appliance, and can view and configure all types of data.
	Superuser                       *bool                                      `json:"superuser,omitempty"`
	TroubleShootingToplevelCommands *AdmingroupTroubleShootingToplevelCommands `json:"trouble_shooting_toplevel_commands,omitempty"`
	// This is the use flag for account inactivity lockout settings.
	UseAccountInactivityLockoutEnable *bool `json:"use_account_inactivity_lockout_enable,omitempty"`
	// Whether to override grid concurrent login
	UseDisableConcurrentLogin *bool `json:"use_disable_concurrent_login,omitempty"`
	// Whether to override grid sequential lockout setting
	UseLockoutSetting *bool `json:"use_lockout_setting,omitempty"`
	// Whether grid password expiry setting should be override.
	UsePasswordSetting *bool `json:"use_password_setting,omitempty"`
	// The access control items for this Admin Group.
	UserAccess []AdmingroupUserAccess `json:"user_access,omitempty"`
}

// NewAdmingroup instantiates a new Admingroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroup() *Admingroup {
	this := Admingroup{}
	return &this
}

// NewAdmingroupWithDefaults instantiates a new Admingroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupWithDefaults() *Admingroup {
	this := Admingroup{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Admingroup) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Admingroup) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Admingroup) SetRef(v string) {
	o.Ref = &v
}

// GetAccessMethod returns the AccessMethod field value if set, zero value otherwise.
func (o *Admingroup) GetAccessMethod() []string {
	if o == nil || IsNil(o.AccessMethod) {
		var ret []string
		return ret
	}
	return o.AccessMethod
}

// GetAccessMethodOk returns a tuple with the AccessMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetAccessMethodOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessMethod) {
		return nil, false
	}
	return o.AccessMethod, true
}

// HasAccessMethod returns a boolean if a field has been set.
func (o *Admingroup) HasAccessMethod() bool {
	if o != nil && !IsNil(o.AccessMethod) {
		return true
	}

	return false
}

// SetAccessMethod gets a reference to the given []string and assigns it to the AccessMethod field.
func (o *Admingroup) SetAccessMethod(v []string) {
	o.AccessMethod = v
}

// GetAdminSetCommands returns the AdminSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetAdminSetCommands() AdmingroupAdminSetCommands {
	if o == nil || IsNil(o.AdminSetCommands) {
		var ret AdmingroupAdminSetCommands
		return ret
	}
	return *o.AdminSetCommands
}

// GetAdminSetCommandsOk returns a tuple with the AdminSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetAdminSetCommandsOk() (*AdmingroupAdminSetCommands, bool) {
	if o == nil || IsNil(o.AdminSetCommands) {
		return nil, false
	}
	return o.AdminSetCommands, true
}

// HasAdminSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasAdminSetCommands() bool {
	if o != nil && !IsNil(o.AdminSetCommands) {
		return true
	}

	return false
}

// SetAdminSetCommands gets a reference to the given AdmingroupAdminSetCommands and assigns it to the AdminSetCommands field.
func (o *Admingroup) SetAdminSetCommands(v AdmingroupAdminSetCommands) {
	o.AdminSetCommands = &v
}

// GetAdminShowCommands returns the AdminShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetAdminShowCommands() AdmingroupAdminShowCommands {
	if o == nil || IsNil(o.AdminShowCommands) {
		var ret AdmingroupAdminShowCommands
		return ret
	}
	return *o.AdminShowCommands
}

// GetAdminShowCommandsOk returns a tuple with the AdminShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetAdminShowCommandsOk() (*AdmingroupAdminShowCommands, bool) {
	if o == nil || IsNil(o.AdminShowCommands) {
		return nil, false
	}
	return o.AdminShowCommands, true
}

// HasAdminShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasAdminShowCommands() bool {
	if o != nil && !IsNil(o.AdminShowCommands) {
		return true
	}

	return false
}

// SetAdminShowCommands gets a reference to the given AdmingroupAdminShowCommands and assigns it to the AdminShowCommands field.
func (o *Admingroup) SetAdminShowCommands(v AdmingroupAdminShowCommands) {
	o.AdminShowCommands = &v
}

// GetAdminToplevelCommands returns the AdminToplevelCommands field value if set, zero value otherwise.
func (o *Admingroup) GetAdminToplevelCommands() AdmingroupAdminToplevelCommands {
	if o == nil || IsNil(o.AdminToplevelCommands) {
		var ret AdmingroupAdminToplevelCommands
		return ret
	}
	return *o.AdminToplevelCommands
}

// GetAdminToplevelCommandsOk returns a tuple with the AdminToplevelCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetAdminToplevelCommandsOk() (*AdmingroupAdminToplevelCommands, bool) {
	if o == nil || IsNil(o.AdminToplevelCommands) {
		return nil, false
	}
	return o.AdminToplevelCommands, true
}

// HasAdminToplevelCommands returns a boolean if a field has been set.
func (o *Admingroup) HasAdminToplevelCommands() bool {
	if o != nil && !IsNil(o.AdminToplevelCommands) {
		return true
	}

	return false
}

// SetAdminToplevelCommands gets a reference to the given AdmingroupAdminToplevelCommands and assigns it to the AdminToplevelCommands field.
func (o *Admingroup) SetAdminToplevelCommands(v AdmingroupAdminToplevelCommands) {
	o.AdminToplevelCommands = &v
}

// GetCloudSetCommands returns the CloudSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetCloudSetCommands() AdmingroupCloudSetCommands {
	if o == nil || IsNil(o.CloudSetCommands) {
		var ret AdmingroupCloudSetCommands
		return ret
	}
	return *o.CloudSetCommands
}

// GetCloudSetCommandsOk returns a tuple with the CloudSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetCloudSetCommandsOk() (*AdmingroupCloudSetCommands, bool) {
	if o == nil || IsNil(o.CloudSetCommands) {
		return nil, false
	}
	return o.CloudSetCommands, true
}

// HasCloudSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasCloudSetCommands() bool {
	if o != nil && !IsNil(o.CloudSetCommands) {
		return true
	}

	return false
}

// SetCloudSetCommands gets a reference to the given AdmingroupCloudSetCommands and assigns it to the CloudSetCommands field.
func (o *Admingroup) SetCloudSetCommands(v AdmingroupCloudSetCommands) {
	o.CloudSetCommands = &v
}

// GetCloudShowCommands returns the CloudShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetCloudShowCommands() AdmingroupCloudShowCommands {
	if o == nil || IsNil(o.CloudShowCommands) {
		var ret AdmingroupCloudShowCommands
		return ret
	}
	return *o.CloudShowCommands
}

// GetCloudShowCommandsOk returns a tuple with the CloudShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetCloudShowCommandsOk() (*AdmingroupCloudShowCommands, bool) {
	if o == nil || IsNil(o.CloudShowCommands) {
		return nil, false
	}
	return o.CloudShowCommands, true
}

// HasCloudShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasCloudShowCommands() bool {
	if o != nil && !IsNil(o.CloudShowCommands) {
		return true
	}

	return false
}

// SetCloudShowCommands gets a reference to the given AdmingroupCloudShowCommands and assigns it to the CloudShowCommands field.
func (o *Admingroup) SetCloudShowCommands(v AdmingroupCloudShowCommands) {
	o.CloudShowCommands = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Admingroup) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Admingroup) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Admingroup) SetComment(v string) {
	o.Comment = &v
}

// GetDatabaseSetCommands returns the DatabaseSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDatabaseSetCommands() AdmingroupDatabaseSetCommands {
	if o == nil || IsNil(o.DatabaseSetCommands) {
		var ret AdmingroupDatabaseSetCommands
		return ret
	}
	return *o.DatabaseSetCommands
}

// GetDatabaseSetCommandsOk returns a tuple with the DatabaseSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDatabaseSetCommandsOk() (*AdmingroupDatabaseSetCommands, bool) {
	if o == nil || IsNil(o.DatabaseSetCommands) {
		return nil, false
	}
	return o.DatabaseSetCommands, true
}

// HasDatabaseSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDatabaseSetCommands() bool {
	if o != nil && !IsNil(o.DatabaseSetCommands) {
		return true
	}

	return false
}

// SetDatabaseSetCommands gets a reference to the given AdmingroupDatabaseSetCommands and assigns it to the DatabaseSetCommands field.
func (o *Admingroup) SetDatabaseSetCommands(v AdmingroupDatabaseSetCommands) {
	o.DatabaseSetCommands = &v
}

// GetDatabaseShowCommands returns the DatabaseShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDatabaseShowCommands() AdmingroupDatabaseShowCommands {
	if o == nil || IsNil(o.DatabaseShowCommands) {
		var ret AdmingroupDatabaseShowCommands
		return ret
	}
	return *o.DatabaseShowCommands
}

// GetDatabaseShowCommandsOk returns a tuple with the DatabaseShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDatabaseShowCommandsOk() (*AdmingroupDatabaseShowCommands, bool) {
	if o == nil || IsNil(o.DatabaseShowCommands) {
		return nil, false
	}
	return o.DatabaseShowCommands, true
}

// HasDatabaseShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDatabaseShowCommands() bool {
	if o != nil && !IsNil(o.DatabaseShowCommands) {
		return true
	}

	return false
}

// SetDatabaseShowCommands gets a reference to the given AdmingroupDatabaseShowCommands and assigns it to the DatabaseShowCommands field.
func (o *Admingroup) SetDatabaseShowCommands(v AdmingroupDatabaseShowCommands) {
	o.DatabaseShowCommands = &v
}

// GetDhcpSetCommands returns the DhcpSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDhcpSetCommands() AdmingroupDhcpSetCommands {
	if o == nil || IsNil(o.DhcpSetCommands) {
		var ret AdmingroupDhcpSetCommands
		return ret
	}
	return *o.DhcpSetCommands
}

// GetDhcpSetCommandsOk returns a tuple with the DhcpSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDhcpSetCommandsOk() (*AdmingroupDhcpSetCommands, bool) {
	if o == nil || IsNil(o.DhcpSetCommands) {
		return nil, false
	}
	return o.DhcpSetCommands, true
}

// HasDhcpSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDhcpSetCommands() bool {
	if o != nil && !IsNil(o.DhcpSetCommands) {
		return true
	}

	return false
}

// SetDhcpSetCommands gets a reference to the given AdmingroupDhcpSetCommands and assigns it to the DhcpSetCommands field.
func (o *Admingroup) SetDhcpSetCommands(v AdmingroupDhcpSetCommands) {
	o.DhcpSetCommands = &v
}

// GetDhcpShowCommands returns the DhcpShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDhcpShowCommands() AdmingroupDhcpShowCommands {
	if o == nil || IsNil(o.DhcpShowCommands) {
		var ret AdmingroupDhcpShowCommands
		return ret
	}
	return *o.DhcpShowCommands
}

// GetDhcpShowCommandsOk returns a tuple with the DhcpShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDhcpShowCommandsOk() (*AdmingroupDhcpShowCommands, bool) {
	if o == nil || IsNil(o.DhcpShowCommands) {
		return nil, false
	}
	return o.DhcpShowCommands, true
}

// HasDhcpShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDhcpShowCommands() bool {
	if o != nil && !IsNil(o.DhcpShowCommands) {
		return true
	}

	return false
}

// SetDhcpShowCommands gets a reference to the given AdmingroupDhcpShowCommands and assigns it to the DhcpShowCommands field.
func (o *Admingroup) SetDhcpShowCommands(v AdmingroupDhcpShowCommands) {
	o.DhcpShowCommands = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Admingroup) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Admingroup) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Admingroup) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisableConcurrentLogin returns the DisableConcurrentLogin field value if set, zero value otherwise.
func (o *Admingroup) GetDisableConcurrentLogin() bool {
	if o == nil || IsNil(o.DisableConcurrentLogin) {
		var ret bool
		return ret
	}
	return *o.DisableConcurrentLogin
}

// GetDisableConcurrentLoginOk returns a tuple with the DisableConcurrentLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDisableConcurrentLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConcurrentLogin) {
		return nil, false
	}
	return o.DisableConcurrentLogin, true
}

// HasDisableConcurrentLogin returns a boolean if a field has been set.
func (o *Admingroup) HasDisableConcurrentLogin() bool {
	if o != nil && !IsNil(o.DisableConcurrentLogin) {
		return true
	}

	return false
}

// SetDisableConcurrentLogin gets a reference to the given bool and assigns it to the DisableConcurrentLogin field.
func (o *Admingroup) SetDisableConcurrentLogin(v bool) {
	o.DisableConcurrentLogin = &v
}

// GetDnsSetCommands returns the DnsSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDnsSetCommands() AdmingroupDnsSetCommands {
	if o == nil || IsNil(o.DnsSetCommands) {
		var ret AdmingroupDnsSetCommands
		return ret
	}
	return *o.DnsSetCommands
}

// GetDnsSetCommandsOk returns a tuple with the DnsSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDnsSetCommandsOk() (*AdmingroupDnsSetCommands, bool) {
	if o == nil || IsNil(o.DnsSetCommands) {
		return nil, false
	}
	return o.DnsSetCommands, true
}

// HasDnsSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDnsSetCommands() bool {
	if o != nil && !IsNil(o.DnsSetCommands) {
		return true
	}

	return false
}

// SetDnsSetCommands gets a reference to the given AdmingroupDnsSetCommands and assigns it to the DnsSetCommands field.
func (o *Admingroup) SetDnsSetCommands(v AdmingroupDnsSetCommands) {
	o.DnsSetCommands = &v
}

// GetDnsShowCommands returns the DnsShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDnsShowCommands() AdmingroupDnsShowCommands {
	if o == nil || IsNil(o.DnsShowCommands) {
		var ret AdmingroupDnsShowCommands
		return ret
	}
	return *o.DnsShowCommands
}

// GetDnsShowCommandsOk returns a tuple with the DnsShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDnsShowCommandsOk() (*AdmingroupDnsShowCommands, bool) {
	if o == nil || IsNil(o.DnsShowCommands) {
		return nil, false
	}
	return o.DnsShowCommands, true
}

// HasDnsShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDnsShowCommands() bool {
	if o != nil && !IsNil(o.DnsShowCommands) {
		return true
	}

	return false
}

// SetDnsShowCommands gets a reference to the given AdmingroupDnsShowCommands and assigns it to the DnsShowCommands field.
func (o *Admingroup) SetDnsShowCommands(v AdmingroupDnsShowCommands) {
	o.DnsShowCommands = &v
}

// GetDnsToplevelCommands returns the DnsToplevelCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDnsToplevelCommands() AdmingroupDnsToplevelCommands {
	if o == nil || IsNil(o.DnsToplevelCommands) {
		var ret AdmingroupDnsToplevelCommands
		return ret
	}
	return *o.DnsToplevelCommands
}

// GetDnsToplevelCommandsOk returns a tuple with the DnsToplevelCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDnsToplevelCommandsOk() (*AdmingroupDnsToplevelCommands, bool) {
	if o == nil || IsNil(o.DnsToplevelCommands) {
		return nil, false
	}
	return o.DnsToplevelCommands, true
}

// HasDnsToplevelCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDnsToplevelCommands() bool {
	if o != nil && !IsNil(o.DnsToplevelCommands) {
		return true
	}

	return false
}

// SetDnsToplevelCommands gets a reference to the given AdmingroupDnsToplevelCommands and assigns it to the DnsToplevelCommands field.
func (o *Admingroup) SetDnsToplevelCommands(v AdmingroupDnsToplevelCommands) {
	o.DnsToplevelCommands = &v
}

// GetDockerSetCommands returns the DockerSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDockerSetCommands() AdmingroupDockerSetCommands {
	if o == nil || IsNil(o.DockerSetCommands) {
		var ret AdmingroupDockerSetCommands
		return ret
	}
	return *o.DockerSetCommands
}

// GetDockerSetCommandsOk returns a tuple with the DockerSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDockerSetCommandsOk() (*AdmingroupDockerSetCommands, bool) {
	if o == nil || IsNil(o.DockerSetCommands) {
		return nil, false
	}
	return o.DockerSetCommands, true
}

// HasDockerSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDockerSetCommands() bool {
	if o != nil && !IsNil(o.DockerSetCommands) {
		return true
	}

	return false
}

// SetDockerSetCommands gets a reference to the given AdmingroupDockerSetCommands and assigns it to the DockerSetCommands field.
func (o *Admingroup) SetDockerSetCommands(v AdmingroupDockerSetCommands) {
	o.DockerSetCommands = &v
}

// GetDockerShowCommands returns the DockerShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetDockerShowCommands() AdmingroupDockerShowCommands {
	if o == nil || IsNil(o.DockerShowCommands) {
		var ret AdmingroupDockerShowCommands
		return ret
	}
	return *o.DockerShowCommands
}

// GetDockerShowCommandsOk returns a tuple with the DockerShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetDockerShowCommandsOk() (*AdmingroupDockerShowCommands, bool) {
	if o == nil || IsNil(o.DockerShowCommands) {
		return nil, false
	}
	return o.DockerShowCommands, true
}

// HasDockerShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasDockerShowCommands() bool {
	if o != nil && !IsNil(o.DockerShowCommands) {
		return true
	}

	return false
}

// SetDockerShowCommands gets a reference to the given AdmingroupDockerShowCommands and assigns it to the DockerShowCommands field.
func (o *Admingroup) SetDockerShowCommands(v AdmingroupDockerShowCommands) {
	o.DockerShowCommands = &v
}

// GetEmailAddresses returns the EmailAddresses field value if set, zero value otherwise.
func (o *Admingroup) GetEmailAddresses() []string {
	if o == nil || IsNil(o.EmailAddresses) {
		var ret []string
		return ret
	}
	return o.EmailAddresses
}

// GetEmailAddressesOk returns a tuple with the EmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetEmailAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.EmailAddresses) {
		return nil, false
	}
	return o.EmailAddresses, true
}

// HasEmailAddresses returns a boolean if a field has been set.
func (o *Admingroup) HasEmailAddresses() bool {
	if o != nil && !IsNil(o.EmailAddresses) {
		return true
	}

	return false
}

// SetEmailAddresses gets a reference to the given []string and assigns it to the EmailAddresses field.
func (o *Admingroup) SetEmailAddresses(v []string) {
	o.EmailAddresses = v
}

// GetEnableRestrictedUserAccess returns the EnableRestrictedUserAccess field value if set, zero value otherwise.
func (o *Admingroup) GetEnableRestrictedUserAccess() bool {
	if o == nil || IsNil(o.EnableRestrictedUserAccess) {
		var ret bool
		return ret
	}
	return *o.EnableRestrictedUserAccess
}

// GetEnableRestrictedUserAccessOk returns a tuple with the EnableRestrictedUserAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetEnableRestrictedUserAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRestrictedUserAccess) {
		return nil, false
	}
	return o.EnableRestrictedUserAccess, true
}

// HasEnableRestrictedUserAccess returns a boolean if a field has been set.
func (o *Admingroup) HasEnableRestrictedUserAccess() bool {
	if o != nil && !IsNil(o.EnableRestrictedUserAccess) {
		return true
	}

	return false
}

// SetEnableRestrictedUserAccess gets a reference to the given bool and assigns it to the EnableRestrictedUserAccess field.
func (o *Admingroup) SetEnableRestrictedUserAccess(v bool) {
	o.EnableRestrictedUserAccess = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Admingroup) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Admingroup) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Admingroup) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetGridSetCommands returns the GridSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetGridSetCommands() AdmingroupGridSetCommands {
	if o == nil || IsNil(o.GridSetCommands) {
		var ret AdmingroupGridSetCommands
		return ret
	}
	return *o.GridSetCommands
}

// GetGridSetCommandsOk returns a tuple with the GridSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetGridSetCommandsOk() (*AdmingroupGridSetCommands, bool) {
	if o == nil || IsNil(o.GridSetCommands) {
		return nil, false
	}
	return o.GridSetCommands, true
}

// HasGridSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasGridSetCommands() bool {
	if o != nil && !IsNil(o.GridSetCommands) {
		return true
	}

	return false
}

// SetGridSetCommands gets a reference to the given AdmingroupGridSetCommands and assigns it to the GridSetCommands field.
func (o *Admingroup) SetGridSetCommands(v AdmingroupGridSetCommands) {
	o.GridSetCommands = &v
}

// GetGridShowCommands returns the GridShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetGridShowCommands() AdmingroupGridShowCommands {
	if o == nil || IsNil(o.GridShowCommands) {
		var ret AdmingroupGridShowCommands
		return ret
	}
	return *o.GridShowCommands
}

// GetGridShowCommandsOk returns a tuple with the GridShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetGridShowCommandsOk() (*AdmingroupGridShowCommands, bool) {
	if o == nil || IsNil(o.GridShowCommands) {
		return nil, false
	}
	return o.GridShowCommands, true
}

// HasGridShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasGridShowCommands() bool {
	if o != nil && !IsNil(o.GridShowCommands) {
		return true
	}

	return false
}

// SetGridShowCommands gets a reference to the given AdmingroupGridShowCommands and assigns it to the GridShowCommands field.
func (o *Admingroup) SetGridShowCommands(v AdmingroupGridShowCommands) {
	o.GridShowCommands = &v
}

// GetInactivityLockoutSetting returns the InactivityLockoutSetting field value if set, zero value otherwise.
func (o *Admingroup) GetInactivityLockoutSetting() AdmingroupInactivityLockoutSetting {
	if o == nil || IsNil(o.InactivityLockoutSetting) {
		var ret AdmingroupInactivityLockoutSetting
		return ret
	}
	return *o.InactivityLockoutSetting
}

// GetInactivityLockoutSettingOk returns a tuple with the InactivityLockoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetInactivityLockoutSettingOk() (*AdmingroupInactivityLockoutSetting, bool) {
	if o == nil || IsNil(o.InactivityLockoutSetting) {
		return nil, false
	}
	return o.InactivityLockoutSetting, true
}

// HasInactivityLockoutSetting returns a boolean if a field has been set.
func (o *Admingroup) HasInactivityLockoutSetting() bool {
	if o != nil && !IsNil(o.InactivityLockoutSetting) {
		return true
	}

	return false
}

// SetInactivityLockoutSetting gets a reference to the given AdmingroupInactivityLockoutSetting and assigns it to the InactivityLockoutSetting field.
func (o *Admingroup) SetInactivityLockoutSetting(v AdmingroupInactivityLockoutSetting) {
	o.InactivityLockoutSetting = &v
}

// GetLicensingSetCommands returns the LicensingSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetLicensingSetCommands() AdmingroupLicensingSetCommands {
	if o == nil || IsNil(o.LicensingSetCommands) {
		var ret AdmingroupLicensingSetCommands
		return ret
	}
	return *o.LicensingSetCommands
}

// GetLicensingSetCommandsOk returns a tuple with the LicensingSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetLicensingSetCommandsOk() (*AdmingroupLicensingSetCommands, bool) {
	if o == nil || IsNil(o.LicensingSetCommands) {
		return nil, false
	}
	return o.LicensingSetCommands, true
}

// HasLicensingSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasLicensingSetCommands() bool {
	if o != nil && !IsNil(o.LicensingSetCommands) {
		return true
	}

	return false
}

// SetLicensingSetCommands gets a reference to the given AdmingroupLicensingSetCommands and assigns it to the LicensingSetCommands field.
func (o *Admingroup) SetLicensingSetCommands(v AdmingroupLicensingSetCommands) {
	o.LicensingSetCommands = &v
}

// GetLicensingShowCommands returns the LicensingShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetLicensingShowCommands() AdmingroupLicensingShowCommands {
	if o == nil || IsNil(o.LicensingShowCommands) {
		var ret AdmingroupLicensingShowCommands
		return ret
	}
	return *o.LicensingShowCommands
}

// GetLicensingShowCommandsOk returns a tuple with the LicensingShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetLicensingShowCommandsOk() (*AdmingroupLicensingShowCommands, bool) {
	if o == nil || IsNil(o.LicensingShowCommands) {
		return nil, false
	}
	return o.LicensingShowCommands, true
}

// HasLicensingShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasLicensingShowCommands() bool {
	if o != nil && !IsNil(o.LicensingShowCommands) {
		return true
	}

	return false
}

// SetLicensingShowCommands gets a reference to the given AdmingroupLicensingShowCommands and assigns it to the LicensingShowCommands field.
func (o *Admingroup) SetLicensingShowCommands(v AdmingroupLicensingShowCommands) {
	o.LicensingShowCommands = &v
}

// GetLockoutSetting returns the LockoutSetting field value if set, zero value otherwise.
func (o *Admingroup) GetLockoutSetting() AdmingroupLockoutSetting {
	if o == nil || IsNil(o.LockoutSetting) {
		var ret AdmingroupLockoutSetting
		return ret
	}
	return *o.LockoutSetting
}

// GetLockoutSettingOk returns a tuple with the LockoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetLockoutSettingOk() (*AdmingroupLockoutSetting, bool) {
	if o == nil || IsNil(o.LockoutSetting) {
		return nil, false
	}
	return o.LockoutSetting, true
}

// HasLockoutSetting returns a boolean if a field has been set.
func (o *Admingroup) HasLockoutSetting() bool {
	if o != nil && !IsNil(o.LockoutSetting) {
		return true
	}

	return false
}

// SetLockoutSetting gets a reference to the given AdmingroupLockoutSetting and assigns it to the LockoutSetting field.
func (o *Admingroup) SetLockoutSetting(v AdmingroupLockoutSetting) {
	o.LockoutSetting = &v
}

// GetMachineControlToplevelCommands returns the MachineControlToplevelCommands field value if set, zero value otherwise.
func (o *Admingroup) GetMachineControlToplevelCommands() AdmingroupMachineControlToplevelCommands {
	if o == nil || IsNil(o.MachineControlToplevelCommands) {
		var ret AdmingroupMachineControlToplevelCommands
		return ret
	}
	return *o.MachineControlToplevelCommands
}

// GetMachineControlToplevelCommandsOk returns a tuple with the MachineControlToplevelCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetMachineControlToplevelCommandsOk() (*AdmingroupMachineControlToplevelCommands, bool) {
	if o == nil || IsNil(o.MachineControlToplevelCommands) {
		return nil, false
	}
	return o.MachineControlToplevelCommands, true
}

// HasMachineControlToplevelCommands returns a boolean if a field has been set.
func (o *Admingroup) HasMachineControlToplevelCommands() bool {
	if o != nil && !IsNil(o.MachineControlToplevelCommands) {
		return true
	}

	return false
}

// SetMachineControlToplevelCommands gets a reference to the given AdmingroupMachineControlToplevelCommands and assigns it to the MachineControlToplevelCommands field.
func (o *Admingroup) SetMachineControlToplevelCommands(v AdmingroupMachineControlToplevelCommands) {
	o.MachineControlToplevelCommands = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Admingroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Admingroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Admingroup) SetName(v string) {
	o.Name = &v
}

// GetNetworkingSetCommands returns the NetworkingSetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetNetworkingSetCommands() AdmingroupNetworkingSetCommands {
	if o == nil || IsNil(o.NetworkingSetCommands) {
		var ret AdmingroupNetworkingSetCommands
		return ret
	}
	return *o.NetworkingSetCommands
}

// GetNetworkingSetCommandsOk returns a tuple with the NetworkingSetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetNetworkingSetCommandsOk() (*AdmingroupNetworkingSetCommands, bool) {
	if o == nil || IsNil(o.NetworkingSetCommands) {
		return nil, false
	}
	return o.NetworkingSetCommands, true
}

// HasNetworkingSetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasNetworkingSetCommands() bool {
	if o != nil && !IsNil(o.NetworkingSetCommands) {
		return true
	}

	return false
}

// SetNetworkingSetCommands gets a reference to the given AdmingroupNetworkingSetCommands and assigns it to the NetworkingSetCommands field.
func (o *Admingroup) SetNetworkingSetCommands(v AdmingroupNetworkingSetCommands) {
	o.NetworkingSetCommands = &v
}

// GetNetworkingShowCommands returns the NetworkingShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetNetworkingShowCommands() AdmingroupNetworkingShowCommands {
	if o == nil || IsNil(o.NetworkingShowCommands) {
		var ret AdmingroupNetworkingShowCommands
		return ret
	}
	return *o.NetworkingShowCommands
}

// GetNetworkingShowCommandsOk returns a tuple with the NetworkingShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetNetworkingShowCommandsOk() (*AdmingroupNetworkingShowCommands, bool) {
	if o == nil || IsNil(o.NetworkingShowCommands) {
		return nil, false
	}
	return o.NetworkingShowCommands, true
}

// HasNetworkingShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasNetworkingShowCommands() bool {
	if o != nil && !IsNil(o.NetworkingShowCommands) {
		return true
	}

	return false
}

// SetNetworkingShowCommands gets a reference to the given AdmingroupNetworkingShowCommands and assigns it to the NetworkingShowCommands field.
func (o *Admingroup) SetNetworkingShowCommands(v AdmingroupNetworkingShowCommands) {
	o.NetworkingShowCommands = &v
}

// GetPasswordSetting returns the PasswordSetting field value if set, zero value otherwise.
func (o *Admingroup) GetPasswordSetting() AdmingroupPasswordSetting {
	if o == nil || IsNil(o.PasswordSetting) {
		var ret AdmingroupPasswordSetting
		return ret
	}
	return *o.PasswordSetting
}

// GetPasswordSettingOk returns a tuple with the PasswordSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetPasswordSettingOk() (*AdmingroupPasswordSetting, bool) {
	if o == nil || IsNil(o.PasswordSetting) {
		return nil, false
	}
	return o.PasswordSetting, true
}

// HasPasswordSetting returns a boolean if a field has been set.
func (o *Admingroup) HasPasswordSetting() bool {
	if o != nil && !IsNil(o.PasswordSetting) {
		return true
	}

	return false
}

// SetPasswordSetting gets a reference to the given AdmingroupPasswordSetting and assigns it to the PasswordSetting field.
func (o *Admingroup) SetPasswordSetting(v AdmingroupPasswordSetting) {
	o.PasswordSetting = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Admingroup) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Admingroup) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Admingroup) SetRoles(v []string) {
	o.Roles = v
}

// GetSamlSetting returns the SamlSetting field value if set, zero value otherwise.
func (o *Admingroup) GetSamlSetting() AdmingroupSamlSetting {
	if o == nil || IsNil(o.SamlSetting) {
		var ret AdmingroupSamlSetting
		return ret
	}
	return *o.SamlSetting
}

// GetSamlSettingOk returns a tuple with the SamlSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetSamlSettingOk() (*AdmingroupSamlSetting, bool) {
	if o == nil || IsNil(o.SamlSetting) {
		return nil, false
	}
	return o.SamlSetting, true
}

// HasSamlSetting returns a boolean if a field has been set.
func (o *Admingroup) HasSamlSetting() bool {
	if o != nil && !IsNil(o.SamlSetting) {
		return true
	}

	return false
}

// SetSamlSetting gets a reference to the given AdmingroupSamlSetting and assigns it to the SamlSetting field.
func (o *Admingroup) SetSamlSetting(v AdmingroupSamlSetting) {
	o.SamlSetting = &v
}

// GetSecuritySetCommands returns the SecuritySetCommands field value if set, zero value otherwise.
func (o *Admingroup) GetSecuritySetCommands() AdmingroupSecuritySetCommands {
	if o == nil || IsNil(o.SecuritySetCommands) {
		var ret AdmingroupSecuritySetCommands
		return ret
	}
	return *o.SecuritySetCommands
}

// GetSecuritySetCommandsOk returns a tuple with the SecuritySetCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetSecuritySetCommandsOk() (*AdmingroupSecuritySetCommands, bool) {
	if o == nil || IsNil(o.SecuritySetCommands) {
		return nil, false
	}
	return o.SecuritySetCommands, true
}

// HasSecuritySetCommands returns a boolean if a field has been set.
func (o *Admingroup) HasSecuritySetCommands() bool {
	if o != nil && !IsNil(o.SecuritySetCommands) {
		return true
	}

	return false
}

// SetSecuritySetCommands gets a reference to the given AdmingroupSecuritySetCommands and assigns it to the SecuritySetCommands field.
func (o *Admingroup) SetSecuritySetCommands(v AdmingroupSecuritySetCommands) {
	o.SecuritySetCommands = &v
}

// GetSecurityShowCommands returns the SecurityShowCommands field value if set, zero value otherwise.
func (o *Admingroup) GetSecurityShowCommands() AdmingroupSecurityShowCommands {
	if o == nil || IsNil(o.SecurityShowCommands) {
		var ret AdmingroupSecurityShowCommands
		return ret
	}
	return *o.SecurityShowCommands
}

// GetSecurityShowCommandsOk returns a tuple with the SecurityShowCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetSecurityShowCommandsOk() (*AdmingroupSecurityShowCommands, bool) {
	if o == nil || IsNil(o.SecurityShowCommands) {
		return nil, false
	}
	return o.SecurityShowCommands, true
}

// HasSecurityShowCommands returns a boolean if a field has been set.
func (o *Admingroup) HasSecurityShowCommands() bool {
	if o != nil && !IsNil(o.SecurityShowCommands) {
		return true
	}

	return false
}

// SetSecurityShowCommands gets a reference to the given AdmingroupSecurityShowCommands and assigns it to the SecurityShowCommands field.
func (o *Admingroup) SetSecurityShowCommands(v AdmingroupSecurityShowCommands) {
	o.SecurityShowCommands = &v
}

// GetSuperuser returns the Superuser field value if set, zero value otherwise.
func (o *Admingroup) GetSuperuser() bool {
	if o == nil || IsNil(o.Superuser) {
		var ret bool
		return ret
	}
	return *o.Superuser
}

// GetSuperuserOk returns a tuple with the Superuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetSuperuserOk() (*bool, bool) {
	if o == nil || IsNil(o.Superuser) {
		return nil, false
	}
	return o.Superuser, true
}

// HasSuperuser returns a boolean if a field has been set.
func (o *Admingroup) HasSuperuser() bool {
	if o != nil && !IsNil(o.Superuser) {
		return true
	}

	return false
}

// SetSuperuser gets a reference to the given bool and assigns it to the Superuser field.
func (o *Admingroup) SetSuperuser(v bool) {
	o.Superuser = &v
}

// GetTroubleShootingToplevelCommands returns the TroubleShootingToplevelCommands field value if set, zero value otherwise.
func (o *Admingroup) GetTroubleShootingToplevelCommands() AdmingroupTroubleShootingToplevelCommands {
	if o == nil || IsNil(o.TroubleShootingToplevelCommands) {
		var ret AdmingroupTroubleShootingToplevelCommands
		return ret
	}
	return *o.TroubleShootingToplevelCommands
}

// GetTroubleShootingToplevelCommandsOk returns a tuple with the TroubleShootingToplevelCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetTroubleShootingToplevelCommandsOk() (*AdmingroupTroubleShootingToplevelCommands, bool) {
	if o == nil || IsNil(o.TroubleShootingToplevelCommands) {
		return nil, false
	}
	return o.TroubleShootingToplevelCommands, true
}

// HasTroubleShootingToplevelCommands returns a boolean if a field has been set.
func (o *Admingroup) HasTroubleShootingToplevelCommands() bool {
	if o != nil && !IsNil(o.TroubleShootingToplevelCommands) {
		return true
	}

	return false
}

// SetTroubleShootingToplevelCommands gets a reference to the given AdmingroupTroubleShootingToplevelCommands and assigns it to the TroubleShootingToplevelCommands field.
func (o *Admingroup) SetTroubleShootingToplevelCommands(v AdmingroupTroubleShootingToplevelCommands) {
	o.TroubleShootingToplevelCommands = &v
}

// GetUseAccountInactivityLockoutEnable returns the UseAccountInactivityLockoutEnable field value if set, zero value otherwise.
func (o *Admingroup) GetUseAccountInactivityLockoutEnable() bool {
	if o == nil || IsNil(o.UseAccountInactivityLockoutEnable) {
		var ret bool
		return ret
	}
	return *o.UseAccountInactivityLockoutEnable
}

// GetUseAccountInactivityLockoutEnableOk returns a tuple with the UseAccountInactivityLockoutEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetUseAccountInactivityLockoutEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAccountInactivityLockoutEnable) {
		return nil, false
	}
	return o.UseAccountInactivityLockoutEnable, true
}

// HasUseAccountInactivityLockoutEnable returns a boolean if a field has been set.
func (o *Admingroup) HasUseAccountInactivityLockoutEnable() bool {
	if o != nil && !IsNil(o.UseAccountInactivityLockoutEnable) {
		return true
	}

	return false
}

// SetUseAccountInactivityLockoutEnable gets a reference to the given bool and assigns it to the UseAccountInactivityLockoutEnable field.
func (o *Admingroup) SetUseAccountInactivityLockoutEnable(v bool) {
	o.UseAccountInactivityLockoutEnable = &v
}

// GetUseDisableConcurrentLogin returns the UseDisableConcurrentLogin field value if set, zero value otherwise.
func (o *Admingroup) GetUseDisableConcurrentLogin() bool {
	if o == nil || IsNil(o.UseDisableConcurrentLogin) {
		var ret bool
		return ret
	}
	return *o.UseDisableConcurrentLogin
}

// GetUseDisableConcurrentLoginOk returns a tuple with the UseDisableConcurrentLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetUseDisableConcurrentLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDisableConcurrentLogin) {
		return nil, false
	}
	return o.UseDisableConcurrentLogin, true
}

// HasUseDisableConcurrentLogin returns a boolean if a field has been set.
func (o *Admingroup) HasUseDisableConcurrentLogin() bool {
	if o != nil && !IsNil(o.UseDisableConcurrentLogin) {
		return true
	}

	return false
}

// SetUseDisableConcurrentLogin gets a reference to the given bool and assigns it to the UseDisableConcurrentLogin field.
func (o *Admingroup) SetUseDisableConcurrentLogin(v bool) {
	o.UseDisableConcurrentLogin = &v
}

// GetUseLockoutSetting returns the UseLockoutSetting field value if set, zero value otherwise.
func (o *Admingroup) GetUseLockoutSetting() bool {
	if o == nil || IsNil(o.UseLockoutSetting) {
		var ret bool
		return ret
	}
	return *o.UseLockoutSetting
}

// GetUseLockoutSettingOk returns a tuple with the UseLockoutSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetUseLockoutSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLockoutSetting) {
		return nil, false
	}
	return o.UseLockoutSetting, true
}

// HasUseLockoutSetting returns a boolean if a field has been set.
func (o *Admingroup) HasUseLockoutSetting() bool {
	if o != nil && !IsNil(o.UseLockoutSetting) {
		return true
	}

	return false
}

// SetUseLockoutSetting gets a reference to the given bool and assigns it to the UseLockoutSetting field.
func (o *Admingroup) SetUseLockoutSetting(v bool) {
	o.UseLockoutSetting = &v
}

// GetUsePasswordSetting returns the UsePasswordSetting field value if set, zero value otherwise.
func (o *Admingroup) GetUsePasswordSetting() bool {
	if o == nil || IsNil(o.UsePasswordSetting) {
		var ret bool
		return ret
	}
	return *o.UsePasswordSetting
}

// GetUsePasswordSettingOk returns a tuple with the UsePasswordSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetUsePasswordSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePasswordSetting) {
		return nil, false
	}
	return o.UsePasswordSetting, true
}

// HasUsePasswordSetting returns a boolean if a field has been set.
func (o *Admingroup) HasUsePasswordSetting() bool {
	if o != nil && !IsNil(o.UsePasswordSetting) {
		return true
	}

	return false
}

// SetUsePasswordSetting gets a reference to the given bool and assigns it to the UsePasswordSetting field.
func (o *Admingroup) SetUsePasswordSetting(v bool) {
	o.UsePasswordSetting = &v
}

// GetUserAccess returns the UserAccess field value if set, zero value otherwise.
func (o *Admingroup) GetUserAccess() []AdmingroupUserAccess {
	if o == nil || IsNil(o.UserAccess) {
		var ret []AdmingroupUserAccess
		return ret
	}
	return o.UserAccess
}

// GetUserAccessOk returns a tuple with the UserAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admingroup) GetUserAccessOk() ([]AdmingroupUserAccess, bool) {
	if o == nil || IsNil(o.UserAccess) {
		return nil, false
	}
	return o.UserAccess, true
}

// HasUserAccess returns a boolean if a field has been set.
func (o *Admingroup) HasUserAccess() bool {
	if o != nil && !IsNil(o.UserAccess) {
		return true
	}

	return false
}

// SetUserAccess gets a reference to the given []AdmingroupUserAccess and assigns it to the UserAccess field.
func (o *Admingroup) SetUserAccess(v []AdmingroupUserAccess) {
	o.UserAccess = v
}

func (o Admingroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Admingroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AccessMethod) {
		toSerialize["access_method"] = o.AccessMethod
	}
	if !IsNil(o.AdminSetCommands) {
		toSerialize["admin_set_commands"] = o.AdminSetCommands
	}
	if !IsNil(o.AdminShowCommands) {
		toSerialize["admin_show_commands"] = o.AdminShowCommands
	}
	if !IsNil(o.AdminToplevelCommands) {
		toSerialize["admin_toplevel_commands"] = o.AdminToplevelCommands
	}
	if !IsNil(o.CloudSetCommands) {
		toSerialize["cloud_set_commands"] = o.CloudSetCommands
	}
	if !IsNil(o.CloudShowCommands) {
		toSerialize["cloud_show_commands"] = o.CloudShowCommands
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DatabaseSetCommands) {
		toSerialize["database_set_commands"] = o.DatabaseSetCommands
	}
	if !IsNil(o.DatabaseShowCommands) {
		toSerialize["database_show_commands"] = o.DatabaseShowCommands
	}
	if !IsNil(o.DhcpSetCommands) {
		toSerialize["dhcp_set_commands"] = o.DhcpSetCommands
	}
	if !IsNil(o.DhcpShowCommands) {
		toSerialize["dhcp_show_commands"] = o.DhcpShowCommands
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisableConcurrentLogin) {
		toSerialize["disable_concurrent_login"] = o.DisableConcurrentLogin
	}
	if !IsNil(o.DnsSetCommands) {
		toSerialize["dns_set_commands"] = o.DnsSetCommands
	}
	if !IsNil(o.DnsShowCommands) {
		toSerialize["dns_show_commands"] = o.DnsShowCommands
	}
	if !IsNil(o.DnsToplevelCommands) {
		toSerialize["dns_toplevel_commands"] = o.DnsToplevelCommands
	}
	if !IsNil(o.DockerSetCommands) {
		toSerialize["docker_set_commands"] = o.DockerSetCommands
	}
	if !IsNil(o.DockerShowCommands) {
		toSerialize["docker_show_commands"] = o.DockerShowCommands
	}
	if !IsNil(o.EmailAddresses) {
		toSerialize["email_addresses"] = o.EmailAddresses
	}
	if !IsNil(o.EnableRestrictedUserAccess) {
		toSerialize["enable_restricted_user_access"] = o.EnableRestrictedUserAccess
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.GridSetCommands) {
		toSerialize["grid_set_commands"] = o.GridSetCommands
	}
	if !IsNil(o.GridShowCommands) {
		toSerialize["grid_show_commands"] = o.GridShowCommands
	}
	if !IsNil(o.InactivityLockoutSetting) {
		toSerialize["inactivity_lockout_setting"] = o.InactivityLockoutSetting
	}
	if !IsNil(o.LicensingSetCommands) {
		toSerialize["licensing_set_commands"] = o.LicensingSetCommands
	}
	if !IsNil(o.LicensingShowCommands) {
		toSerialize["licensing_show_commands"] = o.LicensingShowCommands
	}
	if !IsNil(o.LockoutSetting) {
		toSerialize["lockout_setting"] = o.LockoutSetting
	}
	if !IsNil(o.MachineControlToplevelCommands) {
		toSerialize["machine_control_toplevel_commands"] = o.MachineControlToplevelCommands
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkingSetCommands) {
		toSerialize["networking_set_commands"] = o.NetworkingSetCommands
	}
	if !IsNil(o.NetworkingShowCommands) {
		toSerialize["networking_show_commands"] = o.NetworkingShowCommands
	}
	if !IsNil(o.PasswordSetting) {
		toSerialize["password_setting"] = o.PasswordSetting
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.SamlSetting) {
		toSerialize["saml_setting"] = o.SamlSetting
	}
	if !IsNil(o.SecuritySetCommands) {
		toSerialize["security_set_commands"] = o.SecuritySetCommands
	}
	if !IsNil(o.SecurityShowCommands) {
		toSerialize["security_show_commands"] = o.SecurityShowCommands
	}
	if !IsNil(o.Superuser) {
		toSerialize["superuser"] = o.Superuser
	}
	if !IsNil(o.TroubleShootingToplevelCommands) {
		toSerialize["trouble_shooting_toplevel_commands"] = o.TroubleShootingToplevelCommands
	}
	if !IsNil(o.UseAccountInactivityLockoutEnable) {
		toSerialize["use_account_inactivity_lockout_enable"] = o.UseAccountInactivityLockoutEnable
	}
	if !IsNil(o.UseDisableConcurrentLogin) {
		toSerialize["use_disable_concurrent_login"] = o.UseDisableConcurrentLogin
	}
	if !IsNil(o.UseLockoutSetting) {
		toSerialize["use_lockout_setting"] = o.UseLockoutSetting
	}
	if !IsNil(o.UsePasswordSetting) {
		toSerialize["use_password_setting"] = o.UsePasswordSetting
	}
	if !IsNil(o.UserAccess) {
		toSerialize["user_access"] = o.UserAccess
	}
	return toSerialize, nil
}

type NullableAdmingroup struct {
	value *Admingroup
	isSet bool
}

func (v NullableAdmingroup) Get() *Admingroup {
	return v.value
}

func (v *NullableAdmingroup) Set(val *Admingroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroup(val *Admingroup) *NullableAdmingroup {
	return &NullableAdmingroup{value: val, isSet: true}
}

func (v NullableAdmingroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
