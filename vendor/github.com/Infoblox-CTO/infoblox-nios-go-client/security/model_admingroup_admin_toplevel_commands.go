/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupAdminToplevelCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupAdminToplevelCommands{}

// AdmingroupAdminToplevelCommands struct for AdmingroupAdminToplevelCommands
type AdmingroupAdminToplevelCommands struct {
	// If True then CLI user has permission to run the command
	Ps *bool `json:"ps,omitempty"`
	// If True then CLI user has permission to run the command
	Iostat *bool `json:"iostat,omitempty"`
	// If True then CLI user has permission to run the command
	Netstat *bool `json:"netstat,omitempty"`
	// If True then CLI user has permission to run the command
	Vmstat *bool `json:"vmstat,omitempty"`
	// If True then CLI user has permission to run the command
	Tcpdump *bool `json:"tcpdump,omitempty"`
	// If True then CLI user has permission to run the command
	Rndc *bool `json:"rndc,omitempty"`
	// If True then CLI user has permission to run the command
	Sar *bool `json:"sar,omitempty"`
	// If True then CLI user has permission to run the command
	Resilver *bool `json:"resilver,omitempty"`
	// If True then CLI user has permission to run the command
	RestartProduct *bool `json:"restart_product,omitempty"`
	// If True then CLI user has permission to run the command
	Scrape *bool `json:"scrape,omitempty"`
	// If True then CLI user has permission to run the command
	SamlRestart *bool `json:"saml_restart,omitempty"`
	// If True then CLI user has permission to run the command
	Synctime *bool `json:"synctime,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupAdminToplevelCommands AdmingroupAdminToplevelCommands

// NewAdmingroupAdminToplevelCommands instantiates a new AdmingroupAdminToplevelCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupAdminToplevelCommands() *AdmingroupAdminToplevelCommands {
	this := AdmingroupAdminToplevelCommands{}
	return &this
}

// NewAdmingroupAdminToplevelCommandsWithDefaults instantiates a new AdmingroupAdminToplevelCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupAdminToplevelCommandsWithDefaults() *AdmingroupAdminToplevelCommands {
	this := AdmingroupAdminToplevelCommands{}
	return &this
}

// GetPs returns the Ps field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetPs() bool {
	if o == nil || IsNil(o.Ps) {
		var ret bool
		return ret
	}
	return *o.Ps
}

// GetPsOk returns a tuple with the Ps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetPsOk() (*bool, bool) {
	if o == nil || IsNil(o.Ps) {
		return nil, false
	}
	return o.Ps, true
}

// HasPs returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasPs() bool {
	if o != nil && !IsNil(o.Ps) {
		return true
	}

	return false
}

// SetPs gets a reference to the given bool and assigns it to the Ps field.
func (o *AdmingroupAdminToplevelCommands) SetPs(v bool) {
	o.Ps = &v
}

// GetIostat returns the Iostat field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetIostat() bool {
	if o == nil || IsNil(o.Iostat) {
		var ret bool
		return ret
	}
	return *o.Iostat
}

// GetIostatOk returns a tuple with the Iostat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetIostatOk() (*bool, bool) {
	if o == nil || IsNil(o.Iostat) {
		return nil, false
	}
	return o.Iostat, true
}

// HasIostat returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasIostat() bool {
	if o != nil && !IsNil(o.Iostat) {
		return true
	}

	return false
}

// SetIostat gets a reference to the given bool and assigns it to the Iostat field.
func (o *AdmingroupAdminToplevelCommands) SetIostat(v bool) {
	o.Iostat = &v
}

// GetNetstat returns the Netstat field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetNetstat() bool {
	if o == nil || IsNil(o.Netstat) {
		var ret bool
		return ret
	}
	return *o.Netstat
}

// GetNetstatOk returns a tuple with the Netstat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetNetstatOk() (*bool, bool) {
	if o == nil || IsNil(o.Netstat) {
		return nil, false
	}
	return o.Netstat, true
}

// HasNetstat returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasNetstat() bool {
	if o != nil && !IsNil(o.Netstat) {
		return true
	}

	return false
}

// SetNetstat gets a reference to the given bool and assigns it to the Netstat field.
func (o *AdmingroupAdminToplevelCommands) SetNetstat(v bool) {
	o.Netstat = &v
}

// GetVmstat returns the Vmstat field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetVmstat() bool {
	if o == nil || IsNil(o.Vmstat) {
		var ret bool
		return ret
	}
	return *o.Vmstat
}

// GetVmstatOk returns a tuple with the Vmstat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetVmstatOk() (*bool, bool) {
	if o == nil || IsNil(o.Vmstat) {
		return nil, false
	}
	return o.Vmstat, true
}

// HasVmstat returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasVmstat() bool {
	if o != nil && !IsNil(o.Vmstat) {
		return true
	}

	return false
}

// SetVmstat gets a reference to the given bool and assigns it to the Vmstat field.
func (o *AdmingroupAdminToplevelCommands) SetVmstat(v bool) {
	o.Vmstat = &v
}

// GetTcpdump returns the Tcpdump field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetTcpdump() bool {
	if o == nil || IsNil(o.Tcpdump) {
		var ret bool
		return ret
	}
	return *o.Tcpdump
}

// GetTcpdumpOk returns a tuple with the Tcpdump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetTcpdumpOk() (*bool, bool) {
	if o == nil || IsNil(o.Tcpdump) {
		return nil, false
	}
	return o.Tcpdump, true
}

// HasTcpdump returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasTcpdump() bool {
	if o != nil && !IsNil(o.Tcpdump) {
		return true
	}

	return false
}

// SetTcpdump gets a reference to the given bool and assigns it to the Tcpdump field.
func (o *AdmingroupAdminToplevelCommands) SetTcpdump(v bool) {
	o.Tcpdump = &v
}

// GetRndc returns the Rndc field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetRndc() bool {
	if o == nil || IsNil(o.Rndc) {
		var ret bool
		return ret
	}
	return *o.Rndc
}

// GetRndcOk returns a tuple with the Rndc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetRndcOk() (*bool, bool) {
	if o == nil || IsNil(o.Rndc) {
		return nil, false
	}
	return o.Rndc, true
}

// HasRndc returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasRndc() bool {
	if o != nil && !IsNil(o.Rndc) {
		return true
	}

	return false
}

// SetRndc gets a reference to the given bool and assigns it to the Rndc field.
func (o *AdmingroupAdminToplevelCommands) SetRndc(v bool) {
	o.Rndc = &v
}

// GetSar returns the Sar field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetSar() bool {
	if o == nil || IsNil(o.Sar) {
		var ret bool
		return ret
	}
	return *o.Sar
}

// GetSarOk returns a tuple with the Sar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetSarOk() (*bool, bool) {
	if o == nil || IsNil(o.Sar) {
		return nil, false
	}
	return o.Sar, true
}

// HasSar returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasSar() bool {
	if o != nil && !IsNil(o.Sar) {
		return true
	}

	return false
}

// SetSar gets a reference to the given bool and assigns it to the Sar field.
func (o *AdmingroupAdminToplevelCommands) SetSar(v bool) {
	o.Sar = &v
}

// GetResilver returns the Resilver field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetResilver() bool {
	if o == nil || IsNil(o.Resilver) {
		var ret bool
		return ret
	}
	return *o.Resilver
}

// GetResilverOk returns a tuple with the Resilver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetResilverOk() (*bool, bool) {
	if o == nil || IsNil(o.Resilver) {
		return nil, false
	}
	return o.Resilver, true
}

// HasResilver returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasResilver() bool {
	if o != nil && !IsNil(o.Resilver) {
		return true
	}

	return false
}

// SetResilver gets a reference to the given bool and assigns it to the Resilver field.
func (o *AdmingroupAdminToplevelCommands) SetResilver(v bool) {
	o.Resilver = &v
}

// GetRestartProduct returns the RestartProduct field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetRestartProduct() bool {
	if o == nil || IsNil(o.RestartProduct) {
		var ret bool
		return ret
	}
	return *o.RestartProduct
}

// GetRestartProductOk returns a tuple with the RestartProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetRestartProductOk() (*bool, bool) {
	if o == nil || IsNil(o.RestartProduct) {
		return nil, false
	}
	return o.RestartProduct, true
}

// HasRestartProduct returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasRestartProduct() bool {
	if o != nil && !IsNil(o.RestartProduct) {
		return true
	}

	return false
}

// SetRestartProduct gets a reference to the given bool and assigns it to the RestartProduct field.
func (o *AdmingroupAdminToplevelCommands) SetRestartProduct(v bool) {
	o.RestartProduct = &v
}

// GetScrape returns the Scrape field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetScrape() bool {
	if o == nil || IsNil(o.Scrape) {
		var ret bool
		return ret
	}
	return *o.Scrape
}

// GetScrapeOk returns a tuple with the Scrape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetScrapeOk() (*bool, bool) {
	if o == nil || IsNil(o.Scrape) {
		return nil, false
	}
	return o.Scrape, true
}

// HasScrape returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasScrape() bool {
	if o != nil && !IsNil(o.Scrape) {
		return true
	}

	return false
}

// SetScrape gets a reference to the given bool and assigns it to the Scrape field.
func (o *AdmingroupAdminToplevelCommands) SetScrape(v bool) {
	o.Scrape = &v
}

// GetSamlRestart returns the SamlRestart field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetSamlRestart() bool {
	if o == nil || IsNil(o.SamlRestart) {
		var ret bool
		return ret
	}
	return *o.SamlRestart
}

// GetSamlRestartOk returns a tuple with the SamlRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetSamlRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.SamlRestart) {
		return nil, false
	}
	return o.SamlRestart, true
}

// HasSamlRestart returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasSamlRestart() bool {
	if o != nil && !IsNil(o.SamlRestart) {
		return true
	}

	return false
}

// SetSamlRestart gets a reference to the given bool and assigns it to the SamlRestart field.
func (o *AdmingroupAdminToplevelCommands) SetSamlRestart(v bool) {
	o.SamlRestart = &v
}

// GetSynctime returns the Synctime field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetSynctime() bool {
	if o == nil || IsNil(o.Synctime) {
		var ret bool
		return ret
	}
	return *o.Synctime
}

// GetSynctimeOk returns a tuple with the Synctime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetSynctimeOk() (*bool, bool) {
	if o == nil || IsNil(o.Synctime) {
		return nil, false
	}
	return o.Synctime, true
}

// HasSynctime returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasSynctime() bool {
	if o != nil && !IsNil(o.Synctime) {
		return true
	}

	return false
}

// SetSynctime gets a reference to the given bool and assigns it to the Synctime field.
func (o *AdmingroupAdminToplevelCommands) SetSynctime(v bool) {
	o.Synctime = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupAdminToplevelCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupAdminToplevelCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupAdminToplevelCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupAdminToplevelCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupAdminToplevelCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupAdminToplevelCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupAdminToplevelCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ps) {
		toSerialize["ps"] = o.Ps
	}
	if !IsNil(o.Iostat) {
		toSerialize["iostat"] = o.Iostat
	}
	if !IsNil(o.Netstat) {
		toSerialize["netstat"] = o.Netstat
	}
	if !IsNil(o.Vmstat) {
		toSerialize["vmstat"] = o.Vmstat
	}
	if !IsNil(o.Tcpdump) {
		toSerialize["tcpdump"] = o.Tcpdump
	}
	if !IsNil(o.Rndc) {
		toSerialize["rndc"] = o.Rndc
	}
	if !IsNil(o.Sar) {
		toSerialize["sar"] = o.Sar
	}
	if !IsNil(o.Resilver) {
		toSerialize["resilver"] = o.Resilver
	}
	if !IsNil(o.RestartProduct) {
		toSerialize["restart_product"] = o.RestartProduct
	}
	if !IsNil(o.Scrape) {
		toSerialize["scrape"] = o.Scrape
	}
	if !IsNil(o.SamlRestart) {
		toSerialize["saml_restart"] = o.SamlRestart
	}
	if !IsNil(o.Synctime) {
		toSerialize["synctime"] = o.Synctime
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupAdminToplevelCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupAdminToplevelCommands := _AdmingroupAdminToplevelCommands{}

	err = json.Unmarshal(data, &varAdmingroupAdminToplevelCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupAdminToplevelCommands(varAdmingroupAdminToplevelCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ps")
		delete(additionalProperties, "iostat")
		delete(additionalProperties, "netstat")
		delete(additionalProperties, "vmstat")
		delete(additionalProperties, "tcpdump")
		delete(additionalProperties, "rndc")
		delete(additionalProperties, "sar")
		delete(additionalProperties, "resilver")
		delete(additionalProperties, "restart_product")
		delete(additionalProperties, "scrape")
		delete(additionalProperties, "saml_restart")
		delete(additionalProperties, "synctime")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupAdminToplevelCommands struct {
	value *AdmingroupAdminToplevelCommands
	isSet bool
}

func (v NullableAdmingroupAdminToplevelCommands) Get() *AdmingroupAdminToplevelCommands {
	return v.value
}

func (v *NullableAdmingroupAdminToplevelCommands) Set(val *AdmingroupAdminToplevelCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupAdminToplevelCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupAdminToplevelCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupAdminToplevelCommands(val *AdmingroupAdminToplevelCommands) *NullableAdmingroupAdminToplevelCommands {
	return &NullableAdmingroupAdminToplevelCommands{value: val, isSet: true}
}

func (v NullableAdmingroupAdminToplevelCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupAdminToplevelCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
