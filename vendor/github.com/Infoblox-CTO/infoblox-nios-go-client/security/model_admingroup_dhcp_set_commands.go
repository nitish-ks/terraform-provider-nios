/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupDhcpSetCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupDhcpSetCommands{}

// AdmingroupDhcpSetCommands struct for AdmingroupDhcpSetCommands
type AdmingroupDhcpSetCommands struct {
	// If True then CLI user has permission to run the command
	SetDhcpdRecvSockBufSize *bool `json:"set_dhcpd_recv_sock_buf_size,omitempty"`
	// If True then CLI user has permission to run the command
	SetLogTxnId *bool `json:"set_log_txn_id,omitempty"`
	// If True then CLI user has permission to run the command
	SetOverloadBootp *bool `json:"set_overload_bootp,omitempty"`
	// If True then CLI user has permission to run the command
	SetRegenerateDhcpUpdaterKeys *bool `json:"set_regenerate_dhcp_updater_keys,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupDhcpSetCommands AdmingroupDhcpSetCommands

// NewAdmingroupDhcpSetCommands instantiates a new AdmingroupDhcpSetCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupDhcpSetCommands() *AdmingroupDhcpSetCommands {
	this := AdmingroupDhcpSetCommands{}
	return &this
}

// NewAdmingroupDhcpSetCommandsWithDefaults instantiates a new AdmingroupDhcpSetCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupDhcpSetCommandsWithDefaults() *AdmingroupDhcpSetCommands {
	this := AdmingroupDhcpSetCommands{}
	return &this
}

// GetSetDhcpdRecvSockBufSize returns the SetDhcpdRecvSockBufSize field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetSetDhcpdRecvSockBufSize() bool {
	if o == nil || IsNil(o.SetDhcpdRecvSockBufSize) {
		var ret bool
		return ret
	}
	return *o.SetDhcpdRecvSockBufSize
}

// GetSetDhcpdRecvSockBufSizeOk returns a tuple with the SetDhcpdRecvSockBufSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetSetDhcpdRecvSockBufSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDhcpdRecvSockBufSize) {
		return nil, false
	}
	return o.SetDhcpdRecvSockBufSize, true
}

// HasSetDhcpdRecvSockBufSize returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasSetDhcpdRecvSockBufSize() bool {
	if o != nil && !IsNil(o.SetDhcpdRecvSockBufSize) {
		return true
	}

	return false
}

// SetSetDhcpdRecvSockBufSize gets a reference to the given bool and assigns it to the SetDhcpdRecvSockBufSize field.
func (o *AdmingroupDhcpSetCommands) SetSetDhcpdRecvSockBufSize(v bool) {
	o.SetDhcpdRecvSockBufSize = &v
}

// GetSetLogTxnId returns the SetLogTxnId field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetSetLogTxnId() bool {
	if o == nil || IsNil(o.SetLogTxnId) {
		var ret bool
		return ret
	}
	return *o.SetLogTxnId
}

// GetSetLogTxnIdOk returns a tuple with the SetLogTxnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetSetLogTxnIdOk() (*bool, bool) {
	if o == nil || IsNil(o.SetLogTxnId) {
		return nil, false
	}
	return o.SetLogTxnId, true
}

// HasSetLogTxnId returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasSetLogTxnId() bool {
	if o != nil && !IsNil(o.SetLogTxnId) {
		return true
	}

	return false
}

// SetSetLogTxnId gets a reference to the given bool and assigns it to the SetLogTxnId field.
func (o *AdmingroupDhcpSetCommands) SetSetLogTxnId(v bool) {
	o.SetLogTxnId = &v
}

// GetSetOverloadBootp returns the SetOverloadBootp field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetSetOverloadBootp() bool {
	if o == nil || IsNil(o.SetOverloadBootp) {
		var ret bool
		return ret
	}
	return *o.SetOverloadBootp
}

// GetSetOverloadBootpOk returns a tuple with the SetOverloadBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetSetOverloadBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.SetOverloadBootp) {
		return nil, false
	}
	return o.SetOverloadBootp, true
}

// HasSetOverloadBootp returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasSetOverloadBootp() bool {
	if o != nil && !IsNil(o.SetOverloadBootp) {
		return true
	}

	return false
}

// SetSetOverloadBootp gets a reference to the given bool and assigns it to the SetOverloadBootp field.
func (o *AdmingroupDhcpSetCommands) SetSetOverloadBootp(v bool) {
	o.SetOverloadBootp = &v
}

// GetSetRegenerateDhcpUpdaterKeys returns the SetRegenerateDhcpUpdaterKeys field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetSetRegenerateDhcpUpdaterKeys() bool {
	if o == nil || IsNil(o.SetRegenerateDhcpUpdaterKeys) {
		var ret bool
		return ret
	}
	return *o.SetRegenerateDhcpUpdaterKeys
}

// GetSetRegenerateDhcpUpdaterKeysOk returns a tuple with the SetRegenerateDhcpUpdaterKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetSetRegenerateDhcpUpdaterKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.SetRegenerateDhcpUpdaterKeys) {
		return nil, false
	}
	return o.SetRegenerateDhcpUpdaterKeys, true
}

// HasSetRegenerateDhcpUpdaterKeys returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasSetRegenerateDhcpUpdaterKeys() bool {
	if o != nil && !IsNil(o.SetRegenerateDhcpUpdaterKeys) {
		return true
	}

	return false
}

// SetSetRegenerateDhcpUpdaterKeys gets a reference to the given bool and assigns it to the SetRegenerateDhcpUpdaterKeys field.
func (o *AdmingroupDhcpSetCommands) SetSetRegenerateDhcpUpdaterKeys(v bool) {
	o.SetRegenerateDhcpUpdaterKeys = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupDhcpSetCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupDhcpSetCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpSetCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupDhcpSetCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupDhcpSetCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupDhcpSetCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupDhcpSetCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetDhcpdRecvSockBufSize) {
		toSerialize["set_dhcpd_recv_sock_buf_size"] = o.SetDhcpdRecvSockBufSize
	}
	if !IsNil(o.SetLogTxnId) {
		toSerialize["set_log_txn_id"] = o.SetLogTxnId
	}
	if !IsNil(o.SetOverloadBootp) {
		toSerialize["set_overload_bootp"] = o.SetOverloadBootp
	}
	if !IsNil(o.SetRegenerateDhcpUpdaterKeys) {
		toSerialize["set_regenerate_dhcp_updater_keys"] = o.SetRegenerateDhcpUpdaterKeys
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupDhcpSetCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupDhcpSetCommands := _AdmingroupDhcpSetCommands{}

	err = json.Unmarshal(data, &varAdmingroupDhcpSetCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupDhcpSetCommands(varAdmingroupDhcpSetCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "set_dhcpd_recv_sock_buf_size")
		delete(additionalProperties, "set_log_txn_id")
		delete(additionalProperties, "set_overload_bootp")
		delete(additionalProperties, "set_regenerate_dhcp_updater_keys")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupDhcpSetCommands struct {
	value *AdmingroupDhcpSetCommands
	isSet bool
}

func (v NullableAdmingroupDhcpSetCommands) Get() *AdmingroupDhcpSetCommands {
	return v.value
}

func (v *NullableAdmingroupDhcpSetCommands) Set(val *AdmingroupDhcpSetCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupDhcpSetCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupDhcpSetCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupDhcpSetCommands(val *AdmingroupDhcpSetCommands) *NullableAdmingroupDhcpSetCommands {
	return &NullableAdmingroupDhcpSetCommands{value: val, isSet: true}
}

func (v NullableAdmingroupDhcpSetCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupDhcpSetCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
