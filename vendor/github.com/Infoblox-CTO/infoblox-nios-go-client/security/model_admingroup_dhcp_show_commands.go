/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupDhcpShowCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupDhcpShowCommands{}

// AdmingroupDhcpShowCommands struct for AdmingroupDhcpShowCommands
type AdmingroupDhcpShowCommands struct {
	// If True then CLI user has permission to run the command
	ShowDhcpGssTsig *bool `json:"show_dhcp_gss_tsig,omitempty"`
	// If True then CLI user has permission to run the command
	ShowDhcpv6GssTsig *bool `json:"show_dhcpv6_gss_tsig,omitempty"`
	// If True then CLI user has permission to run the command
	ShowDhcpdRecvSockBufSize *bool `json:"show_dhcpd_recv_sock_buf_size,omitempty"`
	// If True then CLI user has permission to run the command
	ShowOverloadBootp *bool `json:"show_overload_bootp,omitempty"`
	// If True then CLI user has permission to run the command
	ShowLogTxnId *bool `json:"show_log_txn_id,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupDhcpShowCommands AdmingroupDhcpShowCommands

// NewAdmingroupDhcpShowCommands instantiates a new AdmingroupDhcpShowCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupDhcpShowCommands() *AdmingroupDhcpShowCommands {
	this := AdmingroupDhcpShowCommands{}
	return &this
}

// NewAdmingroupDhcpShowCommandsWithDefaults instantiates a new AdmingroupDhcpShowCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupDhcpShowCommandsWithDefaults() *AdmingroupDhcpShowCommands {
	this := AdmingroupDhcpShowCommands{}
	return &this
}

// GetShowDhcpGssTsig returns the ShowDhcpGssTsig field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpGssTsig() bool {
	if o == nil || IsNil(o.ShowDhcpGssTsig) {
		var ret bool
		return ret
	}
	return *o.ShowDhcpGssTsig
}

// GetShowDhcpGssTsigOk returns a tuple with the ShowDhcpGssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpGssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDhcpGssTsig) {
		return nil, false
	}
	return o.ShowDhcpGssTsig, true
}

// HasShowDhcpGssTsig returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasShowDhcpGssTsig() bool {
	if o != nil && !IsNil(o.ShowDhcpGssTsig) {
		return true
	}

	return false
}

// SetShowDhcpGssTsig gets a reference to the given bool and assigns it to the ShowDhcpGssTsig field.
func (o *AdmingroupDhcpShowCommands) SetShowDhcpGssTsig(v bool) {
	o.ShowDhcpGssTsig = &v
}

// GetShowDhcpv6GssTsig returns the ShowDhcpv6GssTsig field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpv6GssTsig() bool {
	if o == nil || IsNil(o.ShowDhcpv6GssTsig) {
		var ret bool
		return ret
	}
	return *o.ShowDhcpv6GssTsig
}

// GetShowDhcpv6GssTsigOk returns a tuple with the ShowDhcpv6GssTsig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpv6GssTsigOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDhcpv6GssTsig) {
		return nil, false
	}
	return o.ShowDhcpv6GssTsig, true
}

// HasShowDhcpv6GssTsig returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasShowDhcpv6GssTsig() bool {
	if o != nil && !IsNil(o.ShowDhcpv6GssTsig) {
		return true
	}

	return false
}

// SetShowDhcpv6GssTsig gets a reference to the given bool and assigns it to the ShowDhcpv6GssTsig field.
func (o *AdmingroupDhcpShowCommands) SetShowDhcpv6GssTsig(v bool) {
	o.ShowDhcpv6GssTsig = &v
}

// GetShowDhcpdRecvSockBufSize returns the ShowDhcpdRecvSockBufSize field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpdRecvSockBufSize() bool {
	if o == nil || IsNil(o.ShowDhcpdRecvSockBufSize) {
		var ret bool
		return ret
	}
	return *o.ShowDhcpdRecvSockBufSize
}

// GetShowDhcpdRecvSockBufSizeOk returns a tuple with the ShowDhcpdRecvSockBufSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetShowDhcpdRecvSockBufSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDhcpdRecvSockBufSize) {
		return nil, false
	}
	return o.ShowDhcpdRecvSockBufSize, true
}

// HasShowDhcpdRecvSockBufSize returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasShowDhcpdRecvSockBufSize() bool {
	if o != nil && !IsNil(o.ShowDhcpdRecvSockBufSize) {
		return true
	}

	return false
}

// SetShowDhcpdRecvSockBufSize gets a reference to the given bool and assigns it to the ShowDhcpdRecvSockBufSize field.
func (o *AdmingroupDhcpShowCommands) SetShowDhcpdRecvSockBufSize(v bool) {
	o.ShowDhcpdRecvSockBufSize = &v
}

// GetShowOverloadBootp returns the ShowOverloadBootp field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetShowOverloadBootp() bool {
	if o == nil || IsNil(o.ShowOverloadBootp) {
		var ret bool
		return ret
	}
	return *o.ShowOverloadBootp
}

// GetShowOverloadBootpOk returns a tuple with the ShowOverloadBootp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetShowOverloadBootpOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowOverloadBootp) {
		return nil, false
	}
	return o.ShowOverloadBootp, true
}

// HasShowOverloadBootp returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasShowOverloadBootp() bool {
	if o != nil && !IsNil(o.ShowOverloadBootp) {
		return true
	}

	return false
}

// SetShowOverloadBootp gets a reference to the given bool and assigns it to the ShowOverloadBootp field.
func (o *AdmingroupDhcpShowCommands) SetShowOverloadBootp(v bool) {
	o.ShowOverloadBootp = &v
}

// GetShowLogTxnId returns the ShowLogTxnId field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetShowLogTxnId() bool {
	if o == nil || IsNil(o.ShowLogTxnId) {
		var ret bool
		return ret
	}
	return *o.ShowLogTxnId
}

// GetShowLogTxnIdOk returns a tuple with the ShowLogTxnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetShowLogTxnIdOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLogTxnId) {
		return nil, false
	}
	return o.ShowLogTxnId, true
}

// HasShowLogTxnId returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasShowLogTxnId() bool {
	if o != nil && !IsNil(o.ShowLogTxnId) {
		return true
	}

	return false
}

// SetShowLogTxnId gets a reference to the given bool and assigns it to the ShowLogTxnId field.
func (o *AdmingroupDhcpShowCommands) SetShowLogTxnId(v bool) {
	o.ShowLogTxnId = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupDhcpShowCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupDhcpShowCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDhcpShowCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupDhcpShowCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupDhcpShowCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupDhcpShowCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupDhcpShowCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowDhcpGssTsig) {
		toSerialize["show_dhcp_gss_tsig"] = o.ShowDhcpGssTsig
	}
	if !IsNil(o.ShowDhcpv6GssTsig) {
		toSerialize["show_dhcpv6_gss_tsig"] = o.ShowDhcpv6GssTsig
	}
	if !IsNil(o.ShowDhcpdRecvSockBufSize) {
		toSerialize["show_dhcpd_recv_sock_buf_size"] = o.ShowDhcpdRecvSockBufSize
	}
	if !IsNil(o.ShowOverloadBootp) {
		toSerialize["show_overload_bootp"] = o.ShowOverloadBootp
	}
	if !IsNil(o.ShowLogTxnId) {
		toSerialize["show_log_txn_id"] = o.ShowLogTxnId
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupDhcpShowCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupDhcpShowCommands := _AdmingroupDhcpShowCommands{}

	err = json.Unmarshal(data, &varAdmingroupDhcpShowCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupDhcpShowCommands(varAdmingroupDhcpShowCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "show_dhcp_gss_tsig")
		delete(additionalProperties, "show_dhcpv6_gss_tsig")
		delete(additionalProperties, "show_dhcpd_recv_sock_buf_size")
		delete(additionalProperties, "show_overload_bootp")
		delete(additionalProperties, "show_log_txn_id")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupDhcpShowCommands struct {
	value *AdmingroupDhcpShowCommands
	isSet bool
}

func (v NullableAdmingroupDhcpShowCommands) Get() *AdmingroupDhcpShowCommands {
	return v.value
}

func (v *NullableAdmingroupDhcpShowCommands) Set(val *AdmingroupDhcpShowCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupDhcpShowCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupDhcpShowCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupDhcpShowCommands(val *AdmingroupDhcpShowCommands) *NullableAdmingroupDhcpShowCommands {
	return &NullableAdmingroupDhcpShowCommands{value: val, isSet: true}
}

func (v NullableAdmingroupDhcpShowCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupDhcpShowCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
