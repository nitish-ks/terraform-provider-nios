/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupDnsSetCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupDnsSetCommands{}

// AdmingroupDnsSetCommands struct for AdmingroupDnsSetCommands
type AdmingroupDnsSetCommands struct {
	// If True then CLI user has permission to run the command
	SetDns *bool `json:"set_dns,omitempty"`
	// If True then CLI user has permission to run the command
	SetDnsRrl *bool `json:"set_dns_rrl,omitempty"`
	// If True then CLI user has permission to run the command
	SetEnableDnstap *bool `json:"set_enable_dnstap,omitempty"`
	// If True then CLI user has permission to run the command
	SetEnableMatchRecursiveOnly *bool `json:"set_enable_match_recursive_only,omitempty"`
	// If True then CLI user has permission to run the command
	SetExtraDnsNameValidations *bool `json:"set_extra_dns_name_validations,omitempty"`
	// If True then CLI user has permission to run the command
	SetLogGuestLookups *bool `json:"set_log_guest_lookups,omitempty"`
	// If True then CLI user has permission to run the command
	SetMaxRecursionDepth *bool `json:"set_max_recursion_depth,omitempty"`
	// If True then CLI user has permission to run the command
	SetMaxRecursionQueries *bool `json:"set_max_recursion_queries,omitempty"`
	// If True then CLI user has permission to run the command
	SetMonitor *bool `json:"set_monitor,omitempty"`
	// If True then CLI user has permission to run the command
	SetMsDnsReportsSyncInterval *bool `json:"set_ms_dns_reports_sync_interval,omitempty"`
	// If True then CLI user has permission to run the command
	SetMsStickyIp *bool `json:"set_ms_sticky_ip,omitempty"`
	// If True then CLI user has permission to run the command
	SetRestartAnycastWithDnsRestart *bool `json:"set_restart_anycast_with_dns_restart,omitempty"`
	// If True then CLI user has permission to run the command
	SetRpzAddSoa *bool `json:"set_rpz_add_soa,omitempty"`
	// If True then CLI user has permission to run the command
	SetDnsAccel *bool `json:"set_dns_accel,omitempty"`
	// If True then CLI user has permission to run the command
	SetDnsAccelDebug *bool `json:"set_dns_accel_debug,omitempty"`
	// If True then CLI user has permission to run the command
	SetDnsAutoGen *bool `json:"set_dns_auto_gen,omitempty"`
	// If True then CLI user has permission to run the command
	SetAllowQueryDomain *bool `json:"set_allow_query_domain,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupDnsSetCommands AdmingroupDnsSetCommands

// NewAdmingroupDnsSetCommands instantiates a new AdmingroupDnsSetCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupDnsSetCommands() *AdmingroupDnsSetCommands {
	this := AdmingroupDnsSetCommands{}
	return &this
}

// NewAdmingroupDnsSetCommandsWithDefaults instantiates a new AdmingroupDnsSetCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupDnsSetCommandsWithDefaults() *AdmingroupDnsSetCommands {
	this := AdmingroupDnsSetCommands{}
	return &this
}

// GetSetDns returns the SetDns field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetDns() bool {
	if o == nil || IsNil(o.SetDns) {
		var ret bool
		return ret
	}
	return *o.SetDns
}

// GetSetDnsOk returns a tuple with the SetDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDns) {
		return nil, false
	}
	return o.SetDns, true
}

// HasSetDns returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetDns() bool {
	if o != nil && !IsNil(o.SetDns) {
		return true
	}

	return false
}

// SetSetDns gets a reference to the given bool and assigns it to the SetDns field.
func (o *AdmingroupDnsSetCommands) SetSetDns(v bool) {
	o.SetDns = &v
}

// GetSetDnsRrl returns the SetDnsRrl field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetDnsRrl() bool {
	if o == nil || IsNil(o.SetDnsRrl) {
		var ret bool
		return ret
	}
	return *o.SetDnsRrl
}

// GetSetDnsRrlOk returns a tuple with the SetDnsRrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetDnsRrlOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDnsRrl) {
		return nil, false
	}
	return o.SetDnsRrl, true
}

// HasSetDnsRrl returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetDnsRrl() bool {
	if o != nil && !IsNil(o.SetDnsRrl) {
		return true
	}

	return false
}

// SetSetDnsRrl gets a reference to the given bool and assigns it to the SetDnsRrl field.
func (o *AdmingroupDnsSetCommands) SetSetDnsRrl(v bool) {
	o.SetDnsRrl = &v
}

// GetSetEnableDnstap returns the SetEnableDnstap field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetEnableDnstap() bool {
	if o == nil || IsNil(o.SetEnableDnstap) {
		var ret bool
		return ret
	}
	return *o.SetEnableDnstap
}

// GetSetEnableDnstapOk returns a tuple with the SetEnableDnstap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetEnableDnstapOk() (*bool, bool) {
	if o == nil || IsNil(o.SetEnableDnstap) {
		return nil, false
	}
	return o.SetEnableDnstap, true
}

// HasSetEnableDnstap returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetEnableDnstap() bool {
	if o != nil && !IsNil(o.SetEnableDnstap) {
		return true
	}

	return false
}

// SetSetEnableDnstap gets a reference to the given bool and assigns it to the SetEnableDnstap field.
func (o *AdmingroupDnsSetCommands) SetSetEnableDnstap(v bool) {
	o.SetEnableDnstap = &v
}

// GetSetEnableMatchRecursiveOnly returns the SetEnableMatchRecursiveOnly field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetEnableMatchRecursiveOnly() bool {
	if o == nil || IsNil(o.SetEnableMatchRecursiveOnly) {
		var ret bool
		return ret
	}
	return *o.SetEnableMatchRecursiveOnly
}

// GetSetEnableMatchRecursiveOnlyOk returns a tuple with the SetEnableMatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetEnableMatchRecursiveOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SetEnableMatchRecursiveOnly) {
		return nil, false
	}
	return o.SetEnableMatchRecursiveOnly, true
}

// HasSetEnableMatchRecursiveOnly returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetEnableMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.SetEnableMatchRecursiveOnly) {
		return true
	}

	return false
}

// SetSetEnableMatchRecursiveOnly gets a reference to the given bool and assigns it to the SetEnableMatchRecursiveOnly field.
func (o *AdmingroupDnsSetCommands) SetSetEnableMatchRecursiveOnly(v bool) {
	o.SetEnableMatchRecursiveOnly = &v
}

// GetSetExtraDnsNameValidations returns the SetExtraDnsNameValidations field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetExtraDnsNameValidations() bool {
	if o == nil || IsNil(o.SetExtraDnsNameValidations) {
		var ret bool
		return ret
	}
	return *o.SetExtraDnsNameValidations
}

// GetSetExtraDnsNameValidationsOk returns a tuple with the SetExtraDnsNameValidations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetExtraDnsNameValidationsOk() (*bool, bool) {
	if o == nil || IsNil(o.SetExtraDnsNameValidations) {
		return nil, false
	}
	return o.SetExtraDnsNameValidations, true
}

// HasSetExtraDnsNameValidations returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetExtraDnsNameValidations() bool {
	if o != nil && !IsNil(o.SetExtraDnsNameValidations) {
		return true
	}

	return false
}

// SetSetExtraDnsNameValidations gets a reference to the given bool and assigns it to the SetExtraDnsNameValidations field.
func (o *AdmingroupDnsSetCommands) SetSetExtraDnsNameValidations(v bool) {
	o.SetExtraDnsNameValidations = &v
}

// GetSetLogGuestLookups returns the SetLogGuestLookups field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetLogGuestLookups() bool {
	if o == nil || IsNil(o.SetLogGuestLookups) {
		var ret bool
		return ret
	}
	return *o.SetLogGuestLookups
}

// GetSetLogGuestLookupsOk returns a tuple with the SetLogGuestLookups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetLogGuestLookupsOk() (*bool, bool) {
	if o == nil || IsNil(o.SetLogGuestLookups) {
		return nil, false
	}
	return o.SetLogGuestLookups, true
}

// HasSetLogGuestLookups returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetLogGuestLookups() bool {
	if o != nil && !IsNil(o.SetLogGuestLookups) {
		return true
	}

	return false
}

// SetSetLogGuestLookups gets a reference to the given bool and assigns it to the SetLogGuestLookups field.
func (o *AdmingroupDnsSetCommands) SetSetLogGuestLookups(v bool) {
	o.SetLogGuestLookups = &v
}

// GetSetMaxRecursionDepth returns the SetMaxRecursionDepth field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetMaxRecursionDepth() bool {
	if o == nil || IsNil(o.SetMaxRecursionDepth) {
		var ret bool
		return ret
	}
	return *o.SetMaxRecursionDepth
}

// GetSetMaxRecursionDepthOk returns a tuple with the SetMaxRecursionDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetMaxRecursionDepthOk() (*bool, bool) {
	if o == nil || IsNil(o.SetMaxRecursionDepth) {
		return nil, false
	}
	return o.SetMaxRecursionDepth, true
}

// HasSetMaxRecursionDepth returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetMaxRecursionDepth() bool {
	if o != nil && !IsNil(o.SetMaxRecursionDepth) {
		return true
	}

	return false
}

// SetSetMaxRecursionDepth gets a reference to the given bool and assigns it to the SetMaxRecursionDepth field.
func (o *AdmingroupDnsSetCommands) SetSetMaxRecursionDepth(v bool) {
	o.SetMaxRecursionDepth = &v
}

// GetSetMaxRecursionQueries returns the SetMaxRecursionQueries field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetMaxRecursionQueries() bool {
	if o == nil || IsNil(o.SetMaxRecursionQueries) {
		var ret bool
		return ret
	}
	return *o.SetMaxRecursionQueries
}

// GetSetMaxRecursionQueriesOk returns a tuple with the SetMaxRecursionQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetMaxRecursionQueriesOk() (*bool, bool) {
	if o == nil || IsNil(o.SetMaxRecursionQueries) {
		return nil, false
	}
	return o.SetMaxRecursionQueries, true
}

// HasSetMaxRecursionQueries returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetMaxRecursionQueries() bool {
	if o != nil && !IsNil(o.SetMaxRecursionQueries) {
		return true
	}

	return false
}

// SetSetMaxRecursionQueries gets a reference to the given bool and assigns it to the SetMaxRecursionQueries field.
func (o *AdmingroupDnsSetCommands) SetSetMaxRecursionQueries(v bool) {
	o.SetMaxRecursionQueries = &v
}

// GetSetMonitor returns the SetMonitor field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetMonitor() bool {
	if o == nil || IsNil(o.SetMonitor) {
		var ret bool
		return ret
	}
	return *o.SetMonitor
}

// GetSetMonitorOk returns a tuple with the SetMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetMonitorOk() (*bool, bool) {
	if o == nil || IsNil(o.SetMonitor) {
		return nil, false
	}
	return o.SetMonitor, true
}

// HasSetMonitor returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetMonitor() bool {
	if o != nil && !IsNil(o.SetMonitor) {
		return true
	}

	return false
}

// SetSetMonitor gets a reference to the given bool and assigns it to the SetMonitor field.
func (o *AdmingroupDnsSetCommands) SetSetMonitor(v bool) {
	o.SetMonitor = &v
}

// GetSetMsDnsReportsSyncInterval returns the SetMsDnsReportsSyncInterval field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetMsDnsReportsSyncInterval() bool {
	if o == nil || IsNil(o.SetMsDnsReportsSyncInterval) {
		var ret bool
		return ret
	}
	return *o.SetMsDnsReportsSyncInterval
}

// GetSetMsDnsReportsSyncIntervalOk returns a tuple with the SetMsDnsReportsSyncInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetMsDnsReportsSyncIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.SetMsDnsReportsSyncInterval) {
		return nil, false
	}
	return o.SetMsDnsReportsSyncInterval, true
}

// HasSetMsDnsReportsSyncInterval returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetMsDnsReportsSyncInterval() bool {
	if o != nil && !IsNil(o.SetMsDnsReportsSyncInterval) {
		return true
	}

	return false
}

// SetSetMsDnsReportsSyncInterval gets a reference to the given bool and assigns it to the SetMsDnsReportsSyncInterval field.
func (o *AdmingroupDnsSetCommands) SetSetMsDnsReportsSyncInterval(v bool) {
	o.SetMsDnsReportsSyncInterval = &v
}

// GetSetMsStickyIp returns the SetMsStickyIp field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetMsStickyIp() bool {
	if o == nil || IsNil(o.SetMsStickyIp) {
		var ret bool
		return ret
	}
	return *o.SetMsStickyIp
}

// GetSetMsStickyIpOk returns a tuple with the SetMsStickyIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetMsStickyIpOk() (*bool, bool) {
	if o == nil || IsNil(o.SetMsStickyIp) {
		return nil, false
	}
	return o.SetMsStickyIp, true
}

// HasSetMsStickyIp returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetMsStickyIp() bool {
	if o != nil && !IsNil(o.SetMsStickyIp) {
		return true
	}

	return false
}

// SetSetMsStickyIp gets a reference to the given bool and assigns it to the SetMsStickyIp field.
func (o *AdmingroupDnsSetCommands) SetSetMsStickyIp(v bool) {
	o.SetMsStickyIp = &v
}

// GetSetRestartAnycastWithDnsRestart returns the SetRestartAnycastWithDnsRestart field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetRestartAnycastWithDnsRestart() bool {
	if o == nil || IsNil(o.SetRestartAnycastWithDnsRestart) {
		var ret bool
		return ret
	}
	return *o.SetRestartAnycastWithDnsRestart
}

// GetSetRestartAnycastWithDnsRestartOk returns a tuple with the SetRestartAnycastWithDnsRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetRestartAnycastWithDnsRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.SetRestartAnycastWithDnsRestart) {
		return nil, false
	}
	return o.SetRestartAnycastWithDnsRestart, true
}

// HasSetRestartAnycastWithDnsRestart returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetRestartAnycastWithDnsRestart() bool {
	if o != nil && !IsNil(o.SetRestartAnycastWithDnsRestart) {
		return true
	}

	return false
}

// SetSetRestartAnycastWithDnsRestart gets a reference to the given bool and assigns it to the SetRestartAnycastWithDnsRestart field.
func (o *AdmingroupDnsSetCommands) SetSetRestartAnycastWithDnsRestart(v bool) {
	o.SetRestartAnycastWithDnsRestart = &v
}

// GetSetRpzAddSoa returns the SetRpzAddSoa field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetRpzAddSoa() bool {
	if o == nil || IsNil(o.SetRpzAddSoa) {
		var ret bool
		return ret
	}
	return *o.SetRpzAddSoa
}

// GetSetRpzAddSoaOk returns a tuple with the SetRpzAddSoa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetRpzAddSoaOk() (*bool, bool) {
	if o == nil || IsNil(o.SetRpzAddSoa) {
		return nil, false
	}
	return o.SetRpzAddSoa, true
}

// HasSetRpzAddSoa returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetRpzAddSoa() bool {
	if o != nil && !IsNil(o.SetRpzAddSoa) {
		return true
	}

	return false
}

// SetSetRpzAddSoa gets a reference to the given bool and assigns it to the SetRpzAddSoa field.
func (o *AdmingroupDnsSetCommands) SetSetRpzAddSoa(v bool) {
	o.SetRpzAddSoa = &v
}

// GetSetDnsAccel returns the SetDnsAccel field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetDnsAccel() bool {
	if o == nil || IsNil(o.SetDnsAccel) {
		var ret bool
		return ret
	}
	return *o.SetDnsAccel
}

// GetSetDnsAccelOk returns a tuple with the SetDnsAccel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetDnsAccelOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDnsAccel) {
		return nil, false
	}
	return o.SetDnsAccel, true
}

// HasSetDnsAccel returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetDnsAccel() bool {
	if o != nil && !IsNil(o.SetDnsAccel) {
		return true
	}

	return false
}

// SetSetDnsAccel gets a reference to the given bool and assigns it to the SetDnsAccel field.
func (o *AdmingroupDnsSetCommands) SetSetDnsAccel(v bool) {
	o.SetDnsAccel = &v
}

// GetSetDnsAccelDebug returns the SetDnsAccelDebug field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetDnsAccelDebug() bool {
	if o == nil || IsNil(o.SetDnsAccelDebug) {
		var ret bool
		return ret
	}
	return *o.SetDnsAccelDebug
}

// GetSetDnsAccelDebugOk returns a tuple with the SetDnsAccelDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetDnsAccelDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDnsAccelDebug) {
		return nil, false
	}
	return o.SetDnsAccelDebug, true
}

// HasSetDnsAccelDebug returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetDnsAccelDebug() bool {
	if o != nil && !IsNil(o.SetDnsAccelDebug) {
		return true
	}

	return false
}

// SetSetDnsAccelDebug gets a reference to the given bool and assigns it to the SetDnsAccelDebug field.
func (o *AdmingroupDnsSetCommands) SetSetDnsAccelDebug(v bool) {
	o.SetDnsAccelDebug = &v
}

// GetSetDnsAutoGen returns the SetDnsAutoGen field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetDnsAutoGen() bool {
	if o == nil || IsNil(o.SetDnsAutoGen) {
		var ret bool
		return ret
	}
	return *o.SetDnsAutoGen
}

// GetSetDnsAutoGenOk returns a tuple with the SetDnsAutoGen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetDnsAutoGenOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDnsAutoGen) {
		return nil, false
	}
	return o.SetDnsAutoGen, true
}

// HasSetDnsAutoGen returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetDnsAutoGen() bool {
	if o != nil && !IsNil(o.SetDnsAutoGen) {
		return true
	}

	return false
}

// SetSetDnsAutoGen gets a reference to the given bool and assigns it to the SetDnsAutoGen field.
func (o *AdmingroupDnsSetCommands) SetSetDnsAutoGen(v bool) {
	o.SetDnsAutoGen = &v
}

// GetSetAllowQueryDomain returns the SetAllowQueryDomain field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetSetAllowQueryDomain() bool {
	if o == nil || IsNil(o.SetAllowQueryDomain) {
		var ret bool
		return ret
	}
	return *o.SetAllowQueryDomain
}

// GetSetAllowQueryDomainOk returns a tuple with the SetAllowQueryDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetSetAllowQueryDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.SetAllowQueryDomain) {
		return nil, false
	}
	return o.SetAllowQueryDomain, true
}

// HasSetAllowQueryDomain returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasSetAllowQueryDomain() bool {
	if o != nil && !IsNil(o.SetAllowQueryDomain) {
		return true
	}

	return false
}

// SetSetAllowQueryDomain gets a reference to the given bool and assigns it to the SetAllowQueryDomain field.
func (o *AdmingroupDnsSetCommands) SetSetAllowQueryDomain(v bool) {
	o.SetAllowQueryDomain = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupDnsSetCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupDnsSetCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsSetCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupDnsSetCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupDnsSetCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupDnsSetCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupDnsSetCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetDns) {
		toSerialize["set_dns"] = o.SetDns
	}
	if !IsNil(o.SetDnsRrl) {
		toSerialize["set_dns_rrl"] = o.SetDnsRrl
	}
	if !IsNil(o.SetEnableDnstap) {
		toSerialize["set_enable_dnstap"] = o.SetEnableDnstap
	}
	if !IsNil(o.SetEnableMatchRecursiveOnly) {
		toSerialize["set_enable_match_recursive_only"] = o.SetEnableMatchRecursiveOnly
	}
	if !IsNil(o.SetExtraDnsNameValidations) {
		toSerialize["set_extra_dns_name_validations"] = o.SetExtraDnsNameValidations
	}
	if !IsNil(o.SetLogGuestLookups) {
		toSerialize["set_log_guest_lookups"] = o.SetLogGuestLookups
	}
	if !IsNil(o.SetMaxRecursionDepth) {
		toSerialize["set_max_recursion_depth"] = o.SetMaxRecursionDepth
	}
	if !IsNil(o.SetMaxRecursionQueries) {
		toSerialize["set_max_recursion_queries"] = o.SetMaxRecursionQueries
	}
	if !IsNil(o.SetMonitor) {
		toSerialize["set_monitor"] = o.SetMonitor
	}
	if !IsNil(o.SetMsDnsReportsSyncInterval) {
		toSerialize["set_ms_dns_reports_sync_interval"] = o.SetMsDnsReportsSyncInterval
	}
	if !IsNil(o.SetMsStickyIp) {
		toSerialize["set_ms_sticky_ip"] = o.SetMsStickyIp
	}
	if !IsNil(o.SetRestartAnycastWithDnsRestart) {
		toSerialize["set_restart_anycast_with_dns_restart"] = o.SetRestartAnycastWithDnsRestart
	}
	if !IsNil(o.SetRpzAddSoa) {
		toSerialize["set_rpz_add_soa"] = o.SetRpzAddSoa
	}
	if !IsNil(o.SetDnsAccel) {
		toSerialize["set_dns_accel"] = o.SetDnsAccel
	}
	if !IsNil(o.SetDnsAccelDebug) {
		toSerialize["set_dns_accel_debug"] = o.SetDnsAccelDebug
	}
	if !IsNil(o.SetDnsAutoGen) {
		toSerialize["set_dns_auto_gen"] = o.SetDnsAutoGen
	}
	if !IsNil(o.SetAllowQueryDomain) {
		toSerialize["set_allow_query_domain"] = o.SetAllowQueryDomain
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupDnsSetCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupDnsSetCommands := _AdmingroupDnsSetCommands{}

	err = json.Unmarshal(data, &varAdmingroupDnsSetCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupDnsSetCommands(varAdmingroupDnsSetCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "set_dns")
		delete(additionalProperties, "set_dns_rrl")
		delete(additionalProperties, "set_enable_dnstap")
		delete(additionalProperties, "set_enable_match_recursive_only")
		delete(additionalProperties, "set_extra_dns_name_validations")
		delete(additionalProperties, "set_log_guest_lookups")
		delete(additionalProperties, "set_max_recursion_depth")
		delete(additionalProperties, "set_max_recursion_queries")
		delete(additionalProperties, "set_monitor")
		delete(additionalProperties, "set_ms_dns_reports_sync_interval")
		delete(additionalProperties, "set_ms_sticky_ip")
		delete(additionalProperties, "set_restart_anycast_with_dns_restart")
		delete(additionalProperties, "set_rpz_add_soa")
		delete(additionalProperties, "set_dns_accel")
		delete(additionalProperties, "set_dns_accel_debug")
		delete(additionalProperties, "set_dns_auto_gen")
		delete(additionalProperties, "set_allow_query_domain")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupDnsSetCommands struct {
	value *AdmingroupDnsSetCommands
	isSet bool
}

func (v NullableAdmingroupDnsSetCommands) Get() *AdmingroupDnsSetCommands {
	return v.value
}

func (v *NullableAdmingroupDnsSetCommands) Set(val *AdmingroupDnsSetCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupDnsSetCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupDnsSetCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupDnsSetCommands(val *AdmingroupDnsSetCommands) *NullableAdmingroupDnsSetCommands {
	return &NullableAdmingroupDnsSetCommands{value: val, isSet: true}
}

func (v NullableAdmingroupDnsSetCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupDnsSetCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
