/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupDnsToplevelCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupDnsToplevelCommands{}

// AdmingroupDnsToplevelCommands struct for AdmingroupDnsToplevelCommands
type AdmingroupDnsToplevelCommands struct {
	// If True then CLI user has permission to run the command
	DdnsAdd *bool `json:"ddns_add,omitempty"`
	// If True then CLI user has permission to run the command
	DdnsDelete *bool `json:"ddns_delete,omitempty"`
	// If True then CLI user has permission to run the command
	Delete *bool `json:"delete,omitempty"`
	// If True then CLI user has permission to run the command
	DnsARecordDelete *bool `json:"dns_a_record_delete,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupDnsToplevelCommands AdmingroupDnsToplevelCommands

// NewAdmingroupDnsToplevelCommands instantiates a new AdmingroupDnsToplevelCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupDnsToplevelCommands() *AdmingroupDnsToplevelCommands {
	this := AdmingroupDnsToplevelCommands{}
	return &this
}

// NewAdmingroupDnsToplevelCommandsWithDefaults instantiates a new AdmingroupDnsToplevelCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupDnsToplevelCommandsWithDefaults() *AdmingroupDnsToplevelCommands {
	this := AdmingroupDnsToplevelCommands{}
	return &this
}

// GetDdnsAdd returns the DdnsAdd field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetDdnsAdd() bool {
	if o == nil || IsNil(o.DdnsAdd) {
		var ret bool
		return ret
	}
	return *o.DdnsAdd
}

// GetDdnsAddOk returns a tuple with the DdnsAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetDdnsAddOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsAdd) {
		return nil, false
	}
	return o.DdnsAdd, true
}

// HasDdnsAdd returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasDdnsAdd() bool {
	if o != nil && !IsNil(o.DdnsAdd) {
		return true
	}

	return false
}

// SetDdnsAdd gets a reference to the given bool and assigns it to the DdnsAdd field.
func (o *AdmingroupDnsToplevelCommands) SetDdnsAdd(v bool) {
	o.DdnsAdd = &v
}

// GetDdnsDelete returns the DdnsDelete field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetDdnsDelete() bool {
	if o == nil || IsNil(o.DdnsDelete) {
		var ret bool
		return ret
	}
	return *o.DdnsDelete
}

// GetDdnsDeleteOk returns a tuple with the DdnsDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetDdnsDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsDelete) {
		return nil, false
	}
	return o.DdnsDelete, true
}

// HasDdnsDelete returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasDdnsDelete() bool {
	if o != nil && !IsNil(o.DdnsDelete) {
		return true
	}

	return false
}

// SetDdnsDelete gets a reference to the given bool and assigns it to the DdnsDelete field.
func (o *AdmingroupDnsToplevelCommands) SetDdnsDelete(v bool) {
	o.DdnsDelete = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *AdmingroupDnsToplevelCommands) SetDelete(v bool) {
	o.Delete = &v
}

// GetDnsARecordDelete returns the DnsARecordDelete field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetDnsARecordDelete() bool {
	if o == nil || IsNil(o.DnsARecordDelete) {
		var ret bool
		return ret
	}
	return *o.DnsARecordDelete
}

// GetDnsARecordDeleteOk returns a tuple with the DnsARecordDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetDnsARecordDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsARecordDelete) {
		return nil, false
	}
	return o.DnsARecordDelete, true
}

// HasDnsARecordDelete returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasDnsARecordDelete() bool {
	if o != nil && !IsNil(o.DnsARecordDelete) {
		return true
	}

	return false
}

// SetDnsARecordDelete gets a reference to the given bool and assigns it to the DnsARecordDelete field.
func (o *AdmingroupDnsToplevelCommands) SetDnsARecordDelete(v bool) {
	o.DnsARecordDelete = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupDnsToplevelCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupDnsToplevelCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDnsToplevelCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupDnsToplevelCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupDnsToplevelCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupDnsToplevelCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupDnsToplevelCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DdnsAdd) {
		toSerialize["ddns_add"] = o.DdnsAdd
	}
	if !IsNil(o.DdnsDelete) {
		toSerialize["ddns_delete"] = o.DdnsDelete
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.DnsARecordDelete) {
		toSerialize["dns_a_record_delete"] = o.DnsARecordDelete
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupDnsToplevelCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupDnsToplevelCommands := _AdmingroupDnsToplevelCommands{}

	err = json.Unmarshal(data, &varAdmingroupDnsToplevelCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupDnsToplevelCommands(varAdmingroupDnsToplevelCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ddns_add")
		delete(additionalProperties, "ddns_delete")
		delete(additionalProperties, "delete")
		delete(additionalProperties, "dns_a_record_delete")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupDnsToplevelCommands struct {
	value *AdmingroupDnsToplevelCommands
	isSet bool
}

func (v NullableAdmingroupDnsToplevelCommands) Get() *AdmingroupDnsToplevelCommands {
	return v.value
}

func (v *NullableAdmingroupDnsToplevelCommands) Set(val *AdmingroupDnsToplevelCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupDnsToplevelCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupDnsToplevelCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupDnsToplevelCommands(val *AdmingroupDnsToplevelCommands) *NullableAdmingroupDnsToplevelCommands {
	return &NullableAdmingroupDnsToplevelCommands{value: val, isSet: true}
}

func (v NullableAdmingroupDnsToplevelCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupDnsToplevelCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
