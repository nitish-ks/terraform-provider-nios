/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupDockerSetCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupDockerSetCommands{}

// AdmingroupDockerSetCommands struct for AdmingroupDockerSetCommands
type AdmingroupDockerSetCommands struct {
	// If True then CLI user has permission to run the command
	SetDockerBridge *bool `json:"set_docker_bridge,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupDockerSetCommands AdmingroupDockerSetCommands

// NewAdmingroupDockerSetCommands instantiates a new AdmingroupDockerSetCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupDockerSetCommands() *AdmingroupDockerSetCommands {
	this := AdmingroupDockerSetCommands{}
	return &this
}

// NewAdmingroupDockerSetCommandsWithDefaults instantiates a new AdmingroupDockerSetCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupDockerSetCommandsWithDefaults() *AdmingroupDockerSetCommands {
	this := AdmingroupDockerSetCommands{}
	return &this
}

// GetSetDockerBridge returns the SetDockerBridge field value if set, zero value otherwise.
func (o *AdmingroupDockerSetCommands) GetSetDockerBridge() bool {
	if o == nil || IsNil(o.SetDockerBridge) {
		var ret bool
		return ret
	}
	return *o.SetDockerBridge
}

// GetSetDockerBridgeOk returns a tuple with the SetDockerBridge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDockerSetCommands) GetSetDockerBridgeOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDockerBridge) {
		return nil, false
	}
	return o.SetDockerBridge, true
}

// HasSetDockerBridge returns a boolean if a field has been set.
func (o *AdmingroupDockerSetCommands) HasSetDockerBridge() bool {
	if o != nil && !IsNil(o.SetDockerBridge) {
		return true
	}

	return false
}

// SetSetDockerBridge gets a reference to the given bool and assigns it to the SetDockerBridge field.
func (o *AdmingroupDockerSetCommands) SetSetDockerBridge(v bool) {
	o.SetDockerBridge = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupDockerSetCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDockerSetCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupDockerSetCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupDockerSetCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupDockerSetCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupDockerSetCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupDockerSetCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupDockerSetCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupDockerSetCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupDockerSetCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetDockerBridge) {
		toSerialize["set_docker_bridge"] = o.SetDockerBridge
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupDockerSetCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupDockerSetCommands := _AdmingroupDockerSetCommands{}

	err = json.Unmarshal(data, &varAdmingroupDockerSetCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupDockerSetCommands(varAdmingroupDockerSetCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "set_docker_bridge")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupDockerSetCommands struct {
	value *AdmingroupDockerSetCommands
	isSet bool
}

func (v NullableAdmingroupDockerSetCommands) Get() *AdmingroupDockerSetCommands {
	return v.value
}

func (v *NullableAdmingroupDockerSetCommands) Set(val *AdmingroupDockerSetCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupDockerSetCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupDockerSetCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupDockerSetCommands(val *AdmingroupDockerSetCommands) *NullableAdmingroupDockerSetCommands {
	return &NullableAdmingroupDockerSetCommands{value: val, isSet: true}
}

func (v NullableAdmingroupDockerSetCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupDockerSetCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
