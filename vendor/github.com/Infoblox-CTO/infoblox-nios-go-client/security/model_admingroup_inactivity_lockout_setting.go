/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupInactivityLockoutSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupInactivityLockoutSetting{}

// AdmingroupInactivityLockoutSetting struct for AdmingroupInactivityLockoutSetting
type AdmingroupInactivityLockoutSetting struct {
	// Enable/disable the account inactivity lockout.
	AccountInactivityLockoutEnable *bool `json:"account_inactivity_lockout_enable,omitempty"`
	// Number of days after which account gets locked out if user does not login.
	InactiveDays *int64 `json:"inactive_days,omitempty"`
	// The number of days before the account lockout date when the appliance sends a reminder.
	ReminderDays *int64 `json:"reminder_days,omitempty"`
	// Enable/disable reactivating user account by logging in from serial console.
	ReactivateViaSerialConsoleEnable *bool `json:"reactivate_via_serial_console_enable,omitempty"`
	// Enable/disable reactivating user account by logging in from remote console.
	ReactivateViaRemoteConsoleEnable *bool `json:"reactivate_via_remote_console_enable,omitempty"`
	AdditionalProperties             map[string]interface{}
}

type _AdmingroupInactivityLockoutSetting AdmingroupInactivityLockoutSetting

// NewAdmingroupInactivityLockoutSetting instantiates a new AdmingroupInactivityLockoutSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupInactivityLockoutSetting() *AdmingroupInactivityLockoutSetting {
	this := AdmingroupInactivityLockoutSetting{}
	return &this
}

// NewAdmingroupInactivityLockoutSettingWithDefaults instantiates a new AdmingroupInactivityLockoutSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupInactivityLockoutSettingWithDefaults() *AdmingroupInactivityLockoutSetting {
	this := AdmingroupInactivityLockoutSetting{}
	return &this
}

// GetAccountInactivityLockoutEnable returns the AccountInactivityLockoutEnable field value if set, zero value otherwise.
func (o *AdmingroupInactivityLockoutSetting) GetAccountInactivityLockoutEnable() bool {
	if o == nil || IsNil(o.AccountInactivityLockoutEnable) {
		var ret bool
		return ret
	}
	return *o.AccountInactivityLockoutEnable
}

// GetAccountInactivityLockoutEnableOk returns a tuple with the AccountInactivityLockoutEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupInactivityLockoutSetting) GetAccountInactivityLockoutEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountInactivityLockoutEnable) {
		return nil, false
	}
	return o.AccountInactivityLockoutEnable, true
}

// HasAccountInactivityLockoutEnable returns a boolean if a field has been set.
func (o *AdmingroupInactivityLockoutSetting) HasAccountInactivityLockoutEnable() bool {
	if o != nil && !IsNil(o.AccountInactivityLockoutEnable) {
		return true
	}

	return false
}

// SetAccountInactivityLockoutEnable gets a reference to the given bool and assigns it to the AccountInactivityLockoutEnable field.
func (o *AdmingroupInactivityLockoutSetting) SetAccountInactivityLockoutEnable(v bool) {
	o.AccountInactivityLockoutEnable = &v
}

// GetInactiveDays returns the InactiveDays field value if set, zero value otherwise.
func (o *AdmingroupInactivityLockoutSetting) GetInactiveDays() int64 {
	if o == nil || IsNil(o.InactiveDays) {
		var ret int64
		return ret
	}
	return *o.InactiveDays
}

// GetInactiveDaysOk returns a tuple with the InactiveDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupInactivityLockoutSetting) GetInactiveDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.InactiveDays) {
		return nil, false
	}
	return o.InactiveDays, true
}

// HasInactiveDays returns a boolean if a field has been set.
func (o *AdmingroupInactivityLockoutSetting) HasInactiveDays() bool {
	if o != nil && !IsNil(o.InactiveDays) {
		return true
	}

	return false
}

// SetInactiveDays gets a reference to the given int64 and assigns it to the InactiveDays field.
func (o *AdmingroupInactivityLockoutSetting) SetInactiveDays(v int64) {
	o.InactiveDays = &v
}

// GetReminderDays returns the ReminderDays field value if set, zero value otherwise.
func (o *AdmingroupInactivityLockoutSetting) GetReminderDays() int64 {
	if o == nil || IsNil(o.ReminderDays) {
		var ret int64
		return ret
	}
	return *o.ReminderDays
}

// GetReminderDaysOk returns a tuple with the ReminderDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupInactivityLockoutSetting) GetReminderDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ReminderDays) {
		return nil, false
	}
	return o.ReminderDays, true
}

// HasReminderDays returns a boolean if a field has been set.
func (o *AdmingroupInactivityLockoutSetting) HasReminderDays() bool {
	if o != nil && !IsNil(o.ReminderDays) {
		return true
	}

	return false
}

// SetReminderDays gets a reference to the given int64 and assigns it to the ReminderDays field.
func (o *AdmingroupInactivityLockoutSetting) SetReminderDays(v int64) {
	o.ReminderDays = &v
}

// GetReactivateViaSerialConsoleEnable returns the ReactivateViaSerialConsoleEnable field value if set, zero value otherwise.
func (o *AdmingroupInactivityLockoutSetting) GetReactivateViaSerialConsoleEnable() bool {
	if o == nil || IsNil(o.ReactivateViaSerialConsoleEnable) {
		var ret bool
		return ret
	}
	return *o.ReactivateViaSerialConsoleEnable
}

// GetReactivateViaSerialConsoleEnableOk returns a tuple with the ReactivateViaSerialConsoleEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupInactivityLockoutSetting) GetReactivateViaSerialConsoleEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ReactivateViaSerialConsoleEnable) {
		return nil, false
	}
	return o.ReactivateViaSerialConsoleEnable, true
}

// HasReactivateViaSerialConsoleEnable returns a boolean if a field has been set.
func (o *AdmingroupInactivityLockoutSetting) HasReactivateViaSerialConsoleEnable() bool {
	if o != nil && !IsNil(o.ReactivateViaSerialConsoleEnable) {
		return true
	}

	return false
}

// SetReactivateViaSerialConsoleEnable gets a reference to the given bool and assigns it to the ReactivateViaSerialConsoleEnable field.
func (o *AdmingroupInactivityLockoutSetting) SetReactivateViaSerialConsoleEnable(v bool) {
	o.ReactivateViaSerialConsoleEnable = &v
}

// GetReactivateViaRemoteConsoleEnable returns the ReactivateViaRemoteConsoleEnable field value if set, zero value otherwise.
func (o *AdmingroupInactivityLockoutSetting) GetReactivateViaRemoteConsoleEnable() bool {
	if o == nil || IsNil(o.ReactivateViaRemoteConsoleEnable) {
		var ret bool
		return ret
	}
	return *o.ReactivateViaRemoteConsoleEnable
}

// GetReactivateViaRemoteConsoleEnableOk returns a tuple with the ReactivateViaRemoteConsoleEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupInactivityLockoutSetting) GetReactivateViaRemoteConsoleEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ReactivateViaRemoteConsoleEnable) {
		return nil, false
	}
	return o.ReactivateViaRemoteConsoleEnable, true
}

// HasReactivateViaRemoteConsoleEnable returns a boolean if a field has been set.
func (o *AdmingroupInactivityLockoutSetting) HasReactivateViaRemoteConsoleEnable() bool {
	if o != nil && !IsNil(o.ReactivateViaRemoteConsoleEnable) {
		return true
	}

	return false
}

// SetReactivateViaRemoteConsoleEnable gets a reference to the given bool and assigns it to the ReactivateViaRemoteConsoleEnable field.
func (o *AdmingroupInactivityLockoutSetting) SetReactivateViaRemoteConsoleEnable(v bool) {
	o.ReactivateViaRemoteConsoleEnable = &v
}

func (o AdmingroupInactivityLockoutSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupInactivityLockoutSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountInactivityLockoutEnable) {
		toSerialize["account_inactivity_lockout_enable"] = o.AccountInactivityLockoutEnable
	}
	if !IsNil(o.InactiveDays) {
		toSerialize["inactive_days"] = o.InactiveDays
	}
	if !IsNil(o.ReminderDays) {
		toSerialize["reminder_days"] = o.ReminderDays
	}
	if !IsNil(o.ReactivateViaSerialConsoleEnable) {
		toSerialize["reactivate_via_serial_console_enable"] = o.ReactivateViaSerialConsoleEnable
	}
	if !IsNil(o.ReactivateViaRemoteConsoleEnable) {
		toSerialize["reactivate_via_remote_console_enable"] = o.ReactivateViaRemoteConsoleEnable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupInactivityLockoutSetting) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupInactivityLockoutSetting := _AdmingroupInactivityLockoutSetting{}

	err = json.Unmarshal(data, &varAdmingroupInactivityLockoutSetting)

	if err != nil {
		return err
	}

	*o = AdmingroupInactivityLockoutSetting(varAdmingroupInactivityLockoutSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_inactivity_lockout_enable")
		delete(additionalProperties, "inactive_days")
		delete(additionalProperties, "reminder_days")
		delete(additionalProperties, "reactivate_via_serial_console_enable")
		delete(additionalProperties, "reactivate_via_remote_console_enable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupInactivityLockoutSetting struct {
	value *AdmingroupInactivityLockoutSetting
	isSet bool
}

func (v NullableAdmingroupInactivityLockoutSetting) Get() *AdmingroupInactivityLockoutSetting {
	return v.value
}

func (v *NullableAdmingroupInactivityLockoutSetting) Set(val *AdmingroupInactivityLockoutSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupInactivityLockoutSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupInactivityLockoutSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupInactivityLockoutSetting(val *AdmingroupInactivityLockoutSetting) *NullableAdmingroupInactivityLockoutSetting {
	return &NullableAdmingroupInactivityLockoutSetting{value: val, isSet: true}
}

func (v NullableAdmingroupInactivityLockoutSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupInactivityLockoutSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
