/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupLicensingSetCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupLicensingSetCommands{}

// AdmingroupLicensingSetCommands struct for AdmingroupLicensingSetCommands
type AdmingroupLicensingSetCommands struct {
	// If True then CLI user has permission to run the command
	SetLicense *bool `json:"set_license,omitempty"`
	// If True then CLI user has permission to run the command
	SetReportingResetLicense *bool `json:"set_reporting_reset_license,omitempty"`
	// If True then CLI user has permission to run the command
	SetTempLicense *bool `json:"set_temp_license,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupLicensingSetCommands AdmingroupLicensingSetCommands

// NewAdmingroupLicensingSetCommands instantiates a new AdmingroupLicensingSetCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupLicensingSetCommands() *AdmingroupLicensingSetCommands {
	this := AdmingroupLicensingSetCommands{}
	return &this
}

// NewAdmingroupLicensingSetCommandsWithDefaults instantiates a new AdmingroupLicensingSetCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupLicensingSetCommandsWithDefaults() *AdmingroupLicensingSetCommands {
	this := AdmingroupLicensingSetCommands{}
	return &this
}

// GetSetLicense returns the SetLicense field value if set, zero value otherwise.
func (o *AdmingroupLicensingSetCommands) GetSetLicense() bool {
	if o == nil || IsNil(o.SetLicense) {
		var ret bool
		return ret
	}
	return *o.SetLicense
}

// GetSetLicenseOk returns a tuple with the SetLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingSetCommands) GetSetLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.SetLicense) {
		return nil, false
	}
	return o.SetLicense, true
}

// HasSetLicense returns a boolean if a field has been set.
func (o *AdmingroupLicensingSetCommands) HasSetLicense() bool {
	if o != nil && !IsNil(o.SetLicense) {
		return true
	}

	return false
}

// SetSetLicense gets a reference to the given bool and assigns it to the SetLicense field.
func (o *AdmingroupLicensingSetCommands) SetSetLicense(v bool) {
	o.SetLicense = &v
}

// GetSetReportingResetLicense returns the SetReportingResetLicense field value if set, zero value otherwise.
func (o *AdmingroupLicensingSetCommands) GetSetReportingResetLicense() bool {
	if o == nil || IsNil(o.SetReportingResetLicense) {
		var ret bool
		return ret
	}
	return *o.SetReportingResetLicense
}

// GetSetReportingResetLicenseOk returns a tuple with the SetReportingResetLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingSetCommands) GetSetReportingResetLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.SetReportingResetLicense) {
		return nil, false
	}
	return o.SetReportingResetLicense, true
}

// HasSetReportingResetLicense returns a boolean if a field has been set.
func (o *AdmingroupLicensingSetCommands) HasSetReportingResetLicense() bool {
	if o != nil && !IsNil(o.SetReportingResetLicense) {
		return true
	}

	return false
}

// SetSetReportingResetLicense gets a reference to the given bool and assigns it to the SetReportingResetLicense field.
func (o *AdmingroupLicensingSetCommands) SetSetReportingResetLicense(v bool) {
	o.SetReportingResetLicense = &v
}

// GetSetTempLicense returns the SetTempLicense field value if set, zero value otherwise.
func (o *AdmingroupLicensingSetCommands) GetSetTempLicense() bool {
	if o == nil || IsNil(o.SetTempLicense) {
		var ret bool
		return ret
	}
	return *o.SetTempLicense
}

// GetSetTempLicenseOk returns a tuple with the SetTempLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingSetCommands) GetSetTempLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.SetTempLicense) {
		return nil, false
	}
	return o.SetTempLicense, true
}

// HasSetTempLicense returns a boolean if a field has been set.
func (o *AdmingroupLicensingSetCommands) HasSetTempLicense() bool {
	if o != nil && !IsNil(o.SetTempLicense) {
		return true
	}

	return false
}

// SetSetTempLicense gets a reference to the given bool and assigns it to the SetTempLicense field.
func (o *AdmingroupLicensingSetCommands) SetSetTempLicense(v bool) {
	o.SetTempLicense = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupLicensingSetCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingSetCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupLicensingSetCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupLicensingSetCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupLicensingSetCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingSetCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupLicensingSetCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupLicensingSetCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupLicensingSetCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupLicensingSetCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetLicense) {
		toSerialize["set_license"] = o.SetLicense
	}
	if !IsNil(o.SetReportingResetLicense) {
		toSerialize["set_reporting_reset_license"] = o.SetReportingResetLicense
	}
	if !IsNil(o.SetTempLicense) {
		toSerialize["set_temp_license"] = o.SetTempLicense
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupLicensingSetCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupLicensingSetCommands := _AdmingroupLicensingSetCommands{}

	err = json.Unmarshal(data, &varAdmingroupLicensingSetCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupLicensingSetCommands(varAdmingroupLicensingSetCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "set_license")
		delete(additionalProperties, "set_reporting_reset_license")
		delete(additionalProperties, "set_temp_license")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupLicensingSetCommands struct {
	value *AdmingroupLicensingSetCommands
	isSet bool
}

func (v NullableAdmingroupLicensingSetCommands) Get() *AdmingroupLicensingSetCommands {
	return v.value
}

func (v *NullableAdmingroupLicensingSetCommands) Set(val *AdmingroupLicensingSetCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupLicensingSetCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupLicensingSetCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupLicensingSetCommands(val *AdmingroupLicensingSetCommands) *NullableAdmingroupLicensingSetCommands {
	return &NullableAdmingroupLicensingSetCommands{value: val, isSet: true}
}

func (v NullableAdmingroupLicensingSetCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupLicensingSetCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
