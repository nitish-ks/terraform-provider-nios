/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupLicensingShowCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupLicensingShowCommands{}

// AdmingroupLicensingShowCommands struct for AdmingroupLicensingShowCommands
type AdmingroupLicensingShowCommands struct {
	// If True then CLI user has permission to run the command
	ShowLicense *bool `json:"show_license,omitempty"`
	// If True then CLI user has permission to run the command
	ShowLicensePoolContainer *bool `json:"show_license_pool_container,omitempty"`
	// If True then CLI user has permission to run the command
	ShowLicenseUid *bool `json:"show_license_uid,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupLicensingShowCommands AdmingroupLicensingShowCommands

// NewAdmingroupLicensingShowCommands instantiates a new AdmingroupLicensingShowCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupLicensingShowCommands() *AdmingroupLicensingShowCommands {
	this := AdmingroupLicensingShowCommands{}
	return &this
}

// NewAdmingroupLicensingShowCommandsWithDefaults instantiates a new AdmingroupLicensingShowCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupLicensingShowCommandsWithDefaults() *AdmingroupLicensingShowCommands {
	this := AdmingroupLicensingShowCommands{}
	return &this
}

// GetShowLicense returns the ShowLicense field value if set, zero value otherwise.
func (o *AdmingroupLicensingShowCommands) GetShowLicense() bool {
	if o == nil || IsNil(o.ShowLicense) {
		var ret bool
		return ret
	}
	return *o.ShowLicense
}

// GetShowLicenseOk returns a tuple with the ShowLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingShowCommands) GetShowLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLicense) {
		return nil, false
	}
	return o.ShowLicense, true
}

// HasShowLicense returns a boolean if a field has been set.
func (o *AdmingroupLicensingShowCommands) HasShowLicense() bool {
	if o != nil && !IsNil(o.ShowLicense) {
		return true
	}

	return false
}

// SetShowLicense gets a reference to the given bool and assigns it to the ShowLicense field.
func (o *AdmingroupLicensingShowCommands) SetShowLicense(v bool) {
	o.ShowLicense = &v
}

// GetShowLicensePoolContainer returns the ShowLicensePoolContainer field value if set, zero value otherwise.
func (o *AdmingroupLicensingShowCommands) GetShowLicensePoolContainer() bool {
	if o == nil || IsNil(o.ShowLicensePoolContainer) {
		var ret bool
		return ret
	}
	return *o.ShowLicensePoolContainer
}

// GetShowLicensePoolContainerOk returns a tuple with the ShowLicensePoolContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingShowCommands) GetShowLicensePoolContainerOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLicensePoolContainer) {
		return nil, false
	}
	return o.ShowLicensePoolContainer, true
}

// HasShowLicensePoolContainer returns a boolean if a field has been set.
func (o *AdmingroupLicensingShowCommands) HasShowLicensePoolContainer() bool {
	if o != nil && !IsNil(o.ShowLicensePoolContainer) {
		return true
	}

	return false
}

// SetShowLicensePoolContainer gets a reference to the given bool and assigns it to the ShowLicensePoolContainer field.
func (o *AdmingroupLicensingShowCommands) SetShowLicensePoolContainer(v bool) {
	o.ShowLicensePoolContainer = &v
}

// GetShowLicenseUid returns the ShowLicenseUid field value if set, zero value otherwise.
func (o *AdmingroupLicensingShowCommands) GetShowLicenseUid() bool {
	if o == nil || IsNil(o.ShowLicenseUid) {
		var ret bool
		return ret
	}
	return *o.ShowLicenseUid
}

// GetShowLicenseUidOk returns a tuple with the ShowLicenseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingShowCommands) GetShowLicenseUidOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLicenseUid) {
		return nil, false
	}
	return o.ShowLicenseUid, true
}

// HasShowLicenseUid returns a boolean if a field has been set.
func (o *AdmingroupLicensingShowCommands) HasShowLicenseUid() bool {
	if o != nil && !IsNil(o.ShowLicenseUid) {
		return true
	}

	return false
}

// SetShowLicenseUid gets a reference to the given bool and assigns it to the ShowLicenseUid field.
func (o *AdmingroupLicensingShowCommands) SetShowLicenseUid(v bool) {
	o.ShowLicenseUid = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupLicensingShowCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingShowCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupLicensingShowCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupLicensingShowCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupLicensingShowCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupLicensingShowCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupLicensingShowCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupLicensingShowCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupLicensingShowCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupLicensingShowCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowLicense) {
		toSerialize["show_license"] = o.ShowLicense
	}
	if !IsNil(o.ShowLicensePoolContainer) {
		toSerialize["show_license_pool_container"] = o.ShowLicensePoolContainer
	}
	if !IsNil(o.ShowLicenseUid) {
		toSerialize["show_license_uid"] = o.ShowLicenseUid
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupLicensingShowCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupLicensingShowCommands := _AdmingroupLicensingShowCommands{}

	err = json.Unmarshal(data, &varAdmingroupLicensingShowCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupLicensingShowCommands(varAdmingroupLicensingShowCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "show_license")
		delete(additionalProperties, "show_license_pool_container")
		delete(additionalProperties, "show_license_uid")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupLicensingShowCommands struct {
	value *AdmingroupLicensingShowCommands
	isSet bool
}

func (v NullableAdmingroupLicensingShowCommands) Get() *AdmingroupLicensingShowCommands {
	return v.value
}

func (v *NullableAdmingroupLicensingShowCommands) Set(val *AdmingroupLicensingShowCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupLicensingShowCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupLicensingShowCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupLicensingShowCommands(val *AdmingroupLicensingShowCommands) *NullableAdmingroupLicensingShowCommands {
	return &NullableAdmingroupLicensingShowCommands{value: val, isSet: true}
}

func (v NullableAdmingroupLicensingShowCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupLicensingShowCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
