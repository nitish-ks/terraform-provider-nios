/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupMachineControlToplevelCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupMachineControlToplevelCommands{}

// AdmingroupMachineControlToplevelCommands struct for AdmingroupMachineControlToplevelCommands
type AdmingroupMachineControlToplevelCommands struct {
	// If True then CLI user has permission to run the command
	Reboot *bool `json:"reboot,omitempty"`
	// If True then CLI user has permission to run the command
	Reset *bool `json:"reset,omitempty"`
	// If True then CLI user has permission to run the command
	Shutdown *bool `json:"shutdown,omitempty"`
	// If True then CLI user has permission to run the command
	Restart *bool `json:"restart,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupMachineControlToplevelCommands AdmingroupMachineControlToplevelCommands

// NewAdmingroupMachineControlToplevelCommands instantiates a new AdmingroupMachineControlToplevelCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupMachineControlToplevelCommands() *AdmingroupMachineControlToplevelCommands {
	this := AdmingroupMachineControlToplevelCommands{}
	return &this
}

// NewAdmingroupMachineControlToplevelCommandsWithDefaults instantiates a new AdmingroupMachineControlToplevelCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupMachineControlToplevelCommandsWithDefaults() *AdmingroupMachineControlToplevelCommands {
	this := AdmingroupMachineControlToplevelCommands{}
	return &this
}

// GetReboot returns the Reboot field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetReboot() bool {
	if o == nil || IsNil(o.Reboot) {
		var ret bool
		return ret
	}
	return *o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetRebootOk() (*bool, bool) {
	if o == nil || IsNil(o.Reboot) {
		return nil, false
	}
	return o.Reboot, true
}

// HasReboot returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasReboot() bool {
	if o != nil && !IsNil(o.Reboot) {
		return true
	}

	return false
}

// SetReboot gets a reference to the given bool and assigns it to the Reboot field.
func (o *AdmingroupMachineControlToplevelCommands) SetReboot(v bool) {
	o.Reboot = &v
}

// GetReset returns the Reset field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetReset() bool {
	if o == nil || IsNil(o.Reset) {
		var ret bool
		return ret
	}
	return *o.Reset
}

// GetResetOk returns a tuple with the Reset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetResetOk() (*bool, bool) {
	if o == nil || IsNil(o.Reset) {
		return nil, false
	}
	return o.Reset, true
}

// HasReset returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasReset() bool {
	if o != nil && !IsNil(o.Reset) {
		return true
	}

	return false
}

// SetReset gets a reference to the given bool and assigns it to the Reset field.
func (o *AdmingroupMachineControlToplevelCommands) SetReset(v bool) {
	o.Reset = &v
}

// GetShutdown returns the Shutdown field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetShutdown() bool {
	if o == nil || IsNil(o.Shutdown) {
		var ret bool
		return ret
	}
	return *o.Shutdown
}

// GetShutdownOk returns a tuple with the Shutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Shutdown) {
		return nil, false
	}
	return o.Shutdown, true
}

// HasShutdown returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasShutdown() bool {
	if o != nil && !IsNil(o.Shutdown) {
		return true
	}

	return false
}

// SetShutdown gets a reference to the given bool and assigns it to the Shutdown field.
func (o *AdmingroupMachineControlToplevelCommands) SetShutdown(v bool) {
	o.Shutdown = &v
}

// GetRestart returns the Restart field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetRestart() bool {
	if o == nil || IsNil(o.Restart) {
		var ret bool
		return ret
	}
	return *o.Restart
}

// GetRestartOk returns a tuple with the Restart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.Restart) {
		return nil, false
	}
	return o.Restart, true
}

// HasRestart returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasRestart() bool {
	if o != nil && !IsNil(o.Restart) {
		return true
	}

	return false
}

// SetRestart gets a reference to the given bool and assigns it to the Restart field.
func (o *AdmingroupMachineControlToplevelCommands) SetRestart(v bool) {
	o.Restart = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupMachineControlToplevelCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupMachineControlToplevelCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupMachineControlToplevelCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupMachineControlToplevelCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupMachineControlToplevelCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupMachineControlToplevelCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupMachineControlToplevelCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reboot) {
		toSerialize["reboot"] = o.Reboot
	}
	if !IsNil(o.Reset) {
		toSerialize["reset"] = o.Reset
	}
	if !IsNil(o.Shutdown) {
		toSerialize["shutdown"] = o.Shutdown
	}
	if !IsNil(o.Restart) {
		toSerialize["restart"] = o.Restart
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupMachineControlToplevelCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupMachineControlToplevelCommands := _AdmingroupMachineControlToplevelCommands{}

	err = json.Unmarshal(data, &varAdmingroupMachineControlToplevelCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupMachineControlToplevelCommands(varAdmingroupMachineControlToplevelCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reboot")
		delete(additionalProperties, "reset")
		delete(additionalProperties, "shutdown")
		delete(additionalProperties, "restart")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupMachineControlToplevelCommands struct {
	value *AdmingroupMachineControlToplevelCommands
	isSet bool
}

func (v NullableAdmingroupMachineControlToplevelCommands) Get() *AdmingroupMachineControlToplevelCommands {
	return v.value
}

func (v *NullableAdmingroupMachineControlToplevelCommands) Set(val *AdmingroupMachineControlToplevelCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupMachineControlToplevelCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupMachineControlToplevelCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupMachineControlToplevelCommands(val *AdmingroupMachineControlToplevelCommands) *NullableAdmingroupMachineControlToplevelCommands {
	return &NullableAdmingroupMachineControlToplevelCommands{value: val, isSet: true}
}

func (v NullableAdmingroupMachineControlToplevelCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupMachineControlToplevelCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
