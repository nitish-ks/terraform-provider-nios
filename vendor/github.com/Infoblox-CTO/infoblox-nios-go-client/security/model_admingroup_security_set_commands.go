/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupSecuritySetCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupSecuritySetCommands{}

// AdmingroupSecuritySetCommands struct for AdmingroupSecuritySetCommands
type AdmingroupSecuritySetCommands struct {
	// If True then CLI user has permission to run the command
	SetAdp *bool `json:"set_adp,omitempty"`
	// If True then CLI user has permission to run the command
	SetApacheHttpsCert *bool `json:"set_apache_https_cert,omitempty"`
	// If True then CLI user has permission to run the command
	SetCcMode *bool `json:"set_cc_mode,omitempty"`
	// If True then CLI user has permission to run the command
	SetCertificateAuthAdmins *bool `json:"set_certificate_auth_admins,omitempty"`
	// If True then CLI user has permission to run the command
	SetCertificateAuthServices *bool `json:"set_certificate_auth_services,omitempty"`
	// If True then CLI user has permission to run the command
	SetCheckAuthNs *bool `json:"set_check_auth_ns,omitempty"`
	// If True then CLI user has permission to run the command
	SetCheckSslCertificate *bool `json:"set_check_ssl_certificate,omitempty"`
	// If True then CLI user has permission to run the command
	SetDisableHttpsCertRegeneration *bool `json:"set_disable_https_cert_regeneration,omitempty"`
	// If True then CLI user has permission to run the command
	SetFipsMode *bool `json:"set_fips_mode,omitempty"`
	// If True then CLI user has permission to run the command
	SetReportingCert *bool `json:"set_reporting_cert,omitempty"`
	// If True then CLI user has permission to run the command
	SetSecurity *bool `json:"set_security,omitempty"`
	// If True then CLI user has permission to run the command
	SetSessionTimeout *bool `json:"set_session_timeout,omitempty"`
	// If True then CLI user has permission to run the command
	SetSubscriberSecureData *bool `json:"set_subscriber_secure_data,omitempty"`
	// If True then CLI user has permission to run the command
	SetSupportAccess *bool `json:"set_support_access,omitempty"`
	// If True then CLI user has permission to run the command
	SetSupportInstall *bool `json:"set_support_install,omitempty"`
	// If True then CLI user has permission to run the command
	SetAdpDebug *bool `json:"set_adp_debug,omitempty"`
	// If True then CLI user has permission to run the command
	SetSupportTimeout *bool `json:"set_support_timeout,omitempty"`
	// If True then CLI user has permission to run the command
	SetUpdateRabbitmqPassword *bool `json:"set_update_rabbitmq_password,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupSecuritySetCommands AdmingroupSecuritySetCommands

// NewAdmingroupSecuritySetCommands instantiates a new AdmingroupSecuritySetCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupSecuritySetCommands() *AdmingroupSecuritySetCommands {
	this := AdmingroupSecuritySetCommands{}
	return &this
}

// NewAdmingroupSecuritySetCommandsWithDefaults instantiates a new AdmingroupSecuritySetCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupSecuritySetCommandsWithDefaults() *AdmingroupSecuritySetCommands {
	this := AdmingroupSecuritySetCommands{}
	return &this
}

// GetSetAdp returns the SetAdp field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetAdp() bool {
	if o == nil || IsNil(o.SetAdp) {
		var ret bool
		return ret
	}
	return *o.SetAdp
}

// GetSetAdpOk returns a tuple with the SetAdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetAdpOk() (*bool, bool) {
	if o == nil || IsNil(o.SetAdp) {
		return nil, false
	}
	return o.SetAdp, true
}

// HasSetAdp returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetAdp() bool {
	if o != nil && !IsNil(o.SetAdp) {
		return true
	}

	return false
}

// SetSetAdp gets a reference to the given bool and assigns it to the SetAdp field.
func (o *AdmingroupSecuritySetCommands) SetSetAdp(v bool) {
	o.SetAdp = &v
}

// GetSetApacheHttpsCert returns the SetApacheHttpsCert field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetApacheHttpsCert() bool {
	if o == nil || IsNil(o.SetApacheHttpsCert) {
		var ret bool
		return ret
	}
	return *o.SetApacheHttpsCert
}

// GetSetApacheHttpsCertOk returns a tuple with the SetApacheHttpsCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetApacheHttpsCertOk() (*bool, bool) {
	if o == nil || IsNil(o.SetApacheHttpsCert) {
		return nil, false
	}
	return o.SetApacheHttpsCert, true
}

// HasSetApacheHttpsCert returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetApacheHttpsCert() bool {
	if o != nil && !IsNil(o.SetApacheHttpsCert) {
		return true
	}

	return false
}

// SetSetApacheHttpsCert gets a reference to the given bool and assigns it to the SetApacheHttpsCert field.
func (o *AdmingroupSecuritySetCommands) SetSetApacheHttpsCert(v bool) {
	o.SetApacheHttpsCert = &v
}

// GetSetCcMode returns the SetCcMode field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetCcMode() bool {
	if o == nil || IsNil(o.SetCcMode) {
		var ret bool
		return ret
	}
	return *o.SetCcMode
}

// GetSetCcModeOk returns a tuple with the SetCcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetCcModeOk() (*bool, bool) {
	if o == nil || IsNil(o.SetCcMode) {
		return nil, false
	}
	return o.SetCcMode, true
}

// HasSetCcMode returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetCcMode() bool {
	if o != nil && !IsNil(o.SetCcMode) {
		return true
	}

	return false
}

// SetSetCcMode gets a reference to the given bool and assigns it to the SetCcMode field.
func (o *AdmingroupSecuritySetCommands) SetSetCcMode(v bool) {
	o.SetCcMode = &v
}

// GetSetCertificateAuthAdmins returns the SetCertificateAuthAdmins field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetCertificateAuthAdmins() bool {
	if o == nil || IsNil(o.SetCertificateAuthAdmins) {
		var ret bool
		return ret
	}
	return *o.SetCertificateAuthAdmins
}

// GetSetCertificateAuthAdminsOk returns a tuple with the SetCertificateAuthAdmins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetCertificateAuthAdminsOk() (*bool, bool) {
	if o == nil || IsNil(o.SetCertificateAuthAdmins) {
		return nil, false
	}
	return o.SetCertificateAuthAdmins, true
}

// HasSetCertificateAuthAdmins returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetCertificateAuthAdmins() bool {
	if o != nil && !IsNil(o.SetCertificateAuthAdmins) {
		return true
	}

	return false
}

// SetSetCertificateAuthAdmins gets a reference to the given bool and assigns it to the SetCertificateAuthAdmins field.
func (o *AdmingroupSecuritySetCommands) SetSetCertificateAuthAdmins(v bool) {
	o.SetCertificateAuthAdmins = &v
}

// GetSetCertificateAuthServices returns the SetCertificateAuthServices field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetCertificateAuthServices() bool {
	if o == nil || IsNil(o.SetCertificateAuthServices) {
		var ret bool
		return ret
	}
	return *o.SetCertificateAuthServices
}

// GetSetCertificateAuthServicesOk returns a tuple with the SetCertificateAuthServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetCertificateAuthServicesOk() (*bool, bool) {
	if o == nil || IsNil(o.SetCertificateAuthServices) {
		return nil, false
	}
	return o.SetCertificateAuthServices, true
}

// HasSetCertificateAuthServices returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetCertificateAuthServices() bool {
	if o != nil && !IsNil(o.SetCertificateAuthServices) {
		return true
	}

	return false
}

// SetSetCertificateAuthServices gets a reference to the given bool and assigns it to the SetCertificateAuthServices field.
func (o *AdmingroupSecuritySetCommands) SetSetCertificateAuthServices(v bool) {
	o.SetCertificateAuthServices = &v
}

// GetSetCheckAuthNs returns the SetCheckAuthNs field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetCheckAuthNs() bool {
	if o == nil || IsNil(o.SetCheckAuthNs) {
		var ret bool
		return ret
	}
	return *o.SetCheckAuthNs
}

// GetSetCheckAuthNsOk returns a tuple with the SetCheckAuthNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetCheckAuthNsOk() (*bool, bool) {
	if o == nil || IsNil(o.SetCheckAuthNs) {
		return nil, false
	}
	return o.SetCheckAuthNs, true
}

// HasSetCheckAuthNs returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetCheckAuthNs() bool {
	if o != nil && !IsNil(o.SetCheckAuthNs) {
		return true
	}

	return false
}

// SetSetCheckAuthNs gets a reference to the given bool and assigns it to the SetCheckAuthNs field.
func (o *AdmingroupSecuritySetCommands) SetSetCheckAuthNs(v bool) {
	o.SetCheckAuthNs = &v
}

// GetSetCheckSslCertificate returns the SetCheckSslCertificate field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetCheckSslCertificate() bool {
	if o == nil || IsNil(o.SetCheckSslCertificate) {
		var ret bool
		return ret
	}
	return *o.SetCheckSslCertificate
}

// GetSetCheckSslCertificateOk returns a tuple with the SetCheckSslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetCheckSslCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.SetCheckSslCertificate) {
		return nil, false
	}
	return o.SetCheckSslCertificate, true
}

// HasSetCheckSslCertificate returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetCheckSslCertificate() bool {
	if o != nil && !IsNil(o.SetCheckSslCertificate) {
		return true
	}

	return false
}

// SetSetCheckSslCertificate gets a reference to the given bool and assigns it to the SetCheckSslCertificate field.
func (o *AdmingroupSecuritySetCommands) SetSetCheckSslCertificate(v bool) {
	o.SetCheckSslCertificate = &v
}

// GetSetDisableHttpsCertRegeneration returns the SetDisableHttpsCertRegeneration field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetDisableHttpsCertRegeneration() bool {
	if o == nil || IsNil(o.SetDisableHttpsCertRegeneration) {
		var ret bool
		return ret
	}
	return *o.SetDisableHttpsCertRegeneration
}

// GetSetDisableHttpsCertRegenerationOk returns a tuple with the SetDisableHttpsCertRegeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetDisableHttpsCertRegenerationOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDisableHttpsCertRegeneration) {
		return nil, false
	}
	return o.SetDisableHttpsCertRegeneration, true
}

// HasSetDisableHttpsCertRegeneration returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetDisableHttpsCertRegeneration() bool {
	if o != nil && !IsNil(o.SetDisableHttpsCertRegeneration) {
		return true
	}

	return false
}

// SetSetDisableHttpsCertRegeneration gets a reference to the given bool and assigns it to the SetDisableHttpsCertRegeneration field.
func (o *AdmingroupSecuritySetCommands) SetSetDisableHttpsCertRegeneration(v bool) {
	o.SetDisableHttpsCertRegeneration = &v
}

// GetSetFipsMode returns the SetFipsMode field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetFipsMode() bool {
	if o == nil || IsNil(o.SetFipsMode) {
		var ret bool
		return ret
	}
	return *o.SetFipsMode
}

// GetSetFipsModeOk returns a tuple with the SetFipsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetFipsModeOk() (*bool, bool) {
	if o == nil || IsNil(o.SetFipsMode) {
		return nil, false
	}
	return o.SetFipsMode, true
}

// HasSetFipsMode returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetFipsMode() bool {
	if o != nil && !IsNil(o.SetFipsMode) {
		return true
	}

	return false
}

// SetSetFipsMode gets a reference to the given bool and assigns it to the SetFipsMode field.
func (o *AdmingroupSecuritySetCommands) SetSetFipsMode(v bool) {
	o.SetFipsMode = &v
}

// GetSetReportingCert returns the SetReportingCert field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetReportingCert() bool {
	if o == nil || IsNil(o.SetReportingCert) {
		var ret bool
		return ret
	}
	return *o.SetReportingCert
}

// GetSetReportingCertOk returns a tuple with the SetReportingCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetReportingCertOk() (*bool, bool) {
	if o == nil || IsNil(o.SetReportingCert) {
		return nil, false
	}
	return o.SetReportingCert, true
}

// HasSetReportingCert returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetReportingCert() bool {
	if o != nil && !IsNil(o.SetReportingCert) {
		return true
	}

	return false
}

// SetSetReportingCert gets a reference to the given bool and assigns it to the SetReportingCert field.
func (o *AdmingroupSecuritySetCommands) SetSetReportingCert(v bool) {
	o.SetReportingCert = &v
}

// GetSetSecurity returns the SetSecurity field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSecurity() bool {
	if o == nil || IsNil(o.SetSecurity) {
		var ret bool
		return ret
	}
	return *o.SetSecurity
}

// GetSetSecurityOk returns a tuple with the SetSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSecurityOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSecurity) {
		return nil, false
	}
	return o.SetSecurity, true
}

// HasSetSecurity returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSecurity() bool {
	if o != nil && !IsNil(o.SetSecurity) {
		return true
	}

	return false
}

// SetSetSecurity gets a reference to the given bool and assigns it to the SetSecurity field.
func (o *AdmingroupSecuritySetCommands) SetSetSecurity(v bool) {
	o.SetSecurity = &v
}

// GetSetSessionTimeout returns the SetSessionTimeout field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSessionTimeout() bool {
	if o == nil || IsNil(o.SetSessionTimeout) {
		var ret bool
		return ret
	}
	return *o.SetSessionTimeout
}

// GetSetSessionTimeoutOk returns a tuple with the SetSessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSessionTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSessionTimeout) {
		return nil, false
	}
	return o.SetSessionTimeout, true
}

// HasSetSessionTimeout returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSessionTimeout() bool {
	if o != nil && !IsNil(o.SetSessionTimeout) {
		return true
	}

	return false
}

// SetSetSessionTimeout gets a reference to the given bool and assigns it to the SetSessionTimeout field.
func (o *AdmingroupSecuritySetCommands) SetSetSessionTimeout(v bool) {
	o.SetSessionTimeout = &v
}

// GetSetSubscriberSecureData returns the SetSubscriberSecureData field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSubscriberSecureData() bool {
	if o == nil || IsNil(o.SetSubscriberSecureData) {
		var ret bool
		return ret
	}
	return *o.SetSubscriberSecureData
}

// GetSetSubscriberSecureDataOk returns a tuple with the SetSubscriberSecureData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSubscriberSecureDataOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSubscriberSecureData) {
		return nil, false
	}
	return o.SetSubscriberSecureData, true
}

// HasSetSubscriberSecureData returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSubscriberSecureData() bool {
	if o != nil && !IsNil(o.SetSubscriberSecureData) {
		return true
	}

	return false
}

// SetSetSubscriberSecureData gets a reference to the given bool and assigns it to the SetSubscriberSecureData field.
func (o *AdmingroupSecuritySetCommands) SetSetSubscriberSecureData(v bool) {
	o.SetSubscriberSecureData = &v
}

// GetSetSupportAccess returns the SetSupportAccess field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSupportAccess() bool {
	if o == nil || IsNil(o.SetSupportAccess) {
		var ret bool
		return ret
	}
	return *o.SetSupportAccess
}

// GetSetSupportAccessOk returns a tuple with the SetSupportAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSupportAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSupportAccess) {
		return nil, false
	}
	return o.SetSupportAccess, true
}

// HasSetSupportAccess returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSupportAccess() bool {
	if o != nil && !IsNil(o.SetSupportAccess) {
		return true
	}

	return false
}

// SetSetSupportAccess gets a reference to the given bool and assigns it to the SetSupportAccess field.
func (o *AdmingroupSecuritySetCommands) SetSetSupportAccess(v bool) {
	o.SetSupportAccess = &v
}

// GetSetSupportInstall returns the SetSupportInstall field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSupportInstall() bool {
	if o == nil || IsNil(o.SetSupportInstall) {
		var ret bool
		return ret
	}
	return *o.SetSupportInstall
}

// GetSetSupportInstallOk returns a tuple with the SetSupportInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSupportInstallOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSupportInstall) {
		return nil, false
	}
	return o.SetSupportInstall, true
}

// HasSetSupportInstall returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSupportInstall() bool {
	if o != nil && !IsNil(o.SetSupportInstall) {
		return true
	}

	return false
}

// SetSetSupportInstall gets a reference to the given bool and assigns it to the SetSupportInstall field.
func (o *AdmingroupSecuritySetCommands) SetSetSupportInstall(v bool) {
	o.SetSupportInstall = &v
}

// GetSetAdpDebug returns the SetAdpDebug field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetAdpDebug() bool {
	if o == nil || IsNil(o.SetAdpDebug) {
		var ret bool
		return ret
	}
	return *o.SetAdpDebug
}

// GetSetAdpDebugOk returns a tuple with the SetAdpDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetAdpDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.SetAdpDebug) {
		return nil, false
	}
	return o.SetAdpDebug, true
}

// HasSetAdpDebug returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetAdpDebug() bool {
	if o != nil && !IsNil(o.SetAdpDebug) {
		return true
	}

	return false
}

// SetSetAdpDebug gets a reference to the given bool and assigns it to the SetAdpDebug field.
func (o *AdmingroupSecuritySetCommands) SetSetAdpDebug(v bool) {
	o.SetAdpDebug = &v
}

// GetSetSupportTimeout returns the SetSupportTimeout field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetSupportTimeout() bool {
	if o == nil || IsNil(o.SetSupportTimeout) {
		var ret bool
		return ret
	}
	return *o.SetSupportTimeout
}

// GetSetSupportTimeoutOk returns a tuple with the SetSupportTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetSupportTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSupportTimeout) {
		return nil, false
	}
	return o.SetSupportTimeout, true
}

// HasSetSupportTimeout returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetSupportTimeout() bool {
	if o != nil && !IsNil(o.SetSupportTimeout) {
		return true
	}

	return false
}

// SetSetSupportTimeout gets a reference to the given bool and assigns it to the SetSupportTimeout field.
func (o *AdmingroupSecuritySetCommands) SetSetSupportTimeout(v bool) {
	o.SetSupportTimeout = &v
}

// GetSetUpdateRabbitmqPassword returns the SetUpdateRabbitmqPassword field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetSetUpdateRabbitmqPassword() bool {
	if o == nil || IsNil(o.SetUpdateRabbitmqPassword) {
		var ret bool
		return ret
	}
	return *o.SetUpdateRabbitmqPassword
}

// GetSetUpdateRabbitmqPasswordOk returns a tuple with the SetUpdateRabbitmqPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetSetUpdateRabbitmqPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.SetUpdateRabbitmqPassword) {
		return nil, false
	}
	return o.SetUpdateRabbitmqPassword, true
}

// HasSetUpdateRabbitmqPassword returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasSetUpdateRabbitmqPassword() bool {
	if o != nil && !IsNil(o.SetUpdateRabbitmqPassword) {
		return true
	}

	return false
}

// SetSetUpdateRabbitmqPassword gets a reference to the given bool and assigns it to the SetUpdateRabbitmqPassword field.
func (o *AdmingroupSecuritySetCommands) SetSetUpdateRabbitmqPassword(v bool) {
	o.SetUpdateRabbitmqPassword = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupSecuritySetCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupSecuritySetCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupSecuritySetCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupSecuritySetCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupSecuritySetCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupSecuritySetCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupSecuritySetCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetAdp) {
		toSerialize["set_adp"] = o.SetAdp
	}
	if !IsNil(o.SetApacheHttpsCert) {
		toSerialize["set_apache_https_cert"] = o.SetApacheHttpsCert
	}
	if !IsNil(o.SetCcMode) {
		toSerialize["set_cc_mode"] = o.SetCcMode
	}
	if !IsNil(o.SetCertificateAuthAdmins) {
		toSerialize["set_certificate_auth_admins"] = o.SetCertificateAuthAdmins
	}
	if !IsNil(o.SetCertificateAuthServices) {
		toSerialize["set_certificate_auth_services"] = o.SetCertificateAuthServices
	}
	if !IsNil(o.SetCheckAuthNs) {
		toSerialize["set_check_auth_ns"] = o.SetCheckAuthNs
	}
	if !IsNil(o.SetCheckSslCertificate) {
		toSerialize["set_check_ssl_certificate"] = o.SetCheckSslCertificate
	}
	if !IsNil(o.SetDisableHttpsCertRegeneration) {
		toSerialize["set_disable_https_cert_regeneration"] = o.SetDisableHttpsCertRegeneration
	}
	if !IsNil(o.SetFipsMode) {
		toSerialize["set_fips_mode"] = o.SetFipsMode
	}
	if !IsNil(o.SetReportingCert) {
		toSerialize["set_reporting_cert"] = o.SetReportingCert
	}
	if !IsNil(o.SetSecurity) {
		toSerialize["set_security"] = o.SetSecurity
	}
	if !IsNil(o.SetSessionTimeout) {
		toSerialize["set_session_timeout"] = o.SetSessionTimeout
	}
	if !IsNil(o.SetSubscriberSecureData) {
		toSerialize["set_subscriber_secure_data"] = o.SetSubscriberSecureData
	}
	if !IsNil(o.SetSupportAccess) {
		toSerialize["set_support_access"] = o.SetSupportAccess
	}
	if !IsNil(o.SetSupportInstall) {
		toSerialize["set_support_install"] = o.SetSupportInstall
	}
	if !IsNil(o.SetAdpDebug) {
		toSerialize["set_adp_debug"] = o.SetAdpDebug
	}
	if !IsNil(o.SetSupportTimeout) {
		toSerialize["set_support_timeout"] = o.SetSupportTimeout
	}
	if !IsNil(o.SetUpdateRabbitmqPassword) {
		toSerialize["set_update_rabbitmq_password"] = o.SetUpdateRabbitmqPassword
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupSecuritySetCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupSecuritySetCommands := _AdmingroupSecuritySetCommands{}

	err = json.Unmarshal(data, &varAdmingroupSecuritySetCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupSecuritySetCommands(varAdmingroupSecuritySetCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "set_adp")
		delete(additionalProperties, "set_apache_https_cert")
		delete(additionalProperties, "set_cc_mode")
		delete(additionalProperties, "set_certificate_auth_admins")
		delete(additionalProperties, "set_certificate_auth_services")
		delete(additionalProperties, "set_check_auth_ns")
		delete(additionalProperties, "set_check_ssl_certificate")
		delete(additionalProperties, "set_disable_https_cert_regeneration")
		delete(additionalProperties, "set_fips_mode")
		delete(additionalProperties, "set_reporting_cert")
		delete(additionalProperties, "set_security")
		delete(additionalProperties, "set_session_timeout")
		delete(additionalProperties, "set_subscriber_secure_data")
		delete(additionalProperties, "set_support_access")
		delete(additionalProperties, "set_support_install")
		delete(additionalProperties, "set_adp_debug")
		delete(additionalProperties, "set_support_timeout")
		delete(additionalProperties, "set_update_rabbitmq_password")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupSecuritySetCommands struct {
	value *AdmingroupSecuritySetCommands
	isSet bool
}

func (v NullableAdmingroupSecuritySetCommands) Get() *AdmingroupSecuritySetCommands {
	return v.value
}

func (v *NullableAdmingroupSecuritySetCommands) Set(val *AdmingroupSecuritySetCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupSecuritySetCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupSecuritySetCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupSecuritySetCommands(val *AdmingroupSecuritySetCommands) *NullableAdmingroupSecuritySetCommands {
	return &NullableAdmingroupSecuritySetCommands{value: val, isSet: true}
}

func (v NullableAdmingroupSecuritySetCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupSecuritySetCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
