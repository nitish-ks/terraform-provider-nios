/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupTroubleShootingToplevelCommands type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupTroubleShootingToplevelCommands{}

// AdmingroupTroubleShootingToplevelCommands struct for AdmingroupTroubleShootingToplevelCommands
type AdmingroupTroubleShootingToplevelCommands struct {
	// If True then CLI user has permission to run the command
	Ping *bool `json:"ping,omitempty"`
	// If True then CLI user has permission to run the command
	Ping6 *bool `json:"ping6,omitempty"`
	// If True then CLI user has permission to run the command
	Strace *bool `json:"strace,omitempty"`
	// If True then CLI user has permission to run the command
	Traceroute *bool `json:"traceroute,omitempty"`
	// If True then CLI user has permission to run the command
	TrafficCapture *bool `json:"traffic_capture,omitempty"`
	// If True then CLI user has permission to run the command
	Dig *bool `json:"dig,omitempty"`
	// If True then CLI user has permission to run the command
	Rotate *bool `json:"rotate,omitempty"`
	// If True then CLI user has permission to run the command
	Snmpwalk *bool `json:"snmpwalk,omitempty"`
	// If True then CLI user has permission to run the command
	Snmpget *bool `json:"snmpget,omitempty"`
	// If True then CLI user has permission to run the command
	Console *bool `json:"console,omitempty"`
	// If True then CLI user has permission to run the command
	Tracepath *bool `json:"tracepath,omitempty"`
	// If True then enable all fields
	EnableAll *bool `json:"enable_all,omitempty"`
	// If True then disable all fields
	DisableAll           *bool `json:"disable_all,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupTroubleShootingToplevelCommands AdmingroupTroubleShootingToplevelCommands

// NewAdmingroupTroubleShootingToplevelCommands instantiates a new AdmingroupTroubleShootingToplevelCommands object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupTroubleShootingToplevelCommands() *AdmingroupTroubleShootingToplevelCommands {
	this := AdmingroupTroubleShootingToplevelCommands{}
	return &this
}

// NewAdmingroupTroubleShootingToplevelCommandsWithDefaults instantiates a new AdmingroupTroubleShootingToplevelCommands object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupTroubleShootingToplevelCommandsWithDefaults() *AdmingroupTroubleShootingToplevelCommands {
	this := AdmingroupTroubleShootingToplevelCommands{}
	return &this
}

// GetPing returns the Ping field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetPing() bool {
	if o == nil || IsNil(o.Ping) {
		var ret bool
		return ret
	}
	return *o.Ping
}

// GetPingOk returns a tuple with the Ping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetPingOk() (*bool, bool) {
	if o == nil || IsNil(o.Ping) {
		return nil, false
	}
	return o.Ping, true
}

// HasPing returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasPing() bool {
	if o != nil && !IsNil(o.Ping) {
		return true
	}

	return false
}

// SetPing gets a reference to the given bool and assigns it to the Ping field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetPing(v bool) {
	o.Ping = &v
}

// GetPing6 returns the Ping6 field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetPing6() bool {
	if o == nil || IsNil(o.Ping6) {
		var ret bool
		return ret
	}
	return *o.Ping6
}

// GetPing6Ok returns a tuple with the Ping6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetPing6Ok() (*bool, bool) {
	if o == nil || IsNil(o.Ping6) {
		return nil, false
	}
	return o.Ping6, true
}

// HasPing6 returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasPing6() bool {
	if o != nil && !IsNil(o.Ping6) {
		return true
	}

	return false
}

// SetPing6 gets a reference to the given bool and assigns it to the Ping6 field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetPing6(v bool) {
	o.Ping6 = &v
}

// GetStrace returns the Strace field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetStrace() bool {
	if o == nil || IsNil(o.Strace) {
		var ret bool
		return ret
	}
	return *o.Strace
}

// GetStraceOk returns a tuple with the Strace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetStraceOk() (*bool, bool) {
	if o == nil || IsNil(o.Strace) {
		return nil, false
	}
	return o.Strace, true
}

// HasStrace returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasStrace() bool {
	if o != nil && !IsNil(o.Strace) {
		return true
	}

	return false
}

// SetStrace gets a reference to the given bool and assigns it to the Strace field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetStrace(v bool) {
	o.Strace = &v
}

// GetTraceroute returns the Traceroute field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTraceroute() bool {
	if o == nil || IsNil(o.Traceroute) {
		var ret bool
		return ret
	}
	return *o.Traceroute
}

// GetTracerouteOk returns a tuple with the Traceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTracerouteOk() (*bool, bool) {
	if o == nil || IsNil(o.Traceroute) {
		return nil, false
	}
	return o.Traceroute, true
}

// HasTraceroute returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasTraceroute() bool {
	if o != nil && !IsNil(o.Traceroute) {
		return true
	}

	return false
}

// SetTraceroute gets a reference to the given bool and assigns it to the Traceroute field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetTraceroute(v bool) {
	o.Traceroute = &v
}

// GetTrafficCapture returns the TrafficCapture field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTrafficCapture() bool {
	if o == nil || IsNil(o.TrafficCapture) {
		var ret bool
		return ret
	}
	return *o.TrafficCapture
}

// GetTrafficCaptureOk returns a tuple with the TrafficCapture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTrafficCaptureOk() (*bool, bool) {
	if o == nil || IsNil(o.TrafficCapture) {
		return nil, false
	}
	return o.TrafficCapture, true
}

// HasTrafficCapture returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasTrafficCapture() bool {
	if o != nil && !IsNil(o.TrafficCapture) {
		return true
	}

	return false
}

// SetTrafficCapture gets a reference to the given bool and assigns it to the TrafficCapture field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetTrafficCapture(v bool) {
	o.TrafficCapture = &v
}

// GetDig returns the Dig field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetDig() bool {
	if o == nil || IsNil(o.Dig) {
		var ret bool
		return ret
	}
	return *o.Dig
}

// GetDigOk returns a tuple with the Dig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetDigOk() (*bool, bool) {
	if o == nil || IsNil(o.Dig) {
		return nil, false
	}
	return o.Dig, true
}

// HasDig returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasDig() bool {
	if o != nil && !IsNil(o.Dig) {
		return true
	}

	return false
}

// SetDig gets a reference to the given bool and assigns it to the Dig field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetDig(v bool) {
	o.Dig = &v
}

// GetRotate returns the Rotate field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetRotate() bool {
	if o == nil || IsNil(o.Rotate) {
		var ret bool
		return ret
	}
	return *o.Rotate
}

// GetRotateOk returns a tuple with the Rotate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetRotateOk() (*bool, bool) {
	if o == nil || IsNil(o.Rotate) {
		return nil, false
	}
	return o.Rotate, true
}

// HasRotate returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasRotate() bool {
	if o != nil && !IsNil(o.Rotate) {
		return true
	}

	return false
}

// SetRotate gets a reference to the given bool and assigns it to the Rotate field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetRotate(v bool) {
	o.Rotate = &v
}

// GetSnmpwalk returns the Snmpwalk field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetSnmpwalk() bool {
	if o == nil || IsNil(o.Snmpwalk) {
		var ret bool
		return ret
	}
	return *o.Snmpwalk
}

// GetSnmpwalkOk returns a tuple with the Snmpwalk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetSnmpwalkOk() (*bool, bool) {
	if o == nil || IsNil(o.Snmpwalk) {
		return nil, false
	}
	return o.Snmpwalk, true
}

// HasSnmpwalk returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasSnmpwalk() bool {
	if o != nil && !IsNil(o.Snmpwalk) {
		return true
	}

	return false
}

// SetSnmpwalk gets a reference to the given bool and assigns it to the Snmpwalk field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetSnmpwalk(v bool) {
	o.Snmpwalk = &v
}

// GetSnmpget returns the Snmpget field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetSnmpget() bool {
	if o == nil || IsNil(o.Snmpget) {
		var ret bool
		return ret
	}
	return *o.Snmpget
}

// GetSnmpgetOk returns a tuple with the Snmpget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetSnmpgetOk() (*bool, bool) {
	if o == nil || IsNil(o.Snmpget) {
		return nil, false
	}
	return o.Snmpget, true
}

// HasSnmpget returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasSnmpget() bool {
	if o != nil && !IsNil(o.Snmpget) {
		return true
	}

	return false
}

// SetSnmpget gets a reference to the given bool and assigns it to the Snmpget field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetSnmpget(v bool) {
	o.Snmpget = &v
}

// GetConsole returns the Console field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetConsole() bool {
	if o == nil || IsNil(o.Console) {
		var ret bool
		return ret
	}
	return *o.Console
}

// GetConsoleOk returns a tuple with the Console field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetConsoleOk() (*bool, bool) {
	if o == nil || IsNil(o.Console) {
		return nil, false
	}
	return o.Console, true
}

// HasConsole returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasConsole() bool {
	if o != nil && !IsNil(o.Console) {
		return true
	}

	return false
}

// SetConsole gets a reference to the given bool and assigns it to the Console field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetConsole(v bool) {
	o.Console = &v
}

// GetTracepath returns the Tracepath field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTracepath() bool {
	if o == nil || IsNil(o.Tracepath) {
		var ret bool
		return ret
	}
	return *o.Tracepath
}

// GetTracepathOk returns a tuple with the Tracepath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetTracepathOk() (*bool, bool) {
	if o == nil || IsNil(o.Tracepath) {
		return nil, false
	}
	return o.Tracepath, true
}

// HasTracepath returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasTracepath() bool {
	if o != nil && !IsNil(o.Tracepath) {
		return true
	}

	return false
}

// SetTracepath gets a reference to the given bool and assigns it to the Tracepath field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetTracepath(v bool) {
	o.Tracepath = &v
}

// GetEnableAll returns the EnableAll field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetEnableAll() bool {
	if o == nil || IsNil(o.EnableAll) {
		var ret bool
		return ret
	}
	return *o.EnableAll
}

// GetEnableAllOk returns a tuple with the EnableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetEnableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAll) {
		return nil, false
	}
	return o.EnableAll, true
}

// HasEnableAll returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasEnableAll() bool {
	if o != nil && !IsNil(o.EnableAll) {
		return true
	}

	return false
}

// SetEnableAll gets a reference to the given bool and assigns it to the EnableAll field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetEnableAll(v bool) {
	o.EnableAll = &v
}

// GetDisableAll returns the DisableAll field value if set, zero value otherwise.
func (o *AdmingroupTroubleShootingToplevelCommands) GetDisableAll() bool {
	if o == nil || IsNil(o.DisableAll) {
		var ret bool
		return ret
	}
	return *o.DisableAll
}

// GetDisableAllOk returns a tuple with the DisableAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) GetDisableAllOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAll) {
		return nil, false
	}
	return o.DisableAll, true
}

// HasDisableAll returns a boolean if a field has been set.
func (o *AdmingroupTroubleShootingToplevelCommands) HasDisableAll() bool {
	if o != nil && !IsNil(o.DisableAll) {
		return true
	}

	return false
}

// SetDisableAll gets a reference to the given bool and assigns it to the DisableAll field.
func (o *AdmingroupTroubleShootingToplevelCommands) SetDisableAll(v bool) {
	o.DisableAll = &v
}

func (o AdmingroupTroubleShootingToplevelCommands) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupTroubleShootingToplevelCommands) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ping) {
		toSerialize["ping"] = o.Ping
	}
	if !IsNil(o.Ping6) {
		toSerialize["ping6"] = o.Ping6
	}
	if !IsNil(o.Strace) {
		toSerialize["strace"] = o.Strace
	}
	if !IsNil(o.Traceroute) {
		toSerialize["traceroute"] = o.Traceroute
	}
	if !IsNil(o.TrafficCapture) {
		toSerialize["traffic_capture"] = o.TrafficCapture
	}
	if !IsNil(o.Dig) {
		toSerialize["dig"] = o.Dig
	}
	if !IsNil(o.Rotate) {
		toSerialize["rotate"] = o.Rotate
	}
	if !IsNil(o.Snmpwalk) {
		toSerialize["snmpwalk"] = o.Snmpwalk
	}
	if !IsNil(o.Snmpget) {
		toSerialize["snmpget"] = o.Snmpget
	}
	if !IsNil(o.Console) {
		toSerialize["console"] = o.Console
	}
	if !IsNil(o.Tracepath) {
		toSerialize["tracepath"] = o.Tracepath
	}
	if !IsNil(o.EnableAll) {
		toSerialize["enable_all"] = o.EnableAll
	}
	if !IsNil(o.DisableAll) {
		toSerialize["disable_all"] = o.DisableAll
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupTroubleShootingToplevelCommands) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupTroubleShootingToplevelCommands := _AdmingroupTroubleShootingToplevelCommands{}

	err = json.Unmarshal(data, &varAdmingroupTroubleShootingToplevelCommands)

	if err != nil {
		return err
	}

	*o = AdmingroupTroubleShootingToplevelCommands(varAdmingroupTroubleShootingToplevelCommands)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ping")
		delete(additionalProperties, "ping6")
		delete(additionalProperties, "strace")
		delete(additionalProperties, "traceroute")
		delete(additionalProperties, "traffic_capture")
		delete(additionalProperties, "dig")
		delete(additionalProperties, "rotate")
		delete(additionalProperties, "snmpwalk")
		delete(additionalProperties, "snmpget")
		delete(additionalProperties, "console")
		delete(additionalProperties, "tracepath")
		delete(additionalProperties, "enable_all")
		delete(additionalProperties, "disable_all")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupTroubleShootingToplevelCommands struct {
	value *AdmingroupTroubleShootingToplevelCommands
	isSet bool
}

func (v NullableAdmingroupTroubleShootingToplevelCommands) Get() *AdmingroupTroubleShootingToplevelCommands {
	return v.value
}

func (v *NullableAdmingroupTroubleShootingToplevelCommands) Set(val *AdmingroupTroubleShootingToplevelCommands) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupTroubleShootingToplevelCommands) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupTroubleShootingToplevelCommands) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupTroubleShootingToplevelCommands(val *AdmingroupTroubleShootingToplevelCommands) *NullableAdmingroupTroubleShootingToplevelCommands {
	return &NullableAdmingroupTroubleShootingToplevelCommands{value: val, isSet: true}
}

func (v NullableAdmingroupTroubleShootingToplevelCommands) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupTroubleShootingToplevelCommands) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
