/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Adminuser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Adminuser{}

// Adminuser struct for Adminuser
type Adminuser struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The names of the Admin Groups to which this Admin User belongs. Currently, this is limited to only one Admin Group.
	AdminGroups []string `json:"admin_groups,omitempty"`
	// Determines the way of authentication
	AuthMethod *string `json:"auth_method,omitempty"`
	// The authentication type for the admin user.
	AuthType *string `json:"auth_type,omitempty"`
	// The CA certificate that is used for user lookup during authentication.
	CaCertificateIssuer *string `json:"ca_certificate_issuer,omitempty"`
	// The serial number of the client certificate.
	ClientCertificateSerialNumber *string `json:"client_certificate_serial_number,omitempty"`
	// Comment for the admin user; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether the admin user is disabled or not. When this is set to False, the admin user is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The e-mail address for the admin user.
	Email *string `json:"email,omitempty"`
	// Determines whether the user is allowed to log in only with the certificate. Regular username/password authentication will be disabled for this user.
	EnableCertificateAuthentication *bool `json:"enable_certificate_authentication,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of the admin user.
	Name *string `json:"name,omitempty"`
	// The password for the administrator to use when logging in.
	Password *string `json:"password,omitempty"`
	// List of ssh keys for a particular user.
	SshKeys []AdminuserSshKeys `json:"ssh_keys,omitempty"`
	// Status of the user account.
	Status *string `json:"status,omitempty"`
	// The time zone for this admin user.
	TimeZone *string `json:"time_zone,omitempty"`
	// \\, Enable/disable the ssh keypair authentication.
	UseSshKeys *bool `json:"use_ssh_keys,omitempty"`
	// Use flag for: time_zone
	UseTimeZone *bool `json:"use_time_zone,omitempty"`
}

// NewAdminuser instantiates a new Adminuser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminuser() *Adminuser {
	this := Adminuser{}
	return &this
}

// NewAdminuserWithDefaults instantiates a new Adminuser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminuserWithDefaults() *Adminuser {
	this := Adminuser{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Adminuser) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Adminuser) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Adminuser) SetRef(v string) {
	o.Ref = &v
}

// GetAdminGroups returns the AdminGroups field value if set, zero value otherwise.
func (o *Adminuser) GetAdminGroups() []string {
	if o == nil || IsNil(o.AdminGroups) {
		var ret []string
		return ret
	}
	return o.AdminGroups
}

// GetAdminGroupsOk returns a tuple with the AdminGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetAdminGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdminGroups) {
		return nil, false
	}
	return o.AdminGroups, true
}

// HasAdminGroups returns a boolean if a field has been set.
func (o *Adminuser) HasAdminGroups() bool {
	if o != nil && !IsNil(o.AdminGroups) {
		return true
	}

	return false
}

// SetAdminGroups gets a reference to the given []string and assigns it to the AdminGroups field.
func (o *Adminuser) SetAdminGroups(v []string) {
	o.AdminGroups = v
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *Adminuser) GetAuthMethod() string {
	if o == nil || IsNil(o.AuthMethod) {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AuthMethod) {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *Adminuser) HasAuthMethod() bool {
	if o != nil && !IsNil(o.AuthMethod) {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *Adminuser) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *Adminuser) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *Adminuser) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *Adminuser) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCaCertificateIssuer returns the CaCertificateIssuer field value if set, zero value otherwise.
func (o *Adminuser) GetCaCertificateIssuer() string {
	if o == nil || IsNil(o.CaCertificateIssuer) {
		var ret string
		return ret
	}
	return *o.CaCertificateIssuer
}

// GetCaCertificateIssuerOk returns a tuple with the CaCertificateIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetCaCertificateIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.CaCertificateIssuer) {
		return nil, false
	}
	return o.CaCertificateIssuer, true
}

// HasCaCertificateIssuer returns a boolean if a field has been set.
func (o *Adminuser) HasCaCertificateIssuer() bool {
	if o != nil && !IsNil(o.CaCertificateIssuer) {
		return true
	}

	return false
}

// SetCaCertificateIssuer gets a reference to the given string and assigns it to the CaCertificateIssuer field.
func (o *Adminuser) SetCaCertificateIssuer(v string) {
	o.CaCertificateIssuer = &v
}

// GetClientCertificateSerialNumber returns the ClientCertificateSerialNumber field value if set, zero value otherwise.
func (o *Adminuser) GetClientCertificateSerialNumber() string {
	if o == nil || IsNil(o.ClientCertificateSerialNumber) {
		var ret string
		return ret
	}
	return *o.ClientCertificateSerialNumber
}

// GetClientCertificateSerialNumberOk returns a tuple with the ClientCertificateSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetClientCertificateSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateSerialNumber) {
		return nil, false
	}
	return o.ClientCertificateSerialNumber, true
}

// HasClientCertificateSerialNumber returns a boolean if a field has been set.
func (o *Adminuser) HasClientCertificateSerialNumber() bool {
	if o != nil && !IsNil(o.ClientCertificateSerialNumber) {
		return true
	}

	return false
}

// SetClientCertificateSerialNumber gets a reference to the given string and assigns it to the ClientCertificateSerialNumber field.
func (o *Adminuser) SetClientCertificateSerialNumber(v string) {
	o.ClientCertificateSerialNumber = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Adminuser) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Adminuser) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Adminuser) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Adminuser) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Adminuser) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Adminuser) SetDisable(v bool) {
	o.Disable = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Adminuser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Adminuser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Adminuser) SetEmail(v string) {
	o.Email = &v
}

// GetEnableCertificateAuthentication returns the EnableCertificateAuthentication field value if set, zero value otherwise.
func (o *Adminuser) GetEnableCertificateAuthentication() bool {
	if o == nil || IsNil(o.EnableCertificateAuthentication) {
		var ret bool
		return ret
	}
	return *o.EnableCertificateAuthentication
}

// GetEnableCertificateAuthenticationOk returns a tuple with the EnableCertificateAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetEnableCertificateAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCertificateAuthentication) {
		return nil, false
	}
	return o.EnableCertificateAuthentication, true
}

// HasEnableCertificateAuthentication returns a boolean if a field has been set.
func (o *Adminuser) HasEnableCertificateAuthentication() bool {
	if o != nil && !IsNil(o.EnableCertificateAuthentication) {
		return true
	}

	return false
}

// SetEnableCertificateAuthentication gets a reference to the given bool and assigns it to the EnableCertificateAuthentication field.
func (o *Adminuser) SetEnableCertificateAuthentication(v bool) {
	o.EnableCertificateAuthentication = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Adminuser) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Adminuser) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Adminuser) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Adminuser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Adminuser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Adminuser) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Adminuser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Adminuser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Adminuser) SetPassword(v string) {
	o.Password = &v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *Adminuser) GetSshKeys() []AdminuserSshKeys {
	if o == nil || IsNil(o.SshKeys) {
		var ret []AdminuserSshKeys
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetSshKeysOk() ([]AdminuserSshKeys, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *Adminuser) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []AdminuserSshKeys and assigns it to the SshKeys field.
func (o *Adminuser) SetSshKeys(v []AdminuserSshKeys) {
	o.SshKeys = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Adminuser) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Adminuser) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Adminuser) SetStatus(v string) {
	o.Status = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Adminuser) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Adminuser) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Adminuser) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetUseSshKeys returns the UseSshKeys field value if set, zero value otherwise.
func (o *Adminuser) GetUseSshKeys() bool {
	if o == nil || IsNil(o.UseSshKeys) {
		var ret bool
		return ret
	}
	return *o.UseSshKeys
}

// GetUseSshKeysOk returns a tuple with the UseSshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetUseSshKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSshKeys) {
		return nil, false
	}
	return o.UseSshKeys, true
}

// HasUseSshKeys returns a boolean if a field has been set.
func (o *Adminuser) HasUseSshKeys() bool {
	if o != nil && !IsNil(o.UseSshKeys) {
		return true
	}

	return false
}

// SetUseSshKeys gets a reference to the given bool and assigns it to the UseSshKeys field.
func (o *Adminuser) SetUseSshKeys(v bool) {
	o.UseSshKeys = &v
}

// GetUseTimeZone returns the UseTimeZone field value if set, zero value otherwise.
func (o *Adminuser) GetUseTimeZone() bool {
	if o == nil || IsNil(o.UseTimeZone) {
		var ret bool
		return ret
	}
	return *o.UseTimeZone
}

// GetUseTimeZoneOk returns a tuple with the UseTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminuser) GetUseTimeZoneOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTimeZone) {
		return nil, false
	}
	return o.UseTimeZone, true
}

// HasUseTimeZone returns a boolean if a field has been set.
func (o *Adminuser) HasUseTimeZone() bool {
	if o != nil && !IsNil(o.UseTimeZone) {
		return true
	}

	return false
}

// SetUseTimeZone gets a reference to the given bool and assigns it to the UseTimeZone field.
func (o *Adminuser) SetUseTimeZone(v bool) {
	o.UseTimeZone = &v
}

func (o Adminuser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Adminuser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AdminGroups) {
		toSerialize["admin_groups"] = o.AdminGroups
	}
	if !IsNil(o.AuthMethod) {
		toSerialize["auth_method"] = o.AuthMethod
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.CaCertificateIssuer) {
		toSerialize["ca_certificate_issuer"] = o.CaCertificateIssuer
	}
	if !IsNil(o.ClientCertificateSerialNumber) {
		toSerialize["client_certificate_serial_number"] = o.ClientCertificateSerialNumber
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnableCertificateAuthentication) {
		toSerialize["enable_certificate_authentication"] = o.EnableCertificateAuthentication
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.SshKeys) {
		toSerialize["ssh_keys"] = o.SshKeys
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.UseSshKeys) {
		toSerialize["use_ssh_keys"] = o.UseSshKeys
	}
	if !IsNil(o.UseTimeZone) {
		toSerialize["use_time_zone"] = o.UseTimeZone
	}
	return toSerialize, nil
}

type NullableAdminuser struct {
	value *Adminuser
	isSet bool
}

func (v NullableAdminuser) Get() *Adminuser {
	return v.value
}

func (v *NullableAdminuser) Set(val *Adminuser) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminuser) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminuser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminuser(val *Adminuser) *NullableAdminuser {
	return &NullableAdminuser{value: val, isSet: true}
}

func (v NullableAdminuser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminuser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
