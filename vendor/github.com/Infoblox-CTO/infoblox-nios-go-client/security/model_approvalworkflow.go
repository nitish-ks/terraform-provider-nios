/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Approvalworkflow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Approvalworkflow{}

// Approvalworkflow struct for Approvalworkflow
type Approvalworkflow struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The approval administration group.
	ApprovalGroup *string `json:"approval_group,omitempty"`
	// The destination for approval task notifications.
	ApprovalNotifyTo *string `json:"approval_notify_to,omitempty"`
	// The destination for approved task notifications.
	ApprovedNotifyTo *string `json:"approved_notify_to,omitempty"`
	// The requirement for the comment when an approver approves a submitted task.
	ApproverComment *string `json:"approver_comment,omitempty"`
	// Determines whether approval task notifications are enabled.
	EnableApprovalNotify *bool `json:"enable_approval_notify,omitempty"`
	// Determines whether approved task notifications are enabled.
	EnableApprovedNotify *bool `json:"enable_approved_notify,omitempty"`
	// Determines whether failed task notifications are enabled.
	EnableFailedNotify *bool `json:"enable_failed_notify,omitempty"`
	// Determines whether e-mail notifications to admin group's e-mail address are enabled.
	EnableNotifyGroup *bool `json:"enable_notify_group,omitempty"`
	// Determines whether e-mail notifications to an admin member's e-mail address are enabled.
	EnableNotifyUser *bool `json:"enable_notify_user,omitempty"`
	// Determines whether rejected task notifications are enabled.
	EnableRejectedNotify *bool `json:"enable_rejected_notify,omitempty"`
	// Determines whether rescheduled task notifications are enabled.
	EnableRescheduledNotify *bool `json:"enable_rescheduled_notify,omitempty"`
	// Determines whether succeeded task notifications are enabled.
	EnableSucceededNotify *bool `json:"enable_succeeded_notify,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The destination for failed task notifications.
	FailedNotifyTo *string `json:"failed_notify_to,omitempty"`
	// The destination for rejected task notifications.
	RejectedNotifyTo *string `json:"rejected_notify_to,omitempty"`
	// The destination for rescheduled task notifications.
	RescheduledNotifyTo *string `json:"rescheduled_notify_to,omitempty"`
	// The requirement for the comment when a submitter submits a task for approval.
	SubmitterComment *string `json:"submitter_comment,omitempty"`
	// The submitter admininstration group.
	SubmitterGroup *string `json:"submitter_group,omitempty"`
	// The destination for succeeded task notifications.
	SucceededNotifyTo *string `json:"succeeded_notify_to,omitempty"`
	// The requirement for the ticket number when a submitter submits a task for approval.
	TicketNumber *string `json:"ticket_number,omitempty"`
}

// NewApprovalworkflow instantiates a new Approvalworkflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalworkflow() *Approvalworkflow {
	this := Approvalworkflow{}
	return &this
}

// NewApprovalworkflowWithDefaults instantiates a new Approvalworkflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalworkflowWithDefaults() *Approvalworkflow {
	this := Approvalworkflow{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Approvalworkflow) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Approvalworkflow) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Approvalworkflow) SetRef(v string) {
	o.Ref = &v
}

// GetApprovalGroup returns the ApprovalGroup field value if set, zero value otherwise.
func (o *Approvalworkflow) GetApprovalGroup() string {
	if o == nil || IsNil(o.ApprovalGroup) {
		var ret string
		return ret
	}
	return *o.ApprovalGroup
}

// GetApprovalGroupOk returns a tuple with the ApprovalGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetApprovalGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalGroup) {
		return nil, false
	}
	return o.ApprovalGroup, true
}

// HasApprovalGroup returns a boolean if a field has been set.
func (o *Approvalworkflow) HasApprovalGroup() bool {
	if o != nil && !IsNil(o.ApprovalGroup) {
		return true
	}

	return false
}

// SetApprovalGroup gets a reference to the given string and assigns it to the ApprovalGroup field.
func (o *Approvalworkflow) SetApprovalGroup(v string) {
	o.ApprovalGroup = &v
}

// GetApprovalNotifyTo returns the ApprovalNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetApprovalNotifyTo() string {
	if o == nil || IsNil(o.ApprovalNotifyTo) {
		var ret string
		return ret
	}
	return *o.ApprovalNotifyTo
}

// GetApprovalNotifyToOk returns a tuple with the ApprovalNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetApprovalNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalNotifyTo) {
		return nil, false
	}
	return o.ApprovalNotifyTo, true
}

// HasApprovalNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasApprovalNotifyTo() bool {
	if o != nil && !IsNil(o.ApprovalNotifyTo) {
		return true
	}

	return false
}

// SetApprovalNotifyTo gets a reference to the given string and assigns it to the ApprovalNotifyTo field.
func (o *Approvalworkflow) SetApprovalNotifyTo(v string) {
	o.ApprovalNotifyTo = &v
}

// GetApprovedNotifyTo returns the ApprovedNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetApprovedNotifyTo() string {
	if o == nil || IsNil(o.ApprovedNotifyTo) {
		var ret string
		return ret
	}
	return *o.ApprovedNotifyTo
}

// GetApprovedNotifyToOk returns a tuple with the ApprovedNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetApprovedNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedNotifyTo) {
		return nil, false
	}
	return o.ApprovedNotifyTo, true
}

// HasApprovedNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasApprovedNotifyTo() bool {
	if o != nil && !IsNil(o.ApprovedNotifyTo) {
		return true
	}

	return false
}

// SetApprovedNotifyTo gets a reference to the given string and assigns it to the ApprovedNotifyTo field.
func (o *Approvalworkflow) SetApprovedNotifyTo(v string) {
	o.ApprovedNotifyTo = &v
}

// GetApproverComment returns the ApproverComment field value if set, zero value otherwise.
func (o *Approvalworkflow) GetApproverComment() string {
	if o == nil || IsNil(o.ApproverComment) {
		var ret string
		return ret
	}
	return *o.ApproverComment
}

// GetApproverCommentOk returns a tuple with the ApproverComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetApproverCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ApproverComment) {
		return nil, false
	}
	return o.ApproverComment, true
}

// HasApproverComment returns a boolean if a field has been set.
func (o *Approvalworkflow) HasApproverComment() bool {
	if o != nil && !IsNil(o.ApproverComment) {
		return true
	}

	return false
}

// SetApproverComment gets a reference to the given string and assigns it to the ApproverComment field.
func (o *Approvalworkflow) SetApproverComment(v string) {
	o.ApproverComment = &v
}

// GetEnableApprovalNotify returns the EnableApprovalNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableApprovalNotify() bool {
	if o == nil || IsNil(o.EnableApprovalNotify) {
		var ret bool
		return ret
	}
	return *o.EnableApprovalNotify
}

// GetEnableApprovalNotifyOk returns a tuple with the EnableApprovalNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableApprovalNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableApprovalNotify) {
		return nil, false
	}
	return o.EnableApprovalNotify, true
}

// HasEnableApprovalNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableApprovalNotify() bool {
	if o != nil && !IsNil(o.EnableApprovalNotify) {
		return true
	}

	return false
}

// SetEnableApprovalNotify gets a reference to the given bool and assigns it to the EnableApprovalNotify field.
func (o *Approvalworkflow) SetEnableApprovalNotify(v bool) {
	o.EnableApprovalNotify = &v
}

// GetEnableApprovedNotify returns the EnableApprovedNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableApprovedNotify() bool {
	if o == nil || IsNil(o.EnableApprovedNotify) {
		var ret bool
		return ret
	}
	return *o.EnableApprovedNotify
}

// GetEnableApprovedNotifyOk returns a tuple with the EnableApprovedNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableApprovedNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableApprovedNotify) {
		return nil, false
	}
	return o.EnableApprovedNotify, true
}

// HasEnableApprovedNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableApprovedNotify() bool {
	if o != nil && !IsNil(o.EnableApprovedNotify) {
		return true
	}

	return false
}

// SetEnableApprovedNotify gets a reference to the given bool and assigns it to the EnableApprovedNotify field.
func (o *Approvalworkflow) SetEnableApprovedNotify(v bool) {
	o.EnableApprovedNotify = &v
}

// GetEnableFailedNotify returns the EnableFailedNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableFailedNotify() bool {
	if o == nil || IsNil(o.EnableFailedNotify) {
		var ret bool
		return ret
	}
	return *o.EnableFailedNotify
}

// GetEnableFailedNotifyOk returns a tuple with the EnableFailedNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableFailedNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFailedNotify) {
		return nil, false
	}
	return o.EnableFailedNotify, true
}

// HasEnableFailedNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableFailedNotify() bool {
	if o != nil && !IsNil(o.EnableFailedNotify) {
		return true
	}

	return false
}

// SetEnableFailedNotify gets a reference to the given bool and assigns it to the EnableFailedNotify field.
func (o *Approvalworkflow) SetEnableFailedNotify(v bool) {
	o.EnableFailedNotify = &v
}

// GetEnableNotifyGroup returns the EnableNotifyGroup field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableNotifyGroup() bool {
	if o == nil || IsNil(o.EnableNotifyGroup) {
		var ret bool
		return ret
	}
	return *o.EnableNotifyGroup
}

// GetEnableNotifyGroupOk returns a tuple with the EnableNotifyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableNotifyGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifyGroup) {
		return nil, false
	}
	return o.EnableNotifyGroup, true
}

// HasEnableNotifyGroup returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableNotifyGroup() bool {
	if o != nil && !IsNil(o.EnableNotifyGroup) {
		return true
	}

	return false
}

// SetEnableNotifyGroup gets a reference to the given bool and assigns it to the EnableNotifyGroup field.
func (o *Approvalworkflow) SetEnableNotifyGroup(v bool) {
	o.EnableNotifyGroup = &v
}

// GetEnableNotifyUser returns the EnableNotifyUser field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableNotifyUser() bool {
	if o == nil || IsNil(o.EnableNotifyUser) {
		var ret bool
		return ret
	}
	return *o.EnableNotifyUser
}

// GetEnableNotifyUserOk returns a tuple with the EnableNotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableNotifyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifyUser) {
		return nil, false
	}
	return o.EnableNotifyUser, true
}

// HasEnableNotifyUser returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableNotifyUser() bool {
	if o != nil && !IsNil(o.EnableNotifyUser) {
		return true
	}

	return false
}

// SetEnableNotifyUser gets a reference to the given bool and assigns it to the EnableNotifyUser field.
func (o *Approvalworkflow) SetEnableNotifyUser(v bool) {
	o.EnableNotifyUser = &v
}

// GetEnableRejectedNotify returns the EnableRejectedNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableRejectedNotify() bool {
	if o == nil || IsNil(o.EnableRejectedNotify) {
		var ret bool
		return ret
	}
	return *o.EnableRejectedNotify
}

// GetEnableRejectedNotifyOk returns a tuple with the EnableRejectedNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableRejectedNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRejectedNotify) {
		return nil, false
	}
	return o.EnableRejectedNotify, true
}

// HasEnableRejectedNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableRejectedNotify() bool {
	if o != nil && !IsNil(o.EnableRejectedNotify) {
		return true
	}

	return false
}

// SetEnableRejectedNotify gets a reference to the given bool and assigns it to the EnableRejectedNotify field.
func (o *Approvalworkflow) SetEnableRejectedNotify(v bool) {
	o.EnableRejectedNotify = &v
}

// GetEnableRescheduledNotify returns the EnableRescheduledNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableRescheduledNotify() bool {
	if o == nil || IsNil(o.EnableRescheduledNotify) {
		var ret bool
		return ret
	}
	return *o.EnableRescheduledNotify
}

// GetEnableRescheduledNotifyOk returns a tuple with the EnableRescheduledNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableRescheduledNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRescheduledNotify) {
		return nil, false
	}
	return o.EnableRescheduledNotify, true
}

// HasEnableRescheduledNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableRescheduledNotify() bool {
	if o != nil && !IsNil(o.EnableRescheduledNotify) {
		return true
	}

	return false
}

// SetEnableRescheduledNotify gets a reference to the given bool and assigns it to the EnableRescheduledNotify field.
func (o *Approvalworkflow) SetEnableRescheduledNotify(v bool) {
	o.EnableRescheduledNotify = &v
}

// GetEnableSucceededNotify returns the EnableSucceededNotify field value if set, zero value otherwise.
func (o *Approvalworkflow) GetEnableSucceededNotify() bool {
	if o == nil || IsNil(o.EnableSucceededNotify) {
		var ret bool
		return ret
	}
	return *o.EnableSucceededNotify
}

// GetEnableSucceededNotifyOk returns a tuple with the EnableSucceededNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetEnableSucceededNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSucceededNotify) {
		return nil, false
	}
	return o.EnableSucceededNotify, true
}

// HasEnableSucceededNotify returns a boolean if a field has been set.
func (o *Approvalworkflow) HasEnableSucceededNotify() bool {
	if o != nil && !IsNil(o.EnableSucceededNotify) {
		return true
	}

	return false
}

// SetEnableSucceededNotify gets a reference to the given bool and assigns it to the EnableSucceededNotify field.
func (o *Approvalworkflow) SetEnableSucceededNotify(v bool) {
	o.EnableSucceededNotify = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Approvalworkflow) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Approvalworkflow) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Approvalworkflow) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetFailedNotifyTo returns the FailedNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetFailedNotifyTo() string {
	if o == nil || IsNil(o.FailedNotifyTo) {
		var ret string
		return ret
	}
	return *o.FailedNotifyTo
}

// GetFailedNotifyToOk returns a tuple with the FailedNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetFailedNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.FailedNotifyTo) {
		return nil, false
	}
	return o.FailedNotifyTo, true
}

// HasFailedNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasFailedNotifyTo() bool {
	if o != nil && !IsNil(o.FailedNotifyTo) {
		return true
	}

	return false
}

// SetFailedNotifyTo gets a reference to the given string and assigns it to the FailedNotifyTo field.
func (o *Approvalworkflow) SetFailedNotifyTo(v string) {
	o.FailedNotifyTo = &v
}

// GetRejectedNotifyTo returns the RejectedNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetRejectedNotifyTo() string {
	if o == nil || IsNil(o.RejectedNotifyTo) {
		var ret string
		return ret
	}
	return *o.RejectedNotifyTo
}

// GetRejectedNotifyToOk returns a tuple with the RejectedNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetRejectedNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.RejectedNotifyTo) {
		return nil, false
	}
	return o.RejectedNotifyTo, true
}

// HasRejectedNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasRejectedNotifyTo() bool {
	if o != nil && !IsNil(o.RejectedNotifyTo) {
		return true
	}

	return false
}

// SetRejectedNotifyTo gets a reference to the given string and assigns it to the RejectedNotifyTo field.
func (o *Approvalworkflow) SetRejectedNotifyTo(v string) {
	o.RejectedNotifyTo = &v
}

// GetRescheduledNotifyTo returns the RescheduledNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetRescheduledNotifyTo() string {
	if o == nil || IsNil(o.RescheduledNotifyTo) {
		var ret string
		return ret
	}
	return *o.RescheduledNotifyTo
}

// GetRescheduledNotifyToOk returns a tuple with the RescheduledNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetRescheduledNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.RescheduledNotifyTo) {
		return nil, false
	}
	return o.RescheduledNotifyTo, true
}

// HasRescheduledNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasRescheduledNotifyTo() bool {
	if o != nil && !IsNil(o.RescheduledNotifyTo) {
		return true
	}

	return false
}

// SetRescheduledNotifyTo gets a reference to the given string and assigns it to the RescheduledNotifyTo field.
func (o *Approvalworkflow) SetRescheduledNotifyTo(v string) {
	o.RescheduledNotifyTo = &v
}

// GetSubmitterComment returns the SubmitterComment field value if set, zero value otherwise.
func (o *Approvalworkflow) GetSubmitterComment() string {
	if o == nil || IsNil(o.SubmitterComment) {
		var ret string
		return ret
	}
	return *o.SubmitterComment
}

// GetSubmitterCommentOk returns a tuple with the SubmitterComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetSubmitterCommentOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitterComment) {
		return nil, false
	}
	return o.SubmitterComment, true
}

// HasSubmitterComment returns a boolean if a field has been set.
func (o *Approvalworkflow) HasSubmitterComment() bool {
	if o != nil && !IsNil(o.SubmitterComment) {
		return true
	}

	return false
}

// SetSubmitterComment gets a reference to the given string and assigns it to the SubmitterComment field.
func (o *Approvalworkflow) SetSubmitterComment(v string) {
	o.SubmitterComment = &v
}

// GetSubmitterGroup returns the SubmitterGroup field value if set, zero value otherwise.
func (o *Approvalworkflow) GetSubmitterGroup() string {
	if o == nil || IsNil(o.SubmitterGroup) {
		var ret string
		return ret
	}
	return *o.SubmitterGroup
}

// GetSubmitterGroupOk returns a tuple with the SubmitterGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetSubmitterGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitterGroup) {
		return nil, false
	}
	return o.SubmitterGroup, true
}

// HasSubmitterGroup returns a boolean if a field has been set.
func (o *Approvalworkflow) HasSubmitterGroup() bool {
	if o != nil && !IsNil(o.SubmitterGroup) {
		return true
	}

	return false
}

// SetSubmitterGroup gets a reference to the given string and assigns it to the SubmitterGroup field.
func (o *Approvalworkflow) SetSubmitterGroup(v string) {
	o.SubmitterGroup = &v
}

// GetSucceededNotifyTo returns the SucceededNotifyTo field value if set, zero value otherwise.
func (o *Approvalworkflow) GetSucceededNotifyTo() string {
	if o == nil || IsNil(o.SucceededNotifyTo) {
		var ret string
		return ret
	}
	return *o.SucceededNotifyTo
}

// GetSucceededNotifyToOk returns a tuple with the SucceededNotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetSucceededNotifyToOk() (*string, bool) {
	if o == nil || IsNil(o.SucceededNotifyTo) {
		return nil, false
	}
	return o.SucceededNotifyTo, true
}

// HasSucceededNotifyTo returns a boolean if a field has been set.
func (o *Approvalworkflow) HasSucceededNotifyTo() bool {
	if o != nil && !IsNil(o.SucceededNotifyTo) {
		return true
	}

	return false
}

// SetSucceededNotifyTo gets a reference to the given string and assigns it to the SucceededNotifyTo field.
func (o *Approvalworkflow) SetSucceededNotifyTo(v string) {
	o.SucceededNotifyTo = &v
}

// GetTicketNumber returns the TicketNumber field value if set, zero value otherwise.
func (o *Approvalworkflow) GetTicketNumber() string {
	if o == nil || IsNil(o.TicketNumber) {
		var ret string
		return ret
	}
	return *o.TicketNumber
}

// GetTicketNumberOk returns a tuple with the TicketNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approvalworkflow) GetTicketNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TicketNumber) {
		return nil, false
	}
	return o.TicketNumber, true
}

// HasTicketNumber returns a boolean if a field has been set.
func (o *Approvalworkflow) HasTicketNumber() bool {
	if o != nil && !IsNil(o.TicketNumber) {
		return true
	}

	return false
}

// SetTicketNumber gets a reference to the given string and assigns it to the TicketNumber field.
func (o *Approvalworkflow) SetTicketNumber(v string) {
	o.TicketNumber = &v
}

func (o Approvalworkflow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Approvalworkflow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ApprovalGroup) {
		toSerialize["approval_group"] = o.ApprovalGroup
	}
	if !IsNil(o.ApprovalNotifyTo) {
		toSerialize["approval_notify_to"] = o.ApprovalNotifyTo
	}
	if !IsNil(o.ApprovedNotifyTo) {
		toSerialize["approved_notify_to"] = o.ApprovedNotifyTo
	}
	if !IsNil(o.ApproverComment) {
		toSerialize["approver_comment"] = o.ApproverComment
	}
	if !IsNil(o.EnableApprovalNotify) {
		toSerialize["enable_approval_notify"] = o.EnableApprovalNotify
	}
	if !IsNil(o.EnableApprovedNotify) {
		toSerialize["enable_approved_notify"] = o.EnableApprovedNotify
	}
	if !IsNil(o.EnableFailedNotify) {
		toSerialize["enable_failed_notify"] = o.EnableFailedNotify
	}
	if !IsNil(o.EnableNotifyGroup) {
		toSerialize["enable_notify_group"] = o.EnableNotifyGroup
	}
	if !IsNil(o.EnableNotifyUser) {
		toSerialize["enable_notify_user"] = o.EnableNotifyUser
	}
	if !IsNil(o.EnableRejectedNotify) {
		toSerialize["enable_rejected_notify"] = o.EnableRejectedNotify
	}
	if !IsNil(o.EnableRescheduledNotify) {
		toSerialize["enable_rescheduled_notify"] = o.EnableRescheduledNotify
	}
	if !IsNil(o.EnableSucceededNotify) {
		toSerialize["enable_succeeded_notify"] = o.EnableSucceededNotify
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.FailedNotifyTo) {
		toSerialize["failed_notify_to"] = o.FailedNotifyTo
	}
	if !IsNil(o.RejectedNotifyTo) {
		toSerialize["rejected_notify_to"] = o.RejectedNotifyTo
	}
	if !IsNil(o.RescheduledNotifyTo) {
		toSerialize["rescheduled_notify_to"] = o.RescheduledNotifyTo
	}
	if !IsNil(o.SubmitterComment) {
		toSerialize["submitter_comment"] = o.SubmitterComment
	}
	if !IsNil(o.SubmitterGroup) {
		toSerialize["submitter_group"] = o.SubmitterGroup
	}
	if !IsNil(o.SucceededNotifyTo) {
		toSerialize["succeeded_notify_to"] = o.SucceededNotifyTo
	}
	if !IsNil(o.TicketNumber) {
		toSerialize["ticket_number"] = o.TicketNumber
	}
	return toSerialize, nil
}

type NullableApprovalworkflow struct {
	value *Approvalworkflow
	isSet bool
}

func (v NullableApprovalworkflow) Get() *Approvalworkflow {
	return v.value
}

func (v *NullableApprovalworkflow) Set(val *Approvalworkflow) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalworkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalworkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalworkflow(val *Approvalworkflow) *NullableApprovalworkflow {
	return &NullableApprovalworkflow{value: val, isSet: true}
}

func (v NullableApprovalworkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalworkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
