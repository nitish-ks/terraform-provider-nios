/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Authpolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Authpolicy{}

// Authpolicy struct for Authpolicy
type Authpolicy struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// List of names of local administration groups that are mapped to remote administration groups.
	AdminGroups []string `json:"admin_groups,omitempty"`
	// The array that contains an ordered list of refs to :doc:`localuser:authservice object </objects/localuser.authservice>`, ldap_auth_service object ldap_auth_service, :doc:`radius:authservice object </objects/radius.authservice>`, :doc:`tacacsplus:authservice object </objects/tacacsplus.authservice>`, ad_auth_service object ad_auth_service, :doc:`certificate:authservice object </objects/certificate.authservice>`. :doc:`saml:authservice object </objects/saml.authservice>`,
	AuthServices []string `json:"auth_services,omitempty"`
	// The default admin group that provides authentication in case no valid group is found.
	DefaultGroup *string `json:"default_group,omitempty"`
	// Remote policies usage.
	UsageType *string `json:"usage_type,omitempty"`
}

// NewAuthpolicy instantiates a new Authpolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthpolicy() *Authpolicy {
	this := Authpolicy{}
	return &this
}

// NewAuthpolicyWithDefaults instantiates a new Authpolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthpolicyWithDefaults() *Authpolicy {
	this := Authpolicy{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Authpolicy) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authpolicy) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Authpolicy) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Authpolicy) SetRef(v string) {
	o.Ref = &v
}

// GetAdminGroups returns the AdminGroups field value if set, zero value otherwise.
func (o *Authpolicy) GetAdminGroups() []string {
	if o == nil || IsNil(o.AdminGroups) {
		var ret []string
		return ret
	}
	return o.AdminGroups
}

// GetAdminGroupsOk returns a tuple with the AdminGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authpolicy) GetAdminGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdminGroups) {
		return nil, false
	}
	return o.AdminGroups, true
}

// HasAdminGroups returns a boolean if a field has been set.
func (o *Authpolicy) HasAdminGroups() bool {
	if o != nil && !IsNil(o.AdminGroups) {
		return true
	}

	return false
}

// SetAdminGroups gets a reference to the given []string and assigns it to the AdminGroups field.
func (o *Authpolicy) SetAdminGroups(v []string) {
	o.AdminGroups = v
}

// GetAuthServices returns the AuthServices field value if set, zero value otherwise.
func (o *Authpolicy) GetAuthServices() []string {
	if o == nil || IsNil(o.AuthServices) {
		var ret []string
		return ret
	}
	return o.AuthServices
}

// GetAuthServicesOk returns a tuple with the AuthServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authpolicy) GetAuthServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthServices) {
		return nil, false
	}
	return o.AuthServices, true
}

// HasAuthServices returns a boolean if a field has been set.
func (o *Authpolicy) HasAuthServices() bool {
	if o != nil && !IsNil(o.AuthServices) {
		return true
	}

	return false
}

// SetAuthServices gets a reference to the given []string and assigns it to the AuthServices field.
func (o *Authpolicy) SetAuthServices(v []string) {
	o.AuthServices = v
}

// GetDefaultGroup returns the DefaultGroup field value if set, zero value otherwise.
func (o *Authpolicy) GetDefaultGroup() string {
	if o == nil || IsNil(o.DefaultGroup) {
		var ret string
		return ret
	}
	return *o.DefaultGroup
}

// GetDefaultGroupOk returns a tuple with the DefaultGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authpolicy) GetDefaultGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultGroup) {
		return nil, false
	}
	return o.DefaultGroup, true
}

// HasDefaultGroup returns a boolean if a field has been set.
func (o *Authpolicy) HasDefaultGroup() bool {
	if o != nil && !IsNil(o.DefaultGroup) {
		return true
	}

	return false
}

// SetDefaultGroup gets a reference to the given string and assigns it to the DefaultGroup field.
func (o *Authpolicy) SetDefaultGroup(v string) {
	o.DefaultGroup = &v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *Authpolicy) GetUsageType() string {
	if o == nil || IsNil(o.UsageType) {
		var ret string
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authpolicy) GetUsageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UsageType) {
		return nil, false
	}
	return o.UsageType, true
}

// HasUsageType returns a boolean if a field has been set.
func (o *Authpolicy) HasUsageType() bool {
	if o != nil && !IsNil(o.UsageType) {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given string and assigns it to the UsageType field.
func (o *Authpolicy) SetUsageType(v string) {
	o.UsageType = &v
}

func (o Authpolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Authpolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AdminGroups) {
		toSerialize["admin_groups"] = o.AdminGroups
	}
	if !IsNil(o.AuthServices) {
		toSerialize["auth_services"] = o.AuthServices
	}
	if !IsNil(o.DefaultGroup) {
		toSerialize["default_group"] = o.DefaultGroup
	}
	if !IsNil(o.UsageType) {
		toSerialize["usage_type"] = o.UsageType
	}
	return toSerialize, nil
}

type NullableAuthpolicy struct {
	value *Authpolicy
	isSet bool
}

func (v NullableAuthpolicy) Get() *Authpolicy {
	return v.value
}

func (v *NullableAuthpolicy) Set(val *Authpolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthpolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthpolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthpolicy(val *Authpolicy) *NullableAuthpolicy {
	return &NullableAuthpolicy{value: val, isSet: true}
}

func (v NullableAuthpolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthpolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
