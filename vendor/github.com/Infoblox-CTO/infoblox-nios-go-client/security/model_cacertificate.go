/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Cacertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cacertificate{}

// Cacertificate struct for Cacertificate
type Cacertificate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The certificate subject name.
	DistinguishedName *string `json:"distinguished_name,omitempty"`
	// The certificate issuer subject name.
	Issuer *string `json:"issuer,omitempty"`
	// The certificate serial number in hex format.
	Serial *string `json:"serial,omitempty"`
	// Information about the CA certificate usage.
	UsedBy *string `json:"used_by,omitempty"`
	// The date after which the certificate becomes invalid.
	ValidNotAfter *int64 `json:"valid_not_after,omitempty"`
	// The date before which the certificate is not valid.
	ValidNotBefore *int64 `json:"valid_not_before,omitempty"`
}

// NewCacertificate instantiates a new Cacertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacertificate() *Cacertificate {
	this := Cacertificate{}
	return &this
}

// NewCacertificateWithDefaults instantiates a new Cacertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacertificateWithDefaults() *Cacertificate {
	this := Cacertificate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Cacertificate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Cacertificate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Cacertificate) SetRef(v string) {
	o.Ref = &v
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *Cacertificate) GetDistinguishedName() string {
	if o == nil || IsNil(o.DistinguishedName) {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || IsNil(o.DistinguishedName) {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *Cacertificate) HasDistinguishedName() bool {
	if o != nil && !IsNil(o.DistinguishedName) {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *Cacertificate) SetDistinguishedName(v string) {
	o.DistinguishedName = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *Cacertificate) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *Cacertificate) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *Cacertificate) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Cacertificate) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Cacertificate) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *Cacertificate) SetSerial(v string) {
	o.Serial = &v
}

// GetUsedBy returns the UsedBy field value if set, zero value otherwise.
func (o *Cacertificate) GetUsedBy() string {
	if o == nil || IsNil(o.UsedBy) {
		var ret string
		return ret
	}
	return *o.UsedBy
}

// GetUsedByOk returns a tuple with the UsedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetUsedByOk() (*string, bool) {
	if o == nil || IsNil(o.UsedBy) {
		return nil, false
	}
	return o.UsedBy, true
}

// HasUsedBy returns a boolean if a field has been set.
func (o *Cacertificate) HasUsedBy() bool {
	if o != nil && !IsNil(o.UsedBy) {
		return true
	}

	return false
}

// SetUsedBy gets a reference to the given string and assigns it to the UsedBy field.
func (o *Cacertificate) SetUsedBy(v string) {
	o.UsedBy = &v
}

// GetValidNotAfter returns the ValidNotAfter field value if set, zero value otherwise.
func (o *Cacertificate) GetValidNotAfter() int64 {
	if o == nil || IsNil(o.ValidNotAfter) {
		var ret int64
		return ret
	}
	return *o.ValidNotAfter
}

// GetValidNotAfterOk returns a tuple with the ValidNotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetValidNotAfterOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidNotAfter) {
		return nil, false
	}
	return o.ValidNotAfter, true
}

// HasValidNotAfter returns a boolean if a field has been set.
func (o *Cacertificate) HasValidNotAfter() bool {
	if o != nil && !IsNil(o.ValidNotAfter) {
		return true
	}

	return false
}

// SetValidNotAfter gets a reference to the given int64 and assigns it to the ValidNotAfter field.
func (o *Cacertificate) SetValidNotAfter(v int64) {
	o.ValidNotAfter = &v
}

// GetValidNotBefore returns the ValidNotBefore field value if set, zero value otherwise.
func (o *Cacertificate) GetValidNotBefore() int64 {
	if o == nil || IsNil(o.ValidNotBefore) {
		var ret int64
		return ret
	}
	return *o.ValidNotBefore
}

// GetValidNotBeforeOk returns a tuple with the ValidNotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cacertificate) GetValidNotBeforeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidNotBefore) {
		return nil, false
	}
	return o.ValidNotBefore, true
}

// HasValidNotBefore returns a boolean if a field has been set.
func (o *Cacertificate) HasValidNotBefore() bool {
	if o != nil && !IsNil(o.ValidNotBefore) {
		return true
	}

	return false
}

// SetValidNotBefore gets a reference to the given int64 and assigns it to the ValidNotBefore field.
func (o *Cacertificate) SetValidNotBefore(v int64) {
	o.ValidNotBefore = &v
}

func (o Cacertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cacertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.DistinguishedName) {
		toSerialize["distinguished_name"] = o.DistinguishedName
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.UsedBy) {
		toSerialize["used_by"] = o.UsedBy
	}
	if !IsNil(o.ValidNotAfter) {
		toSerialize["valid_not_after"] = o.ValidNotAfter
	}
	if !IsNil(o.ValidNotBefore) {
		toSerialize["valid_not_before"] = o.ValidNotBefore
	}
	return toSerialize, nil
}

type NullableCacertificate struct {
	value *Cacertificate
	isSet bool
}

func (v NullableCacertificate) Get() *Cacertificate {
	return v.value
}

func (v *NullableCacertificate) Set(val *Cacertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCacertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCacertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacertificate(val *Cacertificate) *NullableCacertificate {
	return &NullableCacertificate{value: val, isSet: true}
}

func (v NullableCacertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
