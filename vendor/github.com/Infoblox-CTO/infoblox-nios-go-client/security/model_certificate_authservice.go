/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the CertificateAuthservice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateAuthservice{}

// CertificateAuthservice struct for CertificateAuthservice
type CertificateAuthservice struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Specifies the value of the client certificate for automatically populating the NIOS login name.
	AutoPopulateLogin *string `json:"auto_populate_login,omitempty"`
	// The list of CA certificates.
	CaCertificates []string `json:"ca_certificates,omitempty"`
	// The descriptive comment for the certificate authentication service.
	Comment *string `json:"comment,omitempty"`
	// Determines if this certificate authentication service is enabled or disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Determines if username/password authentication together with client certificate authentication is enabled or disabled.
	EnablePasswordRequest *bool `json:"enable_password_request,omitempty"`
	// Determines if the lookup for user group membership information on remote services is enabled or disabled.
	EnableRemoteLookup *bool `json:"enable_remote_lookup,omitempty"`
	// The number of validation attempts before the appliance contacts the next responder.
	MaxRetries *int64 `json:"max_retries,omitempty"`
	// The name of the certificate authentication service.
	Name *string `json:"name,omitempty"`
	// Specifies the source of OCSP settings.
	OcspCheck *string `json:"ocsp_check,omitempty"`
	// An ordered list of OCSP responders that are part of the certificate authentication service.
	OcspResponders []CertificateAuthserviceOcspResponders `json:"ocsp_responders,omitempty"`
	// The period of time the appliance waits before it attempts to contact a responder that is out of service again. The value must be between 1 and 600 seconds.
	RecoveryInterval *int64 `json:"recovery_interval,omitempty"`
	// The password for the service account.
	RemoteLookupPassword *string `json:"remote_lookup_password,omitempty"`
	// The service that will be used for remote lookup.
	RemoteLookupService *string `json:"remote_lookup_service,omitempty"`
	// The username for the service account.
	RemoteLookupUsername *string `json:"remote_lookup_username,omitempty"`
	// The validation timeout period in milliseconds.
	ResponseTimeout *int64 `json:"response_timeout,omitempty"`
	// The OCSP trust model.
	TrustModel *string `json:"trust_model,omitempty"`
	// Specifies how to search for a user.
	UserMatchType *string `json:"user_match_type,omitempty"`
}

// NewCertificateAuthservice instantiates a new CertificateAuthservice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateAuthservice() *CertificateAuthservice {
	this := CertificateAuthservice{}
	return &this
}

// NewCertificateAuthserviceWithDefaults instantiates a new CertificateAuthservice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateAuthserviceWithDefaults() *CertificateAuthservice {
	this := CertificateAuthservice{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *CertificateAuthservice) SetRef(v string) {
	o.Ref = &v
}

// GetAutoPopulateLogin returns the AutoPopulateLogin field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetAutoPopulateLogin() string {
	if o == nil || IsNil(o.AutoPopulateLogin) {
		var ret string
		return ret
	}
	return *o.AutoPopulateLogin
}

// GetAutoPopulateLoginOk returns a tuple with the AutoPopulateLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetAutoPopulateLoginOk() (*string, bool) {
	if o == nil || IsNil(o.AutoPopulateLogin) {
		return nil, false
	}
	return o.AutoPopulateLogin, true
}

// HasAutoPopulateLogin returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasAutoPopulateLogin() bool {
	if o != nil && !IsNil(o.AutoPopulateLogin) {
		return true
	}

	return false
}

// SetAutoPopulateLogin gets a reference to the given string and assigns it to the AutoPopulateLogin field.
func (o *CertificateAuthservice) SetAutoPopulateLogin(v string) {
	o.AutoPopulateLogin = &v
}

// GetCaCertificates returns the CaCertificates field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetCaCertificates() []string {
	if o == nil || IsNil(o.CaCertificates) {
		var ret []string
		return ret
	}
	return o.CaCertificates
}

// GetCaCertificatesOk returns a tuple with the CaCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetCaCertificatesOk() ([]string, bool) {
	if o == nil || IsNil(o.CaCertificates) {
		return nil, false
	}
	return o.CaCertificates, true
}

// HasCaCertificates returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasCaCertificates() bool {
	if o != nil && !IsNil(o.CaCertificates) {
		return true
	}

	return false
}

// SetCaCertificates gets a reference to the given []string and assigns it to the CaCertificates field.
func (o *CertificateAuthservice) SetCaCertificates(v []string) {
	o.CaCertificates = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CertificateAuthservice) SetComment(v string) {
	o.Comment = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *CertificateAuthservice) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEnablePasswordRequest returns the EnablePasswordRequest field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetEnablePasswordRequest() bool {
	if o == nil || IsNil(o.EnablePasswordRequest) {
		var ret bool
		return ret
	}
	return *o.EnablePasswordRequest
}

// GetEnablePasswordRequestOk returns a tuple with the EnablePasswordRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetEnablePasswordRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePasswordRequest) {
		return nil, false
	}
	return o.EnablePasswordRequest, true
}

// HasEnablePasswordRequest returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasEnablePasswordRequest() bool {
	if o != nil && !IsNil(o.EnablePasswordRequest) {
		return true
	}

	return false
}

// SetEnablePasswordRequest gets a reference to the given bool and assigns it to the EnablePasswordRequest field.
func (o *CertificateAuthservice) SetEnablePasswordRequest(v bool) {
	o.EnablePasswordRequest = &v
}

// GetEnableRemoteLookup returns the EnableRemoteLookup field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetEnableRemoteLookup() bool {
	if o == nil || IsNil(o.EnableRemoteLookup) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteLookup
}

// GetEnableRemoteLookupOk returns a tuple with the EnableRemoteLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetEnableRemoteLookupOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteLookup) {
		return nil, false
	}
	return o.EnableRemoteLookup, true
}

// HasEnableRemoteLookup returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasEnableRemoteLookup() bool {
	if o != nil && !IsNil(o.EnableRemoteLookup) {
		return true
	}

	return false
}

// SetEnableRemoteLookup gets a reference to the given bool and assigns it to the EnableRemoteLookup field.
func (o *CertificateAuthservice) SetEnableRemoteLookup(v bool) {
	o.EnableRemoteLookup = &v
}

// GetMaxRetries returns the MaxRetries field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetMaxRetries() int64 {
	if o == nil || IsNil(o.MaxRetries) {
		var ret int64
		return ret
	}
	return *o.MaxRetries
}

// GetMaxRetriesOk returns a tuple with the MaxRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetMaxRetriesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRetries) {
		return nil, false
	}
	return o.MaxRetries, true
}

// HasMaxRetries returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasMaxRetries() bool {
	if o != nil && !IsNil(o.MaxRetries) {
		return true
	}

	return false
}

// SetMaxRetries gets a reference to the given int64 and assigns it to the MaxRetries field.
func (o *CertificateAuthservice) SetMaxRetries(v int64) {
	o.MaxRetries = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificateAuthservice) SetName(v string) {
	o.Name = &v
}

// GetOcspCheck returns the OcspCheck field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetOcspCheck() string {
	if o == nil || IsNil(o.OcspCheck) {
		var ret string
		return ret
	}
	return *o.OcspCheck
}

// GetOcspCheckOk returns a tuple with the OcspCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetOcspCheckOk() (*string, bool) {
	if o == nil || IsNil(o.OcspCheck) {
		return nil, false
	}
	return o.OcspCheck, true
}

// HasOcspCheck returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasOcspCheck() bool {
	if o != nil && !IsNil(o.OcspCheck) {
		return true
	}

	return false
}

// SetOcspCheck gets a reference to the given string and assigns it to the OcspCheck field.
func (o *CertificateAuthservice) SetOcspCheck(v string) {
	o.OcspCheck = &v
}

// GetOcspResponders returns the OcspResponders field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetOcspResponders() []CertificateAuthserviceOcspResponders {
	if o == nil || IsNil(o.OcspResponders) {
		var ret []CertificateAuthserviceOcspResponders
		return ret
	}
	return o.OcspResponders
}

// GetOcspRespondersOk returns a tuple with the OcspResponders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetOcspRespondersOk() ([]CertificateAuthserviceOcspResponders, bool) {
	if o == nil || IsNil(o.OcspResponders) {
		return nil, false
	}
	return o.OcspResponders, true
}

// HasOcspResponders returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasOcspResponders() bool {
	if o != nil && !IsNil(o.OcspResponders) {
		return true
	}

	return false
}

// SetOcspResponders gets a reference to the given []CertificateAuthserviceOcspResponders and assigns it to the OcspResponders field.
func (o *CertificateAuthservice) SetOcspResponders(v []CertificateAuthserviceOcspResponders) {
	o.OcspResponders = v
}

// GetRecoveryInterval returns the RecoveryInterval field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetRecoveryInterval() int64 {
	if o == nil || IsNil(o.RecoveryInterval) {
		var ret int64
		return ret
	}
	return *o.RecoveryInterval
}

// GetRecoveryIntervalOk returns a tuple with the RecoveryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetRecoveryIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.RecoveryInterval) {
		return nil, false
	}
	return o.RecoveryInterval, true
}

// HasRecoveryInterval returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasRecoveryInterval() bool {
	if o != nil && !IsNil(o.RecoveryInterval) {
		return true
	}

	return false
}

// SetRecoveryInterval gets a reference to the given int64 and assigns it to the RecoveryInterval field.
func (o *CertificateAuthservice) SetRecoveryInterval(v int64) {
	o.RecoveryInterval = &v
}

// GetRemoteLookupPassword returns the RemoteLookupPassword field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetRemoteLookupPassword() string {
	if o == nil || IsNil(o.RemoteLookupPassword) {
		var ret string
		return ret
	}
	return *o.RemoteLookupPassword
}

// GetRemoteLookupPasswordOk returns a tuple with the RemoteLookupPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetRemoteLookupPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteLookupPassword) {
		return nil, false
	}
	return o.RemoteLookupPassword, true
}

// HasRemoteLookupPassword returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasRemoteLookupPassword() bool {
	if o != nil && !IsNil(o.RemoteLookupPassword) {
		return true
	}

	return false
}

// SetRemoteLookupPassword gets a reference to the given string and assigns it to the RemoteLookupPassword field.
func (o *CertificateAuthservice) SetRemoteLookupPassword(v string) {
	o.RemoteLookupPassword = &v
}

// GetRemoteLookupService returns the RemoteLookupService field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetRemoteLookupService() string {
	if o == nil || IsNil(o.RemoteLookupService) {
		var ret string
		return ret
	}
	return *o.RemoteLookupService
}

// GetRemoteLookupServiceOk returns a tuple with the RemoteLookupService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetRemoteLookupServiceOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteLookupService) {
		return nil, false
	}
	return o.RemoteLookupService, true
}

// HasRemoteLookupService returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasRemoteLookupService() bool {
	if o != nil && !IsNil(o.RemoteLookupService) {
		return true
	}

	return false
}

// SetRemoteLookupService gets a reference to the given string and assigns it to the RemoteLookupService field.
func (o *CertificateAuthservice) SetRemoteLookupService(v string) {
	o.RemoteLookupService = &v
}

// GetRemoteLookupUsername returns the RemoteLookupUsername field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetRemoteLookupUsername() string {
	if o == nil || IsNil(o.RemoteLookupUsername) {
		var ret string
		return ret
	}
	return *o.RemoteLookupUsername
}

// GetRemoteLookupUsernameOk returns a tuple with the RemoteLookupUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetRemoteLookupUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteLookupUsername) {
		return nil, false
	}
	return o.RemoteLookupUsername, true
}

// HasRemoteLookupUsername returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasRemoteLookupUsername() bool {
	if o != nil && !IsNil(o.RemoteLookupUsername) {
		return true
	}

	return false
}

// SetRemoteLookupUsername gets a reference to the given string and assigns it to the RemoteLookupUsername field.
func (o *CertificateAuthservice) SetRemoteLookupUsername(v string) {
	o.RemoteLookupUsername = &v
}

// GetResponseTimeout returns the ResponseTimeout field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetResponseTimeout() int64 {
	if o == nil || IsNil(o.ResponseTimeout) {
		var ret int64
		return ret
	}
	return *o.ResponseTimeout
}

// GetResponseTimeoutOk returns a tuple with the ResponseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetResponseTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ResponseTimeout) {
		return nil, false
	}
	return o.ResponseTimeout, true
}

// HasResponseTimeout returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasResponseTimeout() bool {
	if o != nil && !IsNil(o.ResponseTimeout) {
		return true
	}

	return false
}

// SetResponseTimeout gets a reference to the given int64 and assigns it to the ResponseTimeout field.
func (o *CertificateAuthservice) SetResponseTimeout(v int64) {
	o.ResponseTimeout = &v
}

// GetTrustModel returns the TrustModel field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetTrustModel() string {
	if o == nil || IsNil(o.TrustModel) {
		var ret string
		return ret
	}
	return *o.TrustModel
}

// GetTrustModelOk returns a tuple with the TrustModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetTrustModelOk() (*string, bool) {
	if o == nil || IsNil(o.TrustModel) {
		return nil, false
	}
	return o.TrustModel, true
}

// HasTrustModel returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasTrustModel() bool {
	if o != nil && !IsNil(o.TrustModel) {
		return true
	}

	return false
}

// SetTrustModel gets a reference to the given string and assigns it to the TrustModel field.
func (o *CertificateAuthservice) SetTrustModel(v string) {
	o.TrustModel = &v
}

// GetUserMatchType returns the UserMatchType field value if set, zero value otherwise.
func (o *CertificateAuthservice) GetUserMatchType() string {
	if o == nil || IsNil(o.UserMatchType) {
		var ret string
		return ret
	}
	return *o.UserMatchType
}

// GetUserMatchTypeOk returns a tuple with the UserMatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthservice) GetUserMatchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserMatchType) {
		return nil, false
	}
	return o.UserMatchType, true
}

// HasUserMatchType returns a boolean if a field has been set.
func (o *CertificateAuthservice) HasUserMatchType() bool {
	if o != nil && !IsNil(o.UserMatchType) {
		return true
	}

	return false
}

// SetUserMatchType gets a reference to the given string and assigns it to the UserMatchType field.
func (o *CertificateAuthservice) SetUserMatchType(v string) {
	o.UserMatchType = &v
}

func (o CertificateAuthservice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateAuthservice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AutoPopulateLogin) {
		toSerialize["auto_populate_login"] = o.AutoPopulateLogin
	}
	if !IsNil(o.CaCertificates) {
		toSerialize["ca_certificates"] = o.CaCertificates
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.EnablePasswordRequest) {
		toSerialize["enable_password_request"] = o.EnablePasswordRequest
	}
	if !IsNil(o.EnableRemoteLookup) {
		toSerialize["enable_remote_lookup"] = o.EnableRemoteLookup
	}
	if !IsNil(o.MaxRetries) {
		toSerialize["max_retries"] = o.MaxRetries
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OcspCheck) {
		toSerialize["ocsp_check"] = o.OcspCheck
	}
	if !IsNil(o.OcspResponders) {
		toSerialize["ocsp_responders"] = o.OcspResponders
	}
	if !IsNil(o.RecoveryInterval) {
		toSerialize["recovery_interval"] = o.RecoveryInterval
	}
	if !IsNil(o.RemoteLookupPassword) {
		toSerialize["remote_lookup_password"] = o.RemoteLookupPassword
	}
	if !IsNil(o.RemoteLookupService) {
		toSerialize["remote_lookup_service"] = o.RemoteLookupService
	}
	if !IsNil(o.RemoteLookupUsername) {
		toSerialize["remote_lookup_username"] = o.RemoteLookupUsername
	}
	if !IsNil(o.ResponseTimeout) {
		toSerialize["response_timeout"] = o.ResponseTimeout
	}
	if !IsNil(o.TrustModel) {
		toSerialize["trust_model"] = o.TrustModel
	}
	if !IsNil(o.UserMatchType) {
		toSerialize["user_match_type"] = o.UserMatchType
	}
	return toSerialize, nil
}

type NullableCertificateAuthservice struct {
	value *CertificateAuthservice
	isSet bool
}

func (v NullableCertificateAuthservice) Get() *CertificateAuthservice {
	return v.value
}

func (v *NullableCertificateAuthservice) Set(val *CertificateAuthservice) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateAuthservice) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateAuthservice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateAuthservice(val *CertificateAuthservice) *NullableCertificateAuthservice {
	return &NullableCertificateAuthservice{value: val, isSet: true}
}

func (v NullableCertificateAuthservice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateAuthservice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
