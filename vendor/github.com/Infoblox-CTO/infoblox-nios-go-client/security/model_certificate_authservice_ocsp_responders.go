/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the CertificateAuthserviceOcspResponders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateAuthserviceOcspResponders{}

// CertificateAuthserviceOcspResponders struct for CertificateAuthserviceOcspResponders
type CertificateAuthserviceOcspResponders struct {
	// The FQDN (Fully Qualified Domain Name) or IP address of the server.
	FqdnOrIp *string `json:"fqdn_or_ip,omitempty"`
	// The port used for connecting.
	Port *int64 `json:"port,omitempty"`
	// The descriptive comment for the OCSP authentication responder.
	Comment *string `json:"comment,omitempty"`
	// Determines if this OCSP authentication responder is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// The reference to the OCSP responder certificate.
	Certificate *string `json:"certificate,omitempty"`
	// The token returned by the uploadinit function call in object fileop.
	CertificateToken     *string `json:"certificate_token,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateAuthserviceOcspResponders CertificateAuthserviceOcspResponders

// NewCertificateAuthserviceOcspResponders instantiates a new CertificateAuthserviceOcspResponders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateAuthserviceOcspResponders() *CertificateAuthserviceOcspResponders {
	this := CertificateAuthserviceOcspResponders{}
	return &this
}

// NewCertificateAuthserviceOcspRespondersWithDefaults instantiates a new CertificateAuthserviceOcspResponders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateAuthserviceOcspRespondersWithDefaults() *CertificateAuthserviceOcspResponders {
	this := CertificateAuthserviceOcspResponders{}
	return &this
}

// GetFqdnOrIp returns the FqdnOrIp field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetFqdnOrIp() string {
	if o == nil || IsNil(o.FqdnOrIp) {
		var ret string
		return ret
	}
	return *o.FqdnOrIp
}

// GetFqdnOrIpOk returns a tuple with the FqdnOrIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetFqdnOrIpOk() (*string, bool) {
	if o == nil || IsNil(o.FqdnOrIp) {
		return nil, false
	}
	return o.FqdnOrIp, true
}

// HasFqdnOrIp returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasFqdnOrIp() bool {
	if o != nil && !IsNil(o.FqdnOrIp) {
		return true
	}

	return false
}

// SetFqdnOrIp gets a reference to the given string and assigns it to the FqdnOrIp field.
func (o *CertificateAuthserviceOcspResponders) SetFqdnOrIp(v string) {
	o.FqdnOrIp = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *CertificateAuthserviceOcspResponders) SetPort(v int64) {
	o.Port = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CertificateAuthserviceOcspResponders) SetComment(v string) {
	o.Comment = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *CertificateAuthserviceOcspResponders) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateAuthserviceOcspResponders) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateToken returns the CertificateToken field value if set, zero value otherwise.
func (o *CertificateAuthserviceOcspResponders) GetCertificateToken() string {
	if o == nil || IsNil(o.CertificateToken) {
		var ret string
		return ret
	}
	return *o.CertificateToken
}

// GetCertificateTokenOk returns a tuple with the CertificateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAuthserviceOcspResponders) GetCertificateTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateToken) {
		return nil, false
	}
	return o.CertificateToken, true
}

// HasCertificateToken returns a boolean if a field has been set.
func (o *CertificateAuthserviceOcspResponders) HasCertificateToken() bool {
	if o != nil && !IsNil(o.CertificateToken) {
		return true
	}

	return false
}

// SetCertificateToken gets a reference to the given string and assigns it to the CertificateToken field.
func (o *CertificateAuthserviceOcspResponders) SetCertificateToken(v string) {
	o.CertificateToken = &v
}

func (o CertificateAuthserviceOcspResponders) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateAuthserviceOcspResponders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FqdnOrIp) {
		toSerialize["fqdn_or_ip"] = o.FqdnOrIp
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateToken) {
		toSerialize["certificate_token"] = o.CertificateToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateAuthserviceOcspResponders) UnmarshalJSON(data []byte) (err error) {
	varCertificateAuthserviceOcspResponders := _CertificateAuthserviceOcspResponders{}

	err = json.Unmarshal(data, &varCertificateAuthserviceOcspResponders)

	if err != nil {
		return err
	}

	*o = CertificateAuthserviceOcspResponders(varCertificateAuthserviceOcspResponders)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fqdn_or_ip")
		delete(additionalProperties, "port")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "certificate_token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateAuthserviceOcspResponders struct {
	value *CertificateAuthserviceOcspResponders
	isSet bool
}

func (v NullableCertificateAuthserviceOcspResponders) Get() *CertificateAuthserviceOcspResponders {
	return v.value
}

func (v *NullableCertificateAuthserviceOcspResponders) Set(val *CertificateAuthserviceOcspResponders) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateAuthserviceOcspResponders) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateAuthserviceOcspResponders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateAuthserviceOcspResponders(val *CertificateAuthserviceOcspResponders) *NullableCertificateAuthserviceOcspResponders {
	return &NullableCertificateAuthserviceOcspResponders{value: val, isSet: true}
}

func (v NullableCertificateAuthserviceOcspResponders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateAuthserviceOcspResponders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
