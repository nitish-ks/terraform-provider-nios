/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// CreateAuthpolicyResponse - struct for CreateAuthpolicyResponse
type CreateAuthpolicyResponse struct {
	CreateAuthpolicyResponseAsObject *CreateAuthpolicyResponseAsObject
	String                           *string
}

// CreateAuthpolicyResponseAsObjectAsCreateAuthpolicyResponse is a convenience function that returns CreateAuthpolicyResponseAsObject wrapped in CreateAuthpolicyResponse
func CreateAuthpolicyResponseAsObjectAsCreateAuthpolicyResponse(v *CreateAuthpolicyResponseAsObject) CreateAuthpolicyResponse {
	return CreateAuthpolicyResponse{
		CreateAuthpolicyResponseAsObject: v,
	}
}

// stringAsCreateAuthpolicyResponse is a convenience function that returns string wrapped in CreateAuthpolicyResponse
func StringAsCreateAuthpolicyResponse(v *string) CreateAuthpolicyResponse {
	return CreateAuthpolicyResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAuthpolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateAuthpolicyResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateAuthpolicyResponseAsObject)
	if err == nil {
		jsonCreateAuthpolicyResponseAsObject, _ := json.Marshal(dst.CreateAuthpolicyResponseAsObject)
		if string(jsonCreateAuthpolicyResponseAsObject) == "{}" { // empty struct
			dst.CreateAuthpolicyResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateAuthpolicyResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateAuthpolicyResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateAuthpolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateAuthpolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAuthpolicyResponse) MarshalJSON() ([]byte, error) {
	if src.CreateAuthpolicyResponseAsObject != nil {
		return json.Marshal(&src.CreateAuthpolicyResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAuthpolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateAuthpolicyResponseAsObject != nil {
		return obj.CreateAuthpolicyResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateAuthpolicyResponse struct {
	value *CreateAuthpolicyResponse
	isSet bool
}

func (v NullableCreateAuthpolicyResponse) Get() *CreateAuthpolicyResponse {
	return v.value
}

func (v *NullableCreateAuthpolicyResponse) Set(val *CreateAuthpolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAuthpolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAuthpolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAuthpolicyResponse(val *CreateAuthpolicyResponse) *NullableCreateAuthpolicyResponse {
	return &NullableCreateAuthpolicyResponse{value: val, isSet: true}
}

func (v NullableCreateAuthpolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAuthpolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
