/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// CreateSamlAuthserviceResponse - struct for CreateSamlAuthserviceResponse
type CreateSamlAuthserviceResponse struct {
	CreateSamlAuthserviceResponseAsObject *CreateSamlAuthserviceResponseAsObject
	String                                *string
}

// CreateSamlAuthserviceResponseAsObjectAsCreateSamlAuthserviceResponse is a convenience function that returns CreateSamlAuthserviceResponseAsObject wrapped in CreateSamlAuthserviceResponse
func CreateSamlAuthserviceResponseAsObjectAsCreateSamlAuthserviceResponse(v *CreateSamlAuthserviceResponseAsObject) CreateSamlAuthserviceResponse {
	return CreateSamlAuthserviceResponse{
		CreateSamlAuthserviceResponseAsObject: v,
	}
}

// stringAsCreateSamlAuthserviceResponse is a convenience function that returns string wrapped in CreateSamlAuthserviceResponse
func StringAsCreateSamlAuthserviceResponse(v *string) CreateSamlAuthserviceResponse {
	return CreateSamlAuthserviceResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSamlAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateSamlAuthserviceResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateSamlAuthserviceResponseAsObject)
	if err == nil {
		jsonCreateSamlAuthserviceResponseAsObject, _ := json.Marshal(dst.CreateSamlAuthserviceResponseAsObject)
		if string(jsonCreateSamlAuthserviceResponseAsObject) == "{}" { // empty struct
			dst.CreateSamlAuthserviceResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateSamlAuthserviceResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateSamlAuthserviceResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateSamlAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateSamlAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSamlAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.CreateSamlAuthserviceResponseAsObject != nil {
		return json.Marshal(&src.CreateSamlAuthserviceResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSamlAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateSamlAuthserviceResponseAsObject != nil {
		return obj.CreateSamlAuthserviceResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateSamlAuthserviceResponse struct {
	value *CreateSamlAuthserviceResponse
	isSet bool
}

func (v NullableCreateSamlAuthserviceResponse) Get() *CreateSamlAuthserviceResponse {
	return v.value
}

func (v *NullableCreateSamlAuthserviceResponse) Set(val *CreateSamlAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSamlAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSamlAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSamlAuthserviceResponse(val *CreateSamlAuthserviceResponse) *NullableCreateSamlAuthserviceResponse {
	return &NullableCreateSamlAuthserviceResponse{value: val, isSet: true}
}

func (v NullableCreateSamlAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSamlAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
