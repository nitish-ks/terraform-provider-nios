/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// CreateSnmpuserResponse - struct for CreateSnmpuserResponse
type CreateSnmpuserResponse struct {
	CreateSnmpuserResponseAsObject *CreateSnmpuserResponseAsObject
	String                         *string
}

// CreateSnmpuserResponseAsObjectAsCreateSnmpuserResponse is a convenience function that returns CreateSnmpuserResponseAsObject wrapped in CreateSnmpuserResponse
func CreateSnmpuserResponseAsObjectAsCreateSnmpuserResponse(v *CreateSnmpuserResponseAsObject) CreateSnmpuserResponse {
	return CreateSnmpuserResponse{
		CreateSnmpuserResponseAsObject: v,
	}
}

// stringAsCreateSnmpuserResponse is a convenience function that returns string wrapped in CreateSnmpuserResponse
func StringAsCreateSnmpuserResponse(v *string) CreateSnmpuserResponse {
	return CreateSnmpuserResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSnmpuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateSnmpuserResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateSnmpuserResponseAsObject)
	if err == nil {
		jsonCreateSnmpuserResponseAsObject, _ := json.Marshal(dst.CreateSnmpuserResponseAsObject)
		if string(jsonCreateSnmpuserResponseAsObject) == "{}" { // empty struct
			dst.CreateSnmpuserResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateSnmpuserResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateSnmpuserResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateSnmpuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateSnmpuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSnmpuserResponse) MarshalJSON() ([]byte, error) {
	if src.CreateSnmpuserResponseAsObject != nil {
		return json.Marshal(&src.CreateSnmpuserResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSnmpuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateSnmpuserResponseAsObject != nil {
		return obj.CreateSnmpuserResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateSnmpuserResponse struct {
	value *CreateSnmpuserResponse
	isSet bool
}

func (v NullableCreateSnmpuserResponse) Get() *CreateSnmpuserResponse {
	return v.value
}

func (v *NullableCreateSnmpuserResponse) Set(val *CreateSnmpuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSnmpuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSnmpuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSnmpuserResponse(val *CreateSnmpuserResponse) *NullableCreateSnmpuserResponse {
	return &NullableCreateSnmpuserResponse{value: val, isSet: true}
}

func (v NullableCreateSnmpuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSnmpuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
