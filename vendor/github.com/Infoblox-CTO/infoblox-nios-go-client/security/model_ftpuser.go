/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Ftpuser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ftpuser{}

// Ftpuser struct for Ftpuser
type Ftpuser struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines whether to create the home directory with the user name or to use the existing directory as the home directory.
	CreateHomeDir *bool `json:"create_home_dir,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	Extattrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The absolute path of the FTP user's home directory.
	HomeDir *string `json:"home_dir,omitempty"`
	// The FTP user password.
	Password *string `json:"password,omitempty"`
	// The FTP user permission.
	Permission *string `json:"permission,omitempty"`
	// The FTP user name.
	Username *string `json:"username,omitempty"`
}

// NewFtpuser instantiates a new Ftpuser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFtpuser() *Ftpuser {
	this := Ftpuser{}
	return &this
}

// NewFtpuserWithDefaults instantiates a new Ftpuser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFtpuserWithDefaults() *Ftpuser {
	this := Ftpuser{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ftpuser) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ftpuser) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ftpuser) SetRef(v string) {
	o.Ref = &v
}

// GetCreateHomeDir returns the CreateHomeDir field value if set, zero value otherwise.
func (o *Ftpuser) GetCreateHomeDir() bool {
	if o == nil || IsNil(o.CreateHomeDir) {
		var ret bool
		return ret
	}
	return *o.CreateHomeDir
}

// GetCreateHomeDirOk returns a tuple with the CreateHomeDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetCreateHomeDirOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateHomeDir) {
		return nil, false
	}
	return o.CreateHomeDir, true
}

// HasCreateHomeDir returns a boolean if a field has been set.
func (o *Ftpuser) HasCreateHomeDir() bool {
	if o != nil && !IsNil(o.CreateHomeDir) {
		return true
	}

	return false
}

// SetCreateHomeDir gets a reference to the given bool and assigns it to the CreateHomeDir field.
func (o *Ftpuser) SetCreateHomeDir(v bool) {
	o.CreateHomeDir = &v
}

// GetExtattrs returns the Extattrs field value if set, zero value otherwise.
func (o *Ftpuser) GetExtattrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.Extattrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.Extattrs
}

// GetExtattrsOk returns a tuple with the Extattrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetExtattrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.Extattrs) {
		return nil, false
	}
	return o.Extattrs, true
}

// HasExtattrs returns a boolean if a field has been set.
func (o *Ftpuser) HasExtattrs() bool {
	if o != nil && !IsNil(o.Extattrs) {
		return true
	}

	return false
}

// SetExtattrs gets a reference to the given map[string]ExtAttrs and assigns it to the Extattrs field.
func (o *Ftpuser) SetExtattrs(v map[string]ExtAttrs) {
	o.Extattrs = &v
}

// GetHomeDir returns the HomeDir field value if set, zero value otherwise.
func (o *Ftpuser) GetHomeDir() string {
	if o == nil || IsNil(o.HomeDir) {
		var ret string
		return ret
	}
	return *o.HomeDir
}

// GetHomeDirOk returns a tuple with the HomeDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetHomeDirOk() (*string, bool) {
	if o == nil || IsNil(o.HomeDir) {
		return nil, false
	}
	return o.HomeDir, true
}

// HasHomeDir returns a boolean if a field has been set.
func (o *Ftpuser) HasHomeDir() bool {
	if o != nil && !IsNil(o.HomeDir) {
		return true
	}

	return false
}

// SetHomeDir gets a reference to the given string and assigns it to the HomeDir field.
func (o *Ftpuser) SetHomeDir(v string) {
	o.HomeDir = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Ftpuser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Ftpuser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Ftpuser) SetPassword(v string) {
	o.Password = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *Ftpuser) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *Ftpuser) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *Ftpuser) SetPermission(v string) {
	o.Permission = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Ftpuser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ftpuser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Ftpuser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Ftpuser) SetUsername(v string) {
	o.Username = &v
}

func (o Ftpuser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ftpuser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CreateHomeDir) {
		toSerialize["create_home_dir"] = o.CreateHomeDir
	}
	if !IsNil(o.Extattrs) {
		toSerialize["extattrs"] = o.Extattrs
	}
	if !IsNil(o.HomeDir) {
		toSerialize["home_dir"] = o.HomeDir
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableFtpuser struct {
	value *Ftpuser
	isSet bool
}

func (v NullableFtpuser) Get() *Ftpuser {
	return v.value
}

func (v *NullableFtpuser) Set(val *Ftpuser) {
	v.value = val
	v.isSet = true
}

func (v NullableFtpuser) IsSet() bool {
	return v.isSet
}

func (v *NullableFtpuser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFtpuser(val *Ftpuser) *NullableFtpuser {
	return &NullableFtpuser{value: val, isSet: true}
}

func (v NullableFtpuser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFtpuser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
