/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetAdAuthServiceResponse - struct for GetAdAuthServiceResponse
type GetAdAuthServiceResponse struct {
	AdAuthService                          *AdAuthService
	GetAdAuthServiceResponseObjectAsResult *GetAdAuthServiceResponseObjectAsResult
}

// AdAuthServiceAsGetAdAuthServiceResponse is a convenience function that returns AdAuthService wrapped in GetAdAuthServiceResponse
func AdAuthServiceAsGetAdAuthServiceResponse(v *AdAuthService) GetAdAuthServiceResponse {
	return GetAdAuthServiceResponse{
		AdAuthService: v,
	}
}

// GetAdAuthServiceResponseObjectAsResultAsGetAdAuthServiceResponse is a convenience function that returns GetAdAuthServiceResponseObjectAsResult wrapped in GetAdAuthServiceResponse
func GetAdAuthServiceResponseObjectAsResultAsGetAdAuthServiceResponse(v *GetAdAuthServiceResponseObjectAsResult) GetAdAuthServiceResponse {
	return GetAdAuthServiceResponse{
		GetAdAuthServiceResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAdAuthServiceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AdAuthService
	err = newStrictDecoder(data).Decode(&dst.AdAuthService)
	if err == nil {
		jsonAdAuthService, _ := json.Marshal(dst.AdAuthService)
		if string(jsonAdAuthService) == "{}" { // empty struct
			dst.AdAuthService = nil
		} else {
			match++
		}
	} else {
		dst.AdAuthService = nil
	}

	// try to unmarshal data into GetAdAuthServiceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAdAuthServiceResponseObjectAsResult)
	if err == nil {
		jsonGetAdAuthServiceResponseObjectAsResult, _ := json.Marshal(dst.GetAdAuthServiceResponseObjectAsResult)
		if string(jsonGetAdAuthServiceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAdAuthServiceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAdAuthServiceResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AdAuthService = nil
		dst.GetAdAuthServiceResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAdAuthServiceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAdAuthServiceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAdAuthServiceResponse) MarshalJSON() ([]byte, error) {
	if src.AdAuthService != nil {
		return json.Marshal(&src.AdAuthService)
	}

	if src.GetAdAuthServiceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAdAuthServiceResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAdAuthServiceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AdAuthService != nil {
		return obj.AdAuthService
	}

	if obj.GetAdAuthServiceResponseObjectAsResult != nil {
		return obj.GetAdAuthServiceResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAdAuthServiceResponse struct {
	value *GetAdAuthServiceResponse
	isSet bool
}

func (v NullableGetAdAuthServiceResponse) Get() *GetAdAuthServiceResponse {
	return v.value
}

func (v *NullableGetAdAuthServiceResponse) Set(val *GetAdAuthServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAdAuthServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAdAuthServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAdAuthServiceResponse(val *GetAdAuthServiceResponse) *NullableGetAdAuthServiceResponse {
	return &NullableGetAdAuthServiceResponse{value: val, isSet: true}
}

func (v NullableGetAdAuthServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAdAuthServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
