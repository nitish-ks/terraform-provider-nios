/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetAdmingroupResponse - struct for GetAdmingroupResponse
type GetAdmingroupResponse struct {
	Admingroup                          *Admingroup
	GetAdmingroupResponseObjectAsResult *GetAdmingroupResponseObjectAsResult
}

// AdmingroupAsGetAdmingroupResponse is a convenience function that returns Admingroup wrapped in GetAdmingroupResponse
func AdmingroupAsGetAdmingroupResponse(v *Admingroup) GetAdmingroupResponse {
	return GetAdmingroupResponse{
		Admingroup: v,
	}
}

// GetAdmingroupResponseObjectAsResultAsGetAdmingroupResponse is a convenience function that returns GetAdmingroupResponseObjectAsResult wrapped in GetAdmingroupResponse
func GetAdmingroupResponseObjectAsResultAsGetAdmingroupResponse(v *GetAdmingroupResponseObjectAsResult) GetAdmingroupResponse {
	return GetAdmingroupResponse{
		GetAdmingroupResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAdmingroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Admingroup
	err = newStrictDecoder(data).Decode(&dst.Admingroup)
	if err == nil {
		jsonAdmingroup, _ := json.Marshal(dst.Admingroup)
		if string(jsonAdmingroup) == "{}" { // empty struct
			dst.Admingroup = nil
		} else {
			match++
		}
	} else {
		dst.Admingroup = nil
	}

	// try to unmarshal data into GetAdmingroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAdmingroupResponseObjectAsResult)
	if err == nil {
		jsonGetAdmingroupResponseObjectAsResult, _ := json.Marshal(dst.GetAdmingroupResponseObjectAsResult)
		if string(jsonGetAdmingroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAdmingroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAdmingroupResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Admingroup = nil
		dst.GetAdmingroupResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAdmingroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAdmingroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAdmingroupResponse) MarshalJSON() ([]byte, error) {
	if src.Admingroup != nil {
		return json.Marshal(&src.Admingroup)
	}

	if src.GetAdmingroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAdmingroupResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAdmingroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Admingroup != nil {
		return obj.Admingroup
	}

	if obj.GetAdmingroupResponseObjectAsResult != nil {
		return obj.GetAdmingroupResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAdmingroupResponse struct {
	value *GetAdmingroupResponse
	isSet bool
}

func (v NullableGetAdmingroupResponse) Get() *GetAdmingroupResponse {
	return v.value
}

func (v *NullableGetAdmingroupResponse) Set(val *GetAdmingroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAdmingroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAdmingroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAdmingroupResponse(val *GetAdmingroupResponse) *NullableGetAdmingroupResponse {
	return &NullableGetAdmingroupResponse{value: val, isSet: true}
}

func (v NullableGetAdmingroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAdmingroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
