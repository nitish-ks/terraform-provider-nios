/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetAdminroleResponse - struct for GetAdminroleResponse
type GetAdminroleResponse struct {
	Adminrole                          *Adminrole
	GetAdminroleResponseObjectAsResult *GetAdminroleResponseObjectAsResult
}

// AdminroleAsGetAdminroleResponse is a convenience function that returns Adminrole wrapped in GetAdminroleResponse
func AdminroleAsGetAdminroleResponse(v *Adminrole) GetAdminroleResponse {
	return GetAdminroleResponse{
		Adminrole: v,
	}
}

// GetAdminroleResponseObjectAsResultAsGetAdminroleResponse is a convenience function that returns GetAdminroleResponseObjectAsResult wrapped in GetAdminroleResponse
func GetAdminroleResponseObjectAsResultAsGetAdminroleResponse(v *GetAdminroleResponseObjectAsResult) GetAdminroleResponse {
	return GetAdminroleResponse{
		GetAdminroleResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAdminroleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Adminrole
	err = newStrictDecoder(data).Decode(&dst.Adminrole)
	if err == nil {
		jsonAdminrole, _ := json.Marshal(dst.Adminrole)
		if string(jsonAdminrole) == "{}" { // empty struct
			dst.Adminrole = nil
		} else {
			match++
		}
	} else {
		dst.Adminrole = nil
	}

	// try to unmarshal data into GetAdminroleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAdminroleResponseObjectAsResult)
	if err == nil {
		jsonGetAdminroleResponseObjectAsResult, _ := json.Marshal(dst.GetAdminroleResponseObjectAsResult)
		if string(jsonGetAdminroleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAdminroleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAdminroleResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Adminrole = nil
		dst.GetAdminroleResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAdminroleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAdminroleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAdminroleResponse) MarshalJSON() ([]byte, error) {
	if src.Adminrole != nil {
		return json.Marshal(&src.Adminrole)
	}

	if src.GetAdminroleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAdminroleResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAdminroleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Adminrole != nil {
		return obj.Adminrole
	}

	if obj.GetAdminroleResponseObjectAsResult != nil {
		return obj.GetAdminroleResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAdminroleResponse struct {
	value *GetAdminroleResponse
	isSet bool
}

func (v NullableGetAdminroleResponse) Get() *GetAdminroleResponse {
	return v.value
}

func (v *NullableGetAdminroleResponse) Set(val *GetAdminroleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAdminroleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAdminroleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAdminroleResponse(val *GetAdminroleResponse) *NullableGetAdminroleResponse {
	return &NullableGetAdminroleResponse{value: val, isSet: true}
}

func (v NullableGetAdminroleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAdminroleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
