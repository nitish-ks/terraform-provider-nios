/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetAuthpolicyResponse - struct for GetAuthpolicyResponse
type GetAuthpolicyResponse struct {
	Authpolicy                          *Authpolicy
	GetAuthpolicyResponseObjectAsResult *GetAuthpolicyResponseObjectAsResult
}

// AuthpolicyAsGetAuthpolicyResponse is a convenience function that returns Authpolicy wrapped in GetAuthpolicyResponse
func AuthpolicyAsGetAuthpolicyResponse(v *Authpolicy) GetAuthpolicyResponse {
	return GetAuthpolicyResponse{
		Authpolicy: v,
	}
}

// GetAuthpolicyResponseObjectAsResultAsGetAuthpolicyResponse is a convenience function that returns GetAuthpolicyResponseObjectAsResult wrapped in GetAuthpolicyResponse
func GetAuthpolicyResponseObjectAsResultAsGetAuthpolicyResponse(v *GetAuthpolicyResponseObjectAsResult) GetAuthpolicyResponse {
	return GetAuthpolicyResponse{
		GetAuthpolicyResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAuthpolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Authpolicy
	err = newStrictDecoder(data).Decode(&dst.Authpolicy)
	if err == nil {
		jsonAuthpolicy, _ := json.Marshal(dst.Authpolicy)
		if string(jsonAuthpolicy) == "{}" { // empty struct
			dst.Authpolicy = nil
		} else {
			match++
		}
	} else {
		dst.Authpolicy = nil
	}

	// try to unmarshal data into GetAuthpolicyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAuthpolicyResponseObjectAsResult)
	if err == nil {
		jsonGetAuthpolicyResponseObjectAsResult, _ := json.Marshal(dst.GetAuthpolicyResponseObjectAsResult)
		if string(jsonGetAuthpolicyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAuthpolicyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAuthpolicyResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Authpolicy = nil
		dst.GetAuthpolicyResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAuthpolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAuthpolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAuthpolicyResponse) MarshalJSON() ([]byte, error) {
	if src.Authpolicy != nil {
		return json.Marshal(&src.Authpolicy)
	}

	if src.GetAuthpolicyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAuthpolicyResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAuthpolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Authpolicy != nil {
		return obj.Authpolicy
	}

	if obj.GetAuthpolicyResponseObjectAsResult != nil {
		return obj.GetAuthpolicyResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAuthpolicyResponse struct {
	value *GetAuthpolicyResponse
	isSet bool
}

func (v NullableGetAuthpolicyResponse) Get() *GetAuthpolicyResponse {
	return v.value
}

func (v *NullableGetAuthpolicyResponse) Set(val *GetAuthpolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAuthpolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAuthpolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAuthpolicyResponse(val *GetAuthpolicyResponse) *NullableGetAuthpolicyResponse {
	return &NullableGetAuthpolicyResponse{value: val, isSet: true}
}

func (v NullableGetAuthpolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAuthpolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
