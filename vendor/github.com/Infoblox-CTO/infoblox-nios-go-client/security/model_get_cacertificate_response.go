/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetCacertificateResponse - struct for GetCacertificateResponse
type GetCacertificateResponse struct {
	Cacertificate                          *Cacertificate
	GetCacertificateResponseObjectAsResult *GetCacertificateResponseObjectAsResult
}

// CacertificateAsGetCacertificateResponse is a convenience function that returns Cacertificate wrapped in GetCacertificateResponse
func CacertificateAsGetCacertificateResponse(v *Cacertificate) GetCacertificateResponse {
	return GetCacertificateResponse{
		Cacertificate: v,
	}
}

// GetCacertificateResponseObjectAsResultAsGetCacertificateResponse is a convenience function that returns GetCacertificateResponseObjectAsResult wrapped in GetCacertificateResponse
func GetCacertificateResponseObjectAsResultAsGetCacertificateResponse(v *GetCacertificateResponseObjectAsResult) GetCacertificateResponse {
	return GetCacertificateResponse{
		GetCacertificateResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCacertificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Cacertificate
	err = newStrictDecoder(data).Decode(&dst.Cacertificate)
	if err == nil {
		jsonCacertificate, _ := json.Marshal(dst.Cacertificate)
		if string(jsonCacertificate) == "{}" { // empty struct
			dst.Cacertificate = nil
		} else {
			match++
		}
	} else {
		dst.Cacertificate = nil
	}

	// try to unmarshal data into GetCacertificateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetCacertificateResponseObjectAsResult)
	if err == nil {
		jsonGetCacertificateResponseObjectAsResult, _ := json.Marshal(dst.GetCacertificateResponseObjectAsResult)
		if string(jsonGetCacertificateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetCacertificateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetCacertificateResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Cacertificate = nil
		dst.GetCacertificateResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetCacertificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetCacertificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCacertificateResponse) MarshalJSON() ([]byte, error) {
	if src.Cacertificate != nil {
		return json.Marshal(&src.Cacertificate)
	}

	if src.GetCacertificateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetCacertificateResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCacertificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Cacertificate != nil {
		return obj.Cacertificate
	}

	if obj.GetCacertificateResponseObjectAsResult != nil {
		return obj.GetCacertificateResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetCacertificateResponse struct {
	value *GetCacertificateResponse
	isSet bool
}

func (v NullableGetCacertificateResponse) Get() *GetCacertificateResponse {
	return v.value
}

func (v *NullableGetCacertificateResponse) Set(val *GetCacertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCacertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCacertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCacertificateResponse(val *GetCacertificateResponse) *NullableGetCacertificateResponse {
	return &NullableGetCacertificateResponse{value: val, isSet: true}
}

func (v NullableGetCacertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCacertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
