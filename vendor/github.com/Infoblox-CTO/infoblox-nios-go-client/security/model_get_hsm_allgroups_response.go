/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetHsmAllgroupsResponse - struct for GetHsmAllgroupsResponse
type GetHsmAllgroupsResponse struct {
	GetHsmAllgroupsResponseObjectAsResult *GetHsmAllgroupsResponseObjectAsResult
	HsmAllgroups                          *HsmAllgroups
}

// GetHsmAllgroupsResponseObjectAsResultAsGetHsmAllgroupsResponse is a convenience function that returns GetHsmAllgroupsResponseObjectAsResult wrapped in GetHsmAllgroupsResponse
func GetHsmAllgroupsResponseObjectAsResultAsGetHsmAllgroupsResponse(v *GetHsmAllgroupsResponseObjectAsResult) GetHsmAllgroupsResponse {
	return GetHsmAllgroupsResponse{
		GetHsmAllgroupsResponseObjectAsResult: v,
	}
}

// HsmAllgroupsAsGetHsmAllgroupsResponse is a convenience function that returns HsmAllgroups wrapped in GetHsmAllgroupsResponse
func HsmAllgroupsAsGetHsmAllgroupsResponse(v *HsmAllgroups) GetHsmAllgroupsResponse {
	return GetHsmAllgroupsResponse{
		HsmAllgroups: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetHsmAllgroupsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetHsmAllgroupsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetHsmAllgroupsResponseObjectAsResult)
	if err == nil {
		jsonGetHsmAllgroupsResponseObjectAsResult, _ := json.Marshal(dst.GetHsmAllgroupsResponseObjectAsResult)
		if string(jsonGetHsmAllgroupsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetHsmAllgroupsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetHsmAllgroupsResponseObjectAsResult = nil
	}

	// try to unmarshal data into HsmAllgroups
	err = newStrictDecoder(data).Decode(&dst.HsmAllgroups)
	if err == nil {
		jsonHsmAllgroups, _ := json.Marshal(dst.HsmAllgroups)
		if string(jsonHsmAllgroups) == "{}" { // empty struct
			dst.HsmAllgroups = nil
		} else {
			match++
		}
	} else {
		dst.HsmAllgroups = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetHsmAllgroupsResponseObjectAsResult = nil
		dst.HsmAllgroups = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetHsmAllgroupsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetHsmAllgroupsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetHsmAllgroupsResponse) MarshalJSON() ([]byte, error) {
	if src.GetHsmAllgroupsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetHsmAllgroupsResponseObjectAsResult)
	}

	if src.HsmAllgroups != nil {
		return json.Marshal(&src.HsmAllgroups)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetHsmAllgroupsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetHsmAllgroupsResponseObjectAsResult != nil {
		return obj.GetHsmAllgroupsResponseObjectAsResult
	}

	if obj.HsmAllgroups != nil {
		return obj.HsmAllgroups
	}

	// all schemas are nil
	return nil
}

type NullableGetHsmAllgroupsResponse struct {
	value *GetHsmAllgroupsResponse
	isSet bool
}

func (v NullableGetHsmAllgroupsResponse) Get() *GetHsmAllgroupsResponse {
	return v.value
}

func (v *NullableGetHsmAllgroupsResponse) Set(val *GetHsmAllgroupsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHsmAllgroupsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHsmAllgroupsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHsmAllgroupsResponse(val *GetHsmAllgroupsResponse) *NullableGetHsmAllgroupsResponse {
	return &NullableGetHsmAllgroupsResponse{value: val, isSet: true}
}

func (v NullableGetHsmAllgroupsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHsmAllgroupsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
