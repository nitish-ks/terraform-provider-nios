/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetLocaluserAuthserviceResponse - struct for GetLocaluserAuthserviceResponse
type GetLocaluserAuthserviceResponse struct {
	GetLocaluserAuthserviceResponseObjectAsResult *GetLocaluserAuthserviceResponseObjectAsResult
	LocaluserAuthservice                          *LocaluserAuthservice
}

// GetLocaluserAuthserviceResponseObjectAsResultAsGetLocaluserAuthserviceResponse is a convenience function that returns GetLocaluserAuthserviceResponseObjectAsResult wrapped in GetLocaluserAuthserviceResponse
func GetLocaluserAuthserviceResponseObjectAsResultAsGetLocaluserAuthserviceResponse(v *GetLocaluserAuthserviceResponseObjectAsResult) GetLocaluserAuthserviceResponse {
	return GetLocaluserAuthserviceResponse{
		GetLocaluserAuthserviceResponseObjectAsResult: v,
	}
}

// LocaluserAuthserviceAsGetLocaluserAuthserviceResponse is a convenience function that returns LocaluserAuthservice wrapped in GetLocaluserAuthserviceResponse
func LocaluserAuthserviceAsGetLocaluserAuthserviceResponse(v *LocaluserAuthservice) GetLocaluserAuthserviceResponse {
	return GetLocaluserAuthserviceResponse{
		LocaluserAuthservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLocaluserAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetLocaluserAuthserviceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetLocaluserAuthserviceResponseObjectAsResult)
	if err == nil {
		jsonGetLocaluserAuthserviceResponseObjectAsResult, _ := json.Marshal(dst.GetLocaluserAuthserviceResponseObjectAsResult)
		if string(jsonGetLocaluserAuthserviceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetLocaluserAuthserviceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetLocaluserAuthserviceResponseObjectAsResult = nil
	}

	// try to unmarshal data into LocaluserAuthservice
	err = newStrictDecoder(data).Decode(&dst.LocaluserAuthservice)
	if err == nil {
		jsonLocaluserAuthservice, _ := json.Marshal(dst.LocaluserAuthservice)
		if string(jsonLocaluserAuthservice) == "{}" { // empty struct
			dst.LocaluserAuthservice = nil
		} else {
			match++
		}
	} else {
		dst.LocaluserAuthservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetLocaluserAuthserviceResponseObjectAsResult = nil
		dst.LocaluserAuthservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetLocaluserAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetLocaluserAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLocaluserAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.GetLocaluserAuthserviceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetLocaluserAuthserviceResponseObjectAsResult)
	}

	if src.LocaluserAuthservice != nil {
		return json.Marshal(&src.LocaluserAuthservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLocaluserAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetLocaluserAuthserviceResponseObjectAsResult != nil {
		return obj.GetLocaluserAuthserviceResponseObjectAsResult
	}

	if obj.LocaluserAuthservice != nil {
		return obj.LocaluserAuthservice
	}

	// all schemas are nil
	return nil
}

type NullableGetLocaluserAuthserviceResponse struct {
	value *GetLocaluserAuthserviceResponse
	isSet bool
}

func (v NullableGetLocaluserAuthserviceResponse) Get() *GetLocaluserAuthserviceResponse {
	return v.value
}

func (v *NullableGetLocaluserAuthserviceResponse) Set(val *GetLocaluserAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLocaluserAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLocaluserAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLocaluserAuthserviceResponse(val *GetLocaluserAuthserviceResponse) *NullableGetLocaluserAuthserviceResponse {
	return &NullableGetLocaluserAuthserviceResponse{value: val, isSet: true}
}

func (v NullableGetLocaluserAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLocaluserAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
