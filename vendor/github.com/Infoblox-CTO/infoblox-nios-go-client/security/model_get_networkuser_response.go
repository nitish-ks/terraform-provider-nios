/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetNetworkuserResponse - struct for GetNetworkuserResponse
type GetNetworkuserResponse struct {
	GetNetworkuserResponseObjectAsResult *GetNetworkuserResponseObjectAsResult
	Networkuser                          *Networkuser
}

// GetNetworkuserResponseObjectAsResultAsGetNetworkuserResponse is a convenience function that returns GetNetworkuserResponseObjectAsResult wrapped in GetNetworkuserResponse
func GetNetworkuserResponseObjectAsResultAsGetNetworkuserResponse(v *GetNetworkuserResponseObjectAsResult) GetNetworkuserResponse {
	return GetNetworkuserResponse{
		GetNetworkuserResponseObjectAsResult: v,
	}
}

// NetworkuserAsGetNetworkuserResponse is a convenience function that returns Networkuser wrapped in GetNetworkuserResponse
func NetworkuserAsGetNetworkuserResponse(v *Networkuser) GetNetworkuserResponse {
	return GetNetworkuserResponse{
		Networkuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNetworkuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNetworkuserResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNetworkuserResponseObjectAsResult)
	if err == nil {
		jsonGetNetworkuserResponseObjectAsResult, _ := json.Marshal(dst.GetNetworkuserResponseObjectAsResult)
		if string(jsonGetNetworkuserResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNetworkuserResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNetworkuserResponseObjectAsResult = nil
	}

	// try to unmarshal data into Networkuser
	err = newStrictDecoder(data).Decode(&dst.Networkuser)
	if err == nil {
		jsonNetworkuser, _ := json.Marshal(dst.Networkuser)
		if string(jsonNetworkuser) == "{}" { // empty struct
			dst.Networkuser = nil
		} else {
			match++
		}
	} else {
		dst.Networkuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNetworkuserResponseObjectAsResult = nil
		dst.Networkuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNetworkuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNetworkuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNetworkuserResponse) MarshalJSON() ([]byte, error) {
	if src.GetNetworkuserResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNetworkuserResponseObjectAsResult)
	}

	if src.Networkuser != nil {
		return json.Marshal(&src.Networkuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNetworkuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNetworkuserResponseObjectAsResult != nil {
		return obj.GetNetworkuserResponseObjectAsResult
	}

	if obj.Networkuser != nil {
		return obj.Networkuser
	}

	// all schemas are nil
	return nil
}

type NullableGetNetworkuserResponse struct {
	value *GetNetworkuserResponse
	isSet bool
}

func (v NullableGetNetworkuserResponse) Get() *GetNetworkuserResponse {
	return v.value
}

func (v *NullableGetNetworkuserResponse) Set(val *GetNetworkuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkuserResponse(val *GetNetworkuserResponse) *NullableGetNetworkuserResponse {
	return &NullableGetNetworkuserResponse{value: val, isSet: true}
}

func (v NullableGetNetworkuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
