/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetPermissionResponse - struct for GetPermissionResponse
type GetPermissionResponse struct {
	GetPermissionResponseObjectAsResult *GetPermissionResponseObjectAsResult
	Permission                          *Permission
}

// GetPermissionResponseObjectAsResultAsGetPermissionResponse is a convenience function that returns GetPermissionResponseObjectAsResult wrapped in GetPermissionResponse
func GetPermissionResponseObjectAsResultAsGetPermissionResponse(v *GetPermissionResponseObjectAsResult) GetPermissionResponse {
	return GetPermissionResponse{
		GetPermissionResponseObjectAsResult: v,
	}
}

// PermissionAsGetPermissionResponse is a convenience function that returns Permission wrapped in GetPermissionResponse
func PermissionAsGetPermissionResponse(v *Permission) GetPermissionResponse {
	return GetPermissionResponse{
		Permission: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPermissionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetPermissionResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetPermissionResponseObjectAsResult)
	if err == nil {
		jsonGetPermissionResponseObjectAsResult, _ := json.Marshal(dst.GetPermissionResponseObjectAsResult)
		if string(jsonGetPermissionResponseObjectAsResult) == "{}" { // empty struct
			dst.GetPermissionResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetPermissionResponseObjectAsResult = nil
	}

	// try to unmarshal data into Permission
	err = newStrictDecoder(data).Decode(&dst.Permission)
	if err == nil {
		jsonPermission, _ := json.Marshal(dst.Permission)
		if string(jsonPermission) == "{}" { // empty struct
			dst.Permission = nil
		} else {
			match++
		}
	} else {
		dst.Permission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetPermissionResponseObjectAsResult = nil
		dst.Permission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPermissionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPermissionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPermissionResponse) MarshalJSON() ([]byte, error) {
	if src.GetPermissionResponseObjectAsResult != nil {
		return json.Marshal(&src.GetPermissionResponseObjectAsResult)
	}

	if src.Permission != nil {
		return json.Marshal(&src.Permission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPermissionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetPermissionResponseObjectAsResult != nil {
		return obj.GetPermissionResponseObjectAsResult
	}

	if obj.Permission != nil {
		return obj.Permission
	}

	// all schemas are nil
	return nil
}

type NullableGetPermissionResponse struct {
	value *GetPermissionResponse
	isSet bool
}

func (v NullableGetPermissionResponse) Get() *GetPermissionResponse {
	return v.value
}

func (v *NullableGetPermissionResponse) Set(val *GetPermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPermissionResponse(val *GetPermissionResponse) *NullableGetPermissionResponse {
	return &NullableGetPermissionResponse{value: val, isSet: true}
}

func (v NullableGetPermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
