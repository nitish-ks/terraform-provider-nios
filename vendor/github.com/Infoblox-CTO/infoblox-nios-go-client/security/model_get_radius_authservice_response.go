/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetRadiusAuthserviceResponse - struct for GetRadiusAuthserviceResponse
type GetRadiusAuthserviceResponse struct {
	GetRadiusAuthserviceResponseObjectAsResult *GetRadiusAuthserviceResponseObjectAsResult
	RadiusAuthservice                          *RadiusAuthservice
}

// GetRadiusAuthserviceResponseObjectAsResultAsGetRadiusAuthserviceResponse is a convenience function that returns GetRadiusAuthserviceResponseObjectAsResult wrapped in GetRadiusAuthserviceResponse
func GetRadiusAuthserviceResponseObjectAsResultAsGetRadiusAuthserviceResponse(v *GetRadiusAuthserviceResponseObjectAsResult) GetRadiusAuthserviceResponse {
	return GetRadiusAuthserviceResponse{
		GetRadiusAuthserviceResponseObjectAsResult: v,
	}
}

// RadiusAuthserviceAsGetRadiusAuthserviceResponse is a convenience function that returns RadiusAuthservice wrapped in GetRadiusAuthserviceResponse
func RadiusAuthserviceAsGetRadiusAuthserviceResponse(v *RadiusAuthservice) GetRadiusAuthserviceResponse {
	return GetRadiusAuthserviceResponse{
		RadiusAuthservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRadiusAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRadiusAuthserviceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRadiusAuthserviceResponseObjectAsResult)
	if err == nil {
		jsonGetRadiusAuthserviceResponseObjectAsResult, _ := json.Marshal(dst.GetRadiusAuthserviceResponseObjectAsResult)
		if string(jsonGetRadiusAuthserviceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRadiusAuthserviceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRadiusAuthserviceResponseObjectAsResult = nil
	}

	// try to unmarshal data into RadiusAuthservice
	err = newStrictDecoder(data).Decode(&dst.RadiusAuthservice)
	if err == nil {
		jsonRadiusAuthservice, _ := json.Marshal(dst.RadiusAuthservice)
		if string(jsonRadiusAuthservice) == "{}" { // empty struct
			dst.RadiusAuthservice = nil
		} else {
			match++
		}
	} else {
		dst.RadiusAuthservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRadiusAuthserviceResponseObjectAsResult = nil
		dst.RadiusAuthservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRadiusAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRadiusAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRadiusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.GetRadiusAuthserviceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRadiusAuthserviceResponseObjectAsResult)
	}

	if src.RadiusAuthservice != nil {
		return json.Marshal(&src.RadiusAuthservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRadiusAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRadiusAuthserviceResponseObjectAsResult != nil {
		return obj.GetRadiusAuthserviceResponseObjectAsResult
	}

	if obj.RadiusAuthservice != nil {
		return obj.RadiusAuthservice
	}

	// all schemas are nil
	return nil
}

type NullableGetRadiusAuthserviceResponse struct {
	value *GetRadiusAuthserviceResponse
	isSet bool
}

func (v NullableGetRadiusAuthserviceResponse) Get() *GetRadiusAuthserviceResponse {
	return v.value
}

func (v *NullableGetRadiusAuthserviceResponse) Set(val *GetRadiusAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRadiusAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRadiusAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRadiusAuthserviceResponse(val *GetRadiusAuthserviceResponse) *NullableGetRadiusAuthserviceResponse {
	return &NullableGetRadiusAuthserviceResponse{value: val, isSet: true}
}

func (v NullableGetRadiusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRadiusAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
