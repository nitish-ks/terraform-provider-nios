/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetThreatinsightAllowlistResponse - struct for GetThreatinsightAllowlistResponse
type GetThreatinsightAllowlistResponse struct {
	GetThreatinsightAllowlistResponseObjectAsResult *GetThreatinsightAllowlistResponseObjectAsResult
	ThreatinsightAllowlist                          *ThreatinsightAllowlist
}

// GetThreatinsightAllowlistResponseObjectAsResultAsGetThreatinsightAllowlistResponse is a convenience function that returns GetThreatinsightAllowlistResponseObjectAsResult wrapped in GetThreatinsightAllowlistResponse
func GetThreatinsightAllowlistResponseObjectAsResultAsGetThreatinsightAllowlistResponse(v *GetThreatinsightAllowlistResponseObjectAsResult) GetThreatinsightAllowlistResponse {
	return GetThreatinsightAllowlistResponse{
		GetThreatinsightAllowlistResponseObjectAsResult: v,
	}
}

// ThreatinsightAllowlistAsGetThreatinsightAllowlistResponse is a convenience function that returns ThreatinsightAllowlist wrapped in GetThreatinsightAllowlistResponse
func ThreatinsightAllowlistAsGetThreatinsightAllowlistResponse(v *ThreatinsightAllowlist) GetThreatinsightAllowlistResponse {
	return GetThreatinsightAllowlistResponse{
		ThreatinsightAllowlist: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetThreatinsightAllowlistResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetThreatinsightAllowlistResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetThreatinsightAllowlistResponseObjectAsResult)
	if err == nil {
		jsonGetThreatinsightAllowlistResponseObjectAsResult, _ := json.Marshal(dst.GetThreatinsightAllowlistResponseObjectAsResult)
		if string(jsonGetThreatinsightAllowlistResponseObjectAsResult) == "{}" { // empty struct
			dst.GetThreatinsightAllowlistResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetThreatinsightAllowlistResponseObjectAsResult = nil
	}

	// try to unmarshal data into ThreatinsightAllowlist
	err = newStrictDecoder(data).Decode(&dst.ThreatinsightAllowlist)
	if err == nil {
		jsonThreatinsightAllowlist, _ := json.Marshal(dst.ThreatinsightAllowlist)
		if string(jsonThreatinsightAllowlist) == "{}" { // empty struct
			dst.ThreatinsightAllowlist = nil
		} else {
			match++
		}
	} else {
		dst.ThreatinsightAllowlist = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetThreatinsightAllowlistResponseObjectAsResult = nil
		dst.ThreatinsightAllowlist = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetThreatinsightAllowlistResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetThreatinsightAllowlistResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetThreatinsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	if src.GetThreatinsightAllowlistResponseObjectAsResult != nil {
		return json.Marshal(&src.GetThreatinsightAllowlistResponseObjectAsResult)
	}

	if src.ThreatinsightAllowlist != nil {
		return json.Marshal(&src.ThreatinsightAllowlist)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetThreatinsightAllowlistResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetThreatinsightAllowlistResponseObjectAsResult != nil {
		return obj.GetThreatinsightAllowlistResponseObjectAsResult
	}

	if obj.ThreatinsightAllowlist != nil {
		return obj.ThreatinsightAllowlist
	}

	// all schemas are nil
	return nil
}

type NullableGetThreatinsightAllowlistResponse struct {
	value *GetThreatinsightAllowlistResponse
	isSet bool
}

func (v NullableGetThreatinsightAllowlistResponse) Get() *GetThreatinsightAllowlistResponse {
	return v.value
}

func (v *NullableGetThreatinsightAllowlistResponse) Set(val *GetThreatinsightAllowlistResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetThreatinsightAllowlistResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetThreatinsightAllowlistResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetThreatinsightAllowlistResponse(val *GetThreatinsightAllowlistResponse) *NullableGetThreatinsightAllowlistResponse {
	return &NullableGetThreatinsightAllowlistResponse{value: val, isSet: true}
}

func (v NullableGetThreatinsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetThreatinsightAllowlistResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
