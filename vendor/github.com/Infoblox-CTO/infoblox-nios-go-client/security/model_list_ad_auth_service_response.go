/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListAdAuthServiceResponse - struct for ListAdAuthServiceResponse
type ListAdAuthServiceResponse struct {
	ListAdAuthServiceResponseObject *ListAdAuthServiceResponseObject
	ArrayOfAdAuthService            *[]AdAuthService
}

// ListAdAuthServiceResponseObjectAsListAdAuthServiceResponse is a convenience function that returns ListAdAuthServiceResponseObject wrapped in ListAdAuthServiceResponse
func ListAdAuthServiceResponseObjectAsListAdAuthServiceResponse(v *ListAdAuthServiceResponseObject) ListAdAuthServiceResponse {
	return ListAdAuthServiceResponse{
		ListAdAuthServiceResponseObject: v,
	}
}

// []AdAuthServiceAsListAdAuthServiceResponse is a convenience function that returns []AdAuthService wrapped in ListAdAuthServiceResponse
func ArrayOfAdAuthServiceAsListAdAuthServiceResponse(v *[]AdAuthService) ListAdAuthServiceResponse {
	return ListAdAuthServiceResponse{
		ArrayOfAdAuthService: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAdAuthServiceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAdAuthServiceResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAdAuthServiceResponseObject)
	if err == nil {
		jsonListAdAuthServiceResponseObject, _ := json.Marshal(dst.ListAdAuthServiceResponseObject)
		if string(jsonListAdAuthServiceResponseObject) == "{}" { // empty struct
			dst.ListAdAuthServiceResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAdAuthServiceResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAdAuthService
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAdAuthService)
	if err == nil {
		jsonArrayOfAdAuthService, _ := json.Marshal(dst.ArrayOfAdAuthService)
		if string(jsonArrayOfAdAuthService) == "{}" { // empty struct
			dst.ArrayOfAdAuthService = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAdAuthService = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAdAuthServiceResponseObject = nil
		dst.ArrayOfAdAuthService = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAdAuthServiceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAdAuthServiceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAdAuthServiceResponse) MarshalJSON() ([]byte, error) {
	if src.ListAdAuthServiceResponseObject != nil {
		return json.Marshal(&src.ListAdAuthServiceResponseObject)
	}

	if src.ArrayOfAdAuthService != nil {
		return json.Marshal(&src.ArrayOfAdAuthService)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAdAuthServiceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAdAuthServiceResponseObject != nil {
		return obj.ListAdAuthServiceResponseObject
	}

	if obj.ArrayOfAdAuthService != nil {
		return obj.ArrayOfAdAuthService
	}

	// all schemas are nil
	return nil
}

type NullableListAdAuthServiceResponse struct {
	value *ListAdAuthServiceResponse
	isSet bool
}

func (v NullableListAdAuthServiceResponse) Get() *ListAdAuthServiceResponse {
	return v.value
}

func (v *NullableListAdAuthServiceResponse) Set(val *ListAdAuthServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAdAuthServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAdAuthServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAdAuthServiceResponse(val *ListAdAuthServiceResponse) *NullableListAdAuthServiceResponse {
	return &NullableListAdAuthServiceResponse{value: val, isSet: true}
}

func (v NullableListAdAuthServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAdAuthServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
