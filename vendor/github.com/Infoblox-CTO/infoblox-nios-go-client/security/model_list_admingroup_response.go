/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListAdmingroupResponse - struct for ListAdmingroupResponse
type ListAdmingroupResponse struct {
	ListAdmingroupResponseObject *ListAdmingroupResponseObject
	ArrayOfAdmingroup            *[]Admingroup
}

// ListAdmingroupResponseObjectAsListAdmingroupResponse is a convenience function that returns ListAdmingroupResponseObject wrapped in ListAdmingroupResponse
func ListAdmingroupResponseObjectAsListAdmingroupResponse(v *ListAdmingroupResponseObject) ListAdmingroupResponse {
	return ListAdmingroupResponse{
		ListAdmingroupResponseObject: v,
	}
}

// []AdmingroupAsListAdmingroupResponse is a convenience function that returns []Admingroup wrapped in ListAdmingroupResponse
func ArrayOfAdmingroupAsListAdmingroupResponse(v *[]Admingroup) ListAdmingroupResponse {
	return ListAdmingroupResponse{
		ArrayOfAdmingroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAdmingroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAdmingroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAdmingroupResponseObject)
	if err == nil {
		jsonListAdmingroupResponseObject, _ := json.Marshal(dst.ListAdmingroupResponseObject)
		if string(jsonListAdmingroupResponseObject) == "{}" { // empty struct
			dst.ListAdmingroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAdmingroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAdmingroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAdmingroup)
	if err == nil {
		jsonArrayOfAdmingroup, _ := json.Marshal(dst.ArrayOfAdmingroup)
		if string(jsonArrayOfAdmingroup) == "{}" { // empty struct
			dst.ArrayOfAdmingroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAdmingroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAdmingroupResponseObject = nil
		dst.ArrayOfAdmingroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAdmingroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAdmingroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAdmingroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListAdmingroupResponseObject != nil {
		return json.Marshal(&src.ListAdmingroupResponseObject)
	}

	if src.ArrayOfAdmingroup != nil {
		return json.Marshal(&src.ArrayOfAdmingroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAdmingroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAdmingroupResponseObject != nil {
		return obj.ListAdmingroupResponseObject
	}

	if obj.ArrayOfAdmingroup != nil {
		return obj.ArrayOfAdmingroup
	}

	// all schemas are nil
	return nil
}

type NullableListAdmingroupResponse struct {
	value *ListAdmingroupResponse
	isSet bool
}

func (v NullableListAdmingroupResponse) Get() *ListAdmingroupResponse {
	return v.value
}

func (v *NullableListAdmingroupResponse) Set(val *ListAdmingroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAdmingroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAdmingroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAdmingroupResponse(val *ListAdmingroupResponse) *NullableListAdmingroupResponse {
	return &NullableListAdmingroupResponse{value: val, isSet: true}
}

func (v NullableListAdmingroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAdmingroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
