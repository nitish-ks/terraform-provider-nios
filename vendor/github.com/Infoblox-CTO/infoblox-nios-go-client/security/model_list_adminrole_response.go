/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListAdminroleResponse - struct for ListAdminroleResponse
type ListAdminroleResponse struct {
	ListAdminroleResponseObject *ListAdminroleResponseObject
	ArrayOfAdminrole            *[]Adminrole
}

// ListAdminroleResponseObjectAsListAdminroleResponse is a convenience function that returns ListAdminroleResponseObject wrapped in ListAdminroleResponse
func ListAdminroleResponseObjectAsListAdminroleResponse(v *ListAdminroleResponseObject) ListAdminroleResponse {
	return ListAdminroleResponse{
		ListAdminroleResponseObject: v,
	}
}

// []AdminroleAsListAdminroleResponse is a convenience function that returns []Adminrole wrapped in ListAdminroleResponse
func ArrayOfAdminroleAsListAdminroleResponse(v *[]Adminrole) ListAdminroleResponse {
	return ListAdminroleResponse{
		ArrayOfAdminrole: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAdminroleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAdminroleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAdminroleResponseObject)
	if err == nil {
		jsonListAdminroleResponseObject, _ := json.Marshal(dst.ListAdminroleResponseObject)
		if string(jsonListAdminroleResponseObject) == "{}" { // empty struct
			dst.ListAdminroleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAdminroleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAdminrole
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAdminrole)
	if err == nil {
		jsonArrayOfAdminrole, _ := json.Marshal(dst.ArrayOfAdminrole)
		if string(jsonArrayOfAdminrole) == "{}" { // empty struct
			dst.ArrayOfAdminrole = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAdminrole = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAdminroleResponseObject = nil
		dst.ArrayOfAdminrole = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAdminroleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAdminroleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAdminroleResponse) MarshalJSON() ([]byte, error) {
	if src.ListAdminroleResponseObject != nil {
		return json.Marshal(&src.ListAdminroleResponseObject)
	}

	if src.ArrayOfAdminrole != nil {
		return json.Marshal(&src.ArrayOfAdminrole)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAdminroleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAdminroleResponseObject != nil {
		return obj.ListAdminroleResponseObject
	}

	if obj.ArrayOfAdminrole != nil {
		return obj.ArrayOfAdminrole
	}

	// all schemas are nil
	return nil
}

type NullableListAdminroleResponse struct {
	value *ListAdminroleResponse
	isSet bool
}

func (v NullableListAdminroleResponse) Get() *ListAdminroleResponse {
	return v.value
}

func (v *NullableListAdminroleResponse) Set(val *ListAdminroleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAdminroleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAdminroleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAdminroleResponse(val *ListAdminroleResponse) *NullableListAdminroleResponse {
	return &NullableListAdminroleResponse{value: val, isSet: true}
}

func (v NullableListAdminroleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAdminroleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
