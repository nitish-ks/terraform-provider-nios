/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListCacertificateResponse - struct for ListCacertificateResponse
type ListCacertificateResponse struct {
	ListCacertificateResponseObject *ListCacertificateResponseObject
	ArrayOfCacertificate            *[]Cacertificate
}

// ListCacertificateResponseObjectAsListCacertificateResponse is a convenience function that returns ListCacertificateResponseObject wrapped in ListCacertificateResponse
func ListCacertificateResponseObjectAsListCacertificateResponse(v *ListCacertificateResponseObject) ListCacertificateResponse {
	return ListCacertificateResponse{
		ListCacertificateResponseObject: v,
	}
}

// []CacertificateAsListCacertificateResponse is a convenience function that returns []Cacertificate wrapped in ListCacertificateResponse
func ArrayOfCacertificateAsListCacertificateResponse(v *[]Cacertificate) ListCacertificateResponse {
	return ListCacertificateResponse{
		ArrayOfCacertificate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCacertificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListCacertificateResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListCacertificateResponseObject)
	if err == nil {
		jsonListCacertificateResponseObject, _ := json.Marshal(dst.ListCacertificateResponseObject)
		if string(jsonListCacertificateResponseObject) == "{}" { // empty struct
			dst.ListCacertificateResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListCacertificateResponseObject = nil
	}

	// try to unmarshal data into ArrayOfCacertificate
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCacertificate)
	if err == nil {
		jsonArrayOfCacertificate, _ := json.Marshal(dst.ArrayOfCacertificate)
		if string(jsonArrayOfCacertificate) == "{}" { // empty struct
			dst.ArrayOfCacertificate = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCacertificate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListCacertificateResponseObject = nil
		dst.ArrayOfCacertificate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCacertificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCacertificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCacertificateResponse) MarshalJSON() ([]byte, error) {
	if src.ListCacertificateResponseObject != nil {
		return json.Marshal(&src.ListCacertificateResponseObject)
	}

	if src.ArrayOfCacertificate != nil {
		return json.Marshal(&src.ArrayOfCacertificate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCacertificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListCacertificateResponseObject != nil {
		return obj.ListCacertificateResponseObject
	}

	if obj.ArrayOfCacertificate != nil {
		return obj.ArrayOfCacertificate
	}

	// all schemas are nil
	return nil
}

type NullableListCacertificateResponse struct {
	value *ListCacertificateResponse
	isSet bool
}

func (v NullableListCacertificateResponse) Get() *ListCacertificateResponse {
	return v.value
}

func (v *NullableListCacertificateResponse) Set(val *ListCacertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCacertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCacertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCacertificateResponse(val *ListCacertificateResponse) *NullableListCacertificateResponse {
	return &NullableListCacertificateResponse{value: val, isSet: true}
}

func (v NullableListCacertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCacertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
