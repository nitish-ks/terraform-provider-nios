/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListCertificateAuthserviceResponse - struct for ListCertificateAuthserviceResponse
type ListCertificateAuthserviceResponse struct {
	ListCertificateAuthserviceResponseObject *ListCertificateAuthserviceResponseObject
	ArrayOfCertificateAuthservice            *[]CertificateAuthservice
}

// ListCertificateAuthserviceResponseObjectAsListCertificateAuthserviceResponse is a convenience function that returns ListCertificateAuthserviceResponseObject wrapped in ListCertificateAuthserviceResponse
func ListCertificateAuthserviceResponseObjectAsListCertificateAuthserviceResponse(v *ListCertificateAuthserviceResponseObject) ListCertificateAuthserviceResponse {
	return ListCertificateAuthserviceResponse{
		ListCertificateAuthserviceResponseObject: v,
	}
}

// []CertificateAuthserviceAsListCertificateAuthserviceResponse is a convenience function that returns []CertificateAuthservice wrapped in ListCertificateAuthserviceResponse
func ArrayOfCertificateAuthserviceAsListCertificateAuthserviceResponse(v *[]CertificateAuthservice) ListCertificateAuthserviceResponse {
	return ListCertificateAuthserviceResponse{
		ArrayOfCertificateAuthservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCertificateAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListCertificateAuthserviceResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListCertificateAuthserviceResponseObject)
	if err == nil {
		jsonListCertificateAuthserviceResponseObject, _ := json.Marshal(dst.ListCertificateAuthserviceResponseObject)
		if string(jsonListCertificateAuthserviceResponseObject) == "{}" { // empty struct
			dst.ListCertificateAuthserviceResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListCertificateAuthserviceResponseObject = nil
	}

	// try to unmarshal data into ArrayOfCertificateAuthservice
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCertificateAuthservice)
	if err == nil {
		jsonArrayOfCertificateAuthservice, _ := json.Marshal(dst.ArrayOfCertificateAuthservice)
		if string(jsonArrayOfCertificateAuthservice) == "{}" { // empty struct
			dst.ArrayOfCertificateAuthservice = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCertificateAuthservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListCertificateAuthserviceResponseObject = nil
		dst.ArrayOfCertificateAuthservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCertificateAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCertificateAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCertificateAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.ListCertificateAuthserviceResponseObject != nil {
		return json.Marshal(&src.ListCertificateAuthserviceResponseObject)
	}

	if src.ArrayOfCertificateAuthservice != nil {
		return json.Marshal(&src.ArrayOfCertificateAuthservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCertificateAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListCertificateAuthserviceResponseObject != nil {
		return obj.ListCertificateAuthserviceResponseObject
	}

	if obj.ArrayOfCertificateAuthservice != nil {
		return obj.ArrayOfCertificateAuthservice
	}

	// all schemas are nil
	return nil
}

type NullableListCertificateAuthserviceResponse struct {
	value *ListCertificateAuthserviceResponse
	isSet bool
}

func (v NullableListCertificateAuthserviceResponse) Get() *ListCertificateAuthserviceResponse {
	return v.value
}

func (v *NullableListCertificateAuthserviceResponse) Set(val *ListCertificateAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCertificateAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCertificateAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCertificateAuthserviceResponse(val *ListCertificateAuthserviceResponse) *NullableListCertificateAuthserviceResponse {
	return &NullableListCertificateAuthserviceResponse{value: val, isSet: true}
}

func (v NullableListCertificateAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCertificateAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
