/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListFtpuserResponse - struct for ListFtpuserResponse
type ListFtpuserResponse struct {
	ListFtpuserResponseObject *ListFtpuserResponseObject
	ArrayOfFtpuser            *[]Ftpuser
}

// ListFtpuserResponseObjectAsListFtpuserResponse is a convenience function that returns ListFtpuserResponseObject wrapped in ListFtpuserResponse
func ListFtpuserResponseObjectAsListFtpuserResponse(v *ListFtpuserResponseObject) ListFtpuserResponse {
	return ListFtpuserResponse{
		ListFtpuserResponseObject: v,
	}
}

// []FtpuserAsListFtpuserResponse is a convenience function that returns []Ftpuser wrapped in ListFtpuserResponse
func ArrayOfFtpuserAsListFtpuserResponse(v *[]Ftpuser) ListFtpuserResponse {
	return ListFtpuserResponse{
		ArrayOfFtpuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListFtpuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListFtpuserResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListFtpuserResponseObject)
	if err == nil {
		jsonListFtpuserResponseObject, _ := json.Marshal(dst.ListFtpuserResponseObject)
		if string(jsonListFtpuserResponseObject) == "{}" { // empty struct
			dst.ListFtpuserResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListFtpuserResponseObject = nil
	}

	// try to unmarshal data into ArrayOfFtpuser
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFtpuser)
	if err == nil {
		jsonArrayOfFtpuser, _ := json.Marshal(dst.ArrayOfFtpuser)
		if string(jsonArrayOfFtpuser) == "{}" { // empty struct
			dst.ArrayOfFtpuser = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFtpuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListFtpuserResponseObject = nil
		dst.ArrayOfFtpuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListFtpuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListFtpuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListFtpuserResponse) MarshalJSON() ([]byte, error) {
	if src.ListFtpuserResponseObject != nil {
		return json.Marshal(&src.ListFtpuserResponseObject)
	}

	if src.ArrayOfFtpuser != nil {
		return json.Marshal(&src.ArrayOfFtpuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListFtpuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListFtpuserResponseObject != nil {
		return obj.ListFtpuserResponseObject
	}

	if obj.ArrayOfFtpuser != nil {
		return obj.ArrayOfFtpuser
	}

	// all schemas are nil
	return nil
}

type NullableListFtpuserResponse struct {
	value *ListFtpuserResponse
	isSet bool
}

func (v NullableListFtpuserResponse) Get() *ListFtpuserResponse {
	return v.value
}

func (v *NullableListFtpuserResponse) Set(val *ListFtpuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFtpuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFtpuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFtpuserResponse(val *ListFtpuserResponse) *NullableListFtpuserResponse {
	return &NullableListFtpuserResponse{value: val, isSet: true}
}

func (v NullableListFtpuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFtpuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
