/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListHsmThaleslunagroupResponse - struct for ListHsmThaleslunagroupResponse
type ListHsmThaleslunagroupResponse struct {
	ListHsmThaleslunagroupResponseObject *ListHsmThaleslunagroupResponseObject
	ArrayOfHsmThaleslunagroup            *[]HsmThaleslunagroup
}

// ListHsmThaleslunagroupResponseObjectAsListHsmThaleslunagroupResponse is a convenience function that returns ListHsmThaleslunagroupResponseObject wrapped in ListHsmThaleslunagroupResponse
func ListHsmThaleslunagroupResponseObjectAsListHsmThaleslunagroupResponse(v *ListHsmThaleslunagroupResponseObject) ListHsmThaleslunagroupResponse {
	return ListHsmThaleslunagroupResponse{
		ListHsmThaleslunagroupResponseObject: v,
	}
}

// []HsmThaleslunagroupAsListHsmThaleslunagroupResponse is a convenience function that returns []HsmThaleslunagroup wrapped in ListHsmThaleslunagroupResponse
func ArrayOfHsmThaleslunagroupAsListHsmThaleslunagroupResponse(v *[]HsmThaleslunagroup) ListHsmThaleslunagroupResponse {
	return ListHsmThaleslunagroupResponse{
		ArrayOfHsmThaleslunagroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListHsmThaleslunagroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListHsmThaleslunagroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListHsmThaleslunagroupResponseObject)
	if err == nil {
		jsonListHsmThaleslunagroupResponseObject, _ := json.Marshal(dst.ListHsmThaleslunagroupResponseObject)
		if string(jsonListHsmThaleslunagroupResponseObject) == "{}" { // empty struct
			dst.ListHsmThaleslunagroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListHsmThaleslunagroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfHsmThaleslunagroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfHsmThaleslunagroup)
	if err == nil {
		jsonArrayOfHsmThaleslunagroup, _ := json.Marshal(dst.ArrayOfHsmThaleslunagroup)
		if string(jsonArrayOfHsmThaleslunagroup) == "{}" { // empty struct
			dst.ArrayOfHsmThaleslunagroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfHsmThaleslunagroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListHsmThaleslunagroupResponseObject = nil
		dst.ArrayOfHsmThaleslunagroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListHsmThaleslunagroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListHsmThaleslunagroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListHsmThaleslunagroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListHsmThaleslunagroupResponseObject != nil {
		return json.Marshal(&src.ListHsmThaleslunagroupResponseObject)
	}

	if src.ArrayOfHsmThaleslunagroup != nil {
		return json.Marshal(&src.ArrayOfHsmThaleslunagroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListHsmThaleslunagroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListHsmThaleslunagroupResponseObject != nil {
		return obj.ListHsmThaleslunagroupResponseObject
	}

	if obj.ArrayOfHsmThaleslunagroup != nil {
		return obj.ArrayOfHsmThaleslunagroup
	}

	// all schemas are nil
	return nil
}

type NullableListHsmThaleslunagroupResponse struct {
	value *ListHsmThaleslunagroupResponse
	isSet bool
}

func (v NullableListHsmThaleslunagroupResponse) Get() *ListHsmThaleslunagroupResponse {
	return v.value
}

func (v *NullableListHsmThaleslunagroupResponse) Set(val *ListHsmThaleslunagroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListHsmThaleslunagroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListHsmThaleslunagroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListHsmThaleslunagroupResponse(val *ListHsmThaleslunagroupResponse) *NullableListHsmThaleslunagroupResponse {
	return &NullableListHsmThaleslunagroupResponse{value: val, isSet: true}
}

func (v NullableListHsmThaleslunagroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListHsmThaleslunagroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
