/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListNetworkuserResponse - struct for ListNetworkuserResponse
type ListNetworkuserResponse struct {
	ListNetworkuserResponseObject *ListNetworkuserResponseObject
	ArrayOfNetworkuser            *[]Networkuser
}

// ListNetworkuserResponseObjectAsListNetworkuserResponse is a convenience function that returns ListNetworkuserResponseObject wrapped in ListNetworkuserResponse
func ListNetworkuserResponseObjectAsListNetworkuserResponse(v *ListNetworkuserResponseObject) ListNetworkuserResponse {
	return ListNetworkuserResponse{
		ListNetworkuserResponseObject: v,
	}
}

// []NetworkuserAsListNetworkuserResponse is a convenience function that returns []Networkuser wrapped in ListNetworkuserResponse
func ArrayOfNetworkuserAsListNetworkuserResponse(v *[]Networkuser) ListNetworkuserResponse {
	return ListNetworkuserResponse{
		ArrayOfNetworkuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNetworkuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNetworkuserResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNetworkuserResponseObject)
	if err == nil {
		jsonListNetworkuserResponseObject, _ := json.Marshal(dst.ListNetworkuserResponseObject)
		if string(jsonListNetworkuserResponseObject) == "{}" { // empty struct
			dst.ListNetworkuserResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNetworkuserResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNetworkuser
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNetworkuser)
	if err == nil {
		jsonArrayOfNetworkuser, _ := json.Marshal(dst.ArrayOfNetworkuser)
		if string(jsonArrayOfNetworkuser) == "{}" { // empty struct
			dst.ArrayOfNetworkuser = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNetworkuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNetworkuserResponseObject = nil
		dst.ArrayOfNetworkuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNetworkuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNetworkuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNetworkuserResponse) MarshalJSON() ([]byte, error) {
	if src.ListNetworkuserResponseObject != nil {
		return json.Marshal(&src.ListNetworkuserResponseObject)
	}

	if src.ArrayOfNetworkuser != nil {
		return json.Marshal(&src.ArrayOfNetworkuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNetworkuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNetworkuserResponseObject != nil {
		return obj.ListNetworkuserResponseObject
	}

	if obj.ArrayOfNetworkuser != nil {
		return obj.ArrayOfNetworkuser
	}

	// all schemas are nil
	return nil
}

type NullableListNetworkuserResponse struct {
	value *ListNetworkuserResponse
	isSet bool
}

func (v NullableListNetworkuserResponse) Get() *ListNetworkuserResponse {
	return v.value
}

func (v *NullableListNetworkuserResponse) Set(val *ListNetworkuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworkuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworkuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworkuserResponse(val *ListNetworkuserResponse) *NullableListNetworkuserResponse {
	return &NullableListNetworkuserResponse{value: val, isSet: true}
}

func (v NullableListNetworkuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworkuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
