/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListSnmpuserResponse - struct for ListSnmpuserResponse
type ListSnmpuserResponse struct {
	ListSnmpuserResponseObject *ListSnmpuserResponseObject
	ArrayOfSnmpuser            *[]Snmpuser
}

// ListSnmpuserResponseObjectAsListSnmpuserResponse is a convenience function that returns ListSnmpuserResponseObject wrapped in ListSnmpuserResponse
func ListSnmpuserResponseObjectAsListSnmpuserResponse(v *ListSnmpuserResponseObject) ListSnmpuserResponse {
	return ListSnmpuserResponse{
		ListSnmpuserResponseObject: v,
	}
}

// []SnmpuserAsListSnmpuserResponse is a convenience function that returns []Snmpuser wrapped in ListSnmpuserResponse
func ArrayOfSnmpuserAsListSnmpuserResponse(v *[]Snmpuser) ListSnmpuserResponse {
	return ListSnmpuserResponse{
		ArrayOfSnmpuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSnmpuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSnmpuserResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSnmpuserResponseObject)
	if err == nil {
		jsonListSnmpuserResponseObject, _ := json.Marshal(dst.ListSnmpuserResponseObject)
		if string(jsonListSnmpuserResponseObject) == "{}" { // empty struct
			dst.ListSnmpuserResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSnmpuserResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSnmpuser
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSnmpuser)
	if err == nil {
		jsonArrayOfSnmpuser, _ := json.Marshal(dst.ArrayOfSnmpuser)
		if string(jsonArrayOfSnmpuser) == "{}" { // empty struct
			dst.ArrayOfSnmpuser = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSnmpuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSnmpuserResponseObject = nil
		dst.ArrayOfSnmpuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSnmpuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSnmpuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSnmpuserResponse) MarshalJSON() ([]byte, error) {
	if src.ListSnmpuserResponseObject != nil {
		return json.Marshal(&src.ListSnmpuserResponseObject)
	}

	if src.ArrayOfSnmpuser != nil {
		return json.Marshal(&src.ArrayOfSnmpuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSnmpuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSnmpuserResponseObject != nil {
		return obj.ListSnmpuserResponseObject
	}

	if obj.ArrayOfSnmpuser != nil {
		return obj.ArrayOfSnmpuser
	}

	// all schemas are nil
	return nil
}

type NullableListSnmpuserResponse struct {
	value *ListSnmpuserResponse
	isSet bool
}

func (v NullableListSnmpuserResponse) Get() *ListSnmpuserResponse {
	return v.value
}

func (v *NullableListSnmpuserResponse) Set(val *ListSnmpuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSnmpuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSnmpuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSnmpuserResponse(val *ListSnmpuserResponse) *NullableListSnmpuserResponse {
	return &NullableListSnmpuserResponse{value: val, isSet: true}
}

func (v NullableListSnmpuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSnmpuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
