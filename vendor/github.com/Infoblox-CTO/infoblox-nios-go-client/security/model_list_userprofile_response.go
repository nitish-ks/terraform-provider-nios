/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListUserprofileResponse - struct for ListUserprofileResponse
type ListUserprofileResponse struct {
	ListUserprofileResponseObject *ListUserprofileResponseObject
	ArrayOfUserprofile            *[]Userprofile
}

// ListUserprofileResponseObjectAsListUserprofileResponse is a convenience function that returns ListUserprofileResponseObject wrapped in ListUserprofileResponse
func ListUserprofileResponseObjectAsListUserprofileResponse(v *ListUserprofileResponseObject) ListUserprofileResponse {
	return ListUserprofileResponse{
		ListUserprofileResponseObject: v,
	}
}

// []UserprofileAsListUserprofileResponse is a convenience function that returns []Userprofile wrapped in ListUserprofileResponse
func ArrayOfUserprofileAsListUserprofileResponse(v *[]Userprofile) ListUserprofileResponse {
	return ListUserprofileResponse{
		ArrayOfUserprofile: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListUserprofileResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListUserprofileResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListUserprofileResponseObject)
	if err == nil {
		jsonListUserprofileResponseObject, _ := json.Marshal(dst.ListUserprofileResponseObject)
		if string(jsonListUserprofileResponseObject) == "{}" { // empty struct
			dst.ListUserprofileResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListUserprofileResponseObject = nil
	}

	// try to unmarshal data into ArrayOfUserprofile
	err = newStrictDecoder(data).Decode(&dst.ArrayOfUserprofile)
	if err == nil {
		jsonArrayOfUserprofile, _ := json.Marshal(dst.ArrayOfUserprofile)
		if string(jsonArrayOfUserprofile) == "{}" { // empty struct
			dst.ArrayOfUserprofile = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfUserprofile = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListUserprofileResponseObject = nil
		dst.ArrayOfUserprofile = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListUserprofileResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListUserprofileResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListUserprofileResponse) MarshalJSON() ([]byte, error) {
	if src.ListUserprofileResponseObject != nil {
		return json.Marshal(&src.ListUserprofileResponseObject)
	}

	if src.ArrayOfUserprofile != nil {
		return json.Marshal(&src.ArrayOfUserprofile)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListUserprofileResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListUserprofileResponseObject != nil {
		return obj.ListUserprofileResponseObject
	}

	if obj.ArrayOfUserprofile != nil {
		return obj.ArrayOfUserprofile
	}

	// all schemas are nil
	return nil
}

type NullableListUserprofileResponse struct {
	value *ListUserprofileResponse
	isSet bool
}

func (v NullableListUserprofileResponse) Get() *ListUserprofileResponse {
	return v.value
}

func (v *NullableListUserprofileResponse) Set(val *ListUserprofileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListUserprofileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListUserprofileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUserprofileResponse(val *ListUserprofileResponse) *NullableListUserprofileResponse {
	return &NullableListUserprofileResponse{value: val, isSet: true}
}

func (v NullableListUserprofileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUserprofileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
