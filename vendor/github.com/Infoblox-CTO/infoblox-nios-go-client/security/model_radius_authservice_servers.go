/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.12.3
Contact: jkhatri@infoblox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the RadiusAuthserviceServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadiusAuthserviceServers{}

// RadiusAuthserviceServers struct for RadiusAuthserviceServers
type RadiusAuthserviceServers struct {
	// The accounting port.
	AcctPort *int64 `json:"acct_port,omitempty"`
	// The authorization port.
	AuthPort *int64 `json:"auth_port,omitempty"`
	// The authentication protocol.
	AuthType *string `json:"auth_type,omitempty"`
	// The RADIUS descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// Determines whether the RADIUS server is disabled.
	Disable *bool `json:"disable,omitempty"`
	// The FQDN or the IP address of the RADIUS server that is used for authentication.
	Address *string `json:"address,omitempty"`
	// The shared secret that the NIOS appliance and the RADIUS server use to encrypt and decrypt their messages.
	SharedSecret *string `json:"shared_secret,omitempty"`
	// Determines whether RADIUS accounting is enabled.
	UseAccounting *bool `json:"use_accounting,omitempty"`
	// Determines whether connection via the management interface is allowed.
	UseMgmtPort          *bool `json:"use_mgmt_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RadiusAuthserviceServers RadiusAuthserviceServers

// NewRadiusAuthserviceServers instantiates a new RadiusAuthserviceServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadiusAuthserviceServers() *RadiusAuthserviceServers {
	this := RadiusAuthserviceServers{}
	return &this
}

// NewRadiusAuthserviceServersWithDefaults instantiates a new RadiusAuthserviceServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadiusAuthserviceServersWithDefaults() *RadiusAuthserviceServers {
	this := RadiusAuthserviceServers{}
	return &this
}

// GetAcctPort returns the AcctPort field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetAcctPort() int64 {
	if o == nil || IsNil(o.AcctPort) {
		var ret int64
		return ret
	}
	return *o.AcctPort
}

// GetAcctPortOk returns a tuple with the AcctPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetAcctPortOk() (*int64, bool) {
	if o == nil || IsNil(o.AcctPort) {
		return nil, false
	}
	return o.AcctPort, true
}

// HasAcctPort returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasAcctPort() bool {
	if o != nil && !IsNil(o.AcctPort) {
		return true
	}

	return false
}

// SetAcctPort gets a reference to the given int64 and assigns it to the AcctPort field.
func (o *RadiusAuthserviceServers) SetAcctPort(v int64) {
	o.AcctPort = &v
}

// GetAuthPort returns the AuthPort field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetAuthPort() int64 {
	if o == nil || IsNil(o.AuthPort) {
		var ret int64
		return ret
	}
	return *o.AuthPort
}

// GetAuthPortOk returns a tuple with the AuthPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetAuthPortOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthPort) {
		return nil, false
	}
	return o.AuthPort, true
}

// HasAuthPort returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasAuthPort() bool {
	if o != nil && !IsNil(o.AuthPort) {
		return true
	}

	return false
}

// SetAuthPort gets a reference to the given int64 and assigns it to the AuthPort field.
func (o *RadiusAuthserviceServers) SetAuthPort(v int64) {
	o.AuthPort = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *RadiusAuthserviceServers) SetAuthType(v string) {
	o.AuthType = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RadiusAuthserviceServers) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RadiusAuthserviceServers) SetDisable(v bool) {
	o.Disable = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *RadiusAuthserviceServers) SetAddress(v string) {
	o.Address = &v
}

// GetSharedSecret returns the SharedSecret field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetSharedSecret() string {
	if o == nil || IsNil(o.SharedSecret) {
		var ret string
		return ret
	}
	return *o.SharedSecret
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetSharedSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SharedSecret) {
		return nil, false
	}
	return o.SharedSecret, true
}

// HasSharedSecret returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasSharedSecret() bool {
	if o != nil && !IsNil(o.SharedSecret) {
		return true
	}

	return false
}

// SetSharedSecret gets a reference to the given string and assigns it to the SharedSecret field.
func (o *RadiusAuthserviceServers) SetSharedSecret(v string) {
	o.SharedSecret = &v
}

// GetUseAccounting returns the UseAccounting field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetUseAccounting() bool {
	if o == nil || IsNil(o.UseAccounting) {
		var ret bool
		return ret
	}
	return *o.UseAccounting
}

// GetUseAccountingOk returns a tuple with the UseAccounting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetUseAccountingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAccounting) {
		return nil, false
	}
	return o.UseAccounting, true
}

// HasUseAccounting returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasUseAccounting() bool {
	if o != nil && !IsNil(o.UseAccounting) {
		return true
	}

	return false
}

// SetUseAccounting gets a reference to the given bool and assigns it to the UseAccounting field.
func (o *RadiusAuthserviceServers) SetUseAccounting(v bool) {
	o.UseAccounting = &v
}

// GetUseMgmtPort returns the UseMgmtPort field value if set, zero value otherwise.
func (o *RadiusAuthserviceServers) GetUseMgmtPort() bool {
	if o == nil || IsNil(o.UseMgmtPort) {
		var ret bool
		return ret
	}
	return *o.UseMgmtPort
}

// GetUseMgmtPortOk returns a tuple with the UseMgmtPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusAuthserviceServers) GetUseMgmtPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtPort) {
		return nil, false
	}
	return o.UseMgmtPort, true
}

// HasUseMgmtPort returns a boolean if a field has been set.
func (o *RadiusAuthserviceServers) HasUseMgmtPort() bool {
	if o != nil && !IsNil(o.UseMgmtPort) {
		return true
	}

	return false
}

// SetUseMgmtPort gets a reference to the given bool and assigns it to the UseMgmtPort field.
func (o *RadiusAuthserviceServers) SetUseMgmtPort(v bool) {
	o.UseMgmtPort = &v
}

func (o RadiusAuthserviceServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadiusAuthserviceServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctPort) {
		toSerialize["acct_port"] = o.AcctPort
	}
	if !IsNil(o.AuthPort) {
		toSerialize["auth_port"] = o.AuthPort
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.SharedSecret) {
		toSerialize["shared_secret"] = o.SharedSecret
	}
	if !IsNil(o.UseAccounting) {
		toSerialize["use_accounting"] = o.UseAccounting
	}
	if !IsNil(o.UseMgmtPort) {
		toSerialize["use_mgmt_port"] = o.UseMgmtPort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RadiusAuthserviceServers) UnmarshalJSON(data []byte) (err error) {
	varRadiusAuthserviceServers := _RadiusAuthserviceServers{}

	err = json.Unmarshal(data, &varRadiusAuthserviceServers)

	if err != nil {
		return err
	}

	*o = RadiusAuthserviceServers(varRadiusAuthserviceServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acct_port")
		delete(additionalProperties, "auth_port")
		delete(additionalProperties, "auth_type")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "disable")
		delete(additionalProperties, "address")
		delete(additionalProperties, "shared_secret")
		delete(additionalProperties, "use_accounting")
		delete(additionalProperties, "use_mgmt_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRadiusAuthserviceServers struct {
	value *RadiusAuthserviceServers
	isSet bool
}

func (v NullableRadiusAuthserviceServers) Get() *RadiusAuthserviceServers {
	return v.value
}

func (v *NullableRadiusAuthserviceServers) Set(val *RadiusAuthserviceServers) {
	v.value = val
	v.isSet = true
}

func (v NullableRadiusAuthserviceServers) IsSet() bool {
	return v.isSet
}

func (v *NullableRadiusAuthserviceServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadiusAuthserviceServers(val *RadiusAuthserviceServers) *NullableRadiusAuthserviceServers {
	return &NullableRadiusAuthserviceServers{value: val, isSet: true}
}

func (v NullableRadiusAuthserviceServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadiusAuthserviceServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
