/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Userprofile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Userprofile{}

// Userprofile struct for Userprofile
type Userprofile struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines the active dashboard type.
	ActiveDashboardType *string `json:"active_dashboard_type,omitempty"`
	// The Admin Group object to which the admin belongs. An admin user can belong to only one admin group at a time.
	AdminGroup *string `json:"admin_group,omitempty"`
	// The number of days left before the admin's password expires.
	DaysToExpire *int32 `json:"days_to_expire,omitempty"`
	// The email address of the admin.
	Email *string `json:"email,omitempty"`
	// Determines if extensible attribute values will be returned by global search or not.
	GlobalSearchOnEa *bool `json:"global_search_on_ea,omitempty"`
	// Determines if global search will search for network insight devices and interfaces or not.
	GlobalSearchOnNiData *bool `json:"global_search_on_ni_data,omitempty"`
	// List of Admin Group objects that the current user is mapped to.
	GridAdminGroups []string `json:"grid_admin_groups,omitempty"`
	// The timestamp when the admin last logged in.
	LastLogin *int64 `json:"last_login,omitempty"`
	// Determines how many nodes are displayed at generation levels.
	LbTreeNodesAtGenLevel *int64 `json:"lb_tree_nodes_at_gen_level,omitempty"`
	// Determines how many nodes are displayed at the last level.
	LbTreeNodesAtLastLevel *int64 `json:"lb_tree_nodes_at_last_level,omitempty"`
	// The maximum count of widgets that can be added to one dashboard.
	MaxCountWidgets *int64 `json:"max_count_widgets,omitempty"`
	// The admin name.
	Name *string `json:"name,omitempty"`
	// The current password that will be replaced by a new password. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute.
	OldPassword *string `json:"old_password,omitempty"`
	// The new password of the admin. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute.
	Password *string `json:"password,omitempty"`
	// The number of lines of data a table or a single list view can contain.
	TableSize *int64 `json:"table_size,omitempty"`
	// The time zone of the admin user.
	TimeZone *string `json:"time_zone,omitempty"`
	// Use flag for: time_zone
	UseTimeZone *bool `json:"use_time_zone,omitempty"`
	// The admin type.
	UserType *string `json:"user_type,omitempty"`
}

// NewUserprofile instantiates a new Userprofile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserprofile() *Userprofile {
	this := Userprofile{}
	return &this
}

// NewUserprofileWithDefaults instantiates a new Userprofile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserprofileWithDefaults() *Userprofile {
	this := Userprofile{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Userprofile) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Userprofile) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Userprofile) SetRef(v string) {
	o.Ref = &v
}

// GetActiveDashboardType returns the ActiveDashboardType field value if set, zero value otherwise.
func (o *Userprofile) GetActiveDashboardType() string {
	if o == nil || IsNil(o.ActiveDashboardType) {
		var ret string
		return ret
	}
	return *o.ActiveDashboardType
}

// GetActiveDashboardTypeOk returns a tuple with the ActiveDashboardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetActiveDashboardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDashboardType) {
		return nil, false
	}
	return o.ActiveDashboardType, true
}

// HasActiveDashboardType returns a boolean if a field has been set.
func (o *Userprofile) HasActiveDashboardType() bool {
	if o != nil && !IsNil(o.ActiveDashboardType) {
		return true
	}

	return false
}

// SetActiveDashboardType gets a reference to the given string and assigns it to the ActiveDashboardType field.
func (o *Userprofile) SetActiveDashboardType(v string) {
	o.ActiveDashboardType = &v
}

// GetAdminGroup returns the AdminGroup field value if set, zero value otherwise.
func (o *Userprofile) GetAdminGroup() string {
	if o == nil || IsNil(o.AdminGroup) {
		var ret string
		return ret
	}
	return *o.AdminGroup
}

// GetAdminGroupOk returns a tuple with the AdminGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetAdminGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AdminGroup) {
		return nil, false
	}
	return o.AdminGroup, true
}

// HasAdminGroup returns a boolean if a field has been set.
func (o *Userprofile) HasAdminGroup() bool {
	if o != nil && !IsNil(o.AdminGroup) {
		return true
	}

	return false
}

// SetAdminGroup gets a reference to the given string and assigns it to the AdminGroup field.
func (o *Userprofile) SetAdminGroup(v string) {
	o.AdminGroup = &v
}

// GetDaysToExpire returns the DaysToExpire field value if set, zero value otherwise.
func (o *Userprofile) GetDaysToExpire() int32 {
	if o == nil || IsNil(o.DaysToExpire) {
		var ret int32
		return ret
	}
	return *o.DaysToExpire
}

// GetDaysToExpireOk returns a tuple with the DaysToExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetDaysToExpireOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysToExpire) {
		return nil, false
	}
	return o.DaysToExpire, true
}

// HasDaysToExpire returns a boolean if a field has been set.
func (o *Userprofile) HasDaysToExpire() bool {
	if o != nil && !IsNil(o.DaysToExpire) {
		return true
	}

	return false
}

// SetDaysToExpire gets a reference to the given int32 and assigns it to the DaysToExpire field.
func (o *Userprofile) SetDaysToExpire(v int32) {
	o.DaysToExpire = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Userprofile) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Userprofile) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Userprofile) SetEmail(v string) {
	o.Email = &v
}

// GetGlobalSearchOnEa returns the GlobalSearchOnEa field value if set, zero value otherwise.
func (o *Userprofile) GetGlobalSearchOnEa() bool {
	if o == nil || IsNil(o.GlobalSearchOnEa) {
		var ret bool
		return ret
	}
	return *o.GlobalSearchOnEa
}

// GetGlobalSearchOnEaOk returns a tuple with the GlobalSearchOnEa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetGlobalSearchOnEaOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalSearchOnEa) {
		return nil, false
	}
	return o.GlobalSearchOnEa, true
}

// HasGlobalSearchOnEa returns a boolean if a field has been set.
func (o *Userprofile) HasGlobalSearchOnEa() bool {
	if o != nil && !IsNil(o.GlobalSearchOnEa) {
		return true
	}

	return false
}

// SetGlobalSearchOnEa gets a reference to the given bool and assigns it to the GlobalSearchOnEa field.
func (o *Userprofile) SetGlobalSearchOnEa(v bool) {
	o.GlobalSearchOnEa = &v
}

// GetGlobalSearchOnNiData returns the GlobalSearchOnNiData field value if set, zero value otherwise.
func (o *Userprofile) GetGlobalSearchOnNiData() bool {
	if o == nil || IsNil(o.GlobalSearchOnNiData) {
		var ret bool
		return ret
	}
	return *o.GlobalSearchOnNiData
}

// GetGlobalSearchOnNiDataOk returns a tuple with the GlobalSearchOnNiData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetGlobalSearchOnNiDataOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalSearchOnNiData) {
		return nil, false
	}
	return o.GlobalSearchOnNiData, true
}

// HasGlobalSearchOnNiData returns a boolean if a field has been set.
func (o *Userprofile) HasGlobalSearchOnNiData() bool {
	if o != nil && !IsNil(o.GlobalSearchOnNiData) {
		return true
	}

	return false
}

// SetGlobalSearchOnNiData gets a reference to the given bool and assigns it to the GlobalSearchOnNiData field.
func (o *Userprofile) SetGlobalSearchOnNiData(v bool) {
	o.GlobalSearchOnNiData = &v
}

// GetGridAdminGroups returns the GridAdminGroups field value if set, zero value otherwise.
func (o *Userprofile) GetGridAdminGroups() []string {
	if o == nil || IsNil(o.GridAdminGroups) {
		var ret []string
		return ret
	}
	return o.GridAdminGroups
}

// GetGridAdminGroupsOk returns a tuple with the GridAdminGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetGridAdminGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.GridAdminGroups) {
		return nil, false
	}
	return o.GridAdminGroups, true
}

// HasGridAdminGroups returns a boolean if a field has been set.
func (o *Userprofile) HasGridAdminGroups() bool {
	if o != nil && !IsNil(o.GridAdminGroups) {
		return true
	}

	return false
}

// SetGridAdminGroups gets a reference to the given []string and assigns it to the GridAdminGroups field.
func (o *Userprofile) SetGridAdminGroups(v []string) {
	o.GridAdminGroups = v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *Userprofile) GetLastLogin() int64 {
	if o == nil || IsNil(o.LastLogin) {
		var ret int64
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetLastLoginOk() (*int64, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *Userprofile) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given int64 and assigns it to the LastLogin field.
func (o *Userprofile) SetLastLogin(v int64) {
	o.LastLogin = &v
}

// GetLbTreeNodesAtGenLevel returns the LbTreeNodesAtGenLevel field value if set, zero value otherwise.
func (o *Userprofile) GetLbTreeNodesAtGenLevel() int64 {
	if o == nil || IsNil(o.LbTreeNodesAtGenLevel) {
		var ret int64
		return ret
	}
	return *o.LbTreeNodesAtGenLevel
}

// GetLbTreeNodesAtGenLevelOk returns a tuple with the LbTreeNodesAtGenLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetLbTreeNodesAtGenLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.LbTreeNodesAtGenLevel) {
		return nil, false
	}
	return o.LbTreeNodesAtGenLevel, true
}

// HasLbTreeNodesAtGenLevel returns a boolean if a field has been set.
func (o *Userprofile) HasLbTreeNodesAtGenLevel() bool {
	if o != nil && !IsNil(o.LbTreeNodesAtGenLevel) {
		return true
	}

	return false
}

// SetLbTreeNodesAtGenLevel gets a reference to the given int64 and assigns it to the LbTreeNodesAtGenLevel field.
func (o *Userprofile) SetLbTreeNodesAtGenLevel(v int64) {
	o.LbTreeNodesAtGenLevel = &v
}

// GetLbTreeNodesAtLastLevel returns the LbTreeNodesAtLastLevel field value if set, zero value otherwise.
func (o *Userprofile) GetLbTreeNodesAtLastLevel() int64 {
	if o == nil || IsNil(o.LbTreeNodesAtLastLevel) {
		var ret int64
		return ret
	}
	return *o.LbTreeNodesAtLastLevel
}

// GetLbTreeNodesAtLastLevelOk returns a tuple with the LbTreeNodesAtLastLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetLbTreeNodesAtLastLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.LbTreeNodesAtLastLevel) {
		return nil, false
	}
	return o.LbTreeNodesAtLastLevel, true
}

// HasLbTreeNodesAtLastLevel returns a boolean if a field has been set.
func (o *Userprofile) HasLbTreeNodesAtLastLevel() bool {
	if o != nil && !IsNil(o.LbTreeNodesAtLastLevel) {
		return true
	}

	return false
}

// SetLbTreeNodesAtLastLevel gets a reference to the given int64 and assigns it to the LbTreeNodesAtLastLevel field.
func (o *Userprofile) SetLbTreeNodesAtLastLevel(v int64) {
	o.LbTreeNodesAtLastLevel = &v
}

// GetMaxCountWidgets returns the MaxCountWidgets field value if set, zero value otherwise.
func (o *Userprofile) GetMaxCountWidgets() int64 {
	if o == nil || IsNil(o.MaxCountWidgets) {
		var ret int64
		return ret
	}
	return *o.MaxCountWidgets
}

// GetMaxCountWidgetsOk returns a tuple with the MaxCountWidgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetMaxCountWidgetsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCountWidgets) {
		return nil, false
	}
	return o.MaxCountWidgets, true
}

// HasMaxCountWidgets returns a boolean if a field has been set.
func (o *Userprofile) HasMaxCountWidgets() bool {
	if o != nil && !IsNil(o.MaxCountWidgets) {
		return true
	}

	return false
}

// SetMaxCountWidgets gets a reference to the given int64 and assigns it to the MaxCountWidgets field.
func (o *Userprofile) SetMaxCountWidgets(v int64) {
	o.MaxCountWidgets = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Userprofile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Userprofile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Userprofile) SetName(v string) {
	o.Name = &v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *Userprofile) GetOldPassword() string {
	if o == nil || IsNil(o.OldPassword) {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetOldPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OldPassword) {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *Userprofile) HasOldPassword() bool {
	if o != nil && !IsNil(o.OldPassword) {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *Userprofile) SetOldPassword(v string) {
	o.OldPassword = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Userprofile) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Userprofile) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Userprofile) SetPassword(v string) {
	o.Password = &v
}

// GetTableSize returns the TableSize field value if set, zero value otherwise.
func (o *Userprofile) GetTableSize() int64 {
	if o == nil || IsNil(o.TableSize) {
		var ret int64
		return ret
	}
	return *o.TableSize
}

// GetTableSizeOk returns a tuple with the TableSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetTableSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.TableSize) {
		return nil, false
	}
	return o.TableSize, true
}

// HasTableSize returns a boolean if a field has been set.
func (o *Userprofile) HasTableSize() bool {
	if o != nil && !IsNil(o.TableSize) {
		return true
	}

	return false
}

// SetTableSize gets a reference to the given int64 and assigns it to the TableSize field.
func (o *Userprofile) SetTableSize(v int64) {
	o.TableSize = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Userprofile) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Userprofile) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Userprofile) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetUseTimeZone returns the UseTimeZone field value if set, zero value otherwise.
func (o *Userprofile) GetUseTimeZone() bool {
	if o == nil || IsNil(o.UseTimeZone) {
		var ret bool
		return ret
	}
	return *o.UseTimeZone
}

// GetUseTimeZoneOk returns a tuple with the UseTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetUseTimeZoneOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTimeZone) {
		return nil, false
	}
	return o.UseTimeZone, true
}

// HasUseTimeZone returns a boolean if a field has been set.
func (o *Userprofile) HasUseTimeZone() bool {
	if o != nil && !IsNil(o.UseTimeZone) {
		return true
	}

	return false
}

// SetUseTimeZone gets a reference to the given bool and assigns it to the UseTimeZone field.
func (o *Userprofile) SetUseTimeZone(v bool) {
	o.UseTimeZone = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *Userprofile) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Userprofile) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *Userprofile) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *Userprofile) SetUserType(v string) {
	o.UserType = &v
}

func (o Userprofile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Userprofile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ActiveDashboardType) {
		toSerialize["active_dashboard_type"] = o.ActiveDashboardType
	}
	if !IsNil(o.AdminGroup) {
		toSerialize["admin_group"] = o.AdminGroup
	}
	if !IsNil(o.DaysToExpire) {
		toSerialize["days_to_expire"] = o.DaysToExpire
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.GlobalSearchOnEa) {
		toSerialize["global_search_on_ea"] = o.GlobalSearchOnEa
	}
	if !IsNil(o.GlobalSearchOnNiData) {
		toSerialize["global_search_on_ni_data"] = o.GlobalSearchOnNiData
	}
	if !IsNil(o.GridAdminGroups) {
		toSerialize["grid_admin_groups"] = o.GridAdminGroups
	}
	if !IsNil(o.LastLogin) {
		toSerialize["last_login"] = o.LastLogin
	}
	if !IsNil(o.LbTreeNodesAtGenLevel) {
		toSerialize["lb_tree_nodes_at_gen_level"] = o.LbTreeNodesAtGenLevel
	}
	if !IsNil(o.LbTreeNodesAtLastLevel) {
		toSerialize["lb_tree_nodes_at_last_level"] = o.LbTreeNodesAtLastLevel
	}
	if !IsNil(o.MaxCountWidgets) {
		toSerialize["max_count_widgets"] = o.MaxCountWidgets
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OldPassword) {
		toSerialize["old_password"] = o.OldPassword
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.TableSize) {
		toSerialize["table_size"] = o.TableSize
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.UseTimeZone) {
		toSerialize["use_time_zone"] = o.UseTimeZone
	}
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	return toSerialize, nil
}

type NullableUserprofile struct {
	value *Userprofile
	isSet bool
}

func (v NullableUserprofile) Get() *Userprofile {
	return v.value
}

func (v *NullableUserprofile) Set(val *Userprofile) {
	v.value = val
	v.isSet = true
}

func (v NullableUserprofile) IsSet() bool {
	return v.isSet
}

func (v *NullableUserprofile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserprofile(val *Userprofile) *NullableUserprofile {
	return &NullableUserprofile{value: val, isSet: true}
}

func (v NullableUserprofile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserprofile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
