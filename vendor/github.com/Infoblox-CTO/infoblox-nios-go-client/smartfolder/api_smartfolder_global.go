/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Infoblox-CTO/infoblox-nios-go-client/internal"
)

type SmartfolderGlobalAPI interface {
	/*
		Create Create a smartfolder:global object

		Creates a new smartfolder:global object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderGlobalAPICreateRequest
	*/
	Create(ctx context.Context) SmartfolderGlobalAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateSmartfolderGlobalResponse
	CreateExecute(r SmartfolderGlobalAPICreateRequest) (*CreateSmartfolderGlobalResponse, *http.Response, error)
	/*
		Delete Delete a smartfolder:global object

		Deletes a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) SmartfolderGlobalAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r SmartfolderGlobalAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve smartfolder:global objects

		Returns a list of smartfolder:global objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderGlobalAPIListRequest
	*/
	List(ctx context.Context) SmartfolderGlobalAPIListRequest

	// ListExecute executes the request
	//  @return ListSmartfolderGlobalResponse
	ListExecute(r SmartfolderGlobalAPIListRequest) (*ListSmartfolderGlobalResponse, *http.Response, error)
	/*
		Read Get a specific smartfolder:global object

		Returns a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPIReadRequest
	*/
	Read(ctx context.Context, reference string) SmartfolderGlobalAPIReadRequest

	// ReadExecute executes the request
	//  @return GetSmartfolderGlobalResponse
	ReadExecute(r SmartfolderGlobalAPIReadRequest) (*GetSmartfolderGlobalResponse, *http.Response, error)
	/*
		Update Update a smartfolder:global object

		Updates a specific smartfolder:global object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:global object
		@return SmartfolderGlobalAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) SmartfolderGlobalAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateSmartfolderGlobalResponse
	UpdateExecute(r SmartfolderGlobalAPIUpdateRequest) (*UpdateSmartfolderGlobalResponse, *http.Response, error)
}

// SmartfolderGlobalAPIService SmartfolderGlobalAPI service
type SmartfolderGlobalAPIService internal.Service

type SmartfolderGlobalAPICreateRequest struct {
	ctx               context.Context
	ApiService        SmartfolderGlobalAPI
	smartfolderGlobal *SmartfolderGlobal
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to create
func (r SmartfolderGlobalAPICreateRequest) SmartfolderGlobal(smartfolderGlobal SmartfolderGlobal) SmartfolderGlobalAPICreateRequest {
	r.smartfolderGlobal = &smartfolderGlobal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPICreateRequest) ReturnFields(returnFields string) SmartfolderGlobalAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderGlobalAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPICreateRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPICreateRequest) Execute() (*CreateSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a smartfolder:global object

Creates a new smartfolder:global object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderGlobalAPICreateRequest
*/
func (a *SmartfolderGlobalAPIService) Create(ctx context.Context) SmartfolderGlobalAPICreateRequest {
	return SmartfolderGlobalAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) CreateExecute(r SmartfolderGlobalAPICreateRequest) (*CreateSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderGlobal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderGlobal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderGlobal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPIDeleteRequest struct {
	ctx        context.Context
	ApiService SmartfolderGlobalAPI
	reference  string
}

func (r SmartfolderGlobalAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a smartfolder:global object

Deletes a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPIDeleteRequest
*/
func (a *SmartfolderGlobalAPIService) Delete(ctx context.Context, reference string) SmartfolderGlobalAPIDeleteRequest {
	return SmartfolderGlobalAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SmartfolderGlobalAPIService) DeleteExecute(r SmartfolderGlobalAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SmartfolderGlobalAPIListRequest struct {
	ctx              context.Context
	ApiService       SmartfolderGlobalAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPIListRequest) ReturnFields(returnFields string) SmartfolderGlobalAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderGlobalAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r SmartfolderGlobalAPIListRequest) MaxResults(maxResults int32) SmartfolderGlobalAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPIListRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SmartfolderGlobalAPIListRequest) Paging(paging int32) SmartfolderGlobalAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SmartfolderGlobalAPIListRequest) PageId(pageId string) SmartfolderGlobalAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r SmartfolderGlobalAPIListRequest) Filters(filters map[string]interface{}) SmartfolderGlobalAPIListRequest {
	r.filters = &filters
	return r
}

func (r SmartfolderGlobalAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) SmartfolderGlobalAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SmartfolderGlobalAPIListRequest) Execute() (*ListSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve smartfolder:global objects

Returns a list of smartfolder:global objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderGlobalAPIListRequest
*/
func (a *SmartfolderGlobalAPIService) List(ctx context.Context) SmartfolderGlobalAPIListRequest {
	return SmartfolderGlobalAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) ListExecute(r SmartfolderGlobalAPIListRequest) (*ListSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPIReadRequest struct {
	ctx              context.Context
	ApiService       SmartfolderGlobalAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPIReadRequest) ReturnFields(returnFields string) SmartfolderGlobalAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderGlobalAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPIReadRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPIReadRequest) Execute() (*GetSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific smartfolder:global object

Returns a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPIReadRequest
*/
func (a *SmartfolderGlobalAPIService) Read(ctx context.Context, reference string) SmartfolderGlobalAPIReadRequest {
	return SmartfolderGlobalAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) ReadExecute(r SmartfolderGlobalAPIReadRequest) (*GetSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderGlobalAPIUpdateRequest struct {
	ctx               context.Context
	ApiService        SmartfolderGlobalAPI
	reference         string
	smartfolderGlobal *SmartfolderGlobal
	returnFields      *string
	returnFieldsPlus  *string
	returnAsObject    *int32
}

// Object data to update
func (r SmartfolderGlobalAPIUpdateRequest) SmartfolderGlobal(smartfolderGlobal SmartfolderGlobal) SmartfolderGlobalAPIUpdateRequest {
	r.smartfolderGlobal = &smartfolderGlobal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderGlobalAPIUpdateRequest) ReturnFields(returnFields string) SmartfolderGlobalAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderGlobalAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderGlobalAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderGlobalAPIUpdateRequest) ReturnAsObject(returnAsObject int32) SmartfolderGlobalAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderGlobalAPIUpdateRequest) Execute() (*UpdateSmartfolderGlobalResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a smartfolder:global object

Updates a specific smartfolder:global object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:global object
	@return SmartfolderGlobalAPIUpdateRequest
*/
func (a *SmartfolderGlobalAPIService) Update(ctx context.Context, reference string) SmartfolderGlobalAPIUpdateRequest {
	return SmartfolderGlobalAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSmartfolderGlobalResponse
func (a *SmartfolderGlobalAPIService) UpdateExecute(r SmartfolderGlobalAPIUpdateRequest) (*UpdateSmartfolderGlobalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSmartfolderGlobalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderGlobalAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:global/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderGlobal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderGlobal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderGlobal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
