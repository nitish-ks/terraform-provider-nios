/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
	"fmt"
)

// ListSmartfolderPersonalResponse - struct for ListSmartfolderPersonalResponse
type ListSmartfolderPersonalResponse struct {
	ListSmartfolderPersonalResponseObject *ListSmartfolderPersonalResponseObject
	ArrayOfSmartfolderPersonal            *[]SmartfolderPersonal
}

// ListSmartfolderPersonalResponseObjectAsListSmartfolderPersonalResponse is a convenience function that returns ListSmartfolderPersonalResponseObject wrapped in ListSmartfolderPersonalResponse
func ListSmartfolderPersonalResponseObjectAsListSmartfolderPersonalResponse(v *ListSmartfolderPersonalResponseObject) ListSmartfolderPersonalResponse {
	return ListSmartfolderPersonalResponse{
		ListSmartfolderPersonalResponseObject: v,
	}
}

// []SmartfolderPersonalAsListSmartfolderPersonalResponse is a convenience function that returns []SmartfolderPersonal wrapped in ListSmartfolderPersonalResponse
func ArrayOfSmartfolderPersonalAsListSmartfolderPersonalResponse(v *[]SmartfolderPersonal) ListSmartfolderPersonalResponse {
	return ListSmartfolderPersonalResponse{
		ArrayOfSmartfolderPersonal: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSmartfolderPersonalResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSmartfolderPersonalResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSmartfolderPersonalResponseObject)
	if err == nil {
		jsonListSmartfolderPersonalResponseObject, _ := json.Marshal(dst.ListSmartfolderPersonalResponseObject)
		if string(jsonListSmartfolderPersonalResponseObject) == "{}" { // empty struct
			dst.ListSmartfolderPersonalResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSmartfolderPersonalResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSmartfolderPersonal
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSmartfolderPersonal)
	if err == nil {
		jsonArrayOfSmartfolderPersonal, _ := json.Marshal(dst.ArrayOfSmartfolderPersonal)
		if string(jsonArrayOfSmartfolderPersonal) == "{}" { // empty struct
			dst.ArrayOfSmartfolderPersonal = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSmartfolderPersonal = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSmartfolderPersonalResponseObject = nil
		dst.ArrayOfSmartfolderPersonal = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSmartfolderPersonalResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSmartfolderPersonalResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSmartfolderPersonalResponse) MarshalJSON() ([]byte, error) {
	if src.ListSmartfolderPersonalResponseObject != nil {
		return json.Marshal(&src.ListSmartfolderPersonalResponseObject)
	}

	if src.ArrayOfSmartfolderPersonal != nil {
		return json.Marshal(&src.ArrayOfSmartfolderPersonal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSmartfolderPersonalResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSmartfolderPersonalResponseObject != nil {
		return obj.ListSmartfolderPersonalResponseObject
	}

	if obj.ArrayOfSmartfolderPersonal != nil {
		return obj.ArrayOfSmartfolderPersonal
	}

	// all schemas are nil
	return nil
}

type NullableListSmartfolderPersonalResponse struct {
	value *ListSmartfolderPersonalResponse
	isSet bool
}

func (v NullableListSmartfolderPersonalResponse) Get() *ListSmartfolderPersonalResponse {
	return v.value
}

func (v *NullableListSmartfolderPersonalResponse) Set(val *ListSmartfolderPersonalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSmartfolderPersonalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSmartfolderPersonalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSmartfolderPersonalResponse(val *ListSmartfolderPersonalResponse) *NullableListSmartfolderPersonalResponse {
	return &NullableListSmartfolderPersonalResponse{value: val, isSet: true}
}

func (v NullableListSmartfolderPersonalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSmartfolderPersonalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
