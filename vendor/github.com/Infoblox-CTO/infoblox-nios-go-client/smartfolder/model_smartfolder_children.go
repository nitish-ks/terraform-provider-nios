/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
)

// checks if the SmartfolderChildren type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartfolderChildren{}

// SmartfolderChildren struct for SmartfolderChildren
type SmartfolderChildren struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The object retuned by the Smart Folder query.
	Resource *string                   `json:"resource,omitempty"`
	Value    *SmartfolderChildrenValue `json:"value,omitempty"`
	// The type of the returned value.
	ValueType *string `json:"value_type,omitempty"`
}

// NewSmartfolderChildren instantiates a new SmartfolderChildren object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartfolderChildren() *SmartfolderChildren {
	this := SmartfolderChildren{}
	return &this
}

// NewSmartfolderChildrenWithDefaults instantiates a new SmartfolderChildren object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartfolderChildrenWithDefaults() *SmartfolderChildren {
	this := SmartfolderChildren{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SmartfolderChildren) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildren) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SmartfolderChildren) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SmartfolderChildren) SetRef(v string) {
	o.Ref = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SmartfolderChildren) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildren) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SmartfolderChildren) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *SmartfolderChildren) SetResource(v string) {
	o.Resource = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SmartfolderChildren) GetValue() SmartfolderChildrenValue {
	if o == nil || IsNil(o.Value) {
		var ret SmartfolderChildrenValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildren) GetValueOk() (*SmartfolderChildrenValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SmartfolderChildren) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given SmartfolderChildrenValue and assigns it to the Value field.
func (o *SmartfolderChildren) SetValue(v SmartfolderChildrenValue) {
	o.Value = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SmartfolderChildren) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildren) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SmartfolderChildren) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *SmartfolderChildren) SetValueType(v string) {
	o.ValueType = &v
}

func (o SmartfolderChildren) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartfolderChildren) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueType) {
		toSerialize["value_type"] = o.ValueType
	}
	return toSerialize, nil
}

type NullableSmartfolderChildren struct {
	value *SmartfolderChildren
	isSet bool
}

func (v NullableSmartfolderChildren) Get() *SmartfolderChildren {
	return v.value
}

func (v *NullableSmartfolderChildren) Set(val *SmartfolderChildren) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartfolderChildren) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartfolderChildren) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartfolderChildren(val *SmartfolderChildren) *NullableSmartfolderChildren {
	return &NullableSmartfolderChildren{value: val, isSet: true}
}

func (v NullableSmartfolderChildren) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartfolderChildren) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
