/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
)

// checks if the SmartfolderGlobal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartfolderGlobal{}

// SmartfolderGlobal struct for SmartfolderGlobal
type SmartfolderGlobal struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The global Smart Folder descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// Global Smart Folder grouping rules.
	GroupBys []SmartfolderGlobalGroupBys `json:"group_bys,omitempty"`
	// The global Smart Folder name.
	Name *string `json:"name,omitempty"`
	// The global Smart Folder filter queries.
	QueryItems []SmartfolderGlobalQueryItems `json:"query_items,omitempty"`
}

// NewSmartfolderGlobal instantiates a new SmartfolderGlobal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartfolderGlobal() *SmartfolderGlobal {
	this := SmartfolderGlobal{}
	return &this
}

// NewSmartfolderGlobalWithDefaults instantiates a new SmartfolderGlobal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartfolderGlobalWithDefaults() *SmartfolderGlobal {
	this := SmartfolderGlobal{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SmartfolderGlobal) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderGlobal) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SmartfolderGlobal) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SmartfolderGlobal) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SmartfolderGlobal) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderGlobal) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SmartfolderGlobal) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SmartfolderGlobal) SetComment(v string) {
	o.Comment = &v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *SmartfolderGlobal) GetGroupBys() []SmartfolderGlobalGroupBys {
	if o == nil || IsNil(o.GroupBys) {
		var ret []SmartfolderGlobalGroupBys
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderGlobal) GetGroupBysOk() ([]SmartfolderGlobalGroupBys, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *SmartfolderGlobal) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []SmartfolderGlobalGroupBys and assigns it to the GroupBys field.
func (o *SmartfolderGlobal) SetGroupBys(v []SmartfolderGlobalGroupBys) {
	o.GroupBys = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartfolderGlobal) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderGlobal) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartfolderGlobal) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartfolderGlobal) SetName(v string) {
	o.Name = &v
}

// GetQueryItems returns the QueryItems field value if set, zero value otherwise.
func (o *SmartfolderGlobal) GetQueryItems() []SmartfolderGlobalQueryItems {
	if o == nil || IsNil(o.QueryItems) {
		var ret []SmartfolderGlobalQueryItems
		return ret
	}
	return o.QueryItems
}

// GetQueryItemsOk returns a tuple with the QueryItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderGlobal) GetQueryItemsOk() ([]SmartfolderGlobalQueryItems, bool) {
	if o == nil || IsNil(o.QueryItems) {
		return nil, false
	}
	return o.QueryItems, true
}

// HasQueryItems returns a boolean if a field has been set.
func (o *SmartfolderGlobal) HasQueryItems() bool {
	if o != nil && !IsNil(o.QueryItems) {
		return true
	}

	return false
}

// SetQueryItems gets a reference to the given []SmartfolderGlobalQueryItems and assigns it to the QueryItems field.
func (o *SmartfolderGlobal) SetQueryItems(v []SmartfolderGlobalQueryItems) {
	o.QueryItems = v
}

func (o SmartfolderGlobal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartfolderGlobal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.GroupBys) {
		toSerialize["group_bys"] = o.GroupBys
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QueryItems) {
		toSerialize["query_items"] = o.QueryItems
	}
	return toSerialize, nil
}

type NullableSmartfolderGlobal struct {
	value *SmartfolderGlobal
	isSet bool
}

func (v NullableSmartfolderGlobal) Get() *SmartfolderGlobal {
	return v.value
}

func (v *NullableSmartfolderGlobal) Set(val *SmartfolderGlobal) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartfolderGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartfolderGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartfolderGlobal(val *SmartfolderGlobal) *NullableSmartfolderGlobal {
	return &NullableSmartfolderGlobal{value: val, isSet: true}
}

func (v NullableSmartfolderGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartfolderGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
