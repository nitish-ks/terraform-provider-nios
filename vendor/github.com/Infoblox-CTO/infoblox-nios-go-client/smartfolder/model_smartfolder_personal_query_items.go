/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
)

// checks if the SmartfolderPersonalQueryItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartfolderPersonalQueryItems{}

// SmartfolderPersonalQueryItems struct for SmartfolderPersonalQueryItems
type SmartfolderPersonalQueryItems struct {
	// The Smart Folder query name.
	Name *string `json:"name,omitempty"`
	// The Smart Folder query field type.
	FieldType *string `json:"field_type,omitempty"`
	// The Smart Folder operator used in query.
	Operator *string `json:"operator,omitempty"`
	// Determines whether the query operator should match.
	OpMatch *bool `json:"op_match,omitempty"`
	// The Smart Folder query value type.
	ValueType            *string                             `json:"value_type,omitempty"`
	Value                *SmartfolderpersonalqueryitemsValue `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartfolderPersonalQueryItems SmartfolderPersonalQueryItems

// NewSmartfolderPersonalQueryItems instantiates a new SmartfolderPersonalQueryItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartfolderPersonalQueryItems() *SmartfolderPersonalQueryItems {
	this := SmartfolderPersonalQueryItems{}
	return &this
}

// NewSmartfolderPersonalQueryItemsWithDefaults instantiates a new SmartfolderPersonalQueryItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartfolderPersonalQueryItemsWithDefaults() *SmartfolderPersonalQueryItems {
	this := SmartfolderPersonalQueryItems{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartfolderPersonalQueryItems) SetName(v string) {
	o.Name = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *SmartfolderPersonalQueryItems) SetFieldType(v string) {
	o.FieldType = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *SmartfolderPersonalQueryItems) SetOperator(v string) {
	o.Operator = &v
}

// GetOpMatch returns the OpMatch field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetOpMatch() bool {
	if o == nil || IsNil(o.OpMatch) {
		var ret bool
		return ret
	}
	return *o.OpMatch
}

// GetOpMatchOk returns a tuple with the OpMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetOpMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.OpMatch) {
		return nil, false
	}
	return o.OpMatch, true
}

// HasOpMatch returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasOpMatch() bool {
	if o != nil && !IsNil(o.OpMatch) {
		return true
	}

	return false
}

// SetOpMatch gets a reference to the given bool and assigns it to the OpMatch field.
func (o *SmartfolderPersonalQueryItems) SetOpMatch(v bool) {
	o.OpMatch = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *SmartfolderPersonalQueryItems) SetValueType(v string) {
	o.ValueType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SmartfolderPersonalQueryItems) GetValue() SmartfolderpersonalqueryitemsValue {
	if o == nil || IsNil(o.Value) {
		var ret SmartfolderpersonalqueryitemsValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonalQueryItems) GetValueOk() (*SmartfolderpersonalqueryitemsValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SmartfolderPersonalQueryItems) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given SmartfolderpersonalqueryitemsValue and assigns it to the Value field.
func (o *SmartfolderPersonalQueryItems) SetValue(v SmartfolderpersonalqueryitemsValue) {
	o.Value = &v
}

func (o SmartfolderPersonalQueryItems) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartfolderPersonalQueryItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.OpMatch) {
		toSerialize["op_match"] = o.OpMatch
	}
	if !IsNil(o.ValueType) {
		toSerialize["value_type"] = o.ValueType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmartfolderPersonalQueryItems) UnmarshalJSON(data []byte) (err error) {
	varSmartfolderPersonalQueryItems := _SmartfolderPersonalQueryItems{}

	err = json.Unmarshal(data, &varSmartfolderPersonalQueryItems)

	if err != nil {
		return err
	}

	*o = SmartfolderPersonalQueryItems(varSmartfolderPersonalQueryItems)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "field_type")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "op_match")
		delete(additionalProperties, "value_type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartfolderPersonalQueryItems struct {
	value *SmartfolderPersonalQueryItems
	isSet bool
}

func (v NullableSmartfolderPersonalQueryItems) Get() *SmartfolderPersonalQueryItems {
	return v.value
}

func (v *NullableSmartfolderPersonalQueryItems) Set(val *SmartfolderPersonalQueryItems) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartfolderPersonalQueryItems) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartfolderPersonalQueryItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartfolderPersonalQueryItems(val *SmartfolderPersonalQueryItems) *NullableSmartfolderPersonalQueryItems {
	return &NullableSmartfolderPersonalQueryItems{value: val, isSet: true}
}

func (v NullableSmartfolderPersonalQueryItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartfolderPersonalQueryItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
