/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"encoding/json"
	"fmt"
)

// ListThreatinsightModulesetResponse - struct for ListThreatinsightModulesetResponse
type ListThreatinsightModulesetResponse struct {
	ListThreatinsightModulesetResponseObject *ListThreatinsightModulesetResponseObject
	ArrayOfThreatinsightModuleset            *[]ThreatinsightModuleset
}

// ListThreatinsightModulesetResponseObjectAsListThreatinsightModulesetResponse is a convenience function that returns ListThreatinsightModulesetResponseObject wrapped in ListThreatinsightModulesetResponse
func ListThreatinsightModulesetResponseObjectAsListThreatinsightModulesetResponse(v *ListThreatinsightModulesetResponseObject) ListThreatinsightModulesetResponse {
	return ListThreatinsightModulesetResponse{
		ListThreatinsightModulesetResponseObject: v,
	}
}

// []ThreatinsightModulesetAsListThreatinsightModulesetResponse is a convenience function that returns []ThreatinsightModuleset wrapped in ListThreatinsightModulesetResponse
func ArrayOfThreatinsightModulesetAsListThreatinsightModulesetResponse(v *[]ThreatinsightModuleset) ListThreatinsightModulesetResponse {
	return ListThreatinsightModulesetResponse{
		ArrayOfThreatinsightModuleset: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListThreatinsightModulesetResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListThreatinsightModulesetResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListThreatinsightModulesetResponseObject)
	if err == nil {
		jsonListThreatinsightModulesetResponseObject, _ := json.Marshal(dst.ListThreatinsightModulesetResponseObject)
		if string(jsonListThreatinsightModulesetResponseObject) == "{}" { // empty struct
			dst.ListThreatinsightModulesetResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListThreatinsightModulesetResponseObject = nil
	}

	// try to unmarshal data into ArrayOfThreatinsightModuleset
	err = newStrictDecoder(data).Decode(&dst.ArrayOfThreatinsightModuleset)
	if err == nil {
		jsonArrayOfThreatinsightModuleset, _ := json.Marshal(dst.ArrayOfThreatinsightModuleset)
		if string(jsonArrayOfThreatinsightModuleset) == "{}" { // empty struct
			dst.ArrayOfThreatinsightModuleset = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfThreatinsightModuleset = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListThreatinsightModulesetResponseObject = nil
		dst.ArrayOfThreatinsightModuleset = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListThreatinsightModulesetResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListThreatinsightModulesetResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListThreatinsightModulesetResponse) MarshalJSON() ([]byte, error) {
	if src.ListThreatinsightModulesetResponseObject != nil {
		return json.Marshal(&src.ListThreatinsightModulesetResponseObject)
	}

	if src.ArrayOfThreatinsightModuleset != nil {
		return json.Marshal(&src.ArrayOfThreatinsightModuleset)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListThreatinsightModulesetResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListThreatinsightModulesetResponseObject != nil {
		return obj.ListThreatinsightModulesetResponseObject
	}

	if obj.ArrayOfThreatinsightModuleset != nil {
		return obj.ArrayOfThreatinsightModuleset
	}

	// all schemas are nil
	return nil
}

type NullableListThreatinsightModulesetResponse struct {
	value *ListThreatinsightModulesetResponse
	isSet bool
}

func (v NullableListThreatinsightModulesetResponse) Get() *ListThreatinsightModulesetResponse {
	return v.value
}

func (v *NullableListThreatinsightModulesetResponse) Set(val *ListThreatinsightModulesetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListThreatinsightModulesetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListThreatinsightModulesetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListThreatinsightModulesetResponse(val *ListThreatinsightModulesetResponse) *NullableListThreatinsightModulesetResponse {
	return &NullableListThreatinsightModulesetResponse{value: val, isSet: true}
}

func (v NullableListThreatinsightModulesetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListThreatinsightModulesetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
