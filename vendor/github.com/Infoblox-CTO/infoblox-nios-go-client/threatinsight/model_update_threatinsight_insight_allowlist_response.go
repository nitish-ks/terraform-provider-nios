/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"encoding/json"
	"fmt"
)

// UpdateThreatinsightInsightAllowlistResponse - struct for UpdateThreatinsightInsightAllowlistResponse
type UpdateThreatinsightInsightAllowlistResponse struct {
	UpdateThreatinsightInsightAllowlistResponseAsObject *UpdateThreatinsightInsightAllowlistResponseAsObject
	String                                              *string
}

// UpdateThreatinsightInsightAllowlistResponseAsObjectAsUpdateThreatinsightInsightAllowlistResponse is a convenience function that returns UpdateThreatinsightInsightAllowlistResponseAsObject wrapped in UpdateThreatinsightInsightAllowlistResponse
func UpdateThreatinsightInsightAllowlistResponseAsObjectAsUpdateThreatinsightInsightAllowlistResponse(v *UpdateThreatinsightInsightAllowlistResponseAsObject) UpdateThreatinsightInsightAllowlistResponse {
	return UpdateThreatinsightInsightAllowlistResponse{
		UpdateThreatinsightInsightAllowlistResponseAsObject: v,
	}
}

// stringAsUpdateThreatinsightInsightAllowlistResponse is a convenience function that returns string wrapped in UpdateThreatinsightInsightAllowlistResponse
func StringAsUpdateThreatinsightInsightAllowlistResponse(v *string) UpdateThreatinsightInsightAllowlistResponse {
	return UpdateThreatinsightInsightAllowlistResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateThreatinsightInsightAllowlistResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateThreatinsightInsightAllowlistResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateThreatinsightInsightAllowlistResponseAsObject)
	if err == nil {
		jsonUpdateThreatinsightInsightAllowlistResponseAsObject, _ := json.Marshal(dst.UpdateThreatinsightInsightAllowlistResponseAsObject)
		if string(jsonUpdateThreatinsightInsightAllowlistResponseAsObject) == "{}" { // empty struct
			dst.UpdateThreatinsightInsightAllowlistResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateThreatinsightInsightAllowlistResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateThreatinsightInsightAllowlistResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateThreatinsightInsightAllowlistResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateThreatinsightInsightAllowlistResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateThreatinsightInsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateThreatinsightInsightAllowlistResponseAsObject != nil {
		return json.Marshal(&src.UpdateThreatinsightInsightAllowlistResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateThreatinsightInsightAllowlistResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateThreatinsightInsightAllowlistResponseAsObject != nil {
		return obj.UpdateThreatinsightInsightAllowlistResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateThreatinsightInsightAllowlistResponse struct {
	value *UpdateThreatinsightInsightAllowlistResponse
	isSet bool
}

func (v NullableUpdateThreatinsightInsightAllowlistResponse) Get() *UpdateThreatinsightInsightAllowlistResponse {
	return v.value
}

func (v *NullableUpdateThreatinsightInsightAllowlistResponse) Set(val *UpdateThreatinsightInsightAllowlistResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateThreatinsightInsightAllowlistResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateThreatinsightInsightAllowlistResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateThreatinsightInsightAllowlistResponse(val *UpdateThreatinsightInsightAllowlistResponse) *NullableUpdateThreatinsightInsightAllowlistResponse {
	return &NullableUpdateThreatinsightInsightAllowlistResponse{value: val, isSet: true}
}

func (v NullableUpdateThreatinsightInsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateThreatinsightInsightAllowlistResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
