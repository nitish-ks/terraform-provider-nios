/*
Infoblox ACL API

OpenAPI specification for Infoblox NIOS WAPI ACL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package acl

import (
	"encoding/json"
)

// checks if the CreateNamedaclResponseAsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNamedaclResponseAsObject{}

// CreateNamedaclResponseAsObject The response format to create __Namedacl__ in object format.
type CreateNamedaclResponseAsObject struct {
	Result               *Namedacl `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNamedaclResponseAsObject CreateNamedaclResponseAsObject

// NewCreateNamedaclResponseAsObject instantiates a new CreateNamedaclResponseAsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNamedaclResponseAsObject() *CreateNamedaclResponseAsObject {
	this := CreateNamedaclResponseAsObject{}
	return &this
}

// NewCreateNamedaclResponseAsObjectWithDefaults instantiates a new CreateNamedaclResponseAsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNamedaclResponseAsObjectWithDefaults() *CreateNamedaclResponseAsObject {
	this := CreateNamedaclResponseAsObject{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CreateNamedaclResponseAsObject) GetResult() Namedacl {
	if o == nil || IsNil(o.Result) {
		var ret Namedacl
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNamedaclResponseAsObject) GetResultOk() (*Namedacl, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CreateNamedaclResponseAsObject) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given Namedacl and assigns it to the Result field.
func (o *CreateNamedaclResponseAsObject) SetResult(v Namedacl) {
	o.Result = &v
}

func (o CreateNamedaclResponseAsObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNamedaclResponseAsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNamedaclResponseAsObject) UnmarshalJSON(data []byte) (err error) {
	varCreateNamedaclResponseAsObject := _CreateNamedaclResponseAsObject{}

	err = json.Unmarshal(data, &varCreateNamedaclResponseAsObject)

	if err != nil {
		return err
	}

	*o = CreateNamedaclResponseAsObject(varCreateNamedaclResponseAsObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNamedaclResponseAsObject struct {
	value *CreateNamedaclResponseAsObject
	isSet bool
}

func (v NullableCreateNamedaclResponseAsObject) Get() *CreateNamedaclResponseAsObject {
	return v.value
}

func (v *NullableCreateNamedaclResponseAsObject) Set(val *CreateNamedaclResponseAsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNamedaclResponseAsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNamedaclResponseAsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNamedaclResponseAsObject(val *CreateNamedaclResponseAsObject) *NullableCreateNamedaclResponseAsObject {
	return &NullableCreateNamedaclResponseAsObject{value: val, isSet: true}
}

func (v NullableCreateNamedaclResponseAsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNamedaclResponseAsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
