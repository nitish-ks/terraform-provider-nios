/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
)

// checks if the Awsuser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Awsuser{}

// Awsuser struct for Awsuser
type Awsuser struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The unique Access Key ID of this AWS user. Maximum 255 characters.
	AccessKeyId *string `json:"access_key_id,omitempty"`
	// The AWS Account ID of this AWS user. Maximum 64 characters.
	AccountId *string `json:"account_id,omitempty"`
	// Indicates if gov cloud is enabled or disabled.
	GovcloudEnabled *bool `json:"govcloud_enabled,omitempty"`
	// The timestamp when this AWS user credentials was last used.
	LastUsed *int64 `json:"last_used,omitempty"`
	// The AWS user name. Maximum 64 characters.
	Name *string `json:"name,omitempty"`
	// The NIOS user name mapped to this AWS user. Maximum 64 characters.
	NiosUserName *string `json:"nios_user_name,omitempty"`
	// The Secret Access Key for the Access Key ID of this user. Maximum 255 characters.
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
	// Indicate the validity status of this AWS user.
	Status *string `json:"status,omitempty"`
}

// NewAwsuser instantiates a new Awsuser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsuser() *Awsuser {
	this := Awsuser{}
	return &this
}

// NewAwsuserWithDefaults instantiates a new Awsuser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsuserWithDefaults() *Awsuser {
	this := Awsuser{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Awsuser) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Awsuser) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Awsuser) SetRef(v string) {
	o.Ref = &v
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise.
func (o *Awsuser) GetAccessKeyId() string {
	if o == nil || IsNil(o.AccessKeyId) {
		var ret string
		return ret
	}
	return *o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetAccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKeyId) {
		return nil, false
	}
	return o.AccessKeyId, true
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *Awsuser) HasAccessKeyId() bool {
	if o != nil && !IsNil(o.AccessKeyId) {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given string and assigns it to the AccessKeyId field.
func (o *Awsuser) SetAccessKeyId(v string) {
	o.AccessKeyId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Awsuser) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Awsuser) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Awsuser) SetAccountId(v string) {
	o.AccountId = &v
}

// GetGovcloudEnabled returns the GovcloudEnabled field value if set, zero value otherwise.
func (o *Awsuser) GetGovcloudEnabled() bool {
	if o == nil || IsNil(o.GovcloudEnabled) {
		var ret bool
		return ret
	}
	return *o.GovcloudEnabled
}

// GetGovcloudEnabledOk returns a tuple with the GovcloudEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetGovcloudEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GovcloudEnabled) {
		return nil, false
	}
	return o.GovcloudEnabled, true
}

// HasGovcloudEnabled returns a boolean if a field has been set.
func (o *Awsuser) HasGovcloudEnabled() bool {
	if o != nil && !IsNil(o.GovcloudEnabled) {
		return true
	}

	return false
}

// SetGovcloudEnabled gets a reference to the given bool and assigns it to the GovcloudEnabled field.
func (o *Awsuser) SetGovcloudEnabled(v bool) {
	o.GovcloudEnabled = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *Awsuser) GetLastUsed() int64 {
	if o == nil || IsNil(o.LastUsed) {
		var ret int64
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetLastUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *Awsuser) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given int64 and assigns it to the LastUsed field.
func (o *Awsuser) SetLastUsed(v int64) {
	o.LastUsed = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Awsuser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Awsuser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Awsuser) SetName(v string) {
	o.Name = &v
}

// GetNiosUserName returns the NiosUserName field value if set, zero value otherwise.
func (o *Awsuser) GetNiosUserName() string {
	if o == nil || IsNil(o.NiosUserName) {
		var ret string
		return ret
	}
	return *o.NiosUserName
}

// GetNiosUserNameOk returns a tuple with the NiosUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetNiosUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.NiosUserName) {
		return nil, false
	}
	return o.NiosUserName, true
}

// HasNiosUserName returns a boolean if a field has been set.
func (o *Awsuser) HasNiosUserName() bool {
	if o != nil && !IsNil(o.NiosUserName) {
		return true
	}

	return false
}

// SetNiosUserName gets a reference to the given string and assigns it to the NiosUserName field.
func (o *Awsuser) SetNiosUserName(v string) {
	o.NiosUserName = &v
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise.
func (o *Awsuser) GetSecretAccessKey() string {
	if o == nil || IsNil(o.SecretAccessKey) {
		var ret string
		return ret
	}
	return *o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretAccessKey) {
		return nil, false
	}
	return o.SecretAccessKey, true
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *Awsuser) HasSecretAccessKey() bool {
	if o != nil && !IsNil(o.SecretAccessKey) {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given string and assigns it to the SecretAccessKey field.
func (o *Awsuser) SetSecretAccessKey(v string) {
	o.SecretAccessKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Awsuser) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Awsuser) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Awsuser) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Awsuser) SetStatus(v string) {
	o.Status = &v
}

func (o Awsuser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Awsuser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AccessKeyId) {
		toSerialize["access_key_id"] = o.AccessKeyId
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.GovcloudEnabled) {
		toSerialize["govcloud_enabled"] = o.GovcloudEnabled
	}
	if !IsNil(o.LastUsed) {
		toSerialize["last_used"] = o.LastUsed
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NiosUserName) {
		toSerialize["nios_user_name"] = o.NiosUserName
	}
	if !IsNil(o.SecretAccessKey) {
		toSerialize["secret_access_key"] = o.SecretAccessKey
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAwsuser struct {
	value *Awsuser
	isSet bool
}

func (v NullableAwsuser) Get() *Awsuser {
	return v.value
}

func (v *NullableAwsuser) Set(val *Awsuser) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsuser) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsuser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsuser(val *Awsuser) *NullableAwsuser {
	return &NullableAwsuser{value: val, isSet: true}
}

func (v NullableAwsuser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsuser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
