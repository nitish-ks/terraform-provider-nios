/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
)

// checks if the GcpdnstaskgroupTaskList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpdnstaskgroupTaskList{}

// GcpdnstaskgroupTaskList struct for GcpdnstaskgroupTaskList
type GcpdnstaskgroupTaskList struct {
	// The name of this task.
	Name *string `json:"name,omitempty"`
	// Indicates if the task is enabled or disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Current overall state of this task.
	State *string `json:"state,omitempty"`
	// State message of the complete process.
	StateMsg *string `json:"state_msg,omitempty"`
	// Zone filter for this task.
	Filter *string `json:"filter,omitempty"`
	// Periodic interval for this task.
	ScheduleInterval *int64 `json:"schedule_interval,omitempty"`
	// Units for the schedule interval.
	ScheduleUnits *string `json:"schedule_units,omitempty"`
	// Reference to associated Gcp user whose credentials are to be used for this task.
	GcpUser *string `json:"gcp_user,omitempty"`
	// The timestamp when the last state was logged.
	StatusTimestamp *int64 `json:"status_timestamp,omitempty"`
	// The timestamp when the task was started last.
	LastRun *int64 `json:"last_run,omitempty"`
	// Current overlay state of this task.
	OverlayState *string `json:"overlay_state,omitempty"`
	// Timestamp when the last overlay state was updated.
	OverlayStatusTimestamp *int64 `json:"overlay_status_timestamp,omitempty"`
	// Current state of this task. Not accounting child tasks.
	DnsSyncState *string `json:"dns_sync_state,omitempty"`
	// Timestamp when the last state was updated. Not accounting child tasks.
	DnsSyncStatusTimestamp *int64 `json:"dns_sync_status_timestamp,omitempty"`
	// Current state of project sync for this task.
	ProjectSyncState *string `json:"project_sync_state,omitempty"`
	// Timestamp when the last state was updated. Not accounting child tasks.
	ProjectSyncStatusTimestamp *int64 `json:"project_sync_status_timestamp,omitempty"`
	// Indicates whether public zones are synchronized.
	SyncPublicZones *bool `json:"sync_public_zones,omitempty"`
	// Indicates whether private zones are synchronized.
	SyncPrivateZones *bool `json:"sync_private_zones,omitempty"`
	// Minimum delay between synchronization with Gcp DNS (in seconds).
	SyncInterval *int64 `json:"sync_interval,omitempty"`
	// Number of overall zones successfully synced by this Gcp DNS sync task and it's child tasks.
	ZoneCount *int64 `json:"zone_count,omitempty"`
	// Number of zones successfully synced by this Gcp DNS sync task.
	DnsSyncZoneCount *int64 `json:"dns_sync_zone_count,omitempty"`
	// Credentials type used for connecting to the cloud management platform.
	CredentialsType      *string `json:"credentials_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GcpdnstaskgroupTaskList GcpdnstaskgroupTaskList

// NewGcpdnstaskgroupTaskList instantiates a new GcpdnstaskgroupTaskList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpdnstaskgroupTaskList() *GcpdnstaskgroupTaskList {
	this := GcpdnstaskgroupTaskList{}
	return &this
}

// NewGcpdnstaskgroupTaskListWithDefaults instantiates a new GcpdnstaskgroupTaskList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpdnstaskgroupTaskListWithDefaults() *GcpdnstaskgroupTaskList {
	this := GcpdnstaskgroupTaskList{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GcpdnstaskgroupTaskList) SetName(v string) {
	o.Name = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *GcpdnstaskgroupTaskList) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GcpdnstaskgroupTaskList) SetState(v string) {
	o.State = &v
}

// GetStateMsg returns the StateMsg field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetStateMsg() string {
	if o == nil || IsNil(o.StateMsg) {
		var ret string
		return ret
	}
	return *o.StateMsg
}

// GetStateMsgOk returns a tuple with the StateMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetStateMsgOk() (*string, bool) {
	if o == nil || IsNil(o.StateMsg) {
		return nil, false
	}
	return o.StateMsg, true
}

// HasStateMsg returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasStateMsg() bool {
	if o != nil && !IsNil(o.StateMsg) {
		return true
	}

	return false
}

// SetStateMsg gets a reference to the given string and assigns it to the StateMsg field.
func (o *GcpdnstaskgroupTaskList) SetStateMsg(v string) {
	o.StateMsg = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *GcpdnstaskgroupTaskList) SetFilter(v string) {
	o.Filter = &v
}

// GetScheduleInterval returns the ScheduleInterval field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetScheduleInterval() int64 {
	if o == nil || IsNil(o.ScheduleInterval) {
		var ret int64
		return ret
	}
	return *o.ScheduleInterval
}

// GetScheduleIntervalOk returns a tuple with the ScheduleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetScheduleIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.ScheduleInterval) {
		return nil, false
	}
	return o.ScheduleInterval, true
}

// HasScheduleInterval returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasScheduleInterval() bool {
	if o != nil && !IsNil(o.ScheduleInterval) {
		return true
	}

	return false
}

// SetScheduleInterval gets a reference to the given int64 and assigns it to the ScheduleInterval field.
func (o *GcpdnstaskgroupTaskList) SetScheduleInterval(v int64) {
	o.ScheduleInterval = &v
}

// GetScheduleUnits returns the ScheduleUnits field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetScheduleUnits() string {
	if o == nil || IsNil(o.ScheduleUnits) {
		var ret string
		return ret
	}
	return *o.ScheduleUnits
}

// GetScheduleUnitsOk returns a tuple with the ScheduleUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetScheduleUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleUnits) {
		return nil, false
	}
	return o.ScheduleUnits, true
}

// HasScheduleUnits returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasScheduleUnits() bool {
	if o != nil && !IsNil(o.ScheduleUnits) {
		return true
	}

	return false
}

// SetScheduleUnits gets a reference to the given string and assigns it to the ScheduleUnits field.
func (o *GcpdnstaskgroupTaskList) SetScheduleUnits(v string) {
	o.ScheduleUnits = &v
}

// GetGcpUser returns the GcpUser field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetGcpUser() string {
	if o == nil || IsNil(o.GcpUser) {
		var ret string
		return ret
	}
	return *o.GcpUser
}

// GetGcpUserOk returns a tuple with the GcpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetGcpUserOk() (*string, bool) {
	if o == nil || IsNil(o.GcpUser) {
		return nil, false
	}
	return o.GcpUser, true
}

// HasGcpUser returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasGcpUser() bool {
	if o != nil && !IsNil(o.GcpUser) {
		return true
	}

	return false
}

// SetGcpUser gets a reference to the given string and assigns it to the GcpUser field.
func (o *GcpdnstaskgroupTaskList) SetGcpUser(v string) {
	o.GcpUser = &v
}

// GetStatusTimestamp returns the StatusTimestamp field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetStatusTimestamp() int64 {
	if o == nil || IsNil(o.StatusTimestamp) {
		var ret int64
		return ret
	}
	return *o.StatusTimestamp
}

// GetStatusTimestampOk returns a tuple with the StatusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetStatusTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusTimestamp) {
		return nil, false
	}
	return o.StatusTimestamp, true
}

// HasStatusTimestamp returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasStatusTimestamp() bool {
	if o != nil && !IsNil(o.StatusTimestamp) {
		return true
	}

	return false
}

// SetStatusTimestamp gets a reference to the given int64 and assigns it to the StatusTimestamp field.
func (o *GcpdnstaskgroupTaskList) SetStatusTimestamp(v int64) {
	o.StatusTimestamp = &v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetLastRun() int64 {
	if o == nil || IsNil(o.LastRun) {
		var ret int64
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetLastRunOk() (*int64, bool) {
	if o == nil || IsNil(o.LastRun) {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasLastRun() bool {
	if o != nil && !IsNil(o.LastRun) {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given int64 and assigns it to the LastRun field.
func (o *GcpdnstaskgroupTaskList) SetLastRun(v int64) {
	o.LastRun = &v
}

// GetOverlayState returns the OverlayState field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetOverlayState() string {
	if o == nil || IsNil(o.OverlayState) {
		var ret string
		return ret
	}
	return *o.OverlayState
}

// GetOverlayStateOk returns a tuple with the OverlayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetOverlayStateOk() (*string, bool) {
	if o == nil || IsNil(o.OverlayState) {
		return nil, false
	}
	return o.OverlayState, true
}

// HasOverlayState returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasOverlayState() bool {
	if o != nil && !IsNil(o.OverlayState) {
		return true
	}

	return false
}

// SetOverlayState gets a reference to the given string and assigns it to the OverlayState field.
func (o *GcpdnstaskgroupTaskList) SetOverlayState(v string) {
	o.OverlayState = &v
}

// GetOverlayStatusTimestamp returns the OverlayStatusTimestamp field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetOverlayStatusTimestamp() int64 {
	if o == nil || IsNil(o.OverlayStatusTimestamp) {
		var ret int64
		return ret
	}
	return *o.OverlayStatusTimestamp
}

// GetOverlayStatusTimestampOk returns a tuple with the OverlayStatusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetOverlayStatusTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.OverlayStatusTimestamp) {
		return nil, false
	}
	return o.OverlayStatusTimestamp, true
}

// HasOverlayStatusTimestamp returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasOverlayStatusTimestamp() bool {
	if o != nil && !IsNil(o.OverlayStatusTimestamp) {
		return true
	}

	return false
}

// SetOverlayStatusTimestamp gets a reference to the given int64 and assigns it to the OverlayStatusTimestamp field.
func (o *GcpdnstaskgroupTaskList) SetOverlayStatusTimestamp(v int64) {
	o.OverlayStatusTimestamp = &v
}

// GetDnsSyncState returns the DnsSyncState field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncState() string {
	if o == nil || IsNil(o.DnsSyncState) {
		var ret string
		return ret
	}
	return *o.DnsSyncState
}

// GetDnsSyncStateOk returns a tuple with the DnsSyncState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncStateOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSyncState) {
		return nil, false
	}
	return o.DnsSyncState, true
}

// HasDnsSyncState returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasDnsSyncState() bool {
	if o != nil && !IsNil(o.DnsSyncState) {
		return true
	}

	return false
}

// SetDnsSyncState gets a reference to the given string and assigns it to the DnsSyncState field.
func (o *GcpdnstaskgroupTaskList) SetDnsSyncState(v string) {
	o.DnsSyncState = &v
}

// GetDnsSyncStatusTimestamp returns the DnsSyncStatusTimestamp field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncStatusTimestamp() int64 {
	if o == nil || IsNil(o.DnsSyncStatusTimestamp) {
		var ret int64
		return ret
	}
	return *o.DnsSyncStatusTimestamp
}

// GetDnsSyncStatusTimestampOk returns a tuple with the DnsSyncStatusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncStatusTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsSyncStatusTimestamp) {
		return nil, false
	}
	return o.DnsSyncStatusTimestamp, true
}

// HasDnsSyncStatusTimestamp returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasDnsSyncStatusTimestamp() bool {
	if o != nil && !IsNil(o.DnsSyncStatusTimestamp) {
		return true
	}

	return false
}

// SetDnsSyncStatusTimestamp gets a reference to the given int64 and assigns it to the DnsSyncStatusTimestamp field.
func (o *GcpdnstaskgroupTaskList) SetDnsSyncStatusTimestamp(v int64) {
	o.DnsSyncStatusTimestamp = &v
}

// GetProjectSyncState returns the ProjectSyncState field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetProjectSyncState() string {
	if o == nil || IsNil(o.ProjectSyncState) {
		var ret string
		return ret
	}
	return *o.ProjectSyncState
}

// GetProjectSyncStateOk returns a tuple with the ProjectSyncState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetProjectSyncStateOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectSyncState) {
		return nil, false
	}
	return o.ProjectSyncState, true
}

// HasProjectSyncState returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasProjectSyncState() bool {
	if o != nil && !IsNil(o.ProjectSyncState) {
		return true
	}

	return false
}

// SetProjectSyncState gets a reference to the given string and assigns it to the ProjectSyncState field.
func (o *GcpdnstaskgroupTaskList) SetProjectSyncState(v string) {
	o.ProjectSyncState = &v
}

// GetProjectSyncStatusTimestamp returns the ProjectSyncStatusTimestamp field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetProjectSyncStatusTimestamp() int64 {
	if o == nil || IsNil(o.ProjectSyncStatusTimestamp) {
		var ret int64
		return ret
	}
	return *o.ProjectSyncStatusTimestamp
}

// GetProjectSyncStatusTimestampOk returns a tuple with the ProjectSyncStatusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetProjectSyncStatusTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectSyncStatusTimestamp) {
		return nil, false
	}
	return o.ProjectSyncStatusTimestamp, true
}

// HasProjectSyncStatusTimestamp returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasProjectSyncStatusTimestamp() bool {
	if o != nil && !IsNil(o.ProjectSyncStatusTimestamp) {
		return true
	}

	return false
}

// SetProjectSyncStatusTimestamp gets a reference to the given int64 and assigns it to the ProjectSyncStatusTimestamp field.
func (o *GcpdnstaskgroupTaskList) SetProjectSyncStatusTimestamp(v int64) {
	o.ProjectSyncStatusTimestamp = &v
}

// GetSyncPublicZones returns the SyncPublicZones field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetSyncPublicZones() bool {
	if o == nil || IsNil(o.SyncPublicZones) {
		var ret bool
		return ret
	}
	return *o.SyncPublicZones
}

// GetSyncPublicZonesOk returns a tuple with the SyncPublicZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetSyncPublicZonesOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncPublicZones) {
		return nil, false
	}
	return o.SyncPublicZones, true
}

// HasSyncPublicZones returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasSyncPublicZones() bool {
	if o != nil && !IsNil(o.SyncPublicZones) {
		return true
	}

	return false
}

// SetSyncPublicZones gets a reference to the given bool and assigns it to the SyncPublicZones field.
func (o *GcpdnstaskgroupTaskList) SetSyncPublicZones(v bool) {
	o.SyncPublicZones = &v
}

// GetSyncPrivateZones returns the SyncPrivateZones field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetSyncPrivateZones() bool {
	if o == nil || IsNil(o.SyncPrivateZones) {
		var ret bool
		return ret
	}
	return *o.SyncPrivateZones
}

// GetSyncPrivateZonesOk returns a tuple with the SyncPrivateZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetSyncPrivateZonesOk() (*bool, bool) {
	if o == nil || IsNil(o.SyncPrivateZones) {
		return nil, false
	}
	return o.SyncPrivateZones, true
}

// HasSyncPrivateZones returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasSyncPrivateZones() bool {
	if o != nil && !IsNil(o.SyncPrivateZones) {
		return true
	}

	return false
}

// SetSyncPrivateZones gets a reference to the given bool and assigns it to the SyncPrivateZones field.
func (o *GcpdnstaskgroupTaskList) SetSyncPrivateZones(v bool) {
	o.SyncPrivateZones = &v
}

// GetSyncInterval returns the SyncInterval field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetSyncInterval() int64 {
	if o == nil || IsNil(o.SyncInterval) {
		var ret int64
		return ret
	}
	return *o.SyncInterval
}

// GetSyncIntervalOk returns a tuple with the SyncInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetSyncIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.SyncInterval) {
		return nil, false
	}
	return o.SyncInterval, true
}

// HasSyncInterval returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasSyncInterval() bool {
	if o != nil && !IsNil(o.SyncInterval) {
		return true
	}

	return false
}

// SetSyncInterval gets a reference to the given int64 and assigns it to the SyncInterval field.
func (o *GcpdnstaskgroupTaskList) SetSyncInterval(v int64) {
	o.SyncInterval = &v
}

// GetZoneCount returns the ZoneCount field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetZoneCount() int64 {
	if o == nil || IsNil(o.ZoneCount) {
		var ret int64
		return ret
	}
	return *o.ZoneCount
}

// GetZoneCountOk returns a tuple with the ZoneCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetZoneCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ZoneCount) {
		return nil, false
	}
	return o.ZoneCount, true
}

// HasZoneCount returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasZoneCount() bool {
	if o != nil && !IsNil(o.ZoneCount) {
		return true
	}

	return false
}

// SetZoneCount gets a reference to the given int64 and assigns it to the ZoneCount field.
func (o *GcpdnstaskgroupTaskList) SetZoneCount(v int64) {
	o.ZoneCount = &v
}

// GetDnsSyncZoneCount returns the DnsSyncZoneCount field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncZoneCount() int64 {
	if o == nil || IsNil(o.DnsSyncZoneCount) {
		var ret int64
		return ret
	}
	return *o.DnsSyncZoneCount
}

// GetDnsSyncZoneCountOk returns a tuple with the DnsSyncZoneCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetDnsSyncZoneCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DnsSyncZoneCount) {
		return nil, false
	}
	return o.DnsSyncZoneCount, true
}

// HasDnsSyncZoneCount returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasDnsSyncZoneCount() bool {
	if o != nil && !IsNil(o.DnsSyncZoneCount) {
		return true
	}

	return false
}

// SetDnsSyncZoneCount gets a reference to the given int64 and assigns it to the DnsSyncZoneCount field.
func (o *GcpdnstaskgroupTaskList) SetDnsSyncZoneCount(v int64) {
	o.DnsSyncZoneCount = &v
}

// GetCredentialsType returns the CredentialsType field value if set, zero value otherwise.
func (o *GcpdnstaskgroupTaskList) GetCredentialsType() string {
	if o == nil || IsNil(o.CredentialsType) {
		var ret string
		return ret
	}
	return *o.CredentialsType
}

// GetCredentialsTypeOk returns a tuple with the CredentialsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpdnstaskgroupTaskList) GetCredentialsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialsType) {
		return nil, false
	}
	return o.CredentialsType, true
}

// HasCredentialsType returns a boolean if a field has been set.
func (o *GcpdnstaskgroupTaskList) HasCredentialsType() bool {
	if o != nil && !IsNil(o.CredentialsType) {
		return true
	}

	return false
}

// SetCredentialsType gets a reference to the given string and assigns it to the CredentialsType field.
func (o *GcpdnstaskgroupTaskList) SetCredentialsType(v string) {
	o.CredentialsType = &v
}

func (o GcpdnstaskgroupTaskList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpdnstaskgroupTaskList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StateMsg) {
		toSerialize["state_msg"] = o.StateMsg
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.ScheduleInterval) {
		toSerialize["schedule_interval"] = o.ScheduleInterval
	}
	if !IsNil(o.ScheduleUnits) {
		toSerialize["schedule_units"] = o.ScheduleUnits
	}
	if !IsNil(o.GcpUser) {
		toSerialize["gcp_user"] = o.GcpUser
	}
	if !IsNil(o.StatusTimestamp) {
		toSerialize["status_timestamp"] = o.StatusTimestamp
	}
	if !IsNil(o.LastRun) {
		toSerialize["last_run"] = o.LastRun
	}
	if !IsNil(o.OverlayState) {
		toSerialize["overlay_state"] = o.OverlayState
	}
	if !IsNil(o.OverlayStatusTimestamp) {
		toSerialize["overlay_status_timestamp"] = o.OverlayStatusTimestamp
	}
	if !IsNil(o.DnsSyncState) {
		toSerialize["dns_sync_state"] = o.DnsSyncState
	}
	if !IsNil(o.DnsSyncStatusTimestamp) {
		toSerialize["dns_sync_status_timestamp"] = o.DnsSyncStatusTimestamp
	}
	if !IsNil(o.ProjectSyncState) {
		toSerialize["project_sync_state"] = o.ProjectSyncState
	}
	if !IsNil(o.ProjectSyncStatusTimestamp) {
		toSerialize["project_sync_status_timestamp"] = o.ProjectSyncStatusTimestamp
	}
	if !IsNil(o.SyncPublicZones) {
		toSerialize["sync_public_zones"] = o.SyncPublicZones
	}
	if !IsNil(o.SyncPrivateZones) {
		toSerialize["sync_private_zones"] = o.SyncPrivateZones
	}
	if !IsNil(o.SyncInterval) {
		toSerialize["sync_interval"] = o.SyncInterval
	}
	if !IsNil(o.ZoneCount) {
		toSerialize["zone_count"] = o.ZoneCount
	}
	if !IsNil(o.DnsSyncZoneCount) {
		toSerialize["dns_sync_zone_count"] = o.DnsSyncZoneCount
	}
	if !IsNil(o.CredentialsType) {
		toSerialize["credentials_type"] = o.CredentialsType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GcpdnstaskgroupTaskList) UnmarshalJSON(data []byte) (err error) {
	varGcpdnstaskgroupTaskList := _GcpdnstaskgroupTaskList{}

	err = json.Unmarshal(data, &varGcpdnstaskgroupTaskList)

	if err != nil {
		return err
	}

	*o = GcpdnstaskgroupTaskList(varGcpdnstaskgroupTaskList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "state")
		delete(additionalProperties, "state_msg")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "schedule_interval")
		delete(additionalProperties, "schedule_units")
		delete(additionalProperties, "gcp_user")
		delete(additionalProperties, "status_timestamp")
		delete(additionalProperties, "last_run")
		delete(additionalProperties, "overlay_state")
		delete(additionalProperties, "overlay_status_timestamp")
		delete(additionalProperties, "dns_sync_state")
		delete(additionalProperties, "dns_sync_status_timestamp")
		delete(additionalProperties, "project_sync_state")
		delete(additionalProperties, "project_sync_status_timestamp")
		delete(additionalProperties, "sync_public_zones")
		delete(additionalProperties, "sync_private_zones")
		delete(additionalProperties, "sync_interval")
		delete(additionalProperties, "zone_count")
		delete(additionalProperties, "dns_sync_zone_count")
		delete(additionalProperties, "credentials_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGcpdnstaskgroupTaskList struct {
	value *GcpdnstaskgroupTaskList
	isSet bool
}

func (v NullableGcpdnstaskgroupTaskList) Get() *GcpdnstaskgroupTaskList {
	return v.value
}

func (v *NullableGcpdnstaskgroupTaskList) Set(val *GcpdnstaskgroupTaskList) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpdnstaskgroupTaskList) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpdnstaskgroupTaskList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpdnstaskgroupTaskList(val *GcpdnstaskgroupTaskList) *NullableGcpdnstaskgroupTaskList {
	return &NullableGcpdnstaskgroupTaskList{value: val, isSet: true}
}

func (v NullableGcpdnstaskgroupTaskList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpdnstaskgroupTaskList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
