/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
)

// checks if the Gcpuser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gcpuser{}

// Gcpuser struct for Gcpuser
type Gcpuser struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The URL where the public key certificates provided by the authentication provider can be retrieved.. Maximum 255 characters.
	AuthProviderX509CertUrl *string `json:"auth_provider_x509_cert_url,omitempty"`
	// The URI where authentication requests should be directed.. Maximum 255 characters.
	AuthUri *string `json:"auth_uri,omitempty"`
	// The email address associated with the service account. Maximum 255 characters.
	ClientEmail *string `json:"client_email,omitempty"`
	// The unique identifier for the service account. Maximum 64 characts.er
	ClientId *string `json:"client_id,omitempty"`
	// The URL where the public key certificate for the service account can be retrieved. Maximum 255 characters.
	ClientX509CertUrl *string `json:"client_x509_cert_url,omitempty"`
	// GCP client credentials file name.. Maximum 255 characters.
	FileName *string `json:"file_name,omitempty"`
	// The timestamp when this Azure user credentials was last used.
	LastUsed *int64 `json:"last_used,omitempty"`
	// The private key used for authentication. Maximum 255 characters.
	PrivateKey *string `json:"private_key,omitempty"`
	// The identifier for the private key associated with the service account. Maximum 64 characters.
	PrivateKeyId *string `json:"private_key_id,omitempty"`
	// The ID of the GCP project associated with the service account. Maximum 64 characters.
	ProjectId *string `json:"project_id,omitempty"`
	// Indicate the validity status of this GCP user.
	Status *string `json:"status,omitempty"`
	// The URI where token requests should be directed.. Maximum 255 characters.
	TokenUri *string `json:"token_uri,omitempty"`
	// Specifies the type of the credential. Maximum 255 characters.
	Type *string `json:"type,omitempty"`
	// The GCP client's user name. Maximum 64 characters.
	UserName *string `json:"user_name,omitempty"`
}

// NewGcpuser instantiates a new Gcpuser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpuser() *Gcpuser {
	this := Gcpuser{}
	return &this
}

// NewGcpuserWithDefaults instantiates a new Gcpuser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpuserWithDefaults() *Gcpuser {
	this := Gcpuser{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Gcpuser) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Gcpuser) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Gcpuser) SetRef(v string) {
	o.Ref = &v
}

// GetAuthProviderX509CertUrl returns the AuthProviderX509CertUrl field value if set, zero value otherwise.
func (o *Gcpuser) GetAuthProviderX509CertUrl() string {
	if o == nil || IsNil(o.AuthProviderX509CertUrl) {
		var ret string
		return ret
	}
	return *o.AuthProviderX509CertUrl
}

// GetAuthProviderX509CertUrlOk returns a tuple with the AuthProviderX509CertUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetAuthProviderX509CertUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthProviderX509CertUrl) {
		return nil, false
	}
	return o.AuthProviderX509CertUrl, true
}

// HasAuthProviderX509CertUrl returns a boolean if a field has been set.
func (o *Gcpuser) HasAuthProviderX509CertUrl() bool {
	if o != nil && !IsNil(o.AuthProviderX509CertUrl) {
		return true
	}

	return false
}

// SetAuthProviderX509CertUrl gets a reference to the given string and assigns it to the AuthProviderX509CertUrl field.
func (o *Gcpuser) SetAuthProviderX509CertUrl(v string) {
	o.AuthProviderX509CertUrl = &v
}

// GetAuthUri returns the AuthUri field value if set, zero value otherwise.
func (o *Gcpuser) GetAuthUri() string {
	if o == nil || IsNil(o.AuthUri) {
		var ret string
		return ret
	}
	return *o.AuthUri
}

// GetAuthUriOk returns a tuple with the AuthUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetAuthUriOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUri) {
		return nil, false
	}
	return o.AuthUri, true
}

// HasAuthUri returns a boolean if a field has been set.
func (o *Gcpuser) HasAuthUri() bool {
	if o != nil && !IsNil(o.AuthUri) {
		return true
	}

	return false
}

// SetAuthUri gets a reference to the given string and assigns it to the AuthUri field.
func (o *Gcpuser) SetAuthUri(v string) {
	o.AuthUri = &v
}

// GetClientEmail returns the ClientEmail field value if set, zero value otherwise.
func (o *Gcpuser) GetClientEmail() string {
	if o == nil || IsNil(o.ClientEmail) {
		var ret string
		return ret
	}
	return *o.ClientEmail
}

// GetClientEmailOk returns a tuple with the ClientEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetClientEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ClientEmail) {
		return nil, false
	}
	return o.ClientEmail, true
}

// HasClientEmail returns a boolean if a field has been set.
func (o *Gcpuser) HasClientEmail() bool {
	if o != nil && !IsNil(o.ClientEmail) {
		return true
	}

	return false
}

// SetClientEmail gets a reference to the given string and assigns it to the ClientEmail field.
func (o *Gcpuser) SetClientEmail(v string) {
	o.ClientEmail = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Gcpuser) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Gcpuser) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Gcpuser) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientX509CertUrl returns the ClientX509CertUrl field value if set, zero value otherwise.
func (o *Gcpuser) GetClientX509CertUrl() string {
	if o == nil || IsNil(o.ClientX509CertUrl) {
		var ret string
		return ret
	}
	return *o.ClientX509CertUrl
}

// GetClientX509CertUrlOk returns a tuple with the ClientX509CertUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetClientX509CertUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ClientX509CertUrl) {
		return nil, false
	}
	return o.ClientX509CertUrl, true
}

// HasClientX509CertUrl returns a boolean if a field has been set.
func (o *Gcpuser) HasClientX509CertUrl() bool {
	if o != nil && !IsNil(o.ClientX509CertUrl) {
		return true
	}

	return false
}

// SetClientX509CertUrl gets a reference to the given string and assigns it to the ClientX509CertUrl field.
func (o *Gcpuser) SetClientX509CertUrl(v string) {
	o.ClientX509CertUrl = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *Gcpuser) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *Gcpuser) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *Gcpuser) SetFileName(v string) {
	o.FileName = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *Gcpuser) GetLastUsed() int64 {
	if o == nil || IsNil(o.LastUsed) {
		var ret int64
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetLastUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *Gcpuser) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given int64 and assigns it to the LastUsed field.
func (o *Gcpuser) SetLastUsed(v int64) {
	o.LastUsed = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *Gcpuser) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *Gcpuser) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *Gcpuser) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetPrivateKeyId returns the PrivateKeyId field value if set, zero value otherwise.
func (o *Gcpuser) GetPrivateKeyId() string {
	if o == nil || IsNil(o.PrivateKeyId) {
		var ret string
		return ret
	}
	return *o.PrivateKeyId
}

// GetPrivateKeyIdOk returns a tuple with the PrivateKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetPrivateKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKeyId) {
		return nil, false
	}
	return o.PrivateKeyId, true
}

// HasPrivateKeyId returns a boolean if a field has been set.
func (o *Gcpuser) HasPrivateKeyId() bool {
	if o != nil && !IsNil(o.PrivateKeyId) {
		return true
	}

	return false
}

// SetPrivateKeyId gets a reference to the given string and assigns it to the PrivateKeyId field.
func (o *Gcpuser) SetPrivateKeyId(v string) {
	o.PrivateKeyId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Gcpuser) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Gcpuser) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Gcpuser) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Gcpuser) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Gcpuser) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Gcpuser) SetStatus(v string) {
	o.Status = &v
}

// GetTokenUri returns the TokenUri field value if set, zero value otherwise.
func (o *Gcpuser) GetTokenUri() string {
	if o == nil || IsNil(o.TokenUri) {
		var ret string
		return ret
	}
	return *o.TokenUri
}

// GetTokenUriOk returns a tuple with the TokenUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetTokenUriOk() (*string, bool) {
	if o == nil || IsNil(o.TokenUri) {
		return nil, false
	}
	return o.TokenUri, true
}

// HasTokenUri returns a boolean if a field has been set.
func (o *Gcpuser) HasTokenUri() bool {
	if o != nil && !IsNil(o.TokenUri) {
		return true
	}

	return false
}

// SetTokenUri gets a reference to the given string and assigns it to the TokenUri field.
func (o *Gcpuser) SetTokenUri(v string) {
	o.TokenUri = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Gcpuser) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Gcpuser) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Gcpuser) SetType(v string) {
	o.Type = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *Gcpuser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gcpuser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *Gcpuser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *Gcpuser) SetUserName(v string) {
	o.UserName = &v
}

func (o Gcpuser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gcpuser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AuthProviderX509CertUrl) {
		toSerialize["auth_provider_x509_cert_url"] = o.AuthProviderX509CertUrl
	}
	if !IsNil(o.AuthUri) {
		toSerialize["auth_uri"] = o.AuthUri
	}
	if !IsNil(o.ClientEmail) {
		toSerialize["client_email"] = o.ClientEmail
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.ClientX509CertUrl) {
		toSerialize["client_x509_cert_url"] = o.ClientX509CertUrl
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.LastUsed) {
		toSerialize["last_used"] = o.LastUsed
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	if !IsNil(o.PrivateKeyId) {
		toSerialize["private_key_id"] = o.PrivateKeyId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TokenUri) {
		toSerialize["token_uri"] = o.TokenUri
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

type NullableGcpuser struct {
	value *Gcpuser
	isSet bool
}

func (v NullableGcpuser) Get() *Gcpuser {
	return v.value
}

func (v *NullableGcpuser) Set(val *Gcpuser) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpuser) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpuser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpuser(val *Gcpuser) *NullableGcpuser {
	return &NullableGcpuser{value: val, isSet: true}
}

func (v NullableGcpuser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpuser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
