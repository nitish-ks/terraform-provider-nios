/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetAzureuserResponse - struct for GetAzureuserResponse
type GetAzureuserResponse struct {
	Azureuser                          *Azureuser
	GetAzureuserResponseObjectAsResult *GetAzureuserResponseObjectAsResult
}

// AzureuserAsGetAzureuserResponse is a convenience function that returns Azureuser wrapped in GetAzureuserResponse
func AzureuserAsGetAzureuserResponse(v *Azureuser) GetAzureuserResponse {
	return GetAzureuserResponse{
		Azureuser: v,
	}
}

// GetAzureuserResponseObjectAsResultAsGetAzureuserResponse is a convenience function that returns GetAzureuserResponseObjectAsResult wrapped in GetAzureuserResponse
func GetAzureuserResponseObjectAsResultAsGetAzureuserResponse(v *GetAzureuserResponseObjectAsResult) GetAzureuserResponse {
	return GetAzureuserResponse{
		GetAzureuserResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAzureuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Azureuser
	err = newStrictDecoder(data).Decode(&dst.Azureuser)
	if err == nil {
		jsonAzureuser, _ := json.Marshal(dst.Azureuser)
		if string(jsonAzureuser) == "{}" { // empty struct
			dst.Azureuser = nil
		} else {
			match++
		}
	} else {
		dst.Azureuser = nil
	}

	// try to unmarshal data into GetAzureuserResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAzureuserResponseObjectAsResult)
	if err == nil {
		jsonGetAzureuserResponseObjectAsResult, _ := json.Marshal(dst.GetAzureuserResponseObjectAsResult)
		if string(jsonGetAzureuserResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAzureuserResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAzureuserResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Azureuser = nil
		dst.GetAzureuserResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAzureuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAzureuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAzureuserResponse) MarshalJSON() ([]byte, error) {
	if src.Azureuser != nil {
		return json.Marshal(&src.Azureuser)
	}

	if src.GetAzureuserResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAzureuserResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAzureuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Azureuser != nil {
		return obj.Azureuser
	}

	if obj.GetAzureuserResponseObjectAsResult != nil {
		return obj.GetAzureuserResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAzureuserResponse struct {
	value *GetAzureuserResponse
	isSet bool
}

func (v NullableGetAzureuserResponse) Get() *GetAzureuserResponse {
	return v.value
}

func (v *NullableGetAzureuserResponse) Set(val *GetAzureuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAzureuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAzureuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAzureuserResponse(val *GetAzureuserResponse) *NullableGetAzureuserResponse {
	return &NullableGetAzureuserResponse{value: val, isSet: true}
}

func (v NullableGetAzureuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAzureuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
