/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// GetGcpuserResponse - struct for GetGcpuserResponse
type GetGcpuserResponse struct {
	Gcpuser                          *Gcpuser
	GetGcpuserResponseObjectAsResult *GetGcpuserResponseObjectAsResult
}

// GcpuserAsGetGcpuserResponse is a convenience function that returns Gcpuser wrapped in GetGcpuserResponse
func GcpuserAsGetGcpuserResponse(v *Gcpuser) GetGcpuserResponse {
	return GetGcpuserResponse{
		Gcpuser: v,
	}
}

// GetGcpuserResponseObjectAsResultAsGetGcpuserResponse is a convenience function that returns GetGcpuserResponseObjectAsResult wrapped in GetGcpuserResponse
func GetGcpuserResponseObjectAsResultAsGetGcpuserResponse(v *GetGcpuserResponseObjectAsResult) GetGcpuserResponse {
	return GetGcpuserResponse{
		GetGcpuserResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGcpuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Gcpuser
	err = newStrictDecoder(data).Decode(&dst.Gcpuser)
	if err == nil {
		jsonGcpuser, _ := json.Marshal(dst.Gcpuser)
		if string(jsonGcpuser) == "{}" { // empty struct
			dst.Gcpuser = nil
		} else {
			match++
		}
	} else {
		dst.Gcpuser = nil
	}

	// try to unmarshal data into GetGcpuserResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGcpuserResponseObjectAsResult)
	if err == nil {
		jsonGetGcpuserResponseObjectAsResult, _ := json.Marshal(dst.GetGcpuserResponseObjectAsResult)
		if string(jsonGetGcpuserResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGcpuserResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGcpuserResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Gcpuser = nil
		dst.GetGcpuserResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGcpuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGcpuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGcpuserResponse) MarshalJSON() ([]byte, error) {
	if src.Gcpuser != nil {
		return json.Marshal(&src.Gcpuser)
	}

	if src.GetGcpuserResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGcpuserResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGcpuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Gcpuser != nil {
		return obj.Gcpuser
	}

	if obj.GetGcpuserResponseObjectAsResult != nil {
		return obj.GetGcpuserResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetGcpuserResponse struct {
	value *GetGcpuserResponse
	isSet bool
}

func (v NullableGetGcpuserResponse) Get() *GetGcpuserResponse {
	return v.value
}

func (v *NullableGetGcpuserResponse) Set(val *GetGcpuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGcpuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGcpuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGcpuserResponse(val *GetGcpuserResponse) *NullableGetGcpuserResponse {
	return &NullableGetGcpuserResponse{value: val, isSet: true}
}

func (v NullableGetGcpuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGcpuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
