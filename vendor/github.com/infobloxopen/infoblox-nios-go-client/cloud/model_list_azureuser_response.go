/*
Infoblox CLOUD API

OpenAPI specification for Infoblox NIOS WAPI CLOUD objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud

import (
	"encoding/json"
	"fmt"
)

// ListAzureuserResponse - struct for ListAzureuserResponse
type ListAzureuserResponse struct {
	ListAzureuserResponseObject *ListAzureuserResponseObject
	ArrayOfAzureuser            *[]Azureuser
}

// ListAzureuserResponseObjectAsListAzureuserResponse is a convenience function that returns ListAzureuserResponseObject wrapped in ListAzureuserResponse
func ListAzureuserResponseObjectAsListAzureuserResponse(v *ListAzureuserResponseObject) ListAzureuserResponse {
	return ListAzureuserResponse{
		ListAzureuserResponseObject: v,
	}
}

// []AzureuserAsListAzureuserResponse is a convenience function that returns []Azureuser wrapped in ListAzureuserResponse
func ArrayOfAzureuserAsListAzureuserResponse(v *[]Azureuser) ListAzureuserResponse {
	return ListAzureuserResponse{
		ArrayOfAzureuser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAzureuserResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAzureuserResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAzureuserResponseObject)
	if err == nil {
		jsonListAzureuserResponseObject, _ := json.Marshal(dst.ListAzureuserResponseObject)
		if string(jsonListAzureuserResponseObject) == "{}" { // empty struct
			dst.ListAzureuserResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAzureuserResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAzureuser
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAzureuser)
	if err == nil {
		jsonArrayOfAzureuser, _ := json.Marshal(dst.ArrayOfAzureuser)
		if string(jsonArrayOfAzureuser) == "{}" { // empty struct
			dst.ArrayOfAzureuser = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAzureuser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAzureuserResponseObject = nil
		dst.ArrayOfAzureuser = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAzureuserResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAzureuserResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAzureuserResponse) MarshalJSON() ([]byte, error) {
	if src.ListAzureuserResponseObject != nil {
		return json.Marshal(&src.ListAzureuserResponseObject)
	}

	if src.ArrayOfAzureuser != nil {
		return json.Marshal(&src.ArrayOfAzureuser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAzureuserResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAzureuserResponseObject != nil {
		return obj.ListAzureuserResponseObject
	}

	if obj.ArrayOfAzureuser != nil {
		return obj.ArrayOfAzureuser
	}

	// all schemas are nil
	return nil
}

type NullableListAzureuserResponse struct {
	value *ListAzureuserResponse
	isSet bool
}

func (v NullableListAzureuserResponse) Get() *ListAzureuserResponse {
	return v.value
}

func (v *NullableListAzureuserResponse) Set(val *ListAzureuserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAzureuserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAzureuserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAzureuserResponse(val *ListAzureuserResponse) *NullableListAzureuserResponse {
	return &NullableListAzureuserResponse{value: val, isSet: true}
}

func (v NullableListAzureuserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAzureuserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
