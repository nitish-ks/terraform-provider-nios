/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type Ipv6dhcpoptiondefinitionAPI interface {
	/*
		Create Create a ipv6dhcpoptiondefinition object

		Creates a new ipv6dhcpoptiondefinition object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6dhcpoptiondefinitionAPICreateRequest
	*/
	Create(ctx context.Context) Ipv6dhcpoptiondefinitionAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateIpv6dhcpoptiondefinitionResponse
	CreateExecute(r Ipv6dhcpoptiondefinitionAPICreateRequest) (*CreateIpv6dhcpoptiondefinitionResponse, *http.Response, error)
	/*
		Delete Delete a ipv6dhcpoptiondefinition object

		Deletes a specific ipv6dhcpoptiondefinition object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6dhcpoptiondefinition object
		@return Ipv6dhcpoptiondefinitionAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r Ipv6dhcpoptiondefinitionAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve ipv6dhcpoptiondefinition objects

		Returns a list of ipv6dhcpoptiondefinition objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6dhcpoptiondefinitionAPIListRequest
	*/
	List(ctx context.Context) Ipv6dhcpoptiondefinitionAPIListRequest

	// ListExecute executes the request
	//  @return ListIpv6dhcpoptiondefinitionResponse
	ListExecute(r Ipv6dhcpoptiondefinitionAPIListRequest) (*ListIpv6dhcpoptiondefinitionResponse, *http.Response, error)
	/*
		Read Get a specific ipv6dhcpoptiondefinition object

		Returns a specific ipv6dhcpoptiondefinition object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6dhcpoptiondefinition object
		@return Ipv6dhcpoptiondefinitionAPIReadRequest
	*/
	Read(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIReadRequest

	// ReadExecute executes the request
	//  @return GetIpv6dhcpoptiondefinitionResponse
	ReadExecute(r Ipv6dhcpoptiondefinitionAPIReadRequest) (*GetIpv6dhcpoptiondefinitionResponse, *http.Response, error)
	/*
		Update Update a ipv6dhcpoptiondefinition object

		Updates a specific ipv6dhcpoptiondefinition object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6dhcpoptiondefinition object
		@return Ipv6dhcpoptiondefinitionAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateIpv6dhcpoptiondefinitionResponse
	UpdateExecute(r Ipv6dhcpoptiondefinitionAPIUpdateRequest) (*UpdateIpv6dhcpoptiondefinitionResponse, *http.Response, error)
}

// Ipv6dhcpoptiondefinitionAPIService Ipv6dhcpoptiondefinitionAPI service
type Ipv6dhcpoptiondefinitionAPIService internal.Service

type Ipv6dhcpoptiondefinitionAPICreateRequest struct {
	ctx                      context.Context
	ApiService               Ipv6dhcpoptiondefinitionAPI
	ipv6dhcpoptiondefinition *Ipv6dhcpoptiondefinition
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to create
func (r Ipv6dhcpoptiondefinitionAPICreateRequest) Ipv6dhcpoptiondefinition(ipv6dhcpoptiondefinition Ipv6dhcpoptiondefinition) Ipv6dhcpoptiondefinitionAPICreateRequest {
	r.ipv6dhcpoptiondefinition = &ipv6dhcpoptiondefinition
	return r
}

// Enter the field names followed by comma
func (r Ipv6dhcpoptiondefinitionAPICreateRequest) ReturnFields(returnFields string) Ipv6dhcpoptiondefinitionAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6dhcpoptiondefinitionAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6dhcpoptiondefinitionAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6dhcpoptiondefinitionAPICreateRequest) ReturnAsObject(returnAsObject int32) Ipv6dhcpoptiondefinitionAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6dhcpoptiondefinitionAPICreateRequest) Execute() (*CreateIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a ipv6dhcpoptiondefinition object

Creates a new ipv6dhcpoptiondefinition object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6dhcpoptiondefinitionAPICreateRequest
*/
func (a *Ipv6dhcpoptiondefinitionAPIService) Create(ctx context.Context) Ipv6dhcpoptiondefinitionAPICreateRequest {
	return Ipv6dhcpoptiondefinitionAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIpv6dhcpoptiondefinitionResponse
func (a *Ipv6dhcpoptiondefinitionAPIService) CreateExecute(r Ipv6dhcpoptiondefinitionAPICreateRequest) (*CreateIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateIpv6dhcpoptiondefinitionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6dhcpoptiondefinitionAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6dhcpoptiondefinition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6dhcpoptiondefinition == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6dhcpoptiondefinition is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6dhcpoptiondefinition
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6dhcpoptiondefinitionAPIDeleteRequest struct {
	ctx        context.Context
	ApiService Ipv6dhcpoptiondefinitionAPI
	reference  string
}

func (r Ipv6dhcpoptiondefinitionAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a ipv6dhcpoptiondefinition object

Deletes a specific ipv6dhcpoptiondefinition object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6dhcpoptiondefinition object
	@return Ipv6dhcpoptiondefinitionAPIDeleteRequest
*/
func (a *Ipv6dhcpoptiondefinitionAPIService) Delete(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIDeleteRequest {
	return Ipv6dhcpoptiondefinitionAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *Ipv6dhcpoptiondefinitionAPIService) DeleteExecute(r Ipv6dhcpoptiondefinitionAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6dhcpoptiondefinitionAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6dhcpoptiondefinition/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Ipv6dhcpoptiondefinitionAPIListRequest struct {
	ctx              context.Context
	ApiService       Ipv6dhcpoptiondefinitionAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r Ipv6dhcpoptiondefinitionAPIListRequest) ReturnFields(returnFields string) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6dhcpoptiondefinitionAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r Ipv6dhcpoptiondefinitionAPIListRequest) MaxResults(maxResults int32) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r Ipv6dhcpoptiondefinitionAPIListRequest) ReturnAsObject(returnAsObject int32) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r Ipv6dhcpoptiondefinitionAPIListRequest) Paging(paging int32) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r Ipv6dhcpoptiondefinitionAPIListRequest) PageId(pageId string) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r Ipv6dhcpoptiondefinitionAPIListRequest) Filters(filters map[string]interface{}) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.filters = &filters
	return r
}

func (r Ipv6dhcpoptiondefinitionAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) Ipv6dhcpoptiondefinitionAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r Ipv6dhcpoptiondefinitionAPIListRequest) Execute() (*ListIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve ipv6dhcpoptiondefinition objects

Returns a list of ipv6dhcpoptiondefinition objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6dhcpoptiondefinitionAPIListRequest
*/
func (a *Ipv6dhcpoptiondefinitionAPIService) List(ctx context.Context) Ipv6dhcpoptiondefinitionAPIListRequest {
	return Ipv6dhcpoptiondefinitionAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListIpv6dhcpoptiondefinitionResponse
func (a *Ipv6dhcpoptiondefinitionAPIService) ListExecute(r Ipv6dhcpoptiondefinitionAPIListRequest) (*ListIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListIpv6dhcpoptiondefinitionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6dhcpoptiondefinitionAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6dhcpoptiondefinition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6dhcpoptiondefinitionAPIReadRequest struct {
	ctx              context.Context
	ApiService       Ipv6dhcpoptiondefinitionAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r Ipv6dhcpoptiondefinitionAPIReadRequest) ReturnFields(returnFields string) Ipv6dhcpoptiondefinitionAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6dhcpoptiondefinitionAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6dhcpoptiondefinitionAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6dhcpoptiondefinitionAPIReadRequest) ReturnAsObject(returnAsObject int32) Ipv6dhcpoptiondefinitionAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6dhcpoptiondefinitionAPIReadRequest) Execute() (*GetIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific ipv6dhcpoptiondefinition object

Returns a specific ipv6dhcpoptiondefinition object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6dhcpoptiondefinition object
	@return Ipv6dhcpoptiondefinitionAPIReadRequest
*/
func (a *Ipv6dhcpoptiondefinitionAPIService) Read(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIReadRequest {
	return Ipv6dhcpoptiondefinitionAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetIpv6dhcpoptiondefinitionResponse
func (a *Ipv6dhcpoptiondefinitionAPIService) ReadExecute(r Ipv6dhcpoptiondefinitionAPIReadRequest) (*GetIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetIpv6dhcpoptiondefinitionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6dhcpoptiondefinitionAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6dhcpoptiondefinition/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6dhcpoptiondefinitionAPIUpdateRequest struct {
	ctx                      context.Context
	ApiService               Ipv6dhcpoptiondefinitionAPI
	reference                string
	ipv6dhcpoptiondefinition *Ipv6dhcpoptiondefinition
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to update
func (r Ipv6dhcpoptiondefinitionAPIUpdateRequest) Ipv6dhcpoptiondefinition(ipv6dhcpoptiondefinition Ipv6dhcpoptiondefinition) Ipv6dhcpoptiondefinitionAPIUpdateRequest {
	r.ipv6dhcpoptiondefinition = &ipv6dhcpoptiondefinition
	return r
}

// Enter the field names followed by comma
func (r Ipv6dhcpoptiondefinitionAPIUpdateRequest) ReturnFields(returnFields string) Ipv6dhcpoptiondefinitionAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6dhcpoptiondefinitionAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6dhcpoptiondefinitionAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6dhcpoptiondefinitionAPIUpdateRequest) ReturnAsObject(returnAsObject int32) Ipv6dhcpoptiondefinitionAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6dhcpoptiondefinitionAPIUpdateRequest) Execute() (*UpdateIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a ipv6dhcpoptiondefinition object

Updates a specific ipv6dhcpoptiondefinition object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6dhcpoptiondefinition object
	@return Ipv6dhcpoptiondefinitionAPIUpdateRequest
*/
func (a *Ipv6dhcpoptiondefinitionAPIService) Update(ctx context.Context, reference string) Ipv6dhcpoptiondefinitionAPIUpdateRequest {
	return Ipv6dhcpoptiondefinitionAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateIpv6dhcpoptiondefinitionResponse
func (a *Ipv6dhcpoptiondefinitionAPIService) UpdateExecute(r Ipv6dhcpoptiondefinitionAPIUpdateRequest) (*UpdateIpv6dhcpoptiondefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateIpv6dhcpoptiondefinitionResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6dhcpoptiondefinitionAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6dhcpoptiondefinition/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6dhcpoptiondefinition == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6dhcpoptiondefinition is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ipv6dhcpoptiondefinition
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
