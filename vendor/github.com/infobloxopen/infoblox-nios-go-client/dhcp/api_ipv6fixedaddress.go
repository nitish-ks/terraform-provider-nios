/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type Ipv6fixedaddressAPI interface {
	/*
		Create Create a ipv6fixedaddress object

		Creates a new ipv6fixedaddress object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6fixedaddressAPICreateRequest
	*/
	Create(ctx context.Context) Ipv6fixedaddressAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateIpv6fixedaddressResponse
	CreateExecute(r Ipv6fixedaddressAPICreateRequest) (*CreateIpv6fixedaddressResponse, *http.Response, error)
	/*
		Delete Delete a ipv6fixedaddress object

		Deletes a specific ipv6fixedaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6fixedaddress object
		@return Ipv6fixedaddressAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) Ipv6fixedaddressAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r Ipv6fixedaddressAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve ipv6fixedaddress objects

		Returns a list of ipv6fixedaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return Ipv6fixedaddressAPIListRequest
	*/
	List(ctx context.Context) Ipv6fixedaddressAPIListRequest

	// ListExecute executes the request
	//  @return ListIpv6fixedaddressResponse
	ListExecute(r Ipv6fixedaddressAPIListRequest) (*ListIpv6fixedaddressResponse, *http.Response, error)
	/*
		Read Get a specific ipv6fixedaddress object

		Returns a specific ipv6fixedaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6fixedaddress object
		@return Ipv6fixedaddressAPIReadRequest
	*/
	Read(ctx context.Context, reference string) Ipv6fixedaddressAPIReadRequest

	// ReadExecute executes the request
	//  @return GetIpv6fixedaddressResponse
	ReadExecute(r Ipv6fixedaddressAPIReadRequest) (*GetIpv6fixedaddressResponse, *http.Response, error)
	/*
		Update Update a ipv6fixedaddress object

		Updates a specific ipv6fixedaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the ipv6fixedaddress object
		@return Ipv6fixedaddressAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) Ipv6fixedaddressAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateIpv6fixedaddressResponse
	UpdateExecute(r Ipv6fixedaddressAPIUpdateRequest) (*UpdateIpv6fixedaddressResponse, *http.Response, error)
}

// Ipv6fixedaddressAPIService Ipv6fixedaddressAPI service
type Ipv6fixedaddressAPIService internal.Service

type Ipv6fixedaddressAPICreateRequest struct {
	ctx              context.Context
	ApiService       Ipv6fixedaddressAPI
	ipv6fixedaddress *Ipv6fixedaddress
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to create
func (r Ipv6fixedaddressAPICreateRequest) Ipv6fixedaddress(ipv6fixedaddress Ipv6fixedaddress) Ipv6fixedaddressAPICreateRequest {
	r.ipv6fixedaddress = &ipv6fixedaddress
	return r
}

// Enter the field names followed by comma
func (r Ipv6fixedaddressAPICreateRequest) ReturnFields(returnFields string) Ipv6fixedaddressAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6fixedaddressAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6fixedaddressAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6fixedaddressAPICreateRequest) ReturnAsObject(returnAsObject int32) Ipv6fixedaddressAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6fixedaddressAPICreateRequest) Execute() (*CreateIpv6fixedaddressResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a ipv6fixedaddress object

Creates a new ipv6fixedaddress object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6fixedaddressAPICreateRequest
*/
func (a *Ipv6fixedaddressAPIService) Create(ctx context.Context) Ipv6fixedaddressAPICreateRequest {
	return Ipv6fixedaddressAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIpv6fixedaddressResponse
func (a *Ipv6fixedaddressAPIService) CreateExecute(r Ipv6fixedaddressAPICreateRequest) (*CreateIpv6fixedaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateIpv6fixedaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6fixedaddressAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6fixedaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6fixedaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6fixedaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.ipv6fixedaddress != nil {
		if r.ipv6fixedaddress.ExtAttrs == nil {
			r.ipv6fixedaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.ipv6fixedaddress.ExtAttrs)[k]; !ok {
				(*r.ipv6fixedaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	if r.ipv6fixedaddress.FuncCall != nil {
		bodyForFuncCall := r.ipv6fixedaddress
		if bodyForFuncCall.FuncCall.AttributeName == "" {
			return localVarReturnValue, nil, internal.ReportError("FuncCall.AttributeName is required and must be specified")
		}
		var funcStr string = bodyForFuncCall.FuncCall.AttributeName
		if funcStr == "Ipv6addr" {
			if bodyForFuncCall.Ipv6addr.String != nil {
				return localVarReturnValue, nil, internal.ReportError("Ipv6addr cannot be provided when function call is used")
			} else {

				var l Ipv6fixedaddressIpv6addr
				var m Ipv6fixedaddressIpv6addrOneOf
				m.ObjectFunction = bodyForFuncCall.FuncCall.ObjectFunction
				m.Parameters = bodyForFuncCall.FuncCall.Parameters
				m.ResultField = bodyForFuncCall.FuncCall.ResultField
				m.Object = bodyForFuncCall.FuncCall.Object
				m.ObjectParameters = bodyForFuncCall.FuncCall.ObjectParameters

				l.Ipv6fixedaddressIpv6addrOneOf = &m
				l.String = nil
				bodyForFuncCall.Ipv6addr = &l
				bodyForFuncCall.FuncCall = nil
			}
		}
		r.ipv6fixedaddress = bodyForFuncCall
	}
	// body params
	localVarPostBody = r.ipv6fixedaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6fixedaddressAPIDeleteRequest struct {
	ctx        context.Context
	ApiService Ipv6fixedaddressAPI
	reference  string
}

func (r Ipv6fixedaddressAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a ipv6fixedaddress object

Deletes a specific ipv6fixedaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6fixedaddress object
	@return Ipv6fixedaddressAPIDeleteRequest
*/
func (a *Ipv6fixedaddressAPIService) Delete(ctx context.Context, reference string) Ipv6fixedaddressAPIDeleteRequest {
	return Ipv6fixedaddressAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *Ipv6fixedaddressAPIService) DeleteExecute(r Ipv6fixedaddressAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6fixedaddressAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6fixedaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type Ipv6fixedaddressAPIListRequest struct {
	ctx              context.Context
	ApiService       Ipv6fixedaddressAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r Ipv6fixedaddressAPIListRequest) ReturnFields(returnFields string) Ipv6fixedaddressAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6fixedaddressAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6fixedaddressAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r Ipv6fixedaddressAPIListRequest) MaxResults(maxResults int32) Ipv6fixedaddressAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r Ipv6fixedaddressAPIListRequest) ReturnAsObject(returnAsObject int32) Ipv6fixedaddressAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r Ipv6fixedaddressAPIListRequest) Paging(paging int32) Ipv6fixedaddressAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r Ipv6fixedaddressAPIListRequest) PageId(pageId string) Ipv6fixedaddressAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r Ipv6fixedaddressAPIListRequest) Filters(filters map[string]interface{}) Ipv6fixedaddressAPIListRequest {
	r.filters = &filters
	return r
}

func (r Ipv6fixedaddressAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) Ipv6fixedaddressAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r Ipv6fixedaddressAPIListRequest) Execute() (*ListIpv6fixedaddressResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve ipv6fixedaddress objects

Returns a list of ipv6fixedaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return Ipv6fixedaddressAPIListRequest
*/
func (a *Ipv6fixedaddressAPIService) List(ctx context.Context) Ipv6fixedaddressAPIListRequest {
	return Ipv6fixedaddressAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListIpv6fixedaddressResponse
func (a *Ipv6fixedaddressAPIService) ListExecute(r Ipv6fixedaddressAPIListRequest) (*ListIpv6fixedaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListIpv6fixedaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6fixedaddressAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6fixedaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6fixedaddressAPIReadRequest struct {
	ctx              context.Context
	ApiService       Ipv6fixedaddressAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r Ipv6fixedaddressAPIReadRequest) ReturnFields(returnFields string) Ipv6fixedaddressAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6fixedaddressAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6fixedaddressAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6fixedaddressAPIReadRequest) ReturnAsObject(returnAsObject int32) Ipv6fixedaddressAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6fixedaddressAPIReadRequest) Execute() (*GetIpv6fixedaddressResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific ipv6fixedaddress object

Returns a specific ipv6fixedaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6fixedaddress object
	@return Ipv6fixedaddressAPIReadRequest
*/
func (a *Ipv6fixedaddressAPIService) Read(ctx context.Context, reference string) Ipv6fixedaddressAPIReadRequest {
	return Ipv6fixedaddressAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetIpv6fixedaddressResponse
func (a *Ipv6fixedaddressAPIService) ReadExecute(r Ipv6fixedaddressAPIReadRequest) (*GetIpv6fixedaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetIpv6fixedaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6fixedaddressAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6fixedaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type Ipv6fixedaddressAPIUpdateRequest struct {
	ctx              context.Context
	ApiService       Ipv6fixedaddressAPI
	reference        string
	ipv6fixedaddress *Ipv6fixedaddress
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Object data to update
func (r Ipv6fixedaddressAPIUpdateRequest) Ipv6fixedaddress(ipv6fixedaddress Ipv6fixedaddress) Ipv6fixedaddressAPIUpdateRequest {
	r.ipv6fixedaddress = &ipv6fixedaddress
	return r
}

// Enter the field names followed by comma
func (r Ipv6fixedaddressAPIUpdateRequest) ReturnFields(returnFields string) Ipv6fixedaddressAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r Ipv6fixedaddressAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) Ipv6fixedaddressAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r Ipv6fixedaddressAPIUpdateRequest) ReturnAsObject(returnAsObject int32) Ipv6fixedaddressAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r Ipv6fixedaddressAPIUpdateRequest) Execute() (*UpdateIpv6fixedaddressResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a ipv6fixedaddress object

Updates a specific ipv6fixedaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the ipv6fixedaddress object
	@return Ipv6fixedaddressAPIUpdateRequest
*/
func (a *Ipv6fixedaddressAPIService) Update(ctx context.Context, reference string) Ipv6fixedaddressAPIUpdateRequest {
	return Ipv6fixedaddressAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateIpv6fixedaddressResponse
func (a *Ipv6fixedaddressAPIService) UpdateExecute(r Ipv6fixedaddressAPIUpdateRequest) (*UpdateIpv6fixedaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateIpv6fixedaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "Ipv6fixedaddressAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/ipv6fixedaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipv6fixedaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("ipv6fixedaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.ipv6fixedaddress != nil {
		if r.ipv6fixedaddress.ExtAttrs == nil {
			r.ipv6fixedaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.ipv6fixedaddress.ExtAttrs)[k]; !ok {
				(*r.ipv6fixedaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	if r.ipv6fixedaddress.FuncCall != nil {
		bodyForFuncCall := r.ipv6fixedaddress
		bodyForFuncCall.FuncCall = nil
		bodyForFuncCall.Ipv6addr = nil
		r.ipv6fixedaddress = bodyForFuncCall
	}
	// body params
	localVarPostBody = r.ipv6fixedaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
