/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Fingerprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fingerprint{}

// Fingerprint struct for Fingerprint
type Fingerprint struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for the Fingerprint; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// A class of DHCP Fingerprint object; maximum 256 characters.
	DeviceClass *string `json:"device_class,omitempty"`
	// Determines if the DHCP Fingerprint object is disabled or not.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// A list (comma separated list) of IPv6 option number sequences of the device or operating system.
	Ipv6OptionSequence []string `json:"ipv6_option_sequence,omitempty"`
	// Name of the DHCP Fingerprint object.
	Name *string `json:"name,omitempty"`
	// A list (comma separated list) of IPv4 option number sequences of the device or operating system.
	OptionSequence []string `json:"option_sequence,omitempty"`
	// The type of the DHCP Fingerprint object.
	Type *string `json:"type,omitempty"`
	// A list of vendor IDs of the device or operating system.
	VendorId []string `json:"vendor_id,omitempty"`
}

// NewFingerprint instantiates a new Fingerprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFingerprint() *Fingerprint {
	this := Fingerprint{}
	return &this
}

// NewFingerprintWithDefaults instantiates a new Fingerprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFingerprintWithDefaults() *Fingerprint {
	this := Fingerprint{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Fingerprint) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Fingerprint) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Fingerprint) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Fingerprint) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Fingerprint) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Fingerprint) SetComment(v string) {
	o.Comment = &v
}

// GetDeviceClass returns the DeviceClass field value if set, zero value otherwise.
func (o *Fingerprint) GetDeviceClass() string {
	if o == nil || IsNil(o.DeviceClass) {
		var ret string
		return ret
	}
	return *o.DeviceClass
}

// GetDeviceClassOk returns a tuple with the DeviceClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetDeviceClassOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceClass) {
		return nil, false
	}
	return o.DeviceClass, true
}

// HasDeviceClass returns a boolean if a field has been set.
func (o *Fingerprint) HasDeviceClass() bool {
	if o != nil && !IsNil(o.DeviceClass) {
		return true
	}

	return false
}

// SetDeviceClass gets a reference to the given string and assigns it to the DeviceClass field.
func (o *Fingerprint) SetDeviceClass(v string) {
	o.DeviceClass = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Fingerprint) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Fingerprint) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Fingerprint) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Fingerprint) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Fingerprint) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Fingerprint) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetIpv6OptionSequence returns the Ipv6OptionSequence field value if set, zero value otherwise.
func (o *Fingerprint) GetIpv6OptionSequence() []string {
	if o == nil || IsNil(o.Ipv6OptionSequence) {
		var ret []string
		return ret
	}
	return o.Ipv6OptionSequence
}

// GetIpv6OptionSequenceOk returns a tuple with the Ipv6OptionSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetIpv6OptionSequenceOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6OptionSequence) {
		return nil, false
	}
	return o.Ipv6OptionSequence, true
}

// HasIpv6OptionSequence returns a boolean if a field has been set.
func (o *Fingerprint) HasIpv6OptionSequence() bool {
	if o != nil && !IsNil(o.Ipv6OptionSequence) {
		return true
	}

	return false
}

// SetIpv6OptionSequence gets a reference to the given []string and assigns it to the Ipv6OptionSequence field.
func (o *Fingerprint) SetIpv6OptionSequence(v []string) {
	o.Ipv6OptionSequence = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Fingerprint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Fingerprint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Fingerprint) SetName(v string) {
	o.Name = &v
}

// GetOptionSequence returns the OptionSequence field value if set, zero value otherwise.
func (o *Fingerprint) GetOptionSequence() []string {
	if o == nil || IsNil(o.OptionSequence) {
		var ret []string
		return ret
	}
	return o.OptionSequence
}

// GetOptionSequenceOk returns a tuple with the OptionSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetOptionSequenceOk() ([]string, bool) {
	if o == nil || IsNil(o.OptionSequence) {
		return nil, false
	}
	return o.OptionSequence, true
}

// HasOptionSequence returns a boolean if a field has been set.
func (o *Fingerprint) HasOptionSequence() bool {
	if o != nil && !IsNil(o.OptionSequence) {
		return true
	}

	return false
}

// SetOptionSequence gets a reference to the given []string and assigns it to the OptionSequence field.
func (o *Fingerprint) SetOptionSequence(v []string) {
	o.OptionSequence = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Fingerprint) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Fingerprint) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Fingerprint) SetType(v string) {
	o.Type = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise.
func (o *Fingerprint) GetVendorId() []string {
	if o == nil || IsNil(o.VendorId) {
		var ret []string
		return ret
	}
	return o.VendorId
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fingerprint) GetVendorIdOk() ([]string, bool) {
	if o == nil || IsNil(o.VendorId) {
		return nil, false
	}
	return o.VendorId, true
}

// HasVendorId returns a boolean if a field has been set.
func (o *Fingerprint) HasVendorId() bool {
	if o != nil && !IsNil(o.VendorId) {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given []string and assigns it to the VendorId field.
func (o *Fingerprint) SetVendorId(v []string) {
	o.VendorId = v
}

func (o Fingerprint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fingerprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DeviceClass) {
		toSerialize["device_class"] = o.DeviceClass
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Ipv6OptionSequence) {
		toSerialize["ipv6_option_sequence"] = o.Ipv6OptionSequence
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OptionSequence) {
		toSerialize["option_sequence"] = o.OptionSequence
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VendorId) {
		toSerialize["vendor_id"] = o.VendorId
	}
	return toSerialize, nil
}

type NullableFingerprint struct {
	value *Fingerprint
	isSet bool
}

func (v NullableFingerprint) Get() *Fingerprint {
	return v.value
}

func (v *NullableFingerprint) Set(val *Fingerprint) {
	v.value = val
	v.isSet = true
}

func (v NullableFingerprint) IsSet() bool {
	return v.isSet
}

func (v *NullableFingerprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFingerprint(val *Fingerprint) *NullableFingerprint {
	return &NullableFingerprint{value: val, isSet: true}
}

func (v NullableFingerprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFingerprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
