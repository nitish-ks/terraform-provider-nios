/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFiltermacResponse - struct for GetFiltermacResponse
type GetFiltermacResponse struct {
	Filtermac                          *Filtermac
	GetFiltermacResponseObjectAsResult *GetFiltermacResponseObjectAsResult
}

// FiltermacAsGetFiltermacResponse is a convenience function that returns Filtermac wrapped in GetFiltermacResponse
func FiltermacAsGetFiltermacResponse(v *Filtermac) GetFiltermacResponse {
	return GetFiltermacResponse{
		Filtermac: v,
	}
}

// GetFiltermacResponseObjectAsResultAsGetFiltermacResponse is a convenience function that returns GetFiltermacResponseObjectAsResult wrapped in GetFiltermacResponse
func GetFiltermacResponseObjectAsResultAsGetFiltermacResponse(v *GetFiltermacResponseObjectAsResult) GetFiltermacResponse {
	return GetFiltermacResponse{
		GetFiltermacResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFiltermacResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filtermac
	err = newStrictDecoder(data).Decode(&dst.Filtermac)
	if err == nil {
		jsonFiltermac, _ := json.Marshal(dst.Filtermac)
		if string(jsonFiltermac) == "{}" { // empty struct
			dst.Filtermac = nil
		} else {
			match++
		}
	} else {
		dst.Filtermac = nil
	}

	// try to unmarshal data into GetFiltermacResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFiltermacResponseObjectAsResult)
	if err == nil {
		jsonGetFiltermacResponseObjectAsResult, _ := json.Marshal(dst.GetFiltermacResponseObjectAsResult)
		if string(jsonGetFiltermacResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFiltermacResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFiltermacResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filtermac = nil
		dst.GetFiltermacResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFiltermacResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFiltermacResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFiltermacResponse) MarshalJSON() ([]byte, error) {
	if src.Filtermac != nil {
		return json.Marshal(&src.Filtermac)
	}

	if src.GetFiltermacResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFiltermacResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFiltermacResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Filtermac != nil {
		return obj.Filtermac
	}

	if obj.GetFiltermacResponseObjectAsResult != nil {
		return obj.GetFiltermacResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFiltermacResponse struct {
	value *GetFiltermacResponse
	isSet bool
}

func (v NullableGetFiltermacResponse) Get() *GetFiltermacResponse {
	return v.value
}

func (v *NullableGetFiltermacResponse) Set(val *GetFiltermacResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFiltermacResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFiltermacResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFiltermacResponse(val *GetFiltermacResponse) *NullableGetFiltermacResponse {
	return &NullableGetFiltermacResponse{value: val, isSet: true}
}

func (v NullableGetFiltermacResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFiltermacResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
