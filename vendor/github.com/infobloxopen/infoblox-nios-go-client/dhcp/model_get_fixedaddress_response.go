/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// GetFixedaddressResponse - struct for GetFixedaddressResponse
type GetFixedaddressResponse struct {
	Fixedaddress                          *Fixedaddress
	GetFixedaddressResponseObjectAsResult *GetFixedaddressResponseObjectAsResult
}

// FixedaddressAsGetFixedaddressResponse is a convenience function that returns Fixedaddress wrapped in GetFixedaddressResponse
func FixedaddressAsGetFixedaddressResponse(v *Fixedaddress) GetFixedaddressResponse {
	return GetFixedaddressResponse{
		Fixedaddress: v,
	}
}

// GetFixedaddressResponseObjectAsResultAsGetFixedaddressResponse is a convenience function that returns GetFixedaddressResponseObjectAsResult wrapped in GetFixedaddressResponse
func GetFixedaddressResponseObjectAsResultAsGetFixedaddressResponse(v *GetFixedaddressResponseObjectAsResult) GetFixedaddressResponse {
	return GetFixedaddressResponse{
		GetFixedaddressResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFixedaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Fixedaddress
	err = newStrictDecoder(data).Decode(&dst.Fixedaddress)
	if err == nil {
		jsonFixedaddress, _ := json.Marshal(dst.Fixedaddress)
		if string(jsonFixedaddress) == "{}" { // empty struct
			dst.Fixedaddress = nil
		} else {
			match++
		}
	} else {
		dst.Fixedaddress = nil
	}

	// try to unmarshal data into GetFixedaddressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFixedaddressResponseObjectAsResult)
	if err == nil {
		jsonGetFixedaddressResponseObjectAsResult, _ := json.Marshal(dst.GetFixedaddressResponseObjectAsResult)
		if string(jsonGetFixedaddressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFixedaddressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFixedaddressResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Fixedaddress = nil
		dst.GetFixedaddressResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFixedaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFixedaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFixedaddressResponse) MarshalJSON() ([]byte, error) {
	if src.Fixedaddress != nil {
		return json.Marshal(&src.Fixedaddress)
	}

	if src.GetFixedaddressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFixedaddressResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFixedaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Fixedaddress != nil {
		return obj.Fixedaddress
	}

	if obj.GetFixedaddressResponseObjectAsResult != nil {
		return obj.GetFixedaddressResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFixedaddressResponse struct {
	value *GetFixedaddressResponse
	isSet bool
}

func (v NullableGetFixedaddressResponse) Get() *GetFixedaddressResponse {
	return v.value
}

func (v *NullableGetFixedaddressResponse) Set(val *GetFixedaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFixedaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFixedaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFixedaddressResponse(val *GetFixedaddressResponse) *NullableGetFixedaddressResponse {
	return &NullableGetFixedaddressResponse{value: val, isSet: true}
}

func (v NullableGetFixedaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFixedaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
