/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the Ipv6rangetemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6rangetemplate{}

// Ipv6rangetemplate struct for Ipv6rangetemplate
type Ipv6rangetemplate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines whether the IPv6 DHCP range template can be used to create network objects in a cloud-computing deployment.
	CloudApiCompatible *bool `json:"cloud_api_compatible,omitempty"`
	// The IPv6 DHCP range template descriptive comment.
	Comment         *string                           `json:"comment,omitempty"`
	DelegatedMember *Ipv6rangetemplateDelegatedMember `json:"delegated_member,omitempty"`
	// These are ranges of IPv6 addresses that the appliance does not use to assign to clients. You can use these excluded addresses as static IPv6 addresses. They contain the start and end addresses of the excluded range, and optionally, information about this excluded range.
	Exclude []Ipv6rangetemplateExclude `json:"exclude,omitempty"`
	// This field contains the logic filters to be applied on this IPv6 range. This list corresponds to the match rules that are written to the DHCPv6 configuration file.
	LogicFilterRules []Ipv6rangetemplateLogicFilterRules `json:"logic_filter_rules,omitempty"`
	Member           *Ipv6rangetemplateMember            `json:"member,omitempty"`
	// Name of the IPv6 DHCP range template.
	Name *string `json:"name,omitempty"`
	// The number of addresses for the IPv6 DHCP range.
	NumberOfAddresses *int64 `json:"number_of_addresses,omitempty"`
	// The start address offset for the IPv6 DHCP range.
	Offset *int64 `json:"offset,omitempty"`
	// This field contains the Option filters to be applied to this IPv6 range. The appliance uses the matching rules of these filters to select the address range from which it assigns a lease.
	OptionFilterRules []Ipv6rangetemplateOptionFilterRules `json:"option_filter_rules,omitempty"`
	// Determines whether the leases are kept in Recycle Bin until one week after expiry. If this is set to False, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// The type of server that is going to serve the IPv6 DHCP range.
	ServerAssociationType *string `json:"server_association_type,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
}

// NewIpv6rangetemplate instantiates a new Ipv6rangetemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6rangetemplate() *Ipv6rangetemplate {
	this := Ipv6rangetemplate{}
	return &this
}

// NewIpv6rangetemplateWithDefaults instantiates a new Ipv6rangetemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6rangetemplateWithDefaults() *Ipv6rangetemplate {
	this := Ipv6rangetemplate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6rangetemplate) SetRef(v string) {
	o.Ref = &v
}

// GetCloudApiCompatible returns the CloudApiCompatible field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetCloudApiCompatible() bool {
	if o == nil || IsNil(o.CloudApiCompatible) {
		var ret bool
		return ret
	}
	return *o.CloudApiCompatible
}

// GetCloudApiCompatibleOk returns a tuple with the CloudApiCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetCloudApiCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudApiCompatible) {
		return nil, false
	}
	return o.CloudApiCompatible, true
}

// HasCloudApiCompatible returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasCloudApiCompatible() bool {
	if o != nil && !IsNil(o.CloudApiCompatible) {
		return true
	}

	return false
}

// SetCloudApiCompatible gets a reference to the given bool and assigns it to the CloudApiCompatible field.
func (o *Ipv6rangetemplate) SetCloudApiCompatible(v bool) {
	o.CloudApiCompatible = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6rangetemplate) SetComment(v string) {
	o.Comment = &v
}

// GetDelegatedMember returns the DelegatedMember field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetDelegatedMember() Ipv6rangetemplateDelegatedMember {
	if o == nil || IsNil(o.DelegatedMember) {
		var ret Ipv6rangetemplateDelegatedMember
		return ret
	}
	return *o.DelegatedMember
}

// GetDelegatedMemberOk returns a tuple with the DelegatedMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetDelegatedMemberOk() (*Ipv6rangetemplateDelegatedMember, bool) {
	if o == nil || IsNil(o.DelegatedMember) {
		return nil, false
	}
	return o.DelegatedMember, true
}

// HasDelegatedMember returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasDelegatedMember() bool {
	if o != nil && !IsNil(o.DelegatedMember) {
		return true
	}

	return false
}

// SetDelegatedMember gets a reference to the given Ipv6rangetemplateDelegatedMember and assigns it to the DelegatedMember field.
func (o *Ipv6rangetemplate) SetDelegatedMember(v Ipv6rangetemplateDelegatedMember) {
	o.DelegatedMember = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetExclude() []Ipv6rangetemplateExclude {
	if o == nil || IsNil(o.Exclude) {
		var ret []Ipv6rangetemplateExclude
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetExcludeOk() ([]Ipv6rangetemplateExclude, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []Ipv6rangetemplateExclude and assigns it to the Exclude field.
func (o *Ipv6rangetemplate) SetExclude(v []Ipv6rangetemplateExclude) {
	o.Exclude = v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetLogicFilterRules() []Ipv6rangetemplateLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6rangetemplateLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetLogicFilterRulesOk() ([]Ipv6rangetemplateLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6rangetemplateLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6rangetemplate) SetLogicFilterRules(v []Ipv6rangetemplateLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetMember() Ipv6rangetemplateMember {
	if o == nil || IsNil(o.Member) {
		var ret Ipv6rangetemplateMember
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetMemberOk() (*Ipv6rangetemplateMember, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given Ipv6rangetemplateMember and assigns it to the Member field.
func (o *Ipv6rangetemplate) SetMember(v Ipv6rangetemplateMember) {
	o.Member = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6rangetemplate) SetName(v string) {
	o.Name = &v
}

// GetNumberOfAddresses returns the NumberOfAddresses field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetNumberOfAddresses() int64 {
	if o == nil || IsNil(o.NumberOfAddresses) {
		var ret int64
		return ret
	}
	return *o.NumberOfAddresses
}

// GetNumberOfAddressesOk returns a tuple with the NumberOfAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetNumberOfAddressesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfAddresses) {
		return nil, false
	}
	return o.NumberOfAddresses, true
}

// HasNumberOfAddresses returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasNumberOfAddresses() bool {
	if o != nil && !IsNil(o.NumberOfAddresses) {
		return true
	}

	return false
}

// SetNumberOfAddresses gets a reference to the given int64 and assigns it to the NumberOfAddresses field.
func (o *Ipv6rangetemplate) SetNumberOfAddresses(v int64) {
	o.NumberOfAddresses = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *Ipv6rangetemplate) SetOffset(v int64) {
	o.Offset = &v
}

// GetOptionFilterRules returns the OptionFilterRules field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetOptionFilterRules() []Ipv6rangetemplateOptionFilterRules {
	if o == nil || IsNil(o.OptionFilterRules) {
		var ret []Ipv6rangetemplateOptionFilterRules
		return ret
	}
	return o.OptionFilterRules
}

// GetOptionFilterRulesOk returns a tuple with the OptionFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetOptionFilterRulesOk() ([]Ipv6rangetemplateOptionFilterRules, bool) {
	if o == nil || IsNil(o.OptionFilterRules) {
		return nil, false
	}
	return o.OptionFilterRules, true
}

// HasOptionFilterRules returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasOptionFilterRules() bool {
	if o != nil && !IsNil(o.OptionFilterRules) {
		return true
	}

	return false
}

// SetOptionFilterRules gets a reference to the given []Ipv6rangetemplateOptionFilterRules and assigns it to the OptionFilterRules field.
func (o *Ipv6rangetemplate) SetOptionFilterRules(v []Ipv6rangetemplateOptionFilterRules) {
	o.OptionFilterRules = v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Ipv6rangetemplate) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetServerAssociationType returns the ServerAssociationType field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetServerAssociationType() string {
	if o == nil || IsNil(o.ServerAssociationType) {
		var ret string
		return ret
	}
	return *o.ServerAssociationType
}

// GetServerAssociationTypeOk returns a tuple with the ServerAssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetServerAssociationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAssociationType) {
		return nil, false
	}
	return o.ServerAssociationType, true
}

// HasServerAssociationType returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasServerAssociationType() bool {
	if o != nil && !IsNil(o.ServerAssociationType) {
		return true
	}

	return false
}

// SetServerAssociationType gets a reference to the given string and assigns it to the ServerAssociationType field.
func (o *Ipv6rangetemplate) SetServerAssociationType(v string) {
	o.ServerAssociationType = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6rangetemplate) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Ipv6rangetemplate) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6rangetemplate) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6rangetemplate) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Ipv6rangetemplate) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

func (o Ipv6rangetemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6rangetemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CloudApiCompatible) {
		toSerialize["cloud_api_compatible"] = o.CloudApiCompatible
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DelegatedMember) {
		toSerialize["delegated_member"] = o.DelegatedMember
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumberOfAddresses) {
		toSerialize["number_of_addresses"] = o.NumberOfAddresses
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.OptionFilterRules) {
		toSerialize["option_filter_rules"] = o.OptionFilterRules
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.ServerAssociationType) {
		toSerialize["server_association_type"] = o.ServerAssociationType
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	return toSerialize, nil
}

type NullableIpv6rangetemplate struct {
	value *Ipv6rangetemplate
	isSet bool
}

func (v NullableIpv6rangetemplate) Get() *Ipv6rangetemplate {
	return v.value
}

func (v *NullableIpv6rangetemplate) Set(val *Ipv6rangetemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6rangetemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6rangetemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6rangetemplate(val *Ipv6rangetemplate) *NullableIpv6rangetemplate {
	return &NullableIpv6rangetemplate{value: val, isSet: true}
}

func (v NullableIpv6rangetemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6rangetemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
