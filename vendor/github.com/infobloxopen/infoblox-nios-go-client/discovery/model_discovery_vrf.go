/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoveryVrf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryVrf{}

// DiscoveryVrf struct for DiscoveryVrf
type DiscoveryVrf struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Additional information about the VRF.
	Description *string `json:"description,omitempty"`
	// The device to which the VRF belongs.
	Device *string `json:"device,omitempty"`
	// The name of the VRF.
	Name *string `json:"name,omitempty"`
	// The name of the network view in which this VRF resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The route distinguisher associated with the VRF.
	RouteDistinguisher *string `json:"route_distinguisher,omitempty"`
}

// NewDiscoveryVrf instantiates a new DiscoveryVrf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryVrf() *DiscoveryVrf {
	this := DiscoveryVrf{}
	return &this
}

// NewDiscoveryVrfWithDefaults instantiates a new DiscoveryVrf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryVrfWithDefaults() *DiscoveryVrf {
	this := DiscoveryVrf{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DiscoveryVrf) SetRef(v string) {
	o.Ref = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DiscoveryVrf) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DiscoveryVrf) SetDevice(v string) {
	o.Device = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiscoveryVrf) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *DiscoveryVrf) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetRouteDistinguisher returns the RouteDistinguisher field value if set, zero value otherwise.
func (o *DiscoveryVrf) GetRouteDistinguisher() string {
	if o == nil || IsNil(o.RouteDistinguisher) {
		var ret string
		return ret
	}
	return *o.RouteDistinguisher
}

// GetRouteDistinguisherOk returns a tuple with the RouteDistinguisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryVrf) GetRouteDistinguisherOk() (*string, bool) {
	if o == nil || IsNil(o.RouteDistinguisher) {
		return nil, false
	}
	return o.RouteDistinguisher, true
}

// HasRouteDistinguisher returns a boolean if a field has been set.
func (o *DiscoveryVrf) HasRouteDistinguisher() bool {
	if o != nil && !IsNil(o.RouteDistinguisher) {
		return true
	}

	return false
}

// SetRouteDistinguisher gets a reference to the given string and assigns it to the RouteDistinguisher field.
func (o *DiscoveryVrf) SetRouteDistinguisher(v string) {
	o.RouteDistinguisher = &v
}

func (o DiscoveryVrf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryVrf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.RouteDistinguisher) {
		toSerialize["route_distinguisher"] = o.RouteDistinguisher
	}
	return toSerialize, nil
}

type NullableDiscoveryVrf struct {
	value *DiscoveryVrf
	isSet bool
}

func (v NullableDiscoveryVrf) Get() *DiscoveryVrf {
	return v.value
}

func (v *NullableDiscoveryVrf) Set(val *DiscoveryVrf) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryVrf) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryVrf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryVrf(val *DiscoveryVrf) *NullableDiscoveryVrf {
	return &NullableDiscoveryVrf{value: val, isSet: true}
}

func (v NullableDiscoveryVrf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryVrf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
