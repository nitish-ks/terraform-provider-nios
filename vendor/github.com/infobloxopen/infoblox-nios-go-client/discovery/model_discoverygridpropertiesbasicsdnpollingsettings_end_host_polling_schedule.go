/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
)

// checks if the DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule{}

// DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule struct for DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule
type DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule struct {
	// Days of the week when scheduling is triggered.
	Weekdays []string `json:"weekdays,omitempty"`
	// The time zone for the schedule.
	TimeZone *string `json:"time_zone,omitempty"`
	// The recurring time for the schedule in Epoch seconds format. This field is obsolete and is preserved only for backward compatibility purposes. Please use other applicable fields to define the recurring schedule. DO NOT use recurring_time together with these fields. If you use recurring_time with other fields to define the recurring schedule, recurring_time has priority over year, hour_of_day, and minutes_past_hour and will override the values of these fields, although it does not override month and day_of_month. In this case, the recurring time value might be different than the intended value that you define.
	RecurringTime *int64 `json:"recurring_time,omitempty"`
	// The frequency for the scheduled task.
	Frequency *string `json:"frequency,omitempty"`
	// The number of frequency to wait before repeating the scheduled task.
	Every *int64 `json:"every,omitempty"`
	// The minutes past the hour for the scheduled task.
	MinutesPastHour *int64 `json:"minutes_past_hour,omitempty"`
	// The hour of day for the scheduled task.
	HourOfDay *int64 `json:"hour_of_day,omitempty"`
	// The year for the scheduled task.
	Year *int64 `json:"year,omitempty"`
	// The month for the scheduled task.
	Month *int64 `json:"month,omitempty"`
	// The day of the month for the scheduled task.
	DayOfMonth *int64 `json:"day_of_month,omitempty"`
	// Indicates if the scheduled task will be repeated or run only once.
	Repeat *string `json:"repeat,omitempty"`
	// If set to True, the scheduled task is disabled.
	Disable              *bool `json:"disable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule

// NewDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule instantiates a new DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule() *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule {
	this := DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule{}
	return &this
}

// NewDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingScheduleWithDefaults instantiates a new DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingScheduleWithDefaults() *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule {
	this := DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule{}
	return &this
}

// GetWeekdays returns the Weekdays field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetWeekdays() []string {
	if o == nil || IsNil(o.Weekdays) {
		var ret []string
		return ret
	}
	return o.Weekdays
}

// GetWeekdaysOk returns a tuple with the Weekdays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetWeekdaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Weekdays) {
		return nil, false
	}
	return o.Weekdays, true
}

// HasWeekdays returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasWeekdays() bool {
	if o != nil && !IsNil(o.Weekdays) {
		return true
	}

	return false
}

// SetWeekdays gets a reference to the given []string and assigns it to the Weekdays field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetWeekdays(v []string) {
	o.Weekdays = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetRecurringTime returns the RecurringTime field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetRecurringTime() int64 {
	if o == nil || IsNil(o.RecurringTime) {
		var ret int64
		return ret
	}
	return *o.RecurringTime
}

// GetRecurringTimeOk returns a tuple with the RecurringTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetRecurringTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RecurringTime) {
		return nil, false
	}
	return o.RecurringTime, true
}

// HasRecurringTime returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasRecurringTime() bool {
	if o != nil && !IsNil(o.RecurringTime) {
		return true
	}

	return false
}

// SetRecurringTime gets a reference to the given int64 and assigns it to the RecurringTime field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetRecurringTime(v int64) {
	o.RecurringTime = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetFrequency(v string) {
	o.Frequency = &v
}

// GetEvery returns the Every field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetEvery() int64 {
	if o == nil || IsNil(o.Every) {
		var ret int64
		return ret
	}
	return *o.Every
}

// GetEveryOk returns a tuple with the Every field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetEveryOk() (*int64, bool) {
	if o == nil || IsNil(o.Every) {
		return nil, false
	}
	return o.Every, true
}

// HasEvery returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasEvery() bool {
	if o != nil && !IsNil(o.Every) {
		return true
	}

	return false
}

// SetEvery gets a reference to the given int64 and assigns it to the Every field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetEvery(v int64) {
	o.Every = &v
}

// GetMinutesPastHour returns the MinutesPastHour field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetMinutesPastHour() int64 {
	if o == nil || IsNil(o.MinutesPastHour) {
		var ret int64
		return ret
	}
	return *o.MinutesPastHour
}

// GetMinutesPastHourOk returns a tuple with the MinutesPastHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetMinutesPastHourOk() (*int64, bool) {
	if o == nil || IsNil(o.MinutesPastHour) {
		return nil, false
	}
	return o.MinutesPastHour, true
}

// HasMinutesPastHour returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasMinutesPastHour() bool {
	if o != nil && !IsNil(o.MinutesPastHour) {
		return true
	}

	return false
}

// SetMinutesPastHour gets a reference to the given int64 and assigns it to the MinutesPastHour field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetMinutesPastHour(v int64) {
	o.MinutesPastHour = &v
}

// GetHourOfDay returns the HourOfDay field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetHourOfDay() int64 {
	if o == nil || IsNil(o.HourOfDay) {
		var ret int64
		return ret
	}
	return *o.HourOfDay
}

// GetHourOfDayOk returns a tuple with the HourOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetHourOfDayOk() (*int64, bool) {
	if o == nil || IsNil(o.HourOfDay) {
		return nil, false
	}
	return o.HourOfDay, true
}

// HasHourOfDay returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasHourOfDay() bool {
	if o != nil && !IsNil(o.HourOfDay) {
		return true
	}

	return false
}

// SetHourOfDay gets a reference to the given int64 and assigns it to the HourOfDay field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetHourOfDay(v int64) {
	o.HourOfDay = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetYear() int64 {
	if o == nil || IsNil(o.Year) {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetYearOk() (*int64, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetYear(v int64) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetMonth() int64 {
	if o == nil || IsNil(o.Month) {
		var ret int64
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int64 and assigns it to the Month field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetMonth(v int64) {
	o.Month = &v
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetDayOfMonth() int64 {
	if o == nil || IsNil(o.DayOfMonth) {
		var ret int64
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetDayOfMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.DayOfMonth) {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasDayOfMonth() bool {
	if o != nil && !IsNil(o.DayOfMonth) {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int64 and assigns it to the DayOfMonth field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetDayOfMonth(v int64) {
	o.DayOfMonth = &v
}

// GetRepeat returns the Repeat field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetRepeat() string {
	if o == nil || IsNil(o.Repeat) {
		var ret string
		return ret
	}
	return *o.Repeat
}

// GetRepeatOk returns a tuple with the Repeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetRepeatOk() (*string, bool) {
	if o == nil || IsNil(o.Repeat) {
		return nil, false
	}
	return o.Repeat, true
}

// HasRepeat returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasRepeat() bool {
	if o != nil && !IsNil(o.Repeat) {
		return true
	}

	return false
}

// SetRepeat gets a reference to the given string and assigns it to the Repeat field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetRepeat(v string) {
	o.Repeat = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) SetDisable(v bool) {
	o.Disable = &v
}

func (o DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Weekdays) {
		toSerialize["weekdays"] = o.Weekdays
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.RecurringTime) {
		toSerialize["recurring_time"] = o.RecurringTime
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Every) {
		toSerialize["every"] = o.Every
	}
	if !IsNil(o.MinutesPastHour) {
		toSerialize["minutes_past_hour"] = o.MinutesPastHour
	}
	if !IsNil(o.HourOfDay) {
		toSerialize["hour_of_day"] = o.HourOfDay
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.DayOfMonth) {
		toSerialize["day_of_month"] = o.DayOfMonth
	}
	if !IsNil(o.Repeat) {
		toSerialize["repeat"] = o.Repeat
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) UnmarshalJSON(data []byte) (err error) {
	varDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule := _DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule{}

	err = json.Unmarshal(data, &varDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule)

	if err != nil {
		return err
	}

	*o = DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule(varDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "weekdays")
		delete(additionalProperties, "time_zone")
		delete(additionalProperties, "recurring_time")
		delete(additionalProperties, "frequency")
		delete(additionalProperties, "every")
		delete(additionalProperties, "minutes_past_hour")
		delete(additionalProperties, "hour_of_day")
		delete(additionalProperties, "year")
		delete(additionalProperties, "month")
		delete(additionalProperties, "day_of_month")
		delete(additionalProperties, "repeat")
		delete(additionalProperties, "disable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule struct {
	value *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule
	isSet bool
}

func (v NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) Get() *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule {
	return v.value
}

func (v *NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) Set(val *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule(val *DiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) *NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule {
	return &NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule{value: val, isSet: true}
}

func (v NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoverygridpropertiesbasicsdnpollingsettingsEndHostPollingSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
