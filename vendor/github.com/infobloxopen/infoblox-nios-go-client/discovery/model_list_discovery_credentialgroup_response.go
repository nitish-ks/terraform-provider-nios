/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryCredentialgroupResponse - struct for ListDiscoveryCredentialgroupResponse
type ListDiscoveryCredentialgroupResponse struct {
	ListDiscoveryCredentialgroupResponseObject *ListDiscoveryCredentialgroupResponseObject
	ArrayOfDiscoveryCredentialgroup            *[]DiscoveryCredentialgroup
}

// ListDiscoveryCredentialgroupResponseObjectAsListDiscoveryCredentialgroupResponse is a convenience function that returns ListDiscoveryCredentialgroupResponseObject wrapped in ListDiscoveryCredentialgroupResponse
func ListDiscoveryCredentialgroupResponseObjectAsListDiscoveryCredentialgroupResponse(v *ListDiscoveryCredentialgroupResponseObject) ListDiscoveryCredentialgroupResponse {
	return ListDiscoveryCredentialgroupResponse{
		ListDiscoveryCredentialgroupResponseObject: v,
	}
}

// []DiscoveryCredentialgroupAsListDiscoveryCredentialgroupResponse is a convenience function that returns []DiscoveryCredentialgroup wrapped in ListDiscoveryCredentialgroupResponse
func ArrayOfDiscoveryCredentialgroupAsListDiscoveryCredentialgroupResponse(v *[]DiscoveryCredentialgroup) ListDiscoveryCredentialgroupResponse {
	return ListDiscoveryCredentialgroupResponse{
		ArrayOfDiscoveryCredentialgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryCredentialgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryCredentialgroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryCredentialgroupResponseObject)
	if err == nil {
		jsonListDiscoveryCredentialgroupResponseObject, _ := json.Marshal(dst.ListDiscoveryCredentialgroupResponseObject)
		if string(jsonListDiscoveryCredentialgroupResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryCredentialgroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryCredentialgroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryCredentialgroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryCredentialgroup)
	if err == nil {
		jsonArrayOfDiscoveryCredentialgroup, _ := json.Marshal(dst.ArrayOfDiscoveryCredentialgroup)
		if string(jsonArrayOfDiscoveryCredentialgroup) == "{}" { // empty struct
			dst.ArrayOfDiscoveryCredentialgroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryCredentialgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryCredentialgroupResponseObject = nil
		dst.ArrayOfDiscoveryCredentialgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryCredentialgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryCredentialgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryCredentialgroupResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryCredentialgroupResponseObject)
	}

	if src.ArrayOfDiscoveryCredentialgroup != nil {
		return json.Marshal(&src.ArrayOfDiscoveryCredentialgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryCredentialgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryCredentialgroupResponseObject != nil {
		return obj.ListDiscoveryCredentialgroupResponseObject
	}

	if obj.ArrayOfDiscoveryCredentialgroup != nil {
		return obj.ArrayOfDiscoveryCredentialgroup
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryCredentialgroupResponse struct {
	value *ListDiscoveryCredentialgroupResponse
	isSet bool
}

func (v NullableListDiscoveryCredentialgroupResponse) Get() *ListDiscoveryCredentialgroupResponse {
	return v.value
}

func (v *NullableListDiscoveryCredentialgroupResponse) Set(val *ListDiscoveryCredentialgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryCredentialgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryCredentialgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryCredentialgroupResponse(val *ListDiscoveryCredentialgroupResponse) *NullableListDiscoveryCredentialgroupResponse {
	return &NullableListDiscoveryCredentialgroupResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryCredentialgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryCredentialgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
