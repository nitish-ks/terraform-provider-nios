/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryDeviceResponse - struct for ListDiscoveryDeviceResponse
type ListDiscoveryDeviceResponse struct {
	ListDiscoveryDeviceResponseObject *ListDiscoveryDeviceResponseObject
	ArrayOfDiscoveryDevice            *[]DiscoveryDevice
}

// ListDiscoveryDeviceResponseObjectAsListDiscoveryDeviceResponse is a convenience function that returns ListDiscoveryDeviceResponseObject wrapped in ListDiscoveryDeviceResponse
func ListDiscoveryDeviceResponseObjectAsListDiscoveryDeviceResponse(v *ListDiscoveryDeviceResponseObject) ListDiscoveryDeviceResponse {
	return ListDiscoveryDeviceResponse{
		ListDiscoveryDeviceResponseObject: v,
	}
}

// []DiscoveryDeviceAsListDiscoveryDeviceResponse is a convenience function that returns []DiscoveryDevice wrapped in ListDiscoveryDeviceResponse
func ArrayOfDiscoveryDeviceAsListDiscoveryDeviceResponse(v *[]DiscoveryDevice) ListDiscoveryDeviceResponse {
	return ListDiscoveryDeviceResponse{
		ArrayOfDiscoveryDevice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryDeviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryDeviceResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryDeviceResponseObject)
	if err == nil {
		jsonListDiscoveryDeviceResponseObject, _ := json.Marshal(dst.ListDiscoveryDeviceResponseObject)
		if string(jsonListDiscoveryDeviceResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryDeviceResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryDeviceResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryDevice
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryDevice)
	if err == nil {
		jsonArrayOfDiscoveryDevice, _ := json.Marshal(dst.ArrayOfDiscoveryDevice)
		if string(jsonArrayOfDiscoveryDevice) == "{}" { // empty struct
			dst.ArrayOfDiscoveryDevice = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryDevice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryDeviceResponseObject = nil
		dst.ArrayOfDiscoveryDevice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryDeviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryDeviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryDeviceResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryDeviceResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryDeviceResponseObject)
	}

	if src.ArrayOfDiscoveryDevice != nil {
		return json.Marshal(&src.ArrayOfDiscoveryDevice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryDeviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryDeviceResponseObject != nil {
		return obj.ListDiscoveryDeviceResponseObject
	}

	if obj.ArrayOfDiscoveryDevice != nil {
		return obj.ArrayOfDiscoveryDevice
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryDeviceResponse struct {
	value *ListDiscoveryDeviceResponse
	isSet bool
}

func (v NullableListDiscoveryDeviceResponse) Get() *ListDiscoveryDeviceResponse {
	return v.value
}

func (v *NullableListDiscoveryDeviceResponse) Set(val *ListDiscoveryDeviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryDeviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryDeviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryDeviceResponse(val *ListDiscoveryDeviceResponse) *NullableListDiscoveryDeviceResponse {
	return &NullableListDiscoveryDeviceResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryDeviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryDeviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
