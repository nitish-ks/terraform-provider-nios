/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryDevicecomponentResponse - struct for ListDiscoveryDevicecomponentResponse
type ListDiscoveryDevicecomponentResponse struct {
	ListDiscoveryDevicecomponentResponseObject *ListDiscoveryDevicecomponentResponseObject
	ArrayOfDiscoveryDevicecomponent            *[]DiscoveryDevicecomponent
}

// ListDiscoveryDevicecomponentResponseObjectAsListDiscoveryDevicecomponentResponse is a convenience function that returns ListDiscoveryDevicecomponentResponseObject wrapped in ListDiscoveryDevicecomponentResponse
func ListDiscoveryDevicecomponentResponseObjectAsListDiscoveryDevicecomponentResponse(v *ListDiscoveryDevicecomponentResponseObject) ListDiscoveryDevicecomponentResponse {
	return ListDiscoveryDevicecomponentResponse{
		ListDiscoveryDevicecomponentResponseObject: v,
	}
}

// []DiscoveryDevicecomponentAsListDiscoveryDevicecomponentResponse is a convenience function that returns []DiscoveryDevicecomponent wrapped in ListDiscoveryDevicecomponentResponse
func ArrayOfDiscoveryDevicecomponentAsListDiscoveryDevicecomponentResponse(v *[]DiscoveryDevicecomponent) ListDiscoveryDevicecomponentResponse {
	return ListDiscoveryDevicecomponentResponse{
		ArrayOfDiscoveryDevicecomponent: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryDevicecomponentResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryDevicecomponentResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryDevicecomponentResponseObject)
	if err == nil {
		jsonListDiscoveryDevicecomponentResponseObject, _ := json.Marshal(dst.ListDiscoveryDevicecomponentResponseObject)
		if string(jsonListDiscoveryDevicecomponentResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryDevicecomponentResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryDevicecomponentResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryDevicecomponent
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryDevicecomponent)
	if err == nil {
		jsonArrayOfDiscoveryDevicecomponent, _ := json.Marshal(dst.ArrayOfDiscoveryDevicecomponent)
		if string(jsonArrayOfDiscoveryDevicecomponent) == "{}" { // empty struct
			dst.ArrayOfDiscoveryDevicecomponent = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryDevicecomponent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryDevicecomponentResponseObject = nil
		dst.ArrayOfDiscoveryDevicecomponent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryDevicecomponentResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryDevicecomponentResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryDevicecomponentResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryDevicecomponentResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryDevicecomponentResponseObject)
	}

	if src.ArrayOfDiscoveryDevicecomponent != nil {
		return json.Marshal(&src.ArrayOfDiscoveryDevicecomponent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryDevicecomponentResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryDevicecomponentResponseObject != nil {
		return obj.ListDiscoveryDevicecomponentResponseObject
	}

	if obj.ArrayOfDiscoveryDevicecomponent != nil {
		return obj.ArrayOfDiscoveryDevicecomponent
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryDevicecomponentResponse struct {
	value *ListDiscoveryDevicecomponentResponse
	isSet bool
}

func (v NullableListDiscoveryDevicecomponentResponse) Get() *ListDiscoveryDevicecomponentResponse {
	return v.value
}

func (v *NullableListDiscoveryDevicecomponentResponse) Set(val *ListDiscoveryDevicecomponentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryDevicecomponentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryDevicecomponentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryDevicecomponentResponse(val *ListDiscoveryDevicecomponentResponse) *NullableListDiscoveryDevicecomponentResponse {
	return &NullableListDiscoveryDevicecomponentResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryDevicecomponentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryDevicecomponentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
