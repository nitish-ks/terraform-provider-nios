/*
Infoblox DISCOVERY API

OpenAPI specification for Infoblox NIOS WAPI DISCOVERY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discovery

import (
	"encoding/json"
	"fmt"
)

// ListDiscoveryDeviceneighborResponse - struct for ListDiscoveryDeviceneighborResponse
type ListDiscoveryDeviceneighborResponse struct {
	ListDiscoveryDeviceneighborResponseObject *ListDiscoveryDeviceneighborResponseObject
	ArrayOfDiscoveryDeviceneighbor            *[]DiscoveryDeviceneighbor
}

// ListDiscoveryDeviceneighborResponseObjectAsListDiscoveryDeviceneighborResponse is a convenience function that returns ListDiscoveryDeviceneighborResponseObject wrapped in ListDiscoveryDeviceneighborResponse
func ListDiscoveryDeviceneighborResponseObjectAsListDiscoveryDeviceneighborResponse(v *ListDiscoveryDeviceneighborResponseObject) ListDiscoveryDeviceneighborResponse {
	return ListDiscoveryDeviceneighborResponse{
		ListDiscoveryDeviceneighborResponseObject: v,
	}
}

// []DiscoveryDeviceneighborAsListDiscoveryDeviceneighborResponse is a convenience function that returns []DiscoveryDeviceneighbor wrapped in ListDiscoveryDeviceneighborResponse
func ArrayOfDiscoveryDeviceneighborAsListDiscoveryDeviceneighborResponse(v *[]DiscoveryDeviceneighbor) ListDiscoveryDeviceneighborResponse {
	return ListDiscoveryDeviceneighborResponse{
		ArrayOfDiscoveryDeviceneighbor: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDiscoveryDeviceneighborResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDiscoveryDeviceneighborResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDiscoveryDeviceneighborResponseObject)
	if err == nil {
		jsonListDiscoveryDeviceneighborResponseObject, _ := json.Marshal(dst.ListDiscoveryDeviceneighborResponseObject)
		if string(jsonListDiscoveryDeviceneighborResponseObject) == "{}" { // empty struct
			dst.ListDiscoveryDeviceneighborResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDiscoveryDeviceneighborResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDiscoveryDeviceneighbor
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDiscoveryDeviceneighbor)
	if err == nil {
		jsonArrayOfDiscoveryDeviceneighbor, _ := json.Marshal(dst.ArrayOfDiscoveryDeviceneighbor)
		if string(jsonArrayOfDiscoveryDeviceneighbor) == "{}" { // empty struct
			dst.ArrayOfDiscoveryDeviceneighbor = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDiscoveryDeviceneighbor = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDiscoveryDeviceneighborResponseObject = nil
		dst.ArrayOfDiscoveryDeviceneighbor = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDiscoveryDeviceneighborResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDiscoveryDeviceneighborResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDiscoveryDeviceneighborResponse) MarshalJSON() ([]byte, error) {
	if src.ListDiscoveryDeviceneighborResponseObject != nil {
		return json.Marshal(&src.ListDiscoveryDeviceneighborResponseObject)
	}

	if src.ArrayOfDiscoveryDeviceneighbor != nil {
		return json.Marshal(&src.ArrayOfDiscoveryDeviceneighbor)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDiscoveryDeviceneighborResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDiscoveryDeviceneighborResponseObject != nil {
		return obj.ListDiscoveryDeviceneighborResponseObject
	}

	if obj.ArrayOfDiscoveryDeviceneighbor != nil {
		return obj.ArrayOfDiscoveryDeviceneighbor
	}

	// all schemas are nil
	return nil
}

type NullableListDiscoveryDeviceneighborResponse struct {
	value *ListDiscoveryDeviceneighborResponse
	isSet bool
}

func (v NullableListDiscoveryDeviceneighborResponse) Get() *ListDiscoveryDeviceneighborResponse {
	return v.value
}

func (v *NullableListDiscoveryDeviceneighborResponse) Set(val *ListDiscoveryDeviceneighborResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDiscoveryDeviceneighborResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDiscoveryDeviceneighborResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDiscoveryDeviceneighborResponse(val *ListDiscoveryDeviceneighborResponse) *NullableListDiscoveryDeviceneighborResponse {
	return &NullableListDiscoveryDeviceneighborResponse{value: val, isSet: true}
}

func (v NullableListDiscoveryDeviceneighborResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDiscoveryDeviceneighborResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
