/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DdnsPrincipalcluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdnsPrincipalcluster{}

// DdnsPrincipalcluster struct for DdnsPrincipalcluster
type DdnsPrincipalcluster struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Comment for the DDNS Principal Cluster.
	Comment *string `json:"comment,omitempty"`
	// The DDNS Principal cluster group name.
	Group *string `json:"group,omitempty"`
	// The name of this DDNS Principal Cluster.
	Name *string `json:"name,omitempty"`
	// The list of equivalent principals.
	Principals []string `json:"principals,omitempty"`
}

// NewDdnsPrincipalcluster instantiates a new DdnsPrincipalcluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdnsPrincipalcluster() *DdnsPrincipalcluster {
	this := DdnsPrincipalcluster{}
	return &this
}

// NewDdnsPrincipalclusterWithDefaults instantiates a new DdnsPrincipalcluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdnsPrincipalclusterWithDefaults() *DdnsPrincipalcluster {
	this := DdnsPrincipalcluster{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DdnsPrincipalcluster) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdnsPrincipalcluster) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DdnsPrincipalcluster) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DdnsPrincipalcluster) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DdnsPrincipalcluster) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdnsPrincipalcluster) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DdnsPrincipalcluster) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DdnsPrincipalcluster) SetComment(v string) {
	o.Comment = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DdnsPrincipalcluster) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdnsPrincipalcluster) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DdnsPrincipalcluster) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *DdnsPrincipalcluster) SetGroup(v string) {
	o.Group = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DdnsPrincipalcluster) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdnsPrincipalcluster) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DdnsPrincipalcluster) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DdnsPrincipalcluster) SetName(v string) {
	o.Name = &v
}

// GetPrincipals returns the Principals field value if set, zero value otherwise.
func (o *DdnsPrincipalcluster) GetPrincipals() []string {
	if o == nil || IsNil(o.Principals) {
		var ret []string
		return ret
	}
	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdnsPrincipalcluster) GetPrincipalsOk() ([]string, bool) {
	if o == nil || IsNil(o.Principals) {
		return nil, false
	}
	return o.Principals, true
}

// HasPrincipals returns a boolean if a field has been set.
func (o *DdnsPrincipalcluster) HasPrincipals() bool {
	if o != nil && !IsNil(o.Principals) {
		return true
	}

	return false
}

// SetPrincipals gets a reference to the given []string and assigns it to the Principals field.
func (o *DdnsPrincipalcluster) SetPrincipals(v []string) {
	o.Principals = v
}

func (o DdnsPrincipalcluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdnsPrincipalcluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Principals) {
		toSerialize["principals"] = o.Principals
	}
	return toSerialize, nil
}

type NullableDdnsPrincipalcluster struct {
	value *DdnsPrincipalcluster
	isSet bool
}

func (v NullableDdnsPrincipalcluster) Get() *DdnsPrincipalcluster {
	return v.value
}

func (v *NullableDdnsPrincipalcluster) Set(val *DdnsPrincipalcluster) {
	v.value = val
	v.isSet = true
}

func (v NullableDdnsPrincipalcluster) IsSet() bool {
	return v.isSet
}

func (v *NullableDdnsPrincipalcluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdnsPrincipalcluster(val *DdnsPrincipalcluster) *NullableDdnsPrincipalcluster {
	return &NullableDdnsPrincipalcluster{value: val, isSet: true}
}

func (v NullableDdnsPrincipalcluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdnsPrincipalcluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
