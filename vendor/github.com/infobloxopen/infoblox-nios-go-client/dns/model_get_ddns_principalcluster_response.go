/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetDdnsPrincipalclusterResponse - struct for GetDdnsPrincipalclusterResponse
type GetDdnsPrincipalclusterResponse struct {
	DdnsPrincipalcluster                          *DdnsPrincipalcluster
	GetDdnsPrincipalclusterResponseObjectAsResult *GetDdnsPrincipalclusterResponseObjectAsResult
}

// DdnsPrincipalclusterAsGetDdnsPrincipalclusterResponse is a convenience function that returns DdnsPrincipalcluster wrapped in GetDdnsPrincipalclusterResponse
func DdnsPrincipalclusterAsGetDdnsPrincipalclusterResponse(v *DdnsPrincipalcluster) GetDdnsPrincipalclusterResponse {
	return GetDdnsPrincipalclusterResponse{
		DdnsPrincipalcluster: v,
	}
}

// GetDdnsPrincipalclusterResponseObjectAsResultAsGetDdnsPrincipalclusterResponse is a convenience function that returns GetDdnsPrincipalclusterResponseObjectAsResult wrapped in GetDdnsPrincipalclusterResponse
func GetDdnsPrincipalclusterResponseObjectAsResultAsGetDdnsPrincipalclusterResponse(v *GetDdnsPrincipalclusterResponseObjectAsResult) GetDdnsPrincipalclusterResponse {
	return GetDdnsPrincipalclusterResponse{
		GetDdnsPrincipalclusterResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDdnsPrincipalclusterResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DdnsPrincipalcluster
	err = newStrictDecoder(data).Decode(&dst.DdnsPrincipalcluster)
	if err == nil {
		jsonDdnsPrincipalcluster, _ := json.Marshal(dst.DdnsPrincipalcluster)
		if string(jsonDdnsPrincipalcluster) == "{}" { // empty struct
			dst.DdnsPrincipalcluster = nil
		} else {
			match++
		}
	} else {
		dst.DdnsPrincipalcluster = nil
	}

	// try to unmarshal data into GetDdnsPrincipalclusterResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDdnsPrincipalclusterResponseObjectAsResult)
	if err == nil {
		jsonGetDdnsPrincipalclusterResponseObjectAsResult, _ := json.Marshal(dst.GetDdnsPrincipalclusterResponseObjectAsResult)
		if string(jsonGetDdnsPrincipalclusterResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDdnsPrincipalclusterResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDdnsPrincipalclusterResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DdnsPrincipalcluster = nil
		dst.GetDdnsPrincipalclusterResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDdnsPrincipalclusterResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDdnsPrincipalclusterResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	if src.DdnsPrincipalcluster != nil {
		return json.Marshal(&src.DdnsPrincipalcluster)
	}

	if src.GetDdnsPrincipalclusterResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDdnsPrincipalclusterResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDdnsPrincipalclusterResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DdnsPrincipalcluster != nil {
		return obj.DdnsPrincipalcluster
	}

	if obj.GetDdnsPrincipalclusterResponseObjectAsResult != nil {
		return obj.GetDdnsPrincipalclusterResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDdnsPrincipalclusterResponse struct {
	value *GetDdnsPrincipalclusterResponse
	isSet bool
}

func (v NullableGetDdnsPrincipalclusterResponse) Get() *GetDdnsPrincipalclusterResponse {
	return v.value
}

func (v *NullableGetDdnsPrincipalclusterResponse) Set(val *GetDdnsPrincipalclusterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDdnsPrincipalclusterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDdnsPrincipalclusterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDdnsPrincipalclusterResponse(val *GetDdnsPrincipalclusterResponse) *NullableGetDdnsPrincipalclusterResponse {
	return &NullableGetDdnsPrincipalclusterResponse{value: val, isSet: true}
}

func (v NullableGetDdnsPrincipalclusterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDdnsPrincipalclusterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
