/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetDns64groupResponse - struct for GetDns64groupResponse
type GetDns64groupResponse struct {
	Dns64group                          *Dns64group
	GetDns64groupResponseObjectAsResult *GetDns64groupResponseObjectAsResult
}

// Dns64groupAsGetDns64groupResponse is a convenience function that returns Dns64group wrapped in GetDns64groupResponse
func Dns64groupAsGetDns64groupResponse(v *Dns64group) GetDns64groupResponse {
	return GetDns64groupResponse{
		Dns64group: v,
	}
}

// GetDns64groupResponseObjectAsResultAsGetDns64groupResponse is a convenience function that returns GetDns64groupResponseObjectAsResult wrapped in GetDns64groupResponse
func GetDns64groupResponseObjectAsResultAsGetDns64groupResponse(v *GetDns64groupResponseObjectAsResult) GetDns64groupResponse {
	return GetDns64groupResponse{
		GetDns64groupResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDns64groupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dns64group
	err = newStrictDecoder(data).Decode(&dst.Dns64group)
	if err == nil {
		jsonDns64group, _ := json.Marshal(dst.Dns64group)
		if string(jsonDns64group) == "{}" { // empty struct
			dst.Dns64group = nil
		} else {
			match++
		}
	} else {
		dst.Dns64group = nil
	}

	// try to unmarshal data into GetDns64groupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDns64groupResponseObjectAsResult)
	if err == nil {
		jsonGetDns64groupResponseObjectAsResult, _ := json.Marshal(dst.GetDns64groupResponseObjectAsResult)
		if string(jsonGetDns64groupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDns64groupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDns64groupResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dns64group = nil
		dst.GetDns64groupResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDns64groupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDns64groupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDns64groupResponse) MarshalJSON() ([]byte, error) {
	if src.Dns64group != nil {
		return json.Marshal(&src.Dns64group)
	}

	if src.GetDns64groupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDns64groupResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDns64groupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Dns64group != nil {
		return obj.Dns64group
	}

	if obj.GetDns64groupResponseObjectAsResult != nil {
		return obj.GetDns64groupResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDns64groupResponse struct {
	value *GetDns64groupResponse
	isSet bool
}

func (v NullableGetDns64groupResponse) Get() *GetDns64groupResponse {
	return v.value
}

func (v *NullableGetDns64groupResponse) Set(val *GetDns64groupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDns64groupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDns64groupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDns64groupResponse(val *GetDns64groupResponse) *NullableGetDns64groupResponse {
	return &NullableGetDns64groupResponse{value: val, isSet: true}
}

func (v NullableGetDns64groupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDns64groupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
