/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetNsgroupDelegationResponse - struct for GetNsgroupDelegationResponse
type GetNsgroupDelegationResponse struct {
	GetNsgroupDelegationResponseObjectAsResult *GetNsgroupDelegationResponseObjectAsResult
	NsgroupDelegation                          *NsgroupDelegation
}

// GetNsgroupDelegationResponseObjectAsResultAsGetNsgroupDelegationResponse is a convenience function that returns GetNsgroupDelegationResponseObjectAsResult wrapped in GetNsgroupDelegationResponse
func GetNsgroupDelegationResponseObjectAsResultAsGetNsgroupDelegationResponse(v *GetNsgroupDelegationResponseObjectAsResult) GetNsgroupDelegationResponse {
	return GetNsgroupDelegationResponse{
		GetNsgroupDelegationResponseObjectAsResult: v,
	}
}

// NsgroupDelegationAsGetNsgroupDelegationResponse is a convenience function that returns NsgroupDelegation wrapped in GetNsgroupDelegationResponse
func NsgroupDelegationAsGetNsgroupDelegationResponse(v *NsgroupDelegation) GetNsgroupDelegationResponse {
	return GetNsgroupDelegationResponse{
		NsgroupDelegation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNsgroupDelegationResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNsgroupDelegationResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNsgroupDelegationResponseObjectAsResult)
	if err == nil {
		jsonGetNsgroupDelegationResponseObjectAsResult, _ := json.Marshal(dst.GetNsgroupDelegationResponseObjectAsResult)
		if string(jsonGetNsgroupDelegationResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNsgroupDelegationResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNsgroupDelegationResponseObjectAsResult = nil
	}

	// try to unmarshal data into NsgroupDelegation
	err = newStrictDecoder(data).Decode(&dst.NsgroupDelegation)
	if err == nil {
		jsonNsgroupDelegation, _ := json.Marshal(dst.NsgroupDelegation)
		if string(jsonNsgroupDelegation) == "{}" { // empty struct
			dst.NsgroupDelegation = nil
		} else {
			match++
		}
	} else {
		dst.NsgroupDelegation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNsgroupDelegationResponseObjectAsResult = nil
		dst.NsgroupDelegation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNsgroupDelegationResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNsgroupDelegationResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNsgroupDelegationResponse) MarshalJSON() ([]byte, error) {
	if src.GetNsgroupDelegationResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNsgroupDelegationResponseObjectAsResult)
	}

	if src.NsgroupDelegation != nil {
		return json.Marshal(&src.NsgroupDelegation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNsgroupDelegationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNsgroupDelegationResponseObjectAsResult != nil {
		return obj.GetNsgroupDelegationResponseObjectAsResult
	}

	if obj.NsgroupDelegation != nil {
		return obj.NsgroupDelegation
	}

	// all schemas are nil
	return nil
}

type NullableGetNsgroupDelegationResponse struct {
	value *GetNsgroupDelegationResponse
	isSet bool
}

func (v NullableGetNsgroupDelegationResponse) Get() *GetNsgroupDelegationResponse {
	return v.value
}

func (v *NullableGetNsgroupDelegationResponse) Set(val *GetNsgroupDelegationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNsgroupDelegationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNsgroupDelegationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNsgroupDelegationResponse(val *GetNsgroupDelegationResponse) *NullableGetNsgroupDelegationResponse {
	return &NullableGetNsgroupDelegationResponse{value: val, isSet: true}
}

func (v NullableGetNsgroupDelegationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNsgroupDelegationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
