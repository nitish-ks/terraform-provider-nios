/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetNsgroupForwardingmemberResponse - struct for GetNsgroupForwardingmemberResponse
type GetNsgroupForwardingmemberResponse struct {
	GetNsgroupForwardingmemberResponseObjectAsResult *GetNsgroupForwardingmemberResponseObjectAsResult
	NsgroupForwardingmember                          *NsgroupForwardingmember
}

// GetNsgroupForwardingmemberResponseObjectAsResultAsGetNsgroupForwardingmemberResponse is a convenience function that returns GetNsgroupForwardingmemberResponseObjectAsResult wrapped in GetNsgroupForwardingmemberResponse
func GetNsgroupForwardingmemberResponseObjectAsResultAsGetNsgroupForwardingmemberResponse(v *GetNsgroupForwardingmemberResponseObjectAsResult) GetNsgroupForwardingmemberResponse {
	return GetNsgroupForwardingmemberResponse{
		GetNsgroupForwardingmemberResponseObjectAsResult: v,
	}
}

// NsgroupForwardingmemberAsGetNsgroupForwardingmemberResponse is a convenience function that returns NsgroupForwardingmember wrapped in GetNsgroupForwardingmemberResponse
func NsgroupForwardingmemberAsGetNsgroupForwardingmemberResponse(v *NsgroupForwardingmember) GetNsgroupForwardingmemberResponse {
	return GetNsgroupForwardingmemberResponse{
		NsgroupForwardingmember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNsgroupForwardingmemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNsgroupForwardingmemberResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNsgroupForwardingmemberResponseObjectAsResult)
	if err == nil {
		jsonGetNsgroupForwardingmemberResponseObjectAsResult, _ := json.Marshal(dst.GetNsgroupForwardingmemberResponseObjectAsResult)
		if string(jsonGetNsgroupForwardingmemberResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNsgroupForwardingmemberResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNsgroupForwardingmemberResponseObjectAsResult = nil
	}

	// try to unmarshal data into NsgroupForwardingmember
	err = newStrictDecoder(data).Decode(&dst.NsgroupForwardingmember)
	if err == nil {
		jsonNsgroupForwardingmember, _ := json.Marshal(dst.NsgroupForwardingmember)
		if string(jsonNsgroupForwardingmember) == "{}" { // empty struct
			dst.NsgroupForwardingmember = nil
		} else {
			match++
		}
	} else {
		dst.NsgroupForwardingmember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNsgroupForwardingmemberResponseObjectAsResult = nil
		dst.NsgroupForwardingmember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNsgroupForwardingmemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNsgroupForwardingmemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNsgroupForwardingmemberResponse) MarshalJSON() ([]byte, error) {
	if src.GetNsgroupForwardingmemberResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNsgroupForwardingmemberResponseObjectAsResult)
	}

	if src.NsgroupForwardingmember != nil {
		return json.Marshal(&src.NsgroupForwardingmember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNsgroupForwardingmemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNsgroupForwardingmemberResponseObjectAsResult != nil {
		return obj.GetNsgroupForwardingmemberResponseObjectAsResult
	}

	if obj.NsgroupForwardingmember != nil {
		return obj.NsgroupForwardingmember
	}

	// all schemas are nil
	return nil
}

type NullableGetNsgroupForwardingmemberResponse struct {
	value *GetNsgroupForwardingmemberResponse
	isSet bool
}

func (v NullableGetNsgroupForwardingmemberResponse) Get() *GetNsgroupForwardingmemberResponse {
	return v.value
}

func (v *NullableGetNsgroupForwardingmemberResponse) Set(val *GetNsgroupForwardingmemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNsgroupForwardingmemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNsgroupForwardingmemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNsgroupForwardingmemberResponse(val *GetNsgroupForwardingmemberResponse) *NullableGetNsgroupForwardingmemberResponse {
	return &NullableGetNsgroupForwardingmemberResponse{value: val, isSet: true}
}

func (v NullableGetNsgroupForwardingmemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNsgroupForwardingmemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
