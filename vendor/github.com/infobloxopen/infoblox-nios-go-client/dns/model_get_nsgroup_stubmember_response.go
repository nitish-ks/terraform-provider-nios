/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetNsgroupStubmemberResponse - struct for GetNsgroupStubmemberResponse
type GetNsgroupStubmemberResponse struct {
	GetNsgroupStubmemberResponseObjectAsResult *GetNsgroupStubmemberResponseObjectAsResult
	NsgroupStubmember                          *NsgroupStubmember
}

// GetNsgroupStubmemberResponseObjectAsResultAsGetNsgroupStubmemberResponse is a convenience function that returns GetNsgroupStubmemberResponseObjectAsResult wrapped in GetNsgroupStubmemberResponse
func GetNsgroupStubmemberResponseObjectAsResultAsGetNsgroupStubmemberResponse(v *GetNsgroupStubmemberResponseObjectAsResult) GetNsgroupStubmemberResponse {
	return GetNsgroupStubmemberResponse{
		GetNsgroupStubmemberResponseObjectAsResult: v,
	}
}

// NsgroupStubmemberAsGetNsgroupStubmemberResponse is a convenience function that returns NsgroupStubmember wrapped in GetNsgroupStubmemberResponse
func NsgroupStubmemberAsGetNsgroupStubmemberResponse(v *NsgroupStubmember) GetNsgroupStubmemberResponse {
	return GetNsgroupStubmemberResponse{
		NsgroupStubmember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNsgroupStubmemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNsgroupStubmemberResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNsgroupStubmemberResponseObjectAsResult)
	if err == nil {
		jsonGetNsgroupStubmemberResponseObjectAsResult, _ := json.Marshal(dst.GetNsgroupStubmemberResponseObjectAsResult)
		if string(jsonGetNsgroupStubmemberResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNsgroupStubmemberResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNsgroupStubmemberResponseObjectAsResult = nil
	}

	// try to unmarshal data into NsgroupStubmember
	err = newStrictDecoder(data).Decode(&dst.NsgroupStubmember)
	if err == nil {
		jsonNsgroupStubmember, _ := json.Marshal(dst.NsgroupStubmember)
		if string(jsonNsgroupStubmember) == "{}" { // empty struct
			dst.NsgroupStubmember = nil
		} else {
			match++
		}
	} else {
		dst.NsgroupStubmember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNsgroupStubmemberResponseObjectAsResult = nil
		dst.NsgroupStubmember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNsgroupStubmemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNsgroupStubmemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNsgroupStubmemberResponse) MarshalJSON() ([]byte, error) {
	if src.GetNsgroupStubmemberResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNsgroupStubmemberResponseObjectAsResult)
	}

	if src.NsgroupStubmember != nil {
		return json.Marshal(&src.NsgroupStubmember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNsgroupStubmemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNsgroupStubmemberResponseObjectAsResult != nil {
		return obj.GetNsgroupStubmemberResponseObjectAsResult
	}

	if obj.NsgroupStubmember != nil {
		return obj.NsgroupStubmember
	}

	// all schemas are nil
	return nil
}

type NullableGetNsgroupStubmemberResponse struct {
	value *GetNsgroupStubmemberResponse
	isSet bool
}

func (v NullableGetNsgroupStubmemberResponse) Get() *GetNsgroupStubmemberResponse {
	return v.value
}

func (v *NullableGetNsgroupStubmemberResponse) Set(val *GetNsgroupStubmemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNsgroupStubmemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNsgroupStubmemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNsgroupStubmemberResponse(val *GetNsgroupStubmemberResponse) *NullableGetNsgroupStubmemberResponse {
	return &NullableGetNsgroupStubmemberResponse{value: val, isSet: true}
}

func (v NullableGetNsgroupStubmemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNsgroupStubmemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
