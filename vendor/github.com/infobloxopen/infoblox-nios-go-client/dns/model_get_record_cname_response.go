/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordCnameResponse - struct for GetRecordCnameResponse
type GetRecordCnameResponse struct {
	GetRecordCnameResponseObjectAsResult *GetRecordCnameResponseObjectAsResult
	RecordCname                          *RecordCname
}

// GetRecordCnameResponseObjectAsResultAsGetRecordCnameResponse is a convenience function that returns GetRecordCnameResponseObjectAsResult wrapped in GetRecordCnameResponse
func GetRecordCnameResponseObjectAsResultAsGetRecordCnameResponse(v *GetRecordCnameResponseObjectAsResult) GetRecordCnameResponse {
	return GetRecordCnameResponse{
		GetRecordCnameResponseObjectAsResult: v,
	}
}

// RecordCnameAsGetRecordCnameResponse is a convenience function that returns RecordCname wrapped in GetRecordCnameResponse
func RecordCnameAsGetRecordCnameResponse(v *RecordCname) GetRecordCnameResponse {
	return GetRecordCnameResponse{
		RecordCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordCnameResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordCnameResponseObjectAsResult)
	if err == nil {
		jsonGetRecordCnameResponseObjectAsResult, _ := json.Marshal(dst.GetRecordCnameResponseObjectAsResult)
		if string(jsonGetRecordCnameResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordCnameResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordCnameResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordCname
	err = newStrictDecoder(data).Decode(&dst.RecordCname)
	if err == nil {
		jsonRecordCname, _ := json.Marshal(dst.RecordCname)
		if string(jsonRecordCname) == "{}" { // empty struct
			dst.RecordCname = nil
		} else {
			match++
		}
	} else {
		dst.RecordCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordCnameResponseObjectAsResult = nil
		dst.RecordCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordCnameResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordCnameResponseObjectAsResult)
	}

	if src.RecordCname != nil {
		return json.Marshal(&src.RecordCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordCnameResponseObjectAsResult != nil {
		return obj.GetRecordCnameResponseObjectAsResult
	}

	if obj.RecordCname != nil {
		return obj.RecordCname
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordCnameResponse struct {
	value *GetRecordCnameResponse
	isSet bool
}

func (v NullableGetRecordCnameResponse) Get() *GetRecordCnameResponse {
	return v.value
}

func (v *NullableGetRecordCnameResponse) Set(val *GetRecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordCnameResponse(val *GetRecordCnameResponse) *NullableGetRecordCnameResponse {
	return &NullableGetRecordCnameResponse{value: val, isSet: true}
}

func (v NullableGetRecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
