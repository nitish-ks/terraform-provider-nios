/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordDnameResponse - struct for GetRecordDnameResponse
type GetRecordDnameResponse struct {
	GetRecordDnameResponseObjectAsResult *GetRecordDnameResponseObjectAsResult
	RecordDname                          *RecordDname
}

// GetRecordDnameResponseObjectAsResultAsGetRecordDnameResponse is a convenience function that returns GetRecordDnameResponseObjectAsResult wrapped in GetRecordDnameResponse
func GetRecordDnameResponseObjectAsResultAsGetRecordDnameResponse(v *GetRecordDnameResponseObjectAsResult) GetRecordDnameResponse {
	return GetRecordDnameResponse{
		GetRecordDnameResponseObjectAsResult: v,
	}
}

// RecordDnameAsGetRecordDnameResponse is a convenience function that returns RecordDname wrapped in GetRecordDnameResponse
func RecordDnameAsGetRecordDnameResponse(v *RecordDname) GetRecordDnameResponse {
	return GetRecordDnameResponse{
		RecordDname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordDnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordDnameResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordDnameResponseObjectAsResult)
	if err == nil {
		jsonGetRecordDnameResponseObjectAsResult, _ := json.Marshal(dst.GetRecordDnameResponseObjectAsResult)
		if string(jsonGetRecordDnameResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordDnameResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordDnameResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordDname
	err = newStrictDecoder(data).Decode(&dst.RecordDname)
	if err == nil {
		jsonRecordDname, _ := json.Marshal(dst.RecordDname)
		if string(jsonRecordDname) == "{}" { // empty struct
			dst.RecordDname = nil
		} else {
			match++
		}
	} else {
		dst.RecordDname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordDnameResponseObjectAsResult = nil
		dst.RecordDname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordDnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordDnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordDnameResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordDnameResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordDnameResponseObjectAsResult)
	}

	if src.RecordDname != nil {
		return json.Marshal(&src.RecordDname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordDnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordDnameResponseObjectAsResult != nil {
		return obj.GetRecordDnameResponseObjectAsResult
	}

	if obj.RecordDname != nil {
		return obj.RecordDname
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordDnameResponse struct {
	value *GetRecordDnameResponse
	isSet bool
}

func (v NullableGetRecordDnameResponse) Get() *GetRecordDnameResponse {
	return v.value
}

func (v *NullableGetRecordDnameResponse) Set(val *GetRecordDnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordDnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordDnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordDnameResponse(val *GetRecordDnameResponse) *NullableGetRecordDnameResponse {
	return &NullableGetRecordDnameResponse{value: val, isSet: true}
}

func (v NullableGetRecordDnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordDnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
