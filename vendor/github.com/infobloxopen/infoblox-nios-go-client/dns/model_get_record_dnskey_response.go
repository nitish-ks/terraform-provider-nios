/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordDnskeyResponse - struct for GetRecordDnskeyResponse
type GetRecordDnskeyResponse struct {
	GetRecordDnskeyResponseObjectAsResult *GetRecordDnskeyResponseObjectAsResult
	RecordDnskey                          *RecordDnskey
}

// GetRecordDnskeyResponseObjectAsResultAsGetRecordDnskeyResponse is a convenience function that returns GetRecordDnskeyResponseObjectAsResult wrapped in GetRecordDnskeyResponse
func GetRecordDnskeyResponseObjectAsResultAsGetRecordDnskeyResponse(v *GetRecordDnskeyResponseObjectAsResult) GetRecordDnskeyResponse {
	return GetRecordDnskeyResponse{
		GetRecordDnskeyResponseObjectAsResult: v,
	}
}

// RecordDnskeyAsGetRecordDnskeyResponse is a convenience function that returns RecordDnskey wrapped in GetRecordDnskeyResponse
func RecordDnskeyAsGetRecordDnskeyResponse(v *RecordDnskey) GetRecordDnskeyResponse {
	return GetRecordDnskeyResponse{
		RecordDnskey: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordDnskeyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordDnskeyResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordDnskeyResponseObjectAsResult)
	if err == nil {
		jsonGetRecordDnskeyResponseObjectAsResult, _ := json.Marshal(dst.GetRecordDnskeyResponseObjectAsResult)
		if string(jsonGetRecordDnskeyResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordDnskeyResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordDnskeyResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordDnskey
	err = newStrictDecoder(data).Decode(&dst.RecordDnskey)
	if err == nil {
		jsonRecordDnskey, _ := json.Marshal(dst.RecordDnskey)
		if string(jsonRecordDnskey) == "{}" { // empty struct
			dst.RecordDnskey = nil
		} else {
			match++
		}
	} else {
		dst.RecordDnskey = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordDnskeyResponseObjectAsResult = nil
		dst.RecordDnskey = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordDnskeyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordDnskeyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordDnskeyResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordDnskeyResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordDnskeyResponseObjectAsResult)
	}

	if src.RecordDnskey != nil {
		return json.Marshal(&src.RecordDnskey)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordDnskeyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordDnskeyResponseObjectAsResult != nil {
		return obj.GetRecordDnskeyResponseObjectAsResult
	}

	if obj.RecordDnskey != nil {
		return obj.RecordDnskey
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordDnskeyResponse struct {
	value *GetRecordDnskeyResponse
	isSet bool
}

func (v NullableGetRecordDnskeyResponse) Get() *GetRecordDnskeyResponse {
	return v.value
}

func (v *NullableGetRecordDnskeyResponse) Set(val *GetRecordDnskeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordDnskeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordDnskeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordDnskeyResponse(val *GetRecordDnskeyResponse) *NullableGetRecordDnskeyResponse {
	return &NullableGetRecordDnskeyResponse{value: val, isSet: true}
}

func (v NullableGetRecordDnskeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordDnskeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
