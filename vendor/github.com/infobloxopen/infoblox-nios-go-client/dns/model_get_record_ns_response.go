/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordNsResponse - struct for GetRecordNsResponse
type GetRecordNsResponse struct {
	GetRecordNsResponseObjectAsResult *GetRecordNsResponseObjectAsResult
	RecordNs                          *RecordNs
}

// GetRecordNsResponseObjectAsResultAsGetRecordNsResponse is a convenience function that returns GetRecordNsResponseObjectAsResult wrapped in GetRecordNsResponse
func GetRecordNsResponseObjectAsResultAsGetRecordNsResponse(v *GetRecordNsResponseObjectAsResult) GetRecordNsResponse {
	return GetRecordNsResponse{
		GetRecordNsResponseObjectAsResult: v,
	}
}

// RecordNsAsGetRecordNsResponse is a convenience function that returns RecordNs wrapped in GetRecordNsResponse
func RecordNsAsGetRecordNsResponse(v *RecordNs) GetRecordNsResponse {
	return GetRecordNsResponse{
		RecordNs: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordNsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordNsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordNsResponseObjectAsResult)
	if err == nil {
		jsonGetRecordNsResponseObjectAsResult, _ := json.Marshal(dst.GetRecordNsResponseObjectAsResult)
		if string(jsonGetRecordNsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordNsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordNsResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordNs
	err = newStrictDecoder(data).Decode(&dst.RecordNs)
	if err == nil {
		jsonRecordNs, _ := json.Marshal(dst.RecordNs)
		if string(jsonRecordNs) == "{}" { // empty struct
			dst.RecordNs = nil
		} else {
			match++
		}
	} else {
		dst.RecordNs = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordNsResponseObjectAsResult = nil
		dst.RecordNs = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordNsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordNsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordNsResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordNsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordNsResponseObjectAsResult)
	}

	if src.RecordNs != nil {
		return json.Marshal(&src.RecordNs)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordNsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordNsResponseObjectAsResult != nil {
		return obj.GetRecordNsResponseObjectAsResult
	}

	if obj.RecordNs != nil {
		return obj.RecordNs
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordNsResponse struct {
	value *GetRecordNsResponse
	isSet bool
}

func (v NullableGetRecordNsResponse) Get() *GetRecordNsResponse {
	return v.value
}

func (v *NullableGetRecordNsResponse) Set(val *GetRecordNsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordNsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordNsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordNsResponse(val *GetRecordNsResponse) *NullableGetRecordNsResponse {
	return &NullableGetRecordNsResponse{value: val, isSet: true}
}

func (v NullableGetRecordNsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordNsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
