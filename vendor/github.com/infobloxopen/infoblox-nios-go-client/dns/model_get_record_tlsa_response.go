/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetRecordTlsaResponse - struct for GetRecordTlsaResponse
type GetRecordTlsaResponse struct {
	GetRecordTlsaResponseObjectAsResult *GetRecordTlsaResponseObjectAsResult
	RecordTlsa                          *RecordTlsa
}

// GetRecordTlsaResponseObjectAsResultAsGetRecordTlsaResponse is a convenience function that returns GetRecordTlsaResponseObjectAsResult wrapped in GetRecordTlsaResponse
func GetRecordTlsaResponseObjectAsResultAsGetRecordTlsaResponse(v *GetRecordTlsaResponseObjectAsResult) GetRecordTlsaResponse {
	return GetRecordTlsaResponse{
		GetRecordTlsaResponseObjectAsResult: v,
	}
}

// RecordTlsaAsGetRecordTlsaResponse is a convenience function that returns RecordTlsa wrapped in GetRecordTlsaResponse
func RecordTlsaAsGetRecordTlsaResponse(v *RecordTlsa) GetRecordTlsaResponse {
	return GetRecordTlsaResponse{
		RecordTlsa: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordTlsaResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordTlsaResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordTlsaResponseObjectAsResult)
	if err == nil {
		jsonGetRecordTlsaResponseObjectAsResult, _ := json.Marshal(dst.GetRecordTlsaResponseObjectAsResult)
		if string(jsonGetRecordTlsaResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordTlsaResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordTlsaResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordTlsa
	err = newStrictDecoder(data).Decode(&dst.RecordTlsa)
	if err == nil {
		jsonRecordTlsa, _ := json.Marshal(dst.RecordTlsa)
		if string(jsonRecordTlsa) == "{}" { // empty struct
			dst.RecordTlsa = nil
		} else {
			match++
		}
	} else {
		dst.RecordTlsa = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordTlsaResponseObjectAsResult = nil
		dst.RecordTlsa = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordTlsaResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordTlsaResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordTlsaResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordTlsaResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordTlsaResponseObjectAsResult)
	}

	if src.RecordTlsa != nil {
		return json.Marshal(&src.RecordTlsa)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordTlsaResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordTlsaResponseObjectAsResult != nil {
		return obj.GetRecordTlsaResponseObjectAsResult
	}

	if obj.RecordTlsa != nil {
		return obj.RecordTlsa
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordTlsaResponse struct {
	value *GetRecordTlsaResponse
	isSet bool
}

func (v NullableGetRecordTlsaResponse) Get() *GetRecordTlsaResponse {
	return v.value
}

func (v *NullableGetRecordTlsaResponse) Set(val *GetRecordTlsaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordTlsaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordTlsaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordTlsaResponse(val *GetRecordTlsaResponse) *NullableGetRecordTlsaResponse {
	return &NullableGetRecordTlsaResponse{value: val, isSet: true}
}

func (v NullableGetRecordTlsaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordTlsaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
