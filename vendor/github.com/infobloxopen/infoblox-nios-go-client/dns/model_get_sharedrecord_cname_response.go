/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetSharedrecordCnameResponse - struct for GetSharedrecordCnameResponse
type GetSharedrecordCnameResponse struct {
	GetSharedrecordCnameResponseObjectAsResult *GetSharedrecordCnameResponseObjectAsResult
	SharedrecordCname                          *SharedrecordCname
}

// GetSharedrecordCnameResponseObjectAsResultAsGetSharedrecordCnameResponse is a convenience function that returns GetSharedrecordCnameResponseObjectAsResult wrapped in GetSharedrecordCnameResponse
func GetSharedrecordCnameResponseObjectAsResultAsGetSharedrecordCnameResponse(v *GetSharedrecordCnameResponseObjectAsResult) GetSharedrecordCnameResponse {
	return GetSharedrecordCnameResponse{
		GetSharedrecordCnameResponseObjectAsResult: v,
	}
}

// SharedrecordCnameAsGetSharedrecordCnameResponse is a convenience function that returns SharedrecordCname wrapped in GetSharedrecordCnameResponse
func SharedrecordCnameAsGetSharedrecordCnameResponse(v *SharedrecordCname) GetSharedrecordCnameResponse {
	return GetSharedrecordCnameResponse{
		SharedrecordCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharedrecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharedrecordCnameResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharedrecordCnameResponseObjectAsResult)
	if err == nil {
		jsonGetSharedrecordCnameResponseObjectAsResult, _ := json.Marshal(dst.GetSharedrecordCnameResponseObjectAsResult)
		if string(jsonGetSharedrecordCnameResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharedrecordCnameResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharedrecordCnameResponseObjectAsResult = nil
	}

	// try to unmarshal data into SharedrecordCname
	err = newStrictDecoder(data).Decode(&dst.SharedrecordCname)
	if err == nil {
		jsonSharedrecordCname, _ := json.Marshal(dst.SharedrecordCname)
		if string(jsonSharedrecordCname) == "{}" { // empty struct
			dst.SharedrecordCname = nil
		} else {
			match++
		}
	} else {
		dst.SharedrecordCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharedrecordCnameResponseObjectAsResult = nil
		dst.SharedrecordCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharedrecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharedrecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharedrecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharedrecordCnameResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharedrecordCnameResponseObjectAsResult)
	}

	if src.SharedrecordCname != nil {
		return json.Marshal(&src.SharedrecordCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharedrecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharedrecordCnameResponseObjectAsResult != nil {
		return obj.GetSharedrecordCnameResponseObjectAsResult
	}

	if obj.SharedrecordCname != nil {
		return obj.SharedrecordCname
	}

	// all schemas are nil
	return nil
}

type NullableGetSharedrecordCnameResponse struct {
	value *GetSharedrecordCnameResponse
	isSet bool
}

func (v NullableGetSharedrecordCnameResponse) Get() *GetSharedrecordCnameResponse {
	return v.value
}

func (v *NullableGetSharedrecordCnameResponse) Set(val *GetSharedrecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharedrecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharedrecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharedrecordCnameResponse(val *GetSharedrecordCnameResponse) *NullableGetSharedrecordCnameResponse {
	return &NullableGetSharedrecordCnameResponse{value: val, isSet: true}
}

func (v NullableGetSharedrecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharedrecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
