/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetSharedrecordSrvResponse - struct for GetSharedrecordSrvResponse
type GetSharedrecordSrvResponse struct {
	GetSharedrecordSrvResponseObjectAsResult *GetSharedrecordSrvResponseObjectAsResult
	SharedrecordSrv                          *SharedrecordSrv
}

// GetSharedrecordSrvResponseObjectAsResultAsGetSharedrecordSrvResponse is a convenience function that returns GetSharedrecordSrvResponseObjectAsResult wrapped in GetSharedrecordSrvResponse
func GetSharedrecordSrvResponseObjectAsResultAsGetSharedrecordSrvResponse(v *GetSharedrecordSrvResponseObjectAsResult) GetSharedrecordSrvResponse {
	return GetSharedrecordSrvResponse{
		GetSharedrecordSrvResponseObjectAsResult: v,
	}
}

// SharedrecordSrvAsGetSharedrecordSrvResponse is a convenience function that returns SharedrecordSrv wrapped in GetSharedrecordSrvResponse
func SharedrecordSrvAsGetSharedrecordSrvResponse(v *SharedrecordSrv) GetSharedrecordSrvResponse {
	return GetSharedrecordSrvResponse{
		SharedrecordSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSharedrecordSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSharedrecordSrvResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSharedrecordSrvResponseObjectAsResult)
	if err == nil {
		jsonGetSharedrecordSrvResponseObjectAsResult, _ := json.Marshal(dst.GetSharedrecordSrvResponseObjectAsResult)
		if string(jsonGetSharedrecordSrvResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSharedrecordSrvResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSharedrecordSrvResponseObjectAsResult = nil
	}

	// try to unmarshal data into SharedrecordSrv
	err = newStrictDecoder(data).Decode(&dst.SharedrecordSrv)
	if err == nil {
		jsonSharedrecordSrv, _ := json.Marshal(dst.SharedrecordSrv)
		if string(jsonSharedrecordSrv) == "{}" { // empty struct
			dst.SharedrecordSrv = nil
		} else {
			match++
		}
	} else {
		dst.SharedrecordSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSharedrecordSrvResponseObjectAsResult = nil
		dst.SharedrecordSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSharedrecordSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSharedrecordSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	if src.GetSharedrecordSrvResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSharedrecordSrvResponseObjectAsResult)
	}

	if src.SharedrecordSrv != nil {
		return json.Marshal(&src.SharedrecordSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSharedrecordSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSharedrecordSrvResponseObjectAsResult != nil {
		return obj.GetSharedrecordSrvResponseObjectAsResult
	}

	if obj.SharedrecordSrv != nil {
		return obj.SharedrecordSrv
	}

	// all schemas are nil
	return nil
}

type NullableGetSharedrecordSrvResponse struct {
	value *GetSharedrecordSrvResponse
	isSet bool
}

func (v NullableGetSharedrecordSrvResponse) Get() *GetSharedrecordSrvResponse {
	return v.value
}

func (v *NullableGetSharedrecordSrvResponse) Set(val *GetSharedrecordSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSharedrecordSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSharedrecordSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSharedrecordSrvResponse(val *GetSharedrecordSrvResponse) *NullableGetSharedrecordSrvResponse {
	return &NullableGetSharedrecordSrvResponse{value: val, isSet: true}
}

func (v NullableGetSharedrecordSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSharedrecordSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
