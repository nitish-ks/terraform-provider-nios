/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// GetViewResponse - struct for GetViewResponse
type GetViewResponse struct {
	GetViewResponseObjectAsResult *GetViewResponseObjectAsResult
	View                          *View
}

// GetViewResponseObjectAsResultAsGetViewResponse is a convenience function that returns GetViewResponseObjectAsResult wrapped in GetViewResponse
func GetViewResponseObjectAsResultAsGetViewResponse(v *GetViewResponseObjectAsResult) GetViewResponse {
	return GetViewResponse{
		GetViewResponseObjectAsResult: v,
	}
}

// ViewAsGetViewResponse is a convenience function that returns View wrapped in GetViewResponse
func ViewAsGetViewResponse(v *View) GetViewResponse {
	return GetViewResponse{
		View: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetViewResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetViewResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetViewResponseObjectAsResult)
	if err == nil {
		jsonGetViewResponseObjectAsResult, _ := json.Marshal(dst.GetViewResponseObjectAsResult)
		if string(jsonGetViewResponseObjectAsResult) == "{}" { // empty struct
			dst.GetViewResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetViewResponseObjectAsResult = nil
	}

	// try to unmarshal data into View
	err = newStrictDecoder(data).Decode(&dst.View)
	if err == nil {
		jsonView, _ := json.Marshal(dst.View)
		if string(jsonView) == "{}" { // empty struct
			dst.View = nil
		} else {
			match++
		}
	} else {
		dst.View = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetViewResponseObjectAsResult = nil
		dst.View = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetViewResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetViewResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetViewResponse) MarshalJSON() ([]byte, error) {
	if src.GetViewResponseObjectAsResult != nil {
		return json.Marshal(&src.GetViewResponseObjectAsResult)
	}

	if src.View != nil {
		return json.Marshal(&src.View)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetViewResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetViewResponseObjectAsResult != nil {
		return obj.GetViewResponseObjectAsResult
	}

	if obj.View != nil {
		return obj.View
	}

	// all schemas are nil
	return nil
}

type NullableGetViewResponse struct {
	value *GetViewResponse
	isSet bool
}

func (v NullableGetViewResponse) Get() *GetViewResponse {
	return v.value
}

func (v *NullableGetViewResponse) Set(val *GetViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetViewResponse(val *GetViewResponse) *NullableGetViewResponse {
	return &NullableGetViewResponse{value: val, isSet: true}
}

func (v NullableGetViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
