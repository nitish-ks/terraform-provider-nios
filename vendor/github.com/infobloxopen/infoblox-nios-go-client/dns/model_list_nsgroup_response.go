/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListNsgroupResponse - struct for ListNsgroupResponse
type ListNsgroupResponse struct {
	ListNsgroupResponseObject *ListNsgroupResponseObject
	ArrayOfNsgroup            *[]Nsgroup
}

// ListNsgroupResponseObjectAsListNsgroupResponse is a convenience function that returns ListNsgroupResponseObject wrapped in ListNsgroupResponse
func ListNsgroupResponseObjectAsListNsgroupResponse(v *ListNsgroupResponseObject) ListNsgroupResponse {
	return ListNsgroupResponse{
		ListNsgroupResponseObject: v,
	}
}

// []NsgroupAsListNsgroupResponse is a convenience function that returns []Nsgroup wrapped in ListNsgroupResponse
func ArrayOfNsgroupAsListNsgroupResponse(v *[]Nsgroup) ListNsgroupResponse {
	return ListNsgroupResponse{
		ArrayOfNsgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListNsgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListNsgroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListNsgroupResponseObject)
	if err == nil {
		jsonListNsgroupResponseObject, _ := json.Marshal(dst.ListNsgroupResponseObject)
		if string(jsonListNsgroupResponseObject) == "{}" { // empty struct
			dst.ListNsgroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListNsgroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfNsgroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNsgroup)
	if err == nil {
		jsonArrayOfNsgroup, _ := json.Marshal(dst.ArrayOfNsgroup)
		if string(jsonArrayOfNsgroup) == "{}" { // empty struct
			dst.ArrayOfNsgroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfNsgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListNsgroupResponseObject = nil
		dst.ArrayOfNsgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListNsgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListNsgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListNsgroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListNsgroupResponseObject != nil {
		return json.Marshal(&src.ListNsgroupResponseObject)
	}

	if src.ArrayOfNsgroup != nil {
		return json.Marshal(&src.ArrayOfNsgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListNsgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListNsgroupResponseObject != nil {
		return obj.ListNsgroupResponseObject
	}

	if obj.ArrayOfNsgroup != nil {
		return obj.ArrayOfNsgroup
	}

	// all schemas are nil
	return nil
}

type NullableListNsgroupResponse struct {
	value *ListNsgroupResponse
	isSet bool
}

func (v NullableListNsgroupResponse) Get() *ListNsgroupResponse {
	return v.value
}

func (v *NullableListNsgroupResponse) Set(val *ListNsgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNsgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNsgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNsgroupResponse(val *ListNsgroupResponse) *NullableListNsgroupResponse {
	return &NullableListNsgroupResponse{value: val, isSet: true}
}

func (v NullableListNsgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNsgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
