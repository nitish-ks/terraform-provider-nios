/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordHostIpv4addrResponse - struct for ListRecordHostIpv4addrResponse
type ListRecordHostIpv4addrResponse struct {
	ListRecordHostIpv4addrResponseObject *ListRecordHostIpv4addrResponseObject
	ArrayOfRecordHostIpv4addr            *[]RecordHostIpv4addr
}

// ListRecordHostIpv4addrResponseObjectAsListRecordHostIpv4addrResponse is a convenience function that returns ListRecordHostIpv4addrResponseObject wrapped in ListRecordHostIpv4addrResponse
func ListRecordHostIpv4addrResponseObjectAsListRecordHostIpv4addrResponse(v *ListRecordHostIpv4addrResponseObject) ListRecordHostIpv4addrResponse {
	return ListRecordHostIpv4addrResponse{
		ListRecordHostIpv4addrResponseObject: v,
	}
}

// []RecordHostIpv4addrAsListRecordHostIpv4addrResponse is a convenience function that returns []RecordHostIpv4addr wrapped in ListRecordHostIpv4addrResponse
func ArrayOfRecordHostIpv4addrAsListRecordHostIpv4addrResponse(v *[]RecordHostIpv4addr) ListRecordHostIpv4addrResponse {
	return ListRecordHostIpv4addrResponse{
		ArrayOfRecordHostIpv4addr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordHostIpv4addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordHostIpv4addrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordHostIpv4addrResponseObject)
	if err == nil {
		jsonListRecordHostIpv4addrResponseObject, _ := json.Marshal(dst.ListRecordHostIpv4addrResponseObject)
		if string(jsonListRecordHostIpv4addrResponseObject) == "{}" { // empty struct
			dst.ListRecordHostIpv4addrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordHostIpv4addrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordHostIpv4addr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordHostIpv4addr)
	if err == nil {
		jsonArrayOfRecordHostIpv4addr, _ := json.Marshal(dst.ArrayOfRecordHostIpv4addr)
		if string(jsonArrayOfRecordHostIpv4addr) == "{}" { // empty struct
			dst.ArrayOfRecordHostIpv4addr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordHostIpv4addr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordHostIpv4addrResponseObject = nil
		dst.ArrayOfRecordHostIpv4addr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordHostIpv4addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordHostIpv4addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordHostIpv4addrResponseObject != nil {
		return json.Marshal(&src.ListRecordHostIpv4addrResponseObject)
	}

	if src.ArrayOfRecordHostIpv4addr != nil {
		return json.Marshal(&src.ArrayOfRecordHostIpv4addr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordHostIpv4addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordHostIpv4addrResponseObject != nil {
		return obj.ListRecordHostIpv4addrResponseObject
	}

	if obj.ArrayOfRecordHostIpv4addr != nil {
		return obj.ArrayOfRecordHostIpv4addr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordHostIpv4addrResponse struct {
	value *ListRecordHostIpv4addrResponse
	isSet bool
}

func (v NullableListRecordHostIpv4addrResponse) Get() *ListRecordHostIpv4addrResponse {
	return v.value
}

func (v *NullableListRecordHostIpv4addrResponse) Set(val *ListRecordHostIpv4addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordHostIpv4addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordHostIpv4addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordHostIpv4addrResponse(val *ListRecordHostIpv4addrResponse) *NullableListRecordHostIpv4addrResponse {
	return &NullableListRecordHostIpv4addrResponse{value: val, isSet: true}
}

func (v NullableListRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordHostIpv4addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
