/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordNaptrResponse - struct for ListRecordNaptrResponse
type ListRecordNaptrResponse struct {
	ListRecordNaptrResponseObject *ListRecordNaptrResponseObject
	ArrayOfRecordNaptr            *[]RecordNaptr
}

// ListRecordNaptrResponseObjectAsListRecordNaptrResponse is a convenience function that returns ListRecordNaptrResponseObject wrapped in ListRecordNaptrResponse
func ListRecordNaptrResponseObjectAsListRecordNaptrResponse(v *ListRecordNaptrResponseObject) ListRecordNaptrResponse {
	return ListRecordNaptrResponse{
		ListRecordNaptrResponseObject: v,
	}
}

// []RecordNaptrAsListRecordNaptrResponse is a convenience function that returns []RecordNaptr wrapped in ListRecordNaptrResponse
func ArrayOfRecordNaptrAsListRecordNaptrResponse(v *[]RecordNaptr) ListRecordNaptrResponse {
	return ListRecordNaptrResponse{
		ArrayOfRecordNaptr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordNaptrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordNaptrResponseObject)
	if err == nil {
		jsonListRecordNaptrResponseObject, _ := json.Marshal(dst.ListRecordNaptrResponseObject)
		if string(jsonListRecordNaptrResponseObject) == "{}" { // empty struct
			dst.ListRecordNaptrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordNaptrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordNaptr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordNaptr)
	if err == nil {
		jsonArrayOfRecordNaptr, _ := json.Marshal(dst.ArrayOfRecordNaptr)
		if string(jsonArrayOfRecordNaptr) == "{}" { // empty struct
			dst.ArrayOfRecordNaptr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordNaptr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordNaptrResponseObject = nil
		dst.ArrayOfRecordNaptr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordNaptrResponseObject != nil {
		return json.Marshal(&src.ListRecordNaptrResponseObject)
	}

	if src.ArrayOfRecordNaptr != nil {
		return json.Marshal(&src.ArrayOfRecordNaptr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordNaptrResponseObject != nil {
		return obj.ListRecordNaptrResponseObject
	}

	if obj.ArrayOfRecordNaptr != nil {
		return obj.ArrayOfRecordNaptr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordNaptrResponse struct {
	value *ListRecordNaptrResponse
	isSet bool
}

func (v NullableListRecordNaptrResponse) Get() *ListRecordNaptrResponse {
	return v.value
}

func (v *NullableListRecordNaptrResponse) Set(val *ListRecordNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordNaptrResponse(val *ListRecordNaptrResponse) *NullableListRecordNaptrResponse {
	return &NullableListRecordNaptrResponse{value: val, isSet: true}
}

func (v NullableListRecordNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
