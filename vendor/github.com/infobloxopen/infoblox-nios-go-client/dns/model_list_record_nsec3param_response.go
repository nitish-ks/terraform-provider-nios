/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordNsec3paramResponse - struct for ListRecordNsec3paramResponse
type ListRecordNsec3paramResponse struct {
	ListRecordNsec3paramResponseObject *ListRecordNsec3paramResponseObject
	ArrayOfRecordNsec3param            *[]RecordNsec3param
}

// ListRecordNsec3paramResponseObjectAsListRecordNsec3paramResponse is a convenience function that returns ListRecordNsec3paramResponseObject wrapped in ListRecordNsec3paramResponse
func ListRecordNsec3paramResponseObjectAsListRecordNsec3paramResponse(v *ListRecordNsec3paramResponseObject) ListRecordNsec3paramResponse {
	return ListRecordNsec3paramResponse{
		ListRecordNsec3paramResponseObject: v,
	}
}

// []RecordNsec3paramAsListRecordNsec3paramResponse is a convenience function that returns []RecordNsec3param wrapped in ListRecordNsec3paramResponse
func ArrayOfRecordNsec3paramAsListRecordNsec3paramResponse(v *[]RecordNsec3param) ListRecordNsec3paramResponse {
	return ListRecordNsec3paramResponse{
		ArrayOfRecordNsec3param: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordNsec3paramResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordNsec3paramResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordNsec3paramResponseObject)
	if err == nil {
		jsonListRecordNsec3paramResponseObject, _ := json.Marshal(dst.ListRecordNsec3paramResponseObject)
		if string(jsonListRecordNsec3paramResponseObject) == "{}" { // empty struct
			dst.ListRecordNsec3paramResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordNsec3paramResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordNsec3param
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordNsec3param)
	if err == nil {
		jsonArrayOfRecordNsec3param, _ := json.Marshal(dst.ArrayOfRecordNsec3param)
		if string(jsonArrayOfRecordNsec3param) == "{}" { // empty struct
			dst.ArrayOfRecordNsec3param = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordNsec3param = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordNsec3paramResponseObject = nil
		dst.ArrayOfRecordNsec3param = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordNsec3paramResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordNsec3paramResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordNsec3paramResponseObject != nil {
		return json.Marshal(&src.ListRecordNsec3paramResponseObject)
	}

	if src.ArrayOfRecordNsec3param != nil {
		return json.Marshal(&src.ArrayOfRecordNsec3param)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordNsec3paramResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordNsec3paramResponseObject != nil {
		return obj.ListRecordNsec3paramResponseObject
	}

	if obj.ArrayOfRecordNsec3param != nil {
		return obj.ArrayOfRecordNsec3param
	}

	// all schemas are nil
	return nil
}

type NullableListRecordNsec3paramResponse struct {
	value *ListRecordNsec3paramResponse
	isSet bool
}

func (v NullableListRecordNsec3paramResponse) Get() *ListRecordNsec3paramResponse {
	return v.value
}

func (v *NullableListRecordNsec3paramResponse) Set(val *ListRecordNsec3paramResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordNsec3paramResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordNsec3paramResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordNsec3paramResponse(val *ListRecordNsec3paramResponse) *NullableListRecordNsec3paramResponse {
	return &NullableListRecordNsec3paramResponse{value: val, isSet: true}
}

func (v NullableListRecordNsec3paramResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordNsec3paramResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
