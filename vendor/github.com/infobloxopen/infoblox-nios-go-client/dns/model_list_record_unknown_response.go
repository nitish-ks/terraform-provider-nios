/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordUnknownResponse - struct for ListRecordUnknownResponse
type ListRecordUnknownResponse struct {
	ListRecordUnknownResponseObject *ListRecordUnknownResponseObject
	ArrayOfRecordUnknown            *[]RecordUnknown
}

// ListRecordUnknownResponseObjectAsListRecordUnknownResponse is a convenience function that returns ListRecordUnknownResponseObject wrapped in ListRecordUnknownResponse
func ListRecordUnknownResponseObjectAsListRecordUnknownResponse(v *ListRecordUnknownResponseObject) ListRecordUnknownResponse {
	return ListRecordUnknownResponse{
		ListRecordUnknownResponseObject: v,
	}
}

// []RecordUnknownAsListRecordUnknownResponse is a convenience function that returns []RecordUnknown wrapped in ListRecordUnknownResponse
func ArrayOfRecordUnknownAsListRecordUnknownResponse(v *[]RecordUnknown) ListRecordUnknownResponse {
	return ListRecordUnknownResponse{
		ArrayOfRecordUnknown: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordUnknownResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordUnknownResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordUnknownResponseObject)
	if err == nil {
		jsonListRecordUnknownResponseObject, _ := json.Marshal(dst.ListRecordUnknownResponseObject)
		if string(jsonListRecordUnknownResponseObject) == "{}" { // empty struct
			dst.ListRecordUnknownResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordUnknownResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordUnknown
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordUnknown)
	if err == nil {
		jsonArrayOfRecordUnknown, _ := json.Marshal(dst.ArrayOfRecordUnknown)
		if string(jsonArrayOfRecordUnknown) == "{}" { // empty struct
			dst.ArrayOfRecordUnknown = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordUnknown = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordUnknownResponseObject = nil
		dst.ArrayOfRecordUnknown = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordUnknownResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordUnknownResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordUnknownResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordUnknownResponseObject != nil {
		return json.Marshal(&src.ListRecordUnknownResponseObject)
	}

	if src.ArrayOfRecordUnknown != nil {
		return json.Marshal(&src.ArrayOfRecordUnknown)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordUnknownResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordUnknownResponseObject != nil {
		return obj.ListRecordUnknownResponseObject
	}

	if obj.ArrayOfRecordUnknown != nil {
		return obj.ArrayOfRecordUnknown
	}

	// all schemas are nil
	return nil
}

type NullableListRecordUnknownResponse struct {
	value *ListRecordUnknownResponse
	isSet bool
}

func (v NullableListRecordUnknownResponse) Get() *ListRecordUnknownResponse {
	return v.value
}

func (v *NullableListRecordUnknownResponse) Set(val *ListRecordUnknownResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordUnknownResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordUnknownResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordUnknownResponse(val *ListRecordUnknownResponse) *NullableListRecordUnknownResponse {
	return &NullableListRecordUnknownResponse{value: val, isSet: true}
}

func (v NullableListRecordUnknownResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordUnknownResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
