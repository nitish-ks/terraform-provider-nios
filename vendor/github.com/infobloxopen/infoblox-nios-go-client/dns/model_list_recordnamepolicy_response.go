/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListRecordnamepolicyResponse - struct for ListRecordnamepolicyResponse
type ListRecordnamepolicyResponse struct {
	ListRecordnamepolicyResponseObject *ListRecordnamepolicyResponseObject
	ArrayOfRecordnamepolicy            *[]Recordnamepolicy
}

// ListRecordnamepolicyResponseObjectAsListRecordnamepolicyResponse is a convenience function that returns ListRecordnamepolicyResponseObject wrapped in ListRecordnamepolicyResponse
func ListRecordnamepolicyResponseObjectAsListRecordnamepolicyResponse(v *ListRecordnamepolicyResponseObject) ListRecordnamepolicyResponse {
	return ListRecordnamepolicyResponse{
		ListRecordnamepolicyResponseObject: v,
	}
}

// []RecordnamepolicyAsListRecordnamepolicyResponse is a convenience function that returns []Recordnamepolicy wrapped in ListRecordnamepolicyResponse
func ArrayOfRecordnamepolicyAsListRecordnamepolicyResponse(v *[]Recordnamepolicy) ListRecordnamepolicyResponse {
	return ListRecordnamepolicyResponse{
		ArrayOfRecordnamepolicy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordnamepolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordnamepolicyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordnamepolicyResponseObject)
	if err == nil {
		jsonListRecordnamepolicyResponseObject, _ := json.Marshal(dst.ListRecordnamepolicyResponseObject)
		if string(jsonListRecordnamepolicyResponseObject) == "{}" { // empty struct
			dst.ListRecordnamepolicyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordnamepolicyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordnamepolicy
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordnamepolicy)
	if err == nil {
		jsonArrayOfRecordnamepolicy, _ := json.Marshal(dst.ArrayOfRecordnamepolicy)
		if string(jsonArrayOfRecordnamepolicy) == "{}" { // empty struct
			dst.ArrayOfRecordnamepolicy = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordnamepolicy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordnamepolicyResponseObject = nil
		dst.ArrayOfRecordnamepolicy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordnamepolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordnamepolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordnamepolicyResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordnamepolicyResponseObject != nil {
		return json.Marshal(&src.ListRecordnamepolicyResponseObject)
	}

	if src.ArrayOfRecordnamepolicy != nil {
		return json.Marshal(&src.ArrayOfRecordnamepolicy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordnamepolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordnamepolicyResponseObject != nil {
		return obj.ListRecordnamepolicyResponseObject
	}

	if obj.ArrayOfRecordnamepolicy != nil {
		return obj.ArrayOfRecordnamepolicy
	}

	// all schemas are nil
	return nil
}

type NullableListRecordnamepolicyResponse struct {
	value *ListRecordnamepolicyResponse
	isSet bool
}

func (v NullableListRecordnamepolicyResponse) Get() *ListRecordnamepolicyResponse {
	return v.value
}

func (v *NullableListRecordnamepolicyResponse) Set(val *ListRecordnamepolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordnamepolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordnamepolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordnamepolicyResponse(val *ListRecordnamepolicyResponse) *NullableListRecordnamepolicyResponse {
	return &NullableListRecordnamepolicyResponse{value: val, isSet: true}
}

func (v NullableListRecordnamepolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordnamepolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
