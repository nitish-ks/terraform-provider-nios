/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordAResponse - struct for ListSharedrecordAResponse
type ListSharedrecordAResponse struct {
	ListSharedrecordAResponseObject *ListSharedrecordAResponseObject
	ArrayOfSharedrecordA            *[]SharedrecordA
}

// ListSharedrecordAResponseObjectAsListSharedrecordAResponse is a convenience function that returns ListSharedrecordAResponseObject wrapped in ListSharedrecordAResponse
func ListSharedrecordAResponseObjectAsListSharedrecordAResponse(v *ListSharedrecordAResponseObject) ListSharedrecordAResponse {
	return ListSharedrecordAResponse{
		ListSharedrecordAResponseObject: v,
	}
}

// []SharedrecordAAsListSharedrecordAResponse is a convenience function that returns []SharedrecordA wrapped in ListSharedrecordAResponse
func ArrayOfSharedrecordAAsListSharedrecordAResponse(v *[]SharedrecordA) ListSharedrecordAResponse {
	return ListSharedrecordAResponse{
		ArrayOfSharedrecordA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordAResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordAResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordAResponseObject)
	if err == nil {
		jsonListSharedrecordAResponseObject, _ := json.Marshal(dst.ListSharedrecordAResponseObject)
		if string(jsonListSharedrecordAResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordAResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordAResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordA
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordA)
	if err == nil {
		jsonArrayOfSharedrecordA, _ := json.Marshal(dst.ArrayOfSharedrecordA)
		if string(jsonArrayOfSharedrecordA) == "{}" { // empty struct
			dst.ArrayOfSharedrecordA = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordAResponseObject = nil
		dst.ArrayOfSharedrecordA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordAResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordAResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordAResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordAResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordAResponseObject)
	}

	if src.ArrayOfSharedrecordA != nil {
		return json.Marshal(&src.ArrayOfSharedrecordA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordAResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordAResponseObject != nil {
		return obj.ListSharedrecordAResponseObject
	}

	if obj.ArrayOfSharedrecordA != nil {
		return obj.ArrayOfSharedrecordA
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordAResponse struct {
	value *ListSharedrecordAResponse
	isSet bool
}

func (v NullableListSharedrecordAResponse) Get() *ListSharedrecordAResponse {
	return v.value
}

func (v *NullableListSharedrecordAResponse) Set(val *ListSharedrecordAResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordAResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordAResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordAResponse(val *ListSharedrecordAResponse) *NullableListSharedrecordAResponse {
	return &NullableListSharedrecordAResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordAResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordAResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
