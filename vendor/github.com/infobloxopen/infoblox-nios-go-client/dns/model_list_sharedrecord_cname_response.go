/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordCnameResponse - struct for ListSharedrecordCnameResponse
type ListSharedrecordCnameResponse struct {
	ListSharedrecordCnameResponseObject *ListSharedrecordCnameResponseObject
	ArrayOfSharedrecordCname            *[]SharedrecordCname
}

// ListSharedrecordCnameResponseObjectAsListSharedrecordCnameResponse is a convenience function that returns ListSharedrecordCnameResponseObject wrapped in ListSharedrecordCnameResponse
func ListSharedrecordCnameResponseObjectAsListSharedrecordCnameResponse(v *ListSharedrecordCnameResponseObject) ListSharedrecordCnameResponse {
	return ListSharedrecordCnameResponse{
		ListSharedrecordCnameResponseObject: v,
	}
}

// []SharedrecordCnameAsListSharedrecordCnameResponse is a convenience function that returns []SharedrecordCname wrapped in ListSharedrecordCnameResponse
func ArrayOfSharedrecordCnameAsListSharedrecordCnameResponse(v *[]SharedrecordCname) ListSharedrecordCnameResponse {
	return ListSharedrecordCnameResponse{
		ArrayOfSharedrecordCname: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordCnameResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordCnameResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordCnameResponseObject)
	if err == nil {
		jsonListSharedrecordCnameResponseObject, _ := json.Marshal(dst.ListSharedrecordCnameResponseObject)
		if string(jsonListSharedrecordCnameResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordCnameResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordCnameResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordCname
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordCname)
	if err == nil {
		jsonArrayOfSharedrecordCname, _ := json.Marshal(dst.ArrayOfSharedrecordCname)
		if string(jsonArrayOfSharedrecordCname) == "{}" { // empty struct
			dst.ArrayOfSharedrecordCname = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordCname = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordCnameResponseObject = nil
		dst.ArrayOfSharedrecordCname = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordCnameResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordCnameResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordCnameResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordCnameResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordCnameResponseObject)
	}

	if src.ArrayOfSharedrecordCname != nil {
		return json.Marshal(&src.ArrayOfSharedrecordCname)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordCnameResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordCnameResponseObject != nil {
		return obj.ListSharedrecordCnameResponseObject
	}

	if obj.ArrayOfSharedrecordCname != nil {
		return obj.ArrayOfSharedrecordCname
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordCnameResponse struct {
	value *ListSharedrecordCnameResponse
	isSet bool
}

func (v NullableListSharedrecordCnameResponse) Get() *ListSharedrecordCnameResponse {
	return v.value
}

func (v *NullableListSharedrecordCnameResponse) Set(val *ListSharedrecordCnameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordCnameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordCnameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordCnameResponse(val *ListSharedrecordCnameResponse) *NullableListSharedrecordCnameResponse {
	return &NullableListSharedrecordCnameResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordCnameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordCnameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
