/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListSharedrecordTxtResponse - struct for ListSharedrecordTxtResponse
type ListSharedrecordTxtResponse struct {
	ListSharedrecordTxtResponseObject *ListSharedrecordTxtResponseObject
	ArrayOfSharedrecordTxt            *[]SharedrecordTxt
}

// ListSharedrecordTxtResponseObjectAsListSharedrecordTxtResponse is a convenience function that returns ListSharedrecordTxtResponseObject wrapped in ListSharedrecordTxtResponse
func ListSharedrecordTxtResponseObjectAsListSharedrecordTxtResponse(v *ListSharedrecordTxtResponseObject) ListSharedrecordTxtResponse {
	return ListSharedrecordTxtResponse{
		ListSharedrecordTxtResponseObject: v,
	}
}

// []SharedrecordTxtAsListSharedrecordTxtResponse is a convenience function that returns []SharedrecordTxt wrapped in ListSharedrecordTxtResponse
func ArrayOfSharedrecordTxtAsListSharedrecordTxtResponse(v *[]SharedrecordTxt) ListSharedrecordTxtResponse {
	return ListSharedrecordTxtResponse{
		ArrayOfSharedrecordTxt: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSharedrecordTxtResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSharedrecordTxtResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSharedrecordTxtResponseObject)
	if err == nil {
		jsonListSharedrecordTxtResponseObject, _ := json.Marshal(dst.ListSharedrecordTxtResponseObject)
		if string(jsonListSharedrecordTxtResponseObject) == "{}" { // empty struct
			dst.ListSharedrecordTxtResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSharedrecordTxtResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSharedrecordTxt
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSharedrecordTxt)
	if err == nil {
		jsonArrayOfSharedrecordTxt, _ := json.Marshal(dst.ArrayOfSharedrecordTxt)
		if string(jsonArrayOfSharedrecordTxt) == "{}" { // empty struct
			dst.ArrayOfSharedrecordTxt = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSharedrecordTxt = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSharedrecordTxtResponseObject = nil
		dst.ArrayOfSharedrecordTxt = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSharedrecordTxtResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSharedrecordTxtResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSharedrecordTxtResponse) MarshalJSON() ([]byte, error) {
	if src.ListSharedrecordTxtResponseObject != nil {
		return json.Marshal(&src.ListSharedrecordTxtResponseObject)
	}

	if src.ArrayOfSharedrecordTxt != nil {
		return json.Marshal(&src.ArrayOfSharedrecordTxt)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSharedrecordTxtResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSharedrecordTxtResponseObject != nil {
		return obj.ListSharedrecordTxtResponseObject
	}

	if obj.ArrayOfSharedrecordTxt != nil {
		return obj.ArrayOfSharedrecordTxt
	}

	// all schemas are nil
	return nil
}

type NullableListSharedrecordTxtResponse struct {
	value *ListSharedrecordTxtResponse
	isSet bool
}

func (v NullableListSharedrecordTxtResponse) Get() *ListSharedrecordTxtResponse {
	return v.value
}

func (v *NullableListSharedrecordTxtResponse) Set(val *ListSharedrecordTxtResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSharedrecordTxtResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSharedrecordTxtResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSharedrecordTxtResponse(val *ListSharedrecordTxtResponse) *NullableListSharedrecordTxtResponse {
	return &NullableListSharedrecordTxtResponse{value: val, isSet: true}
}

func (v NullableListSharedrecordTxtResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSharedrecordTxtResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
