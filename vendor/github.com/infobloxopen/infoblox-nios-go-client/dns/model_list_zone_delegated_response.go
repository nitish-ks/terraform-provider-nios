/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneDelegatedResponse - struct for ListZoneDelegatedResponse
type ListZoneDelegatedResponse struct {
	ListZoneDelegatedResponseObject *ListZoneDelegatedResponseObject
	ArrayOfZoneDelegated            *[]ZoneDelegated
}

// ListZoneDelegatedResponseObjectAsListZoneDelegatedResponse is a convenience function that returns ListZoneDelegatedResponseObject wrapped in ListZoneDelegatedResponse
func ListZoneDelegatedResponseObjectAsListZoneDelegatedResponse(v *ListZoneDelegatedResponseObject) ListZoneDelegatedResponse {
	return ListZoneDelegatedResponse{
		ListZoneDelegatedResponseObject: v,
	}
}

// []ZoneDelegatedAsListZoneDelegatedResponse is a convenience function that returns []ZoneDelegated wrapped in ListZoneDelegatedResponse
func ArrayOfZoneDelegatedAsListZoneDelegatedResponse(v *[]ZoneDelegated) ListZoneDelegatedResponse {
	return ListZoneDelegatedResponse{
		ArrayOfZoneDelegated: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneDelegatedResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneDelegatedResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneDelegatedResponseObject)
	if err == nil {
		jsonListZoneDelegatedResponseObject, _ := json.Marshal(dst.ListZoneDelegatedResponseObject)
		if string(jsonListZoneDelegatedResponseObject) == "{}" { // empty struct
			dst.ListZoneDelegatedResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneDelegatedResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneDelegated
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneDelegated)
	if err == nil {
		jsonArrayOfZoneDelegated, _ := json.Marshal(dst.ArrayOfZoneDelegated)
		if string(jsonArrayOfZoneDelegated) == "{}" { // empty struct
			dst.ArrayOfZoneDelegated = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneDelegated = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneDelegatedResponseObject = nil
		dst.ArrayOfZoneDelegated = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneDelegatedResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneDelegatedResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneDelegatedResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneDelegatedResponseObject != nil {
		return json.Marshal(&src.ListZoneDelegatedResponseObject)
	}

	if src.ArrayOfZoneDelegated != nil {
		return json.Marshal(&src.ArrayOfZoneDelegated)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneDelegatedResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneDelegatedResponseObject != nil {
		return obj.ListZoneDelegatedResponseObject
	}

	if obj.ArrayOfZoneDelegated != nil {
		return obj.ArrayOfZoneDelegated
	}

	// all schemas are nil
	return nil
}

type NullableListZoneDelegatedResponse struct {
	value *ListZoneDelegatedResponse
	isSet bool
}

func (v NullableListZoneDelegatedResponse) Get() *ListZoneDelegatedResponse {
	return v.value
}

func (v *NullableListZoneDelegatedResponse) Set(val *ListZoneDelegatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneDelegatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneDelegatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneDelegatedResponse(val *ListZoneDelegatedResponse) *NullableListZoneDelegatedResponse {
	return &NullableListZoneDelegatedResponse{value: val, isSet: true}
}

func (v NullableListZoneDelegatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneDelegatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
