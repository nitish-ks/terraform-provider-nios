/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ListZoneRpResponse - struct for ListZoneRpResponse
type ListZoneRpResponse struct {
	ListZoneRpResponseObject *ListZoneRpResponseObject
	ArrayOfZoneRp            *[]ZoneRp
}

// ListZoneRpResponseObjectAsListZoneRpResponse is a convenience function that returns ListZoneRpResponseObject wrapped in ListZoneRpResponse
func ListZoneRpResponseObjectAsListZoneRpResponse(v *ListZoneRpResponseObject) ListZoneRpResponse {
	return ListZoneRpResponse{
		ListZoneRpResponseObject: v,
	}
}

// []ZoneRpAsListZoneRpResponse is a convenience function that returns []ZoneRp wrapped in ListZoneRpResponse
func ArrayOfZoneRpAsListZoneRpResponse(v *[]ZoneRp) ListZoneRpResponse {
	return ListZoneRpResponse{
		ArrayOfZoneRp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListZoneRpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListZoneRpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListZoneRpResponseObject)
	if err == nil {
		jsonListZoneRpResponseObject, _ := json.Marshal(dst.ListZoneRpResponseObject)
		if string(jsonListZoneRpResponseObject) == "{}" { // empty struct
			dst.ListZoneRpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListZoneRpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfZoneRp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfZoneRp)
	if err == nil {
		jsonArrayOfZoneRp, _ := json.Marshal(dst.ArrayOfZoneRp)
		if string(jsonArrayOfZoneRp) == "{}" { // empty struct
			dst.ArrayOfZoneRp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfZoneRp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListZoneRpResponseObject = nil
		dst.ArrayOfZoneRp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListZoneRpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListZoneRpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListZoneRpResponse) MarshalJSON() ([]byte, error) {
	if src.ListZoneRpResponseObject != nil {
		return json.Marshal(&src.ListZoneRpResponseObject)
	}

	if src.ArrayOfZoneRp != nil {
		return json.Marshal(&src.ArrayOfZoneRp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListZoneRpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListZoneRpResponseObject != nil {
		return obj.ListZoneRpResponseObject
	}

	if obj.ArrayOfZoneRp != nil {
		return obj.ArrayOfZoneRp
	}

	// all schemas are nil
	return nil
}

type NullableListZoneRpResponse struct {
	value *ListZoneRpResponse
	isSet bool
}

func (v NullableListZoneRpResponse) Get() *ListZoneRpResponse {
	return v.value
}

func (v *NullableListZoneRpResponse) Set(val *ListZoneRpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListZoneRpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListZoneRpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListZoneRpResponse(val *ListZoneRpResponse) *NullableListZoneRpResponse {
	return &NullableListZoneRpResponse{value: val, isSet: true}
}

func (v NullableListZoneRpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListZoneRpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
