/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordDname type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordDname{}

// RecordDname struct for RecordDname
type RecordDname struct {
	// The reference to the object.
	Ref       *string               `json:"_ref,omitempty"`
	CloudInfo *RecordDnameCloudInfo `json:"cloud_info,omitempty"`
	// The comment for the record.
	Comment *string `json:"comment,omitempty"`
	// The time of the record creation in Epoch seconds format.
	CreationTime *int64 `json:"creation_time,omitempty"`
	// The record creator.
	Creator *string `json:"creator,omitempty"`
	// The GSS-TSIG principal that owns this record.
	DdnsPrincipal *string `json:"ddns_principal,omitempty"`
	// Determines if the DDNS updates for this record are allowed.
	DdnsProtected *bool `json:"ddns_protected,omitempty"`
	// Determines if the record is disabled.
	Disable *bool `json:"disable,omitempty"`
	// Name of a DNS DNAME record in punycode format.
	DnsName *string `json:"dns_name,omitempty"`
	// The target domain name of the DNS DNAME record in punycode format.
	DnsTarget *string `json:"dns_target,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// Determines if reclamation is allowed for the record.
	ForbidReclamation *bool `json:"forbid_reclamation,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// The name of the DNS DNAME record in FQDN format.
	Name *string `json:"name,omitempty"`
	// Determines if the record is reclaimable.
	Reclaimable *bool `json:"reclaimable,omitempty"`
	// The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.
	SharedRecordGroup *string `json:"shared_record_group,omitempty"`
	// The target domain name of the DNS DNAME record in FQDN format.
	Target *string `json:"target,omitempty"`
	// Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, that the record is valid (cached). Zero indicates that the record should not be cached.
	Ttl *int64 `json:"ttl,omitempty"`
	// Use flag for: ttl
	UseTtl *bool `json:"use_ttl,omitempty"`
	// The name of the DNS View in which the record resides, for example \"external\".
	View *string `json:"view,omitempty"`
	// The name of the zone in which the record resides. For example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.
	Zone *string `json:"zone,omitempty"`
}

// NewRecordDname instantiates a new RecordDname object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordDname() *RecordDname {
	this := RecordDname{}
	return &this
}

// NewRecordDnameWithDefaults instantiates a new RecordDname object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordDnameWithDefaults() *RecordDname {
	this := RecordDname{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordDname) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordDname) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordDname) SetRef(v string) {
	o.Ref = &v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *RecordDname) GetCloudInfo() RecordDnameCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret RecordDnameCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetCloudInfoOk() (*RecordDnameCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *RecordDname) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given RecordDnameCloudInfo and assigns it to the CloudInfo field.
func (o *RecordDname) SetCloudInfo(v RecordDnameCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecordDname) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecordDname) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecordDname) SetComment(v string) {
	o.Comment = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *RecordDname) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *RecordDname) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *RecordDname) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *RecordDname) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *RecordDname) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *RecordDname) SetCreator(v string) {
	o.Creator = &v
}

// GetDdnsPrincipal returns the DdnsPrincipal field value if set, zero value otherwise.
func (o *RecordDname) GetDdnsPrincipal() string {
	if o == nil || IsNil(o.DdnsPrincipal) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipal
}

// GetDdnsPrincipalOk returns a tuple with the DdnsPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetDdnsPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipal) {
		return nil, false
	}
	return o.DdnsPrincipal, true
}

// HasDdnsPrincipal returns a boolean if a field has been set.
func (o *RecordDname) HasDdnsPrincipal() bool {
	if o != nil && !IsNil(o.DdnsPrincipal) {
		return true
	}

	return false
}

// SetDdnsPrincipal gets a reference to the given string and assigns it to the DdnsPrincipal field.
func (o *RecordDname) SetDdnsPrincipal(v string) {
	o.DdnsPrincipal = &v
}

// GetDdnsProtected returns the DdnsProtected field value if set, zero value otherwise.
func (o *RecordDname) GetDdnsProtected() bool {
	if o == nil || IsNil(o.DdnsProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsProtected
}

// GetDdnsProtectedOk returns a tuple with the DdnsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetDdnsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsProtected) {
		return nil, false
	}
	return o.DdnsProtected, true
}

// HasDdnsProtected returns a boolean if a field has been set.
func (o *RecordDname) HasDdnsProtected() bool {
	if o != nil && !IsNil(o.DdnsProtected) {
		return true
	}

	return false
}

// SetDdnsProtected gets a reference to the given bool and assigns it to the DdnsProtected field.
func (o *RecordDname) SetDdnsProtected(v bool) {
	o.DdnsProtected = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *RecordDname) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *RecordDname) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *RecordDname) SetDisable(v bool) {
	o.Disable = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RecordDname) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RecordDname) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RecordDname) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDnsTarget returns the DnsTarget field value if set, zero value otherwise.
func (o *RecordDname) GetDnsTarget() string {
	if o == nil || IsNil(o.DnsTarget) {
		var ret string
		return ret
	}
	return *o.DnsTarget
}

// GetDnsTargetOk returns a tuple with the DnsTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetDnsTargetOk() (*string, bool) {
	if o == nil || IsNil(o.DnsTarget) {
		return nil, false
	}
	return o.DnsTarget, true
}

// HasDnsTarget returns a boolean if a field has been set.
func (o *RecordDname) HasDnsTarget() bool {
	if o != nil && !IsNil(o.DnsTarget) {
		return true
	}

	return false
}

// SetDnsTarget gets a reference to the given string and assigns it to the DnsTarget field.
func (o *RecordDname) SetDnsTarget(v string) {
	o.DnsTarget = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *RecordDname) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *RecordDname) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *RecordDname) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetForbidReclamation returns the ForbidReclamation field value if set, zero value otherwise.
func (o *RecordDname) GetForbidReclamation() bool {
	if o == nil || IsNil(o.ForbidReclamation) {
		var ret bool
		return ret
	}
	return *o.ForbidReclamation
}

// GetForbidReclamationOk returns a tuple with the ForbidReclamation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetForbidReclamationOk() (*bool, bool) {
	if o == nil || IsNil(o.ForbidReclamation) {
		return nil, false
	}
	return o.ForbidReclamation, true
}

// HasForbidReclamation returns a boolean if a field has been set.
func (o *RecordDname) HasForbidReclamation() bool {
	if o != nil && !IsNil(o.ForbidReclamation) {
		return true
	}

	return false
}

// SetForbidReclamation gets a reference to the given bool and assigns it to the ForbidReclamation field.
func (o *RecordDname) SetForbidReclamation(v bool) {
	o.ForbidReclamation = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordDname) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordDname) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordDname) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordDname) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordDname) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordDname) SetName(v string) {
	o.Name = &v
}

// GetReclaimable returns the Reclaimable field value if set, zero value otherwise.
func (o *RecordDname) GetReclaimable() bool {
	if o == nil || IsNil(o.Reclaimable) {
		var ret bool
		return ret
	}
	return *o.Reclaimable
}

// GetReclaimableOk returns a tuple with the Reclaimable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetReclaimableOk() (*bool, bool) {
	if o == nil || IsNil(o.Reclaimable) {
		return nil, false
	}
	return o.Reclaimable, true
}

// HasReclaimable returns a boolean if a field has been set.
func (o *RecordDname) HasReclaimable() bool {
	if o != nil && !IsNil(o.Reclaimable) {
		return true
	}

	return false
}

// SetReclaimable gets a reference to the given bool and assigns it to the Reclaimable field.
func (o *RecordDname) SetReclaimable(v bool) {
	o.Reclaimable = &v
}

// GetSharedRecordGroup returns the SharedRecordGroup field value if set, zero value otherwise.
func (o *RecordDname) GetSharedRecordGroup() string {
	if o == nil || IsNil(o.SharedRecordGroup) {
		var ret string
		return ret
	}
	return *o.SharedRecordGroup
}

// GetSharedRecordGroupOk returns a tuple with the SharedRecordGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetSharedRecordGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SharedRecordGroup) {
		return nil, false
	}
	return o.SharedRecordGroup, true
}

// HasSharedRecordGroup returns a boolean if a field has been set.
func (o *RecordDname) HasSharedRecordGroup() bool {
	if o != nil && !IsNil(o.SharedRecordGroup) {
		return true
	}

	return false
}

// SetSharedRecordGroup gets a reference to the given string and assigns it to the SharedRecordGroup field.
func (o *RecordDname) SetSharedRecordGroup(v string) {
	o.SharedRecordGroup = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *RecordDname) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *RecordDname) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *RecordDname) SetTarget(v string) {
	o.Target = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordDname) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordDname) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *RecordDname) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUseTtl returns the UseTtl field value if set, zero value otherwise.
func (o *RecordDname) GetUseTtl() bool {
	if o == nil || IsNil(o.UseTtl) {
		var ret bool
		return ret
	}
	return *o.UseTtl
}

// GetUseTtlOk returns a tuple with the UseTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetUseTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTtl) {
		return nil, false
	}
	return o.UseTtl, true
}

// HasUseTtl returns a boolean if a field has been set.
func (o *RecordDname) HasUseTtl() bool {
	if o != nil && !IsNil(o.UseTtl) {
		return true
	}

	return false
}

// SetUseTtl gets a reference to the given bool and assigns it to the UseTtl field.
func (o *RecordDname) SetUseTtl(v bool) {
	o.UseTtl = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *RecordDname) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *RecordDname) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *RecordDname) SetView(v string) {
	o.View = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *RecordDname) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordDname) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *RecordDname) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *RecordDname) SetZone(v string) {
	o.Zone = &v
}

func (o RecordDname) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordDname) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.DdnsPrincipal) {
		toSerialize["ddns_principal"] = o.DdnsPrincipal
	}
	if !IsNil(o.DdnsProtected) {
		toSerialize["ddns_protected"] = o.DdnsProtected
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DnsTarget) {
		toSerialize["dns_target"] = o.DnsTarget
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.ForbidReclamation) {
		toSerialize["forbid_reclamation"] = o.ForbidReclamation
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Reclaimable) {
		toSerialize["reclaimable"] = o.Reclaimable
	}
	if !IsNil(o.SharedRecordGroup) {
		toSerialize["shared_record_group"] = o.SharedRecordGroup
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.UseTtl) {
		toSerialize["use_ttl"] = o.UseTtl
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableRecordDname struct {
	value *RecordDname
	isSet bool
}

func (v NullableRecordDname) Get() *RecordDname {
	return v.value
}

func (v *NullableRecordDname) Set(val *RecordDname) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordDname) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordDname) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordDname(val *RecordDname) *NullableRecordDname {
	return &NullableRecordDname{value: val, isSet: true}
}

func (v NullableRecordDname) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordDname) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
