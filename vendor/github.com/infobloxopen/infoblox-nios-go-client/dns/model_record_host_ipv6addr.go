/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordHostIpv6addr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordHostIpv6addr{}

// RecordHostIpv6addr struct for RecordHostIpv6addr
type RecordHostIpv6addr struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Type of the DHCP IPv6 Host Address object.
	AddressType *string `json:"address_type,omitempty"`
	// Set this to True to enable the DHCP configuration for this IPv6 host address.
	ConfigureForDhcp *bool `json:"configure_for_dhcp,omitempty"`
	// The discovery status of this IPv6 Host Address.
	DiscoverNowStatus *string                           `json:"discover_now_status,omitempty"`
	DiscoveredData    *RecordHostIpv6addrDiscoveredData `json:"discovered_data,omitempty"`
	// Use this method to set or retrieve the domain_name value of the DHCP IPv6 Host Address object.
	DomainName *string `json:"domain_name,omitempty"`
	// The IPv6 addresses of DNS recursive name servers to which the DHCP client can send name resolution requests. The DHCP server includes this information in the DNS Recursive Name Server option in Advertise, Rebind, Information-Request, and Reply messages.
	DomainNameServers []string `json:"domain_name_servers,omitempty"`
	// DHCPv6 Unique Identifier (DUID) of the address object.
	Duid *string `json:"duid,omitempty"`
	// The host to which the IPv6 host address belongs, in FQDN format. It is only present when the host address object is not returned as part of a host.
	Host *string `json:"host,omitempty"`
	// The IPv6 Address prefix of the DHCP IPv6 Host Address object.
	Ipv6addr *string `json:"ipv6addr,omitempty"`
	// The IPv6 Address prefix of the DHCP IPv6 Host Address object.
	Ipv6prefix *string `json:"ipv6prefix,omitempty"`
	// Prefix bits of the DHCP IPv6 Host Address object.
	Ipv6prefixBits *int64 `json:"ipv6prefix_bits,omitempty"`
	// The time of the last DNS query in Epoch seconds format.
	LastQueried *int64 `json:"last_queried,omitempty"`
	// This field contains the logic filters to be applied on the this host address. This list corresponds to the match rules that are written to the dhcpd configuration file.
	LogicFilterRules []RecordHostIpv6addrLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// The MAC address for this host address.
	Mac *string `json:"mac,omitempty"`
	// The match_client value for this fixed address. Valid values are: \"DUID\": The host IP address is leased to the matching DUID. \"MAC_ADDRESS\": The host IP address is leased to the matching MAC address.
	MatchClient  *string                         `json:"match_client,omitempty"`
	MsAdUserData *RecordHostIpv6addrMsAdUserData `json:"ms_ad_user_data,omitempty"`
	// The network of the host address, in FQDN/CIDR format.
	Network *string `json:"network,omitempty"`
	// The name of the network view in which the host address resides.
	NetworkView *string `json:"network_view,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []RecordHostIpv6addrOptions `json:"options,omitempty"`
	// Use this method to set or retrieve the preferred lifetime value of the DHCP IPv6 Host Address object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The reference to the reserved interface to which the device belongs.
	ReservedInterface *string `json:"reserved_interface,omitempty"`
	// Use flag for: domain_name
	UseDomainName *bool `json:"use_domain_name,omitempty"`
	// Use flag for: domain_name_servers
	UseDomainNameServers *bool `json:"use_domain_name_servers,omitempty"`
	// Set this to True when using this host address for EA inheritance.
	UseForEaInheritance *bool `json:"use_for_ea_inheritance,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// Use this method to set or retrieve the valid lifetime value of the DHCP IPv6 Host Address object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewRecordHostIpv6addr instantiates a new RecordHostIpv6addr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordHostIpv6addr() *RecordHostIpv6addr {
	this := RecordHostIpv6addr{}
	return &this
}

// NewRecordHostIpv6addrWithDefaults instantiates a new RecordHostIpv6addr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordHostIpv6addrWithDefaults() *RecordHostIpv6addr {
	this := RecordHostIpv6addr{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RecordHostIpv6addr) SetRef(v string) {
	o.Ref = &v
}

// GetAddressType returns the AddressType field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetAddressType() string {
	if o == nil || IsNil(o.AddressType) {
		var ret string
		return ret
	}
	return *o.AddressType
}

// GetAddressTypeOk returns a tuple with the AddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetAddressTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressType) {
		return nil, false
	}
	return o.AddressType, true
}

// HasAddressType returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasAddressType() bool {
	if o != nil && !IsNil(o.AddressType) {
		return true
	}

	return false
}

// SetAddressType gets a reference to the given string and assigns it to the AddressType field.
func (o *RecordHostIpv6addr) SetAddressType(v string) {
	o.AddressType = &v
}

// GetConfigureForDhcp returns the ConfigureForDhcp field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetConfigureForDhcp() bool {
	if o == nil || IsNil(o.ConfigureForDhcp) {
		var ret bool
		return ret
	}
	return *o.ConfigureForDhcp
}

// GetConfigureForDhcpOk returns a tuple with the ConfigureForDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetConfigureForDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigureForDhcp) {
		return nil, false
	}
	return o.ConfigureForDhcp, true
}

// HasConfigureForDhcp returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasConfigureForDhcp() bool {
	if o != nil && !IsNil(o.ConfigureForDhcp) {
		return true
	}

	return false
}

// SetConfigureForDhcp gets a reference to the given bool and assigns it to the ConfigureForDhcp field.
func (o *RecordHostIpv6addr) SetConfigureForDhcp(v bool) {
	o.ConfigureForDhcp = &v
}

// GetDiscoverNowStatus returns the DiscoverNowStatus field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetDiscoverNowStatus() string {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		var ret string
		return ret
	}
	return *o.DiscoverNowStatus
}

// GetDiscoverNowStatusOk returns a tuple with the DiscoverNowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetDiscoverNowStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverNowStatus) {
		return nil, false
	}
	return o.DiscoverNowStatus, true
}

// HasDiscoverNowStatus returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasDiscoverNowStatus() bool {
	if o != nil && !IsNil(o.DiscoverNowStatus) {
		return true
	}

	return false
}

// SetDiscoverNowStatus gets a reference to the given string and assigns it to the DiscoverNowStatus field.
func (o *RecordHostIpv6addr) SetDiscoverNowStatus(v string) {
	o.DiscoverNowStatus = &v
}

// GetDiscoveredData returns the DiscoveredData field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetDiscoveredData() RecordHostIpv6addrDiscoveredData {
	if o == nil || IsNil(o.DiscoveredData) {
		var ret RecordHostIpv6addrDiscoveredData
		return ret
	}
	return *o.DiscoveredData
}

// GetDiscoveredDataOk returns a tuple with the DiscoveredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetDiscoveredDataOk() (*RecordHostIpv6addrDiscoveredData, bool) {
	if o == nil || IsNil(o.DiscoveredData) {
		return nil, false
	}
	return o.DiscoveredData, true
}

// HasDiscoveredData returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasDiscoveredData() bool {
	if o != nil && !IsNil(o.DiscoveredData) {
		return true
	}

	return false
}

// SetDiscoveredData gets a reference to the given RecordHostIpv6addrDiscoveredData and assigns it to the DiscoveredData field.
func (o *RecordHostIpv6addr) SetDiscoveredData(v RecordHostIpv6addrDiscoveredData) {
	o.DiscoveredData = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *RecordHostIpv6addr) SetDomainName(v string) {
	o.DomainName = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetDomainNameServers() []string {
	if o == nil || IsNil(o.DomainNameServers) {
		var ret []string
		return ret
	}
	return o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNameServers) {
		return nil, false
	}
	return o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasDomainNameServers() bool {
	if o != nil && !IsNil(o.DomainNameServers) {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *RecordHostIpv6addr) SetDomainNameServers(v []string) {
	o.DomainNameServers = v
}

// GetDuid returns the Duid field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetDuid() string {
	if o == nil || IsNil(o.Duid) {
		var ret string
		return ret
	}
	return *o.Duid
}

// GetDuidOk returns a tuple with the Duid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetDuidOk() (*string, bool) {
	if o == nil || IsNil(o.Duid) {
		return nil, false
	}
	return o.Duid, true
}

// HasDuid returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasDuid() bool {
	if o != nil && !IsNil(o.Duid) {
		return true
	}

	return false
}

// SetDuid gets a reference to the given string and assigns it to the Duid field.
func (o *RecordHostIpv6addr) SetDuid(v string) {
	o.Duid = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RecordHostIpv6addr) SetHost(v string) {
	o.Host = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetIpv6addr() string {
	if o == nil || IsNil(o.Ipv6addr) {
		var ret string
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetIpv6addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6addr) {
		return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasIpv6addr() bool {
	if o != nil && !IsNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given string and assigns it to the Ipv6addr field.
func (o *RecordHostIpv6addr) SetIpv6addr(v string) {
	o.Ipv6addr = &v
}

// GetIpv6prefix returns the Ipv6prefix field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetIpv6prefix() string {
	if o == nil || IsNil(o.Ipv6prefix) {
		var ret string
		return ret
	}
	return *o.Ipv6prefix
}

// GetIpv6prefixOk returns a tuple with the Ipv6prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetIpv6prefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6prefix) {
		return nil, false
	}
	return o.Ipv6prefix, true
}

// HasIpv6prefix returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasIpv6prefix() bool {
	if o != nil && !IsNil(o.Ipv6prefix) {
		return true
	}

	return false
}

// SetIpv6prefix gets a reference to the given string and assigns it to the Ipv6prefix field.
func (o *RecordHostIpv6addr) SetIpv6prefix(v string) {
	o.Ipv6prefix = &v
}

// GetIpv6prefixBits returns the Ipv6prefixBits field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetIpv6prefixBits() int64 {
	if o == nil || IsNil(o.Ipv6prefixBits) {
		var ret int64
		return ret
	}
	return *o.Ipv6prefixBits
}

// GetIpv6prefixBitsOk returns a tuple with the Ipv6prefixBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetIpv6prefixBitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Ipv6prefixBits) {
		return nil, false
	}
	return o.Ipv6prefixBits, true
}

// HasIpv6prefixBits returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasIpv6prefixBits() bool {
	if o != nil && !IsNil(o.Ipv6prefixBits) {
		return true
	}

	return false
}

// SetIpv6prefixBits gets a reference to the given int64 and assigns it to the Ipv6prefixBits field.
func (o *RecordHostIpv6addr) SetIpv6prefixBits(v int64) {
	o.Ipv6prefixBits = &v
}

// GetLastQueried returns the LastQueried field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetLastQueried() int64 {
	if o == nil || IsNil(o.LastQueried) {
		var ret int64
		return ret
	}
	return *o.LastQueried
}

// GetLastQueriedOk returns a tuple with the LastQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetLastQueriedOk() (*int64, bool) {
	if o == nil || IsNil(o.LastQueried) {
		return nil, false
	}
	return o.LastQueried, true
}

// HasLastQueried returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasLastQueried() bool {
	if o != nil && !IsNil(o.LastQueried) {
		return true
	}

	return false
}

// SetLastQueried gets a reference to the given int64 and assigns it to the LastQueried field.
func (o *RecordHostIpv6addr) SetLastQueried(v int64) {
	o.LastQueried = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetLogicFilterRules() []RecordHostIpv6addrLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []RecordHostIpv6addrLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetLogicFilterRulesOk() ([]RecordHostIpv6addrLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []RecordHostIpv6addrLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *RecordHostIpv6addr) SetLogicFilterRules(v []RecordHostIpv6addrLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *RecordHostIpv6addr) SetMac(v string) {
	o.Mac = &v
}

// GetMatchClient returns the MatchClient field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetMatchClient() string {
	if o == nil || IsNil(o.MatchClient) {
		var ret string
		return ret
	}
	return *o.MatchClient
}

// GetMatchClientOk returns a tuple with the MatchClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetMatchClientOk() (*string, bool) {
	if o == nil || IsNil(o.MatchClient) {
		return nil, false
	}
	return o.MatchClient, true
}

// HasMatchClient returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasMatchClient() bool {
	if o != nil && !IsNil(o.MatchClient) {
		return true
	}

	return false
}

// SetMatchClient gets a reference to the given string and assigns it to the MatchClient field.
func (o *RecordHostIpv6addr) SetMatchClient(v string) {
	o.MatchClient = &v
}

// GetMsAdUserData returns the MsAdUserData field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetMsAdUserData() RecordHostIpv6addrMsAdUserData {
	if o == nil || IsNil(o.MsAdUserData) {
		var ret RecordHostIpv6addrMsAdUserData
		return ret
	}
	return *o.MsAdUserData
}

// GetMsAdUserDataOk returns a tuple with the MsAdUserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetMsAdUserDataOk() (*RecordHostIpv6addrMsAdUserData, bool) {
	if o == nil || IsNil(o.MsAdUserData) {
		return nil, false
	}
	return o.MsAdUserData, true
}

// HasMsAdUserData returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasMsAdUserData() bool {
	if o != nil && !IsNil(o.MsAdUserData) {
		return true
	}

	return false
}

// SetMsAdUserData gets a reference to the given RecordHostIpv6addrMsAdUserData and assigns it to the MsAdUserData field.
func (o *RecordHostIpv6addr) SetMsAdUserData(v RecordHostIpv6addrMsAdUserData) {
	o.MsAdUserData = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RecordHostIpv6addr) SetNetwork(v string) {
	o.Network = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *RecordHostIpv6addr) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetOptions() []RecordHostIpv6addrOptions {
	if o == nil || IsNil(o.Options) {
		var ret []RecordHostIpv6addrOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetOptionsOk() ([]RecordHostIpv6addrOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []RecordHostIpv6addrOptions and assigns it to the Options field.
func (o *RecordHostIpv6addr) SetOptions(v []RecordHostIpv6addrOptions) {
	o.Options = v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *RecordHostIpv6addr) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetReservedInterface returns the ReservedInterface field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetReservedInterface() string {
	if o == nil || IsNil(o.ReservedInterface) {
		var ret string
		return ret
	}
	return *o.ReservedInterface
}

// GetReservedInterfaceOk returns a tuple with the ReservedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetReservedInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedInterface) {
		return nil, false
	}
	return o.ReservedInterface, true
}

// HasReservedInterface returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasReservedInterface() bool {
	if o != nil && !IsNil(o.ReservedInterface) {
		return true
	}

	return false
}

// SetReservedInterface gets a reference to the given string and assigns it to the ReservedInterface field.
func (o *RecordHostIpv6addr) SetReservedInterface(v string) {
	o.ReservedInterface = &v
}

// GetUseDomainName returns the UseDomainName field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseDomainName() bool {
	if o == nil || IsNil(o.UseDomainName) {
		var ret bool
		return ret
	}
	return *o.UseDomainName
}

// GetUseDomainNameOk returns a tuple with the UseDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseDomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainName) {
		return nil, false
	}
	return o.UseDomainName, true
}

// HasUseDomainName returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseDomainName() bool {
	if o != nil && !IsNil(o.UseDomainName) {
		return true
	}

	return false
}

// SetUseDomainName gets a reference to the given bool and assigns it to the UseDomainName field.
func (o *RecordHostIpv6addr) SetUseDomainName(v bool) {
	o.UseDomainName = &v
}

// GetUseDomainNameServers returns the UseDomainNameServers field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseDomainNameServers() bool {
	if o == nil || IsNil(o.UseDomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseDomainNameServers
}

// GetUseDomainNameServersOk returns a tuple with the UseDomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseDomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainNameServers) {
		return nil, false
	}
	return o.UseDomainNameServers, true
}

// HasUseDomainNameServers returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseDomainNameServers() bool {
	if o != nil && !IsNil(o.UseDomainNameServers) {
		return true
	}

	return false
}

// SetUseDomainNameServers gets a reference to the given bool and assigns it to the UseDomainNameServers field.
func (o *RecordHostIpv6addr) SetUseDomainNameServers(v bool) {
	o.UseDomainNameServers = &v
}

// GetUseForEaInheritance returns the UseForEaInheritance field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseForEaInheritance() bool {
	if o == nil || IsNil(o.UseForEaInheritance) {
		var ret bool
		return ret
	}
	return *o.UseForEaInheritance
}

// GetUseForEaInheritanceOk returns a tuple with the UseForEaInheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseForEaInheritanceOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForEaInheritance) {
		return nil, false
	}
	return o.UseForEaInheritance, true
}

// HasUseForEaInheritance returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseForEaInheritance() bool {
	if o != nil && !IsNil(o.UseForEaInheritance) {
		return true
	}

	return false
}

// SetUseForEaInheritance gets a reference to the given bool and assigns it to the UseForEaInheritance field.
func (o *RecordHostIpv6addr) SetUseForEaInheritance(v bool) {
	o.UseForEaInheritance = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *RecordHostIpv6addr) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *RecordHostIpv6addr) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *RecordHostIpv6addr) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *RecordHostIpv6addr) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *RecordHostIpv6addr) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHostIpv6addr) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *RecordHostIpv6addr) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *RecordHostIpv6addr) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o RecordHostIpv6addr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordHostIpv6addr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AddressType) {
		toSerialize["address_type"] = o.AddressType
	}
	if !IsNil(o.ConfigureForDhcp) {
		toSerialize["configure_for_dhcp"] = o.ConfigureForDhcp
	}
	if !IsNil(o.DiscoverNowStatus) {
		toSerialize["discover_now_status"] = o.DiscoverNowStatus
	}
	if !IsNil(o.DiscoveredData) {
		toSerialize["discovered_data"] = o.DiscoveredData
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.DomainNameServers) {
		toSerialize["domain_name_servers"] = o.DomainNameServers
	}
	if !IsNil(o.Duid) {
		toSerialize["duid"] = o.Duid
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}
	if !IsNil(o.Ipv6prefix) {
		toSerialize["ipv6prefix"] = o.Ipv6prefix
	}
	if !IsNil(o.Ipv6prefixBits) {
		toSerialize["ipv6prefix_bits"] = o.Ipv6prefixBits
	}
	if !IsNil(o.LastQueried) {
		toSerialize["last_queried"] = o.LastQueried
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MatchClient) {
		toSerialize["match_client"] = o.MatchClient
	}
	if !IsNil(o.MsAdUserData) {
		toSerialize["ms_ad_user_data"] = o.MsAdUserData
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.ReservedInterface) {
		toSerialize["reserved_interface"] = o.ReservedInterface
	}
	if !IsNil(o.UseDomainName) {
		toSerialize["use_domain_name"] = o.UseDomainName
	}
	if !IsNil(o.UseDomainNameServers) {
		toSerialize["use_domain_name_servers"] = o.UseDomainNameServers
	}
	if !IsNil(o.UseForEaInheritance) {
		toSerialize["use_for_ea_inheritance"] = o.UseForEaInheritance
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableRecordHostIpv6addr struct {
	value *RecordHostIpv6addr
	isSet bool
}

func (v NullableRecordHostIpv6addr) Get() *RecordHostIpv6addr {
	return v.value
}

func (v *NullableRecordHostIpv6addr) Set(val *RecordHostIpv6addr) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHostIpv6addr) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHostIpv6addr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHostIpv6addr(val *RecordHostIpv6addr) *NullableRecordHostIpv6addr {
	return &NullableRecordHostIpv6addr{value: val, isSet: true}
}

func (v NullableRecordHostIpv6addr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHostIpv6addr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
