/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the Sharedrecordgroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sharedrecordgroup{}

// Sharedrecordgroup struct for Sharedrecordgroup
type Sharedrecordgroup struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The descriptive comment of this shared record group.
	Comment *string `json:"comment,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of this shared record group.
	Name *string `json:"name,omitempty"`
	// The record name policy of this shared record group.
	RecordNamePolicy *string `json:"record_name_policy,omitempty"`
	// Use flag for: record_name_policy
	UseRecordNamePolicy *bool `json:"use_record_name_policy,omitempty"`
	// The list of zones associated with this shared record group. Starting from NIOS-9.0.6, this field has been updated to a structure that includes FQDN and DNS view details.
	ZoneAssociations []SharedrecordgroupZoneAssociations `json:"zone_associations,omitempty"`
}

// NewSharedrecordgroup instantiates a new Sharedrecordgroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedrecordgroup() *Sharedrecordgroup {
	this := Sharedrecordgroup{}
	return &this
}

// NewSharedrecordgroupWithDefaults instantiates a new Sharedrecordgroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedrecordgroupWithDefaults() *Sharedrecordgroup {
	this := Sharedrecordgroup{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Sharedrecordgroup) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Sharedrecordgroup) SetComment(v string) {
	o.Comment = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Sharedrecordgroup) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sharedrecordgroup) SetName(v string) {
	o.Name = &v
}

// GetRecordNamePolicy returns the RecordNamePolicy field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetRecordNamePolicy() string {
	if o == nil || IsNil(o.RecordNamePolicy) {
		var ret string
		return ret
	}
	return *o.RecordNamePolicy
}

// GetRecordNamePolicyOk returns a tuple with the RecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetRecordNamePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RecordNamePolicy) {
		return nil, false
	}
	return o.RecordNamePolicy, true
}

// HasRecordNamePolicy returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasRecordNamePolicy() bool {
	if o != nil && !IsNil(o.RecordNamePolicy) {
		return true
	}

	return false
}

// SetRecordNamePolicy gets a reference to the given string and assigns it to the RecordNamePolicy field.
func (o *Sharedrecordgroup) SetRecordNamePolicy(v string) {
	o.RecordNamePolicy = &v
}

// GetUseRecordNamePolicy returns the UseRecordNamePolicy field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetUseRecordNamePolicy() bool {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		var ret bool
		return ret
	}
	return *o.UseRecordNamePolicy
}

// GetUseRecordNamePolicyOk returns a tuple with the UseRecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetUseRecordNamePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		return nil, false
	}
	return o.UseRecordNamePolicy, true
}

// HasUseRecordNamePolicy returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasUseRecordNamePolicy() bool {
	if o != nil && !IsNil(o.UseRecordNamePolicy) {
		return true
	}

	return false
}

// SetUseRecordNamePolicy gets a reference to the given bool and assigns it to the UseRecordNamePolicy field.
func (o *Sharedrecordgroup) SetUseRecordNamePolicy(v bool) {
	o.UseRecordNamePolicy = &v
}

// GetZoneAssociations returns the ZoneAssociations field value if set, zero value otherwise.
func (o *Sharedrecordgroup) GetZoneAssociations() []SharedrecordgroupZoneAssociations {
	if o == nil || IsNil(o.ZoneAssociations) {
		var ret []SharedrecordgroupZoneAssociations
		return ret
	}
	return o.ZoneAssociations
}

// GetZoneAssociationsOk returns a tuple with the ZoneAssociations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharedrecordgroup) GetZoneAssociationsOk() ([]SharedrecordgroupZoneAssociations, bool) {
	if o == nil || IsNil(o.ZoneAssociations) {
		return nil, false
	}
	return o.ZoneAssociations, true
}

// HasZoneAssociations returns a boolean if a field has been set.
func (o *Sharedrecordgroup) HasZoneAssociations() bool {
	if o != nil && !IsNil(o.ZoneAssociations) {
		return true
	}

	return false
}

// SetZoneAssociations gets a reference to the given []SharedrecordgroupZoneAssociations and assigns it to the ZoneAssociations field.
func (o *Sharedrecordgroup) SetZoneAssociations(v []SharedrecordgroupZoneAssociations) {
	o.ZoneAssociations = v
}

func (o Sharedrecordgroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sharedrecordgroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RecordNamePolicy) {
		toSerialize["record_name_policy"] = o.RecordNamePolicy
	}
	if !IsNil(o.UseRecordNamePolicy) {
		toSerialize["use_record_name_policy"] = o.UseRecordNamePolicy
	}
	if !IsNil(o.ZoneAssociations) {
		toSerialize["zone_associations"] = o.ZoneAssociations
	}
	return toSerialize, nil
}

type NullableSharedrecordgroup struct {
	value *Sharedrecordgroup
	isSet bool
}

func (v NullableSharedrecordgroup) Get() *Sharedrecordgroup {
	return v.value
}

func (v *NullableSharedrecordgroup) Set(val *Sharedrecordgroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedrecordgroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedrecordgroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedrecordgroup(val *Sharedrecordgroup) *NullableSharedrecordgroup {
	return &NullableSharedrecordgroup{value: val, isSet: true}
}

func (v NullableSharedrecordgroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedrecordgroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
