/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// UpdateRecordHostIpv4addrResponse - struct for UpdateRecordHostIpv4addrResponse
type UpdateRecordHostIpv4addrResponse struct {
	UpdateRecordHostIpv4addrResponseAsObject *UpdateRecordHostIpv4addrResponseAsObject
	String                                   *string
}

// UpdateRecordHostIpv4addrResponseAsObjectAsUpdateRecordHostIpv4addrResponse is a convenience function that returns UpdateRecordHostIpv4addrResponseAsObject wrapped in UpdateRecordHostIpv4addrResponse
func UpdateRecordHostIpv4addrResponseAsObjectAsUpdateRecordHostIpv4addrResponse(v *UpdateRecordHostIpv4addrResponseAsObject) UpdateRecordHostIpv4addrResponse {
	return UpdateRecordHostIpv4addrResponse{
		UpdateRecordHostIpv4addrResponseAsObject: v,
	}
}

// stringAsUpdateRecordHostIpv4addrResponse is a convenience function that returns string wrapped in UpdateRecordHostIpv4addrResponse
func StringAsUpdateRecordHostIpv4addrResponse(v *string) UpdateRecordHostIpv4addrResponse {
	return UpdateRecordHostIpv4addrResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRecordHostIpv4addrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateRecordHostIpv4addrResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateRecordHostIpv4addrResponseAsObject)
	if err == nil {
		jsonUpdateRecordHostIpv4addrResponseAsObject, _ := json.Marshal(dst.UpdateRecordHostIpv4addrResponseAsObject)
		if string(jsonUpdateRecordHostIpv4addrResponseAsObject) == "{}" { // empty struct
			dst.UpdateRecordHostIpv4addrResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateRecordHostIpv4addrResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateRecordHostIpv4addrResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRecordHostIpv4addrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRecordHostIpv4addrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateRecordHostIpv4addrResponseAsObject != nil {
		return json.Marshal(&src.UpdateRecordHostIpv4addrResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRecordHostIpv4addrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateRecordHostIpv4addrResponseAsObject != nil {
		return obj.UpdateRecordHostIpv4addrResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRecordHostIpv4addrResponse struct {
	value *UpdateRecordHostIpv4addrResponse
	isSet bool
}

func (v NullableUpdateRecordHostIpv4addrResponse) Get() *UpdateRecordHostIpv4addrResponse {
	return v.value
}

func (v *NullableUpdateRecordHostIpv4addrResponse) Set(val *UpdateRecordHostIpv4addrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecordHostIpv4addrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecordHostIpv4addrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecordHostIpv4addrResponse(val *UpdateRecordHostIpv4addrResponse) *NullableUpdateRecordHostIpv4addrResponse {
	return &NullableUpdateRecordHostIpv4addrResponse{value: val, isSet: true}
}

func (v NullableUpdateRecordHostIpv4addrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecordHostIpv4addrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
