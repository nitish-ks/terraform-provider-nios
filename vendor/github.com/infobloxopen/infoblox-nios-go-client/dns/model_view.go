/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the View type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &View{}

// View struct for View
type View struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method. Valid values are \"REDIRECT\" or \"REFUSE\". The default value is \"REFUSE\".
	BlacklistAction *string `json:"blacklist_action,omitempty"`
	// The flag that indicates whether blacklist redirection queries are logged. Specify \"true\" to enable logging, or \"false\" to disable it. The default value is \"false\".
	BlacklistLogQuery *bool `json:"blacklist_log_query,omitempty"`
	// The array of IP addresses the appliance includes in the response it sends in place of a blacklisted IP address.
	BlacklistRedirectAddresses []string `json:"blacklist_redirect_addresses,omitempty"`
	// The Time To Live (TTL) value of the synthetic DNS responses resulted from blacklist redirection. The TTL value is a 32-bit unsigned integer that represents the TTL in seconds.
	BlacklistRedirectTtl *int64 `json:"blacklist_redirect_ttl,omitempty"`
	// The name of the Ruleset object assigned at the Grid level for blacklist redirection.
	BlacklistRulesets []string       `json:"blacklist_rulesets,omitempty"`
	CloudInfo         *ViewCloudInfo `json:"cloud_info,omitempty"`
	// Comment for the DNS view; maximum 64 characters.
	Comment *string `json:"comment,omitempty"`
	// The list of customized root name servers. You can either select and use Internet root name servers or specify custom root name servers by providing a host name and IP address to which the Infoblox appliance can send queries. Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.
	CustomRootNameServers []ViewCustomRootNameServers `json:"custom_root_name_servers,omitempty"`
	// Defines whether creation timestamp of RR should be updated ' when DDNS update happens even if there is no change to ' the RR.
	DdnsForceCreationTimestampUpdate *bool `json:"ddns_force_creation_timestamp_update,omitempty"`
	// The DDNS Principal cluster group name.
	DdnsPrincipalGroup *string `json:"ddns_principal_group,omitempty"`
	// The flag that indicates whether the DDNS principal track is enabled or disabled.
	DdnsPrincipalTracking *bool `json:"ddns_principal_tracking,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request based on FQDN patterns is enabled or disabled.
	DdnsRestrictPatterns *bool `json:"ddns_restrict_patterns,omitempty"`
	// The unordered list of restriction patterns for an option of to restrict DDNS updates based on FQDN patterns.
	DdnsRestrictPatternsList []string `json:"ddns_restrict_patterns_list,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request to protected resource records is enabled or disabled.
	DdnsRestrictProtected *bool `json:"ddns_restrict_protected,omitempty"`
	// The flag that indicates whether DDNS update request for principal other than target resource record's principal is restricted.
	DdnsRestrictSecure *bool `json:"ddns_restrict_secure,omitempty"`
	// The flag that indicates whether an option to restrict DDNS update request to resource records which are marked as 'STATIC' is enabled or disabled.
	DdnsRestrictStatic *bool `json:"ddns_restrict_static,omitempty"`
	// Determines if the DNS view is disabled or not. When this is set to False, the DNS view is enabled.
	Disable *bool `json:"disable,omitempty"`
	// Determines if the DNS64 s enabled or not.
	Dns64Enabled *bool `json:"dns64_enabled,omitempty"`
	// The list of DNS64 synthesis groups associated with this DNS view.
	Dns64Groups []string `json:"dns64_groups,omitempty"`
	// Determines if the DNS security extension is enabled or not.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	// Determines if the DNS security extension accepts expired signatures or not.
	DnssecExpiredSignaturesEnabled *bool `json:"dnssec_expired_signatures_enabled,omitempty"`
	// A list of zones for which the server does not perform DNSSEC validation.
	DnssecNegativeTrustAnchors []string `json:"dnssec_negative_trust_anchors,omitempty"`
	// The list of trusted keys for the DNS security extension.
	DnssecTrustedKeys []ViewDnssecTrustedKeys `json:"dnssec_trusted_keys,omitempty"`
	// Determines if the DNS security validation is enabled or not.
	DnssecValidationEnabled *bool `json:"dnssec_validation_enabled,omitempty"`
	// Advertises the EDNS0 buffer size to the upstream server. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	EdnsUdpSize *int64 `json:"edns_udp_size,omitempty"`
	// Determines if the blacklist in a DNS view is enabled or not.
	EnableBlacklist *bool `json:"enable_blacklist,omitempty"`
	// Determines if the fixed RRset order FQDN is enabled or not.
	EnableFixedRrsetOrderFqdns *bool `json:"enable_fixed_rrset_order_fqdns,omitempty"`
	// Determines if the 'match-recursive-only' option in a DNS view is enabled or not.
	EnableMatchRecursiveOnly *bool `json:"enable_match_recursive_only,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The type of AAAA filtering for this DNS view object.
	FilterAaaa *string `json:"filter_aaaa,omitempty"`
	// Applies AAAA filtering to a named ACL, or to a list of IPv4/IPv6 addresses and networks from which queries are received. This field does not allow TSIG keys.
	FilterAaaaList []ViewFilterAaaaList `json:"filter_aaaa_list,omitempty"`
	// The fixed RRset order FQDN. If this field does not contain an empty value, the appliance will automatically set the enable_fixed_rrset_order_fqdns field to 'true', unless the same request sets the enable field to 'false'.
	FixedRrsetOrderFqdns []ViewFixedRrsetOrderFqdns `json:"fixed_rrset_order_fqdns,omitempty"`
	// Determines if this DNS view sends queries to forwarders only or not. When the value is True, queries are sent to forwarders only, and not to other internal or Internet root servers.
	ForwardOnly *bool `json:"forward_only,omitempty"`
	// The list of forwarders for the DNS view. A forwarder is a name server to which other name servers first send their off-site queries. The forwarder builds up a cache of information, avoiding the need for other name servers to send queries off-site.
	Forwarders []string `json:"forwarders,omitempty"`
	// The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you cannot delete it. There must always be at least one DNS view in the appliance.
	IsDefault *bool `json:"is_default,omitempty"`
	// Determines last queried ACL for the specified IPv4 or IPv6 addresses and networks in scavenging settings.
	LastQueriedAcl []ViewLastQueriedAcl `json:"last_queried_acl,omitempty"`
	// A list of forwarders for the match clients. This list specifies a named ACL, or a list of IPv4/IPv6 addresses, networks, TSIG keys of clients that are allowed or denied access to the DNS view.
	MatchClients []ViewMatchClients `json:"match_clients,omitempty"`
	// A list of forwarders for the match destinations. This list specifies a name ACL, or a list of IPv4/IPv6 addresses, networks, TSIG keys of clients that are allowed or denied access to the DNS view.
	MatchDestinations []ViewMatchDestinations `json:"match_destinations,omitempty"`
	// The maximum number of seconds to cache ordinary (positive) answers.
	MaxCacheTtl *int64 `json:"max_cache_ttl,omitempty"`
	// The maximum number of seconds to cache negative (NXDOMAIN) answers.
	MaxNcacheTtl *int64 `json:"max_ncache_ttl,omitempty"`
	// The value is used by authoritative DNS servers to never send DNS responses larger than the configured value. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.
	MaxUdpSize *int64 `json:"max_udp_size,omitempty"`
	// Name of the DNS view.
	Name *string `json:"name,omitempty"`
	// The name of the network view object associated with this DNS view.
	NetworkView *string `json:"network_view,omitempty"`
	// The number of seconds of delay the notify messages are sent to secondaries.
	NotifyDelay *int64 `json:"notify_delay,omitempty"`
	// The flag that indicates whether NXDOMAIN redirection queries are logged. Specify \"true\" to enable logging, or \"false\" to disable it. The default value is \"false\".
	NxdomainLogQuery *bool `json:"nxdomain_log_query,omitempty"`
	// Determines if NXDOMAIN redirection in a DNS view is enabled or not.
	NxdomainRedirect *bool `json:"nxdomain_redirect,omitempty"`
	// The array with IPv4 addresses the appliance includes in the response it sends in place of an NXDOMAIN response.
	NxdomainRedirectAddresses []string `json:"nxdomain_redirect_addresses,omitempty"`
	// The array with IPv6 addresses the appliance includes in the response it sends in place of an NXDOMAIN response.
	NxdomainRedirectAddressesV6 []string `json:"nxdomain_redirect_addresses_v6,omitempty"`
	// The Time To Live (TTL) value of the synthetic DNS responses resulted from NXDOMAIN redirection. The TTL value is a 32-bit unsigned integer that represents the TTL in seconds.
	NxdomainRedirectTtl *int64 `json:"nxdomain_redirect_ttl,omitempty"`
	// The names of the Ruleset objects assigned at the grid level for NXDOMAIN redirection.
	NxdomainRulesets []string `json:"nxdomain_rulesets,omitempty"`
	// Determines if recursion is enabled or not.
	Recursion            *bool                     `json:"recursion,omitempty"`
	ResponseRateLimiting *ViewResponseRateLimiting `json:"response_rate_limiting,omitempty"`
	// Determines the type of root name servers.
	RootNameServerType *string `json:"root_name_server_type,omitempty"`
	// Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.
	RpzDropIpRuleEnabled *bool `json:"rpz_drop_ip_rule_enabled,omitempty"`
	// The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv4 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv4,omitempty"`
	// The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv6 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv6,omitempty"`
	// The flag that indicates whether recursive RPZ lookups are enabled.
	RpzQnameWaitRecurse *bool                   `json:"rpz_qname_wait_recurse,omitempty"`
	ScavengingSettings  *ViewScavengingSettings `json:"scavenging_settings,omitempty"`
	// A sort list that determines the order of IP addresses in responses sent to DNS queries.
	Sortlist []ViewSortlist `json:"sortlist,omitempty"`
	// Use flag for: blacklist_action , blacklist_log_query, blacklist_redirect_addresses, blacklist_redirect_ttl, blacklist_rulesets, enable_blacklist
	UseBlacklist *bool `json:"use_blacklist,omitempty"`
	// Use flag for: ddns_force_creation_timestamp_update
	UseDdnsForceCreationTimestampUpdate *bool `json:"use_ddns_force_creation_timestamp_update,omitempty"`
	// Use flag for: ddns_restrict_patterns_list , ddns_restrict_patterns
	UseDdnsPatternsRestriction *bool `json:"use_ddns_patterns_restriction,omitempty"`
	// Use flag for: ddns_restrict_secure , ddns_principal_tracking, ddns_principal_group
	UseDdnsPrincipalSecurity *bool `json:"use_ddns_principal_security,omitempty"`
	// Use flag for: ddns_restrict_protected
	UseDdnsRestrictProtected *bool `json:"use_ddns_restrict_protected,omitempty"`
	// Use flag for: ddns_restrict_static
	UseDdnsRestrictStatic *bool `json:"use_ddns_restrict_static,omitempty"`
	// Use flag for: dns64_enabled , dns64_groups
	UseDns64 *bool `json:"use_dns64,omitempty"`
	// Use flag for: dnssec_enabled , dnssec_expired_signatures_enabled, dnssec_validation_enabled, dnssec_trusted_keys
	UseDnssec *bool `json:"use_dnssec,omitempty"`
	// Use flag for: edns_udp_size
	UseEdnsUdpSize *bool `json:"use_edns_udp_size,omitempty"`
	// Use flag for: filter_aaaa , filter_aaaa_list
	UseFilterAaaa *bool `json:"use_filter_aaaa,omitempty"`
	// Use flag for: fixed_rrset_order_fqdns , enable_fixed_rrset_order_fqdns
	UseFixedRrsetOrderFqdns *bool `json:"use_fixed_rrset_order_fqdns,omitempty"`
	// Use flag for: forwarders , forward_only
	UseForwarders *bool `json:"use_forwarders,omitempty"`
	// Use flag for: max_cache_ttl
	UseMaxCacheTtl *bool `json:"use_max_cache_ttl,omitempty"`
	// Use flag for: max_ncache_ttl
	UseMaxNcacheTtl *bool `json:"use_max_ncache_ttl,omitempty"`
	// Use flag for: max_udp_size
	UseMaxUdpSize *bool `json:"use_max_udp_size,omitempty"`
	// Use flag for: nxdomain_redirect , nxdomain_redirect_addresses, nxdomain_redirect_addresses_v6, nxdomain_redirect_ttl, nxdomain_log_query, nxdomain_rulesets
	UseNxdomainRedirect *bool `json:"use_nxdomain_redirect,omitempty"`
	// Use flag for: recursion
	UseRecursion *bool `json:"use_recursion,omitempty"`
	// Use flag for: response_rate_limiting
	UseResponseRateLimiting *bool `json:"use_response_rate_limiting,omitempty"`
	// Use flag for: custom_root_name_servers , root_name_server_type
	UseRootNameServer *bool `json:"use_root_name_server,omitempty"`
	// Use flag for: rpz_drop_ip_rule_enabled , rpz_drop_ip_rule_min_prefix_length_ipv4, rpz_drop_ip_rule_min_prefix_length_ipv6
	UseRpzDropIpRule *bool `json:"use_rpz_drop_ip_rule,omitempty"`
	// Use flag for: rpz_qname_wait_recurse
	UseRpzQnameWaitRecurse *bool `json:"use_rpz_qname_wait_recurse,omitempty"`
	// Use flag for: scavenging_settings , last_queried_acl
	UseScavengingSettings *bool `json:"use_scavenging_settings,omitempty"`
	// Use flag for: sortlist
	UseSortlist *bool `json:"use_sortlist,omitempty"`
}

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView() *View {
	this := View{}
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *View) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *View) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *View) SetRef(v string) {
	o.Ref = &v
}

// GetBlacklistAction returns the BlacklistAction field value if set, zero value otherwise.
func (o *View) GetBlacklistAction() string {
	if o == nil || IsNil(o.BlacklistAction) {
		var ret string
		return ret
	}
	return *o.BlacklistAction
}

// GetBlacklistActionOk returns a tuple with the BlacklistAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetBlacklistActionOk() (*string, bool) {
	if o == nil || IsNil(o.BlacklistAction) {
		return nil, false
	}
	return o.BlacklistAction, true
}

// HasBlacklistAction returns a boolean if a field has been set.
func (o *View) HasBlacklistAction() bool {
	if o != nil && !IsNil(o.BlacklistAction) {
		return true
	}

	return false
}

// SetBlacklistAction gets a reference to the given string and assigns it to the BlacklistAction field.
func (o *View) SetBlacklistAction(v string) {
	o.BlacklistAction = &v
}

// GetBlacklistLogQuery returns the BlacklistLogQuery field value if set, zero value otherwise.
func (o *View) GetBlacklistLogQuery() bool {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		var ret bool
		return ret
	}
	return *o.BlacklistLogQuery
}

// GetBlacklistLogQueryOk returns a tuple with the BlacklistLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetBlacklistLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.BlacklistLogQuery) {
		return nil, false
	}
	return o.BlacklistLogQuery, true
}

// HasBlacklistLogQuery returns a boolean if a field has been set.
func (o *View) HasBlacklistLogQuery() bool {
	if o != nil && !IsNil(o.BlacklistLogQuery) {
		return true
	}

	return false
}

// SetBlacklistLogQuery gets a reference to the given bool and assigns it to the BlacklistLogQuery field.
func (o *View) SetBlacklistLogQuery(v bool) {
	o.BlacklistLogQuery = &v
}

// GetBlacklistRedirectAddresses returns the BlacklistRedirectAddresses field value if set, zero value otherwise.
func (o *View) GetBlacklistRedirectAddresses() []string {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.BlacklistRedirectAddresses
}

// GetBlacklistRedirectAddressesOk returns a tuple with the BlacklistRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetBlacklistRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRedirectAddresses) {
		return nil, false
	}
	return o.BlacklistRedirectAddresses, true
}

// HasBlacklistRedirectAddresses returns a boolean if a field has been set.
func (o *View) HasBlacklistRedirectAddresses() bool {
	if o != nil && !IsNil(o.BlacklistRedirectAddresses) {
		return true
	}

	return false
}

// SetBlacklistRedirectAddresses gets a reference to the given []string and assigns it to the BlacklistRedirectAddresses field.
func (o *View) SetBlacklistRedirectAddresses(v []string) {
	o.BlacklistRedirectAddresses = v
}

// GetBlacklistRedirectTtl returns the BlacklistRedirectTtl field value if set, zero value otherwise.
func (o *View) GetBlacklistRedirectTtl() int64 {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.BlacklistRedirectTtl
}

// GetBlacklistRedirectTtlOk returns a tuple with the BlacklistRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetBlacklistRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.BlacklistRedirectTtl) {
		return nil, false
	}
	return o.BlacklistRedirectTtl, true
}

// HasBlacklistRedirectTtl returns a boolean if a field has been set.
func (o *View) HasBlacklistRedirectTtl() bool {
	if o != nil && !IsNil(o.BlacklistRedirectTtl) {
		return true
	}

	return false
}

// SetBlacklistRedirectTtl gets a reference to the given int64 and assigns it to the BlacklistRedirectTtl field.
func (o *View) SetBlacklistRedirectTtl(v int64) {
	o.BlacklistRedirectTtl = &v
}

// GetBlacklistRulesets returns the BlacklistRulesets field value if set, zero value otherwise.
func (o *View) GetBlacklistRulesets() []string {
	if o == nil || IsNil(o.BlacklistRulesets) {
		var ret []string
		return ret
	}
	return o.BlacklistRulesets
}

// GetBlacklistRulesetsOk returns a tuple with the BlacklistRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetBlacklistRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistRulesets) {
		return nil, false
	}
	return o.BlacklistRulesets, true
}

// HasBlacklistRulesets returns a boolean if a field has been set.
func (o *View) HasBlacklistRulesets() bool {
	if o != nil && !IsNil(o.BlacklistRulesets) {
		return true
	}

	return false
}

// SetBlacklistRulesets gets a reference to the given []string and assigns it to the BlacklistRulesets field.
func (o *View) SetBlacklistRulesets(v []string) {
	o.BlacklistRulesets = v
}

// GetCloudInfo returns the CloudInfo field value if set, zero value otherwise.
func (o *View) GetCloudInfo() ViewCloudInfo {
	if o == nil || IsNil(o.CloudInfo) {
		var ret ViewCloudInfo
		return ret
	}
	return *o.CloudInfo
}

// GetCloudInfoOk returns a tuple with the CloudInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCloudInfoOk() (*ViewCloudInfo, bool) {
	if o == nil || IsNil(o.CloudInfo) {
		return nil, false
	}
	return o.CloudInfo, true
}

// HasCloudInfo returns a boolean if a field has been set.
func (o *View) HasCloudInfo() bool {
	if o != nil && !IsNil(o.CloudInfo) {
		return true
	}

	return false
}

// SetCloudInfo gets a reference to the given ViewCloudInfo and assigns it to the CloudInfo field.
func (o *View) SetCloudInfo(v ViewCloudInfo) {
	o.CloudInfo = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *View) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *View) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *View) SetComment(v string) {
	o.Comment = &v
}

// GetCustomRootNameServers returns the CustomRootNameServers field value if set, zero value otherwise.
func (o *View) GetCustomRootNameServers() []ViewCustomRootNameServers {
	if o == nil || IsNil(o.CustomRootNameServers) {
		var ret []ViewCustomRootNameServers
		return ret
	}
	return o.CustomRootNameServers
}

// GetCustomRootNameServersOk returns a tuple with the CustomRootNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCustomRootNameServersOk() ([]ViewCustomRootNameServers, bool) {
	if o == nil || IsNil(o.CustomRootNameServers) {
		return nil, false
	}
	return o.CustomRootNameServers, true
}

// HasCustomRootNameServers returns a boolean if a field has been set.
func (o *View) HasCustomRootNameServers() bool {
	if o != nil && !IsNil(o.CustomRootNameServers) {
		return true
	}

	return false
}

// SetCustomRootNameServers gets a reference to the given []ViewCustomRootNameServers and assigns it to the CustomRootNameServers field.
func (o *View) SetCustomRootNameServers(v []ViewCustomRootNameServers) {
	o.CustomRootNameServers = v
}

// GetDdnsForceCreationTimestampUpdate returns the DdnsForceCreationTimestampUpdate field value if set, zero value otherwise.
func (o *View) GetDdnsForceCreationTimestampUpdate() bool {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		var ret bool
		return ret
	}
	return *o.DdnsForceCreationTimestampUpdate
}

// GetDdnsForceCreationTimestampUpdateOk returns a tuple with the DdnsForceCreationTimestampUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsForceCreationTimestampUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsForceCreationTimestampUpdate) {
		return nil, false
	}
	return o.DdnsForceCreationTimestampUpdate, true
}

// HasDdnsForceCreationTimestampUpdate returns a boolean if a field has been set.
func (o *View) HasDdnsForceCreationTimestampUpdate() bool {
	if o != nil && !IsNil(o.DdnsForceCreationTimestampUpdate) {
		return true
	}

	return false
}

// SetDdnsForceCreationTimestampUpdate gets a reference to the given bool and assigns it to the DdnsForceCreationTimestampUpdate field.
func (o *View) SetDdnsForceCreationTimestampUpdate(v bool) {
	o.DdnsForceCreationTimestampUpdate = &v
}

// GetDdnsPrincipalGroup returns the DdnsPrincipalGroup field value if set, zero value otherwise.
func (o *View) GetDdnsPrincipalGroup() string {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		var ret string
		return ret
	}
	return *o.DdnsPrincipalGroup
}

// GetDdnsPrincipalGroupOk returns a tuple with the DdnsPrincipalGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsPrincipalGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsPrincipalGroup) {
		return nil, false
	}
	return o.DdnsPrincipalGroup, true
}

// HasDdnsPrincipalGroup returns a boolean if a field has been set.
func (o *View) HasDdnsPrincipalGroup() bool {
	if o != nil && !IsNil(o.DdnsPrincipalGroup) {
		return true
	}

	return false
}

// SetDdnsPrincipalGroup gets a reference to the given string and assigns it to the DdnsPrincipalGroup field.
func (o *View) SetDdnsPrincipalGroup(v string) {
	o.DdnsPrincipalGroup = &v
}

// GetDdnsPrincipalTracking returns the DdnsPrincipalTracking field value if set, zero value otherwise.
func (o *View) GetDdnsPrincipalTracking() bool {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		var ret bool
		return ret
	}
	return *o.DdnsPrincipalTracking
}

// GetDdnsPrincipalTrackingOk returns a tuple with the DdnsPrincipalTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsPrincipalTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsPrincipalTracking) {
		return nil, false
	}
	return o.DdnsPrincipalTracking, true
}

// HasDdnsPrincipalTracking returns a boolean if a field has been set.
func (o *View) HasDdnsPrincipalTracking() bool {
	if o != nil && !IsNil(o.DdnsPrincipalTracking) {
		return true
	}

	return false
}

// SetDdnsPrincipalTracking gets a reference to the given bool and assigns it to the DdnsPrincipalTracking field.
func (o *View) SetDdnsPrincipalTracking(v bool) {
	o.DdnsPrincipalTracking = &v
}

// GetDdnsRestrictPatterns returns the DdnsRestrictPatterns field value if set, zero value otherwise.
func (o *View) GetDdnsRestrictPatterns() bool {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictPatterns
}

// GetDdnsRestrictPatternsOk returns a tuple with the DdnsRestrictPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsRestrictPatternsOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatterns) {
		return nil, false
	}
	return o.DdnsRestrictPatterns, true
}

// HasDdnsRestrictPatterns returns a boolean if a field has been set.
func (o *View) HasDdnsRestrictPatterns() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatterns) {
		return true
	}

	return false
}

// SetDdnsRestrictPatterns gets a reference to the given bool and assigns it to the DdnsRestrictPatterns field.
func (o *View) SetDdnsRestrictPatterns(v bool) {
	o.DdnsRestrictPatterns = &v
}

// GetDdnsRestrictPatternsList returns the DdnsRestrictPatternsList field value if set, zero value otherwise.
func (o *View) GetDdnsRestrictPatternsList() []string {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		var ret []string
		return ret
	}
	return o.DdnsRestrictPatternsList
}

// GetDdnsRestrictPatternsListOk returns a tuple with the DdnsRestrictPatternsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsRestrictPatternsListOk() ([]string, bool) {
	if o == nil || IsNil(o.DdnsRestrictPatternsList) {
		return nil, false
	}
	return o.DdnsRestrictPatternsList, true
}

// HasDdnsRestrictPatternsList returns a boolean if a field has been set.
func (o *View) HasDdnsRestrictPatternsList() bool {
	if o != nil && !IsNil(o.DdnsRestrictPatternsList) {
		return true
	}

	return false
}

// SetDdnsRestrictPatternsList gets a reference to the given []string and assigns it to the DdnsRestrictPatternsList field.
func (o *View) SetDdnsRestrictPatternsList(v []string) {
	o.DdnsRestrictPatternsList = v
}

// GetDdnsRestrictProtected returns the DdnsRestrictProtected field value if set, zero value otherwise.
func (o *View) GetDdnsRestrictProtected() bool {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictProtected
}

// GetDdnsRestrictProtectedOk returns a tuple with the DdnsRestrictProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsRestrictProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictProtected) {
		return nil, false
	}
	return o.DdnsRestrictProtected, true
}

// HasDdnsRestrictProtected returns a boolean if a field has been set.
func (o *View) HasDdnsRestrictProtected() bool {
	if o != nil && !IsNil(o.DdnsRestrictProtected) {
		return true
	}

	return false
}

// SetDdnsRestrictProtected gets a reference to the given bool and assigns it to the DdnsRestrictProtected field.
func (o *View) SetDdnsRestrictProtected(v bool) {
	o.DdnsRestrictProtected = &v
}

// GetDdnsRestrictSecure returns the DdnsRestrictSecure field value if set, zero value otherwise.
func (o *View) GetDdnsRestrictSecure() bool {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictSecure
}

// GetDdnsRestrictSecureOk returns a tuple with the DdnsRestrictSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsRestrictSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictSecure) {
		return nil, false
	}
	return o.DdnsRestrictSecure, true
}

// HasDdnsRestrictSecure returns a boolean if a field has been set.
func (o *View) HasDdnsRestrictSecure() bool {
	if o != nil && !IsNil(o.DdnsRestrictSecure) {
		return true
	}

	return false
}

// SetDdnsRestrictSecure gets a reference to the given bool and assigns it to the DdnsRestrictSecure field.
func (o *View) SetDdnsRestrictSecure(v bool) {
	o.DdnsRestrictSecure = &v
}

// GetDdnsRestrictStatic returns the DdnsRestrictStatic field value if set, zero value otherwise.
func (o *View) GetDdnsRestrictStatic() bool {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		var ret bool
		return ret
	}
	return *o.DdnsRestrictStatic
}

// GetDdnsRestrictStaticOk returns a tuple with the DdnsRestrictStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDdnsRestrictStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsRestrictStatic) {
		return nil, false
	}
	return o.DdnsRestrictStatic, true
}

// HasDdnsRestrictStatic returns a boolean if a field has been set.
func (o *View) HasDdnsRestrictStatic() bool {
	if o != nil && !IsNil(o.DdnsRestrictStatic) {
		return true
	}

	return false
}

// SetDdnsRestrictStatic gets a reference to the given bool and assigns it to the DdnsRestrictStatic field.
func (o *View) SetDdnsRestrictStatic(v bool) {
	o.DdnsRestrictStatic = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *View) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *View) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *View) SetDisable(v bool) {
	o.Disable = &v
}

// GetDns64Enabled returns the Dns64Enabled field value if set, zero value otherwise.
func (o *View) GetDns64Enabled() bool {
	if o == nil || IsNil(o.Dns64Enabled) {
		var ret bool
		return ret
	}
	return *o.Dns64Enabled
}

// GetDns64EnabledOk returns a tuple with the Dns64Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDns64EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Dns64Enabled) {
		return nil, false
	}
	return o.Dns64Enabled, true
}

// HasDns64Enabled returns a boolean if a field has been set.
func (o *View) HasDns64Enabled() bool {
	if o != nil && !IsNil(o.Dns64Enabled) {
		return true
	}

	return false
}

// SetDns64Enabled gets a reference to the given bool and assigns it to the Dns64Enabled field.
func (o *View) SetDns64Enabled(v bool) {
	o.Dns64Enabled = &v
}

// GetDns64Groups returns the Dns64Groups field value if set, zero value otherwise.
func (o *View) GetDns64Groups() []string {
	if o == nil || IsNil(o.Dns64Groups) {
		var ret []string
		return ret
	}
	return o.Dns64Groups
}

// GetDns64GroupsOk returns a tuple with the Dns64Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDns64GroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dns64Groups) {
		return nil, false
	}
	return o.Dns64Groups, true
}

// HasDns64Groups returns a boolean if a field has been set.
func (o *View) HasDns64Groups() bool {
	if o != nil && !IsNil(o.Dns64Groups) {
		return true
	}

	return false
}

// SetDns64Groups gets a reference to the given []string and assigns it to the Dns64Groups field.
func (o *View) SetDns64Groups(v []string) {
	o.Dns64Groups = v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *View) GetDnssecEnabled() bool {
	if o == nil || IsNil(o.DnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnabled) {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *View) HasDnssecEnabled() bool {
	if o != nil && !IsNil(o.DnssecEnabled) {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *View) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetDnssecExpiredSignaturesEnabled returns the DnssecExpiredSignaturesEnabled field value if set, zero value otherwise.
func (o *View) GetDnssecExpiredSignaturesEnabled() bool {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecExpiredSignaturesEnabled
}

// GetDnssecExpiredSignaturesEnabledOk returns a tuple with the DnssecExpiredSignaturesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecExpiredSignaturesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecExpiredSignaturesEnabled) {
		return nil, false
	}
	return o.DnssecExpiredSignaturesEnabled, true
}

// HasDnssecExpiredSignaturesEnabled returns a boolean if a field has been set.
func (o *View) HasDnssecExpiredSignaturesEnabled() bool {
	if o != nil && !IsNil(o.DnssecExpiredSignaturesEnabled) {
		return true
	}

	return false
}

// SetDnssecExpiredSignaturesEnabled gets a reference to the given bool and assigns it to the DnssecExpiredSignaturesEnabled field.
func (o *View) SetDnssecExpiredSignaturesEnabled(v bool) {
	o.DnssecExpiredSignaturesEnabled = &v
}

// GetDnssecNegativeTrustAnchors returns the DnssecNegativeTrustAnchors field value if set, zero value otherwise.
func (o *View) GetDnssecNegativeTrustAnchors() []string {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		var ret []string
		return ret
	}
	return o.DnssecNegativeTrustAnchors
}

// GetDnssecNegativeTrustAnchorsOk returns a tuple with the DnssecNegativeTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecNegativeTrustAnchorsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnssecNegativeTrustAnchors) {
		return nil, false
	}
	return o.DnssecNegativeTrustAnchors, true
}

// HasDnssecNegativeTrustAnchors returns a boolean if a field has been set.
func (o *View) HasDnssecNegativeTrustAnchors() bool {
	if o != nil && !IsNil(o.DnssecNegativeTrustAnchors) {
		return true
	}

	return false
}

// SetDnssecNegativeTrustAnchors gets a reference to the given []string and assigns it to the DnssecNegativeTrustAnchors field.
func (o *View) SetDnssecNegativeTrustAnchors(v []string) {
	o.DnssecNegativeTrustAnchors = v
}

// GetDnssecTrustedKeys returns the DnssecTrustedKeys field value if set, zero value otherwise.
func (o *View) GetDnssecTrustedKeys() []ViewDnssecTrustedKeys {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		var ret []ViewDnssecTrustedKeys
		return ret
	}
	return o.DnssecTrustedKeys
}

// GetDnssecTrustedKeysOk returns a tuple with the DnssecTrustedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecTrustedKeysOk() ([]ViewDnssecTrustedKeys, bool) {
	if o == nil || IsNil(o.DnssecTrustedKeys) {
		return nil, false
	}
	return o.DnssecTrustedKeys, true
}

// HasDnssecTrustedKeys returns a boolean if a field has been set.
func (o *View) HasDnssecTrustedKeys() bool {
	if o != nil && !IsNil(o.DnssecTrustedKeys) {
		return true
	}

	return false
}

// SetDnssecTrustedKeys gets a reference to the given []ViewDnssecTrustedKeys and assigns it to the DnssecTrustedKeys field.
func (o *View) SetDnssecTrustedKeys(v []ViewDnssecTrustedKeys) {
	o.DnssecTrustedKeys = v
}

// GetDnssecValidationEnabled returns the DnssecValidationEnabled field value if set, zero value otherwise.
func (o *View) GetDnssecValidationEnabled() bool {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecValidationEnabled
}

// GetDnssecValidationEnabledOk returns a tuple with the DnssecValidationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecValidationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecValidationEnabled) {
		return nil, false
	}
	return o.DnssecValidationEnabled, true
}

// HasDnssecValidationEnabled returns a boolean if a field has been set.
func (o *View) HasDnssecValidationEnabled() bool {
	if o != nil && !IsNil(o.DnssecValidationEnabled) {
		return true
	}

	return false
}

// SetDnssecValidationEnabled gets a reference to the given bool and assigns it to the DnssecValidationEnabled field.
func (o *View) SetDnssecValidationEnabled(v bool) {
	o.DnssecValidationEnabled = &v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *View) GetEdnsUdpSize() int64 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret int64
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEdnsUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *View) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given int64 and assigns it to the EdnsUdpSize field.
func (o *View) SetEdnsUdpSize(v int64) {
	o.EdnsUdpSize = &v
}

// GetEnableBlacklist returns the EnableBlacklist field value if set, zero value otherwise.
func (o *View) GetEnableBlacklist() bool {
	if o == nil || IsNil(o.EnableBlacklist) {
		var ret bool
		return ret
	}
	return *o.EnableBlacklist
}

// GetEnableBlacklistOk returns a tuple with the EnableBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEnableBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBlacklist) {
		return nil, false
	}
	return o.EnableBlacklist, true
}

// HasEnableBlacklist returns a boolean if a field has been set.
func (o *View) HasEnableBlacklist() bool {
	if o != nil && !IsNil(o.EnableBlacklist) {
		return true
	}

	return false
}

// SetEnableBlacklist gets a reference to the given bool and assigns it to the EnableBlacklist field.
func (o *View) SetEnableBlacklist(v bool) {
	o.EnableBlacklist = &v
}

// GetEnableFixedRrsetOrderFqdns returns the EnableFixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *View) GetEnableFixedRrsetOrderFqdns() bool {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		var ret bool
		return ret
	}
	return *o.EnableFixedRrsetOrderFqdns
}

// GetEnableFixedRrsetOrderFqdnsOk returns a tuple with the EnableFixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEnableFixedRrsetOrderFqdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.EnableFixedRrsetOrderFqdns, true
}

// HasEnableFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *View) HasEnableFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.EnableFixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetEnableFixedRrsetOrderFqdns gets a reference to the given bool and assigns it to the EnableFixedRrsetOrderFqdns field.
func (o *View) SetEnableFixedRrsetOrderFqdns(v bool) {
	o.EnableFixedRrsetOrderFqdns = &v
}

// GetEnableMatchRecursiveOnly returns the EnableMatchRecursiveOnly field value if set, zero value otherwise.
func (o *View) GetEnableMatchRecursiveOnly() bool {
	if o == nil || IsNil(o.EnableMatchRecursiveOnly) {
		var ret bool
		return ret
	}
	return *o.EnableMatchRecursiveOnly
}

// GetEnableMatchRecursiveOnlyOk returns a tuple with the EnableMatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEnableMatchRecursiveOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMatchRecursiveOnly) {
		return nil, false
	}
	return o.EnableMatchRecursiveOnly, true
}

// HasEnableMatchRecursiveOnly returns a boolean if a field has been set.
func (o *View) HasEnableMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.EnableMatchRecursiveOnly) {
		return true
	}

	return false
}

// SetEnableMatchRecursiveOnly gets a reference to the given bool and assigns it to the EnableMatchRecursiveOnly field.
func (o *View) SetEnableMatchRecursiveOnly(v bool) {
	o.EnableMatchRecursiveOnly = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *View) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *View) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *View) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetFilterAaaa returns the FilterAaaa field value if set, zero value otherwise.
func (o *View) GetFilterAaaa() string {
	if o == nil || IsNil(o.FilterAaaa) {
		var ret string
		return ret
	}
	return *o.FilterAaaa
}

// GetFilterAaaaOk returns a tuple with the FilterAaaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFilterAaaaOk() (*string, bool) {
	if o == nil || IsNil(o.FilterAaaa) {
		return nil, false
	}
	return o.FilterAaaa, true
}

// HasFilterAaaa returns a boolean if a field has been set.
func (o *View) HasFilterAaaa() bool {
	if o != nil && !IsNil(o.FilterAaaa) {
		return true
	}

	return false
}

// SetFilterAaaa gets a reference to the given string and assigns it to the FilterAaaa field.
func (o *View) SetFilterAaaa(v string) {
	o.FilterAaaa = &v
}

// GetFilterAaaaList returns the FilterAaaaList field value if set, zero value otherwise.
func (o *View) GetFilterAaaaList() []ViewFilterAaaaList {
	if o == nil || IsNil(o.FilterAaaaList) {
		var ret []ViewFilterAaaaList
		return ret
	}
	return o.FilterAaaaList
}

// GetFilterAaaaListOk returns a tuple with the FilterAaaaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFilterAaaaListOk() ([]ViewFilterAaaaList, bool) {
	if o == nil || IsNil(o.FilterAaaaList) {
		return nil, false
	}
	return o.FilterAaaaList, true
}

// HasFilterAaaaList returns a boolean if a field has been set.
func (o *View) HasFilterAaaaList() bool {
	if o != nil && !IsNil(o.FilterAaaaList) {
		return true
	}

	return false
}

// SetFilterAaaaList gets a reference to the given []ViewFilterAaaaList and assigns it to the FilterAaaaList field.
func (o *View) SetFilterAaaaList(v []ViewFilterAaaaList) {
	o.FilterAaaaList = v
}

// GetFixedRrsetOrderFqdns returns the FixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *View) GetFixedRrsetOrderFqdns() []ViewFixedRrsetOrderFqdns {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		var ret []ViewFixedRrsetOrderFqdns
		return ret
	}
	return o.FixedRrsetOrderFqdns
}

// GetFixedRrsetOrderFqdnsOk returns a tuple with the FixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFixedRrsetOrderFqdnsOk() ([]ViewFixedRrsetOrderFqdns, bool) {
	if o == nil || IsNil(o.FixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.FixedRrsetOrderFqdns, true
}

// HasFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *View) HasFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.FixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetFixedRrsetOrderFqdns gets a reference to the given []ViewFixedRrsetOrderFqdns and assigns it to the FixedRrsetOrderFqdns field.
func (o *View) SetFixedRrsetOrderFqdns(v []ViewFixedRrsetOrderFqdns) {
	o.FixedRrsetOrderFqdns = v
}

// GetForwardOnly returns the ForwardOnly field value if set, zero value otherwise.
func (o *View) GetForwardOnly() bool {
	if o == nil || IsNil(o.ForwardOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardOnly
}

// GetForwardOnlyOk returns a tuple with the ForwardOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetForwardOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardOnly) {
		return nil, false
	}
	return o.ForwardOnly, true
}

// HasForwardOnly returns a boolean if a field has been set.
func (o *View) HasForwardOnly() bool {
	if o != nil && !IsNil(o.ForwardOnly) {
		return true
	}

	return false
}

// SetForwardOnly gets a reference to the given bool and assigns it to the ForwardOnly field.
func (o *View) SetForwardOnly(v bool) {
	o.ForwardOnly = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *View) GetForwarders() []string {
	if o == nil || IsNil(o.Forwarders) {
		var ret []string
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetForwardersOk() ([]string, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *View) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []string and assigns it to the Forwarders field.
func (o *View) SetForwarders(v []string) {
	o.Forwarders = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *View) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *View) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *View) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetLastQueriedAcl returns the LastQueriedAcl field value if set, zero value otherwise.
func (o *View) GetLastQueriedAcl() []ViewLastQueriedAcl {
	if o == nil || IsNil(o.LastQueriedAcl) {
		var ret []ViewLastQueriedAcl
		return ret
	}
	return o.LastQueriedAcl
}

// GetLastQueriedAclOk returns a tuple with the LastQueriedAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetLastQueriedAclOk() ([]ViewLastQueriedAcl, bool) {
	if o == nil || IsNil(o.LastQueriedAcl) {
		return nil, false
	}
	return o.LastQueriedAcl, true
}

// HasLastQueriedAcl returns a boolean if a field has been set.
func (o *View) HasLastQueriedAcl() bool {
	if o != nil && !IsNil(o.LastQueriedAcl) {
		return true
	}

	return false
}

// SetLastQueriedAcl gets a reference to the given []ViewLastQueriedAcl and assigns it to the LastQueriedAcl field.
func (o *View) SetLastQueriedAcl(v []ViewLastQueriedAcl) {
	o.LastQueriedAcl = v
}

// GetMatchClients returns the MatchClients field value if set, zero value otherwise.
func (o *View) GetMatchClients() []ViewMatchClients {
	if o == nil || IsNil(o.MatchClients) {
		var ret []ViewMatchClients
		return ret
	}
	return o.MatchClients
}

// GetMatchClientsOk returns a tuple with the MatchClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMatchClientsOk() ([]ViewMatchClients, bool) {
	if o == nil || IsNil(o.MatchClients) {
		return nil, false
	}
	return o.MatchClients, true
}

// HasMatchClients returns a boolean if a field has been set.
func (o *View) HasMatchClients() bool {
	if o != nil && !IsNil(o.MatchClients) {
		return true
	}

	return false
}

// SetMatchClients gets a reference to the given []ViewMatchClients and assigns it to the MatchClients field.
func (o *View) SetMatchClients(v []ViewMatchClients) {
	o.MatchClients = v
}

// GetMatchDestinations returns the MatchDestinations field value if set, zero value otherwise.
func (o *View) GetMatchDestinations() []ViewMatchDestinations {
	if o == nil || IsNil(o.MatchDestinations) {
		var ret []ViewMatchDestinations
		return ret
	}
	return o.MatchDestinations
}

// GetMatchDestinationsOk returns a tuple with the MatchDestinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMatchDestinationsOk() ([]ViewMatchDestinations, bool) {
	if o == nil || IsNil(o.MatchDestinations) {
		return nil, false
	}
	return o.MatchDestinations, true
}

// HasMatchDestinations returns a boolean if a field has been set.
func (o *View) HasMatchDestinations() bool {
	if o != nil && !IsNil(o.MatchDestinations) {
		return true
	}

	return false
}

// SetMatchDestinations gets a reference to the given []ViewMatchDestinations and assigns it to the MatchDestinations field.
func (o *View) SetMatchDestinations(v []ViewMatchDestinations) {
	o.MatchDestinations = v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *View) GetMaxCacheTtl() int64 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxCacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *View) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given int64 and assigns it to the MaxCacheTtl field.
func (o *View) SetMaxCacheTtl(v int64) {
	o.MaxCacheTtl = &v
}

// GetMaxNcacheTtl returns the MaxNcacheTtl field value if set, zero value otherwise.
func (o *View) GetMaxNcacheTtl() int64 {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxNcacheTtl
}

// GetMaxNcacheTtlOk returns a tuple with the MaxNcacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxNcacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNcacheTtl) {
		return nil, false
	}
	return o.MaxNcacheTtl, true
}

// HasMaxNcacheTtl returns a boolean if a field has been set.
func (o *View) HasMaxNcacheTtl() bool {
	if o != nil && !IsNil(o.MaxNcacheTtl) {
		return true
	}

	return false
}

// SetMaxNcacheTtl gets a reference to the given int64 and assigns it to the MaxNcacheTtl field.
func (o *View) SetMaxNcacheTtl(v int64) {
	o.MaxNcacheTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *View) GetMaxUdpSize() int64 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret int64
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *View) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given int64 and assigns it to the MaxUdpSize field.
func (o *View) SetMaxUdpSize(v int64) {
	o.MaxUdpSize = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *View) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *View) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *View) SetName(v string) {
	o.Name = &v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *View) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *View) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *View) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNotifyDelay returns the NotifyDelay field value if set, zero value otherwise.
func (o *View) GetNotifyDelay() int64 {
	if o == nil || IsNil(o.NotifyDelay) {
		var ret int64
		return ret
	}
	return *o.NotifyDelay
}

// GetNotifyDelayOk returns a tuple with the NotifyDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNotifyDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.NotifyDelay) {
		return nil, false
	}
	return o.NotifyDelay, true
}

// HasNotifyDelay returns a boolean if a field has been set.
func (o *View) HasNotifyDelay() bool {
	if o != nil && !IsNil(o.NotifyDelay) {
		return true
	}

	return false
}

// SetNotifyDelay gets a reference to the given int64 and assigns it to the NotifyDelay field.
func (o *View) SetNotifyDelay(v int64) {
	o.NotifyDelay = &v
}

// GetNxdomainLogQuery returns the NxdomainLogQuery field value if set, zero value otherwise.
func (o *View) GetNxdomainLogQuery() bool {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		var ret bool
		return ret
	}
	return *o.NxdomainLogQuery
}

// GetNxdomainLogQueryOk returns a tuple with the NxdomainLogQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainLogQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainLogQuery) {
		return nil, false
	}
	return o.NxdomainLogQuery, true
}

// HasNxdomainLogQuery returns a boolean if a field has been set.
func (o *View) HasNxdomainLogQuery() bool {
	if o != nil && !IsNil(o.NxdomainLogQuery) {
		return true
	}

	return false
}

// SetNxdomainLogQuery gets a reference to the given bool and assigns it to the NxdomainLogQuery field.
func (o *View) SetNxdomainLogQuery(v bool) {
	o.NxdomainLogQuery = &v
}

// GetNxdomainRedirect returns the NxdomainRedirect field value if set, zero value otherwise.
func (o *View) GetNxdomainRedirect() bool {
	if o == nil || IsNil(o.NxdomainRedirect) {
		var ret bool
		return ret
	}
	return *o.NxdomainRedirect
}

// GetNxdomainRedirectOk returns a tuple with the NxdomainRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.NxdomainRedirect) {
		return nil, false
	}
	return o.NxdomainRedirect, true
}

// HasNxdomainRedirect returns a boolean if a field has been set.
func (o *View) HasNxdomainRedirect() bool {
	if o != nil && !IsNil(o.NxdomainRedirect) {
		return true
	}

	return false
}

// SetNxdomainRedirect gets a reference to the given bool and assigns it to the NxdomainRedirect field.
func (o *View) SetNxdomainRedirect(v bool) {
	o.NxdomainRedirect = &v
}

// GetNxdomainRedirectAddresses returns the NxdomainRedirectAddresses field value if set, zero value otherwise.
func (o *View) GetNxdomainRedirectAddresses() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddresses
}

// GetNxdomainRedirectAddressesOk returns a tuple with the NxdomainRedirectAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainRedirectAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddresses) {
		return nil, false
	}
	return o.NxdomainRedirectAddresses, true
}

// HasNxdomainRedirectAddresses returns a boolean if a field has been set.
func (o *View) HasNxdomainRedirectAddresses() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddresses) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddresses gets a reference to the given []string and assigns it to the NxdomainRedirectAddresses field.
func (o *View) SetNxdomainRedirectAddresses(v []string) {
	o.NxdomainRedirectAddresses = v
}

// GetNxdomainRedirectAddressesV6 returns the NxdomainRedirectAddressesV6 field value if set, zero value otherwise.
func (o *View) GetNxdomainRedirectAddressesV6() []string {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		var ret []string
		return ret
	}
	return o.NxdomainRedirectAddressesV6
}

// GetNxdomainRedirectAddressesV6Ok returns a tuple with the NxdomainRedirectAddressesV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainRedirectAddressesV6Ok() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRedirectAddressesV6) {
		return nil, false
	}
	return o.NxdomainRedirectAddressesV6, true
}

// HasNxdomainRedirectAddressesV6 returns a boolean if a field has been set.
func (o *View) HasNxdomainRedirectAddressesV6() bool {
	if o != nil && !IsNil(o.NxdomainRedirectAddressesV6) {
		return true
	}

	return false
}

// SetNxdomainRedirectAddressesV6 gets a reference to the given []string and assigns it to the NxdomainRedirectAddressesV6 field.
func (o *View) SetNxdomainRedirectAddressesV6(v []string) {
	o.NxdomainRedirectAddressesV6 = v
}

// GetNxdomainRedirectTtl returns the NxdomainRedirectTtl field value if set, zero value otherwise.
func (o *View) GetNxdomainRedirectTtl() int64 {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		var ret int64
		return ret
	}
	return *o.NxdomainRedirectTtl
}

// GetNxdomainRedirectTtlOk returns a tuple with the NxdomainRedirectTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainRedirectTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.NxdomainRedirectTtl) {
		return nil, false
	}
	return o.NxdomainRedirectTtl, true
}

// HasNxdomainRedirectTtl returns a boolean if a field has been set.
func (o *View) HasNxdomainRedirectTtl() bool {
	if o != nil && !IsNil(o.NxdomainRedirectTtl) {
		return true
	}

	return false
}

// SetNxdomainRedirectTtl gets a reference to the given int64 and assigns it to the NxdomainRedirectTtl field.
func (o *View) SetNxdomainRedirectTtl(v int64) {
	o.NxdomainRedirectTtl = &v
}

// GetNxdomainRulesets returns the NxdomainRulesets field value if set, zero value otherwise.
func (o *View) GetNxdomainRulesets() []string {
	if o == nil || IsNil(o.NxdomainRulesets) {
		var ret []string
		return ret
	}
	return o.NxdomainRulesets
}

// GetNxdomainRulesetsOk returns a tuple with the NxdomainRulesets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNxdomainRulesetsOk() ([]string, bool) {
	if o == nil || IsNil(o.NxdomainRulesets) {
		return nil, false
	}
	return o.NxdomainRulesets, true
}

// HasNxdomainRulesets returns a boolean if a field has been set.
func (o *View) HasNxdomainRulesets() bool {
	if o != nil && !IsNil(o.NxdomainRulesets) {
		return true
	}

	return false
}

// SetNxdomainRulesets gets a reference to the given []string and assigns it to the NxdomainRulesets field.
func (o *View) SetNxdomainRulesets(v []string) {
	o.NxdomainRulesets = v
}

// GetRecursion returns the Recursion field value if set, zero value otherwise.
func (o *View) GetRecursion() bool {
	if o == nil || IsNil(o.Recursion) {
		var ret bool
		return ret
	}
	return *o.Recursion
}

// GetRecursionOk returns a tuple with the Recursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRecursionOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursion) {
		return nil, false
	}
	return o.Recursion, true
}

// HasRecursion returns a boolean if a field has been set.
func (o *View) HasRecursion() bool {
	if o != nil && !IsNil(o.Recursion) {
		return true
	}

	return false
}

// SetRecursion gets a reference to the given bool and assigns it to the Recursion field.
func (o *View) SetRecursion(v bool) {
	o.Recursion = &v
}

// GetResponseRateLimiting returns the ResponseRateLimiting field value if set, zero value otherwise.
func (o *View) GetResponseRateLimiting() ViewResponseRateLimiting {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		var ret ViewResponseRateLimiting
		return ret
	}
	return *o.ResponseRateLimiting
}

// GetResponseRateLimitingOk returns a tuple with the ResponseRateLimiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetResponseRateLimitingOk() (*ViewResponseRateLimiting, bool) {
	if o == nil || IsNil(o.ResponseRateLimiting) {
		return nil, false
	}
	return o.ResponseRateLimiting, true
}

// HasResponseRateLimiting returns a boolean if a field has been set.
func (o *View) HasResponseRateLimiting() bool {
	if o != nil && !IsNil(o.ResponseRateLimiting) {
		return true
	}

	return false
}

// SetResponseRateLimiting gets a reference to the given ViewResponseRateLimiting and assigns it to the ResponseRateLimiting field.
func (o *View) SetResponseRateLimiting(v ViewResponseRateLimiting) {
	o.ResponseRateLimiting = &v
}

// GetRootNameServerType returns the RootNameServerType field value if set, zero value otherwise.
func (o *View) GetRootNameServerType() string {
	if o == nil || IsNil(o.RootNameServerType) {
		var ret string
		return ret
	}
	return *o.RootNameServerType
}

// GetRootNameServerTypeOk returns a tuple with the RootNameServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRootNameServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootNameServerType) {
		return nil, false
	}
	return o.RootNameServerType, true
}

// HasRootNameServerType returns a boolean if a field has been set.
func (o *View) HasRootNameServerType() bool {
	if o != nil && !IsNil(o.RootNameServerType) {
		return true
	}

	return false
}

// SetRootNameServerType gets a reference to the given string and assigns it to the RootNameServerType field.
func (o *View) SetRootNameServerType(v string) {
	o.RootNameServerType = &v
}

// GetRpzDropIpRuleEnabled returns the RpzDropIpRuleEnabled field value if set, zero value otherwise.
func (o *View) GetRpzDropIpRuleEnabled() bool {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		var ret bool
		return ret
	}
	return *o.RpzDropIpRuleEnabled
}

// GetRpzDropIpRuleEnabledOk returns a tuple with the RpzDropIpRuleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRpzDropIpRuleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		return nil, false
	}
	return o.RpzDropIpRuleEnabled, true
}

// HasRpzDropIpRuleEnabled returns a boolean if a field has been set.
func (o *View) HasRpzDropIpRuleEnabled() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleEnabled) {
		return true
	}

	return false
}

// SetRpzDropIpRuleEnabled gets a reference to the given bool and assigns it to the RpzDropIpRuleEnabled field.
func (o *View) SetRpzDropIpRuleEnabled(v bool) {
	o.RpzDropIpRuleEnabled = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv4 returns the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, zero value otherwise.
func (o *View) GetRpzDropIpRuleMinPrefixLengthIpv4() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv4
}

// GetRpzDropIpRuleMinPrefixLengthIpv4Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRpzDropIpRuleMinPrefixLengthIpv4Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv4, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv4 returns a boolean if a field has been set.
func (o *View) HasRpzDropIpRuleMinPrefixLengthIpv4() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv4 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv4 field.
func (o *View) SetRpzDropIpRuleMinPrefixLengthIpv4(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv4 = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv6 returns the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, zero value otherwise.
func (o *View) GetRpzDropIpRuleMinPrefixLengthIpv6() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv6
}

// GetRpzDropIpRuleMinPrefixLengthIpv6Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRpzDropIpRuleMinPrefixLengthIpv6Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv6, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv6 returns a boolean if a field has been set.
func (o *View) HasRpzDropIpRuleMinPrefixLengthIpv6() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv6 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv6 field.
func (o *View) SetRpzDropIpRuleMinPrefixLengthIpv6(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv6 = &v
}

// GetRpzQnameWaitRecurse returns the RpzQnameWaitRecurse field value if set, zero value otherwise.
func (o *View) GetRpzQnameWaitRecurse() bool {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		var ret bool
		return ret
	}
	return *o.RpzQnameWaitRecurse
}

// GetRpzQnameWaitRecurseOk returns a tuple with the RpzQnameWaitRecurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRpzQnameWaitRecurseOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzQnameWaitRecurse) {
		return nil, false
	}
	return o.RpzQnameWaitRecurse, true
}

// HasRpzQnameWaitRecurse returns a boolean if a field has been set.
func (o *View) HasRpzQnameWaitRecurse() bool {
	if o != nil && !IsNil(o.RpzQnameWaitRecurse) {
		return true
	}

	return false
}

// SetRpzQnameWaitRecurse gets a reference to the given bool and assigns it to the RpzQnameWaitRecurse field.
func (o *View) SetRpzQnameWaitRecurse(v bool) {
	o.RpzQnameWaitRecurse = &v
}

// GetScavengingSettings returns the ScavengingSettings field value if set, zero value otherwise.
func (o *View) GetScavengingSettings() ViewScavengingSettings {
	if o == nil || IsNil(o.ScavengingSettings) {
		var ret ViewScavengingSettings
		return ret
	}
	return *o.ScavengingSettings
}

// GetScavengingSettingsOk returns a tuple with the ScavengingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetScavengingSettingsOk() (*ViewScavengingSettings, bool) {
	if o == nil || IsNil(o.ScavengingSettings) {
		return nil, false
	}
	return o.ScavengingSettings, true
}

// HasScavengingSettings returns a boolean if a field has been set.
func (o *View) HasScavengingSettings() bool {
	if o != nil && !IsNil(o.ScavengingSettings) {
		return true
	}

	return false
}

// SetScavengingSettings gets a reference to the given ViewScavengingSettings and assigns it to the ScavengingSettings field.
func (o *View) SetScavengingSettings(v ViewScavengingSettings) {
	o.ScavengingSettings = &v
}

// GetSortlist returns the Sortlist field value if set, zero value otherwise.
func (o *View) GetSortlist() []ViewSortlist {
	if o == nil || IsNil(o.Sortlist) {
		var ret []ViewSortlist
		return ret
	}
	return o.Sortlist
}

// GetSortlistOk returns a tuple with the Sortlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSortlistOk() ([]ViewSortlist, bool) {
	if o == nil || IsNil(o.Sortlist) {
		return nil, false
	}
	return o.Sortlist, true
}

// HasSortlist returns a boolean if a field has been set.
func (o *View) HasSortlist() bool {
	if o != nil && !IsNil(o.Sortlist) {
		return true
	}

	return false
}

// SetSortlist gets a reference to the given []ViewSortlist and assigns it to the Sortlist field.
func (o *View) SetSortlist(v []ViewSortlist) {
	o.Sortlist = v
}

// GetUseBlacklist returns the UseBlacklist field value if set, zero value otherwise.
func (o *View) GetUseBlacklist() bool {
	if o == nil || IsNil(o.UseBlacklist) {
		var ret bool
		return ret
	}
	return *o.UseBlacklist
}

// GetUseBlacklistOk returns a tuple with the UseBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.UseBlacklist) {
		return nil, false
	}
	return o.UseBlacklist, true
}

// HasUseBlacklist returns a boolean if a field has been set.
func (o *View) HasUseBlacklist() bool {
	if o != nil && !IsNil(o.UseBlacklist) {
		return true
	}

	return false
}

// SetUseBlacklist gets a reference to the given bool and assigns it to the UseBlacklist field.
func (o *View) SetUseBlacklist(v bool) {
	o.UseBlacklist = &v
}

// GetUseDdnsForceCreationTimestampUpdate returns the UseDdnsForceCreationTimestampUpdate field value if set, zero value otherwise.
func (o *View) GetUseDdnsForceCreationTimestampUpdate() bool {
	if o == nil || IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		var ret bool
		return ret
	}
	return *o.UseDdnsForceCreationTimestampUpdate
}

// GetUseDdnsForceCreationTimestampUpdateOk returns a tuple with the UseDdnsForceCreationTimestampUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDdnsForceCreationTimestampUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		return nil, false
	}
	return o.UseDdnsForceCreationTimestampUpdate, true
}

// HasUseDdnsForceCreationTimestampUpdate returns a boolean if a field has been set.
func (o *View) HasUseDdnsForceCreationTimestampUpdate() bool {
	if o != nil && !IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		return true
	}

	return false
}

// SetUseDdnsForceCreationTimestampUpdate gets a reference to the given bool and assigns it to the UseDdnsForceCreationTimestampUpdate field.
func (o *View) SetUseDdnsForceCreationTimestampUpdate(v bool) {
	o.UseDdnsForceCreationTimestampUpdate = &v
}

// GetUseDdnsPatternsRestriction returns the UseDdnsPatternsRestriction field value if set, zero value otherwise.
func (o *View) GetUseDdnsPatternsRestriction() bool {
	if o == nil || IsNil(o.UseDdnsPatternsRestriction) {
		var ret bool
		return ret
	}
	return *o.UseDdnsPatternsRestriction
}

// GetUseDdnsPatternsRestrictionOk returns a tuple with the UseDdnsPatternsRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDdnsPatternsRestrictionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsPatternsRestriction) {
		return nil, false
	}
	return o.UseDdnsPatternsRestriction, true
}

// HasUseDdnsPatternsRestriction returns a boolean if a field has been set.
func (o *View) HasUseDdnsPatternsRestriction() bool {
	if o != nil && !IsNil(o.UseDdnsPatternsRestriction) {
		return true
	}

	return false
}

// SetUseDdnsPatternsRestriction gets a reference to the given bool and assigns it to the UseDdnsPatternsRestriction field.
func (o *View) SetUseDdnsPatternsRestriction(v bool) {
	o.UseDdnsPatternsRestriction = &v
}

// GetUseDdnsPrincipalSecurity returns the UseDdnsPrincipalSecurity field value if set, zero value otherwise.
func (o *View) GetUseDdnsPrincipalSecurity() bool {
	if o == nil || IsNil(o.UseDdnsPrincipalSecurity) {
		var ret bool
		return ret
	}
	return *o.UseDdnsPrincipalSecurity
}

// GetUseDdnsPrincipalSecurityOk returns a tuple with the UseDdnsPrincipalSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDdnsPrincipalSecurityOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsPrincipalSecurity) {
		return nil, false
	}
	return o.UseDdnsPrincipalSecurity, true
}

// HasUseDdnsPrincipalSecurity returns a boolean if a field has been set.
func (o *View) HasUseDdnsPrincipalSecurity() bool {
	if o != nil && !IsNil(o.UseDdnsPrincipalSecurity) {
		return true
	}

	return false
}

// SetUseDdnsPrincipalSecurity gets a reference to the given bool and assigns it to the UseDdnsPrincipalSecurity field.
func (o *View) SetUseDdnsPrincipalSecurity(v bool) {
	o.UseDdnsPrincipalSecurity = &v
}

// GetUseDdnsRestrictProtected returns the UseDdnsRestrictProtected field value if set, zero value otherwise.
func (o *View) GetUseDdnsRestrictProtected() bool {
	if o == nil || IsNil(o.UseDdnsRestrictProtected) {
		var ret bool
		return ret
	}
	return *o.UseDdnsRestrictProtected
}

// GetUseDdnsRestrictProtectedOk returns a tuple with the UseDdnsRestrictProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDdnsRestrictProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsRestrictProtected) {
		return nil, false
	}
	return o.UseDdnsRestrictProtected, true
}

// HasUseDdnsRestrictProtected returns a boolean if a field has been set.
func (o *View) HasUseDdnsRestrictProtected() bool {
	if o != nil && !IsNil(o.UseDdnsRestrictProtected) {
		return true
	}

	return false
}

// SetUseDdnsRestrictProtected gets a reference to the given bool and assigns it to the UseDdnsRestrictProtected field.
func (o *View) SetUseDdnsRestrictProtected(v bool) {
	o.UseDdnsRestrictProtected = &v
}

// GetUseDdnsRestrictStatic returns the UseDdnsRestrictStatic field value if set, zero value otherwise.
func (o *View) GetUseDdnsRestrictStatic() bool {
	if o == nil || IsNil(o.UseDdnsRestrictStatic) {
		var ret bool
		return ret
	}
	return *o.UseDdnsRestrictStatic
}

// GetUseDdnsRestrictStaticOk returns a tuple with the UseDdnsRestrictStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDdnsRestrictStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsRestrictStatic) {
		return nil, false
	}
	return o.UseDdnsRestrictStatic, true
}

// HasUseDdnsRestrictStatic returns a boolean if a field has been set.
func (o *View) HasUseDdnsRestrictStatic() bool {
	if o != nil && !IsNil(o.UseDdnsRestrictStatic) {
		return true
	}

	return false
}

// SetUseDdnsRestrictStatic gets a reference to the given bool and assigns it to the UseDdnsRestrictStatic field.
func (o *View) SetUseDdnsRestrictStatic(v bool) {
	o.UseDdnsRestrictStatic = &v
}

// GetUseDns64 returns the UseDns64 field value if set, zero value otherwise.
func (o *View) GetUseDns64() bool {
	if o == nil || IsNil(o.UseDns64) {
		var ret bool
		return ret
	}
	return *o.UseDns64
}

// GetUseDns64Ok returns a tuple with the UseDns64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDns64Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseDns64) {
		return nil, false
	}
	return o.UseDns64, true
}

// HasUseDns64 returns a boolean if a field has been set.
func (o *View) HasUseDns64() bool {
	if o != nil && !IsNil(o.UseDns64) {
		return true
	}

	return false
}

// SetUseDns64 gets a reference to the given bool and assigns it to the UseDns64 field.
func (o *View) SetUseDns64(v bool) {
	o.UseDns64 = &v
}

// GetUseDnssec returns the UseDnssec field value if set, zero value otherwise.
func (o *View) GetUseDnssec() bool {
	if o == nil || IsNil(o.UseDnssec) {
		var ret bool
		return ret
	}
	return *o.UseDnssec
}

// GetUseDnssecOk returns a tuple with the UseDnssec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseDnssecOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDnssec) {
		return nil, false
	}
	return o.UseDnssec, true
}

// HasUseDnssec returns a boolean if a field has been set.
func (o *View) HasUseDnssec() bool {
	if o != nil && !IsNil(o.UseDnssec) {
		return true
	}

	return false
}

// SetUseDnssec gets a reference to the given bool and assigns it to the UseDnssec field.
func (o *View) SetUseDnssec(v bool) {
	o.UseDnssec = &v
}

// GetUseEdnsUdpSize returns the UseEdnsUdpSize field value if set, zero value otherwise.
func (o *View) GetUseEdnsUdpSize() bool {
	if o == nil || IsNil(o.UseEdnsUdpSize) {
		var ret bool
		return ret
	}
	return *o.UseEdnsUdpSize
}

// GetUseEdnsUdpSizeOk returns a tuple with the UseEdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseEdnsUdpSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEdnsUdpSize) {
		return nil, false
	}
	return o.UseEdnsUdpSize, true
}

// HasUseEdnsUdpSize returns a boolean if a field has been set.
func (o *View) HasUseEdnsUdpSize() bool {
	if o != nil && !IsNil(o.UseEdnsUdpSize) {
		return true
	}

	return false
}

// SetUseEdnsUdpSize gets a reference to the given bool and assigns it to the UseEdnsUdpSize field.
func (o *View) SetUseEdnsUdpSize(v bool) {
	o.UseEdnsUdpSize = &v
}

// GetUseFilterAaaa returns the UseFilterAaaa field value if set, zero value otherwise.
func (o *View) GetUseFilterAaaa() bool {
	if o == nil || IsNil(o.UseFilterAaaa) {
		var ret bool
		return ret
	}
	return *o.UseFilterAaaa
}

// GetUseFilterAaaaOk returns a tuple with the UseFilterAaaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseFilterAaaaOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFilterAaaa) {
		return nil, false
	}
	return o.UseFilterAaaa, true
}

// HasUseFilterAaaa returns a boolean if a field has been set.
func (o *View) HasUseFilterAaaa() bool {
	if o != nil && !IsNil(o.UseFilterAaaa) {
		return true
	}

	return false
}

// SetUseFilterAaaa gets a reference to the given bool and assigns it to the UseFilterAaaa field.
func (o *View) SetUseFilterAaaa(v bool) {
	o.UseFilterAaaa = &v
}

// GetUseFixedRrsetOrderFqdns returns the UseFixedRrsetOrderFqdns field value if set, zero value otherwise.
func (o *View) GetUseFixedRrsetOrderFqdns() bool {
	if o == nil || IsNil(o.UseFixedRrsetOrderFqdns) {
		var ret bool
		return ret
	}
	return *o.UseFixedRrsetOrderFqdns
}

// GetUseFixedRrsetOrderFqdnsOk returns a tuple with the UseFixedRrsetOrderFqdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseFixedRrsetOrderFqdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFixedRrsetOrderFqdns) {
		return nil, false
	}
	return o.UseFixedRrsetOrderFqdns, true
}

// HasUseFixedRrsetOrderFqdns returns a boolean if a field has been set.
func (o *View) HasUseFixedRrsetOrderFqdns() bool {
	if o != nil && !IsNil(o.UseFixedRrsetOrderFqdns) {
		return true
	}

	return false
}

// SetUseFixedRrsetOrderFqdns gets a reference to the given bool and assigns it to the UseFixedRrsetOrderFqdns field.
func (o *View) SetUseFixedRrsetOrderFqdns(v bool) {
	o.UseFixedRrsetOrderFqdns = &v
}

// GetUseForwarders returns the UseForwarders field value if set, zero value otherwise.
func (o *View) GetUseForwarders() bool {
	if o == nil || IsNil(o.UseForwarders) {
		var ret bool
		return ret
	}
	return *o.UseForwarders
}

// GetUseForwardersOk returns a tuple with the UseForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseForwardersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwarders) {
		return nil, false
	}
	return o.UseForwarders, true
}

// HasUseForwarders returns a boolean if a field has been set.
func (o *View) HasUseForwarders() bool {
	if o != nil && !IsNil(o.UseForwarders) {
		return true
	}

	return false
}

// SetUseForwarders gets a reference to the given bool and assigns it to the UseForwarders field.
func (o *View) SetUseForwarders(v bool) {
	o.UseForwarders = &v
}

// GetUseMaxCacheTtl returns the UseMaxCacheTtl field value if set, zero value otherwise.
func (o *View) GetUseMaxCacheTtl() bool {
	if o == nil || IsNil(o.UseMaxCacheTtl) {
		var ret bool
		return ret
	}
	return *o.UseMaxCacheTtl
}

// GetUseMaxCacheTtlOk returns a tuple with the UseMaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseMaxCacheTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxCacheTtl) {
		return nil, false
	}
	return o.UseMaxCacheTtl, true
}

// HasUseMaxCacheTtl returns a boolean if a field has been set.
func (o *View) HasUseMaxCacheTtl() bool {
	if o != nil && !IsNil(o.UseMaxCacheTtl) {
		return true
	}

	return false
}

// SetUseMaxCacheTtl gets a reference to the given bool and assigns it to the UseMaxCacheTtl field.
func (o *View) SetUseMaxCacheTtl(v bool) {
	o.UseMaxCacheTtl = &v
}

// GetUseMaxNcacheTtl returns the UseMaxNcacheTtl field value if set, zero value otherwise.
func (o *View) GetUseMaxNcacheTtl() bool {
	if o == nil || IsNil(o.UseMaxNcacheTtl) {
		var ret bool
		return ret
	}
	return *o.UseMaxNcacheTtl
}

// GetUseMaxNcacheTtlOk returns a tuple with the UseMaxNcacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseMaxNcacheTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxNcacheTtl) {
		return nil, false
	}
	return o.UseMaxNcacheTtl, true
}

// HasUseMaxNcacheTtl returns a boolean if a field has been set.
func (o *View) HasUseMaxNcacheTtl() bool {
	if o != nil && !IsNil(o.UseMaxNcacheTtl) {
		return true
	}

	return false
}

// SetUseMaxNcacheTtl gets a reference to the given bool and assigns it to the UseMaxNcacheTtl field.
func (o *View) SetUseMaxNcacheTtl(v bool) {
	o.UseMaxNcacheTtl = &v
}

// GetUseMaxUdpSize returns the UseMaxUdpSize field value if set, zero value otherwise.
func (o *View) GetUseMaxUdpSize() bool {
	if o == nil || IsNil(o.UseMaxUdpSize) {
		var ret bool
		return ret
	}
	return *o.UseMaxUdpSize
}

// GetUseMaxUdpSizeOk returns a tuple with the UseMaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseMaxUdpSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMaxUdpSize) {
		return nil, false
	}
	return o.UseMaxUdpSize, true
}

// HasUseMaxUdpSize returns a boolean if a field has been set.
func (o *View) HasUseMaxUdpSize() bool {
	if o != nil && !IsNil(o.UseMaxUdpSize) {
		return true
	}

	return false
}

// SetUseMaxUdpSize gets a reference to the given bool and assigns it to the UseMaxUdpSize field.
func (o *View) SetUseMaxUdpSize(v bool) {
	o.UseMaxUdpSize = &v
}

// GetUseNxdomainRedirect returns the UseNxdomainRedirect field value if set, zero value otherwise.
func (o *View) GetUseNxdomainRedirect() bool {
	if o == nil || IsNil(o.UseNxdomainRedirect) {
		var ret bool
		return ret
	}
	return *o.UseNxdomainRedirect
}

// GetUseNxdomainRedirectOk returns a tuple with the UseNxdomainRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseNxdomainRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNxdomainRedirect) {
		return nil, false
	}
	return o.UseNxdomainRedirect, true
}

// HasUseNxdomainRedirect returns a boolean if a field has been set.
func (o *View) HasUseNxdomainRedirect() bool {
	if o != nil && !IsNil(o.UseNxdomainRedirect) {
		return true
	}

	return false
}

// SetUseNxdomainRedirect gets a reference to the given bool and assigns it to the UseNxdomainRedirect field.
func (o *View) SetUseNxdomainRedirect(v bool) {
	o.UseNxdomainRedirect = &v
}

// GetUseRecursion returns the UseRecursion field value if set, zero value otherwise.
func (o *View) GetUseRecursion() bool {
	if o == nil || IsNil(o.UseRecursion) {
		var ret bool
		return ret
	}
	return *o.UseRecursion
}

// GetUseRecursionOk returns a tuple with the UseRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseRecursionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecursion) {
		return nil, false
	}
	return o.UseRecursion, true
}

// HasUseRecursion returns a boolean if a field has been set.
func (o *View) HasUseRecursion() bool {
	if o != nil && !IsNil(o.UseRecursion) {
		return true
	}

	return false
}

// SetUseRecursion gets a reference to the given bool and assigns it to the UseRecursion field.
func (o *View) SetUseRecursion(v bool) {
	o.UseRecursion = &v
}

// GetUseResponseRateLimiting returns the UseResponseRateLimiting field value if set, zero value otherwise.
func (o *View) GetUseResponseRateLimiting() bool {
	if o == nil || IsNil(o.UseResponseRateLimiting) {
		var ret bool
		return ret
	}
	return *o.UseResponseRateLimiting
}

// GetUseResponseRateLimitingOk returns a tuple with the UseResponseRateLimiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseResponseRateLimitingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseResponseRateLimiting) {
		return nil, false
	}
	return o.UseResponseRateLimiting, true
}

// HasUseResponseRateLimiting returns a boolean if a field has been set.
func (o *View) HasUseResponseRateLimiting() bool {
	if o != nil && !IsNil(o.UseResponseRateLimiting) {
		return true
	}

	return false
}

// SetUseResponseRateLimiting gets a reference to the given bool and assigns it to the UseResponseRateLimiting field.
func (o *View) SetUseResponseRateLimiting(v bool) {
	o.UseResponseRateLimiting = &v
}

// GetUseRootNameServer returns the UseRootNameServer field value if set, zero value otherwise.
func (o *View) GetUseRootNameServer() bool {
	if o == nil || IsNil(o.UseRootNameServer) {
		var ret bool
		return ret
	}
	return *o.UseRootNameServer
}

// GetUseRootNameServerOk returns a tuple with the UseRootNameServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseRootNameServerOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootNameServer) {
		return nil, false
	}
	return o.UseRootNameServer, true
}

// HasUseRootNameServer returns a boolean if a field has been set.
func (o *View) HasUseRootNameServer() bool {
	if o != nil && !IsNil(o.UseRootNameServer) {
		return true
	}

	return false
}

// SetUseRootNameServer gets a reference to the given bool and assigns it to the UseRootNameServer field.
func (o *View) SetUseRootNameServer(v bool) {
	o.UseRootNameServer = &v
}

// GetUseRpzDropIpRule returns the UseRpzDropIpRule field value if set, zero value otherwise.
func (o *View) GetUseRpzDropIpRule() bool {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		var ret bool
		return ret
	}
	return *o.UseRpzDropIpRule
}

// GetUseRpzDropIpRuleOk returns a tuple with the UseRpzDropIpRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseRpzDropIpRuleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		return nil, false
	}
	return o.UseRpzDropIpRule, true
}

// HasUseRpzDropIpRule returns a boolean if a field has been set.
func (o *View) HasUseRpzDropIpRule() bool {
	if o != nil && !IsNil(o.UseRpzDropIpRule) {
		return true
	}

	return false
}

// SetUseRpzDropIpRule gets a reference to the given bool and assigns it to the UseRpzDropIpRule field.
func (o *View) SetUseRpzDropIpRule(v bool) {
	o.UseRpzDropIpRule = &v
}

// GetUseRpzQnameWaitRecurse returns the UseRpzQnameWaitRecurse field value if set, zero value otherwise.
func (o *View) GetUseRpzQnameWaitRecurse() bool {
	if o == nil || IsNil(o.UseRpzQnameWaitRecurse) {
		var ret bool
		return ret
	}
	return *o.UseRpzQnameWaitRecurse
}

// GetUseRpzQnameWaitRecurseOk returns a tuple with the UseRpzQnameWaitRecurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseRpzQnameWaitRecurseOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzQnameWaitRecurse) {
		return nil, false
	}
	return o.UseRpzQnameWaitRecurse, true
}

// HasUseRpzQnameWaitRecurse returns a boolean if a field has been set.
func (o *View) HasUseRpzQnameWaitRecurse() bool {
	if o != nil && !IsNil(o.UseRpzQnameWaitRecurse) {
		return true
	}

	return false
}

// SetUseRpzQnameWaitRecurse gets a reference to the given bool and assigns it to the UseRpzQnameWaitRecurse field.
func (o *View) SetUseRpzQnameWaitRecurse(v bool) {
	o.UseRpzQnameWaitRecurse = &v
}

// GetUseScavengingSettings returns the UseScavengingSettings field value if set, zero value otherwise.
func (o *View) GetUseScavengingSettings() bool {
	if o == nil || IsNil(o.UseScavengingSettings) {
		var ret bool
		return ret
	}
	return *o.UseScavengingSettings
}

// GetUseScavengingSettingsOk returns a tuple with the UseScavengingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseScavengingSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseScavengingSettings) {
		return nil, false
	}
	return o.UseScavengingSettings, true
}

// HasUseScavengingSettings returns a boolean if a field has been set.
func (o *View) HasUseScavengingSettings() bool {
	if o != nil && !IsNil(o.UseScavengingSettings) {
		return true
	}

	return false
}

// SetUseScavengingSettings gets a reference to the given bool and assigns it to the UseScavengingSettings field.
func (o *View) SetUseScavengingSettings(v bool) {
	o.UseScavengingSettings = &v
}

// GetUseSortlist returns the UseSortlist field value if set, zero value otherwise.
func (o *View) GetUseSortlist() bool {
	if o == nil || IsNil(o.UseSortlist) {
		var ret bool
		return ret
	}
	return *o.UseSortlist
}

// GetUseSortlistOk returns a tuple with the UseSortlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseSortlistOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSortlist) {
		return nil, false
	}
	return o.UseSortlist, true
}

// HasUseSortlist returns a boolean if a field has been set.
func (o *View) HasUseSortlist() bool {
	if o != nil && !IsNil(o.UseSortlist) {
		return true
	}

	return false
}

// SetUseSortlist gets a reference to the given bool and assigns it to the UseSortlist field.
func (o *View) SetUseSortlist(v bool) {
	o.UseSortlist = &v
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o View) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.BlacklistAction) {
		toSerialize["blacklist_action"] = o.BlacklistAction
	}
	if !IsNil(o.BlacklistLogQuery) {
		toSerialize["blacklist_log_query"] = o.BlacklistLogQuery
	}
	if !IsNil(o.BlacklistRedirectAddresses) {
		toSerialize["blacklist_redirect_addresses"] = o.BlacklistRedirectAddresses
	}
	if !IsNil(o.BlacklistRedirectTtl) {
		toSerialize["blacklist_redirect_ttl"] = o.BlacklistRedirectTtl
	}
	if !IsNil(o.BlacklistRulesets) {
		toSerialize["blacklist_rulesets"] = o.BlacklistRulesets
	}
	if !IsNil(o.CloudInfo) {
		toSerialize["cloud_info"] = o.CloudInfo
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CustomRootNameServers) {
		toSerialize["custom_root_name_servers"] = o.CustomRootNameServers
	}
	if !IsNil(o.DdnsForceCreationTimestampUpdate) {
		toSerialize["ddns_force_creation_timestamp_update"] = o.DdnsForceCreationTimestampUpdate
	}
	if !IsNil(o.DdnsPrincipalGroup) {
		toSerialize["ddns_principal_group"] = o.DdnsPrincipalGroup
	}
	if !IsNil(o.DdnsPrincipalTracking) {
		toSerialize["ddns_principal_tracking"] = o.DdnsPrincipalTracking
	}
	if !IsNil(o.DdnsRestrictPatterns) {
		toSerialize["ddns_restrict_patterns"] = o.DdnsRestrictPatterns
	}
	if !IsNil(o.DdnsRestrictPatternsList) {
		toSerialize["ddns_restrict_patterns_list"] = o.DdnsRestrictPatternsList
	}
	if !IsNil(o.DdnsRestrictProtected) {
		toSerialize["ddns_restrict_protected"] = o.DdnsRestrictProtected
	}
	if !IsNil(o.DdnsRestrictSecure) {
		toSerialize["ddns_restrict_secure"] = o.DdnsRestrictSecure
	}
	if !IsNil(o.DdnsRestrictStatic) {
		toSerialize["ddns_restrict_static"] = o.DdnsRestrictStatic
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Dns64Enabled) {
		toSerialize["dns64_enabled"] = o.Dns64Enabled
	}
	if !IsNil(o.Dns64Groups) {
		toSerialize["dns64_groups"] = o.Dns64Groups
	}
	if !IsNil(o.DnssecEnabled) {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if !IsNil(o.DnssecExpiredSignaturesEnabled) {
		toSerialize["dnssec_expired_signatures_enabled"] = o.DnssecExpiredSignaturesEnabled
	}
	if !IsNil(o.DnssecNegativeTrustAnchors) {
		toSerialize["dnssec_negative_trust_anchors"] = o.DnssecNegativeTrustAnchors
	}
	if !IsNil(o.DnssecTrustedKeys) {
		toSerialize["dnssec_trusted_keys"] = o.DnssecTrustedKeys
	}
	if !IsNil(o.DnssecValidationEnabled) {
		toSerialize["dnssec_validation_enabled"] = o.DnssecValidationEnabled
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.EnableBlacklist) {
		toSerialize["enable_blacklist"] = o.EnableBlacklist
	}
	if !IsNil(o.EnableFixedRrsetOrderFqdns) {
		toSerialize["enable_fixed_rrset_order_fqdns"] = o.EnableFixedRrsetOrderFqdns
	}
	if !IsNil(o.EnableMatchRecursiveOnly) {
		toSerialize["enable_match_recursive_only"] = o.EnableMatchRecursiveOnly
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.FilterAaaa) {
		toSerialize["filter_aaaa"] = o.FilterAaaa
	}
	if !IsNil(o.FilterAaaaList) {
		toSerialize["filter_aaaa_list"] = o.FilterAaaaList
	}
	if !IsNil(o.FixedRrsetOrderFqdns) {
		toSerialize["fixed_rrset_order_fqdns"] = o.FixedRrsetOrderFqdns
	}
	if !IsNil(o.ForwardOnly) {
		toSerialize["forward_only"] = o.ForwardOnly
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.LastQueriedAcl) {
		toSerialize["last_queried_acl"] = o.LastQueriedAcl
	}
	if !IsNil(o.MatchClients) {
		toSerialize["match_clients"] = o.MatchClients
	}
	if !IsNil(o.MatchDestinations) {
		toSerialize["match_destinations"] = o.MatchDestinations
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxNcacheTtl) {
		toSerialize["max_ncache_ttl"] = o.MaxNcacheTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NotifyDelay) {
		toSerialize["notify_delay"] = o.NotifyDelay
	}
	if !IsNil(o.NxdomainLogQuery) {
		toSerialize["nxdomain_log_query"] = o.NxdomainLogQuery
	}
	if !IsNil(o.NxdomainRedirect) {
		toSerialize["nxdomain_redirect"] = o.NxdomainRedirect
	}
	if !IsNil(o.NxdomainRedirectAddresses) {
		toSerialize["nxdomain_redirect_addresses"] = o.NxdomainRedirectAddresses
	}
	if !IsNil(o.NxdomainRedirectAddressesV6) {
		toSerialize["nxdomain_redirect_addresses_v6"] = o.NxdomainRedirectAddressesV6
	}
	if !IsNil(o.NxdomainRedirectTtl) {
		toSerialize["nxdomain_redirect_ttl"] = o.NxdomainRedirectTtl
	}
	if !IsNil(o.NxdomainRulesets) {
		toSerialize["nxdomain_rulesets"] = o.NxdomainRulesets
	}
	if !IsNil(o.Recursion) {
		toSerialize["recursion"] = o.Recursion
	}
	if !IsNil(o.ResponseRateLimiting) {
		toSerialize["response_rate_limiting"] = o.ResponseRateLimiting
	}
	if !IsNil(o.RootNameServerType) {
		toSerialize["root_name_server_type"] = o.RootNameServerType
	}
	if !IsNil(o.RpzDropIpRuleEnabled) {
		toSerialize["rpz_drop_ip_rule_enabled"] = o.RpzDropIpRuleEnabled
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv4"] = o.RpzDropIpRuleMinPrefixLengthIpv4
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv6"] = o.RpzDropIpRuleMinPrefixLengthIpv6
	}
	if !IsNil(o.RpzQnameWaitRecurse) {
		toSerialize["rpz_qname_wait_recurse"] = o.RpzQnameWaitRecurse
	}
	if !IsNil(o.ScavengingSettings) {
		toSerialize["scavenging_settings"] = o.ScavengingSettings
	}
	if !IsNil(o.Sortlist) {
		toSerialize["sortlist"] = o.Sortlist
	}
	if !IsNil(o.UseBlacklist) {
		toSerialize["use_blacklist"] = o.UseBlacklist
	}
	if !IsNil(o.UseDdnsForceCreationTimestampUpdate) {
		toSerialize["use_ddns_force_creation_timestamp_update"] = o.UseDdnsForceCreationTimestampUpdate
	}
	if !IsNil(o.UseDdnsPatternsRestriction) {
		toSerialize["use_ddns_patterns_restriction"] = o.UseDdnsPatternsRestriction
	}
	if !IsNil(o.UseDdnsPrincipalSecurity) {
		toSerialize["use_ddns_principal_security"] = o.UseDdnsPrincipalSecurity
	}
	if !IsNil(o.UseDdnsRestrictProtected) {
		toSerialize["use_ddns_restrict_protected"] = o.UseDdnsRestrictProtected
	}
	if !IsNil(o.UseDdnsRestrictStatic) {
		toSerialize["use_ddns_restrict_static"] = o.UseDdnsRestrictStatic
	}
	if !IsNil(o.UseDns64) {
		toSerialize["use_dns64"] = o.UseDns64
	}
	if !IsNil(o.UseDnssec) {
		toSerialize["use_dnssec"] = o.UseDnssec
	}
	if !IsNil(o.UseEdnsUdpSize) {
		toSerialize["use_edns_udp_size"] = o.UseEdnsUdpSize
	}
	if !IsNil(o.UseFilterAaaa) {
		toSerialize["use_filter_aaaa"] = o.UseFilterAaaa
	}
	if !IsNil(o.UseFixedRrsetOrderFqdns) {
		toSerialize["use_fixed_rrset_order_fqdns"] = o.UseFixedRrsetOrderFqdns
	}
	if !IsNil(o.UseForwarders) {
		toSerialize["use_forwarders"] = o.UseForwarders
	}
	if !IsNil(o.UseMaxCacheTtl) {
		toSerialize["use_max_cache_ttl"] = o.UseMaxCacheTtl
	}
	if !IsNil(o.UseMaxNcacheTtl) {
		toSerialize["use_max_ncache_ttl"] = o.UseMaxNcacheTtl
	}
	if !IsNil(o.UseMaxUdpSize) {
		toSerialize["use_max_udp_size"] = o.UseMaxUdpSize
	}
	if !IsNil(o.UseNxdomainRedirect) {
		toSerialize["use_nxdomain_redirect"] = o.UseNxdomainRedirect
	}
	if !IsNil(o.UseRecursion) {
		toSerialize["use_recursion"] = o.UseRecursion
	}
	if !IsNil(o.UseResponseRateLimiting) {
		toSerialize["use_response_rate_limiting"] = o.UseResponseRateLimiting
	}
	if !IsNil(o.UseRootNameServer) {
		toSerialize["use_root_name_server"] = o.UseRootNameServer
	}
	if !IsNil(o.UseRpzDropIpRule) {
		toSerialize["use_rpz_drop_ip_rule"] = o.UseRpzDropIpRule
	}
	if !IsNil(o.UseRpzQnameWaitRecurse) {
		toSerialize["use_rpz_qname_wait_recurse"] = o.UseRpzQnameWaitRecurse
	}
	if !IsNil(o.UseScavengingSettings) {
		toSerialize["use_scavenging_settings"] = o.UseScavengingSettings
	}
	if !IsNil(o.UseSortlist) {
		toSerialize["use_sortlist"] = o.UseSortlist
	}
	return toSerialize, nil
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
