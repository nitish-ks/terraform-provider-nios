/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ViewscavengingsettingsExpressionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewscavengingsettingsExpressionList{}

// ViewscavengingsettingsExpressionList struct for ViewscavengingsettingsExpressionList
type ViewscavengingsettingsExpressionList struct {
	// The operation name.
	Op *string `json:"op,omitempty"`
	// The first operand value.
	Op1 *string `json:"op1,omitempty"`
	// The first operand type.
	Op1Type *string `json:"op1_type,omitempty"`
	// The second operand value.
	Op2 *string `json:"op2,omitempty"`
	// The second operand type.
	Op2Type              *string `json:"op2_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViewscavengingsettingsExpressionList ViewscavengingsettingsExpressionList

// NewViewscavengingsettingsExpressionList instantiates a new ViewscavengingsettingsExpressionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewscavengingsettingsExpressionList() *ViewscavengingsettingsExpressionList {
	this := ViewscavengingsettingsExpressionList{}
	return &this
}

// NewViewscavengingsettingsExpressionListWithDefaults instantiates a new ViewscavengingsettingsExpressionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewscavengingsettingsExpressionListWithDefaults() *ViewscavengingsettingsExpressionList {
	this := ViewscavengingsettingsExpressionList{}
	return &this
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *ViewscavengingsettingsExpressionList) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewscavengingsettingsExpressionList) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *ViewscavengingsettingsExpressionList) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *ViewscavengingsettingsExpressionList) SetOp(v string) {
	o.Op = &v
}

// GetOp1 returns the Op1 field value if set, zero value otherwise.
func (o *ViewscavengingsettingsExpressionList) GetOp1() string {
	if o == nil || IsNil(o.Op1) {
		var ret string
		return ret
	}
	return *o.Op1
}

// GetOp1Ok returns a tuple with the Op1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewscavengingsettingsExpressionList) GetOp1Ok() (*string, bool) {
	if o == nil || IsNil(o.Op1) {
		return nil, false
	}
	return o.Op1, true
}

// HasOp1 returns a boolean if a field has been set.
func (o *ViewscavengingsettingsExpressionList) HasOp1() bool {
	if o != nil && !IsNil(o.Op1) {
		return true
	}

	return false
}

// SetOp1 gets a reference to the given string and assigns it to the Op1 field.
func (o *ViewscavengingsettingsExpressionList) SetOp1(v string) {
	o.Op1 = &v
}

// GetOp1Type returns the Op1Type field value if set, zero value otherwise.
func (o *ViewscavengingsettingsExpressionList) GetOp1Type() string {
	if o == nil || IsNil(o.Op1Type) {
		var ret string
		return ret
	}
	return *o.Op1Type
}

// GetOp1TypeOk returns a tuple with the Op1Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewscavengingsettingsExpressionList) GetOp1TypeOk() (*string, bool) {
	if o == nil || IsNil(o.Op1Type) {
		return nil, false
	}
	return o.Op1Type, true
}

// HasOp1Type returns a boolean if a field has been set.
func (o *ViewscavengingsettingsExpressionList) HasOp1Type() bool {
	if o != nil && !IsNil(o.Op1Type) {
		return true
	}

	return false
}

// SetOp1Type gets a reference to the given string and assigns it to the Op1Type field.
func (o *ViewscavengingsettingsExpressionList) SetOp1Type(v string) {
	o.Op1Type = &v
}

// GetOp2 returns the Op2 field value if set, zero value otherwise.
func (o *ViewscavengingsettingsExpressionList) GetOp2() string {
	if o == nil || IsNil(o.Op2) {
		var ret string
		return ret
	}
	return *o.Op2
}

// GetOp2Ok returns a tuple with the Op2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewscavengingsettingsExpressionList) GetOp2Ok() (*string, bool) {
	if o == nil || IsNil(o.Op2) {
		return nil, false
	}
	return o.Op2, true
}

// HasOp2 returns a boolean if a field has been set.
func (o *ViewscavengingsettingsExpressionList) HasOp2() bool {
	if o != nil && !IsNil(o.Op2) {
		return true
	}

	return false
}

// SetOp2 gets a reference to the given string and assigns it to the Op2 field.
func (o *ViewscavengingsettingsExpressionList) SetOp2(v string) {
	o.Op2 = &v
}

// GetOp2Type returns the Op2Type field value if set, zero value otherwise.
func (o *ViewscavengingsettingsExpressionList) GetOp2Type() string {
	if o == nil || IsNil(o.Op2Type) {
		var ret string
		return ret
	}
	return *o.Op2Type
}

// GetOp2TypeOk returns a tuple with the Op2Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewscavengingsettingsExpressionList) GetOp2TypeOk() (*string, bool) {
	if o == nil || IsNil(o.Op2Type) {
		return nil, false
	}
	return o.Op2Type, true
}

// HasOp2Type returns a boolean if a field has been set.
func (o *ViewscavengingsettingsExpressionList) HasOp2Type() bool {
	if o != nil && !IsNil(o.Op2Type) {
		return true
	}

	return false
}

// SetOp2Type gets a reference to the given string and assigns it to the Op2Type field.
func (o *ViewscavengingsettingsExpressionList) SetOp2Type(v string) {
	o.Op2Type = &v
}

func (o ViewscavengingsettingsExpressionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewscavengingsettingsExpressionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Op1) {
		toSerialize["op1"] = o.Op1
	}
	if !IsNil(o.Op1Type) {
		toSerialize["op1_type"] = o.Op1Type
	}
	if !IsNil(o.Op2) {
		toSerialize["op2"] = o.Op2
	}
	if !IsNil(o.Op2Type) {
		toSerialize["op2_type"] = o.Op2Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViewscavengingsettingsExpressionList) UnmarshalJSON(data []byte) (err error) {
	varViewscavengingsettingsExpressionList := _ViewscavengingsettingsExpressionList{}

	err = json.Unmarshal(data, &varViewscavengingsettingsExpressionList)

	if err != nil {
		return err
	}

	*o = ViewscavengingsettingsExpressionList(varViewscavengingsettingsExpressionList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "op")
		delete(additionalProperties, "op1")
		delete(additionalProperties, "op1_type")
		delete(additionalProperties, "op2")
		delete(additionalProperties, "op2_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViewscavengingsettingsExpressionList struct {
	value *ViewscavengingsettingsExpressionList
	isSet bool
}

func (v NullableViewscavengingsettingsExpressionList) Get() *ViewscavengingsettingsExpressionList {
	return v.value
}

func (v *NullableViewscavengingsettingsExpressionList) Set(val *ViewscavengingsettingsExpressionList) {
	v.value = val
	v.isSet = true
}

func (v NullableViewscavengingsettingsExpressionList) IsSet() bool {
	return v.isSet
}

func (v *NullableViewscavengingsettingsExpressionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewscavengingsettingsExpressionList(val *ViewscavengingsettingsExpressionList) *NullableViewscavengingsettingsExpressionList {
	return &NullableViewscavengingsettingsExpressionList{value: val, isSet: true}
}

func (v NullableViewscavengingsettingsExpressionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewscavengingsettingsExpressionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
