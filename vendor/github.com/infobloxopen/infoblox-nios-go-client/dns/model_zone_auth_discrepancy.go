/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneAuthDiscrepancy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneAuthDiscrepancy{}

// ZoneAuthDiscrepancy struct for ZoneAuthDiscrepancy
type ZoneAuthDiscrepancy struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Information about the discrepancy.
	Description *string `json:"description,omitempty"`
	// The severity of the discrepancy reported.
	Severity *string `json:"severity,omitempty"`
	// The time when the DNS integrity check was last run for this zone.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The reference of the zone during a search. Otherwise, this is the zone object of the zone to which the discrepancy refers.
	Zone *string `json:"zone,omitempty"`
}

// NewZoneAuthDiscrepancy instantiates a new ZoneAuthDiscrepancy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneAuthDiscrepancy() *ZoneAuthDiscrepancy {
	this := ZoneAuthDiscrepancy{}
	return &this
}

// NewZoneAuthDiscrepancyWithDefaults instantiates a new ZoneAuthDiscrepancy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneAuthDiscrepancyWithDefaults() *ZoneAuthDiscrepancy {
	this := ZoneAuthDiscrepancy{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ZoneAuthDiscrepancy) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDiscrepancy) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ZoneAuthDiscrepancy) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ZoneAuthDiscrepancy) SetRef(v string) {
	o.Ref = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ZoneAuthDiscrepancy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDiscrepancy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ZoneAuthDiscrepancy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ZoneAuthDiscrepancy) SetDescription(v string) {
	o.Description = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ZoneAuthDiscrepancy) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDiscrepancy) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ZoneAuthDiscrepancy) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *ZoneAuthDiscrepancy) SetSeverity(v string) {
	o.Severity = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ZoneAuthDiscrepancy) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDiscrepancy) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ZoneAuthDiscrepancy) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ZoneAuthDiscrepancy) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *ZoneAuthDiscrepancy) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneAuthDiscrepancy) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *ZoneAuthDiscrepancy) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *ZoneAuthDiscrepancy) SetZone(v string) {
	o.Zone = &v
}

func (o ZoneAuthDiscrepancy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneAuthDiscrepancy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableZoneAuthDiscrepancy struct {
	value *ZoneAuthDiscrepancy
	isSet bool
}

func (v NullableZoneAuthDiscrepancy) Get() *ZoneAuthDiscrepancy {
	return v.value
}

func (v *NullableZoneAuthDiscrepancy) Set(val *ZoneAuthDiscrepancy) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneAuthDiscrepancy) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneAuthDiscrepancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneAuthDiscrepancy(val *ZoneAuthDiscrepancy) *NullableZoneAuthDiscrepancy {
	return &NullableZoneAuthDiscrepancy{value: val, isSet: true}
}

func (v NullableZoneAuthDiscrepancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneAuthDiscrepancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
