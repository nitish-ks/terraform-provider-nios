/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneRp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneRp{}

// ZoneRp struct for ZoneRp
type ZoneRp struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The IP address of the server that is serving this zone.
	Address *string `json:"address,omitempty"`
	// Comment for the zone; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.
	Disable *bool `json:"disable,omitempty"`
	// The displayed name of the DNS zone.
	DisplayDomain *string `json:"display_domain,omitempty"`
	// The SOA email for the zone in punycode format.
	DnsSoaEmail *string `json:"dns_soa_email,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of external primary servers.
	ExternalPrimaries []ZoneRpExternalPrimaries `json:"external_primaries,omitempty"`
	// The list of external secondary servers.
	ExternalSecondaries []ZoneRpExternalSecondaries `json:"external_secondaries,omitempty"`
	FireeyeRuleMapping  *ZoneRpFireeyeRuleMapping   `json:"fireeye_rule_mapping,omitempty"`
	// The name of this DNS zone in FQDN format.
	Fqdn *string `json:"fqdn,omitempty"`
	// The grid primary servers for this zone.
	GridPrimary []ZoneRpGridPrimary `json:"grid_primary,omitempty"`
	// The list with Grid members that are secondary servers for this zone.
	GridSecondaries []ZoneRpGridSecondaries `json:"grid_secondaries,omitempty"`
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.
	Locked *bool `json:"locked,omitempty"`
	// The name of a superuser or the administrator who locked this zone.
	LockedBy *string `json:"locked_by,omitempty"`
	// Determines whether RPZ logging enabled or not at zone level. When this is set to False, the logging is disabled.
	LogRpz *bool `json:"log_rpz,omitempty"`
	// IPv4 Netmask or IPv6 prefix for this zone.
	MaskPrefix *string `json:"mask_prefix,omitempty"`
	// The list of per-member SOA MNAME information.
	MemberSoaMnames []ZoneRpMemberSoaMnames `json:"member_soa_mnames,omitempty"`
	// The list of per-member SOA serial information.
	MemberSoaSerials []ZoneRpMemberSoaSerials `json:"member_soa_serials,omitempty"`
	// The name of the network view in which this zone resides.
	NetworkView *string `json:"network_view,omitempty"`
	// The name server group that serves DNS for this zone.
	NsGroup *string `json:"ns_group,omitempty"`
	// The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.
	Parent *string `json:"parent,omitempty"`
	// The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.
	Prefix *string `json:"prefix,omitempty"`
	// The type of the primary server.
	PrimaryType *string `json:"primary_type,omitempty"`
	// The hostname policy for records under this zone.
	RecordNamePolicy *string `json:"record_name_policy,omitempty"`
	// Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.
	RpzDropIpRuleEnabled *bool `json:"rpz_drop_ip_rule_enabled,omitempty"`
	// The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv4 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv4,omitempty"`
	// The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.
	RpzDropIpRuleMinPrefixLengthIpv6 *int64 `json:"rpz_drop_ip_rule_min_prefix_length_ipv6,omitempty"`
	// The timestamp of the last update for zone data.
	RpzLastUpdatedTime *int64 `json:"rpz_last_updated_time,omitempty"`
	// The response policy zone override policy.
	RpzPolicy *string `json:"rpz_policy,omitempty"`
	// The priority of this response policy zone.
	RpzPriority *int64 `json:"rpz_priority,omitempty"`
	// This number is for UI to identify the end of qualified zone list.
	RpzPriorityEnd *int64 `json:"rpz_priority_end,omitempty"`
	// The severity of this response policy zone.
	RpzSeverity *string `json:"rpz_severity,omitempty"`
	// The type of rpz zone.
	RpzType *string `json:"rpz_type,omitempty"`
	// The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.
	SetSoaSerialNumber *bool `json:"set_soa_serial_number,omitempty"`
	// The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
	SoaDefaultTtl *int64 `json:"soa_default_ttl,omitempty"`
	// The SOA email value for this zone. This value can be in unicode format.
	SoaEmail *string `json:"soa_email,omitempty"`
	// This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.
	SoaExpire *int64 `json:"soa_expire,omitempty"`
	// The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for \"Does Not Respond\" responses.
	SoaNegativeTtl *int64 `json:"soa_negative_ttl,omitempty"`
	// This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.
	SoaRefresh *int64 `json:"soa_refresh,omitempty"`
	// This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.
	SoaRetry *int64 `json:"soa_retry,omitempty"`
	// The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.
	SoaSerial *int64 `json:"soa_serial_number,omitempty"`
	// The canonical name of redirect target in substitute policy of response policy zone.
	SubstituteName *string `json:"substitute_name,omitempty"`
	// This flag controls whether the zone is using an external primary.
	UseExternalPrimary *bool `json:"use_external_primary,omitempty"`
	// Use flag for: soa_default_ttl , soa_expire, soa_negative_ttl, soa_refresh, soa_retry
	UseGridZoneTimer *bool `json:"use_grid_zone_timer,omitempty"`
	// Use flag for: log_rpz
	UseLogRpz *bool `json:"use_log_rpz,omitempty"`
	// Use flag for: record_name_policy
	UseRecordNamePolicy *bool `json:"use_record_name_policy,omitempty"`
	// Use flag for: rpz_drop_ip_rule_enabled , rpz_drop_ip_rule_min_prefix_length_ipv4, rpz_drop_ip_rule_min_prefix_length_ipv6
	UseRpzDropIpRule *bool `json:"use_rpz_drop_ip_rule,omitempty"`
	// Use flag for: soa_email
	UseSoaEmail *bool `json:"use_soa_email,omitempty"`
	// The name of the DNS view in which the zone resides. Example \"external\".
	View *string `json:"view,omitempty"`
}

// NewZoneRp instantiates a new ZoneRp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneRp() *ZoneRp {
	this := ZoneRp{}
	return &this
}

// NewZoneRpWithDefaults instantiates a new ZoneRp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneRpWithDefaults() *ZoneRp {
	this := ZoneRp{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ZoneRp) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ZoneRp) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ZoneRp) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ZoneRp) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ZoneRp) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ZoneRp) SetAddress(v string) {
	o.Address = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneRp) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneRp) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneRp) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *ZoneRp) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *ZoneRp) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *ZoneRp) SetDisable(v bool) {
	o.Disable = &v
}

// GetDisplayDomain returns the DisplayDomain field value if set, zero value otherwise.
func (o *ZoneRp) GetDisplayDomain() string {
	if o == nil || IsNil(o.DisplayDomain) {
		var ret string
		return ret
	}
	return *o.DisplayDomain
}

// GetDisplayDomainOk returns a tuple with the DisplayDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetDisplayDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayDomain) {
		return nil, false
	}
	return o.DisplayDomain, true
}

// HasDisplayDomain returns a boolean if a field has been set.
func (o *ZoneRp) HasDisplayDomain() bool {
	if o != nil && !IsNil(o.DisplayDomain) {
		return true
	}

	return false
}

// SetDisplayDomain gets a reference to the given string and assigns it to the DisplayDomain field.
func (o *ZoneRp) SetDisplayDomain(v string) {
	o.DisplayDomain = &v
}

// GetDnsSoaEmail returns the DnsSoaEmail field value if set, zero value otherwise.
func (o *ZoneRp) GetDnsSoaEmail() string {
	if o == nil || IsNil(o.DnsSoaEmail) {
		var ret string
		return ret
	}
	return *o.DnsSoaEmail
}

// GetDnsSoaEmailOk returns a tuple with the DnsSoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetDnsSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSoaEmail) {
		return nil, false
	}
	return o.DnsSoaEmail, true
}

// HasDnsSoaEmail returns a boolean if a field has been set.
func (o *ZoneRp) HasDnsSoaEmail() bool {
	if o != nil && !IsNil(o.DnsSoaEmail) {
		return true
	}

	return false
}

// SetDnsSoaEmail gets a reference to the given string and assigns it to the DnsSoaEmail field.
func (o *ZoneRp) SetDnsSoaEmail(v string) {
	o.DnsSoaEmail = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *ZoneRp) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *ZoneRp) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *ZoneRp) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *ZoneRp) GetExternalPrimaries() []ZoneRpExternalPrimaries {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ZoneRpExternalPrimaries
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetExternalPrimariesOk() ([]ZoneRpExternalPrimaries, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *ZoneRp) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ZoneRpExternalPrimaries and assigns it to the ExternalPrimaries field.
func (o *ZoneRp) SetExternalPrimaries(v []ZoneRpExternalPrimaries) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *ZoneRp) GetExternalSecondaries() []ZoneRpExternalSecondaries {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ZoneRpExternalSecondaries
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetExternalSecondariesOk() ([]ZoneRpExternalSecondaries, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *ZoneRp) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ZoneRpExternalSecondaries and assigns it to the ExternalSecondaries field.
func (o *ZoneRp) SetExternalSecondaries(v []ZoneRpExternalSecondaries) {
	o.ExternalSecondaries = v
}

// GetFireeyeRuleMapping returns the FireeyeRuleMapping field value if set, zero value otherwise.
func (o *ZoneRp) GetFireeyeRuleMapping() ZoneRpFireeyeRuleMapping {
	if o == nil || IsNil(o.FireeyeRuleMapping) {
		var ret ZoneRpFireeyeRuleMapping
		return ret
	}
	return *o.FireeyeRuleMapping
}

// GetFireeyeRuleMappingOk returns a tuple with the FireeyeRuleMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetFireeyeRuleMappingOk() (*ZoneRpFireeyeRuleMapping, bool) {
	if o == nil || IsNil(o.FireeyeRuleMapping) {
		return nil, false
	}
	return o.FireeyeRuleMapping, true
}

// HasFireeyeRuleMapping returns a boolean if a field has been set.
func (o *ZoneRp) HasFireeyeRuleMapping() bool {
	if o != nil && !IsNil(o.FireeyeRuleMapping) {
		return true
	}

	return false
}

// SetFireeyeRuleMapping gets a reference to the given ZoneRpFireeyeRuleMapping and assigns it to the FireeyeRuleMapping field.
func (o *ZoneRp) SetFireeyeRuleMapping(v ZoneRpFireeyeRuleMapping) {
	o.FireeyeRuleMapping = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ZoneRp) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ZoneRp) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ZoneRp) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetGridPrimary returns the GridPrimary field value if set, zero value otherwise.
func (o *ZoneRp) GetGridPrimary() []ZoneRpGridPrimary {
	if o == nil || IsNil(o.GridPrimary) {
		var ret []ZoneRpGridPrimary
		return ret
	}
	return o.GridPrimary
}

// GetGridPrimaryOk returns a tuple with the GridPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetGridPrimaryOk() ([]ZoneRpGridPrimary, bool) {
	if o == nil || IsNil(o.GridPrimary) {
		return nil, false
	}
	return o.GridPrimary, true
}

// HasGridPrimary returns a boolean if a field has been set.
func (o *ZoneRp) HasGridPrimary() bool {
	if o != nil && !IsNil(o.GridPrimary) {
		return true
	}

	return false
}

// SetGridPrimary gets a reference to the given []ZoneRpGridPrimary and assigns it to the GridPrimary field.
func (o *ZoneRp) SetGridPrimary(v []ZoneRpGridPrimary) {
	o.GridPrimary = v
}

// GetGridSecondaries returns the GridSecondaries field value if set, zero value otherwise.
func (o *ZoneRp) GetGridSecondaries() []ZoneRpGridSecondaries {
	if o == nil || IsNil(o.GridSecondaries) {
		var ret []ZoneRpGridSecondaries
		return ret
	}
	return o.GridSecondaries
}

// GetGridSecondariesOk returns a tuple with the GridSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetGridSecondariesOk() ([]ZoneRpGridSecondaries, bool) {
	if o == nil || IsNil(o.GridSecondaries) {
		return nil, false
	}
	return o.GridSecondaries, true
}

// HasGridSecondaries returns a boolean if a field has been set.
func (o *ZoneRp) HasGridSecondaries() bool {
	if o != nil && !IsNil(o.GridSecondaries) {
		return true
	}

	return false
}

// SetGridSecondaries gets a reference to the given []ZoneRpGridSecondaries and assigns it to the GridSecondaries field.
func (o *ZoneRp) SetGridSecondaries(v []ZoneRpGridSecondaries) {
	o.GridSecondaries = v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ZoneRp) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ZoneRp) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ZoneRp) SetLocked(v bool) {
	o.Locked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *ZoneRp) GetLockedBy() string {
	if o == nil || IsNil(o.LockedBy) {
		var ret string
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetLockedByOk() (*string, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *ZoneRp) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given string and assigns it to the LockedBy field.
func (o *ZoneRp) SetLockedBy(v string) {
	o.LockedBy = &v
}

// GetLogRpz returns the LogRpz field value if set, zero value otherwise.
func (o *ZoneRp) GetLogRpz() bool {
	if o == nil || IsNil(o.LogRpz) {
		var ret bool
		return ret
	}
	return *o.LogRpz
}

// GetLogRpzOk returns a tuple with the LogRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetLogRpzOk() (*bool, bool) {
	if o == nil || IsNil(o.LogRpz) {
		return nil, false
	}
	return o.LogRpz, true
}

// HasLogRpz returns a boolean if a field has been set.
func (o *ZoneRp) HasLogRpz() bool {
	if o != nil && !IsNil(o.LogRpz) {
		return true
	}

	return false
}

// SetLogRpz gets a reference to the given bool and assigns it to the LogRpz field.
func (o *ZoneRp) SetLogRpz(v bool) {
	o.LogRpz = &v
}

// GetMaskPrefix returns the MaskPrefix field value if set, zero value otherwise.
func (o *ZoneRp) GetMaskPrefix() string {
	if o == nil || IsNil(o.MaskPrefix) {
		var ret string
		return ret
	}
	return *o.MaskPrefix
}

// GetMaskPrefixOk returns a tuple with the MaskPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetMaskPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MaskPrefix) {
		return nil, false
	}
	return o.MaskPrefix, true
}

// HasMaskPrefix returns a boolean if a field has been set.
func (o *ZoneRp) HasMaskPrefix() bool {
	if o != nil && !IsNil(o.MaskPrefix) {
		return true
	}

	return false
}

// SetMaskPrefix gets a reference to the given string and assigns it to the MaskPrefix field.
func (o *ZoneRp) SetMaskPrefix(v string) {
	o.MaskPrefix = &v
}

// GetMemberSoaMnames returns the MemberSoaMnames field value if set, zero value otherwise.
func (o *ZoneRp) GetMemberSoaMnames() []ZoneRpMemberSoaMnames {
	if o == nil || IsNil(o.MemberSoaMnames) {
		var ret []ZoneRpMemberSoaMnames
		return ret
	}
	return o.MemberSoaMnames
}

// GetMemberSoaMnamesOk returns a tuple with the MemberSoaMnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetMemberSoaMnamesOk() ([]ZoneRpMemberSoaMnames, bool) {
	if o == nil || IsNil(o.MemberSoaMnames) {
		return nil, false
	}
	return o.MemberSoaMnames, true
}

// HasMemberSoaMnames returns a boolean if a field has been set.
func (o *ZoneRp) HasMemberSoaMnames() bool {
	if o != nil && !IsNil(o.MemberSoaMnames) {
		return true
	}

	return false
}

// SetMemberSoaMnames gets a reference to the given []ZoneRpMemberSoaMnames and assigns it to the MemberSoaMnames field.
func (o *ZoneRp) SetMemberSoaMnames(v []ZoneRpMemberSoaMnames) {
	o.MemberSoaMnames = v
}

// GetMemberSoaSerials returns the MemberSoaSerials field value if set, zero value otherwise.
func (o *ZoneRp) GetMemberSoaSerials() []ZoneRpMemberSoaSerials {
	if o == nil || IsNil(o.MemberSoaSerials) {
		var ret []ZoneRpMemberSoaSerials
		return ret
	}
	return o.MemberSoaSerials
}

// GetMemberSoaSerialsOk returns a tuple with the MemberSoaSerials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetMemberSoaSerialsOk() ([]ZoneRpMemberSoaSerials, bool) {
	if o == nil || IsNil(o.MemberSoaSerials) {
		return nil, false
	}
	return o.MemberSoaSerials, true
}

// HasMemberSoaSerials returns a boolean if a field has been set.
func (o *ZoneRp) HasMemberSoaSerials() bool {
	if o != nil && !IsNil(o.MemberSoaSerials) {
		return true
	}

	return false
}

// SetMemberSoaSerials gets a reference to the given []ZoneRpMemberSoaSerials and assigns it to the MemberSoaSerials field.
func (o *ZoneRp) SetMemberSoaSerials(v []ZoneRpMemberSoaSerials) {
	o.MemberSoaSerials = v
}

// GetNetworkView returns the NetworkView field value if set, zero value otherwise.
func (o *ZoneRp) GetNetworkView() string {
	if o == nil || IsNil(o.NetworkView) {
		var ret string
		return ret
	}
	return *o.NetworkView
}

// GetNetworkViewOk returns a tuple with the NetworkView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetNetworkViewOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkView) {
		return nil, false
	}
	return o.NetworkView, true
}

// HasNetworkView returns a boolean if a field has been set.
func (o *ZoneRp) HasNetworkView() bool {
	if o != nil && !IsNil(o.NetworkView) {
		return true
	}

	return false
}

// SetNetworkView gets a reference to the given string and assigns it to the NetworkView field.
func (o *ZoneRp) SetNetworkView(v string) {
	o.NetworkView = &v
}

// GetNsGroup returns the NsGroup field value if set, zero value otherwise.
func (o *ZoneRp) GetNsGroup() string {
	if o == nil || IsNil(o.NsGroup) {
		var ret string
		return ret
	}
	return *o.NsGroup
}

// GetNsGroupOk returns a tuple with the NsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetNsGroupOk() (*string, bool) {
	if o == nil || IsNil(o.NsGroup) {
		return nil, false
	}
	return o.NsGroup, true
}

// HasNsGroup returns a boolean if a field has been set.
func (o *ZoneRp) HasNsGroup() bool {
	if o != nil && !IsNil(o.NsGroup) {
		return true
	}

	return false
}

// SetNsGroup gets a reference to the given string and assigns it to the NsGroup field.
func (o *ZoneRp) SetNsGroup(v string) {
	o.NsGroup = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ZoneRp) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ZoneRp) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *ZoneRp) SetParent(v string) {
	o.Parent = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ZoneRp) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ZoneRp) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ZoneRp) SetPrefix(v string) {
	o.Prefix = &v
}

// GetPrimaryType returns the PrimaryType field value if set, zero value otherwise.
func (o *ZoneRp) GetPrimaryType() string {
	if o == nil || IsNil(o.PrimaryType) {
		var ret string
		return ret
	}
	return *o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetPrimaryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryType) {
		return nil, false
	}
	return o.PrimaryType, true
}

// HasPrimaryType returns a boolean if a field has been set.
func (o *ZoneRp) HasPrimaryType() bool {
	if o != nil && !IsNil(o.PrimaryType) {
		return true
	}

	return false
}

// SetPrimaryType gets a reference to the given string and assigns it to the PrimaryType field.
func (o *ZoneRp) SetPrimaryType(v string) {
	o.PrimaryType = &v
}

// GetRecordNamePolicy returns the RecordNamePolicy field value if set, zero value otherwise.
func (o *ZoneRp) GetRecordNamePolicy() string {
	if o == nil || IsNil(o.RecordNamePolicy) {
		var ret string
		return ret
	}
	return *o.RecordNamePolicy
}

// GetRecordNamePolicyOk returns a tuple with the RecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRecordNamePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RecordNamePolicy) {
		return nil, false
	}
	return o.RecordNamePolicy, true
}

// HasRecordNamePolicy returns a boolean if a field has been set.
func (o *ZoneRp) HasRecordNamePolicy() bool {
	if o != nil && !IsNil(o.RecordNamePolicy) {
		return true
	}

	return false
}

// SetRecordNamePolicy gets a reference to the given string and assigns it to the RecordNamePolicy field.
func (o *ZoneRp) SetRecordNamePolicy(v string) {
	o.RecordNamePolicy = &v
}

// GetRpzDropIpRuleEnabled returns the RpzDropIpRuleEnabled field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzDropIpRuleEnabled() bool {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		var ret bool
		return ret
	}
	return *o.RpzDropIpRuleEnabled
}

// GetRpzDropIpRuleEnabledOk returns a tuple with the RpzDropIpRuleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzDropIpRuleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleEnabled) {
		return nil, false
	}
	return o.RpzDropIpRuleEnabled, true
}

// HasRpzDropIpRuleEnabled returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzDropIpRuleEnabled() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleEnabled) {
		return true
	}

	return false
}

// SetRpzDropIpRuleEnabled gets a reference to the given bool and assigns it to the RpzDropIpRuleEnabled field.
func (o *ZoneRp) SetRpzDropIpRuleEnabled(v bool) {
	o.RpzDropIpRuleEnabled = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv4 returns the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzDropIpRuleMinPrefixLengthIpv4() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv4
}

// GetRpzDropIpRuleMinPrefixLengthIpv4Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzDropIpRuleMinPrefixLengthIpv4Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv4, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv4 returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzDropIpRuleMinPrefixLengthIpv4() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv4 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv4 field.
func (o *ZoneRp) SetRpzDropIpRuleMinPrefixLengthIpv4(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv4 = &v
}

// GetRpzDropIpRuleMinPrefixLengthIpv6 returns the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzDropIpRuleMinPrefixLengthIpv6() int64 {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		var ret int64
		return ret
	}
	return *o.RpzDropIpRuleMinPrefixLengthIpv6
}

// GetRpzDropIpRuleMinPrefixLengthIpv6Ok returns a tuple with the RpzDropIpRuleMinPrefixLengthIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzDropIpRuleMinPrefixLengthIpv6Ok() (*int64, bool) {
	if o == nil || IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return nil, false
	}
	return o.RpzDropIpRuleMinPrefixLengthIpv6, true
}

// HasRpzDropIpRuleMinPrefixLengthIpv6 returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzDropIpRuleMinPrefixLengthIpv6() bool {
	if o != nil && !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		return true
	}

	return false
}

// SetRpzDropIpRuleMinPrefixLengthIpv6 gets a reference to the given int64 and assigns it to the RpzDropIpRuleMinPrefixLengthIpv6 field.
func (o *ZoneRp) SetRpzDropIpRuleMinPrefixLengthIpv6(v int64) {
	o.RpzDropIpRuleMinPrefixLengthIpv6 = &v
}

// GetRpzLastUpdatedTime returns the RpzLastUpdatedTime field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzLastUpdatedTime() int64 {
	if o == nil || IsNil(o.RpzLastUpdatedTime) {
		var ret int64
		return ret
	}
	return *o.RpzLastUpdatedTime
}

// GetRpzLastUpdatedTimeOk returns a tuple with the RpzLastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzLastUpdatedTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RpzLastUpdatedTime) {
		return nil, false
	}
	return o.RpzLastUpdatedTime, true
}

// HasRpzLastUpdatedTime returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzLastUpdatedTime() bool {
	if o != nil && !IsNil(o.RpzLastUpdatedTime) {
		return true
	}

	return false
}

// SetRpzLastUpdatedTime gets a reference to the given int64 and assigns it to the RpzLastUpdatedTime field.
func (o *ZoneRp) SetRpzLastUpdatedTime(v int64) {
	o.RpzLastUpdatedTime = &v
}

// GetRpzPolicy returns the RpzPolicy field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzPolicy() string {
	if o == nil || IsNil(o.RpzPolicy) {
		var ret string
		return ret
	}
	return *o.RpzPolicy
}

// GetRpzPolicyOk returns a tuple with the RpzPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RpzPolicy) {
		return nil, false
	}
	return o.RpzPolicy, true
}

// HasRpzPolicy returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzPolicy() bool {
	if o != nil && !IsNil(o.RpzPolicy) {
		return true
	}

	return false
}

// SetRpzPolicy gets a reference to the given string and assigns it to the RpzPolicy field.
func (o *ZoneRp) SetRpzPolicy(v string) {
	o.RpzPolicy = &v
}

// GetRpzPriority returns the RpzPriority field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzPriority() int64 {
	if o == nil || IsNil(o.RpzPriority) {
		var ret int64
		return ret
	}
	return *o.RpzPriority
}

// GetRpzPriorityOk returns a tuple with the RpzPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.RpzPriority) {
		return nil, false
	}
	return o.RpzPriority, true
}

// HasRpzPriority returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzPriority() bool {
	if o != nil && !IsNil(o.RpzPriority) {
		return true
	}

	return false
}

// SetRpzPriority gets a reference to the given int64 and assigns it to the RpzPriority field.
func (o *ZoneRp) SetRpzPriority(v int64) {
	o.RpzPriority = &v
}

// GetRpzPriorityEnd returns the RpzPriorityEnd field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzPriorityEnd() int64 {
	if o == nil || IsNil(o.RpzPriorityEnd) {
		var ret int64
		return ret
	}
	return *o.RpzPriorityEnd
}

// GetRpzPriorityEndOk returns a tuple with the RpzPriorityEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzPriorityEndOk() (*int64, bool) {
	if o == nil || IsNil(o.RpzPriorityEnd) {
		return nil, false
	}
	return o.RpzPriorityEnd, true
}

// HasRpzPriorityEnd returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzPriorityEnd() bool {
	if o != nil && !IsNil(o.RpzPriorityEnd) {
		return true
	}

	return false
}

// SetRpzPriorityEnd gets a reference to the given int64 and assigns it to the RpzPriorityEnd field.
func (o *ZoneRp) SetRpzPriorityEnd(v int64) {
	o.RpzPriorityEnd = &v
}

// GetRpzSeverity returns the RpzSeverity field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzSeverity() string {
	if o == nil || IsNil(o.RpzSeverity) {
		var ret string
		return ret
	}
	return *o.RpzSeverity
}

// GetRpzSeverityOk returns a tuple with the RpzSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.RpzSeverity) {
		return nil, false
	}
	return o.RpzSeverity, true
}

// HasRpzSeverity returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzSeverity() bool {
	if o != nil && !IsNil(o.RpzSeverity) {
		return true
	}

	return false
}

// SetRpzSeverity gets a reference to the given string and assigns it to the RpzSeverity field.
func (o *ZoneRp) SetRpzSeverity(v string) {
	o.RpzSeverity = &v
}

// GetRpzType returns the RpzType field value if set, zero value otherwise.
func (o *ZoneRp) GetRpzType() string {
	if o == nil || IsNil(o.RpzType) {
		var ret string
		return ret
	}
	return *o.RpzType
}

// GetRpzTypeOk returns a tuple with the RpzType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetRpzTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RpzType) {
		return nil, false
	}
	return o.RpzType, true
}

// HasRpzType returns a boolean if a field has been set.
func (o *ZoneRp) HasRpzType() bool {
	if o != nil && !IsNil(o.RpzType) {
		return true
	}

	return false
}

// SetRpzType gets a reference to the given string and assigns it to the RpzType field.
func (o *ZoneRp) SetRpzType(v string) {
	o.RpzType = &v
}

// GetSetSoaSerialNumber returns the SetSoaSerialNumber field value if set, zero value otherwise.
func (o *ZoneRp) GetSetSoaSerialNumber() bool {
	if o == nil || IsNil(o.SetSoaSerialNumber) {
		var ret bool
		return ret
	}
	return *o.SetSoaSerialNumber
}

// GetSetSoaSerialNumberOk returns a tuple with the SetSoaSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSetSoaSerialNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.SetSoaSerialNumber) {
		return nil, false
	}
	return o.SetSoaSerialNumber, true
}

// HasSetSoaSerialNumber returns a boolean if a field has been set.
func (o *ZoneRp) HasSetSoaSerialNumber() bool {
	if o != nil && !IsNil(o.SetSoaSerialNumber) {
		return true
	}

	return false
}

// SetSetSoaSerialNumber gets a reference to the given bool and assigns it to the SetSoaSerialNumber field.
func (o *ZoneRp) SetSetSoaSerialNumber(v bool) {
	o.SetSoaSerialNumber = &v
}

// GetSoaDefaultTtl returns the SoaDefaultTtl field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaDefaultTtl() int64 {
	if o == nil || IsNil(o.SoaDefaultTtl) {
		var ret int64
		return ret
	}
	return *o.SoaDefaultTtl
}

// GetSoaDefaultTtlOk returns a tuple with the SoaDefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaDefaultTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaDefaultTtl) {
		return nil, false
	}
	return o.SoaDefaultTtl, true
}

// HasSoaDefaultTtl returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaDefaultTtl() bool {
	if o != nil && !IsNil(o.SoaDefaultTtl) {
		return true
	}

	return false
}

// SetSoaDefaultTtl gets a reference to the given int64 and assigns it to the SoaDefaultTtl field.
func (o *ZoneRp) SetSoaDefaultTtl(v int64) {
	o.SoaDefaultTtl = &v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *ZoneRp) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetSoaExpire returns the SoaExpire field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaExpire() int64 {
	if o == nil || IsNil(o.SoaExpire) {
		var ret int64
		return ret
	}
	return *o.SoaExpire
}

// GetSoaExpireOk returns a tuple with the SoaExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaExpireOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaExpire) {
		return nil, false
	}
	return o.SoaExpire, true
}

// HasSoaExpire returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaExpire() bool {
	if o != nil && !IsNil(o.SoaExpire) {
		return true
	}

	return false
}

// SetSoaExpire gets a reference to the given int64 and assigns it to the SoaExpire field.
func (o *ZoneRp) SetSoaExpire(v int64) {
	o.SoaExpire = &v
}

// GetSoaNegativeTtl returns the SoaNegativeTtl field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaNegativeTtl() int64 {
	if o == nil || IsNil(o.SoaNegativeTtl) {
		var ret int64
		return ret
	}
	return *o.SoaNegativeTtl
}

// GetSoaNegativeTtlOk returns a tuple with the SoaNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaNegativeTtl) {
		return nil, false
	}
	return o.SoaNegativeTtl, true
}

// HasSoaNegativeTtl returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaNegativeTtl() bool {
	if o != nil && !IsNil(o.SoaNegativeTtl) {
		return true
	}

	return false
}

// SetSoaNegativeTtl gets a reference to the given int64 and assigns it to the SoaNegativeTtl field.
func (o *ZoneRp) SetSoaNegativeTtl(v int64) {
	o.SoaNegativeTtl = &v
}

// GetSoaRefresh returns the SoaRefresh field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaRefresh() int64 {
	if o == nil || IsNil(o.SoaRefresh) {
		var ret int64
		return ret
	}
	return *o.SoaRefresh
}

// GetSoaRefreshOk returns a tuple with the SoaRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaRefreshOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaRefresh) {
		return nil, false
	}
	return o.SoaRefresh, true
}

// HasSoaRefresh returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaRefresh() bool {
	if o != nil && !IsNil(o.SoaRefresh) {
		return true
	}

	return false
}

// SetSoaRefresh gets a reference to the given int64 and assigns it to the SoaRefresh field.
func (o *ZoneRp) SetSoaRefresh(v int64) {
	o.SoaRefresh = &v
}

// GetSoaRetry returns the SoaRetry field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaRetry() int64 {
	if o == nil || IsNil(o.SoaRetry) {
		var ret int64
		return ret
	}
	return *o.SoaRetry
}

// GetSoaRetryOk returns a tuple with the SoaRetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaRetryOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaRetry) {
		return nil, false
	}
	return o.SoaRetry, true
}

// HasSoaRetry returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaRetry() bool {
	if o != nil && !IsNil(o.SoaRetry) {
		return true
	}

	return false
}

// SetSoaRetry gets a reference to the given int64 and assigns it to the SoaRetry field.
func (o *ZoneRp) SetSoaRetry(v int64) {
	o.SoaRetry = &v
}

// GetSoaSerial returns the SoaSerial field value if set, zero value otherwise.
func (o *ZoneRp) GetSoaSerial() int64 {
	if o == nil || IsNil(o.SoaSerial) {
		var ret int64
		return ret
	}
	return *o.SoaSerial
}

// GetSoaSerialOk returns a tuple with the SoaSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSoaSerialOk() (*int64, bool) {
	if o == nil || IsNil(o.SoaSerial) {
		return nil, false
	}
	return o.SoaSerial, true
}

// HasSoaSerial returns a boolean if a field has been set.
func (o *ZoneRp) HasSoaSerial() bool {
	if o != nil && !IsNil(o.SoaSerial) {
		return true
	}

	return false
}

// SetSoaSerial gets a reference to the given int64 and assigns it to the SoaSerial field.
func (o *ZoneRp) SetSoaSerial(v int64) {
	o.SoaSerial = &v
}

// GetSubstituteName returns the SubstituteName field value if set, zero value otherwise.
func (o *ZoneRp) GetSubstituteName() string {
	if o == nil || IsNil(o.SubstituteName) {
		var ret string
		return ret
	}
	return *o.SubstituteName
}

// GetSubstituteNameOk returns a tuple with the SubstituteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetSubstituteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubstituteName) {
		return nil, false
	}
	return o.SubstituteName, true
}

// HasSubstituteName returns a boolean if a field has been set.
func (o *ZoneRp) HasSubstituteName() bool {
	if o != nil && !IsNil(o.SubstituteName) {
		return true
	}

	return false
}

// SetSubstituteName gets a reference to the given string and assigns it to the SubstituteName field.
func (o *ZoneRp) SetSubstituteName(v string) {
	o.SubstituteName = &v
}

// GetUseExternalPrimary returns the UseExternalPrimary field value if set, zero value otherwise.
func (o *ZoneRp) GetUseExternalPrimary() bool {
	if o == nil || IsNil(o.UseExternalPrimary) {
		var ret bool
		return ret
	}
	return *o.UseExternalPrimary
}

// GetUseExternalPrimaryOk returns a tuple with the UseExternalPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseExternalPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseExternalPrimary) {
		return nil, false
	}
	return o.UseExternalPrimary, true
}

// HasUseExternalPrimary returns a boolean if a field has been set.
func (o *ZoneRp) HasUseExternalPrimary() bool {
	if o != nil && !IsNil(o.UseExternalPrimary) {
		return true
	}

	return false
}

// SetUseExternalPrimary gets a reference to the given bool and assigns it to the UseExternalPrimary field.
func (o *ZoneRp) SetUseExternalPrimary(v bool) {
	o.UseExternalPrimary = &v
}

// GetUseGridZoneTimer returns the UseGridZoneTimer field value if set, zero value otherwise.
func (o *ZoneRp) GetUseGridZoneTimer() bool {
	if o == nil || IsNil(o.UseGridZoneTimer) {
		var ret bool
		return ret
	}
	return *o.UseGridZoneTimer
}

// GetUseGridZoneTimerOk returns a tuple with the UseGridZoneTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseGridZoneTimerOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGridZoneTimer) {
		return nil, false
	}
	return o.UseGridZoneTimer, true
}

// HasUseGridZoneTimer returns a boolean if a field has been set.
func (o *ZoneRp) HasUseGridZoneTimer() bool {
	if o != nil && !IsNil(o.UseGridZoneTimer) {
		return true
	}

	return false
}

// SetUseGridZoneTimer gets a reference to the given bool and assigns it to the UseGridZoneTimer field.
func (o *ZoneRp) SetUseGridZoneTimer(v bool) {
	o.UseGridZoneTimer = &v
}

// GetUseLogRpz returns the UseLogRpz field value if set, zero value otherwise.
func (o *ZoneRp) GetUseLogRpz() bool {
	if o == nil || IsNil(o.UseLogRpz) {
		var ret bool
		return ret
	}
	return *o.UseLogRpz
}

// GetUseLogRpzOk returns a tuple with the UseLogRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseLogRpzOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogRpz) {
		return nil, false
	}
	return o.UseLogRpz, true
}

// HasUseLogRpz returns a boolean if a field has been set.
func (o *ZoneRp) HasUseLogRpz() bool {
	if o != nil && !IsNil(o.UseLogRpz) {
		return true
	}

	return false
}

// SetUseLogRpz gets a reference to the given bool and assigns it to the UseLogRpz field.
func (o *ZoneRp) SetUseLogRpz(v bool) {
	o.UseLogRpz = &v
}

// GetUseRecordNamePolicy returns the UseRecordNamePolicy field value if set, zero value otherwise.
func (o *ZoneRp) GetUseRecordNamePolicy() bool {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		var ret bool
		return ret
	}
	return *o.UseRecordNamePolicy
}

// GetUseRecordNamePolicyOk returns a tuple with the UseRecordNamePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseRecordNamePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecordNamePolicy) {
		return nil, false
	}
	return o.UseRecordNamePolicy, true
}

// HasUseRecordNamePolicy returns a boolean if a field has been set.
func (o *ZoneRp) HasUseRecordNamePolicy() bool {
	if o != nil && !IsNil(o.UseRecordNamePolicy) {
		return true
	}

	return false
}

// SetUseRecordNamePolicy gets a reference to the given bool and assigns it to the UseRecordNamePolicy field.
func (o *ZoneRp) SetUseRecordNamePolicy(v bool) {
	o.UseRecordNamePolicy = &v
}

// GetUseRpzDropIpRule returns the UseRpzDropIpRule field value if set, zero value otherwise.
func (o *ZoneRp) GetUseRpzDropIpRule() bool {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		var ret bool
		return ret
	}
	return *o.UseRpzDropIpRule
}

// GetUseRpzDropIpRuleOk returns a tuple with the UseRpzDropIpRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseRpzDropIpRuleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRpzDropIpRule) {
		return nil, false
	}
	return o.UseRpzDropIpRule, true
}

// HasUseRpzDropIpRule returns a boolean if a field has been set.
func (o *ZoneRp) HasUseRpzDropIpRule() bool {
	if o != nil && !IsNil(o.UseRpzDropIpRule) {
		return true
	}

	return false
}

// SetUseRpzDropIpRule gets a reference to the given bool and assigns it to the UseRpzDropIpRule field.
func (o *ZoneRp) SetUseRpzDropIpRule(v bool) {
	o.UseRpzDropIpRule = &v
}

// GetUseSoaEmail returns the UseSoaEmail field value if set, zero value otherwise.
func (o *ZoneRp) GetUseSoaEmail() bool {
	if o == nil || IsNil(o.UseSoaEmail) {
		var ret bool
		return ret
	}
	return *o.UseSoaEmail
}

// GetUseSoaEmailOk returns a tuple with the UseSoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetUseSoaEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSoaEmail) {
		return nil, false
	}
	return o.UseSoaEmail, true
}

// HasUseSoaEmail returns a boolean if a field has been set.
func (o *ZoneRp) HasUseSoaEmail() bool {
	if o != nil && !IsNil(o.UseSoaEmail) {
		return true
	}

	return false
}

// SetUseSoaEmail gets a reference to the given bool and assigns it to the UseSoaEmail field.
func (o *ZoneRp) SetUseSoaEmail(v bool) {
	o.UseSoaEmail = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *ZoneRp) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRp) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *ZoneRp) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *ZoneRp) SetView(v string) {
	o.View = &v
}

func (o ZoneRp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneRp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.DisplayDomain) {
		toSerialize["display_domain"] = o.DisplayDomain
	}
	if !IsNil(o.DnsSoaEmail) {
		toSerialize["dns_soa_email"] = o.DnsSoaEmail
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.FireeyeRuleMapping) {
		toSerialize["fireeye_rule_mapping"] = o.FireeyeRuleMapping
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.GridPrimary) {
		toSerialize["grid_primary"] = o.GridPrimary
	}
	if !IsNil(o.GridSecondaries) {
		toSerialize["grid_secondaries"] = o.GridSecondaries
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.LogRpz) {
		toSerialize["log_rpz"] = o.LogRpz
	}
	if !IsNil(o.MaskPrefix) {
		toSerialize["mask_prefix"] = o.MaskPrefix
	}
	if !IsNil(o.MemberSoaMnames) {
		toSerialize["member_soa_mnames"] = o.MemberSoaMnames
	}
	if !IsNil(o.MemberSoaSerials) {
		toSerialize["member_soa_serials"] = o.MemberSoaSerials
	}
	if !IsNil(o.NetworkView) {
		toSerialize["network_view"] = o.NetworkView
	}
	if !IsNil(o.NsGroup) {
		toSerialize["ns_group"] = o.NsGroup
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.PrimaryType) {
		toSerialize["primary_type"] = o.PrimaryType
	}
	if !IsNil(o.RecordNamePolicy) {
		toSerialize["record_name_policy"] = o.RecordNamePolicy
	}
	if !IsNil(o.RpzDropIpRuleEnabled) {
		toSerialize["rpz_drop_ip_rule_enabled"] = o.RpzDropIpRuleEnabled
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv4) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv4"] = o.RpzDropIpRuleMinPrefixLengthIpv4
	}
	if !IsNil(o.RpzDropIpRuleMinPrefixLengthIpv6) {
		toSerialize["rpz_drop_ip_rule_min_prefix_length_ipv6"] = o.RpzDropIpRuleMinPrefixLengthIpv6
	}
	if !IsNil(o.RpzLastUpdatedTime) {
		toSerialize["rpz_last_updated_time"] = o.RpzLastUpdatedTime
	}
	if !IsNil(o.RpzPolicy) {
		toSerialize["rpz_policy"] = o.RpzPolicy
	}
	if !IsNil(o.RpzPriority) {
		toSerialize["rpz_priority"] = o.RpzPriority
	}
	if !IsNil(o.RpzPriorityEnd) {
		toSerialize["rpz_priority_end"] = o.RpzPriorityEnd
	}
	if !IsNil(o.RpzSeverity) {
		toSerialize["rpz_severity"] = o.RpzSeverity
	}
	if !IsNil(o.RpzType) {
		toSerialize["rpz_type"] = o.RpzType
	}
	if !IsNil(o.SetSoaSerialNumber) {
		toSerialize["set_soa_serial_number"] = o.SetSoaSerialNumber
	}
	if !IsNil(o.SoaDefaultTtl) {
		toSerialize["soa_default_ttl"] = o.SoaDefaultTtl
	}
	if !IsNil(o.SoaEmail) {
		toSerialize["soa_email"] = o.SoaEmail
	}
	if !IsNil(o.SoaExpire) {
		toSerialize["soa_expire"] = o.SoaExpire
	}
	if !IsNil(o.SoaNegativeTtl) {
		toSerialize["soa_negative_ttl"] = o.SoaNegativeTtl
	}
	if !IsNil(o.SoaRefresh) {
		toSerialize["soa_refresh"] = o.SoaRefresh
	}
	if !IsNil(o.SoaRetry) {
		toSerialize["soa_retry"] = o.SoaRetry
	}
	if !IsNil(o.SoaSerial) {
		toSerialize["soa_serial_number"] = o.SoaSerial
	}
	if !IsNil(o.SubstituteName) {
		toSerialize["substitute_name"] = o.SubstituteName
	}
	if !IsNil(o.UseExternalPrimary) {
		toSerialize["use_external_primary"] = o.UseExternalPrimary
	}
	if !IsNil(o.UseGridZoneTimer) {
		toSerialize["use_grid_zone_timer"] = o.UseGridZoneTimer
	}
	if !IsNil(o.UseLogRpz) {
		toSerialize["use_log_rpz"] = o.UseLogRpz
	}
	if !IsNil(o.UseRecordNamePolicy) {
		toSerialize["use_record_name_policy"] = o.UseRecordNamePolicy
	}
	if !IsNil(o.UseRpzDropIpRule) {
		toSerialize["use_rpz_drop_ip_rule"] = o.UseRpzDropIpRule
	}
	if !IsNil(o.UseSoaEmail) {
		toSerialize["use_soa_email"] = o.UseSoaEmail
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableZoneRp struct {
	value *ZoneRp
	isSet bool
}

func (v NullableZoneRp) Get() *ZoneRp {
	return v.value
}

func (v *NullableZoneRp) Set(val *ZoneRp) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRp) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRp(val *ZoneRp) *NullableZoneRp {
	return &NullableZoneRp{value: val, isSet: true}
}

func (v NullableZoneRp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
