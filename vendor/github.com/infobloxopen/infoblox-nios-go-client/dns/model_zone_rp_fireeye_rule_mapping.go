/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneRpFireeyeRuleMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneRpFireeyeRuleMapping{}

// ZoneRpFireeyeRuleMapping struct for ZoneRpFireeyeRuleMapping
type ZoneRpFireeyeRuleMapping struct {
	// The override setting for APT alerts.
	AptOverride *string `json:"apt_override,omitempty"`
	// The FireEye alert mapping.
	FireeyeAlertMapping []ZonerpfireeyerulemappingFireeyeAlertMapping `json:"fireeye_alert_mapping,omitempty"`
	// The domain name to be substituted, this is applicable only when apt_override is set to \"SUBSTITUTE\".
	SubstitutedDomainName *string `json:"substituted_domain_name,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _ZoneRpFireeyeRuleMapping ZoneRpFireeyeRuleMapping

// NewZoneRpFireeyeRuleMapping instantiates a new ZoneRpFireeyeRuleMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneRpFireeyeRuleMapping() *ZoneRpFireeyeRuleMapping {
	this := ZoneRpFireeyeRuleMapping{}
	return &this
}

// NewZoneRpFireeyeRuleMappingWithDefaults instantiates a new ZoneRpFireeyeRuleMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneRpFireeyeRuleMappingWithDefaults() *ZoneRpFireeyeRuleMapping {
	this := ZoneRpFireeyeRuleMapping{}
	return &this
}

// GetAptOverride returns the AptOverride field value if set, zero value otherwise.
func (o *ZoneRpFireeyeRuleMapping) GetAptOverride() string {
	if o == nil || IsNil(o.AptOverride) {
		var ret string
		return ret
	}
	return *o.AptOverride
}

// GetAptOverrideOk returns a tuple with the AptOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpFireeyeRuleMapping) GetAptOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.AptOverride) {
		return nil, false
	}
	return o.AptOverride, true
}

// HasAptOverride returns a boolean if a field has been set.
func (o *ZoneRpFireeyeRuleMapping) HasAptOverride() bool {
	if o != nil && !IsNil(o.AptOverride) {
		return true
	}

	return false
}

// SetAptOverride gets a reference to the given string and assigns it to the AptOverride field.
func (o *ZoneRpFireeyeRuleMapping) SetAptOverride(v string) {
	o.AptOverride = &v
}

// GetFireeyeAlertMapping returns the FireeyeAlertMapping field value if set, zero value otherwise.
func (o *ZoneRpFireeyeRuleMapping) GetFireeyeAlertMapping() []ZonerpfireeyerulemappingFireeyeAlertMapping {
	if o == nil || IsNil(o.FireeyeAlertMapping) {
		var ret []ZonerpfireeyerulemappingFireeyeAlertMapping
		return ret
	}
	return o.FireeyeAlertMapping
}

// GetFireeyeAlertMappingOk returns a tuple with the FireeyeAlertMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpFireeyeRuleMapping) GetFireeyeAlertMappingOk() ([]ZonerpfireeyerulemappingFireeyeAlertMapping, bool) {
	if o == nil || IsNil(o.FireeyeAlertMapping) {
		return nil, false
	}
	return o.FireeyeAlertMapping, true
}

// HasFireeyeAlertMapping returns a boolean if a field has been set.
func (o *ZoneRpFireeyeRuleMapping) HasFireeyeAlertMapping() bool {
	if o != nil && !IsNil(o.FireeyeAlertMapping) {
		return true
	}

	return false
}

// SetFireeyeAlertMapping gets a reference to the given []ZonerpfireeyerulemappingFireeyeAlertMapping and assigns it to the FireeyeAlertMapping field.
func (o *ZoneRpFireeyeRuleMapping) SetFireeyeAlertMapping(v []ZonerpfireeyerulemappingFireeyeAlertMapping) {
	o.FireeyeAlertMapping = v
}

// GetSubstitutedDomainName returns the SubstitutedDomainName field value if set, zero value otherwise.
func (o *ZoneRpFireeyeRuleMapping) GetSubstitutedDomainName() string {
	if o == nil || IsNil(o.SubstitutedDomainName) {
		var ret string
		return ret
	}
	return *o.SubstitutedDomainName
}

// GetSubstitutedDomainNameOk returns a tuple with the SubstitutedDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRpFireeyeRuleMapping) GetSubstitutedDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubstitutedDomainName) {
		return nil, false
	}
	return o.SubstitutedDomainName, true
}

// HasSubstitutedDomainName returns a boolean if a field has been set.
func (o *ZoneRpFireeyeRuleMapping) HasSubstitutedDomainName() bool {
	if o != nil && !IsNil(o.SubstitutedDomainName) {
		return true
	}

	return false
}

// SetSubstitutedDomainName gets a reference to the given string and assigns it to the SubstitutedDomainName field.
func (o *ZoneRpFireeyeRuleMapping) SetSubstitutedDomainName(v string) {
	o.SubstitutedDomainName = &v
}

func (o ZoneRpFireeyeRuleMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneRpFireeyeRuleMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AptOverride) {
		toSerialize["apt_override"] = o.AptOverride
	}
	if !IsNil(o.FireeyeAlertMapping) {
		toSerialize["fireeye_alert_mapping"] = o.FireeyeAlertMapping
	}
	if !IsNil(o.SubstitutedDomainName) {
		toSerialize["substituted_domain_name"] = o.SubstitutedDomainName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneRpFireeyeRuleMapping) UnmarshalJSON(data []byte) (err error) {
	varZoneRpFireeyeRuleMapping := _ZoneRpFireeyeRuleMapping{}

	err = json.Unmarshal(data, &varZoneRpFireeyeRuleMapping)

	if err != nil {
		return err
	}

	*o = ZoneRpFireeyeRuleMapping(varZoneRpFireeyeRuleMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "apt_override")
		delete(additionalProperties, "fireeye_alert_mapping")
		delete(additionalProperties, "substituted_domain_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneRpFireeyeRuleMapping struct {
	value *ZoneRpFireeyeRuleMapping
	isSet bool
}

func (v NullableZoneRpFireeyeRuleMapping) Get() *ZoneRpFireeyeRuleMapping {
	return v.value
}

func (v *NullableZoneRpFireeyeRuleMapping) Set(val *ZoneRpFireeyeRuleMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRpFireeyeRuleMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRpFireeyeRuleMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRpFireeyeRuleMapping(val *ZoneRpFireeyeRuleMapping) *NullableZoneRpFireeyeRuleMapping {
	return &NullableZoneRpFireeyeRuleMapping{value: val, isSet: true}
}

func (v NullableZoneRpFireeyeRuleMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRpFireeyeRuleMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
