/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// CreateDtcMonitorIcmpResponse - struct for CreateDtcMonitorIcmpResponse
type CreateDtcMonitorIcmpResponse struct {
	CreateDtcMonitorIcmpResponseAsObject *CreateDtcMonitorIcmpResponseAsObject
	String                               *string
}

// CreateDtcMonitorIcmpResponseAsObjectAsCreateDtcMonitorIcmpResponse is a convenience function that returns CreateDtcMonitorIcmpResponseAsObject wrapped in CreateDtcMonitorIcmpResponse
func CreateDtcMonitorIcmpResponseAsObjectAsCreateDtcMonitorIcmpResponse(v *CreateDtcMonitorIcmpResponseAsObject) CreateDtcMonitorIcmpResponse {
	return CreateDtcMonitorIcmpResponse{
		CreateDtcMonitorIcmpResponseAsObject: v,
	}
}

// stringAsCreateDtcMonitorIcmpResponse is a convenience function that returns string wrapped in CreateDtcMonitorIcmpResponse
func StringAsCreateDtcMonitorIcmpResponse(v *string) CreateDtcMonitorIcmpResponse {
	return CreateDtcMonitorIcmpResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDtcMonitorIcmpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateDtcMonitorIcmpResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateDtcMonitorIcmpResponseAsObject)
	if err == nil {
		jsonCreateDtcMonitorIcmpResponseAsObject, _ := json.Marshal(dst.CreateDtcMonitorIcmpResponseAsObject)
		if string(jsonCreateDtcMonitorIcmpResponseAsObject) == "{}" { // empty struct
			dst.CreateDtcMonitorIcmpResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateDtcMonitorIcmpResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateDtcMonitorIcmpResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDtcMonitorIcmpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDtcMonitorIcmpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	if src.CreateDtcMonitorIcmpResponseAsObject != nil {
		return json.Marshal(&src.CreateDtcMonitorIcmpResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDtcMonitorIcmpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateDtcMonitorIcmpResponseAsObject != nil {
		return obj.CreateDtcMonitorIcmpResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateDtcMonitorIcmpResponse struct {
	value *CreateDtcMonitorIcmpResponse
	isSet bool
}

func (v NullableCreateDtcMonitorIcmpResponse) Get() *CreateDtcMonitorIcmpResponse {
	return v.value
}

func (v *NullableCreateDtcMonitorIcmpResponse) Set(val *CreateDtcMonitorIcmpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDtcMonitorIcmpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDtcMonitorIcmpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDtcMonitorIcmpResponse(val *CreateDtcMonitorIcmpResponse) *NullableCreateDtcMonitorIcmpResponse {
	return &NullableCreateDtcMonitorIcmpResponse{value: val, isSet: true}
}

func (v NullableCreateDtcMonitorIcmpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDtcMonitorIcmpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
