/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcLbdnHealth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcLbdnHealth{}

// DtcLbdnHealth struct for DtcLbdnHealth
type DtcLbdnHealth struct {
	// The availability color status.
	Availability *string `json:"availability,omitempty"`
	// The enabled state of the object.
	EnabledState *string `json:"enabled_state,omitempty"`
	// The textual description of the object's status.
	Description          *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DtcLbdnHealth DtcLbdnHealth

// NewDtcLbdnHealth instantiates a new DtcLbdnHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcLbdnHealth() *DtcLbdnHealth {
	this := DtcLbdnHealth{}
	return &this
}

// NewDtcLbdnHealthWithDefaults instantiates a new DtcLbdnHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcLbdnHealthWithDefaults() *DtcLbdnHealth {
	this := DtcLbdnHealth{}
	return &this
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *DtcLbdnHealth) GetAvailability() string {
	if o == nil || IsNil(o.Availability) {
		var ret string
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdnHealth) GetAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *DtcLbdnHealth) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given string and assigns it to the Availability field.
func (o *DtcLbdnHealth) SetAvailability(v string) {
	o.Availability = &v
}

// GetEnabledState returns the EnabledState field value if set, zero value otherwise.
func (o *DtcLbdnHealth) GetEnabledState() string {
	if o == nil || IsNil(o.EnabledState) {
		var ret string
		return ret
	}
	return *o.EnabledState
}

// GetEnabledStateOk returns a tuple with the EnabledState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdnHealth) GetEnabledStateOk() (*string, bool) {
	if o == nil || IsNil(o.EnabledState) {
		return nil, false
	}
	return o.EnabledState, true
}

// HasEnabledState returns a boolean if a field has been set.
func (o *DtcLbdnHealth) HasEnabledState() bool {
	if o != nil && !IsNil(o.EnabledState) {
		return true
	}

	return false
}

// SetEnabledState gets a reference to the given string and assigns it to the EnabledState field.
func (o *DtcLbdnHealth) SetEnabledState(v string) {
	o.EnabledState = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DtcLbdnHealth) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcLbdnHealth) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DtcLbdnHealth) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DtcLbdnHealth) SetDescription(v string) {
	o.Description = &v
}

func (o DtcLbdnHealth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcLbdnHealth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.EnabledState) {
		toSerialize["enabled_state"] = o.EnabledState
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DtcLbdnHealth) UnmarshalJSON(data []byte) (err error) {
	varDtcLbdnHealth := _DtcLbdnHealth{}

	err = json.Unmarshal(data, &varDtcLbdnHealth)

	if err != nil {
		return err
	}

	*o = DtcLbdnHealth(varDtcLbdnHealth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "availability")
		delete(additionalProperties, "enabled_state")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDtcLbdnHealth struct {
	value *DtcLbdnHealth
	isSet bool
}

func (v NullableDtcLbdnHealth) Get() *DtcLbdnHealth {
	return v.value
}

func (v *NullableDtcLbdnHealth) Set(val *DtcLbdnHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcLbdnHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcLbdnHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcLbdnHealth(val *DtcLbdnHealth) *NullableDtcLbdnHealth {
	return &NullableDtcLbdnHealth{value: val, isSet: true}
}

func (v NullableDtcLbdnHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcLbdnHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
