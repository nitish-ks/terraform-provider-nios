/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
)

// checks if the DtcObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcObject{}

// DtcObject struct for DtcObject
type DtcObject struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The abstract object type.
	AbstractType *string `json:"abstract_type,omitempty"`
	// The comment for the DTC object; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The display object type.
	DisplayType *string `json:"display_type,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of IPv4 addresses.
	Ipv4AddressList []string `json:"ipv4_address_list,omitempty"`
	// The list of IPv6 addresses.
	Ipv6AddressList []string `json:"ipv6_address_list,omitempty"`
	// The display name of the DTC object.
	Name *string `json:"name,omitempty"`
	// The specific DTC object.
	Object *string `json:"object,omitempty"`
	// The availability color status.
	Status *string `json:"status,omitempty"`
	// The timestamp when status or health was last determined.
	StatusTime *int64 `json:"status_time,omitempty"`
}

// NewDtcObject instantiates a new DtcObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcObject() *DtcObject {
	this := DtcObject{}
	return &this
}

// NewDtcObjectWithDefaults instantiates a new DtcObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcObjectWithDefaults() *DtcObject {
	this := DtcObject{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *DtcObject) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *DtcObject) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *DtcObject) SetRef(v string) {
	o.Ref = &v
}

// GetAbstractType returns the AbstractType field value if set, zero value otherwise.
func (o *DtcObject) GetAbstractType() string {
	if o == nil || IsNil(o.AbstractType) {
		var ret string
		return ret
	}
	return *o.AbstractType
}

// GetAbstractTypeOk returns a tuple with the AbstractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetAbstractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AbstractType) {
		return nil, false
	}
	return o.AbstractType, true
}

// HasAbstractType returns a boolean if a field has been set.
func (o *DtcObject) HasAbstractType() bool {
	if o != nil && !IsNil(o.AbstractType) {
		return true
	}

	return false
}

// SetAbstractType gets a reference to the given string and assigns it to the AbstractType field.
func (o *DtcObject) SetAbstractType(v string) {
	o.AbstractType = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DtcObject) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DtcObject) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DtcObject) SetComment(v string) {
	o.Comment = &v
}

// GetDisplayType returns the DisplayType field value if set, zero value otherwise.
func (o *DtcObject) GetDisplayType() string {
	if o == nil || IsNil(o.DisplayType) {
		var ret string
		return ret
	}
	return *o.DisplayType
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetDisplayTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayType) {
		return nil, false
	}
	return o.DisplayType, true
}

// HasDisplayType returns a boolean if a field has been set.
func (o *DtcObject) HasDisplayType() bool {
	if o != nil && !IsNil(o.DisplayType) {
		return true
	}

	return false
}

// SetDisplayType gets a reference to the given string and assigns it to the DisplayType field.
func (o *DtcObject) SetDisplayType(v string) {
	o.DisplayType = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *DtcObject) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *DtcObject) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *DtcObject) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetIpv4AddressList returns the Ipv4AddressList field value if set, zero value otherwise.
func (o *DtcObject) GetIpv4AddressList() []string {
	if o == nil || IsNil(o.Ipv4AddressList) {
		var ret []string
		return ret
	}
	return o.Ipv4AddressList
}

// GetIpv4AddressListOk returns a tuple with the Ipv4AddressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetIpv4AddressListOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv4AddressList) {
		return nil, false
	}
	return o.Ipv4AddressList, true
}

// HasIpv4AddressList returns a boolean if a field has been set.
func (o *DtcObject) HasIpv4AddressList() bool {
	if o != nil && !IsNil(o.Ipv4AddressList) {
		return true
	}

	return false
}

// SetIpv4AddressList gets a reference to the given []string and assigns it to the Ipv4AddressList field.
func (o *DtcObject) SetIpv4AddressList(v []string) {
	o.Ipv4AddressList = v
}

// GetIpv6AddressList returns the Ipv6AddressList field value if set, zero value otherwise.
func (o *DtcObject) GetIpv6AddressList() []string {
	if o == nil || IsNil(o.Ipv6AddressList) {
		var ret []string
		return ret
	}
	return o.Ipv6AddressList
}

// GetIpv6AddressListOk returns a tuple with the Ipv6AddressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetIpv6AddressListOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6AddressList) {
		return nil, false
	}
	return o.Ipv6AddressList, true
}

// HasIpv6AddressList returns a boolean if a field has been set.
func (o *DtcObject) HasIpv6AddressList() bool {
	if o != nil && !IsNil(o.Ipv6AddressList) {
		return true
	}

	return false
}

// SetIpv6AddressList gets a reference to the given []string and assigns it to the Ipv6AddressList field.
func (o *DtcObject) SetIpv6AddressList(v []string) {
	o.Ipv6AddressList = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtcObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtcObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtcObject) SetName(v string) {
	o.Name = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *DtcObject) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *DtcObject) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *DtcObject) SetObject(v string) {
	o.Object = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtcObject) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtcObject) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DtcObject) SetStatus(v string) {
	o.Status = &v
}

// GetStatusTime returns the StatusTime field value if set, zero value otherwise.
func (o *DtcObject) GetStatusTime() int64 {
	if o == nil || IsNil(o.StatusTime) {
		var ret int64
		return ret
	}
	return *o.StatusTime
}

// GetStatusTimeOk returns a tuple with the StatusTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcObject) GetStatusTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusTime) {
		return nil, false
	}
	return o.StatusTime, true
}

// HasStatusTime returns a boolean if a field has been set.
func (o *DtcObject) HasStatusTime() bool {
	if o != nil && !IsNil(o.StatusTime) {
		return true
	}

	return false
}

// SetStatusTime gets a reference to the given int64 and assigns it to the StatusTime field.
func (o *DtcObject) SetStatusTime(v int64) {
	o.StatusTime = &v
}

func (o DtcObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AbstractType) {
		toSerialize["abstract_type"] = o.AbstractType
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DisplayType) {
		toSerialize["display_type"] = o.DisplayType
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Ipv4AddressList) {
		toSerialize["ipv4_address_list"] = o.Ipv4AddressList
	}
	if !IsNil(o.Ipv6AddressList) {
		toSerialize["ipv6_address_list"] = o.Ipv6AddressList
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusTime) {
		toSerialize["status_time"] = o.StatusTime
	}
	return toSerialize, nil
}

type NullableDtcObject struct {
	value *DtcObject
	isSet bool
}

func (v NullableDtcObject) Get() *DtcObject {
	return v.value
}

func (v *NullableDtcObject) Set(val *DtcObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcObject(val *DtcObject) *NullableDtcObject {
	return &NullableDtcObject{value: val, isSet: true}
}

func (v NullableDtcObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
