/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcMonitorHttpResponse - struct for GetDtcMonitorHttpResponse
type GetDtcMonitorHttpResponse struct {
	DtcMonitorHttp                          *DtcMonitorHttp
	GetDtcMonitorHttpResponseObjectAsResult *GetDtcMonitorHttpResponseObjectAsResult
}

// DtcMonitorHttpAsGetDtcMonitorHttpResponse is a convenience function that returns DtcMonitorHttp wrapped in GetDtcMonitorHttpResponse
func DtcMonitorHttpAsGetDtcMonitorHttpResponse(v *DtcMonitorHttp) GetDtcMonitorHttpResponse {
	return GetDtcMonitorHttpResponse{
		DtcMonitorHttp: v,
	}
}

// GetDtcMonitorHttpResponseObjectAsResultAsGetDtcMonitorHttpResponse is a convenience function that returns GetDtcMonitorHttpResponseObjectAsResult wrapped in GetDtcMonitorHttpResponse
func GetDtcMonitorHttpResponseObjectAsResultAsGetDtcMonitorHttpResponse(v *GetDtcMonitorHttpResponseObjectAsResult) GetDtcMonitorHttpResponse {
	return GetDtcMonitorHttpResponse{
		GetDtcMonitorHttpResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcMonitorHttpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcMonitorHttp
	err = newStrictDecoder(data).Decode(&dst.DtcMonitorHttp)
	if err == nil {
		jsonDtcMonitorHttp, _ := json.Marshal(dst.DtcMonitorHttp)
		if string(jsonDtcMonitorHttp) == "{}" { // empty struct
			dst.DtcMonitorHttp = nil
		} else {
			match++
		}
	} else {
		dst.DtcMonitorHttp = nil
	}

	// try to unmarshal data into GetDtcMonitorHttpResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcMonitorHttpResponseObjectAsResult)
	if err == nil {
		jsonGetDtcMonitorHttpResponseObjectAsResult, _ := json.Marshal(dst.GetDtcMonitorHttpResponseObjectAsResult)
		if string(jsonGetDtcMonitorHttpResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcMonitorHttpResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcMonitorHttpResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcMonitorHttp = nil
		dst.GetDtcMonitorHttpResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcMonitorHttpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcMonitorHttpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcMonitorHttpResponse) MarshalJSON() ([]byte, error) {
	if src.DtcMonitorHttp != nil {
		return json.Marshal(&src.DtcMonitorHttp)
	}

	if src.GetDtcMonitorHttpResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcMonitorHttpResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcMonitorHttpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcMonitorHttp != nil {
		return obj.DtcMonitorHttp
	}

	if obj.GetDtcMonitorHttpResponseObjectAsResult != nil {
		return obj.GetDtcMonitorHttpResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcMonitorHttpResponse struct {
	value *GetDtcMonitorHttpResponse
	isSet bool
}

func (v NullableGetDtcMonitorHttpResponse) Get() *GetDtcMonitorHttpResponse {
	return v.value
}

func (v *NullableGetDtcMonitorHttpResponse) Set(val *GetDtcMonitorHttpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcMonitorHttpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcMonitorHttpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcMonitorHttpResponse(val *GetDtcMonitorHttpResponse) *NullableGetDtcMonitorHttpResponse {
	return &NullableGetDtcMonitorHttpResponse{value: val, isSet: true}
}

func (v NullableGetDtcMonitorHttpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcMonitorHttpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
