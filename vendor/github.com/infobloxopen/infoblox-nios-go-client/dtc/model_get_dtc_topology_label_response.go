/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcTopologyLabelResponse - struct for GetDtcTopologyLabelResponse
type GetDtcTopologyLabelResponse struct {
	DtcTopologyLabel                          *DtcTopologyLabel
	GetDtcTopologyLabelResponseObjectAsResult *GetDtcTopologyLabelResponseObjectAsResult
}

// DtcTopologyLabelAsGetDtcTopologyLabelResponse is a convenience function that returns DtcTopologyLabel wrapped in GetDtcTopologyLabelResponse
func DtcTopologyLabelAsGetDtcTopologyLabelResponse(v *DtcTopologyLabel) GetDtcTopologyLabelResponse {
	return GetDtcTopologyLabelResponse{
		DtcTopologyLabel: v,
	}
}

// GetDtcTopologyLabelResponseObjectAsResultAsGetDtcTopologyLabelResponse is a convenience function that returns GetDtcTopologyLabelResponseObjectAsResult wrapped in GetDtcTopologyLabelResponse
func GetDtcTopologyLabelResponseObjectAsResultAsGetDtcTopologyLabelResponse(v *GetDtcTopologyLabelResponseObjectAsResult) GetDtcTopologyLabelResponse {
	return GetDtcTopologyLabelResponse{
		GetDtcTopologyLabelResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcTopologyLabelResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcTopologyLabel
	err = newStrictDecoder(data).Decode(&dst.DtcTopologyLabel)
	if err == nil {
		jsonDtcTopologyLabel, _ := json.Marshal(dst.DtcTopologyLabel)
		if string(jsonDtcTopologyLabel) == "{}" { // empty struct
			dst.DtcTopologyLabel = nil
		} else {
			match++
		}
	} else {
		dst.DtcTopologyLabel = nil
	}

	// try to unmarshal data into GetDtcTopologyLabelResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcTopologyLabelResponseObjectAsResult)
	if err == nil {
		jsonGetDtcTopologyLabelResponseObjectAsResult, _ := json.Marshal(dst.GetDtcTopologyLabelResponseObjectAsResult)
		if string(jsonGetDtcTopologyLabelResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcTopologyLabelResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcTopologyLabelResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcTopologyLabel = nil
		dst.GetDtcTopologyLabelResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcTopologyLabelResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcTopologyLabelResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcTopologyLabelResponse) MarshalJSON() ([]byte, error) {
	if src.DtcTopologyLabel != nil {
		return json.Marshal(&src.DtcTopologyLabel)
	}

	if src.GetDtcTopologyLabelResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcTopologyLabelResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcTopologyLabelResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcTopologyLabel != nil {
		return obj.DtcTopologyLabel
	}

	if obj.GetDtcTopologyLabelResponseObjectAsResult != nil {
		return obj.GetDtcTopologyLabelResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcTopologyLabelResponse struct {
	value *GetDtcTopologyLabelResponse
	isSet bool
}

func (v NullableGetDtcTopologyLabelResponse) Get() *GetDtcTopologyLabelResponse {
	return v.value
}

func (v *NullableGetDtcTopologyLabelResponse) Set(val *GetDtcTopologyLabelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcTopologyLabelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcTopologyLabelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcTopologyLabelResponse(val *GetDtcTopologyLabelResponse) *NullableGetDtcTopologyLabelResponse {
	return &NullableGetDtcTopologyLabelResponse{value: val, isSet: true}
}

func (v NullableGetDtcTopologyLabelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcTopologyLabelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
