/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// GetDtcTopologyRuleResponse - struct for GetDtcTopologyRuleResponse
type GetDtcTopologyRuleResponse struct {
	DtcTopologyRule                          *DtcTopologyRule
	GetDtcTopologyRuleResponseObjectAsResult *GetDtcTopologyRuleResponseObjectAsResult
}

// DtcTopologyRuleAsGetDtcTopologyRuleResponse is a convenience function that returns DtcTopologyRule wrapped in GetDtcTopologyRuleResponse
func DtcTopologyRuleAsGetDtcTopologyRuleResponse(v *DtcTopologyRule) GetDtcTopologyRuleResponse {
	return GetDtcTopologyRuleResponse{
		DtcTopologyRule: v,
	}
}

// GetDtcTopologyRuleResponseObjectAsResultAsGetDtcTopologyRuleResponse is a convenience function that returns GetDtcTopologyRuleResponseObjectAsResult wrapped in GetDtcTopologyRuleResponse
func GetDtcTopologyRuleResponseObjectAsResultAsGetDtcTopologyRuleResponse(v *GetDtcTopologyRuleResponseObjectAsResult) GetDtcTopologyRuleResponse {
	return GetDtcTopologyRuleResponse{
		GetDtcTopologyRuleResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDtcTopologyRuleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DtcTopologyRule
	err = newStrictDecoder(data).Decode(&dst.DtcTopologyRule)
	if err == nil {
		jsonDtcTopologyRule, _ := json.Marshal(dst.DtcTopologyRule)
		if string(jsonDtcTopologyRule) == "{}" { // empty struct
			dst.DtcTopologyRule = nil
		} else {
			match++
		}
	} else {
		dst.DtcTopologyRule = nil
	}

	// try to unmarshal data into GetDtcTopologyRuleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDtcTopologyRuleResponseObjectAsResult)
	if err == nil {
		jsonGetDtcTopologyRuleResponseObjectAsResult, _ := json.Marshal(dst.GetDtcTopologyRuleResponseObjectAsResult)
		if string(jsonGetDtcTopologyRuleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDtcTopologyRuleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDtcTopologyRuleResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DtcTopologyRule = nil
		dst.GetDtcTopologyRuleResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDtcTopologyRuleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDtcTopologyRuleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDtcTopologyRuleResponse) MarshalJSON() ([]byte, error) {
	if src.DtcTopologyRule != nil {
		return json.Marshal(&src.DtcTopologyRule)
	}

	if src.GetDtcTopologyRuleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDtcTopologyRuleResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDtcTopologyRuleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DtcTopologyRule != nil {
		return obj.DtcTopologyRule
	}

	if obj.GetDtcTopologyRuleResponseObjectAsResult != nil {
		return obj.GetDtcTopologyRuleResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDtcTopologyRuleResponse struct {
	value *GetDtcTopologyRuleResponse
	isSet bool
}

func (v NullableGetDtcTopologyRuleResponse) Get() *GetDtcTopologyRuleResponse {
	return v.value
}

func (v *NullableGetDtcTopologyRuleResponse) Set(val *GetDtcTopologyRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDtcTopologyRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDtcTopologyRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDtcTopologyRuleResponse(val *GetDtcTopologyRuleResponse) *NullableGetDtcTopologyRuleResponse {
	return &NullableGetDtcTopologyRuleResponse{value: val, isSet: true}
}

func (v NullableGetDtcTopologyRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDtcTopologyRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
