/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcLbdnResponse - struct for ListDtcLbdnResponse
type ListDtcLbdnResponse struct {
	ListDtcLbdnResponseObject *ListDtcLbdnResponseObject
	ArrayOfDtcLbdn            *[]DtcLbdn
}

// ListDtcLbdnResponseObjectAsListDtcLbdnResponse is a convenience function that returns ListDtcLbdnResponseObject wrapped in ListDtcLbdnResponse
func ListDtcLbdnResponseObjectAsListDtcLbdnResponse(v *ListDtcLbdnResponseObject) ListDtcLbdnResponse {
	return ListDtcLbdnResponse{
		ListDtcLbdnResponseObject: v,
	}
}

// []DtcLbdnAsListDtcLbdnResponse is a convenience function that returns []DtcLbdn wrapped in ListDtcLbdnResponse
func ArrayOfDtcLbdnAsListDtcLbdnResponse(v *[]DtcLbdn) ListDtcLbdnResponse {
	return ListDtcLbdnResponse{
		ArrayOfDtcLbdn: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcLbdnResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcLbdnResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcLbdnResponseObject)
	if err == nil {
		jsonListDtcLbdnResponseObject, _ := json.Marshal(dst.ListDtcLbdnResponseObject)
		if string(jsonListDtcLbdnResponseObject) == "{}" { // empty struct
			dst.ListDtcLbdnResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcLbdnResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcLbdn
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcLbdn)
	if err == nil {
		jsonArrayOfDtcLbdn, _ := json.Marshal(dst.ArrayOfDtcLbdn)
		if string(jsonArrayOfDtcLbdn) == "{}" { // empty struct
			dst.ArrayOfDtcLbdn = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcLbdn = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcLbdnResponseObject = nil
		dst.ArrayOfDtcLbdn = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcLbdnResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcLbdnResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcLbdnResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcLbdnResponseObject != nil {
		return json.Marshal(&src.ListDtcLbdnResponseObject)
	}

	if src.ArrayOfDtcLbdn != nil {
		return json.Marshal(&src.ArrayOfDtcLbdn)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcLbdnResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcLbdnResponseObject != nil {
		return obj.ListDtcLbdnResponseObject
	}

	if obj.ArrayOfDtcLbdn != nil {
		return obj.ArrayOfDtcLbdn
	}

	// all schemas are nil
	return nil
}

type NullableListDtcLbdnResponse struct {
	value *ListDtcLbdnResponse
	isSet bool
}

func (v NullableListDtcLbdnResponse) Get() *ListDtcLbdnResponse {
	return v.value
}

func (v *NullableListDtcLbdnResponse) Set(val *ListDtcLbdnResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcLbdnResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcLbdnResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcLbdnResponse(val *ListDtcLbdnResponse) *NullableListDtcLbdnResponse {
	return &NullableListDtcLbdnResponse{value: val, isSet: true}
}

func (v NullableListDtcLbdnResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcLbdnResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
