/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcMonitorSnmpResponse - struct for ListDtcMonitorSnmpResponse
type ListDtcMonitorSnmpResponse struct {
	ListDtcMonitorSnmpResponseObject *ListDtcMonitorSnmpResponseObject
	ArrayOfDtcMonitorSnmp            *[]DtcMonitorSnmp
}

// ListDtcMonitorSnmpResponseObjectAsListDtcMonitorSnmpResponse is a convenience function that returns ListDtcMonitorSnmpResponseObject wrapped in ListDtcMonitorSnmpResponse
func ListDtcMonitorSnmpResponseObjectAsListDtcMonitorSnmpResponse(v *ListDtcMonitorSnmpResponseObject) ListDtcMonitorSnmpResponse {
	return ListDtcMonitorSnmpResponse{
		ListDtcMonitorSnmpResponseObject: v,
	}
}

// []DtcMonitorSnmpAsListDtcMonitorSnmpResponse is a convenience function that returns []DtcMonitorSnmp wrapped in ListDtcMonitorSnmpResponse
func ArrayOfDtcMonitorSnmpAsListDtcMonitorSnmpResponse(v *[]DtcMonitorSnmp) ListDtcMonitorSnmpResponse {
	return ListDtcMonitorSnmpResponse{
		ArrayOfDtcMonitorSnmp: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcMonitorSnmpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcMonitorSnmpResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcMonitorSnmpResponseObject)
	if err == nil {
		jsonListDtcMonitorSnmpResponseObject, _ := json.Marshal(dst.ListDtcMonitorSnmpResponseObject)
		if string(jsonListDtcMonitorSnmpResponseObject) == "{}" { // empty struct
			dst.ListDtcMonitorSnmpResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcMonitorSnmpResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcMonitorSnmp
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcMonitorSnmp)
	if err == nil {
		jsonArrayOfDtcMonitorSnmp, _ := json.Marshal(dst.ArrayOfDtcMonitorSnmp)
		if string(jsonArrayOfDtcMonitorSnmp) == "{}" { // empty struct
			dst.ArrayOfDtcMonitorSnmp = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcMonitorSnmp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcMonitorSnmpResponseObject = nil
		dst.ArrayOfDtcMonitorSnmp = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcMonitorSnmpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcMonitorSnmpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcMonitorSnmpResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcMonitorSnmpResponseObject != nil {
		return json.Marshal(&src.ListDtcMonitorSnmpResponseObject)
	}

	if src.ArrayOfDtcMonitorSnmp != nil {
		return json.Marshal(&src.ArrayOfDtcMonitorSnmp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcMonitorSnmpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcMonitorSnmpResponseObject != nil {
		return obj.ListDtcMonitorSnmpResponseObject
	}

	if obj.ArrayOfDtcMonitorSnmp != nil {
		return obj.ArrayOfDtcMonitorSnmp
	}

	// all schemas are nil
	return nil
}

type NullableListDtcMonitorSnmpResponse struct {
	value *ListDtcMonitorSnmpResponse
	isSet bool
}

func (v NullableListDtcMonitorSnmpResponse) Get() *ListDtcMonitorSnmpResponse {
	return v.value
}

func (v *NullableListDtcMonitorSnmpResponse) Set(val *ListDtcMonitorSnmpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcMonitorSnmpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcMonitorSnmpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcMonitorSnmpResponse(val *ListDtcMonitorSnmpResponse) *NullableListDtcMonitorSnmpResponse {
	return &NullableListDtcMonitorSnmpResponse{value: val, isSet: true}
}

func (v NullableListDtcMonitorSnmpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcMonitorSnmpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
