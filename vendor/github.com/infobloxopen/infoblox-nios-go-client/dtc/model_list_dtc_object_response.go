/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcObjectResponse - struct for ListDtcObjectResponse
type ListDtcObjectResponse struct {
	ListDtcObjectResponseObject *ListDtcObjectResponseObject
	ArrayOfDtcObject            *[]DtcObject
}

// ListDtcObjectResponseObjectAsListDtcObjectResponse is a convenience function that returns ListDtcObjectResponseObject wrapped in ListDtcObjectResponse
func ListDtcObjectResponseObjectAsListDtcObjectResponse(v *ListDtcObjectResponseObject) ListDtcObjectResponse {
	return ListDtcObjectResponse{
		ListDtcObjectResponseObject: v,
	}
}

// []DtcObjectAsListDtcObjectResponse is a convenience function that returns []DtcObject wrapped in ListDtcObjectResponse
func ArrayOfDtcObjectAsListDtcObjectResponse(v *[]DtcObject) ListDtcObjectResponse {
	return ListDtcObjectResponse{
		ArrayOfDtcObject: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcObjectResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcObjectResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcObjectResponseObject)
	if err == nil {
		jsonListDtcObjectResponseObject, _ := json.Marshal(dst.ListDtcObjectResponseObject)
		if string(jsonListDtcObjectResponseObject) == "{}" { // empty struct
			dst.ListDtcObjectResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcObjectResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcObject
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcObject)
	if err == nil {
		jsonArrayOfDtcObject, _ := json.Marshal(dst.ArrayOfDtcObject)
		if string(jsonArrayOfDtcObject) == "{}" { // empty struct
			dst.ArrayOfDtcObject = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcObjectResponseObject = nil
		dst.ArrayOfDtcObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcObjectResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcObjectResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcObjectResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcObjectResponseObject != nil {
		return json.Marshal(&src.ListDtcObjectResponseObject)
	}

	if src.ArrayOfDtcObject != nil {
		return json.Marshal(&src.ArrayOfDtcObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcObjectResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcObjectResponseObject != nil {
		return obj.ListDtcObjectResponseObject
	}

	if obj.ArrayOfDtcObject != nil {
		return obj.ArrayOfDtcObject
	}

	// all schemas are nil
	return nil
}

type NullableListDtcObjectResponse struct {
	value *ListDtcObjectResponse
	isSet bool
}

func (v NullableListDtcObjectResponse) Get() *ListDtcObjectResponse {
	return v.value
}

func (v *NullableListDtcObjectResponse) Set(val *ListDtcObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcObjectResponse(val *ListDtcObjectResponse) *NullableListDtcObjectResponse {
	return &NullableListDtcObjectResponse{value: val, isSet: true}
}

func (v NullableListDtcObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
