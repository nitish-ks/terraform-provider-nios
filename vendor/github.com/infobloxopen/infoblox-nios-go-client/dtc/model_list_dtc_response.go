/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcResponse - struct for ListDtcResponse
type ListDtcResponse struct {
	ListDtcResponseObject *ListDtcResponseObject
	ArrayOfDtc            *[]Dtc
}

// ListDtcResponseObjectAsListDtcResponse is a convenience function that returns ListDtcResponseObject wrapped in ListDtcResponse
func ListDtcResponseObjectAsListDtcResponse(v *ListDtcResponseObject) ListDtcResponse {
	return ListDtcResponse{
		ListDtcResponseObject: v,
	}
}

// []DtcAsListDtcResponse is a convenience function that returns []Dtc wrapped in ListDtcResponse
func ArrayOfDtcAsListDtcResponse(v *[]Dtc) ListDtcResponse {
	return ListDtcResponse{
		ArrayOfDtc: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcResponseObject)
	if err == nil {
		jsonListDtcResponseObject, _ := json.Marshal(dst.ListDtcResponseObject)
		if string(jsonListDtcResponseObject) == "{}" { // empty struct
			dst.ListDtcResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtc
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtc)
	if err == nil {
		jsonArrayOfDtc, _ := json.Marshal(dst.ArrayOfDtc)
		if string(jsonArrayOfDtc) == "{}" { // empty struct
			dst.ArrayOfDtc = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtc = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcResponseObject = nil
		dst.ArrayOfDtc = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcResponseObject != nil {
		return json.Marshal(&src.ListDtcResponseObject)
	}

	if src.ArrayOfDtc != nil {
		return json.Marshal(&src.ArrayOfDtc)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcResponseObject != nil {
		return obj.ListDtcResponseObject
	}

	if obj.ArrayOfDtc != nil {
		return obj.ArrayOfDtc
	}

	// all schemas are nil
	return nil
}

type NullableListDtcResponse struct {
	value *ListDtcResponse
	isSet bool
}

func (v NullableListDtcResponse) Get() *ListDtcResponse {
	return v.value
}

func (v *NullableListDtcResponse) Set(val *ListDtcResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcResponse(val *ListDtcResponse) *NullableListDtcResponse {
	return &NullableListDtcResponse{value: val, isSet: true}
}

func (v NullableListDtcResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
