/*
Infoblox DTC API

OpenAPI specification for Infoblox NIOS WAPI DTC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dtc

import (
	"encoding/json"
	"fmt"
)

// ListDtcTopologyLabelResponse - struct for ListDtcTopologyLabelResponse
type ListDtcTopologyLabelResponse struct {
	ListDtcTopologyLabelResponseObject *ListDtcTopologyLabelResponseObject
	ArrayOfDtcTopologyLabel            *[]DtcTopologyLabel
}

// ListDtcTopologyLabelResponseObjectAsListDtcTopologyLabelResponse is a convenience function that returns ListDtcTopologyLabelResponseObject wrapped in ListDtcTopologyLabelResponse
func ListDtcTopologyLabelResponseObjectAsListDtcTopologyLabelResponse(v *ListDtcTopologyLabelResponseObject) ListDtcTopologyLabelResponse {
	return ListDtcTopologyLabelResponse{
		ListDtcTopologyLabelResponseObject: v,
	}
}

// []DtcTopologyLabelAsListDtcTopologyLabelResponse is a convenience function that returns []DtcTopologyLabel wrapped in ListDtcTopologyLabelResponse
func ArrayOfDtcTopologyLabelAsListDtcTopologyLabelResponse(v *[]DtcTopologyLabel) ListDtcTopologyLabelResponse {
	return ListDtcTopologyLabelResponse{
		ArrayOfDtcTopologyLabel: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDtcTopologyLabelResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDtcTopologyLabelResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDtcTopologyLabelResponseObject)
	if err == nil {
		jsonListDtcTopologyLabelResponseObject, _ := json.Marshal(dst.ListDtcTopologyLabelResponseObject)
		if string(jsonListDtcTopologyLabelResponseObject) == "{}" { // empty struct
			dst.ListDtcTopologyLabelResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDtcTopologyLabelResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDtcTopologyLabel
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDtcTopologyLabel)
	if err == nil {
		jsonArrayOfDtcTopologyLabel, _ := json.Marshal(dst.ArrayOfDtcTopologyLabel)
		if string(jsonArrayOfDtcTopologyLabel) == "{}" { // empty struct
			dst.ArrayOfDtcTopologyLabel = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDtcTopologyLabel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDtcTopologyLabelResponseObject = nil
		dst.ArrayOfDtcTopologyLabel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDtcTopologyLabelResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDtcTopologyLabelResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDtcTopologyLabelResponse) MarshalJSON() ([]byte, error) {
	if src.ListDtcTopologyLabelResponseObject != nil {
		return json.Marshal(&src.ListDtcTopologyLabelResponseObject)
	}

	if src.ArrayOfDtcTopologyLabel != nil {
		return json.Marshal(&src.ArrayOfDtcTopologyLabel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDtcTopologyLabelResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDtcTopologyLabelResponseObject != nil {
		return obj.ListDtcTopologyLabelResponseObject
	}

	if obj.ArrayOfDtcTopologyLabel != nil {
		return obj.ArrayOfDtcTopologyLabel
	}

	// all schemas are nil
	return nil
}

type NullableListDtcTopologyLabelResponse struct {
	value *ListDtcTopologyLabelResponse
	isSet bool
}

func (v NullableListDtcTopologyLabelResponse) Get() *ListDtcTopologyLabelResponse {
	return v.value
}

func (v *NullableListDtcTopologyLabelResponse) Set(val *ListDtcTopologyLabelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDtcTopologyLabelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDtcTopologyLabelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDtcTopologyLabelResponse(val *ListDtcTopologyLabelResponse) *NullableListDtcTopologyLabelResponse {
	return &NullableListDtcTopologyLabelResponse{value: val, isSet: true}
}

func (v NullableListDtcTopologyLabelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDtcTopologyLabelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
