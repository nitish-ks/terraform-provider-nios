/*
Infoblox FEDERATEDREALMS API

OpenAPI specification for Infoblox NIOS WAPI FEDERATEDREALMS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package federatedrealms

import (
	"encoding/json"
	"fmt"
)

// GetFedipamopResponse - struct for GetFedipamopResponse
type GetFedipamopResponse struct {
	Fedipamop                          *Fedipamop
	GetFedipamopResponseObjectAsResult *GetFedipamopResponseObjectAsResult
}

// FedipamopAsGetFedipamopResponse is a convenience function that returns Fedipamop wrapped in GetFedipamopResponse
func FedipamopAsGetFedipamopResponse(v *Fedipamop) GetFedipamopResponse {
	return GetFedipamopResponse{
		Fedipamop: v,
	}
}

// GetFedipamopResponseObjectAsResultAsGetFedipamopResponse is a convenience function that returns GetFedipamopResponseObjectAsResult wrapped in GetFedipamopResponse
func GetFedipamopResponseObjectAsResultAsGetFedipamopResponse(v *GetFedipamopResponseObjectAsResult) GetFedipamopResponse {
	return GetFedipamopResponse{
		GetFedipamopResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetFedipamopResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Fedipamop
	err = newStrictDecoder(data).Decode(&dst.Fedipamop)
	if err == nil {
		jsonFedipamop, _ := json.Marshal(dst.Fedipamop)
		if string(jsonFedipamop) == "{}" { // empty struct
			dst.Fedipamop = nil
		} else {
			match++
		}
	} else {
		dst.Fedipamop = nil
	}

	// try to unmarshal data into GetFedipamopResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetFedipamopResponseObjectAsResult)
	if err == nil {
		jsonGetFedipamopResponseObjectAsResult, _ := json.Marshal(dst.GetFedipamopResponseObjectAsResult)
		if string(jsonGetFedipamopResponseObjectAsResult) == "{}" { // empty struct
			dst.GetFedipamopResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetFedipamopResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Fedipamop = nil
		dst.GetFedipamopResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetFedipamopResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetFedipamopResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetFedipamopResponse) MarshalJSON() ([]byte, error) {
	if src.Fedipamop != nil {
		return json.Marshal(&src.Fedipamop)
	}

	if src.GetFedipamopResponseObjectAsResult != nil {
		return json.Marshal(&src.GetFedipamopResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetFedipamopResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Fedipamop != nil {
		return obj.Fedipamop
	}

	if obj.GetFedipamopResponseObjectAsResult != nil {
		return obj.GetFedipamopResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetFedipamopResponse struct {
	value *GetFedipamopResponse
	isSet bool
}

func (v NullableGetFedipamopResponse) Get() *GetFedipamopResponse {
	return v.value
}

func (v *NullableGetFedipamopResponse) Set(val *GetFedipamopResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFedipamopResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFedipamopResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFedipamopResponse(val *GetFedipamopResponse) *NullableGetFedipamopResponse {
	return &NullableGetFedipamopResponse{value: val, isSet: true}
}

func (v NullableGetFedipamopResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFedipamopResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
