/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type GridLicensePoolContainerAPI interface {
	/*
		List Retrieve grid:license_pool_container objects

		Returns a list of grid:license_pool_container objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GridLicensePoolContainerAPIListRequest
	*/
	List(ctx context.Context) GridLicensePoolContainerAPIListRequest

	// ListExecute executes the request
	//  @return ListGridLicensePoolContainerResponse
	ListExecute(r GridLicensePoolContainerAPIListRequest) (*ListGridLicensePoolContainerResponse, *http.Response, error)
	/*
		Read Get a specific grid:license_pool_container object

		Returns a specific grid:license_pool_container object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the grid:license_pool_container object
		@return GridLicensePoolContainerAPIReadRequest
	*/
	Read(ctx context.Context, reference string) GridLicensePoolContainerAPIReadRequest

	// ReadExecute executes the request
	//  @return GetGridLicensePoolContainerResponse
	ReadExecute(r GridLicensePoolContainerAPIReadRequest) (*GetGridLicensePoolContainerResponse, *http.Response, error)
}

// GridLicensePoolContainerAPIService GridLicensePoolContainerAPI service
type GridLicensePoolContainerAPIService internal.Service

type GridLicensePoolContainerAPIListRequest struct {
	ctx              context.Context
	ApiService       GridLicensePoolContainerAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r GridLicensePoolContainerAPIListRequest) ReturnFields(returnFields string) GridLicensePoolContainerAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridLicensePoolContainerAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) GridLicensePoolContainerAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r GridLicensePoolContainerAPIListRequest) MaxResults(maxResults int32) GridLicensePoolContainerAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r GridLicensePoolContainerAPIListRequest) ReturnAsObject(returnAsObject int32) GridLicensePoolContainerAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r GridLicensePoolContainerAPIListRequest) Paging(paging int32) GridLicensePoolContainerAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r GridLicensePoolContainerAPIListRequest) PageId(pageId string) GridLicensePoolContainerAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r GridLicensePoolContainerAPIListRequest) Filters(filters map[string]interface{}) GridLicensePoolContainerAPIListRequest {
	r.filters = &filters
	return r
}

func (r GridLicensePoolContainerAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) GridLicensePoolContainerAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r GridLicensePoolContainerAPIListRequest) Execute() (*ListGridLicensePoolContainerResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve grid:license_pool_container objects

Returns a list of grid:license_pool_container objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GridLicensePoolContainerAPIListRequest
*/
func (a *GridLicensePoolContainerAPIService) List(ctx context.Context) GridLicensePoolContainerAPIListRequest {
	return GridLicensePoolContainerAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListGridLicensePoolContainerResponse
func (a *GridLicensePoolContainerAPIService) ListExecute(r GridLicensePoolContainerAPIListRequest) (*ListGridLicensePoolContainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListGridLicensePoolContainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridLicensePoolContainerAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:license_pool_container"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type GridLicensePoolContainerAPIReadRequest struct {
	ctx              context.Context
	ApiService       GridLicensePoolContainerAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r GridLicensePoolContainerAPIReadRequest) ReturnFields(returnFields string) GridLicensePoolContainerAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r GridLicensePoolContainerAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) GridLicensePoolContainerAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r GridLicensePoolContainerAPIReadRequest) ReturnAsObject(returnAsObject int32) GridLicensePoolContainerAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r GridLicensePoolContainerAPIReadRequest) Execute() (*GetGridLicensePoolContainerResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific grid:license_pool_container object

Returns a specific grid:license_pool_container object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the grid:license_pool_container object
	@return GridLicensePoolContainerAPIReadRequest
*/
func (a *GridLicensePoolContainerAPIService) Read(ctx context.Context, reference string) GridLicensePoolContainerAPIReadRequest {
	return GridLicensePoolContainerAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetGridLicensePoolContainerResponse
func (a *GridLicensePoolContainerAPIService) ReadExecute(r GridLicensePoolContainerAPIReadRequest) (*GetGridLicensePoolContainerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetGridLicensePoolContainerResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GridLicensePoolContainerAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/grid:license_pool_container/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
