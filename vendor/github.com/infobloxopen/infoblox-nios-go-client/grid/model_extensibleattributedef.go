/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Extensibleattributedef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extensibleattributedef{}

// Extensibleattributedef struct for Extensibleattributedef
type Extensibleattributedef struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The object types this extensible attribute is allowed to associate with.
	AllowedObjectTypes []string `json:"allowed_object_types,omitempty"`
	// Comment for the Extensible Attribute Definition; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// Default value used to pre-populate the attribute value in the GUI. For email, URL, and string types, the value is a string with a maximum of 256 characters. For an integer, the value is an integer from -2147483648 through 2147483647. For a date, the value is the number of seconds that have elapsed since January 1st, 1970 UTC.
	DefaultValue      *string                                  `json:"default_value,omitempty"`
	DescendantsAction *ExtensibleattributedefDescendantsAction `json:"descendants_action,omitempty"`
	// This field contains extensible attribute flags. Possible values: (A)udited, (C)loud API, Cloud (G)master, (I)nheritable, (L)isted, (M)andatory value, MGM (P)rivate, (R)ead Only, (S)ort enum values, Multiple (V)alues If there are two or more flags in the field, you must list them according to the order they are listed above. For example, 'CR' is a valid value for the 'flags' field because C = Cloud API is listed before R = Read only. However, the value 'RC' is invalid because the order for the 'flags' field is broken.
	Flags *string `json:"flags,omitempty"`
	// List of Values. Applicable if the extensible attribute type is ENUM.
	ListValues []ExtensibleattributedefListValues `json:"list_values,omitempty"`
	// Maximum allowed value of extensible attribute. Applicable if the extensible attribute type is INTEGER.
	Max *int64 `json:"max,omitempty"`
	// Minimum allowed value of extensible attribute. Applicable if the extensible attribute type is INTEGER.
	Min *int64 `json:"min,omitempty"`
	// The name of the Extensible Attribute Definition.
	Name *string `json:"name,omitempty"`
	// Namespace for the Extensible Attribute Definition.
	Namespace *string `json:"namespace,omitempty"`
	// Type for the Extensible Attribute Definition.
	Type *string `json:"type,omitempty"`
}

// NewExtensibleattributedef instantiates a new Extensibleattributedef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensibleattributedef() *Extensibleattributedef {
	this := Extensibleattributedef{}
	return &this
}

// NewExtensibleattributedefWithDefaults instantiates a new Extensibleattributedef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensibleattributedefWithDefaults() *Extensibleattributedef {
	this := Extensibleattributedef{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Extensibleattributedef) SetRef(v string) {
	o.Ref = &v
}

// GetAllowedObjectTypes returns the AllowedObjectTypes field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetAllowedObjectTypes() []string {
	if o == nil || IsNil(o.AllowedObjectTypes) {
		var ret []string
		return ret
	}
	return o.AllowedObjectTypes
}

// GetAllowedObjectTypesOk returns a tuple with the AllowedObjectTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetAllowedObjectTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedObjectTypes) {
		return nil, false
	}
	return o.AllowedObjectTypes, true
}

// HasAllowedObjectTypes returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasAllowedObjectTypes() bool {
	if o != nil && !IsNil(o.AllowedObjectTypes) {
		return true
	}

	return false
}

// SetAllowedObjectTypes gets a reference to the given []string and assigns it to the AllowedObjectTypes field.
func (o *Extensibleattributedef) SetAllowedObjectTypes(v []string) {
	o.AllowedObjectTypes = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Extensibleattributedef) SetComment(v string) {
	o.Comment = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *Extensibleattributedef) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDescendantsAction returns the DescendantsAction field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetDescendantsAction() ExtensibleattributedefDescendantsAction {
	if o == nil || IsNil(o.DescendantsAction) {
		var ret ExtensibleattributedefDescendantsAction
		return ret
	}
	return *o.DescendantsAction
}

// GetDescendantsActionOk returns a tuple with the DescendantsAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetDescendantsActionOk() (*ExtensibleattributedefDescendantsAction, bool) {
	if o == nil || IsNil(o.DescendantsAction) {
		return nil, false
	}
	return o.DescendantsAction, true
}

// HasDescendantsAction returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasDescendantsAction() bool {
	if o != nil && !IsNil(o.DescendantsAction) {
		return true
	}

	return false
}

// SetDescendantsAction gets a reference to the given ExtensibleattributedefDescendantsAction and assigns it to the DescendantsAction field.
func (o *Extensibleattributedef) SetDescendantsAction(v ExtensibleattributedefDescendantsAction) {
	o.DescendantsAction = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetFlags() string {
	if o == nil || IsNil(o.Flags) {
		var ret string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetFlagsOk() (*string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given string and assigns it to the Flags field.
func (o *Extensibleattributedef) SetFlags(v string) {
	o.Flags = &v
}

// GetListValues returns the ListValues field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetListValues() []ExtensibleattributedefListValues {
	if o == nil || IsNil(o.ListValues) {
		var ret []ExtensibleattributedefListValues
		return ret
	}
	return o.ListValues
}

// GetListValuesOk returns a tuple with the ListValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetListValuesOk() ([]ExtensibleattributedefListValues, bool) {
	if o == nil || IsNil(o.ListValues) {
		return nil, false
	}
	return o.ListValues, true
}

// HasListValues returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasListValues() bool {
	if o != nil && !IsNil(o.ListValues) {
		return true
	}

	return false
}

// SetListValues gets a reference to the given []ExtensibleattributedefListValues and assigns it to the ListValues field.
func (o *Extensibleattributedef) SetListValues(v []ExtensibleattributedefListValues) {
	o.ListValues = v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetMax() int64 {
	if o == nil || IsNil(o.Max) {
		var ret int64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int64 and assigns it to the Max field.
func (o *Extensibleattributedef) SetMax(v int64) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetMin() int64 {
	if o == nil || IsNil(o.Min) {
		var ret int64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetMinOk() (*int64, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given int64 and assigns it to the Min field.
func (o *Extensibleattributedef) SetMin(v int64) {
	o.Min = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Extensibleattributedef) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Extensibleattributedef) SetNamespace(v string) {
	o.Namespace = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Extensibleattributedef) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensibleattributedef) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Extensibleattributedef) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Extensibleattributedef) SetType(v string) {
	o.Type = &v
}

func (o Extensibleattributedef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extensibleattributedef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AllowedObjectTypes) {
		toSerialize["allowed_object_types"] = o.AllowedObjectTypes
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	if !IsNil(o.DescendantsAction) {
		toSerialize["descendants_action"] = o.DescendantsAction
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.ListValues) {
		toSerialize["list_values"] = o.ListValues
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExtensibleattributedef struct {
	value *Extensibleattributedef
	isSet bool
}

func (v NullableExtensibleattributedef) Get() *Extensibleattributedef {
	return v.value
}

func (v *NullableExtensibleattributedef) Set(val *Extensibleattributedef) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensibleattributedef) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensibleattributedef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensibleattributedef(val *Extensibleattributedef) *NullableExtensibleattributedef {
	return &NullableExtensibleattributedef{value: val, isSet: true}
}

func (v NullableExtensibleattributedef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensibleattributedef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
