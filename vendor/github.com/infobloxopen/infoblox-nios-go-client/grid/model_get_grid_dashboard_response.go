/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGridDashboardResponse - struct for GetGridDashboardResponse
type GetGridDashboardResponse struct {
	GetGridDashboardResponseObjectAsResult *GetGridDashboardResponseObjectAsResult
	GridDashboard                          *GridDashboard
}

// GetGridDashboardResponseObjectAsResultAsGetGridDashboardResponse is a convenience function that returns GetGridDashboardResponseObjectAsResult wrapped in GetGridDashboardResponse
func GetGridDashboardResponseObjectAsResultAsGetGridDashboardResponse(v *GetGridDashboardResponseObjectAsResult) GetGridDashboardResponse {
	return GetGridDashboardResponse{
		GetGridDashboardResponseObjectAsResult: v,
	}
}

// GridDashboardAsGetGridDashboardResponse is a convenience function that returns GridDashboard wrapped in GetGridDashboardResponse
func GridDashboardAsGetGridDashboardResponse(v *GridDashboard) GetGridDashboardResponse {
	return GetGridDashboardResponse{
		GridDashboard: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridDashboardResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridDashboardResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridDashboardResponseObjectAsResult)
	if err == nil {
		jsonGetGridDashboardResponseObjectAsResult, _ := json.Marshal(dst.GetGridDashboardResponseObjectAsResult)
		if string(jsonGetGridDashboardResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridDashboardResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridDashboardResponseObjectAsResult = nil
	}

	// try to unmarshal data into GridDashboard
	err = newStrictDecoder(data).Decode(&dst.GridDashboard)
	if err == nil {
		jsonGridDashboard, _ := json.Marshal(dst.GridDashboard)
		if string(jsonGridDashboard) == "{}" { // empty struct
			dst.GridDashboard = nil
		} else {
			match++
		}
	} else {
		dst.GridDashboard = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridDashboardResponseObjectAsResult = nil
		dst.GridDashboard = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridDashboardResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridDashboardResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridDashboardResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridDashboardResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridDashboardResponseObjectAsResult)
	}

	if src.GridDashboard != nil {
		return json.Marshal(&src.GridDashboard)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridDashboardResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridDashboardResponseObjectAsResult != nil {
		return obj.GetGridDashboardResponseObjectAsResult
	}

	if obj.GridDashboard != nil {
		return obj.GridDashboard
	}

	// all schemas are nil
	return nil
}

type NullableGetGridDashboardResponse struct {
	value *GetGridDashboardResponse
	isSet bool
}

func (v NullableGetGridDashboardResponse) Get() *GetGridDashboardResponse {
	return v.value
}

func (v *NullableGetGridDashboardResponse) Set(val *GetGridDashboardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridDashboardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridDashboardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridDashboardResponse(val *GetGridDashboardResponse) *NullableGetGridDashboardResponse {
	return &NullableGetGridDashboardResponse{value: val, isSet: true}
}

func (v NullableGetGridDashboardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridDashboardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
