/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGridLicensePoolContainerResponse - struct for GetGridLicensePoolContainerResponse
type GetGridLicensePoolContainerResponse struct {
	GetGridLicensePoolContainerResponseObjectAsResult *GetGridLicensePoolContainerResponseObjectAsResult
	GridLicensePoolContainer                          *GridLicensePoolContainer
}

// GetGridLicensePoolContainerResponseObjectAsResultAsGetGridLicensePoolContainerResponse is a convenience function that returns GetGridLicensePoolContainerResponseObjectAsResult wrapped in GetGridLicensePoolContainerResponse
func GetGridLicensePoolContainerResponseObjectAsResultAsGetGridLicensePoolContainerResponse(v *GetGridLicensePoolContainerResponseObjectAsResult) GetGridLicensePoolContainerResponse {
	return GetGridLicensePoolContainerResponse{
		GetGridLicensePoolContainerResponseObjectAsResult: v,
	}
}

// GridLicensePoolContainerAsGetGridLicensePoolContainerResponse is a convenience function that returns GridLicensePoolContainer wrapped in GetGridLicensePoolContainerResponse
func GridLicensePoolContainerAsGetGridLicensePoolContainerResponse(v *GridLicensePoolContainer) GetGridLicensePoolContainerResponse {
	return GetGridLicensePoolContainerResponse{
		GridLicensePoolContainer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridLicensePoolContainerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridLicensePoolContainerResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridLicensePoolContainerResponseObjectAsResult)
	if err == nil {
		jsonGetGridLicensePoolContainerResponseObjectAsResult, _ := json.Marshal(dst.GetGridLicensePoolContainerResponseObjectAsResult)
		if string(jsonGetGridLicensePoolContainerResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridLicensePoolContainerResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridLicensePoolContainerResponseObjectAsResult = nil
	}

	// try to unmarshal data into GridLicensePoolContainer
	err = newStrictDecoder(data).Decode(&dst.GridLicensePoolContainer)
	if err == nil {
		jsonGridLicensePoolContainer, _ := json.Marshal(dst.GridLicensePoolContainer)
		if string(jsonGridLicensePoolContainer) == "{}" { // empty struct
			dst.GridLicensePoolContainer = nil
		} else {
			match++
		}
	} else {
		dst.GridLicensePoolContainer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridLicensePoolContainerResponseObjectAsResult = nil
		dst.GridLicensePoolContainer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridLicensePoolContainerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridLicensePoolContainerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridLicensePoolContainerResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridLicensePoolContainerResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridLicensePoolContainerResponseObjectAsResult)
	}

	if src.GridLicensePoolContainer != nil {
		return json.Marshal(&src.GridLicensePoolContainer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridLicensePoolContainerResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridLicensePoolContainerResponseObjectAsResult != nil {
		return obj.GetGridLicensePoolContainerResponseObjectAsResult
	}

	if obj.GridLicensePoolContainer != nil {
		return obj.GridLicensePoolContainer
	}

	// all schemas are nil
	return nil
}

type NullableGetGridLicensePoolContainerResponse struct {
	value *GetGridLicensePoolContainerResponse
	isSet bool
}

func (v NullableGetGridLicensePoolContainerResponse) Get() *GetGridLicensePoolContainerResponse {
	return v.value
}

func (v *NullableGetGridLicensePoolContainerResponse) Set(val *GetGridLicensePoolContainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridLicensePoolContainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridLicensePoolContainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridLicensePoolContainerResponse(val *GetGridLicensePoolContainerResponse) *NullableGetGridLicensePoolContainerResponse {
	return &NullableGetGridLicensePoolContainerResponse{value: val, isSet: true}
}

func (v NullableGetGridLicensePoolContainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridLicensePoolContainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
