/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetGridX509certificateResponse - struct for GetGridX509certificateResponse
type GetGridX509certificateResponse struct {
	GetGridX509certificateResponseObjectAsResult *GetGridX509certificateResponseObjectAsResult
	GridX509certificate                          *GridX509certificate
}

// GetGridX509certificateResponseObjectAsResultAsGetGridX509certificateResponse is a convenience function that returns GetGridX509certificateResponseObjectAsResult wrapped in GetGridX509certificateResponse
func GetGridX509certificateResponseObjectAsResultAsGetGridX509certificateResponse(v *GetGridX509certificateResponseObjectAsResult) GetGridX509certificateResponse {
	return GetGridX509certificateResponse{
		GetGridX509certificateResponseObjectAsResult: v,
	}
}

// GridX509certificateAsGetGridX509certificateResponse is a convenience function that returns GridX509certificate wrapped in GetGridX509certificateResponse
func GridX509certificateAsGetGridX509certificateResponse(v *GridX509certificate) GetGridX509certificateResponse {
	return GetGridX509certificateResponse{
		GridX509certificate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetGridX509certificateResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetGridX509certificateResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetGridX509certificateResponseObjectAsResult)
	if err == nil {
		jsonGetGridX509certificateResponseObjectAsResult, _ := json.Marshal(dst.GetGridX509certificateResponseObjectAsResult)
		if string(jsonGetGridX509certificateResponseObjectAsResult) == "{}" { // empty struct
			dst.GetGridX509certificateResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetGridX509certificateResponseObjectAsResult = nil
	}

	// try to unmarshal data into GridX509certificate
	err = newStrictDecoder(data).Decode(&dst.GridX509certificate)
	if err == nil {
		jsonGridX509certificate, _ := json.Marshal(dst.GridX509certificate)
		if string(jsonGridX509certificate) == "{}" { // empty struct
			dst.GridX509certificate = nil
		} else {
			match++
		}
	} else {
		dst.GridX509certificate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetGridX509certificateResponseObjectAsResult = nil
		dst.GridX509certificate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetGridX509certificateResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetGridX509certificateResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	if src.GetGridX509certificateResponseObjectAsResult != nil {
		return json.Marshal(&src.GetGridX509certificateResponseObjectAsResult)
	}

	if src.GridX509certificate != nil {
		return json.Marshal(&src.GridX509certificate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetGridX509certificateResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetGridX509certificateResponseObjectAsResult != nil {
		return obj.GetGridX509certificateResponseObjectAsResult
	}

	if obj.GridX509certificate != nil {
		return obj.GridX509certificate
	}

	// all schemas are nil
	return nil
}

type NullableGetGridX509certificateResponse struct {
	value *GetGridX509certificateResponse
	isSet bool
}

func (v NullableGetGridX509certificateResponse) Get() *GetGridX509certificateResponse {
	return v.value
}

func (v *NullableGetGridX509certificateResponse) Set(val *GetGridX509certificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGridX509certificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGridX509certificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGridX509certificateResponse(val *GetGridX509certificateResponse) *NullableGetGridX509certificateResponse {
	return &NullableGetGridX509certificateResponse{value: val, isSet: true}
}

func (v NullableGetGridX509certificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGridX509certificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
