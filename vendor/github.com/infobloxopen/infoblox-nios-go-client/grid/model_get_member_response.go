/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetMemberResponse - struct for GetMemberResponse
type GetMemberResponse struct {
	GetMemberResponseObjectAsResult *GetMemberResponseObjectAsResult
	Member                          *Member
}

// GetMemberResponseObjectAsResultAsGetMemberResponse is a convenience function that returns GetMemberResponseObjectAsResult wrapped in GetMemberResponse
func GetMemberResponseObjectAsResultAsGetMemberResponse(v *GetMemberResponseObjectAsResult) GetMemberResponse {
	return GetMemberResponse{
		GetMemberResponseObjectAsResult: v,
	}
}

// MemberAsGetMemberResponse is a convenience function that returns Member wrapped in GetMemberResponse
func MemberAsGetMemberResponse(v *Member) GetMemberResponse {
	return GetMemberResponse{
		Member: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMemberResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMemberResponseObjectAsResult)
	if err == nil {
		jsonGetMemberResponseObjectAsResult, _ := json.Marshal(dst.GetMemberResponseObjectAsResult)
		if string(jsonGetMemberResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMemberResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMemberResponseObjectAsResult = nil
	}

	// try to unmarshal data into Member
	err = newStrictDecoder(data).Decode(&dst.Member)
	if err == nil {
		jsonMember, _ := json.Marshal(dst.Member)
		if string(jsonMember) == "{}" { // empty struct
			dst.Member = nil
		} else {
			match++
		}
	} else {
		dst.Member = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMemberResponseObjectAsResult = nil
		dst.Member = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMemberResponse) MarshalJSON() ([]byte, error) {
	if src.GetMemberResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMemberResponseObjectAsResult)
	}

	if src.Member != nil {
		return json.Marshal(&src.Member)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMemberResponseObjectAsResult != nil {
		return obj.GetMemberResponseObjectAsResult
	}

	if obj.Member != nil {
		return obj.Member
	}

	// all schemas are nil
	return nil
}

type NullableGetMemberResponse struct {
	value *GetMemberResponse
	isSet bool
}

func (v NullableGetMemberResponse) Get() *GetMemberResponse {
	return v.value
}

func (v *NullableGetMemberResponse) Set(val *GetMemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMemberResponse(val *GetMemberResponse) *NullableGetMemberResponse {
	return &NullableGetMemberResponse{value: val, isSet: true}
}

func (v NullableGetMemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
