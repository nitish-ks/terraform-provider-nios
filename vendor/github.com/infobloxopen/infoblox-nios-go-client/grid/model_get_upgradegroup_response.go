/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetUpgradegroupResponse - struct for GetUpgradegroupResponse
type GetUpgradegroupResponse struct {
	GetUpgradegroupResponseObjectAsResult *GetUpgradegroupResponseObjectAsResult
	Upgradegroup                          *Upgradegroup
}

// GetUpgradegroupResponseObjectAsResultAsGetUpgradegroupResponse is a convenience function that returns GetUpgradegroupResponseObjectAsResult wrapped in GetUpgradegroupResponse
func GetUpgradegroupResponseObjectAsResultAsGetUpgradegroupResponse(v *GetUpgradegroupResponseObjectAsResult) GetUpgradegroupResponse {
	return GetUpgradegroupResponse{
		GetUpgradegroupResponseObjectAsResult: v,
	}
}

// UpgradegroupAsGetUpgradegroupResponse is a convenience function that returns Upgradegroup wrapped in GetUpgradegroupResponse
func UpgradegroupAsGetUpgradegroupResponse(v *Upgradegroup) GetUpgradegroupResponse {
	return GetUpgradegroupResponse{
		Upgradegroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUpgradegroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetUpgradegroupResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetUpgradegroupResponseObjectAsResult)
	if err == nil {
		jsonGetUpgradegroupResponseObjectAsResult, _ := json.Marshal(dst.GetUpgradegroupResponseObjectAsResult)
		if string(jsonGetUpgradegroupResponseObjectAsResult) == "{}" { // empty struct
			dst.GetUpgradegroupResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetUpgradegroupResponseObjectAsResult = nil
	}

	// try to unmarshal data into Upgradegroup
	err = newStrictDecoder(data).Decode(&dst.Upgradegroup)
	if err == nil {
		jsonUpgradegroup, _ := json.Marshal(dst.Upgradegroup)
		if string(jsonUpgradegroup) == "{}" { // empty struct
			dst.Upgradegroup = nil
		} else {
			match++
		}
	} else {
		dst.Upgradegroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetUpgradegroupResponseObjectAsResult = nil
		dst.Upgradegroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetUpgradegroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetUpgradegroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUpgradegroupResponse) MarshalJSON() ([]byte, error) {
	if src.GetUpgradegroupResponseObjectAsResult != nil {
		return json.Marshal(&src.GetUpgradegroupResponseObjectAsResult)
	}

	if src.Upgradegroup != nil {
		return json.Marshal(&src.Upgradegroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUpgradegroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetUpgradegroupResponseObjectAsResult != nil {
		return obj.GetUpgradegroupResponseObjectAsResult
	}

	if obj.Upgradegroup != nil {
		return obj.Upgradegroup
	}

	// all schemas are nil
	return nil
}

type NullableGetUpgradegroupResponse struct {
	value *GetUpgradegroupResponse
	isSet bool
}

func (v NullableGetUpgradegroupResponse) Get() *GetUpgradegroupResponse {
	return v.value
}

func (v *NullableGetUpgradegroupResponse) Set(val *GetUpgradegroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUpgradegroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUpgradegroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUpgradegroupResponse(val *GetUpgradegroupResponse) *NullableGetUpgradegroupResponse {
	return &NullableGetUpgradegroupResponse{value: val, isSet: true}
}

func (v NullableGetUpgradegroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUpgradegroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
