/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// GetUpgradestatusResponse - struct for GetUpgradestatusResponse
type GetUpgradestatusResponse struct {
	GetUpgradestatusResponseObjectAsResult *GetUpgradestatusResponseObjectAsResult
	Upgradestatus                          *Upgradestatus
}

// GetUpgradestatusResponseObjectAsResultAsGetUpgradestatusResponse is a convenience function that returns GetUpgradestatusResponseObjectAsResult wrapped in GetUpgradestatusResponse
func GetUpgradestatusResponseObjectAsResultAsGetUpgradestatusResponse(v *GetUpgradestatusResponseObjectAsResult) GetUpgradestatusResponse {
	return GetUpgradestatusResponse{
		GetUpgradestatusResponseObjectAsResult: v,
	}
}

// UpgradestatusAsGetUpgradestatusResponse is a convenience function that returns Upgradestatus wrapped in GetUpgradestatusResponse
func UpgradestatusAsGetUpgradestatusResponse(v *Upgradestatus) GetUpgradestatusResponse {
	return GetUpgradestatusResponse{
		Upgradestatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetUpgradestatusResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetUpgradestatusResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetUpgradestatusResponseObjectAsResult)
	if err == nil {
		jsonGetUpgradestatusResponseObjectAsResult, _ := json.Marshal(dst.GetUpgradestatusResponseObjectAsResult)
		if string(jsonGetUpgradestatusResponseObjectAsResult) == "{}" { // empty struct
			dst.GetUpgradestatusResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetUpgradestatusResponseObjectAsResult = nil
	}

	// try to unmarshal data into Upgradestatus
	err = newStrictDecoder(data).Decode(&dst.Upgradestatus)
	if err == nil {
		jsonUpgradestatus, _ := json.Marshal(dst.Upgradestatus)
		if string(jsonUpgradestatus) == "{}" { // empty struct
			dst.Upgradestatus = nil
		} else {
			match++
		}
	} else {
		dst.Upgradestatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetUpgradestatusResponseObjectAsResult = nil
		dst.Upgradestatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetUpgradestatusResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetUpgradestatusResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetUpgradestatusResponse) MarshalJSON() ([]byte, error) {
	if src.GetUpgradestatusResponseObjectAsResult != nil {
		return json.Marshal(&src.GetUpgradestatusResponseObjectAsResult)
	}

	if src.Upgradestatus != nil {
		return json.Marshal(&src.Upgradestatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetUpgradestatusResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetUpgradestatusResponseObjectAsResult != nil {
		return obj.GetUpgradestatusResponseObjectAsResult
	}

	if obj.Upgradestatus != nil {
		return obj.Upgradestatus
	}

	// all schemas are nil
	return nil
}

type NullableGetUpgradestatusResponse struct {
	value *GetUpgradestatusResponse
	isSet bool
}

func (v NullableGetUpgradestatusResponse) Get() *GetUpgradestatusResponse {
	return v.value
}

func (v *NullableGetUpgradestatusResponse) Set(val *GetUpgradestatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUpgradestatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUpgradestatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUpgradestatusResponse(val *GetUpgradestatusResponse) *NullableGetUpgradestatusResponse {
	return &NullableGetUpgradestatusResponse{value: val, isSet: true}
}

func (v NullableGetUpgradestatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUpgradestatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
