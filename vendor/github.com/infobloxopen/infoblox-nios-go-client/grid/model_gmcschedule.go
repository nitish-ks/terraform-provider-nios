/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Gmcschedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gmcschedule{}

// Gmcschedule struct for Gmcschedule
type Gmcschedule struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines whether the gmc schedule is active.
	ActivateGmcGroupSchedule *bool `json:"activate_gmc_group_schedule,omitempty"`
	// Object array of gmc groups
	GmcGroups []string `json:"gmc_groups,omitempty"`
}

// NewGmcschedule instantiates a new Gmcschedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGmcschedule() *Gmcschedule {
	this := Gmcschedule{}
	return &this
}

// NewGmcscheduleWithDefaults instantiates a new Gmcschedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGmcscheduleWithDefaults() *Gmcschedule {
	this := Gmcschedule{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Gmcschedule) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gmcschedule) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Gmcschedule) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Gmcschedule) SetRef(v string) {
	o.Ref = &v
}

// GetActivateGmcGroupSchedule returns the ActivateGmcGroupSchedule field value if set, zero value otherwise.
func (o *Gmcschedule) GetActivateGmcGroupSchedule() bool {
	if o == nil || IsNil(o.ActivateGmcGroupSchedule) {
		var ret bool
		return ret
	}
	return *o.ActivateGmcGroupSchedule
}

// GetActivateGmcGroupScheduleOk returns a tuple with the ActivateGmcGroupSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gmcschedule) GetActivateGmcGroupScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.ActivateGmcGroupSchedule) {
		return nil, false
	}
	return o.ActivateGmcGroupSchedule, true
}

// HasActivateGmcGroupSchedule returns a boolean if a field has been set.
func (o *Gmcschedule) HasActivateGmcGroupSchedule() bool {
	if o != nil && !IsNil(o.ActivateGmcGroupSchedule) {
		return true
	}

	return false
}

// SetActivateGmcGroupSchedule gets a reference to the given bool and assigns it to the ActivateGmcGroupSchedule field.
func (o *Gmcschedule) SetActivateGmcGroupSchedule(v bool) {
	o.ActivateGmcGroupSchedule = &v
}

// GetGmcGroups returns the GmcGroups field value if set, zero value otherwise.
func (o *Gmcschedule) GetGmcGroups() []string {
	if o == nil || IsNil(o.GmcGroups) {
		var ret []string
		return ret
	}
	return o.GmcGroups
}

// GetGmcGroupsOk returns a tuple with the GmcGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gmcschedule) GetGmcGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.GmcGroups) {
		return nil, false
	}
	return o.GmcGroups, true
}

// HasGmcGroups returns a boolean if a field has been set.
func (o *Gmcschedule) HasGmcGroups() bool {
	if o != nil && !IsNil(o.GmcGroups) {
		return true
	}

	return false
}

// SetGmcGroups gets a reference to the given []string and assigns it to the GmcGroups field.
func (o *Gmcschedule) SetGmcGroups(v []string) {
	o.GmcGroups = v
}

func (o Gmcschedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gmcschedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ActivateGmcGroupSchedule) {
		toSerialize["activate_gmc_group_schedule"] = o.ActivateGmcGroupSchedule
	}
	if !IsNil(o.GmcGroups) {
		toSerialize["gmc_groups"] = o.GmcGroups
	}
	return toSerialize, nil
}

type NullableGmcschedule struct {
	value *Gmcschedule
	isSet bool
}

func (v NullableGmcschedule) Get() *Gmcschedule {
	return v.value
}

func (v *NullableGmcschedule) Set(val *Gmcschedule) {
	v.value = val
	v.isSet = true
}

func (v NullableGmcschedule) IsSet() bool {
	return v.isSet
}

func (v *NullableGmcschedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGmcschedule(val *Gmcschedule) *NullableGmcschedule {
	return &NullableGmcschedule{value: val, isSet: true}
}

func (v NullableGmcschedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGmcschedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
