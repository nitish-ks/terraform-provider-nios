/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridLicensePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridLicensePool{}

// GridLicensePool struct for GridLicensePool
type GridLicensePool struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The number of dynamic licenses allocated to vNIOS appliances.
	Assigned *int64 `json:"assigned,omitempty"`
	// The license expiration status. * DELETED - The temporary license has been deleted. * EXPIRED - License/Pool has reached the expiry date. * EXPIRING_SOON - License/Pool expires in 31-90 days. * EXPIRING_VERY_SOON - License/Pool expires in 30 days or earlier. * NOT_EXPIRED - License/Pool has not expired. * PERMANENT - License/Pool does not expire.
	ExpirationStatus *string `json:"expiration_status,omitempty"`
	// The expiration timestamp of the license.
	ExpiryDate *int64 `json:"expiry_date,omitempty"`
	// The total number of dynamic licenses allowed for this license pool.
	Installed *int64 `json:"installed,omitempty"`
	// The license string for the license pool.
	Key *string `json:"key,omitempty"`
	// The limitation of dynamic license that can be allocated from the license pool.
	Limit *string `json:"limit,omitempty"`
	// The license limit context.
	LimitContext *string `json:"limit_context,omitempty"`
	// The supported vNIOS virtual appliance model.
	Model *string `json:"model,omitempty"`
	// The license pool subpools.
	Subpools []GridLicensePoolSubpools `json:"subpools,omitempty"`
	// The total number of temporary dynamic licenses allocated to vNIOS appliances.
	TempAssigned *int64 `json:"temp_assigned,omitempty"`
	// The license type.
	Type *string `json:"type,omitempty"`
}

// NewGridLicensePool instantiates a new GridLicensePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridLicensePool() *GridLicensePool {
	this := GridLicensePool{}
	return &this
}

// NewGridLicensePoolWithDefaults instantiates a new GridLicensePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridLicensePoolWithDefaults() *GridLicensePool {
	this := GridLicensePool{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GridLicensePool) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GridLicensePool) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GridLicensePool) SetRef(v string) {
	o.Ref = &v
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *GridLicensePool) GetAssigned() int64 {
	if o == nil || IsNil(o.Assigned) {
		var ret int64
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetAssignedOk() (*int64, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *GridLicensePool) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given int64 and assigns it to the Assigned field.
func (o *GridLicensePool) SetAssigned(v int64) {
	o.Assigned = &v
}

// GetExpirationStatus returns the ExpirationStatus field value if set, zero value otherwise.
func (o *GridLicensePool) GetExpirationStatus() string {
	if o == nil || IsNil(o.ExpirationStatus) {
		var ret string
		return ret
	}
	return *o.ExpirationStatus
}

// GetExpirationStatusOk returns a tuple with the ExpirationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetExpirationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationStatus) {
		return nil, false
	}
	return o.ExpirationStatus, true
}

// HasExpirationStatus returns a boolean if a field has been set.
func (o *GridLicensePool) HasExpirationStatus() bool {
	if o != nil && !IsNil(o.ExpirationStatus) {
		return true
	}

	return false
}

// SetExpirationStatus gets a reference to the given string and assigns it to the ExpirationStatus field.
func (o *GridLicensePool) SetExpirationStatus(v string) {
	o.ExpirationStatus = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *GridLicensePool) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *GridLicensePool) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *GridLicensePool) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetInstalled returns the Installed field value if set, zero value otherwise.
func (o *GridLicensePool) GetInstalled() int64 {
	if o == nil || IsNil(o.Installed) {
		var ret int64
		return ret
	}
	return *o.Installed
}

// GetInstalledOk returns a tuple with the Installed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetInstalledOk() (*int64, bool) {
	if o == nil || IsNil(o.Installed) {
		return nil, false
	}
	return o.Installed, true
}

// HasInstalled returns a boolean if a field has been set.
func (o *GridLicensePool) HasInstalled() bool {
	if o != nil && !IsNil(o.Installed) {
		return true
	}

	return false
}

// SetInstalled gets a reference to the given int64 and assigns it to the Installed field.
func (o *GridLicensePool) SetInstalled(v int64) {
	o.Installed = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GridLicensePool) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GridLicensePool) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *GridLicensePool) SetKey(v string) {
	o.Key = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *GridLicensePool) GetLimit() string {
	if o == nil || IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetLimitOk() (*string, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *GridLicensePool) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *GridLicensePool) SetLimit(v string) {
	o.Limit = &v
}

// GetLimitContext returns the LimitContext field value if set, zero value otherwise.
func (o *GridLicensePool) GetLimitContext() string {
	if o == nil || IsNil(o.LimitContext) {
		var ret string
		return ret
	}
	return *o.LimitContext
}

// GetLimitContextOk returns a tuple with the LimitContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetLimitContextOk() (*string, bool) {
	if o == nil || IsNil(o.LimitContext) {
		return nil, false
	}
	return o.LimitContext, true
}

// HasLimitContext returns a boolean if a field has been set.
func (o *GridLicensePool) HasLimitContext() bool {
	if o != nil && !IsNil(o.LimitContext) {
		return true
	}

	return false
}

// SetLimitContext gets a reference to the given string and assigns it to the LimitContext field.
func (o *GridLicensePool) SetLimitContext(v string) {
	o.LimitContext = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *GridLicensePool) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *GridLicensePool) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *GridLicensePool) SetModel(v string) {
	o.Model = &v
}

// GetSubpools returns the Subpools field value if set, zero value otherwise.
func (o *GridLicensePool) GetSubpools() []GridLicensePoolSubpools {
	if o == nil || IsNil(o.Subpools) {
		var ret []GridLicensePoolSubpools
		return ret
	}
	return o.Subpools
}

// GetSubpoolsOk returns a tuple with the Subpools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetSubpoolsOk() ([]GridLicensePoolSubpools, bool) {
	if o == nil || IsNil(o.Subpools) {
		return nil, false
	}
	return o.Subpools, true
}

// HasSubpools returns a boolean if a field has been set.
func (o *GridLicensePool) HasSubpools() bool {
	if o != nil && !IsNil(o.Subpools) {
		return true
	}

	return false
}

// SetSubpools gets a reference to the given []GridLicensePoolSubpools and assigns it to the Subpools field.
func (o *GridLicensePool) SetSubpools(v []GridLicensePoolSubpools) {
	o.Subpools = v
}

// GetTempAssigned returns the TempAssigned field value if set, zero value otherwise.
func (o *GridLicensePool) GetTempAssigned() int64 {
	if o == nil || IsNil(o.TempAssigned) {
		var ret int64
		return ret
	}
	return *o.TempAssigned
}

// GetTempAssignedOk returns a tuple with the TempAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetTempAssignedOk() (*int64, bool) {
	if o == nil || IsNil(o.TempAssigned) {
		return nil, false
	}
	return o.TempAssigned, true
}

// HasTempAssigned returns a boolean if a field has been set.
func (o *GridLicensePool) HasTempAssigned() bool {
	if o != nil && !IsNil(o.TempAssigned) {
		return true
	}

	return false
}

// SetTempAssigned gets a reference to the given int64 and assigns it to the TempAssigned field.
func (o *GridLicensePool) SetTempAssigned(v int64) {
	o.TempAssigned = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GridLicensePool) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePool) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GridLicensePool) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GridLicensePool) SetType(v string) {
	o.Type = &v
}

func (o GridLicensePool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridLicensePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if !IsNil(o.ExpirationStatus) {
		toSerialize["expiration_status"] = o.ExpirationStatus
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}
	if !IsNil(o.Installed) {
		toSerialize["installed"] = o.Installed
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.LimitContext) {
		toSerialize["limit_context"] = o.LimitContext
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Subpools) {
		toSerialize["subpools"] = o.Subpools
	}
	if !IsNil(o.TempAssigned) {
		toSerialize["temp_assigned"] = o.TempAssigned
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableGridLicensePool struct {
	value *GridLicensePool
	isSet bool
}

func (v NullableGridLicensePool) Get() *GridLicensePool {
	return v.value
}

func (v *NullableGridLicensePool) Set(val *GridLicensePool) {
	v.value = val
	v.isSet = true
}

func (v NullableGridLicensePool) IsSet() bool {
	return v.isSet
}

func (v *NullableGridLicensePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridLicensePool(val *GridLicensePool) *NullableGridLicensePool {
	return &NullableGridLicensePool{value: val, isSet: true}
}

func (v NullableGridLicensePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridLicensePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
