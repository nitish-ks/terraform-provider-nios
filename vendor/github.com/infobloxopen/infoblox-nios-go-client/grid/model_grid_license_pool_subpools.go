/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the GridLicensePoolSubpools type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridLicensePoolSubpools{}

// GridLicensePoolSubpools struct for GridLicensePoolSubpools
type GridLicensePoolSubpools struct {
	// The license string for the license subpool.
	Key *string `json:"key,omitempty"`
	// The total number of dynamic licenses allowed for this license subpool.
	Installed *int64 `json:"installed,omitempty"`
	// License expiration date.
	ExpiryDate           *int64 `json:"expiry_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GridLicensePoolSubpools GridLicensePoolSubpools

// NewGridLicensePoolSubpools instantiates a new GridLicensePoolSubpools object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridLicensePoolSubpools() *GridLicensePoolSubpools {
	this := GridLicensePoolSubpools{}
	return &this
}

// NewGridLicensePoolSubpoolsWithDefaults instantiates a new GridLicensePoolSubpools object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridLicensePoolSubpoolsWithDefaults() *GridLicensePoolSubpools {
	this := GridLicensePoolSubpools{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GridLicensePoolSubpools) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePoolSubpools) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GridLicensePoolSubpools) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *GridLicensePoolSubpools) SetKey(v string) {
	o.Key = &v
}

// GetInstalled returns the Installed field value if set, zero value otherwise.
func (o *GridLicensePoolSubpools) GetInstalled() int64 {
	if o == nil || IsNil(o.Installed) {
		var ret int64
		return ret
	}
	return *o.Installed
}

// GetInstalledOk returns a tuple with the Installed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePoolSubpools) GetInstalledOk() (*int64, bool) {
	if o == nil || IsNil(o.Installed) {
		return nil, false
	}
	return o.Installed, true
}

// HasInstalled returns a boolean if a field has been set.
func (o *GridLicensePoolSubpools) HasInstalled() bool {
	if o != nil && !IsNil(o.Installed) {
		return true
	}

	return false
}

// SetInstalled gets a reference to the given int64 and assigns it to the Installed field.
func (o *GridLicensePoolSubpools) SetInstalled(v int64) {
	o.Installed = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *GridLicensePoolSubpools) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridLicensePoolSubpools) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *GridLicensePoolSubpools) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *GridLicensePoolSubpools) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

func (o GridLicensePoolSubpools) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridLicensePoolSubpools) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Installed) {
		toSerialize["installed"] = o.Installed
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GridLicensePoolSubpools) UnmarshalJSON(data []byte) (err error) {
	varGridLicensePoolSubpools := _GridLicensePoolSubpools{}

	err = json.Unmarshal(data, &varGridLicensePoolSubpools)

	if err != nil {
		return err
	}

	*o = GridLicensePoolSubpools(varGridLicensePoolSubpools)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "installed")
		delete(additionalProperties, "expiry_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGridLicensePoolSubpools struct {
	value *GridLicensePoolSubpools
	isSet bool
}

func (v NullableGridLicensePoolSubpools) Get() *GridLicensePoolSubpools {
	return v.value
}

func (v *NullableGridLicensePoolSubpools) Set(val *GridLicensePoolSubpools) {
	v.value = val
	v.isSet = true
}

func (v NullableGridLicensePoolSubpools) IsSet() bool {
	return v.isSet
}

func (v *NullableGridLicensePoolSubpools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridLicensePoolSubpools(val *GridLicensePoolSubpools) *NullableGridLicensePoolSubpools {
	return &NullableGridLicensePoolSubpools{value: val, isSet: true}
}

func (v NullableGridLicensePoolSubpools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridLicensePoolSubpools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
