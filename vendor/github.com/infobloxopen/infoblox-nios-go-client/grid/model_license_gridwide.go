/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the LicenseGridwide type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseGridwide{}

// LicenseGridwide struct for LicenseGridwide
type LicenseGridwide struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The license expiration status.
	ExpirationStatus *string `json:"expiration_status,omitempty"`
	// The expiration timestamp of the license.
	ExpiryDate *int64 `json:"expiry_date,omitempty"`
	// The license string.
	Key *string `json:"key,omitempty"`
	// The license limit value.
	Limit *string `json:"limit,omitempty"`
	// The license limit context.
	LimitContext *string `json:"limit_context,omitempty"`
	// The license type.
	Type *string `json:"type,omitempty"`
}

// NewLicenseGridwide instantiates a new LicenseGridwide object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseGridwide() *LicenseGridwide {
	this := LicenseGridwide{}
	return &this
}

// NewLicenseGridwideWithDefaults instantiates a new LicenseGridwide object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseGridwideWithDefaults() *LicenseGridwide {
	this := LicenseGridwide{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *LicenseGridwide) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *LicenseGridwide) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *LicenseGridwide) SetRef(v string) {
	o.Ref = &v
}

// GetExpirationStatus returns the ExpirationStatus field value if set, zero value otherwise.
func (o *LicenseGridwide) GetExpirationStatus() string {
	if o == nil || IsNil(o.ExpirationStatus) {
		var ret string
		return ret
	}
	return *o.ExpirationStatus
}

// GetExpirationStatusOk returns a tuple with the ExpirationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetExpirationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationStatus) {
		return nil, false
	}
	return o.ExpirationStatus, true
}

// HasExpirationStatus returns a boolean if a field has been set.
func (o *LicenseGridwide) HasExpirationStatus() bool {
	if o != nil && !IsNil(o.ExpirationStatus) {
		return true
	}

	return false
}

// SetExpirationStatus gets a reference to the given string and assigns it to the ExpirationStatus field.
func (o *LicenseGridwide) SetExpirationStatus(v string) {
	o.ExpirationStatus = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *LicenseGridwide) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *LicenseGridwide) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *LicenseGridwide) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *LicenseGridwide) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *LicenseGridwide) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *LicenseGridwide) SetKey(v string) {
	o.Key = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *LicenseGridwide) GetLimit() string {
	if o == nil || IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetLimitOk() (*string, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *LicenseGridwide) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *LicenseGridwide) SetLimit(v string) {
	o.Limit = &v
}

// GetLimitContext returns the LimitContext field value if set, zero value otherwise.
func (o *LicenseGridwide) GetLimitContext() string {
	if o == nil || IsNil(o.LimitContext) {
		var ret string
		return ret
	}
	return *o.LimitContext
}

// GetLimitContextOk returns a tuple with the LimitContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetLimitContextOk() (*string, bool) {
	if o == nil || IsNil(o.LimitContext) {
		return nil, false
	}
	return o.LimitContext, true
}

// HasLimitContext returns a boolean if a field has been set.
func (o *LicenseGridwide) HasLimitContext() bool {
	if o != nil && !IsNil(o.LimitContext) {
		return true
	}

	return false
}

// SetLimitContext gets a reference to the given string and assigns it to the LimitContext field.
func (o *LicenseGridwide) SetLimitContext(v string) {
	o.LimitContext = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LicenseGridwide) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGridwide) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LicenseGridwide) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LicenseGridwide) SetType(v string) {
	o.Type = &v
}

func (o LicenseGridwide) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseGridwide) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ExpirationStatus) {
		toSerialize["expiration_status"] = o.ExpirationStatus
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.LimitContext) {
		toSerialize["limit_context"] = o.LimitContext
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableLicenseGridwide struct {
	value *LicenseGridwide
	isSet bool
}

func (v NullableLicenseGridwide) Get() *LicenseGridwide {
	return v.value
}

func (v *NullableLicenseGridwide) Set(val *LicenseGridwide) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseGridwide) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseGridwide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseGridwide(val *LicenseGridwide) *NullableLicenseGridwide {
	return &NullableLicenseGridwide{value: val, isSet: true}
}

func (v NullableLicenseGridwide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseGridwide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
