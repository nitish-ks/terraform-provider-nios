/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListDistributionscheduleResponse - struct for ListDistributionscheduleResponse
type ListDistributionscheduleResponse struct {
	ListDistributionscheduleResponseObject *ListDistributionscheduleResponseObject
	ArrayOfDistributionschedule            *[]Distributionschedule
}

// ListDistributionscheduleResponseObjectAsListDistributionscheduleResponse is a convenience function that returns ListDistributionscheduleResponseObject wrapped in ListDistributionscheduleResponse
func ListDistributionscheduleResponseObjectAsListDistributionscheduleResponse(v *ListDistributionscheduleResponseObject) ListDistributionscheduleResponse {
	return ListDistributionscheduleResponse{
		ListDistributionscheduleResponseObject: v,
	}
}

// []DistributionscheduleAsListDistributionscheduleResponse is a convenience function that returns []Distributionschedule wrapped in ListDistributionscheduleResponse
func ArrayOfDistributionscheduleAsListDistributionscheduleResponse(v *[]Distributionschedule) ListDistributionscheduleResponse {
	return ListDistributionscheduleResponse{
		ArrayOfDistributionschedule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDistributionscheduleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDistributionscheduleResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDistributionscheduleResponseObject)
	if err == nil {
		jsonListDistributionscheduleResponseObject, _ := json.Marshal(dst.ListDistributionscheduleResponseObject)
		if string(jsonListDistributionscheduleResponseObject) == "{}" { // empty struct
			dst.ListDistributionscheduleResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDistributionscheduleResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDistributionschedule
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDistributionschedule)
	if err == nil {
		jsonArrayOfDistributionschedule, _ := json.Marshal(dst.ArrayOfDistributionschedule)
		if string(jsonArrayOfDistributionschedule) == "{}" { // empty struct
			dst.ArrayOfDistributionschedule = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDistributionschedule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDistributionscheduleResponseObject = nil
		dst.ArrayOfDistributionschedule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDistributionscheduleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDistributionscheduleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDistributionscheduleResponse) MarshalJSON() ([]byte, error) {
	if src.ListDistributionscheduleResponseObject != nil {
		return json.Marshal(&src.ListDistributionscheduleResponseObject)
	}

	if src.ArrayOfDistributionschedule != nil {
		return json.Marshal(&src.ArrayOfDistributionschedule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDistributionscheduleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDistributionscheduleResponseObject != nil {
		return obj.ListDistributionscheduleResponseObject
	}

	if obj.ArrayOfDistributionschedule != nil {
		return obj.ArrayOfDistributionschedule
	}

	// all schemas are nil
	return nil
}

type NullableListDistributionscheduleResponse struct {
	value *ListDistributionscheduleResponse
	isSet bool
}

func (v NullableListDistributionscheduleResponse) Get() *ListDistributionscheduleResponse {
	return v.value
}

func (v *NullableListDistributionscheduleResponse) Set(val *ListDistributionscheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDistributionscheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDistributionscheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDistributionscheduleResponse(val *ListDistributionscheduleResponse) *NullableListDistributionscheduleResponse {
	return &NullableListDistributionscheduleResponse{value: val, isSet: true}
}

func (v NullableListDistributionscheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDistributionscheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
