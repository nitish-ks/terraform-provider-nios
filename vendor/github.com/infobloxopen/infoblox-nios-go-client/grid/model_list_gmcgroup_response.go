/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListGmcgroupResponse - struct for ListGmcgroupResponse
type ListGmcgroupResponse struct {
	ListGmcgroupResponseObject *ListGmcgroupResponseObject
	ArrayOfGmcgroup            *[]Gmcgroup
}

// ListGmcgroupResponseObjectAsListGmcgroupResponse is a convenience function that returns ListGmcgroupResponseObject wrapped in ListGmcgroupResponse
func ListGmcgroupResponseObjectAsListGmcgroupResponse(v *ListGmcgroupResponseObject) ListGmcgroupResponse {
	return ListGmcgroupResponse{
		ListGmcgroupResponseObject: v,
	}
}

// []GmcgroupAsListGmcgroupResponse is a convenience function that returns []Gmcgroup wrapped in ListGmcgroupResponse
func ArrayOfGmcgroupAsListGmcgroupResponse(v *[]Gmcgroup) ListGmcgroupResponse {
	return ListGmcgroupResponse{
		ArrayOfGmcgroup: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGmcgroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListGmcgroupResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListGmcgroupResponseObject)
	if err == nil {
		jsonListGmcgroupResponseObject, _ := json.Marshal(dst.ListGmcgroupResponseObject)
		if string(jsonListGmcgroupResponseObject) == "{}" { // empty struct
			dst.ListGmcgroupResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListGmcgroupResponseObject = nil
	}

	// try to unmarshal data into ArrayOfGmcgroup
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGmcgroup)
	if err == nil {
		jsonArrayOfGmcgroup, _ := json.Marshal(dst.ArrayOfGmcgroup)
		if string(jsonArrayOfGmcgroup) == "{}" { // empty struct
			dst.ArrayOfGmcgroup = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGmcgroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListGmcgroupResponseObject = nil
		dst.ArrayOfGmcgroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGmcgroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGmcgroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGmcgroupResponse) MarshalJSON() ([]byte, error) {
	if src.ListGmcgroupResponseObject != nil {
		return json.Marshal(&src.ListGmcgroupResponseObject)
	}

	if src.ArrayOfGmcgroup != nil {
		return json.Marshal(&src.ArrayOfGmcgroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGmcgroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListGmcgroupResponseObject != nil {
		return obj.ListGmcgroupResponseObject
	}

	if obj.ArrayOfGmcgroup != nil {
		return obj.ArrayOfGmcgroup
	}

	// all schemas are nil
	return nil
}

type NullableListGmcgroupResponse struct {
	value *ListGmcgroupResponse
	isSet bool
}

func (v NullableListGmcgroupResponse) Get() *ListGmcgroupResponse {
	return v.value
}

func (v *NullableListGmcgroupResponse) Set(val *ListGmcgroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListGmcgroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListGmcgroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGmcgroupResponse(val *ListGmcgroupResponse) *NullableListGmcgroupResponse {
	return &NullableListGmcgroupResponse{value: val, isSet: true}
}

func (v NullableListGmcgroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGmcgroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
