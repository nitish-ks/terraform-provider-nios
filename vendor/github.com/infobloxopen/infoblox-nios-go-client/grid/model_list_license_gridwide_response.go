/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListLicenseGridwideResponse - struct for ListLicenseGridwideResponse
type ListLicenseGridwideResponse struct {
	ListLicenseGridwideResponseObject *ListLicenseGridwideResponseObject
	ArrayOfLicenseGridwide            *[]LicenseGridwide
}

// ListLicenseGridwideResponseObjectAsListLicenseGridwideResponse is a convenience function that returns ListLicenseGridwideResponseObject wrapped in ListLicenseGridwideResponse
func ListLicenseGridwideResponseObjectAsListLicenseGridwideResponse(v *ListLicenseGridwideResponseObject) ListLicenseGridwideResponse {
	return ListLicenseGridwideResponse{
		ListLicenseGridwideResponseObject: v,
	}
}

// []LicenseGridwideAsListLicenseGridwideResponse is a convenience function that returns []LicenseGridwide wrapped in ListLicenseGridwideResponse
func ArrayOfLicenseGridwideAsListLicenseGridwideResponse(v *[]LicenseGridwide) ListLicenseGridwideResponse {
	return ListLicenseGridwideResponse{
		ArrayOfLicenseGridwide: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListLicenseGridwideResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListLicenseGridwideResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListLicenseGridwideResponseObject)
	if err == nil {
		jsonListLicenseGridwideResponseObject, _ := json.Marshal(dst.ListLicenseGridwideResponseObject)
		if string(jsonListLicenseGridwideResponseObject) == "{}" { // empty struct
			dst.ListLicenseGridwideResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListLicenseGridwideResponseObject = nil
	}

	// try to unmarshal data into ArrayOfLicenseGridwide
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLicenseGridwide)
	if err == nil {
		jsonArrayOfLicenseGridwide, _ := json.Marshal(dst.ArrayOfLicenseGridwide)
		if string(jsonArrayOfLicenseGridwide) == "{}" { // empty struct
			dst.ArrayOfLicenseGridwide = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfLicenseGridwide = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListLicenseGridwideResponseObject = nil
		dst.ArrayOfLicenseGridwide = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListLicenseGridwideResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListLicenseGridwideResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListLicenseGridwideResponse) MarshalJSON() ([]byte, error) {
	if src.ListLicenseGridwideResponseObject != nil {
		return json.Marshal(&src.ListLicenseGridwideResponseObject)
	}

	if src.ArrayOfLicenseGridwide != nil {
		return json.Marshal(&src.ArrayOfLicenseGridwide)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListLicenseGridwideResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListLicenseGridwideResponseObject != nil {
		return obj.ListLicenseGridwideResponseObject
	}

	if obj.ArrayOfLicenseGridwide != nil {
		return obj.ArrayOfLicenseGridwide
	}

	// all schemas are nil
	return nil
}

type NullableListLicenseGridwideResponse struct {
	value *ListLicenseGridwideResponse
	isSet bool
}

func (v NullableListLicenseGridwideResponse) Get() *ListLicenseGridwideResponse {
	return v.value
}

func (v *NullableListLicenseGridwideResponse) Set(val *ListLicenseGridwideResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListLicenseGridwideResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListLicenseGridwideResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLicenseGridwideResponse(val *ListLicenseGridwideResponse) *NullableListLicenseGridwideResponse {
	return &NullableListLicenseGridwideResponse{value: val, isSet: true}
}

func (v NullableListLicenseGridwideResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLicenseGridwideResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
