/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListMemberLicenseResponse - struct for ListMemberLicenseResponse
type ListMemberLicenseResponse struct {
	ListMemberLicenseResponseObject *ListMemberLicenseResponseObject
	ArrayOfMemberLicense            *[]MemberLicense
}

// ListMemberLicenseResponseObjectAsListMemberLicenseResponse is a convenience function that returns ListMemberLicenseResponseObject wrapped in ListMemberLicenseResponse
func ListMemberLicenseResponseObjectAsListMemberLicenseResponse(v *ListMemberLicenseResponseObject) ListMemberLicenseResponse {
	return ListMemberLicenseResponse{
		ListMemberLicenseResponseObject: v,
	}
}

// []MemberLicenseAsListMemberLicenseResponse is a convenience function that returns []MemberLicense wrapped in ListMemberLicenseResponse
func ArrayOfMemberLicenseAsListMemberLicenseResponse(v *[]MemberLicense) ListMemberLicenseResponse {
	return ListMemberLicenseResponse{
		ArrayOfMemberLicense: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMemberLicenseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMemberLicenseResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMemberLicenseResponseObject)
	if err == nil {
		jsonListMemberLicenseResponseObject, _ := json.Marshal(dst.ListMemberLicenseResponseObject)
		if string(jsonListMemberLicenseResponseObject) == "{}" { // empty struct
			dst.ListMemberLicenseResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMemberLicenseResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMemberLicense
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMemberLicense)
	if err == nil {
		jsonArrayOfMemberLicense, _ := json.Marshal(dst.ArrayOfMemberLicense)
		if string(jsonArrayOfMemberLicense) == "{}" { // empty struct
			dst.ArrayOfMemberLicense = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMemberLicense = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMemberLicenseResponseObject = nil
		dst.ArrayOfMemberLicense = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMemberLicenseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMemberLicenseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	if src.ListMemberLicenseResponseObject != nil {
		return json.Marshal(&src.ListMemberLicenseResponseObject)
	}

	if src.ArrayOfMemberLicense != nil {
		return json.Marshal(&src.ArrayOfMemberLicense)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMemberLicenseResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMemberLicenseResponseObject != nil {
		return obj.ListMemberLicenseResponseObject
	}

	if obj.ArrayOfMemberLicense != nil {
		return obj.ArrayOfMemberLicense
	}

	// all schemas are nil
	return nil
}

type NullableListMemberLicenseResponse struct {
	value *ListMemberLicenseResponse
	isSet bool
}

func (v NullableListMemberLicenseResponse) Get() *ListMemberLicenseResponse {
	return v.value
}

func (v *NullableListMemberLicenseResponse) Set(val *ListMemberLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMemberLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMemberLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMemberLicenseResponse(val *ListMemberLicenseResponse) *NullableListMemberLicenseResponse {
	return &NullableListMemberLicenseResponse{value: val, isSet: true}
}

func (v NullableListMemberLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMemberLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
