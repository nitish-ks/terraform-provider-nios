/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListMemberResponse - struct for ListMemberResponse
type ListMemberResponse struct {
	ListMemberResponseObject *ListMemberResponseObject
	ArrayOfMember            *[]Member
}

// ListMemberResponseObjectAsListMemberResponse is a convenience function that returns ListMemberResponseObject wrapped in ListMemberResponse
func ListMemberResponseObjectAsListMemberResponse(v *ListMemberResponseObject) ListMemberResponse {
	return ListMemberResponse{
		ListMemberResponseObject: v,
	}
}

// []MemberAsListMemberResponse is a convenience function that returns []Member wrapped in ListMemberResponse
func ArrayOfMemberAsListMemberResponse(v *[]Member) ListMemberResponse {
	return ListMemberResponse{
		ArrayOfMember: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMemberResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMemberResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMemberResponseObject)
	if err == nil {
		jsonListMemberResponseObject, _ := json.Marshal(dst.ListMemberResponseObject)
		if string(jsonListMemberResponseObject) == "{}" { // empty struct
			dst.ListMemberResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMemberResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMember
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMember)
	if err == nil {
		jsonArrayOfMember, _ := json.Marshal(dst.ArrayOfMember)
		if string(jsonArrayOfMember) == "{}" { // empty struct
			dst.ArrayOfMember = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMember = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMemberResponseObject = nil
		dst.ArrayOfMember = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMemberResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMemberResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMemberResponse) MarshalJSON() ([]byte, error) {
	if src.ListMemberResponseObject != nil {
		return json.Marshal(&src.ListMemberResponseObject)
	}

	if src.ArrayOfMember != nil {
		return json.Marshal(&src.ArrayOfMember)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMemberResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMemberResponseObject != nil {
		return obj.ListMemberResponseObject
	}

	if obj.ArrayOfMember != nil {
		return obj.ArrayOfMember
	}

	// all schemas are nil
	return nil
}

type NullableListMemberResponse struct {
	value *ListMemberResponse
	isSet bool
}

func (v NullableListMemberResponse) Get() *ListMemberResponse {
	return v.value
}

func (v *NullableListMemberResponse) Set(val *ListMemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMemberResponse(val *ListMemberResponse) *NullableListMemberResponse {
	return &NullableListMemberResponse{value: val, isSet: true}
}

func (v NullableListMemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
