/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
	"fmt"
)

// ListRestartservicestatusResponse - struct for ListRestartservicestatusResponse
type ListRestartservicestatusResponse struct {
	ListRestartservicestatusResponseObject *ListRestartservicestatusResponseObject
	ArrayOfRestartservicestatus            *[]Restartservicestatus
}

// ListRestartservicestatusResponseObjectAsListRestartservicestatusResponse is a convenience function that returns ListRestartservicestatusResponseObject wrapped in ListRestartservicestatusResponse
func ListRestartservicestatusResponseObjectAsListRestartservicestatusResponse(v *ListRestartservicestatusResponseObject) ListRestartservicestatusResponse {
	return ListRestartservicestatusResponse{
		ListRestartservicestatusResponseObject: v,
	}
}

// []RestartservicestatusAsListRestartservicestatusResponse is a convenience function that returns []Restartservicestatus wrapped in ListRestartservicestatusResponse
func ArrayOfRestartservicestatusAsListRestartservicestatusResponse(v *[]Restartservicestatus) ListRestartservicestatusResponse {
	return ListRestartservicestatusResponse{
		ArrayOfRestartservicestatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRestartservicestatusResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRestartservicestatusResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRestartservicestatusResponseObject)
	if err == nil {
		jsonListRestartservicestatusResponseObject, _ := json.Marshal(dst.ListRestartservicestatusResponseObject)
		if string(jsonListRestartservicestatusResponseObject) == "{}" { // empty struct
			dst.ListRestartservicestatusResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRestartservicestatusResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRestartservicestatus
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRestartservicestatus)
	if err == nil {
		jsonArrayOfRestartservicestatus, _ := json.Marshal(dst.ArrayOfRestartservicestatus)
		if string(jsonArrayOfRestartservicestatus) == "{}" { // empty struct
			dst.ArrayOfRestartservicestatus = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRestartservicestatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRestartservicestatusResponseObject = nil
		dst.ArrayOfRestartservicestatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRestartservicestatusResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRestartservicestatusResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRestartservicestatusResponse) MarshalJSON() ([]byte, error) {
	if src.ListRestartservicestatusResponseObject != nil {
		return json.Marshal(&src.ListRestartservicestatusResponseObject)
	}

	if src.ArrayOfRestartservicestatus != nil {
		return json.Marshal(&src.ArrayOfRestartservicestatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRestartservicestatusResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRestartservicestatusResponseObject != nil {
		return obj.ListRestartservicestatusResponseObject
	}

	if obj.ArrayOfRestartservicestatus != nil {
		return obj.ArrayOfRestartservicestatus
	}

	// all schemas are nil
	return nil
}

type NullableListRestartservicestatusResponse struct {
	value *ListRestartservicestatusResponse
	isSet bool
}

func (v NullableListRestartservicestatusResponse) Get() *ListRestartservicestatusResponse {
	return v.value
}

func (v *NullableListRestartservicestatusResponse) Set(val *ListRestartservicestatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRestartservicestatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRestartservicestatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRestartservicestatusResponse(val *ListRestartservicestatusResponse) *NullableListRestartservicestatusResponse {
	return &NullableListRestartservicestatusResponse{value: val, isSet: true}
}

func (v NullableListRestartservicestatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRestartservicestatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
