/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberDnsFileTransferSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDnsFileTransferSetting{}

// MemberDnsFileTransferSetting struct for MemberDnsFileTransferSetting
type MemberDnsFileTransferSetting struct {
	// The directory to save the captured DNS queries and responses.
	Directory *string `json:"directory,omitempty"`
	// The server address or a FQDN name of the destination server for DNS capture transfer.
	ServerAddressOrFqdn *string `json:"server_address_or_fqdn,omitempty"`
	// The password to access the destination server directory.
	Password *string `json:"password,omitempty"`
	// The transfer protocol for the captured DNS queries and responses.
	Type *string `json:"type,omitempty"`
	// The username to access the destination server directory.
	Username *string `json:"username,omitempty"`
	// Transfer scp port.
	Port                 *int64 `json:"port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberDnsFileTransferSetting MemberDnsFileTransferSetting

// NewMemberDnsFileTransferSetting instantiates a new MemberDnsFileTransferSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDnsFileTransferSetting() *MemberDnsFileTransferSetting {
	this := MemberDnsFileTransferSetting{}
	return &this
}

// NewMemberDnsFileTransferSettingWithDefaults instantiates a new MemberDnsFileTransferSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDnsFileTransferSettingWithDefaults() *MemberDnsFileTransferSetting {
	this := MemberDnsFileTransferSetting{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetDirectory() string {
	if o == nil || IsNil(o.Directory) {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *MemberDnsFileTransferSetting) SetDirectory(v string) {
	o.Directory = &v
}

// GetServerAddressOrFqdn returns the ServerAddressOrFqdn field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetServerAddressOrFqdn() string {
	if o == nil || IsNil(o.ServerAddressOrFqdn) {
		var ret string
		return ret
	}
	return *o.ServerAddressOrFqdn
}

// GetServerAddressOrFqdnOk returns a tuple with the ServerAddressOrFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetServerAddressOrFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddressOrFqdn) {
		return nil, false
	}
	return o.ServerAddressOrFqdn, true
}

// HasServerAddressOrFqdn returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasServerAddressOrFqdn() bool {
	if o != nil && !IsNil(o.ServerAddressOrFqdn) {
		return true
	}

	return false
}

// SetServerAddressOrFqdn gets a reference to the given string and assigns it to the ServerAddressOrFqdn field.
func (o *MemberDnsFileTransferSetting) SetServerAddressOrFqdn(v string) {
	o.ServerAddressOrFqdn = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MemberDnsFileTransferSetting) SetPassword(v string) {
	o.Password = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MemberDnsFileTransferSetting) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MemberDnsFileTransferSetting) SetUsername(v string) {
	o.Username = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *MemberDnsFileTransferSetting) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDnsFileTransferSetting) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *MemberDnsFileTransferSetting) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *MemberDnsFileTransferSetting) SetPort(v int64) {
	o.Port = &v
}

func (o MemberDnsFileTransferSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDnsFileTransferSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}
	if !IsNil(o.ServerAddressOrFqdn) {
		toSerialize["server_address_or_fqdn"] = o.ServerAddressOrFqdn
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberDnsFileTransferSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberDnsFileTransferSetting := _MemberDnsFileTransferSetting{}

	err = json.Unmarshal(data, &varMemberDnsFileTransferSetting)

	if err != nil {
		return err
	}

	*o = MemberDnsFileTransferSetting(varMemberDnsFileTransferSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "directory")
		delete(additionalProperties, "server_address_or_fqdn")
		delete(additionalProperties, "password")
		delete(additionalProperties, "type")
		delete(additionalProperties, "username")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberDnsFileTransferSetting struct {
	value *MemberDnsFileTransferSetting
	isSet bool
}

func (v NullableMemberDnsFileTransferSetting) Get() *MemberDnsFileTransferSetting {
	return v.value
}

func (v *NullableMemberDnsFileTransferSetting) Set(val *MemberDnsFileTransferSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDnsFileTransferSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDnsFileTransferSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDnsFileTransferSetting(val *MemberDnsFileTransferSetting) *NullableMemberDnsFileTransferSetting {
	return &NullableMemberDnsFileTransferSetting{value: val, isSet: true}
}

func (v NullableMemberDnsFileTransferSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDnsFileTransferSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
