/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberNatSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberNatSetting{}

// MemberNatSetting struct for MemberNatSetting
type MemberNatSetting struct {
	// Determines if NAT should be enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// External IP address for NAT.
	ExternalVirtualIp *string `json:"external_virtual_ip,omitempty"`
	// The NAT group.
	Group                *string `json:"group,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberNatSetting MemberNatSetting

// NewMemberNatSetting instantiates a new MemberNatSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberNatSetting() *MemberNatSetting {
	this := MemberNatSetting{}
	return &this
}

// NewMemberNatSettingWithDefaults instantiates a new MemberNatSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberNatSettingWithDefaults() *MemberNatSetting {
	this := MemberNatSetting{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MemberNatSetting) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNatSetting) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MemberNatSetting) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MemberNatSetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalVirtualIp returns the ExternalVirtualIp field value if set, zero value otherwise.
func (o *MemberNatSetting) GetExternalVirtualIp() string {
	if o == nil || IsNil(o.ExternalVirtualIp) {
		var ret string
		return ret
	}
	return *o.ExternalVirtualIp
}

// GetExternalVirtualIpOk returns a tuple with the ExternalVirtualIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNatSetting) GetExternalVirtualIpOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalVirtualIp) {
		return nil, false
	}
	return o.ExternalVirtualIp, true
}

// HasExternalVirtualIp returns a boolean if a field has been set.
func (o *MemberNatSetting) HasExternalVirtualIp() bool {
	if o != nil && !IsNil(o.ExternalVirtualIp) {
		return true
	}

	return false
}

// SetExternalVirtualIp gets a reference to the given string and assigns it to the ExternalVirtualIp field.
func (o *MemberNatSetting) SetExternalVirtualIp(v string) {
	o.ExternalVirtualIp = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *MemberNatSetting) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNatSetting) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *MemberNatSetting) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *MemberNatSetting) SetGroup(v string) {
	o.Group = &v
}

func (o MemberNatSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberNatSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalVirtualIp) {
		toSerialize["external_virtual_ip"] = o.ExternalVirtualIp
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberNatSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberNatSetting := _MemberNatSetting{}

	err = json.Unmarshal(data, &varMemberNatSetting)

	if err != nil {
		return err
	}

	*o = MemberNatSetting(varMemberNatSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "external_virtual_ip")
		delete(additionalProperties, "group")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberNatSetting struct {
	value *MemberNatSetting
	isSet bool
}

func (v NullableMemberNatSetting) Get() *MemberNatSetting {
	return v.value
}

func (v *NullableMemberNatSetting) Set(val *MemberNatSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberNatSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberNatSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberNatSetting(val *MemberNatSetting) *NullableMemberNatSetting {
	return &NullableMemberNatSetting{value: val, isSet: true}
}

func (v NullableMemberNatSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberNatSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
