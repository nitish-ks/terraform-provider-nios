/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the MemberVipSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberVipSetting{}

// MemberVipSetting struct for MemberVipSetting
type MemberVipSetting struct {
	// The IPv4 Address of the Grid Member.
	Address *string `json:"address,omitempty"`
	// The default gateway for the Grid Member.
	Gateway *string `json:"gateway,omitempty"`
	// The subnet mask for the Grid Member.
	SubnetMask *string `json:"subnet_mask,omitempty"`
	// The identifier for the VLAN. Valid values are from 1 to 4096.
	VlanId *int64 `json:"vlan_id,omitempty"`
	// Determines if the current address is the primary VLAN address or not.
	Primary *bool `json:"primary,omitempty"`
	// The DSCP (Differentiated Services Code Point) value determines relative priorities for the type of services on your network. The appliance implements QoS (Quality of Service) rules based on this configuration. Valid values are from 0 to 63.
	Dscp *int64 `json:"dscp,omitempty"`
	// LAN netmask only for GCP HA.
	LanSubnetMask *string `json:"lan_subnet_mask,omitempty"`
	// LAN gateway only for GCP HA.
	LanGateway *string `json:"lan_gateway,omitempty"`
	// Use flag for: dscp
	UseDscp              *bool `json:"use_dscp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MemberVipSetting MemberVipSetting

// NewMemberVipSetting instantiates a new MemberVipSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberVipSetting() *MemberVipSetting {
	this := MemberVipSetting{}
	return &this
}

// NewMemberVipSettingWithDefaults instantiates a new MemberVipSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberVipSettingWithDefaults() *MemberVipSetting {
	this := MemberVipSetting{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MemberVipSetting) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MemberVipSetting) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MemberVipSetting) SetAddress(v string) {
	o.Address = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *MemberVipSetting) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *MemberVipSetting) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *MemberVipSetting) SetGateway(v string) {
	o.Gateway = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *MemberVipSetting) GetSubnetMask() string {
	if o == nil || IsNil(o.SubnetMask) {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetSubnetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetMask) {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *MemberVipSetting) HasSubnetMask() bool {
	if o != nil && !IsNil(o.SubnetMask) {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *MemberVipSetting) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *MemberVipSetting) GetVlanId() int64 {
	if o == nil || IsNil(o.VlanId) {
		var ret int64
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetVlanIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *MemberVipSetting) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int64 and assigns it to the VlanId field.
func (o *MemberVipSetting) SetVlanId(v int64) {
	o.VlanId = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *MemberVipSetting) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *MemberVipSetting) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *MemberVipSetting) SetPrimary(v bool) {
	o.Primary = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *MemberVipSetting) GetDscp() int64 {
	if o == nil || IsNil(o.Dscp) {
		var ret int64
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetDscpOk() (*int64, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *MemberVipSetting) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int64 and assigns it to the Dscp field.
func (o *MemberVipSetting) SetDscp(v int64) {
	o.Dscp = &v
}

// GetLanSubnetMask returns the LanSubnetMask field value if set, zero value otherwise.
func (o *MemberVipSetting) GetLanSubnetMask() string {
	if o == nil || IsNil(o.LanSubnetMask) {
		var ret string
		return ret
	}
	return *o.LanSubnetMask
}

// GetLanSubnetMaskOk returns a tuple with the LanSubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetLanSubnetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.LanSubnetMask) {
		return nil, false
	}
	return o.LanSubnetMask, true
}

// HasLanSubnetMask returns a boolean if a field has been set.
func (o *MemberVipSetting) HasLanSubnetMask() bool {
	if o != nil && !IsNil(o.LanSubnetMask) {
		return true
	}

	return false
}

// SetLanSubnetMask gets a reference to the given string and assigns it to the LanSubnetMask field.
func (o *MemberVipSetting) SetLanSubnetMask(v string) {
	o.LanSubnetMask = &v
}

// GetLanGateway returns the LanGateway field value if set, zero value otherwise.
func (o *MemberVipSetting) GetLanGateway() string {
	if o == nil || IsNil(o.LanGateway) {
		var ret string
		return ret
	}
	return *o.LanGateway
}

// GetLanGatewayOk returns a tuple with the LanGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetLanGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.LanGateway) {
		return nil, false
	}
	return o.LanGateway, true
}

// HasLanGateway returns a boolean if a field has been set.
func (o *MemberVipSetting) HasLanGateway() bool {
	if o != nil && !IsNil(o.LanGateway) {
		return true
	}

	return false
}

// SetLanGateway gets a reference to the given string and assigns it to the LanGateway field.
func (o *MemberVipSetting) SetLanGateway(v string) {
	o.LanGateway = &v
}

// GetUseDscp returns the UseDscp field value if set, zero value otherwise.
func (o *MemberVipSetting) GetUseDscp() bool {
	if o == nil || IsNil(o.UseDscp) {
		var ret bool
		return ret
	}
	return *o.UseDscp
}

// GetUseDscpOk returns a tuple with the UseDscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVipSetting) GetUseDscpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDscp) {
		return nil, false
	}
	return o.UseDscp, true
}

// HasUseDscp returns a boolean if a field has been set.
func (o *MemberVipSetting) HasUseDscp() bool {
	if o != nil && !IsNil(o.UseDscp) {
		return true
	}

	return false
}

// SetUseDscp gets a reference to the given bool and assigns it to the UseDscp field.
func (o *MemberVipSetting) SetUseDscp(v bool) {
	o.UseDscp = &v
}

func (o MemberVipSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberVipSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.SubnetMask) {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.LanSubnetMask) {
		toSerialize["lan_subnet_mask"] = o.LanSubnetMask
	}
	if !IsNil(o.LanGateway) {
		toSerialize["lan_gateway"] = o.LanGateway
	}
	if !IsNil(o.UseDscp) {
		toSerialize["use_dscp"] = o.UseDscp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberVipSetting) UnmarshalJSON(data []byte) (err error) {
	varMemberVipSetting := _MemberVipSetting{}

	err = json.Unmarshal(data, &varMemberVipSetting)

	if err != nil {
		return err
	}

	*o = MemberVipSetting(varMemberVipSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "subnet_mask")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "dscp")
		delete(additionalProperties, "lan_subnet_mask")
		delete(additionalProperties, "lan_gateway")
		delete(additionalProperties, "use_dscp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberVipSetting struct {
	value *MemberVipSetting
	isSet bool
}

func (v NullableMemberVipSetting) Get() *MemberVipSetting {
	return v.value
}

func (v *NullableMemberVipSetting) Set(val *MemberVipSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberVipSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberVipSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberVipSetting(val *MemberVipSetting) *NullableMemberVipSetting {
	return &NullableMemberVipSetting{value: val, isSet: true}
}

func (v NullableMemberVipSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberVipSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
