/*
Infoblox GRID API

OpenAPI specification for Infoblox NIOS WAPI GRID objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package grid

import (
	"encoding/json"
)

// checks if the Upgradestatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upgradestatus{}

// Upgradestatus struct for Upgradestatus
type Upgradestatus struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Determines if distribution is allowed for the Grid.
	AllowDistribution *bool `json:"allow_distribution,omitempty"`
	// Determines if distribution scheduling is allowed.
	AllowDistributionScheduling *bool `json:"allow_distribution_scheduling,omitempty"`
	// Determines if upgrade is allowed for the Grid.
	AllowUpgrade *bool `json:"allow_upgrade,omitempty"`
	// Determines if the Grid is allowed to cancel an upgrade.
	AllowUpgradeCancel *bool `json:"allow_upgrade_cancel,omitempty"`
	// Determines if the Grid is allowed to pause an upgrade.
	AllowUpgradePause *bool `json:"allow_upgrade_pause,omitempty"`
	// Determines if the Grid is allowed to resume an upgrade.
	AllowUpgradeResume *bool `json:"allow_upgrade_resume,omitempty"`
	// Determine if the Grid is allowed to schedule an upgrade.
	AllowUpgradeScheduling *bool `json:"allow_upgrade_scheduling,omitempty"`
	// Determines if the Grid is allowed to test an upgrade.
	AllowUpgradeTest *bool `json:"allow_upgrade_test,omitempty"`
	// Determine if the Grid is allowed to upload a build.
	AllowUpload *bool `json:"allow_upload,omitempty"`
	// The alternative version.
	AlternateVersion *string `json:"alternate_version,omitempty"`
	// Comment in readable format for an upgrade group a or virtual node.
	Comment *string `json:"comment,omitempty"`
	// The current version.
	CurrentVersion *string `json:"current_version,omitempty"`
	// Current version summary for the 'type' requested. This field can be requested for the Grid, a certain group that has virtual nodes as subelements, or for the overall group status.
	CurrentVersionSummary *string `json:"current_version_summary,omitempty"`
	// Determines if the distribution schedule is active for the Grid.
	DistributionScheduleActive *bool `json:"distribution_schedule_active,omitempty"`
	// The Grid master distribution schedule time.
	DistributionScheduleTime *int64 `json:"distribution_schedule_time,omitempty"`
	// The current state of distribution process.
	DistributionState *string `json:"distribution_state,omitempty"`
	// The version that is distributed.
	DistributionVersion *string `json:"distribution_version,omitempty"`
	// Distribution version summary for the 'type' requested. This field can be requested for the Grid, a certain group that has virtual nodes as subelements, or for the overall group status.
	DistributionVersionSummary *string `json:"distribution_version_summary,omitempty"`
	// The status of a certain element with regards to the type requested.
	ElementStatus *string `json:"element_status,omitempty"`
	// The state of the Grid.
	GridState *string `json:"grid_state,omitempty"`
	// The state of a group.
	GroupState *string `json:"group_state,omitempty"`
	// Status of the HA pair.
	HaStatus *string `json:"ha_status,omitempty"`
	// The list of hotfixes.
	Hotfixes []UpgradestatusHotfixes `json:"hotfixes,omitempty"`
	// The IPv4 Address of virtual node or physical one.
	Ipv4Address *string `json:"ipv4_address,omitempty"`
	// The IPv6 Address of virtual node or physical one.
	Ipv6Address *string `json:"ipv6_address,omitempty"`
	// Member that participates in the upgrade process.
	Member *string `json:"member,omitempty"`
	// The Grid message.
	Message *string `json:"message,omitempty"`
	// Status of the physical node in the HA pair.
	PnodeRole *string `json:"pnode_role,omitempty"`
	// Determines if the upgrade process is reverted.
	Reverted *bool `json:"reverted,omitempty"`
	// The status time.
	StatusTime *int64 `json:"status_time,omitempty"`
	// Status of a certain group, virtual node or physical node.
	StatusValue *string `json:"status_value,omitempty"`
	// Timestamp of when the status was updated.
	StatusValueUpdateTime *int64 `json:"status_value_update_time,omitempty"`
	// The list of upgrade process steps.
	Steps []UpgradestatusSteps `json:"steps,omitempty"`
	// The number of steps done.
	StepsCompleted *int64 `json:"steps_completed,omitempty"`
	// Total number steps in the upgrade process.
	StepsTotal *int64 `json:"steps_total,omitempty"`
	// The type of subelements to be requested. If 'type' is 'GROUP', or 'VNODE', then 'upgrade_group' or 'member' should have proper values for an operation to return data specific for the values passed. Otherwise, overall data is returned for every group or physical node.
	SubelementType *string `json:"subelement_type,omitempty"`
	// Number of subelements that have accomplished an upgrade.
	SubelementsCompleted *int64 `json:"subelements_completed,omitempty"`
	// The upgrade process information of subelements.
	SubelementsStatus []string `json:"subelements_status,omitempty"`
	// Number of subelements number in a certain group, virtual node, or the Grid.
	SubelementsTotal *int64 `json:"subelements_total,omitempty"`
	// The type of upper level elements to be requested.
	Type *string `json:"type,omitempty"`
	// Upgrade group that participates in the upgrade process.
	UpgradeGroup *string `json:"upgrade_group,omitempty"`
	// Determines if the upgrade schedule is active.
	UpgradeScheduleActive *bool `json:"upgrade_schedule_active,omitempty"`
	// The upgrade state of the Grid.
	UpgradeState *string `json:"upgrade_state,omitempty"`
	// The upgrade test status of the Grid.
	UpgradeTestStatus *string `json:"upgrade_test_status,omitempty"`
	// The version that is uploaded.
	UploadVersion *string `json:"upload_version,omitempty"`
	// Upload version summary for the 'type' requested. This field can be requested for the Grid, a certain group that has virtual nodes as subelements, or overall group status.
	UploadVersionSummary *string `json:"upload_version_summary,omitempty"`
}

// NewUpgradestatus instantiates a new Upgradestatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradestatus() *Upgradestatus {
	this := Upgradestatus{}
	return &this
}

// NewUpgradestatusWithDefaults instantiates a new Upgradestatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradestatusWithDefaults() *Upgradestatus {
	this := Upgradestatus{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Upgradestatus) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Upgradestatus) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Upgradestatus) SetRef(v string) {
	o.Ref = &v
}

// GetAllowDistribution returns the AllowDistribution field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowDistribution() bool {
	if o == nil || IsNil(o.AllowDistribution) {
		var ret bool
		return ret
	}
	return *o.AllowDistribution
}

// GetAllowDistributionOk returns a tuple with the AllowDistribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowDistributionOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDistribution) {
		return nil, false
	}
	return o.AllowDistribution, true
}

// HasAllowDistribution returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowDistribution() bool {
	if o != nil && !IsNil(o.AllowDistribution) {
		return true
	}

	return false
}

// SetAllowDistribution gets a reference to the given bool and assigns it to the AllowDistribution field.
func (o *Upgradestatus) SetAllowDistribution(v bool) {
	o.AllowDistribution = &v
}

// GetAllowDistributionScheduling returns the AllowDistributionScheduling field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowDistributionScheduling() bool {
	if o == nil || IsNil(o.AllowDistributionScheduling) {
		var ret bool
		return ret
	}
	return *o.AllowDistributionScheduling
}

// GetAllowDistributionSchedulingOk returns a tuple with the AllowDistributionScheduling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowDistributionSchedulingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDistributionScheduling) {
		return nil, false
	}
	return o.AllowDistributionScheduling, true
}

// HasAllowDistributionScheduling returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowDistributionScheduling() bool {
	if o != nil && !IsNil(o.AllowDistributionScheduling) {
		return true
	}

	return false
}

// SetAllowDistributionScheduling gets a reference to the given bool and assigns it to the AllowDistributionScheduling field.
func (o *Upgradestatus) SetAllowDistributionScheduling(v bool) {
	o.AllowDistributionScheduling = &v
}

// GetAllowUpgrade returns the AllowUpgrade field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgrade() bool {
	if o == nil || IsNil(o.AllowUpgrade) {
		var ret bool
		return ret
	}
	return *o.AllowUpgrade
}

// GetAllowUpgradeOk returns a tuple with the AllowUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgrade) {
		return nil, false
	}
	return o.AllowUpgrade, true
}

// HasAllowUpgrade returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgrade() bool {
	if o != nil && !IsNil(o.AllowUpgrade) {
		return true
	}

	return false
}

// SetAllowUpgrade gets a reference to the given bool and assigns it to the AllowUpgrade field.
func (o *Upgradestatus) SetAllowUpgrade(v bool) {
	o.AllowUpgrade = &v
}

// GetAllowUpgradeCancel returns the AllowUpgradeCancel field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgradeCancel() bool {
	if o == nil || IsNil(o.AllowUpgradeCancel) {
		var ret bool
		return ret
	}
	return *o.AllowUpgradeCancel
}

// GetAllowUpgradeCancelOk returns a tuple with the AllowUpgradeCancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradeCancelOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgradeCancel) {
		return nil, false
	}
	return o.AllowUpgradeCancel, true
}

// HasAllowUpgradeCancel returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgradeCancel() bool {
	if o != nil && !IsNil(o.AllowUpgradeCancel) {
		return true
	}

	return false
}

// SetAllowUpgradeCancel gets a reference to the given bool and assigns it to the AllowUpgradeCancel field.
func (o *Upgradestatus) SetAllowUpgradeCancel(v bool) {
	o.AllowUpgradeCancel = &v
}

// GetAllowUpgradePause returns the AllowUpgradePause field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgradePause() bool {
	if o == nil || IsNil(o.AllowUpgradePause) {
		var ret bool
		return ret
	}
	return *o.AllowUpgradePause
}

// GetAllowUpgradePauseOk returns a tuple with the AllowUpgradePause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradePauseOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgradePause) {
		return nil, false
	}
	return o.AllowUpgradePause, true
}

// HasAllowUpgradePause returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgradePause() bool {
	if o != nil && !IsNil(o.AllowUpgradePause) {
		return true
	}

	return false
}

// SetAllowUpgradePause gets a reference to the given bool and assigns it to the AllowUpgradePause field.
func (o *Upgradestatus) SetAllowUpgradePause(v bool) {
	o.AllowUpgradePause = &v
}

// GetAllowUpgradeResume returns the AllowUpgradeResume field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgradeResume() bool {
	if o == nil || IsNil(o.AllowUpgradeResume) {
		var ret bool
		return ret
	}
	return *o.AllowUpgradeResume
}

// GetAllowUpgradeResumeOk returns a tuple with the AllowUpgradeResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradeResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgradeResume) {
		return nil, false
	}
	return o.AllowUpgradeResume, true
}

// HasAllowUpgradeResume returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgradeResume() bool {
	if o != nil && !IsNil(o.AllowUpgradeResume) {
		return true
	}

	return false
}

// SetAllowUpgradeResume gets a reference to the given bool and assigns it to the AllowUpgradeResume field.
func (o *Upgradestatus) SetAllowUpgradeResume(v bool) {
	o.AllowUpgradeResume = &v
}

// GetAllowUpgradeScheduling returns the AllowUpgradeScheduling field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgradeScheduling() bool {
	if o == nil || IsNil(o.AllowUpgradeScheduling) {
		var ret bool
		return ret
	}
	return *o.AllowUpgradeScheduling
}

// GetAllowUpgradeSchedulingOk returns a tuple with the AllowUpgradeScheduling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradeSchedulingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgradeScheduling) {
		return nil, false
	}
	return o.AllowUpgradeScheduling, true
}

// HasAllowUpgradeScheduling returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgradeScheduling() bool {
	if o != nil && !IsNil(o.AllowUpgradeScheduling) {
		return true
	}

	return false
}

// SetAllowUpgradeScheduling gets a reference to the given bool and assigns it to the AllowUpgradeScheduling field.
func (o *Upgradestatus) SetAllowUpgradeScheduling(v bool) {
	o.AllowUpgradeScheduling = &v
}

// GetAllowUpgradeTest returns the AllowUpgradeTest field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpgradeTest() bool {
	if o == nil || IsNil(o.AllowUpgradeTest) {
		var ret bool
		return ret
	}
	return *o.AllowUpgradeTest
}

// GetAllowUpgradeTestOk returns a tuple with the AllowUpgradeTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUpgradeTestOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpgradeTest) {
		return nil, false
	}
	return o.AllowUpgradeTest, true
}

// HasAllowUpgradeTest returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpgradeTest() bool {
	if o != nil && !IsNil(o.AllowUpgradeTest) {
		return true
	}

	return false
}

// SetAllowUpgradeTest gets a reference to the given bool and assigns it to the AllowUpgradeTest field.
func (o *Upgradestatus) SetAllowUpgradeTest(v bool) {
	o.AllowUpgradeTest = &v
}

// GetAllowUpload returns the AllowUpload field value if set, zero value otherwise.
func (o *Upgradestatus) GetAllowUpload() bool {
	if o == nil || IsNil(o.AllowUpload) {
		var ret bool
		return ret
	}
	return *o.AllowUpload
}

// GetAllowUploadOk returns a tuple with the AllowUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAllowUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUpload) {
		return nil, false
	}
	return o.AllowUpload, true
}

// HasAllowUpload returns a boolean if a field has been set.
func (o *Upgradestatus) HasAllowUpload() bool {
	if o != nil && !IsNil(o.AllowUpload) {
		return true
	}

	return false
}

// SetAllowUpload gets a reference to the given bool and assigns it to the AllowUpload field.
func (o *Upgradestatus) SetAllowUpload(v bool) {
	o.AllowUpload = &v
}

// GetAlternateVersion returns the AlternateVersion field value if set, zero value otherwise.
func (o *Upgradestatus) GetAlternateVersion() string {
	if o == nil || IsNil(o.AlternateVersion) {
		var ret string
		return ret
	}
	return *o.AlternateVersion
}

// GetAlternateVersionOk returns a tuple with the AlternateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetAlternateVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AlternateVersion) {
		return nil, false
	}
	return o.AlternateVersion, true
}

// HasAlternateVersion returns a boolean if a field has been set.
func (o *Upgradestatus) HasAlternateVersion() bool {
	if o != nil && !IsNil(o.AlternateVersion) {
		return true
	}

	return false
}

// SetAlternateVersion gets a reference to the given string and assigns it to the AlternateVersion field.
func (o *Upgradestatus) SetAlternateVersion(v string) {
	o.AlternateVersion = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Upgradestatus) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Upgradestatus) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Upgradestatus) SetComment(v string) {
	o.Comment = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *Upgradestatus) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *Upgradestatus) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *Upgradestatus) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetCurrentVersionSummary returns the CurrentVersionSummary field value if set, zero value otherwise.
func (o *Upgradestatus) GetCurrentVersionSummary() string {
	if o == nil || IsNil(o.CurrentVersionSummary) {
		var ret string
		return ret
	}
	return *o.CurrentVersionSummary
}

// GetCurrentVersionSummaryOk returns a tuple with the CurrentVersionSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetCurrentVersionSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersionSummary) {
		return nil, false
	}
	return o.CurrentVersionSummary, true
}

// HasCurrentVersionSummary returns a boolean if a field has been set.
func (o *Upgradestatus) HasCurrentVersionSummary() bool {
	if o != nil && !IsNil(o.CurrentVersionSummary) {
		return true
	}

	return false
}

// SetCurrentVersionSummary gets a reference to the given string and assigns it to the CurrentVersionSummary field.
func (o *Upgradestatus) SetCurrentVersionSummary(v string) {
	o.CurrentVersionSummary = &v
}

// GetDistributionScheduleActive returns the DistributionScheduleActive field value if set, zero value otherwise.
func (o *Upgradestatus) GetDistributionScheduleActive() bool {
	if o == nil || IsNil(o.DistributionScheduleActive) {
		var ret bool
		return ret
	}
	return *o.DistributionScheduleActive
}

// GetDistributionScheduleActiveOk returns a tuple with the DistributionScheduleActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetDistributionScheduleActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.DistributionScheduleActive) {
		return nil, false
	}
	return o.DistributionScheduleActive, true
}

// HasDistributionScheduleActive returns a boolean if a field has been set.
func (o *Upgradestatus) HasDistributionScheduleActive() bool {
	if o != nil && !IsNil(o.DistributionScheduleActive) {
		return true
	}

	return false
}

// SetDistributionScheduleActive gets a reference to the given bool and assigns it to the DistributionScheduleActive field.
func (o *Upgradestatus) SetDistributionScheduleActive(v bool) {
	o.DistributionScheduleActive = &v
}

// GetDistributionScheduleTime returns the DistributionScheduleTime field value if set, zero value otherwise.
func (o *Upgradestatus) GetDistributionScheduleTime() int64 {
	if o == nil || IsNil(o.DistributionScheduleTime) {
		var ret int64
		return ret
	}
	return *o.DistributionScheduleTime
}

// GetDistributionScheduleTimeOk returns a tuple with the DistributionScheduleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetDistributionScheduleTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.DistributionScheduleTime) {
		return nil, false
	}
	return o.DistributionScheduleTime, true
}

// HasDistributionScheduleTime returns a boolean if a field has been set.
func (o *Upgradestatus) HasDistributionScheduleTime() bool {
	if o != nil && !IsNil(o.DistributionScheduleTime) {
		return true
	}

	return false
}

// SetDistributionScheduleTime gets a reference to the given int64 and assigns it to the DistributionScheduleTime field.
func (o *Upgradestatus) SetDistributionScheduleTime(v int64) {
	o.DistributionScheduleTime = &v
}

// GetDistributionState returns the DistributionState field value if set, zero value otherwise.
func (o *Upgradestatus) GetDistributionState() string {
	if o == nil || IsNil(o.DistributionState) {
		var ret string
		return ret
	}
	return *o.DistributionState
}

// GetDistributionStateOk returns a tuple with the DistributionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetDistributionStateOk() (*string, bool) {
	if o == nil || IsNil(o.DistributionState) {
		return nil, false
	}
	return o.DistributionState, true
}

// HasDistributionState returns a boolean if a field has been set.
func (o *Upgradestatus) HasDistributionState() bool {
	if o != nil && !IsNil(o.DistributionState) {
		return true
	}

	return false
}

// SetDistributionState gets a reference to the given string and assigns it to the DistributionState field.
func (o *Upgradestatus) SetDistributionState(v string) {
	o.DistributionState = &v
}

// GetDistributionVersion returns the DistributionVersion field value if set, zero value otherwise.
func (o *Upgradestatus) GetDistributionVersion() string {
	if o == nil || IsNil(o.DistributionVersion) {
		var ret string
		return ret
	}
	return *o.DistributionVersion
}

// GetDistributionVersionOk returns a tuple with the DistributionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetDistributionVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DistributionVersion) {
		return nil, false
	}
	return o.DistributionVersion, true
}

// HasDistributionVersion returns a boolean if a field has been set.
func (o *Upgradestatus) HasDistributionVersion() bool {
	if o != nil && !IsNil(o.DistributionVersion) {
		return true
	}

	return false
}

// SetDistributionVersion gets a reference to the given string and assigns it to the DistributionVersion field.
func (o *Upgradestatus) SetDistributionVersion(v string) {
	o.DistributionVersion = &v
}

// GetDistributionVersionSummary returns the DistributionVersionSummary field value if set, zero value otherwise.
func (o *Upgradestatus) GetDistributionVersionSummary() string {
	if o == nil || IsNil(o.DistributionVersionSummary) {
		var ret string
		return ret
	}
	return *o.DistributionVersionSummary
}

// GetDistributionVersionSummaryOk returns a tuple with the DistributionVersionSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetDistributionVersionSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.DistributionVersionSummary) {
		return nil, false
	}
	return o.DistributionVersionSummary, true
}

// HasDistributionVersionSummary returns a boolean if a field has been set.
func (o *Upgradestatus) HasDistributionVersionSummary() bool {
	if o != nil && !IsNil(o.DistributionVersionSummary) {
		return true
	}

	return false
}

// SetDistributionVersionSummary gets a reference to the given string and assigns it to the DistributionVersionSummary field.
func (o *Upgradestatus) SetDistributionVersionSummary(v string) {
	o.DistributionVersionSummary = &v
}

// GetElementStatus returns the ElementStatus field value if set, zero value otherwise.
func (o *Upgradestatus) GetElementStatus() string {
	if o == nil || IsNil(o.ElementStatus) {
		var ret string
		return ret
	}
	return *o.ElementStatus
}

// GetElementStatusOk returns a tuple with the ElementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetElementStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ElementStatus) {
		return nil, false
	}
	return o.ElementStatus, true
}

// HasElementStatus returns a boolean if a field has been set.
func (o *Upgradestatus) HasElementStatus() bool {
	if o != nil && !IsNil(o.ElementStatus) {
		return true
	}

	return false
}

// SetElementStatus gets a reference to the given string and assigns it to the ElementStatus field.
func (o *Upgradestatus) SetElementStatus(v string) {
	o.ElementStatus = &v
}

// GetGridState returns the GridState field value if set, zero value otherwise.
func (o *Upgradestatus) GetGridState() string {
	if o == nil || IsNil(o.GridState) {
		var ret string
		return ret
	}
	return *o.GridState
}

// GetGridStateOk returns a tuple with the GridState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetGridStateOk() (*string, bool) {
	if o == nil || IsNil(o.GridState) {
		return nil, false
	}
	return o.GridState, true
}

// HasGridState returns a boolean if a field has been set.
func (o *Upgradestatus) HasGridState() bool {
	if o != nil && !IsNil(o.GridState) {
		return true
	}

	return false
}

// SetGridState gets a reference to the given string and assigns it to the GridState field.
func (o *Upgradestatus) SetGridState(v string) {
	o.GridState = &v
}

// GetGroupState returns the GroupState field value if set, zero value otherwise.
func (o *Upgradestatus) GetGroupState() string {
	if o == nil || IsNil(o.GroupState) {
		var ret string
		return ret
	}
	return *o.GroupState
}

// GetGroupStateOk returns a tuple with the GroupState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetGroupStateOk() (*string, bool) {
	if o == nil || IsNil(o.GroupState) {
		return nil, false
	}
	return o.GroupState, true
}

// HasGroupState returns a boolean if a field has been set.
func (o *Upgradestatus) HasGroupState() bool {
	if o != nil && !IsNil(o.GroupState) {
		return true
	}

	return false
}

// SetGroupState gets a reference to the given string and assigns it to the GroupState field.
func (o *Upgradestatus) SetGroupState(v string) {
	o.GroupState = &v
}

// GetHaStatus returns the HaStatus field value if set, zero value otherwise.
func (o *Upgradestatus) GetHaStatus() string {
	if o == nil || IsNil(o.HaStatus) {
		var ret string
		return ret
	}
	return *o.HaStatus
}

// GetHaStatusOk returns a tuple with the HaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetHaStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HaStatus) {
		return nil, false
	}
	return o.HaStatus, true
}

// HasHaStatus returns a boolean if a field has been set.
func (o *Upgradestatus) HasHaStatus() bool {
	if o != nil && !IsNil(o.HaStatus) {
		return true
	}

	return false
}

// SetHaStatus gets a reference to the given string and assigns it to the HaStatus field.
func (o *Upgradestatus) SetHaStatus(v string) {
	o.HaStatus = &v
}

// GetHotfixes returns the Hotfixes field value if set, zero value otherwise.
func (o *Upgradestatus) GetHotfixes() []UpgradestatusHotfixes {
	if o == nil || IsNil(o.Hotfixes) {
		var ret []UpgradestatusHotfixes
		return ret
	}
	return o.Hotfixes
}

// GetHotfixesOk returns a tuple with the Hotfixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetHotfixesOk() ([]UpgradestatusHotfixes, bool) {
	if o == nil || IsNil(o.Hotfixes) {
		return nil, false
	}
	return o.Hotfixes, true
}

// HasHotfixes returns a boolean if a field has been set.
func (o *Upgradestatus) HasHotfixes() bool {
	if o != nil && !IsNil(o.Hotfixes) {
		return true
	}

	return false
}

// SetHotfixes gets a reference to the given []UpgradestatusHotfixes and assigns it to the Hotfixes field.
func (o *Upgradestatus) SetHotfixes(v []UpgradestatusHotfixes) {
	o.Hotfixes = v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *Upgradestatus) GetIpv4Address() string {
	if o == nil || IsNil(o.Ipv4Address) {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Address) {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *Upgradestatus) HasIpv4Address() bool {
	if o != nil && !IsNil(o.Ipv4Address) {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *Upgradestatus) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *Upgradestatus) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *Upgradestatus) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *Upgradestatus) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Upgradestatus) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Upgradestatus) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *Upgradestatus) SetMember(v string) {
	o.Member = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Upgradestatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Upgradestatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Upgradestatus) SetMessage(v string) {
	o.Message = &v
}

// GetPnodeRole returns the PnodeRole field value if set, zero value otherwise.
func (o *Upgradestatus) GetPnodeRole() string {
	if o == nil || IsNil(o.PnodeRole) {
		var ret string
		return ret
	}
	return *o.PnodeRole
}

// GetPnodeRoleOk returns a tuple with the PnodeRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetPnodeRoleOk() (*string, bool) {
	if o == nil || IsNil(o.PnodeRole) {
		return nil, false
	}
	return o.PnodeRole, true
}

// HasPnodeRole returns a boolean if a field has been set.
func (o *Upgradestatus) HasPnodeRole() bool {
	if o != nil && !IsNil(o.PnodeRole) {
		return true
	}

	return false
}

// SetPnodeRole gets a reference to the given string and assigns it to the PnodeRole field.
func (o *Upgradestatus) SetPnodeRole(v string) {
	o.PnodeRole = &v
}

// GetReverted returns the Reverted field value if set, zero value otherwise.
func (o *Upgradestatus) GetReverted() bool {
	if o == nil || IsNil(o.Reverted) {
		var ret bool
		return ret
	}
	return *o.Reverted
}

// GetRevertedOk returns a tuple with the Reverted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetRevertedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reverted) {
		return nil, false
	}
	return o.Reverted, true
}

// HasReverted returns a boolean if a field has been set.
func (o *Upgradestatus) HasReverted() bool {
	if o != nil && !IsNil(o.Reverted) {
		return true
	}

	return false
}

// SetReverted gets a reference to the given bool and assigns it to the Reverted field.
func (o *Upgradestatus) SetReverted(v bool) {
	o.Reverted = &v
}

// GetStatusTime returns the StatusTime field value if set, zero value otherwise.
func (o *Upgradestatus) GetStatusTime() int64 {
	if o == nil || IsNil(o.StatusTime) {
		var ret int64
		return ret
	}
	return *o.StatusTime
}

// GetStatusTimeOk returns a tuple with the StatusTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStatusTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusTime) {
		return nil, false
	}
	return o.StatusTime, true
}

// HasStatusTime returns a boolean if a field has been set.
func (o *Upgradestatus) HasStatusTime() bool {
	if o != nil && !IsNil(o.StatusTime) {
		return true
	}

	return false
}

// SetStatusTime gets a reference to the given int64 and assigns it to the StatusTime field.
func (o *Upgradestatus) SetStatusTime(v int64) {
	o.StatusTime = &v
}

// GetStatusValue returns the StatusValue field value if set, zero value otherwise.
func (o *Upgradestatus) GetStatusValue() string {
	if o == nil || IsNil(o.StatusValue) {
		var ret string
		return ret
	}
	return *o.StatusValue
}

// GetStatusValueOk returns a tuple with the StatusValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStatusValueOk() (*string, bool) {
	if o == nil || IsNil(o.StatusValue) {
		return nil, false
	}
	return o.StatusValue, true
}

// HasStatusValue returns a boolean if a field has been set.
func (o *Upgradestatus) HasStatusValue() bool {
	if o != nil && !IsNil(o.StatusValue) {
		return true
	}

	return false
}

// SetStatusValue gets a reference to the given string and assigns it to the StatusValue field.
func (o *Upgradestatus) SetStatusValue(v string) {
	o.StatusValue = &v
}

// GetStatusValueUpdateTime returns the StatusValueUpdateTime field value if set, zero value otherwise.
func (o *Upgradestatus) GetStatusValueUpdateTime() int64 {
	if o == nil || IsNil(o.StatusValueUpdateTime) {
		var ret int64
		return ret
	}
	return *o.StatusValueUpdateTime
}

// GetStatusValueUpdateTimeOk returns a tuple with the StatusValueUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStatusValueUpdateTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusValueUpdateTime) {
		return nil, false
	}
	return o.StatusValueUpdateTime, true
}

// HasStatusValueUpdateTime returns a boolean if a field has been set.
func (o *Upgradestatus) HasStatusValueUpdateTime() bool {
	if o != nil && !IsNil(o.StatusValueUpdateTime) {
		return true
	}

	return false
}

// SetStatusValueUpdateTime gets a reference to the given int64 and assigns it to the StatusValueUpdateTime field.
func (o *Upgradestatus) SetStatusValueUpdateTime(v int64) {
	o.StatusValueUpdateTime = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *Upgradestatus) GetSteps() []UpgradestatusSteps {
	if o == nil || IsNil(o.Steps) {
		var ret []UpgradestatusSteps
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStepsOk() ([]UpgradestatusSteps, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Upgradestatus) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []UpgradestatusSteps and assigns it to the Steps field.
func (o *Upgradestatus) SetSteps(v []UpgradestatusSteps) {
	o.Steps = v
}

// GetStepsCompleted returns the StepsCompleted field value if set, zero value otherwise.
func (o *Upgradestatus) GetStepsCompleted() int64 {
	if o == nil || IsNil(o.StepsCompleted) {
		var ret int64
		return ret
	}
	return *o.StepsCompleted
}

// GetStepsCompletedOk returns a tuple with the StepsCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStepsCompletedOk() (*int64, bool) {
	if o == nil || IsNil(o.StepsCompleted) {
		return nil, false
	}
	return o.StepsCompleted, true
}

// HasStepsCompleted returns a boolean if a field has been set.
func (o *Upgradestatus) HasStepsCompleted() bool {
	if o != nil && !IsNil(o.StepsCompleted) {
		return true
	}

	return false
}

// SetStepsCompleted gets a reference to the given int64 and assigns it to the StepsCompleted field.
func (o *Upgradestatus) SetStepsCompleted(v int64) {
	o.StepsCompleted = &v
}

// GetStepsTotal returns the StepsTotal field value if set, zero value otherwise.
func (o *Upgradestatus) GetStepsTotal() int64 {
	if o == nil || IsNil(o.StepsTotal) {
		var ret int64
		return ret
	}
	return *o.StepsTotal
}

// GetStepsTotalOk returns a tuple with the StepsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetStepsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.StepsTotal) {
		return nil, false
	}
	return o.StepsTotal, true
}

// HasStepsTotal returns a boolean if a field has been set.
func (o *Upgradestatus) HasStepsTotal() bool {
	if o != nil && !IsNil(o.StepsTotal) {
		return true
	}

	return false
}

// SetStepsTotal gets a reference to the given int64 and assigns it to the StepsTotal field.
func (o *Upgradestatus) SetStepsTotal(v int64) {
	o.StepsTotal = &v
}

// GetSubelementType returns the SubelementType field value if set, zero value otherwise.
func (o *Upgradestatus) GetSubelementType() string {
	if o == nil || IsNil(o.SubelementType) {
		var ret string
		return ret
	}
	return *o.SubelementType
}

// GetSubelementTypeOk returns a tuple with the SubelementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetSubelementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubelementType) {
		return nil, false
	}
	return o.SubelementType, true
}

// HasSubelementType returns a boolean if a field has been set.
func (o *Upgradestatus) HasSubelementType() bool {
	if o != nil && !IsNil(o.SubelementType) {
		return true
	}

	return false
}

// SetSubelementType gets a reference to the given string and assigns it to the SubelementType field.
func (o *Upgradestatus) SetSubelementType(v string) {
	o.SubelementType = &v
}

// GetSubelementsCompleted returns the SubelementsCompleted field value if set, zero value otherwise.
func (o *Upgradestatus) GetSubelementsCompleted() int64 {
	if o == nil || IsNil(o.SubelementsCompleted) {
		var ret int64
		return ret
	}
	return *o.SubelementsCompleted
}

// GetSubelementsCompletedOk returns a tuple with the SubelementsCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetSubelementsCompletedOk() (*int64, bool) {
	if o == nil || IsNil(o.SubelementsCompleted) {
		return nil, false
	}
	return o.SubelementsCompleted, true
}

// HasSubelementsCompleted returns a boolean if a field has been set.
func (o *Upgradestatus) HasSubelementsCompleted() bool {
	if o != nil && !IsNil(o.SubelementsCompleted) {
		return true
	}

	return false
}

// SetSubelementsCompleted gets a reference to the given int64 and assigns it to the SubelementsCompleted field.
func (o *Upgradestatus) SetSubelementsCompleted(v int64) {
	o.SubelementsCompleted = &v
}

// GetSubelementsStatus returns the SubelementsStatus field value if set, zero value otherwise.
func (o *Upgradestatus) GetSubelementsStatus() []string {
	if o == nil || IsNil(o.SubelementsStatus) {
		var ret []string
		return ret
	}
	return o.SubelementsStatus
}

// GetSubelementsStatusOk returns a tuple with the SubelementsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetSubelementsStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.SubelementsStatus) {
		return nil, false
	}
	return o.SubelementsStatus, true
}

// HasSubelementsStatus returns a boolean if a field has been set.
func (o *Upgradestatus) HasSubelementsStatus() bool {
	if o != nil && !IsNil(o.SubelementsStatus) {
		return true
	}

	return false
}

// SetSubelementsStatus gets a reference to the given []string and assigns it to the SubelementsStatus field.
func (o *Upgradestatus) SetSubelementsStatus(v []string) {
	o.SubelementsStatus = v
}

// GetSubelementsTotal returns the SubelementsTotal field value if set, zero value otherwise.
func (o *Upgradestatus) GetSubelementsTotal() int64 {
	if o == nil || IsNil(o.SubelementsTotal) {
		var ret int64
		return ret
	}
	return *o.SubelementsTotal
}

// GetSubelementsTotalOk returns a tuple with the SubelementsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetSubelementsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.SubelementsTotal) {
		return nil, false
	}
	return o.SubelementsTotal, true
}

// HasSubelementsTotal returns a boolean if a field has been set.
func (o *Upgradestatus) HasSubelementsTotal() bool {
	if o != nil && !IsNil(o.SubelementsTotal) {
		return true
	}

	return false
}

// SetSubelementsTotal gets a reference to the given int64 and assigns it to the SubelementsTotal field.
func (o *Upgradestatus) SetSubelementsTotal(v int64) {
	o.SubelementsTotal = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Upgradestatus) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Upgradestatus) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Upgradestatus) SetType(v string) {
	o.Type = &v
}

// GetUpgradeGroup returns the UpgradeGroup field value if set, zero value otherwise.
func (o *Upgradestatus) GetUpgradeGroup() string {
	if o == nil || IsNil(o.UpgradeGroup) {
		var ret string
		return ret
	}
	return *o.UpgradeGroup
}

// GetUpgradeGroupOk returns a tuple with the UpgradeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUpgradeGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeGroup) {
		return nil, false
	}
	return o.UpgradeGroup, true
}

// HasUpgradeGroup returns a boolean if a field has been set.
func (o *Upgradestatus) HasUpgradeGroup() bool {
	if o != nil && !IsNil(o.UpgradeGroup) {
		return true
	}

	return false
}

// SetUpgradeGroup gets a reference to the given string and assigns it to the UpgradeGroup field.
func (o *Upgradestatus) SetUpgradeGroup(v string) {
	o.UpgradeGroup = &v
}

// GetUpgradeScheduleActive returns the UpgradeScheduleActive field value if set, zero value otherwise.
func (o *Upgradestatus) GetUpgradeScheduleActive() bool {
	if o == nil || IsNil(o.UpgradeScheduleActive) {
		var ret bool
		return ret
	}
	return *o.UpgradeScheduleActive
}

// GetUpgradeScheduleActiveOk returns a tuple with the UpgradeScheduleActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUpgradeScheduleActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.UpgradeScheduleActive) {
		return nil, false
	}
	return o.UpgradeScheduleActive, true
}

// HasUpgradeScheduleActive returns a boolean if a field has been set.
func (o *Upgradestatus) HasUpgradeScheduleActive() bool {
	if o != nil && !IsNil(o.UpgradeScheduleActive) {
		return true
	}

	return false
}

// SetUpgradeScheduleActive gets a reference to the given bool and assigns it to the UpgradeScheduleActive field.
func (o *Upgradestatus) SetUpgradeScheduleActive(v bool) {
	o.UpgradeScheduleActive = &v
}

// GetUpgradeState returns the UpgradeState field value if set, zero value otherwise.
func (o *Upgradestatus) GetUpgradeState() string {
	if o == nil || IsNil(o.UpgradeState) {
		var ret string
		return ret
	}
	return *o.UpgradeState
}

// GetUpgradeStateOk returns a tuple with the UpgradeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUpgradeStateOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeState) {
		return nil, false
	}
	return o.UpgradeState, true
}

// HasUpgradeState returns a boolean if a field has been set.
func (o *Upgradestatus) HasUpgradeState() bool {
	if o != nil && !IsNil(o.UpgradeState) {
		return true
	}

	return false
}

// SetUpgradeState gets a reference to the given string and assigns it to the UpgradeState field.
func (o *Upgradestatus) SetUpgradeState(v string) {
	o.UpgradeState = &v
}

// GetUpgradeTestStatus returns the UpgradeTestStatus field value if set, zero value otherwise.
func (o *Upgradestatus) GetUpgradeTestStatus() string {
	if o == nil || IsNil(o.UpgradeTestStatus) {
		var ret string
		return ret
	}
	return *o.UpgradeTestStatus
}

// GetUpgradeTestStatusOk returns a tuple with the UpgradeTestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUpgradeTestStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UpgradeTestStatus) {
		return nil, false
	}
	return o.UpgradeTestStatus, true
}

// HasUpgradeTestStatus returns a boolean if a field has been set.
func (o *Upgradestatus) HasUpgradeTestStatus() bool {
	if o != nil && !IsNil(o.UpgradeTestStatus) {
		return true
	}

	return false
}

// SetUpgradeTestStatus gets a reference to the given string and assigns it to the UpgradeTestStatus field.
func (o *Upgradestatus) SetUpgradeTestStatus(v string) {
	o.UpgradeTestStatus = &v
}

// GetUploadVersion returns the UploadVersion field value if set, zero value otherwise.
func (o *Upgradestatus) GetUploadVersion() string {
	if o == nil || IsNil(o.UploadVersion) {
		var ret string
		return ret
	}
	return *o.UploadVersion
}

// GetUploadVersionOk returns a tuple with the UploadVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUploadVersionOk() (*string, bool) {
	if o == nil || IsNil(o.UploadVersion) {
		return nil, false
	}
	return o.UploadVersion, true
}

// HasUploadVersion returns a boolean if a field has been set.
func (o *Upgradestatus) HasUploadVersion() bool {
	if o != nil && !IsNil(o.UploadVersion) {
		return true
	}

	return false
}

// SetUploadVersion gets a reference to the given string and assigns it to the UploadVersion field.
func (o *Upgradestatus) SetUploadVersion(v string) {
	o.UploadVersion = &v
}

// GetUploadVersionSummary returns the UploadVersionSummary field value if set, zero value otherwise.
func (o *Upgradestatus) GetUploadVersionSummary() string {
	if o == nil || IsNil(o.UploadVersionSummary) {
		var ret string
		return ret
	}
	return *o.UploadVersionSummary
}

// GetUploadVersionSummaryOk returns a tuple with the UploadVersionSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upgradestatus) GetUploadVersionSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.UploadVersionSummary) {
		return nil, false
	}
	return o.UploadVersionSummary, true
}

// HasUploadVersionSummary returns a boolean if a field has been set.
func (o *Upgradestatus) HasUploadVersionSummary() bool {
	if o != nil && !IsNil(o.UploadVersionSummary) {
		return true
	}

	return false
}

// SetUploadVersionSummary gets a reference to the given string and assigns it to the UploadVersionSummary field.
func (o *Upgradestatus) SetUploadVersionSummary(v string) {
	o.UploadVersionSummary = &v
}

func (o Upgradestatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upgradestatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AllowDistribution) {
		toSerialize["allow_distribution"] = o.AllowDistribution
	}
	if !IsNil(o.AllowDistributionScheduling) {
		toSerialize["allow_distribution_scheduling"] = o.AllowDistributionScheduling
	}
	if !IsNil(o.AllowUpgrade) {
		toSerialize["allow_upgrade"] = o.AllowUpgrade
	}
	if !IsNil(o.AllowUpgradeCancel) {
		toSerialize["allow_upgrade_cancel"] = o.AllowUpgradeCancel
	}
	if !IsNil(o.AllowUpgradePause) {
		toSerialize["allow_upgrade_pause"] = o.AllowUpgradePause
	}
	if !IsNil(o.AllowUpgradeResume) {
		toSerialize["allow_upgrade_resume"] = o.AllowUpgradeResume
	}
	if !IsNil(o.AllowUpgradeScheduling) {
		toSerialize["allow_upgrade_scheduling"] = o.AllowUpgradeScheduling
	}
	if !IsNil(o.AllowUpgradeTest) {
		toSerialize["allow_upgrade_test"] = o.AllowUpgradeTest
	}
	if !IsNil(o.AllowUpload) {
		toSerialize["allow_upload"] = o.AllowUpload
	}
	if !IsNil(o.AlternateVersion) {
		toSerialize["alternate_version"] = o.AlternateVersion
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if !IsNil(o.CurrentVersionSummary) {
		toSerialize["current_version_summary"] = o.CurrentVersionSummary
	}
	if !IsNil(o.DistributionScheduleActive) {
		toSerialize["distribution_schedule_active"] = o.DistributionScheduleActive
	}
	if !IsNil(o.DistributionScheduleTime) {
		toSerialize["distribution_schedule_time"] = o.DistributionScheduleTime
	}
	if !IsNil(o.DistributionState) {
		toSerialize["distribution_state"] = o.DistributionState
	}
	if !IsNil(o.DistributionVersion) {
		toSerialize["distribution_version"] = o.DistributionVersion
	}
	if !IsNil(o.DistributionVersionSummary) {
		toSerialize["distribution_version_summary"] = o.DistributionVersionSummary
	}
	if !IsNil(o.ElementStatus) {
		toSerialize["element_status"] = o.ElementStatus
	}
	if !IsNil(o.GridState) {
		toSerialize["grid_state"] = o.GridState
	}
	if !IsNil(o.GroupState) {
		toSerialize["group_state"] = o.GroupState
	}
	if !IsNil(o.HaStatus) {
		toSerialize["ha_status"] = o.HaStatus
	}
	if !IsNil(o.Hotfixes) {
		toSerialize["hotfixes"] = o.Hotfixes
	}
	if !IsNil(o.Ipv4Address) {
		toSerialize["ipv4_address"] = o.Ipv4Address
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["ipv6_address"] = o.Ipv6Address
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PnodeRole) {
		toSerialize["pnode_role"] = o.PnodeRole
	}
	if !IsNil(o.Reverted) {
		toSerialize["reverted"] = o.Reverted
	}
	if !IsNil(o.StatusTime) {
		toSerialize["status_time"] = o.StatusTime
	}
	if !IsNil(o.StatusValue) {
		toSerialize["status_value"] = o.StatusValue
	}
	if !IsNil(o.StatusValueUpdateTime) {
		toSerialize["status_value_update_time"] = o.StatusValueUpdateTime
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.StepsCompleted) {
		toSerialize["steps_completed"] = o.StepsCompleted
	}
	if !IsNil(o.StepsTotal) {
		toSerialize["steps_total"] = o.StepsTotal
	}
	if !IsNil(o.SubelementType) {
		toSerialize["subelement_type"] = o.SubelementType
	}
	if !IsNil(o.SubelementsCompleted) {
		toSerialize["subelements_completed"] = o.SubelementsCompleted
	}
	if !IsNil(o.SubelementsStatus) {
		toSerialize["subelements_status"] = o.SubelementsStatus
	}
	if !IsNil(o.SubelementsTotal) {
		toSerialize["subelements_total"] = o.SubelementsTotal
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpgradeGroup) {
		toSerialize["upgrade_group"] = o.UpgradeGroup
	}
	if !IsNil(o.UpgradeScheduleActive) {
		toSerialize["upgrade_schedule_active"] = o.UpgradeScheduleActive
	}
	if !IsNil(o.UpgradeState) {
		toSerialize["upgrade_state"] = o.UpgradeState
	}
	if !IsNil(o.UpgradeTestStatus) {
		toSerialize["upgrade_test_status"] = o.UpgradeTestStatus
	}
	if !IsNil(o.UploadVersion) {
		toSerialize["upload_version"] = o.UploadVersion
	}
	if !IsNil(o.UploadVersionSummary) {
		toSerialize["upload_version_summary"] = o.UploadVersionSummary
	}
	return toSerialize, nil
}

type NullableUpgradestatus struct {
	value *Upgradestatus
	isSet bool
}

func (v NullableUpgradestatus) Get() *Upgradestatus {
	return v.value
}

func (v *NullableUpgradestatus) Set(val *Upgradestatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradestatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradestatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradestatus(val *Upgradestatus) *NullableUpgradestatus {
	return &NullableUpgradestatus{value: val, isSet: true}
}

func (v NullableUpgradestatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradestatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
