/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type BulkhostnametemplateAPI interface {
	/*
		Create Create a bulkhostnametemplate object

		Creates a new bulkhostnametemplate object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BulkhostnametemplateAPICreateRequest
	*/
	Create(ctx context.Context) BulkhostnametemplateAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateBulkhostnametemplateResponse
	CreateExecute(r BulkhostnametemplateAPICreateRequest) (*CreateBulkhostnametemplateResponse, *http.Response, error)
	/*
		Delete Delete a bulkhostnametemplate object

		Deletes a specific bulkhostnametemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bulkhostnametemplate object
		@return BulkhostnametemplateAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) BulkhostnametemplateAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r BulkhostnametemplateAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve bulkhostnametemplate objects

		Returns a list of bulkhostnametemplate objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return BulkhostnametemplateAPIListRequest
	*/
	List(ctx context.Context) BulkhostnametemplateAPIListRequest

	// ListExecute executes the request
	//  @return ListBulkhostnametemplateResponse
	ListExecute(r BulkhostnametemplateAPIListRequest) (*ListBulkhostnametemplateResponse, *http.Response, error)
	/*
		Read Get a specific bulkhostnametemplate object

		Returns a specific bulkhostnametemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bulkhostnametemplate object
		@return BulkhostnametemplateAPIReadRequest
	*/
	Read(ctx context.Context, reference string) BulkhostnametemplateAPIReadRequest

	// ReadExecute executes the request
	//  @return GetBulkhostnametemplateResponse
	ReadExecute(r BulkhostnametemplateAPIReadRequest) (*GetBulkhostnametemplateResponse, *http.Response, error)
	/*
		Update Update a bulkhostnametemplate object

		Updates a specific bulkhostnametemplate object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the bulkhostnametemplate object
		@return BulkhostnametemplateAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) BulkhostnametemplateAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateBulkhostnametemplateResponse
	UpdateExecute(r BulkhostnametemplateAPIUpdateRequest) (*UpdateBulkhostnametemplateResponse, *http.Response, error)
}

// BulkhostnametemplateAPIService BulkhostnametemplateAPI service
type BulkhostnametemplateAPIService internal.Service

type BulkhostnametemplateAPICreateRequest struct {
	ctx                  context.Context
	ApiService           BulkhostnametemplateAPI
	bulkhostnametemplate *Bulkhostnametemplate
	returnFields         *string
	returnFieldsPlus     *string
	returnAsObject       *int32
}

// Object data to create
func (r BulkhostnametemplateAPICreateRequest) Bulkhostnametemplate(bulkhostnametemplate Bulkhostnametemplate) BulkhostnametemplateAPICreateRequest {
	r.bulkhostnametemplate = &bulkhostnametemplate
	return r
}

// Enter the field names followed by comma
func (r BulkhostnametemplateAPICreateRequest) ReturnFields(returnFields string) BulkhostnametemplateAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BulkhostnametemplateAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) BulkhostnametemplateAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r BulkhostnametemplateAPICreateRequest) ReturnAsObject(returnAsObject int32) BulkhostnametemplateAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BulkhostnametemplateAPICreateRequest) Execute() (*CreateBulkhostnametemplateResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a bulkhostnametemplate object

Creates a new bulkhostnametemplate object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BulkhostnametemplateAPICreateRequest
*/
func (a *BulkhostnametemplateAPIService) Create(ctx context.Context) BulkhostnametemplateAPICreateRequest {
	return BulkhostnametemplateAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateBulkhostnametemplateResponse
func (a *BulkhostnametemplateAPIService) CreateExecute(r BulkhostnametemplateAPICreateRequest) (*CreateBulkhostnametemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateBulkhostnametemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BulkhostnametemplateAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bulkhostnametemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkhostnametemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("bulkhostnametemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkhostnametemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BulkhostnametemplateAPIDeleteRequest struct {
	ctx        context.Context
	ApiService BulkhostnametemplateAPI
	reference  string
}

func (r BulkhostnametemplateAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a bulkhostnametemplate object

Deletes a specific bulkhostnametemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bulkhostnametemplate object
	@return BulkhostnametemplateAPIDeleteRequest
*/
func (a *BulkhostnametemplateAPIService) Delete(ctx context.Context, reference string) BulkhostnametemplateAPIDeleteRequest {
	return BulkhostnametemplateAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *BulkhostnametemplateAPIService) DeleteExecute(r BulkhostnametemplateAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BulkhostnametemplateAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bulkhostnametemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BulkhostnametemplateAPIListRequest struct {
	ctx              context.Context
	ApiService       BulkhostnametemplateAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r BulkhostnametemplateAPIListRequest) ReturnFields(returnFields string) BulkhostnametemplateAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BulkhostnametemplateAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) BulkhostnametemplateAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r BulkhostnametemplateAPIListRequest) MaxResults(maxResults int32) BulkhostnametemplateAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r BulkhostnametemplateAPIListRequest) ReturnAsObject(returnAsObject int32) BulkhostnametemplateAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r BulkhostnametemplateAPIListRequest) Paging(paging int32) BulkhostnametemplateAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r BulkhostnametemplateAPIListRequest) PageId(pageId string) BulkhostnametemplateAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r BulkhostnametemplateAPIListRequest) Filters(filters map[string]interface{}) BulkhostnametemplateAPIListRequest {
	r.filters = &filters
	return r
}

func (r BulkhostnametemplateAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) BulkhostnametemplateAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r BulkhostnametemplateAPIListRequest) Execute() (*ListBulkhostnametemplateResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve bulkhostnametemplate objects

Returns a list of bulkhostnametemplate objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BulkhostnametemplateAPIListRequest
*/
func (a *BulkhostnametemplateAPIService) List(ctx context.Context) BulkhostnametemplateAPIListRequest {
	return BulkhostnametemplateAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListBulkhostnametemplateResponse
func (a *BulkhostnametemplateAPIService) ListExecute(r BulkhostnametemplateAPIListRequest) (*ListBulkhostnametemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListBulkhostnametemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BulkhostnametemplateAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bulkhostnametemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BulkhostnametemplateAPIReadRequest struct {
	ctx              context.Context
	ApiService       BulkhostnametemplateAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r BulkhostnametemplateAPIReadRequest) ReturnFields(returnFields string) BulkhostnametemplateAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BulkhostnametemplateAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) BulkhostnametemplateAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r BulkhostnametemplateAPIReadRequest) ReturnAsObject(returnAsObject int32) BulkhostnametemplateAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BulkhostnametemplateAPIReadRequest) Execute() (*GetBulkhostnametemplateResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific bulkhostnametemplate object

Returns a specific bulkhostnametemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bulkhostnametemplate object
	@return BulkhostnametemplateAPIReadRequest
*/
func (a *BulkhostnametemplateAPIService) Read(ctx context.Context, reference string) BulkhostnametemplateAPIReadRequest {
	return BulkhostnametemplateAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetBulkhostnametemplateResponse
func (a *BulkhostnametemplateAPIService) ReadExecute(r BulkhostnametemplateAPIReadRequest) (*GetBulkhostnametemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetBulkhostnametemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BulkhostnametemplateAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bulkhostnametemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type BulkhostnametemplateAPIUpdateRequest struct {
	ctx                  context.Context
	ApiService           BulkhostnametemplateAPI
	reference            string
	bulkhostnametemplate *Bulkhostnametemplate
	returnFields         *string
	returnFieldsPlus     *string
	returnAsObject       *int32
}

// Object data to update
func (r BulkhostnametemplateAPIUpdateRequest) Bulkhostnametemplate(bulkhostnametemplate Bulkhostnametemplate) BulkhostnametemplateAPIUpdateRequest {
	r.bulkhostnametemplate = &bulkhostnametemplate
	return r
}

// Enter the field names followed by comma
func (r BulkhostnametemplateAPIUpdateRequest) ReturnFields(returnFields string) BulkhostnametemplateAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r BulkhostnametemplateAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) BulkhostnametemplateAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r BulkhostnametemplateAPIUpdateRequest) ReturnAsObject(returnAsObject int32) BulkhostnametemplateAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r BulkhostnametemplateAPIUpdateRequest) Execute() (*UpdateBulkhostnametemplateResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a bulkhostnametemplate object

Updates a specific bulkhostnametemplate object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the bulkhostnametemplate object
	@return BulkhostnametemplateAPIUpdateRequest
*/
func (a *BulkhostnametemplateAPIService) Update(ctx context.Context, reference string) BulkhostnametemplateAPIUpdateRequest {
	return BulkhostnametemplateAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateBulkhostnametemplateResponse
func (a *BulkhostnametemplateAPIService) UpdateExecute(r BulkhostnametemplateAPIUpdateRequest) (*UpdateBulkhostnametemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateBulkhostnametemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "BulkhostnametemplateAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/bulkhostnametemplate/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkhostnametemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("bulkhostnametemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkhostnametemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
