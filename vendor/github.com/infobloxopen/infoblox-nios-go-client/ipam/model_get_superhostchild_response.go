/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// GetSuperhostchildResponse - struct for GetSuperhostchildResponse
type GetSuperhostchildResponse struct {
	GetSuperhostchildResponseObjectAsResult *GetSuperhostchildResponseObjectAsResult
	Superhostchild                          *Superhostchild
}

// GetSuperhostchildResponseObjectAsResultAsGetSuperhostchildResponse is a convenience function that returns GetSuperhostchildResponseObjectAsResult wrapped in GetSuperhostchildResponse
func GetSuperhostchildResponseObjectAsResultAsGetSuperhostchildResponse(v *GetSuperhostchildResponseObjectAsResult) GetSuperhostchildResponse {
	return GetSuperhostchildResponse{
		GetSuperhostchildResponseObjectAsResult: v,
	}
}

// SuperhostchildAsGetSuperhostchildResponse is a convenience function that returns Superhostchild wrapped in GetSuperhostchildResponse
func SuperhostchildAsGetSuperhostchildResponse(v *Superhostchild) GetSuperhostchildResponse {
	return GetSuperhostchildResponse{
		Superhostchild: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSuperhostchildResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSuperhostchildResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSuperhostchildResponseObjectAsResult)
	if err == nil {
		jsonGetSuperhostchildResponseObjectAsResult, _ := json.Marshal(dst.GetSuperhostchildResponseObjectAsResult)
		if string(jsonGetSuperhostchildResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSuperhostchildResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSuperhostchildResponseObjectAsResult = nil
	}

	// try to unmarshal data into Superhostchild
	err = newStrictDecoder(data).Decode(&dst.Superhostchild)
	if err == nil {
		jsonSuperhostchild, _ := json.Marshal(dst.Superhostchild)
		if string(jsonSuperhostchild) == "{}" { // empty struct
			dst.Superhostchild = nil
		} else {
			match++
		}
	} else {
		dst.Superhostchild = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSuperhostchildResponseObjectAsResult = nil
		dst.Superhostchild = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSuperhostchildResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSuperhostchildResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSuperhostchildResponse) MarshalJSON() ([]byte, error) {
	if src.GetSuperhostchildResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSuperhostchildResponseObjectAsResult)
	}

	if src.Superhostchild != nil {
		return json.Marshal(&src.Superhostchild)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSuperhostchildResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSuperhostchildResponseObjectAsResult != nil {
		return obj.GetSuperhostchildResponseObjectAsResult
	}

	if obj.Superhostchild != nil {
		return obj.Superhostchild
	}

	// all schemas are nil
	return nil
}

type NullableGetSuperhostchildResponse struct {
	value *GetSuperhostchildResponse
	isSet bool
}

func (v NullableGetSuperhostchildResponse) Get() *GetSuperhostchildResponse {
	return v.value
}

func (v *NullableGetSuperhostchildResponse) Set(val *GetSuperhostchildResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSuperhostchildResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSuperhostchildResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSuperhostchildResponse(val *GetSuperhostchildResponse) *NullableGetSuperhostchildResponse {
	return &NullableGetSuperhostchildResponse{value: val, isSet: true}
}

func (v NullableGetSuperhostchildResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSuperhostchildResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
