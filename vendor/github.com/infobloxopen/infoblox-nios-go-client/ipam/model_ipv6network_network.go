/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// Ipv6networkNetwork - The network address in IPv6 Address/CIDR format. For regular expression searches, only the IPv6 Address portion is supported. Searches for the CIDR portion is always an exact match. For example, both network containers 16::0/28 and 26::0/24 are matched by expression '.6' and only 26::0/24 is matched by '.6/24'.
type Ipv6networkNetwork struct {
	Ipv6networkNetworkOneOf *Ipv6networkNetworkOneOf
	String                  *string
}

// Ipv6networkNetworkOneOfAsIpv6networkNetwork is a convenience function that returns Ipv6networkNetworkOneOf wrapped in Ipv6networkNetwork
func Ipv6networkNetworkOneOfAsIpv6networkNetwork(v *Ipv6networkNetworkOneOf) Ipv6networkNetwork {
	return Ipv6networkNetwork{
		Ipv6networkNetworkOneOf: v,
	}
}

// stringAsIpv6networkNetwork is a convenience function that returns string wrapped in Ipv6networkNetwork
func StringAsIpv6networkNetwork(v *string) Ipv6networkNetwork {
	return Ipv6networkNetwork{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Ipv6networkNetwork) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Ipv6networkNetworkOneOf
	err = newStrictDecoder(data).Decode(&dst.Ipv6networkNetworkOneOf)
	if err == nil {
		jsonIpv6networkNetworkOneOf, _ := json.Marshal(dst.Ipv6networkNetworkOneOf)
		if string(jsonIpv6networkNetworkOneOf) == "{}" { // empty struct
			dst.Ipv6networkNetworkOneOf = nil
		} else {
			match++
		}
	} else {
		dst.Ipv6networkNetworkOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Ipv6networkNetworkOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Ipv6networkNetwork)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Ipv6networkNetwork)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Ipv6networkNetwork) MarshalJSON() ([]byte, error) {
	if src.Ipv6networkNetworkOneOf != nil {
		return json.Marshal(&src.Ipv6networkNetworkOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Ipv6networkNetwork) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Ipv6networkNetworkOneOf != nil {
		return obj.Ipv6networkNetworkOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableIpv6networkNetwork struct {
	value *Ipv6networkNetwork
	isSet bool
}

func (v NullableIpv6networkNetwork) Get() *Ipv6networkNetwork {
	return v.value
}

func (v *NullableIpv6networkNetwork) Set(val *Ipv6networkNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networkNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networkNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networkNetwork(val *Ipv6networkNetwork) *NullableIpv6networkNetwork {
	return &NullableIpv6networkNetwork{value: val, isSet: true}
}

func (v NullableIpv6networkNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networkNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
