/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the Ipv6networktemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ipv6networktemplate{}

// Ipv6networktemplate struct for Ipv6networktemplate
type Ipv6networktemplate struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// This flag controls whether the template allows any netmask. You must specify a netmask when creating a network using this template. If you set this parameter to False, you must specify the \"cidr\" field for the network template object.
	AllowAnyNetmask *bool `json:"allow_any_netmask,omitempty"`
	// This flag controls whether reverse zones are automatically created when the network is added.
	AutoCreateReversezone *bool `json:"auto_create_reversezone,omitempty"`
	// The CIDR of the network in CIDR format.
	Cidr *int64 `json:"cidr,omitempty"`
	// This flag controls whether this template can be used to create network objects in a cloud-computing deployment.
	CloudApiCompatible *bool `json:"cloud_api_compatible,omitempty"`
	// Comment for the network; maximum 256 characters.
	Comment *string `json:"comment,omitempty"`
	// The dynamic DNS domain name the appliance uses specifically for DDNS updates for this network.
	DdnsDomainname *string `json:"ddns_domainname,omitempty"`
	// Use this method to set or retrieve the ddns_enable_option_fqdn flag of a DHCP IPv6 Network object. This method controls whether the FQDN option sent by the client is to be used, or if the server can automatically generate the FQDN. This setting overrides the upper-level settings.
	DdnsEnableOptionFqdn *bool `json:"ddns_enable_option_fqdn,omitempty"`
	// If this field is set to True, the DHCP server generates a hostname and updates DNS with it when the DHCP client request does not contain a hostname.
	DdnsGenerateHostname *bool `json:"ddns_generate_hostname,omitempty"`
	// This field controls whether the DHCP server is allowed to update DNS, regardless of the DHCP client requests. Note that changes for this field take effect only if ddns_enable_option_fqdn is True.
	DdnsServerAlwaysUpdates *bool `json:"ddns_server_always_updates,omitempty"`
	// The DNS update Time to Live (TTL) value of a DHCP network object. The TTL is a 32-bit unsigned integer that represents the duration, in seconds, for which the update is cached. Zero indicates that the update is not cached.
	DdnsTtl         *int64                              `json:"ddns_ttl,omitempty"`
	DelegatedMember *Ipv6networktemplateDelegatedMember `json:"delegated_member,omitempty"`
	// Use this method to set or retrieve the domain_name value of a DHCP IPv6 Network object.
	DomainName *string `json:"domain_name,omitempty"`
	// Use this method to set or retrieve the dynamic DNS updates flag of a DHCP IPv6 Network object. The DHCP server can send DDNS updates to DNS servers in the same Grid and to external DNS servers. This setting overrides the member level settings.
	DomainNameServers []string `json:"domain_name_servers,omitempty"`
	// The dynamic DNS updates flag of a DHCP IPv6 network object. If set to True, the DHCP server sends DDNS updates to DNS servers in the same Grid, and to external DNS servers.
	EnableDdns *bool `json:"enable_ddns,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The list of IPv6 fixed address templates assigned to this IPv6 network template object. When you create an IPv6 network based on an IPv6 network template object that contains IPv6 fixed address templates, the IPv6 fixed addresses are created based on the associated IPv6 fixed address templates.
	FixedAddressTemplates []string `json:"fixed_address_templates,omitempty"`
	// The IPv6 Address prefix of the DHCP IPv6 network.
	Ipv6prefix *string `json:"ipv6prefix,omitempty"`
	// This field contains the logic filters to be applied on this IPv6 network template. This list corresponds to the match rules that are written to the DHCPv6 configuration file.
	LogicFilterRules []Ipv6networktemplateLogicFilterRules `json:"logic_filter_rules,omitempty"`
	// A list of members that serve DHCP for the network. All members in the array must be of the same type. The struct type must be indicated in each element, by setting the \"_struct\" member to the struct type.
	Members []Ipv6networktemplateMembers `json:"members,omitempty"`
	// The name of this IPv6 network template.
	Name *string `json:"name,omitempty"`
	// An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.
	Options []Ipv6networktemplateOptions `json:"options,omitempty"`
	// Use this method to set or retrieve the preferred lifetime value of a DHCP IPv6 Network object.
	PreferredLifetime *int64 `json:"preferred_lifetime,omitempty"`
	// The list of IPv6 address range templates assigned to this IPv6 network template object. When you create an IPv6 network based on an IPv6 network template object that contains IPv6 range templates, the IPv6 address ranges are created based on the associated IPv6 address range templates.
	RangeTemplates []string `json:"range_templates,omitempty"`
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the leases are permanently deleted.
	RecycleLeases *bool `json:"recycle_leases,omitempty"`
	// The registry (RIR) that allocated the IPv6 network address space.
	Rir *string `json:"rir,omitempty"`
	// The RIR organization associated with the IPv6 network.
	RirOrganization *string `json:"rir_organization,omitempty"`
	// The action for the RIR registration.
	RirRegistrationAction *string `json:"rir_registration_action,omitempty"`
	// The registration status of the IPv6 network in RIR.
	RirRegistrationStatus *string `json:"rir_registration_status,omitempty"`
	// Determines whether to send the RIR registration request.
	SendRirRequest *bool `json:"send_rir_request,omitempty"`
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal *bool `json:"update_dns_on_lease_renewal,omitempty"`
	// Use flag for: ddns_domainname
	UseDdnsDomainname *bool `json:"use_ddns_domainname,omitempty"`
	// Use flag for: ddns_enable_option_fqdn
	UseDdnsEnableOptionFqdn *bool `json:"use_ddns_enable_option_fqdn,omitempty"`
	// Use flag for: ddns_generate_hostname
	UseDdnsGenerateHostname *bool `json:"use_ddns_generate_hostname,omitempty"`
	// Use flag for: ddns_ttl
	UseDdnsTtl *bool `json:"use_ddns_ttl,omitempty"`
	// Use flag for: domain_name
	UseDomainName *bool `json:"use_domain_name,omitempty"`
	// Use flag for: domain_name_servers
	UseDomainNameServers *bool `json:"use_domain_name_servers,omitempty"`
	// Use flag for: enable_ddns
	UseEnableDdns *bool `json:"use_enable_ddns,omitempty"`
	// Use flag for: logic_filter_rules
	UseLogicFilterRules *bool `json:"use_logic_filter_rules,omitempty"`
	// Use flag for: options
	UseOptions *bool `json:"use_options,omitempty"`
	// Use flag for: preferred_lifetime
	UsePreferredLifetime *bool `json:"use_preferred_lifetime,omitempty"`
	// Use flag for: recycle_leases
	UseRecycleLeases *bool `json:"use_recycle_leases,omitempty"`
	// Use flag for: update_dns_on_lease_renewal
	UseUpdateDnsOnLeaseRenewal *bool `json:"use_update_dns_on_lease_renewal,omitempty"`
	// Use flag for: valid_lifetime
	UseValidLifetime *bool `json:"use_valid_lifetime,omitempty"`
	// Use this method to set or retrieve the valid lifetime value of a DHCP IPv6 Network object.
	ValidLifetime *int64 `json:"valid_lifetime,omitempty"`
}

// NewIpv6networktemplate instantiates a new Ipv6networktemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpv6networktemplate() *Ipv6networktemplate {
	this := Ipv6networktemplate{}
	return &this
}

// NewIpv6networktemplateWithDefaults instantiates a new Ipv6networktemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpv6networktemplateWithDefaults() *Ipv6networktemplate {
	this := Ipv6networktemplate{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ipv6networktemplate) SetRef(v string) {
	o.Ref = &v
}

// GetAllowAnyNetmask returns the AllowAnyNetmask field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetAllowAnyNetmask() bool {
	if o == nil || IsNil(o.AllowAnyNetmask) {
		var ret bool
		return ret
	}
	return *o.AllowAnyNetmask
}

// GetAllowAnyNetmaskOk returns a tuple with the AllowAnyNetmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetAllowAnyNetmaskOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAnyNetmask) {
		return nil, false
	}
	return o.AllowAnyNetmask, true
}

// HasAllowAnyNetmask returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasAllowAnyNetmask() bool {
	if o != nil && !IsNil(o.AllowAnyNetmask) {
		return true
	}

	return false
}

// SetAllowAnyNetmask gets a reference to the given bool and assigns it to the AllowAnyNetmask field.
func (o *Ipv6networktemplate) SetAllowAnyNetmask(v bool) {
	o.AllowAnyNetmask = &v
}

// GetAutoCreateReversezone returns the AutoCreateReversezone field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetAutoCreateReversezone() bool {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		var ret bool
		return ret
	}
	return *o.AutoCreateReversezone
}

// GetAutoCreateReversezoneOk returns a tuple with the AutoCreateReversezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetAutoCreateReversezoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateReversezone) {
		return nil, false
	}
	return o.AutoCreateReversezone, true
}

// HasAutoCreateReversezone returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasAutoCreateReversezone() bool {
	if o != nil && !IsNil(o.AutoCreateReversezone) {
		return true
	}

	return false
}

// SetAutoCreateReversezone gets a reference to the given bool and assigns it to the AutoCreateReversezone field.
func (o *Ipv6networktemplate) SetAutoCreateReversezone(v bool) {
	o.AutoCreateReversezone = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetCidr() int64 {
	if o == nil || IsNil(o.Cidr) {
		var ret int64
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int64 and assigns it to the Cidr field.
func (o *Ipv6networktemplate) SetCidr(v int64) {
	o.Cidr = &v
}

// GetCloudApiCompatible returns the CloudApiCompatible field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetCloudApiCompatible() bool {
	if o == nil || IsNil(o.CloudApiCompatible) {
		var ret bool
		return ret
	}
	return *o.CloudApiCompatible
}

// GetCloudApiCompatibleOk returns a tuple with the CloudApiCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetCloudApiCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudApiCompatible) {
		return nil, false
	}
	return o.CloudApiCompatible, true
}

// HasCloudApiCompatible returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasCloudApiCompatible() bool {
	if o != nil && !IsNil(o.CloudApiCompatible) {
		return true
	}

	return false
}

// SetCloudApiCompatible gets a reference to the given bool and assigns it to the CloudApiCompatible field.
func (o *Ipv6networktemplate) SetCloudApiCompatible(v bool) {
	o.CloudApiCompatible = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ipv6networktemplate) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsDomainname returns the DdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDdnsDomainname() string {
	if o == nil || IsNil(o.DdnsDomainname) {
		var ret string
		return ret
	}
	return *o.DdnsDomainname
}

// GetDdnsDomainnameOk returns a tuple with the DdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDdnsDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomainname) {
		return nil, false
	}
	return o.DdnsDomainname, true
}

// HasDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDdnsDomainname() bool {
	if o != nil && !IsNil(o.DdnsDomainname) {
		return true
	}

	return false
}

// SetDdnsDomainname gets a reference to the given string and assigns it to the DdnsDomainname field.
func (o *Ipv6networktemplate) SetDdnsDomainname(v string) {
	o.DdnsDomainname = &v
}

// GetDdnsEnableOptionFqdn returns the DdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.DdnsEnableOptionFqdn
}

// GetDdnsEnableOptionFqdnOk returns a tuple with the DdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.DdnsEnableOptionFqdn, true
}

// HasDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.DdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the DdnsEnableOptionFqdn field.
func (o *Ipv6networktemplate) SetDdnsEnableOptionFqdn(v bool) {
	o.DdnsEnableOptionFqdn = &v
}

// GetDdnsGenerateHostname returns the DdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateHostname
}

// GetDdnsGenerateHostnameOk returns a tuple with the DdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateHostname) {
		return nil, false
	}
	return o.DdnsGenerateHostname, true
}

// HasDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.DdnsGenerateHostname) {
		return true
	}

	return false
}

// SetDdnsGenerateHostname gets a reference to the given bool and assigns it to the DdnsGenerateHostname field.
func (o *Ipv6networktemplate) SetDdnsGenerateHostname(v bool) {
	o.DdnsGenerateHostname = &v
}

// GetDdnsServerAlwaysUpdates returns the DdnsServerAlwaysUpdates field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDdnsServerAlwaysUpdates() bool {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsServerAlwaysUpdates
}

// GetDdnsServerAlwaysUpdatesOk returns a tuple with the DdnsServerAlwaysUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDdnsServerAlwaysUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsServerAlwaysUpdates) {
		return nil, false
	}
	return o.DdnsServerAlwaysUpdates, true
}

// HasDdnsServerAlwaysUpdates returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDdnsServerAlwaysUpdates() bool {
	if o != nil && !IsNil(o.DdnsServerAlwaysUpdates) {
		return true
	}

	return false
}

// SetDdnsServerAlwaysUpdates gets a reference to the given bool and assigns it to the DdnsServerAlwaysUpdates field.
func (o *Ipv6networktemplate) SetDdnsServerAlwaysUpdates(v bool) {
	o.DdnsServerAlwaysUpdates = &v
}

// GetDdnsTtl returns the DdnsTtl field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDdnsTtl() int64 {
	if o == nil || IsNil(o.DdnsTtl) {
		var ret int64
		return ret
	}
	return *o.DdnsTtl
}

// GetDdnsTtlOk returns a tuple with the DdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDdnsTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DdnsTtl) {
		return nil, false
	}
	return o.DdnsTtl, true
}

// HasDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDdnsTtl() bool {
	if o != nil && !IsNil(o.DdnsTtl) {
		return true
	}

	return false
}

// SetDdnsTtl gets a reference to the given int64 and assigns it to the DdnsTtl field.
func (o *Ipv6networktemplate) SetDdnsTtl(v int64) {
	o.DdnsTtl = &v
}

// GetDelegatedMember returns the DelegatedMember field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDelegatedMember() Ipv6networktemplateDelegatedMember {
	if o == nil || IsNil(o.DelegatedMember) {
		var ret Ipv6networktemplateDelegatedMember
		return ret
	}
	return *o.DelegatedMember
}

// GetDelegatedMemberOk returns a tuple with the DelegatedMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDelegatedMemberOk() (*Ipv6networktemplateDelegatedMember, bool) {
	if o == nil || IsNil(o.DelegatedMember) {
		return nil, false
	}
	return o.DelegatedMember, true
}

// HasDelegatedMember returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDelegatedMember() bool {
	if o != nil && !IsNil(o.DelegatedMember) {
		return true
	}

	return false
}

// SetDelegatedMember gets a reference to the given Ipv6networktemplateDelegatedMember and assigns it to the DelegatedMember field.
func (o *Ipv6networktemplate) SetDelegatedMember(v Ipv6networktemplateDelegatedMember) {
	o.DelegatedMember = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *Ipv6networktemplate) SetDomainName(v string) {
	o.DomainName = &v
}

// GetDomainNameServers returns the DomainNameServers field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetDomainNameServers() []string {
	if o == nil || IsNil(o.DomainNameServers) {
		var ret []string
		return ret
	}
	return o.DomainNameServers
}

// GetDomainNameServersOk returns a tuple with the DomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetDomainNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNameServers) {
		return nil, false
	}
	return o.DomainNameServers, true
}

// HasDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasDomainNameServers() bool {
	if o != nil && !IsNil(o.DomainNameServers) {
		return true
	}

	return false
}

// SetDomainNameServers gets a reference to the given []string and assigns it to the DomainNameServers field.
func (o *Ipv6networktemplate) SetDomainNameServers(v []string) {
	o.DomainNameServers = v
}

// GetEnableDdns returns the EnableDdns field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetEnableDdns() bool {
	if o == nil || IsNil(o.EnableDdns) {
		var ret bool
		return ret
	}
	return *o.EnableDdns
}

// GetEnableDdnsOk returns a tuple with the EnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDdns) {
		return nil, false
	}
	return o.EnableDdns, true
}

// HasEnableDdns returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasEnableDdns() bool {
	if o != nil && !IsNil(o.EnableDdns) {
		return true
	}

	return false
}

// SetEnableDdns gets a reference to the given bool and assigns it to the EnableDdns field.
func (o *Ipv6networktemplate) SetEnableDdns(v bool) {
	o.EnableDdns = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Ipv6networktemplate) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetFixedAddressTemplates returns the FixedAddressTemplates field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetFixedAddressTemplates() []string {
	if o == nil || IsNil(o.FixedAddressTemplates) {
		var ret []string
		return ret
	}
	return o.FixedAddressTemplates
}

// GetFixedAddressTemplatesOk returns a tuple with the FixedAddressTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetFixedAddressTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.FixedAddressTemplates) {
		return nil, false
	}
	return o.FixedAddressTemplates, true
}

// HasFixedAddressTemplates returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasFixedAddressTemplates() bool {
	if o != nil && !IsNil(o.FixedAddressTemplates) {
		return true
	}

	return false
}

// SetFixedAddressTemplates gets a reference to the given []string and assigns it to the FixedAddressTemplates field.
func (o *Ipv6networktemplate) SetFixedAddressTemplates(v []string) {
	o.FixedAddressTemplates = v
}

// GetIpv6prefix returns the Ipv6prefix field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetIpv6prefix() string {
	if o == nil || IsNil(o.Ipv6prefix) {
		var ret string
		return ret
	}
	return *o.Ipv6prefix
}

// GetIpv6prefixOk returns a tuple with the Ipv6prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetIpv6prefixOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6prefix) {
		return nil, false
	}
	return o.Ipv6prefix, true
}

// HasIpv6prefix returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasIpv6prefix() bool {
	if o != nil && !IsNil(o.Ipv6prefix) {
		return true
	}

	return false
}

// SetIpv6prefix gets a reference to the given string and assigns it to the Ipv6prefix field.
func (o *Ipv6networktemplate) SetIpv6prefix(v string) {
	o.Ipv6prefix = &v
}

// GetLogicFilterRules returns the LogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetLogicFilterRules() []Ipv6networktemplateLogicFilterRules {
	if o == nil || IsNil(o.LogicFilterRules) {
		var ret []Ipv6networktemplateLogicFilterRules
		return ret
	}
	return o.LogicFilterRules
}

// GetLogicFilterRulesOk returns a tuple with the LogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetLogicFilterRulesOk() ([]Ipv6networktemplateLogicFilterRules, bool) {
	if o == nil || IsNil(o.LogicFilterRules) {
		return nil, false
	}
	return o.LogicFilterRules, true
}

// HasLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasLogicFilterRules() bool {
	if o != nil && !IsNil(o.LogicFilterRules) {
		return true
	}

	return false
}

// SetLogicFilterRules gets a reference to the given []Ipv6networktemplateLogicFilterRules and assigns it to the LogicFilterRules field.
func (o *Ipv6networktemplate) SetLogicFilterRules(v []Ipv6networktemplateLogicFilterRules) {
	o.LogicFilterRules = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetMembers() []Ipv6networktemplateMembers {
	if o == nil || IsNil(o.Members) {
		var ret []Ipv6networktemplateMembers
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetMembersOk() ([]Ipv6networktemplateMembers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Ipv6networktemplateMembers and assigns it to the Members field.
func (o *Ipv6networktemplate) SetMembers(v []Ipv6networktemplateMembers) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ipv6networktemplate) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetOptions() []Ipv6networktemplateOptions {
	if o == nil || IsNil(o.Options) {
		var ret []Ipv6networktemplateOptions
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetOptionsOk() ([]Ipv6networktemplateOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Ipv6networktemplateOptions and assigns it to the Options field.
func (o *Ipv6networktemplate) SetOptions(v []Ipv6networktemplateOptions) {
	o.Options = v
}

// GetPreferredLifetime returns the PreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetPreferredLifetime() int64 {
	if o == nil || IsNil(o.PreferredLifetime) {
		var ret int64
		return ret
	}
	return *o.PreferredLifetime
}

// GetPreferredLifetimeOk returns a tuple with the PreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetPreferredLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreferredLifetime) {
		return nil, false
	}
	return o.PreferredLifetime, true
}

// HasPreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasPreferredLifetime() bool {
	if o != nil && !IsNil(o.PreferredLifetime) {
		return true
	}

	return false
}

// SetPreferredLifetime gets a reference to the given int64 and assigns it to the PreferredLifetime field.
func (o *Ipv6networktemplate) SetPreferredLifetime(v int64) {
	o.PreferredLifetime = &v
}

// GetRangeTemplates returns the RangeTemplates field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRangeTemplates() []string {
	if o == nil || IsNil(o.RangeTemplates) {
		var ret []string
		return ret
	}
	return o.RangeTemplates
}

// GetRangeTemplatesOk returns a tuple with the RangeTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRangeTemplatesOk() ([]string, bool) {
	if o == nil || IsNil(o.RangeTemplates) {
		return nil, false
	}
	return o.RangeTemplates, true
}

// HasRangeTemplates returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRangeTemplates() bool {
	if o != nil && !IsNil(o.RangeTemplates) {
		return true
	}

	return false
}

// SetRangeTemplates gets a reference to the given []string and assigns it to the RangeTemplates field.
func (o *Ipv6networktemplate) SetRangeTemplates(v []string) {
	o.RangeTemplates = v
}

// GetRecycleLeases returns the RecycleLeases field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRecycleLeases() bool {
	if o == nil || IsNil(o.RecycleLeases) {
		var ret bool
		return ret
	}
	return *o.RecycleLeases
}

// GetRecycleLeasesOk returns a tuple with the RecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecycleLeases) {
		return nil, false
	}
	return o.RecycleLeases, true
}

// HasRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRecycleLeases() bool {
	if o != nil && !IsNil(o.RecycleLeases) {
		return true
	}

	return false
}

// SetRecycleLeases gets a reference to the given bool and assigns it to the RecycleLeases field.
func (o *Ipv6networktemplate) SetRecycleLeases(v bool) {
	o.RecycleLeases = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *Ipv6networktemplate) SetRir(v string) {
	o.Rir = &v
}

// GetRirOrganization returns the RirOrganization field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRirOrganization() string {
	if o == nil || IsNil(o.RirOrganization) {
		var ret string
		return ret
	}
	return *o.RirOrganization
}

// GetRirOrganizationOk returns a tuple with the RirOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRirOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.RirOrganization) {
		return nil, false
	}
	return o.RirOrganization, true
}

// HasRirOrganization returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRirOrganization() bool {
	if o != nil && !IsNil(o.RirOrganization) {
		return true
	}

	return false
}

// SetRirOrganization gets a reference to the given string and assigns it to the RirOrganization field.
func (o *Ipv6networktemplate) SetRirOrganization(v string) {
	o.RirOrganization = &v
}

// GetRirRegistrationAction returns the RirRegistrationAction field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRirRegistrationAction() string {
	if o == nil || IsNil(o.RirRegistrationAction) {
		var ret string
		return ret
	}
	return *o.RirRegistrationAction
}

// GetRirRegistrationActionOk returns a tuple with the RirRegistrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRirRegistrationActionOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationAction) {
		return nil, false
	}
	return o.RirRegistrationAction, true
}

// HasRirRegistrationAction returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRirRegistrationAction() bool {
	if o != nil && !IsNil(o.RirRegistrationAction) {
		return true
	}

	return false
}

// SetRirRegistrationAction gets a reference to the given string and assigns it to the RirRegistrationAction field.
func (o *Ipv6networktemplate) SetRirRegistrationAction(v string) {
	o.RirRegistrationAction = &v
}

// GetRirRegistrationStatus returns the RirRegistrationStatus field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetRirRegistrationStatus() string {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		var ret string
		return ret
	}
	return *o.RirRegistrationStatus
}

// GetRirRegistrationStatusOk returns a tuple with the RirRegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetRirRegistrationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RirRegistrationStatus) {
		return nil, false
	}
	return o.RirRegistrationStatus, true
}

// HasRirRegistrationStatus returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasRirRegistrationStatus() bool {
	if o != nil && !IsNil(o.RirRegistrationStatus) {
		return true
	}

	return false
}

// SetRirRegistrationStatus gets a reference to the given string and assigns it to the RirRegistrationStatus field.
func (o *Ipv6networktemplate) SetRirRegistrationStatus(v string) {
	o.RirRegistrationStatus = &v
}

// GetSendRirRequest returns the SendRirRequest field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetSendRirRequest() bool {
	if o == nil || IsNil(o.SendRirRequest) {
		var ret bool
		return ret
	}
	return *o.SendRirRequest
}

// GetSendRirRequestOk returns a tuple with the SendRirRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetSendRirRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRirRequest) {
		return nil, false
	}
	return o.SendRirRequest, true
}

// HasSendRirRequest returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasSendRirRequest() bool {
	if o != nil && !IsNil(o.SendRirRequest) {
		return true
	}

	return false
}

// SetSendRirRequest gets a reference to the given bool and assigns it to the SendRirRequest field.
func (o *Ipv6networktemplate) SetSendRirRequest(v bool) {
	o.SendRirRequest = &v
}

// GetUpdateDnsOnLeaseRenewal returns the UpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UpdateDnsOnLeaseRenewal
}

// GetUpdateDnsOnLeaseRenewalOk returns a tuple with the UpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UpdateDnsOnLeaseRenewal, true
}

// HasUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UpdateDnsOnLeaseRenewal field.
func (o *Ipv6networktemplate) SetUpdateDnsOnLeaseRenewal(v bool) {
	o.UpdateDnsOnLeaseRenewal = &v
}

// GetUseDdnsDomainname returns the UseDdnsDomainname field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDdnsDomainname() bool {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsDomainname
}

// GetUseDdnsDomainnameOk returns a tuple with the UseDdnsDomainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDdnsDomainnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsDomainname) {
		return nil, false
	}
	return o.UseDdnsDomainname, true
}

// HasUseDdnsDomainname returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDdnsDomainname() bool {
	if o != nil && !IsNil(o.UseDdnsDomainname) {
		return true
	}

	return false
}

// SetUseDdnsDomainname gets a reference to the given bool and assigns it to the UseDdnsDomainname field.
func (o *Ipv6networktemplate) SetUseDdnsDomainname(v bool) {
	o.UseDdnsDomainname = &v
}

// GetUseDdnsEnableOptionFqdn returns the UseDdnsEnableOptionFqdn field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDdnsEnableOptionFqdn() bool {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		var ret bool
		return ret
	}
	return *o.UseDdnsEnableOptionFqdn
}

// GetUseDdnsEnableOptionFqdnOk returns a tuple with the UseDdnsEnableOptionFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDdnsEnableOptionFqdnOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsEnableOptionFqdn) {
		return nil, false
	}
	return o.UseDdnsEnableOptionFqdn, true
}

// HasUseDdnsEnableOptionFqdn returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDdnsEnableOptionFqdn() bool {
	if o != nil && !IsNil(o.UseDdnsEnableOptionFqdn) {
		return true
	}

	return false
}

// SetUseDdnsEnableOptionFqdn gets a reference to the given bool and assigns it to the UseDdnsEnableOptionFqdn field.
func (o *Ipv6networktemplate) SetUseDdnsEnableOptionFqdn(v bool) {
	o.UseDdnsEnableOptionFqdn = &v
}

// GetUseDdnsGenerateHostname returns the UseDdnsGenerateHostname field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDdnsGenerateHostname() bool {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		var ret bool
		return ret
	}
	return *o.UseDdnsGenerateHostname
}

// GetUseDdnsGenerateHostnameOk returns a tuple with the UseDdnsGenerateHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDdnsGenerateHostnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsGenerateHostname) {
		return nil, false
	}
	return o.UseDdnsGenerateHostname, true
}

// HasUseDdnsGenerateHostname returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDdnsGenerateHostname() bool {
	if o != nil && !IsNil(o.UseDdnsGenerateHostname) {
		return true
	}

	return false
}

// SetUseDdnsGenerateHostname gets a reference to the given bool and assigns it to the UseDdnsGenerateHostname field.
func (o *Ipv6networktemplate) SetUseDdnsGenerateHostname(v bool) {
	o.UseDdnsGenerateHostname = &v
}

// GetUseDdnsTtl returns the UseDdnsTtl field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDdnsTtl() bool {
	if o == nil || IsNil(o.UseDdnsTtl) {
		var ret bool
		return ret
	}
	return *o.UseDdnsTtl
}

// GetUseDdnsTtlOk returns a tuple with the UseDdnsTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDdnsTtlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDdnsTtl) {
		return nil, false
	}
	return o.UseDdnsTtl, true
}

// HasUseDdnsTtl returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDdnsTtl() bool {
	if o != nil && !IsNil(o.UseDdnsTtl) {
		return true
	}

	return false
}

// SetUseDdnsTtl gets a reference to the given bool and assigns it to the UseDdnsTtl field.
func (o *Ipv6networktemplate) SetUseDdnsTtl(v bool) {
	o.UseDdnsTtl = &v
}

// GetUseDomainName returns the UseDomainName field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDomainName() bool {
	if o == nil || IsNil(o.UseDomainName) {
		var ret bool
		return ret
	}
	return *o.UseDomainName
}

// GetUseDomainNameOk returns a tuple with the UseDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDomainNameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainName) {
		return nil, false
	}
	return o.UseDomainName, true
}

// HasUseDomainName returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDomainName() bool {
	if o != nil && !IsNil(o.UseDomainName) {
		return true
	}

	return false
}

// SetUseDomainName gets a reference to the given bool and assigns it to the UseDomainName field.
func (o *Ipv6networktemplate) SetUseDomainName(v bool) {
	o.UseDomainName = &v
}

// GetUseDomainNameServers returns the UseDomainNameServers field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseDomainNameServers() bool {
	if o == nil || IsNil(o.UseDomainNameServers) {
		var ret bool
		return ret
	}
	return *o.UseDomainNameServers
}

// GetUseDomainNameServersOk returns a tuple with the UseDomainNameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseDomainNameServersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDomainNameServers) {
		return nil, false
	}
	return o.UseDomainNameServers, true
}

// HasUseDomainNameServers returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseDomainNameServers() bool {
	if o != nil && !IsNil(o.UseDomainNameServers) {
		return true
	}

	return false
}

// SetUseDomainNameServers gets a reference to the given bool and assigns it to the UseDomainNameServers field.
func (o *Ipv6networktemplate) SetUseDomainNameServers(v bool) {
	o.UseDomainNameServers = &v
}

// GetUseEnableDdns returns the UseEnableDdns field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseEnableDdns() bool {
	if o == nil || IsNil(o.UseEnableDdns) {
		var ret bool
		return ret
	}
	return *o.UseEnableDdns
}

// GetUseEnableDdnsOk returns a tuple with the UseEnableDdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseEnableDdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDdns) {
		return nil, false
	}
	return o.UseEnableDdns, true
}

// HasUseEnableDdns returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseEnableDdns() bool {
	if o != nil && !IsNil(o.UseEnableDdns) {
		return true
	}

	return false
}

// SetUseEnableDdns gets a reference to the given bool and assigns it to the UseEnableDdns field.
func (o *Ipv6networktemplate) SetUseEnableDdns(v bool) {
	o.UseEnableDdns = &v
}

// GetUseLogicFilterRules returns the UseLogicFilterRules field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseLogicFilterRules() bool {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		var ret bool
		return ret
	}
	return *o.UseLogicFilterRules
}

// GetUseLogicFilterRulesOk returns a tuple with the UseLogicFilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseLogicFilterRulesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogicFilterRules) {
		return nil, false
	}
	return o.UseLogicFilterRules, true
}

// HasUseLogicFilterRules returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseLogicFilterRules() bool {
	if o != nil && !IsNil(o.UseLogicFilterRules) {
		return true
	}

	return false
}

// SetUseLogicFilterRules gets a reference to the given bool and assigns it to the UseLogicFilterRules field.
func (o *Ipv6networktemplate) SetUseLogicFilterRules(v bool) {
	o.UseLogicFilterRules = &v
}

// GetUseOptions returns the UseOptions field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseOptions() bool {
	if o == nil || IsNil(o.UseOptions) {
		var ret bool
		return ret
	}
	return *o.UseOptions
}

// GetUseOptionsOk returns a tuple with the UseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOptions) {
		return nil, false
	}
	return o.UseOptions, true
}

// HasUseOptions returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseOptions() bool {
	if o != nil && !IsNil(o.UseOptions) {
		return true
	}

	return false
}

// SetUseOptions gets a reference to the given bool and assigns it to the UseOptions field.
func (o *Ipv6networktemplate) SetUseOptions(v bool) {
	o.UseOptions = &v
}

// GetUsePreferredLifetime returns the UsePreferredLifetime field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUsePreferredLifetime() bool {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		var ret bool
		return ret
	}
	return *o.UsePreferredLifetime
}

// GetUsePreferredLifetimeOk returns a tuple with the UsePreferredLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUsePreferredLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreferredLifetime) {
		return nil, false
	}
	return o.UsePreferredLifetime, true
}

// HasUsePreferredLifetime returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUsePreferredLifetime() bool {
	if o != nil && !IsNil(o.UsePreferredLifetime) {
		return true
	}

	return false
}

// SetUsePreferredLifetime gets a reference to the given bool and assigns it to the UsePreferredLifetime field.
func (o *Ipv6networktemplate) SetUsePreferredLifetime(v bool) {
	o.UsePreferredLifetime = &v
}

// GetUseRecycleLeases returns the UseRecycleLeases field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseRecycleLeases() bool {
	if o == nil || IsNil(o.UseRecycleLeases) {
		var ret bool
		return ret
	}
	return *o.UseRecycleLeases
}

// GetUseRecycleLeasesOk returns a tuple with the UseRecycleLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseRecycleLeasesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRecycleLeases) {
		return nil, false
	}
	return o.UseRecycleLeases, true
}

// HasUseRecycleLeases returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseRecycleLeases() bool {
	if o != nil && !IsNil(o.UseRecycleLeases) {
		return true
	}

	return false
}

// SetUseRecycleLeases gets a reference to the given bool and assigns it to the UseRecycleLeases field.
func (o *Ipv6networktemplate) SetUseRecycleLeases(v bool) {
	o.UseRecycleLeases = &v
}

// GetUseUpdateDnsOnLeaseRenewal returns the UseUpdateDnsOnLeaseRenewal field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseUpdateDnsOnLeaseRenewal() bool {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		var ret bool
		return ret
	}
	return *o.UseUpdateDnsOnLeaseRenewal
}

// GetUseUpdateDnsOnLeaseRenewalOk returns a tuple with the UseUpdateDnsOnLeaseRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseUpdateDnsOnLeaseRenewalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return nil, false
	}
	return o.UseUpdateDnsOnLeaseRenewal, true
}

// HasUseUpdateDnsOnLeaseRenewal returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseUpdateDnsOnLeaseRenewal() bool {
	if o != nil && !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		return true
	}

	return false
}

// SetUseUpdateDnsOnLeaseRenewal gets a reference to the given bool and assigns it to the UseUpdateDnsOnLeaseRenewal field.
func (o *Ipv6networktemplate) SetUseUpdateDnsOnLeaseRenewal(v bool) {
	o.UseUpdateDnsOnLeaseRenewal = &v
}

// GetUseValidLifetime returns the UseValidLifetime field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetUseValidLifetime() bool {
	if o == nil || IsNil(o.UseValidLifetime) {
		var ret bool
		return ret
	}
	return *o.UseValidLifetime
}

// GetUseValidLifetimeOk returns a tuple with the UseValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetUseValidLifetimeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseValidLifetime) {
		return nil, false
	}
	return o.UseValidLifetime, true
}

// HasUseValidLifetime returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasUseValidLifetime() bool {
	if o != nil && !IsNil(o.UseValidLifetime) {
		return true
	}

	return false
}

// SetUseValidLifetime gets a reference to the given bool and assigns it to the UseValidLifetime field.
func (o *Ipv6networktemplate) SetUseValidLifetime(v bool) {
	o.UseValidLifetime = &v
}

// GetValidLifetime returns the ValidLifetime field value if set, zero value otherwise.
func (o *Ipv6networktemplate) GetValidLifetime() int64 {
	if o == nil || IsNil(o.ValidLifetime) {
		var ret int64
		return ret
	}
	return *o.ValidLifetime
}

// GetValidLifetimeOk returns a tuple with the ValidLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ipv6networktemplate) GetValidLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidLifetime) {
		return nil, false
	}
	return o.ValidLifetime, true
}

// HasValidLifetime returns a boolean if a field has been set.
func (o *Ipv6networktemplate) HasValidLifetime() bool {
	if o != nil && !IsNil(o.ValidLifetime) {
		return true
	}

	return false
}

// SetValidLifetime gets a reference to the given int64 and assigns it to the ValidLifetime field.
func (o *Ipv6networktemplate) SetValidLifetime(v int64) {
	o.ValidLifetime = &v
}

func (o Ipv6networktemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ipv6networktemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AllowAnyNetmask) {
		toSerialize["allow_any_netmask"] = o.AllowAnyNetmask
	}
	if !IsNil(o.AutoCreateReversezone) {
		toSerialize["auto_create_reversezone"] = o.AutoCreateReversezone
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.CloudApiCompatible) {
		toSerialize["cloud_api_compatible"] = o.CloudApiCompatible
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsDomainname) {
		toSerialize["ddns_domainname"] = o.DdnsDomainname
	}
	if !IsNil(o.DdnsEnableOptionFqdn) {
		toSerialize["ddns_enable_option_fqdn"] = o.DdnsEnableOptionFqdn
	}
	if !IsNil(o.DdnsGenerateHostname) {
		toSerialize["ddns_generate_hostname"] = o.DdnsGenerateHostname
	}
	if !IsNil(o.DdnsServerAlwaysUpdates) {
		toSerialize["ddns_server_always_updates"] = o.DdnsServerAlwaysUpdates
	}
	if !IsNil(o.DdnsTtl) {
		toSerialize["ddns_ttl"] = o.DdnsTtl
	}
	if !IsNil(o.DelegatedMember) {
		toSerialize["delegated_member"] = o.DelegatedMember
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.DomainNameServers) {
		toSerialize["domain_name_servers"] = o.DomainNameServers
	}
	if !IsNil(o.EnableDdns) {
		toSerialize["enable_ddns"] = o.EnableDdns
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.FixedAddressTemplates) {
		toSerialize["fixed_address_templates"] = o.FixedAddressTemplates
	}
	if !IsNil(o.Ipv6prefix) {
		toSerialize["ipv6prefix"] = o.Ipv6prefix
	}
	if !IsNil(o.LogicFilterRules) {
		toSerialize["logic_filter_rules"] = o.LogicFilterRules
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PreferredLifetime) {
		toSerialize["preferred_lifetime"] = o.PreferredLifetime
	}
	if !IsNil(o.RangeTemplates) {
		toSerialize["range_templates"] = o.RangeTemplates
	}
	if !IsNil(o.RecycleLeases) {
		toSerialize["recycle_leases"] = o.RecycleLeases
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.RirOrganization) {
		toSerialize["rir_organization"] = o.RirOrganization
	}
	if !IsNil(o.RirRegistrationAction) {
		toSerialize["rir_registration_action"] = o.RirRegistrationAction
	}
	if !IsNil(o.RirRegistrationStatus) {
		toSerialize["rir_registration_status"] = o.RirRegistrationStatus
	}
	if !IsNil(o.SendRirRequest) {
		toSerialize["send_rir_request"] = o.SendRirRequest
	}
	if !IsNil(o.UpdateDnsOnLeaseRenewal) {
		toSerialize["update_dns_on_lease_renewal"] = o.UpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseDdnsDomainname) {
		toSerialize["use_ddns_domainname"] = o.UseDdnsDomainname
	}
	if !IsNil(o.UseDdnsEnableOptionFqdn) {
		toSerialize["use_ddns_enable_option_fqdn"] = o.UseDdnsEnableOptionFqdn
	}
	if !IsNil(o.UseDdnsGenerateHostname) {
		toSerialize["use_ddns_generate_hostname"] = o.UseDdnsGenerateHostname
	}
	if !IsNil(o.UseDdnsTtl) {
		toSerialize["use_ddns_ttl"] = o.UseDdnsTtl
	}
	if !IsNil(o.UseDomainName) {
		toSerialize["use_domain_name"] = o.UseDomainName
	}
	if !IsNil(o.UseDomainNameServers) {
		toSerialize["use_domain_name_servers"] = o.UseDomainNameServers
	}
	if !IsNil(o.UseEnableDdns) {
		toSerialize["use_enable_ddns"] = o.UseEnableDdns
	}
	if !IsNil(o.UseLogicFilterRules) {
		toSerialize["use_logic_filter_rules"] = o.UseLogicFilterRules
	}
	if !IsNil(o.UseOptions) {
		toSerialize["use_options"] = o.UseOptions
	}
	if !IsNil(o.UsePreferredLifetime) {
		toSerialize["use_preferred_lifetime"] = o.UsePreferredLifetime
	}
	if !IsNil(o.UseRecycleLeases) {
		toSerialize["use_recycle_leases"] = o.UseRecycleLeases
	}
	if !IsNil(o.UseUpdateDnsOnLeaseRenewal) {
		toSerialize["use_update_dns_on_lease_renewal"] = o.UseUpdateDnsOnLeaseRenewal
	}
	if !IsNil(o.UseValidLifetime) {
		toSerialize["use_valid_lifetime"] = o.UseValidLifetime
	}
	if !IsNil(o.ValidLifetime) {
		toSerialize["valid_lifetime"] = o.ValidLifetime
	}
	return toSerialize, nil
}

type NullableIpv6networktemplate struct {
	value *Ipv6networktemplate
	isSet bool
}

func (v NullableIpv6networktemplate) Get() *Ipv6networktemplate {
	return v.value
}

func (v *NullableIpv6networktemplate) Set(val *Ipv6networktemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv6networktemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv6networktemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv6networktemplate(val *Ipv6networktemplate) *NullableIpv6networktemplate {
	return &NullableIpv6networktemplate{value: val, isSet: true}
}

func (v NullableIpv6networktemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv6networktemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
