/*
Infoblox IPAM API

OpenAPI specification for Infoblox NIOS WAPI IPAM objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// ListSuperhostResponse - struct for ListSuperhostResponse
type ListSuperhostResponse struct {
	ListSuperhostResponseObject *ListSuperhostResponseObject
	ArrayOfSuperhost            *[]Superhost
}

// ListSuperhostResponseObjectAsListSuperhostResponse is a convenience function that returns ListSuperhostResponseObject wrapped in ListSuperhostResponse
func ListSuperhostResponseObjectAsListSuperhostResponse(v *ListSuperhostResponseObject) ListSuperhostResponse {
	return ListSuperhostResponse{
		ListSuperhostResponseObject: v,
	}
}

// []SuperhostAsListSuperhostResponse is a convenience function that returns []Superhost wrapped in ListSuperhostResponse
func ArrayOfSuperhostAsListSuperhostResponse(v *[]Superhost) ListSuperhostResponse {
	return ListSuperhostResponse{
		ArrayOfSuperhost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSuperhostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSuperhostResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSuperhostResponseObject)
	if err == nil {
		jsonListSuperhostResponseObject, _ := json.Marshal(dst.ListSuperhostResponseObject)
		if string(jsonListSuperhostResponseObject) == "{}" { // empty struct
			dst.ListSuperhostResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSuperhostResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSuperhost
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSuperhost)
	if err == nil {
		jsonArrayOfSuperhost, _ := json.Marshal(dst.ArrayOfSuperhost)
		if string(jsonArrayOfSuperhost) == "{}" { // empty struct
			dst.ArrayOfSuperhost = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSuperhost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSuperhostResponseObject = nil
		dst.ArrayOfSuperhost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSuperhostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSuperhostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSuperhostResponse) MarshalJSON() ([]byte, error) {
	if src.ListSuperhostResponseObject != nil {
		return json.Marshal(&src.ListSuperhostResponseObject)
	}

	if src.ArrayOfSuperhost != nil {
		return json.Marshal(&src.ArrayOfSuperhost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSuperhostResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSuperhostResponseObject != nil {
		return obj.ListSuperhostResponseObject
	}

	if obj.ArrayOfSuperhost != nil {
		return obj.ArrayOfSuperhost
	}

	// all schemas are nil
	return nil
}

type NullableListSuperhostResponse struct {
	value *ListSuperhostResponse
	isSet bool
}

func (v NullableListSuperhostResponse) Get() *ListSuperhostResponse {
	return v.value
}

func (v *NullableListSuperhostResponse) Set(val *ListSuperhostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSuperhostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSuperhostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSuperhostResponse(val *ListSuperhostResponse) *NullableListSuperhostResponse {
	return &NullableListSuperhostResponse{value: val, isSet: true}
}

func (v NullableListSuperhostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSuperhostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
