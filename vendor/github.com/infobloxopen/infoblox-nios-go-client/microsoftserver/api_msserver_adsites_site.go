/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type MsserverAdsitesSiteAPI interface {
	/*
		Create Create a msserver:adsites:site object

		Creates a new msserver:adsites:site object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverAdsitesSiteAPICreateRequest
	*/
	Create(ctx context.Context) MsserverAdsitesSiteAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateMsserverAdsitesSiteResponse
	CreateExecute(r MsserverAdsitesSiteAPICreateRequest) (*CreateMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		Delete Delete a msserver:adsites:site object

		Deletes a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) MsserverAdsitesSiteAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r MsserverAdsitesSiteAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve msserver:adsites:site objects

		Returns a list of msserver:adsites:site objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return MsserverAdsitesSiteAPIListRequest
	*/
	List(ctx context.Context) MsserverAdsitesSiteAPIListRequest

	// ListExecute executes the request
	//  @return ListMsserverAdsitesSiteResponse
	ListExecute(r MsserverAdsitesSiteAPIListRequest) (*ListMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		Read Get a specific msserver:adsites:site object

		Returns a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIReadRequest
	*/
	Read(ctx context.Context, reference string) MsserverAdsitesSiteAPIReadRequest

	// ReadExecute executes the request
	//  @return GetMsserverAdsitesSiteResponse
	ReadExecute(r MsserverAdsitesSiteAPIReadRequest) (*GetMsserverAdsitesSiteResponse, *http.Response, error)
	/*
		Update Update a msserver:adsites:site object

		Updates a specific msserver:adsites:site object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the msserver:adsites:site object
		@return MsserverAdsitesSiteAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) MsserverAdsitesSiteAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateMsserverAdsitesSiteResponse
	UpdateExecute(r MsserverAdsitesSiteAPIUpdateRequest) (*UpdateMsserverAdsitesSiteResponse, *http.Response, error)
}

// MsserverAdsitesSiteAPIService MsserverAdsitesSiteAPI service
type MsserverAdsitesSiteAPIService internal.Service

type MsserverAdsitesSiteAPICreateRequest struct {
	ctx                 context.Context
	ApiService          MsserverAdsitesSiteAPI
	msserverAdsitesSite *MsserverAdsitesSite
	returnFields        *string
	returnFieldsPlus    *string
	returnAsObject      *int32
}

// Object data to create
func (r MsserverAdsitesSiteAPICreateRequest) MsserverAdsitesSite(msserverAdsitesSite MsserverAdsitesSite) MsserverAdsitesSiteAPICreateRequest {
	r.msserverAdsitesSite = &msserverAdsitesSite
	return r
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPICreateRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) MsserverAdsitesSiteAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPICreateRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPICreateRequest) Execute() (*CreateMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a msserver:adsites:site object

Creates a new msserver:adsites:site object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverAdsitesSiteAPICreateRequest
*/
func (a *MsserverAdsitesSiteAPIService) Create(ctx context.Context) MsserverAdsitesSiteAPICreateRequest {
	return MsserverAdsitesSiteAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) CreateExecute(r MsserverAdsitesSiteAPICreateRequest) (*CreateMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverAdsitesSite == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverAdsitesSite is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverAdsitesSite
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIDeleteRequest struct {
	ctx        context.Context
	ApiService MsserverAdsitesSiteAPI
	reference  string
}

func (r MsserverAdsitesSiteAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a msserver:adsites:site object

Deletes a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIDeleteRequest
*/
func (a *MsserverAdsitesSiteAPIService) Delete(ctx context.Context, reference string) MsserverAdsitesSiteAPIDeleteRequest {
	return MsserverAdsitesSiteAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *MsserverAdsitesSiteAPIService) DeleteExecute(r MsserverAdsitesSiteAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIListRequest struct {
	ctx              context.Context
	ApiService       MsserverAdsitesSiteAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIListRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) MsserverAdsitesSiteAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r MsserverAdsitesSiteAPIListRequest) MaxResults(maxResults int32) MsserverAdsitesSiteAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIListRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r MsserverAdsitesSiteAPIListRequest) Paging(paging int32) MsserverAdsitesSiteAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r MsserverAdsitesSiteAPIListRequest) PageId(pageId string) MsserverAdsitesSiteAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r MsserverAdsitesSiteAPIListRequest) Filters(filters map[string]interface{}) MsserverAdsitesSiteAPIListRequest {
	r.filters = &filters
	return r
}

func (r MsserverAdsitesSiteAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) MsserverAdsitesSiteAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r MsserverAdsitesSiteAPIListRequest) Execute() (*ListMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve msserver:adsites:site objects

Returns a list of msserver:adsites:site objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MsserverAdsitesSiteAPIListRequest
*/
func (a *MsserverAdsitesSiteAPIService) List(ctx context.Context) MsserverAdsitesSiteAPIListRequest {
	return MsserverAdsitesSiteAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) ListExecute(r MsserverAdsitesSiteAPIListRequest) (*ListMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIReadRequest struct {
	ctx              context.Context
	ApiService       MsserverAdsitesSiteAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIReadRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) MsserverAdsitesSiteAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIReadRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPIReadRequest) Execute() (*GetMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific msserver:adsites:site object

Returns a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIReadRequest
*/
func (a *MsserverAdsitesSiteAPIService) Read(ctx context.Context, reference string) MsserverAdsitesSiteAPIReadRequest {
	return MsserverAdsitesSiteAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) ReadExecute(r MsserverAdsitesSiteAPIReadRequest) (*GetMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type MsserverAdsitesSiteAPIUpdateRequest struct {
	ctx                 context.Context
	ApiService          MsserverAdsitesSiteAPI
	reference           string
	msserverAdsitesSite *MsserverAdsitesSite
	returnFields        *string
	returnFieldsPlus    *string
	returnAsObject      *int32
}

// Object data to update
func (r MsserverAdsitesSiteAPIUpdateRequest) MsserverAdsitesSite(msserverAdsitesSite MsserverAdsitesSite) MsserverAdsitesSiteAPIUpdateRequest {
	r.msserverAdsitesSite = &msserverAdsitesSite
	return r
}

// Enter the field names followed by comma
func (r MsserverAdsitesSiteAPIUpdateRequest) ReturnFields(returnFields string) MsserverAdsitesSiteAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r MsserverAdsitesSiteAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) MsserverAdsitesSiteAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r MsserverAdsitesSiteAPIUpdateRequest) ReturnAsObject(returnAsObject int32) MsserverAdsitesSiteAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r MsserverAdsitesSiteAPIUpdateRequest) Execute() (*UpdateMsserverAdsitesSiteResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a msserver:adsites:site object

Updates a specific msserver:adsites:site object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the msserver:adsites:site object
	@return MsserverAdsitesSiteAPIUpdateRequest
*/
func (a *MsserverAdsitesSiteAPIService) Update(ctx context.Context, reference string) MsserverAdsitesSiteAPIUpdateRequest {
	return MsserverAdsitesSiteAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateMsserverAdsitesSiteResponse
func (a *MsserverAdsitesSiteAPIService) UpdateExecute(r MsserverAdsitesSiteAPIUpdateRequest) (*UpdateMsserverAdsitesSiteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateMsserverAdsitesSiteResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "MsserverAdsitesSiteAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/msserver:adsites:site/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.msserverAdsitesSite == nil {
		return localVarReturnValue, nil, internal.ReportError("msserverAdsitesSite is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.msserverAdsitesSite
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
