/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"github.com/infobloxopen/infoblox-nios-go-client/internal"
	"github.com/infobloxopen/infoblox-nios-go-client/option"
)

const serviceBasePath = "/wapi/v2.13.6"

// APIClient manages communication with the Infoblox MICROSOFTSERVER API 2.13.6
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
	MsserverAPI MsserverAPI
	MsserverAdsitesDomainAPI MsserverAdsitesDomainAPI
	MsserverAdsitesSiteAPI MsserverAdsitesSiteAPI
	MsserverDhcpAPI MsserverDhcpAPI
	MsserverDnsAPI MsserverDnsAPI
	MssuperscopeAPI MssuperscopeAPI
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithNIOSHostUrl(string) sets the URL for NIOS Portal.
// - WithNIOSUsername(string) sets the Username for the NIOS Portal.
// - WithNIOSPassword(string) sets the Password for the NIOS Portal.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultExtAttrs(map[string]struct{ Value string }) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

	// API Services
	c.MsserverAPI = (*MsserverAPIService)(&c.Common)
	c.MsserverAdsitesDomainAPI = (*MsserverAdsitesDomainAPIService)(&c.Common)
	c.MsserverAdsitesSiteAPI = (*MsserverAdsitesSiteAPIService)(&c.Common)
	c.MsserverDhcpAPI = (*MsserverDhcpAPIService)(&c.Common)
	c.MsserverDnsAPI = (*MsserverDnsAPIService)(&c.Common)
	c.MssuperscopeAPI = (*MssuperscopeAPIService)(&c.Common)

	return c
}