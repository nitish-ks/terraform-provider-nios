/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// CreateMsserverDhcpResponse - struct for CreateMsserverDhcpResponse
type CreateMsserverDhcpResponse struct {
	CreateMsserverDhcpResponseAsObject *CreateMsserverDhcpResponseAsObject
	String                             *string
}

// CreateMsserverDhcpResponseAsObjectAsCreateMsserverDhcpResponse is a convenience function that returns CreateMsserverDhcpResponseAsObject wrapped in CreateMsserverDhcpResponse
func CreateMsserverDhcpResponseAsObjectAsCreateMsserverDhcpResponse(v *CreateMsserverDhcpResponseAsObject) CreateMsserverDhcpResponse {
	return CreateMsserverDhcpResponse{
		CreateMsserverDhcpResponseAsObject: v,
	}
}

// stringAsCreateMsserverDhcpResponse is a convenience function that returns string wrapped in CreateMsserverDhcpResponse
func StringAsCreateMsserverDhcpResponse(v *string) CreateMsserverDhcpResponse {
	return CreateMsserverDhcpResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateMsserverDhcpResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateMsserverDhcpResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.CreateMsserverDhcpResponseAsObject)
	if err == nil {
		jsonCreateMsserverDhcpResponseAsObject, _ := json.Marshal(dst.CreateMsserverDhcpResponseAsObject)
		if string(jsonCreateMsserverDhcpResponseAsObject) == "{}" { // empty struct
			dst.CreateMsserverDhcpResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.CreateMsserverDhcpResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateMsserverDhcpResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateMsserverDhcpResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateMsserverDhcpResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateMsserverDhcpResponse) MarshalJSON() ([]byte, error) {
	if src.CreateMsserverDhcpResponseAsObject != nil {
		return json.Marshal(&src.CreateMsserverDhcpResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateMsserverDhcpResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateMsserverDhcpResponseAsObject != nil {
		return obj.CreateMsserverDhcpResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateMsserverDhcpResponse struct {
	value *CreateMsserverDhcpResponse
	isSet bool
}

func (v NullableCreateMsserverDhcpResponse) Get() *CreateMsserverDhcpResponse {
	return v.value
}

func (v *NullableCreateMsserverDhcpResponse) Set(val *CreateMsserverDhcpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMsserverDhcpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMsserverDhcpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMsserverDhcpResponse(val *CreateMsserverDhcpResponse) *NullableCreateMsserverDhcpResponse {
	return &NullableCreateMsserverDhcpResponse{value: val, isSet: true}
}

func (v NullableCreateMsserverDhcpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMsserverDhcpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
