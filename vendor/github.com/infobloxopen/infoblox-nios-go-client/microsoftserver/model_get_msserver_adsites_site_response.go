/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// GetMsserverAdsitesSiteResponse - struct for GetMsserverAdsitesSiteResponse
type GetMsserverAdsitesSiteResponse struct {
	GetMsserverAdsitesSiteResponseObjectAsResult *GetMsserverAdsitesSiteResponseObjectAsResult
	MsserverAdsitesSite                          *MsserverAdsitesSite
}

// GetMsserverAdsitesSiteResponseObjectAsResultAsGetMsserverAdsitesSiteResponse is a convenience function that returns GetMsserverAdsitesSiteResponseObjectAsResult wrapped in GetMsserverAdsitesSiteResponse
func GetMsserverAdsitesSiteResponseObjectAsResultAsGetMsserverAdsitesSiteResponse(v *GetMsserverAdsitesSiteResponseObjectAsResult) GetMsserverAdsitesSiteResponse {
	return GetMsserverAdsitesSiteResponse{
		GetMsserverAdsitesSiteResponseObjectAsResult: v,
	}
}

// MsserverAdsitesSiteAsGetMsserverAdsitesSiteResponse is a convenience function that returns MsserverAdsitesSite wrapped in GetMsserverAdsitesSiteResponse
func MsserverAdsitesSiteAsGetMsserverAdsitesSiteResponse(v *MsserverAdsitesSite) GetMsserverAdsitesSiteResponse {
	return GetMsserverAdsitesSiteResponse{
		MsserverAdsitesSite: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMsserverAdsitesSiteResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMsserverAdsitesSiteResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMsserverAdsitesSiteResponseObjectAsResult)
	if err == nil {
		jsonGetMsserverAdsitesSiteResponseObjectAsResult, _ := json.Marshal(dst.GetMsserverAdsitesSiteResponseObjectAsResult)
		if string(jsonGetMsserverAdsitesSiteResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMsserverAdsitesSiteResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMsserverAdsitesSiteResponseObjectAsResult = nil
	}

	// try to unmarshal data into MsserverAdsitesSite
	err = newStrictDecoder(data).Decode(&dst.MsserverAdsitesSite)
	if err == nil {
		jsonMsserverAdsitesSite, _ := json.Marshal(dst.MsserverAdsitesSite)
		if string(jsonMsserverAdsitesSite) == "{}" { // empty struct
			dst.MsserverAdsitesSite = nil
		} else {
			match++
		}
	} else {
		dst.MsserverAdsitesSite = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMsserverAdsitesSiteResponseObjectAsResult = nil
		dst.MsserverAdsitesSite = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMsserverAdsitesSiteResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMsserverAdsitesSiteResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	if src.GetMsserverAdsitesSiteResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMsserverAdsitesSiteResponseObjectAsResult)
	}

	if src.MsserverAdsitesSite != nil {
		return json.Marshal(&src.MsserverAdsitesSite)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMsserverAdsitesSiteResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMsserverAdsitesSiteResponseObjectAsResult != nil {
		return obj.GetMsserverAdsitesSiteResponseObjectAsResult
	}

	if obj.MsserverAdsitesSite != nil {
		return obj.MsserverAdsitesSite
	}

	// all schemas are nil
	return nil
}

type NullableGetMsserverAdsitesSiteResponse struct {
	value *GetMsserverAdsitesSiteResponse
	isSet bool
}

func (v NullableGetMsserverAdsitesSiteResponse) Get() *GetMsserverAdsitesSiteResponse {
	return v.value
}

func (v *NullableGetMsserverAdsitesSiteResponse) Set(val *GetMsserverAdsitesSiteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMsserverAdsitesSiteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMsserverAdsitesSiteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMsserverAdsitesSiteResponse(val *GetMsserverAdsitesSiteResponse) *NullableGetMsserverAdsitesSiteResponse {
	return &NullableGetMsserverAdsitesSiteResponse{value: val, isSet: true}
}

func (v NullableGetMsserverAdsitesSiteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMsserverAdsitesSiteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
