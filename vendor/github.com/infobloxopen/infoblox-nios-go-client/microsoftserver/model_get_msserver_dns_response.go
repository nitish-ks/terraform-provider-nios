/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// GetMsserverDnsResponse - struct for GetMsserverDnsResponse
type GetMsserverDnsResponse struct {
	GetMsserverDnsResponseObjectAsResult *GetMsserverDnsResponseObjectAsResult
	MsserverDns                          *MsserverDns
}

// GetMsserverDnsResponseObjectAsResultAsGetMsserverDnsResponse is a convenience function that returns GetMsserverDnsResponseObjectAsResult wrapped in GetMsserverDnsResponse
func GetMsserverDnsResponseObjectAsResultAsGetMsserverDnsResponse(v *GetMsserverDnsResponseObjectAsResult) GetMsserverDnsResponse {
	return GetMsserverDnsResponse{
		GetMsserverDnsResponseObjectAsResult: v,
	}
}

// MsserverDnsAsGetMsserverDnsResponse is a convenience function that returns MsserverDns wrapped in GetMsserverDnsResponse
func MsserverDnsAsGetMsserverDnsResponse(v *MsserverDns) GetMsserverDnsResponse {
	return GetMsserverDnsResponse{
		MsserverDns: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMsserverDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetMsserverDnsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetMsserverDnsResponseObjectAsResult)
	if err == nil {
		jsonGetMsserverDnsResponseObjectAsResult, _ := json.Marshal(dst.GetMsserverDnsResponseObjectAsResult)
		if string(jsonGetMsserverDnsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetMsserverDnsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetMsserverDnsResponseObjectAsResult = nil
	}

	// try to unmarshal data into MsserverDns
	err = newStrictDecoder(data).Decode(&dst.MsserverDns)
	if err == nil {
		jsonMsserverDns, _ := json.Marshal(dst.MsserverDns)
		if string(jsonMsserverDns) == "{}" { // empty struct
			dst.MsserverDns = nil
		} else {
			match++
		}
	} else {
		dst.MsserverDns = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetMsserverDnsResponseObjectAsResult = nil
		dst.MsserverDns = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMsserverDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMsserverDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMsserverDnsResponse) MarshalJSON() ([]byte, error) {
	if src.GetMsserverDnsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetMsserverDnsResponseObjectAsResult)
	}

	if src.MsserverDns != nil {
		return json.Marshal(&src.MsserverDns)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMsserverDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetMsserverDnsResponseObjectAsResult != nil {
		return obj.GetMsserverDnsResponseObjectAsResult
	}

	if obj.MsserverDns != nil {
		return obj.MsserverDns
	}

	// all schemas are nil
	return nil
}

type NullableGetMsserverDnsResponse struct {
	value *GetMsserverDnsResponse
	isSet bool
}

func (v NullableGetMsserverDnsResponse) Get() *GetMsserverDnsResponse {
	return v.value
}

func (v *NullableGetMsserverDnsResponse) Set(val *GetMsserverDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMsserverDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMsserverDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMsserverDnsResponse(val *GetMsserverDnsResponse) *NullableGetMsserverDnsResponse {
	return &NullableGetMsserverDnsResponse{value: val, isSet: true}
}

func (v NullableGetMsserverDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMsserverDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
