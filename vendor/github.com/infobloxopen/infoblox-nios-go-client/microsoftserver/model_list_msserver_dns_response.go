/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// ListMsserverDnsResponse - struct for ListMsserverDnsResponse
type ListMsserverDnsResponse struct {
	ListMsserverDnsResponseObject *ListMsserverDnsResponseObject
	ArrayOfMsserverDns            *[]MsserverDns
}

// ListMsserverDnsResponseObjectAsListMsserverDnsResponse is a convenience function that returns ListMsserverDnsResponseObject wrapped in ListMsserverDnsResponse
func ListMsserverDnsResponseObjectAsListMsserverDnsResponse(v *ListMsserverDnsResponseObject) ListMsserverDnsResponse {
	return ListMsserverDnsResponse{
		ListMsserverDnsResponseObject: v,
	}
}

// []MsserverDnsAsListMsserverDnsResponse is a convenience function that returns []MsserverDns wrapped in ListMsserverDnsResponse
func ArrayOfMsserverDnsAsListMsserverDnsResponse(v *[]MsserverDns) ListMsserverDnsResponse {
	return ListMsserverDnsResponse{
		ArrayOfMsserverDns: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMsserverDnsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMsserverDnsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMsserverDnsResponseObject)
	if err == nil {
		jsonListMsserverDnsResponseObject, _ := json.Marshal(dst.ListMsserverDnsResponseObject)
		if string(jsonListMsserverDnsResponseObject) == "{}" { // empty struct
			dst.ListMsserverDnsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMsserverDnsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMsserverDns
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMsserverDns)
	if err == nil {
		jsonArrayOfMsserverDns, _ := json.Marshal(dst.ArrayOfMsserverDns)
		if string(jsonArrayOfMsserverDns) == "{}" { // empty struct
			dst.ArrayOfMsserverDns = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMsserverDns = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMsserverDnsResponseObject = nil
		dst.ArrayOfMsserverDns = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMsserverDnsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMsserverDnsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMsserverDnsResponse) MarshalJSON() ([]byte, error) {
	if src.ListMsserverDnsResponseObject != nil {
		return json.Marshal(&src.ListMsserverDnsResponseObject)
	}

	if src.ArrayOfMsserverDns != nil {
		return json.Marshal(&src.ArrayOfMsserverDns)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMsserverDnsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMsserverDnsResponseObject != nil {
		return obj.ListMsserverDnsResponseObject
	}

	if obj.ArrayOfMsserverDns != nil {
		return obj.ArrayOfMsserverDns
	}

	// all schemas are nil
	return nil
}

type NullableListMsserverDnsResponse struct {
	value *ListMsserverDnsResponse
	isSet bool
}

func (v NullableListMsserverDnsResponse) Get() *ListMsserverDnsResponse {
	return v.value
}

func (v *NullableListMsserverDnsResponse) Set(val *ListMsserverDnsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMsserverDnsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMsserverDnsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMsserverDnsResponse(val *ListMsserverDnsResponse) *NullableListMsserverDnsResponse {
	return &NullableListMsserverDnsResponse{value: val, isSet: true}
}

func (v NullableListMsserverDnsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMsserverDnsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
