/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
	"fmt"
)

// ListMssuperscopeResponse - struct for ListMssuperscopeResponse
type ListMssuperscopeResponse struct {
	ListMssuperscopeResponseObject *ListMssuperscopeResponseObject
	ArrayOfMssuperscope            *[]Mssuperscope
}

// ListMssuperscopeResponseObjectAsListMssuperscopeResponse is a convenience function that returns ListMssuperscopeResponseObject wrapped in ListMssuperscopeResponse
func ListMssuperscopeResponseObjectAsListMssuperscopeResponse(v *ListMssuperscopeResponseObject) ListMssuperscopeResponse {
	return ListMssuperscopeResponse{
		ListMssuperscopeResponseObject: v,
	}
}

// []MssuperscopeAsListMssuperscopeResponse is a convenience function that returns []Mssuperscope wrapped in ListMssuperscopeResponse
func ArrayOfMssuperscopeAsListMssuperscopeResponse(v *[]Mssuperscope) ListMssuperscopeResponse {
	return ListMssuperscopeResponse{
		ArrayOfMssuperscope: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListMssuperscopeResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListMssuperscopeResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListMssuperscopeResponseObject)
	if err == nil {
		jsonListMssuperscopeResponseObject, _ := json.Marshal(dst.ListMssuperscopeResponseObject)
		if string(jsonListMssuperscopeResponseObject) == "{}" { // empty struct
			dst.ListMssuperscopeResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListMssuperscopeResponseObject = nil
	}

	// try to unmarshal data into ArrayOfMssuperscope
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMssuperscope)
	if err == nil {
		jsonArrayOfMssuperscope, _ := json.Marshal(dst.ArrayOfMssuperscope)
		if string(jsonArrayOfMssuperscope) == "{}" { // empty struct
			dst.ArrayOfMssuperscope = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfMssuperscope = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListMssuperscopeResponseObject = nil
		dst.ArrayOfMssuperscope = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListMssuperscopeResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListMssuperscopeResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListMssuperscopeResponse) MarshalJSON() ([]byte, error) {
	if src.ListMssuperscopeResponseObject != nil {
		return json.Marshal(&src.ListMssuperscopeResponseObject)
	}

	if src.ArrayOfMssuperscope != nil {
		return json.Marshal(&src.ArrayOfMssuperscope)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListMssuperscopeResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListMssuperscopeResponseObject != nil {
		return obj.ListMssuperscopeResponseObject
	}

	if obj.ArrayOfMssuperscope != nil {
		return obj.ArrayOfMssuperscope
	}

	// all schemas are nil
	return nil
}

type NullableListMssuperscopeResponse struct {
	value *ListMssuperscopeResponse
	isSet bool
}

func (v NullableListMssuperscopeResponse) Get() *ListMssuperscopeResponse {
	return v.value
}

func (v *NullableListMssuperscopeResponse) Set(val *ListMssuperscopeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMssuperscopeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMssuperscopeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMssuperscopeResponse(val *ListMssuperscopeResponse) *NullableListMssuperscopeResponse {
	return &NullableListMssuperscopeResponse{value: val, isSet: true}
}

func (v NullableListMssuperscopeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMssuperscopeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
