/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverDhcpServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverDhcpServer{}

// MsserverDhcpServer struct for MsserverDhcpServer
type MsserverDhcpServer struct {
	// Flag to override login name and password from the MS Server
	UseLogin *bool `json:"use_login,omitempty"`
	// Microsoft Server login name
	LoginName *string `json:"login_name,omitempty"`
	// Microsoft Server login password
	LoginPassword *string `json:"login_password,omitempty"`
	// flag indicating if the DNS service is managed
	Managed *bool `json:"managed,omitempty"`
	// Defines what control to apply on the DNS server
	NextSyncControl *string `json:"next_sync_control,omitempty"`
	// Status of the Microsoft DNS Service
	Status *string `json:"status,omitempty"`
	// Timestamp of the last update
	StatusLastUpdated *int64 `json:"status_last_updated,omitempty"`
	// Override enable monitoring inherited from grid level
	UseEnableMonitoring *bool `json:"use_enable_monitoring,omitempty"`
	// Flag indicating if the DNS service is monitored and controlled
	EnableMonitoring *bool `json:"enable_monitoring,omitempty"`
	// Override setting for Enable Invalid Mac Address
	UseEnableInvalidMac *bool `json:"use_enable_invalid_mac,omitempty"`
	// Enable Invalid Mac Address
	EnableInvalidMac *bool `json:"enable_invalid_mac,omitempty"`
	// Flag indicating if the DHCP supports Failover
	SupportsFailover *bool `json:"supports_failover,omitempty"`
	// Flag to override synchronization interval from the MS Server
	UseSynchronizationMinDelay *bool `json:"use_synchronization_min_delay,omitempty"`
	// Minimum number of minutes between two synchronizations
	SynchronizationMinDelay *int64 `json:"synchronization_min_delay,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _MsserverDhcpServer MsserverDhcpServer

// NewMsserverDhcpServer instantiates a new MsserverDhcpServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverDhcpServer() *MsserverDhcpServer {
	this := MsserverDhcpServer{}
	return &this
}

// NewMsserverDhcpServerWithDefaults instantiates a new MsserverDhcpServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverDhcpServerWithDefaults() *MsserverDhcpServer {
	this := MsserverDhcpServer{}
	return &this
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverDhcpServer) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverDhcpServer) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverDhcpServer) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *MsserverDhcpServer) SetManaged(v bool) {
	o.Managed = &v
}

// GetNextSyncControl returns the NextSyncControl field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetNextSyncControl() string {
	if o == nil || IsNil(o.NextSyncControl) {
		var ret string
		return ret
	}
	return *o.NextSyncControl
}

// GetNextSyncControlOk returns a tuple with the NextSyncControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetNextSyncControlOk() (*string, bool) {
	if o == nil || IsNil(o.NextSyncControl) {
		return nil, false
	}
	return o.NextSyncControl, true
}

// HasNextSyncControl returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasNextSyncControl() bool {
	if o != nil && !IsNil(o.NextSyncControl) {
		return true
	}

	return false
}

// SetNextSyncControl gets a reference to the given string and assigns it to the NextSyncControl field.
func (o *MsserverDhcpServer) SetNextSyncControl(v string) {
	o.NextSyncControl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MsserverDhcpServer) SetStatus(v string) {
	o.Status = &v
}

// GetStatusLastUpdated returns the StatusLastUpdated field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetStatusLastUpdated() int64 {
	if o == nil || IsNil(o.StatusLastUpdated) {
		var ret int64
		return ret
	}
	return *o.StatusLastUpdated
}

// GetStatusLastUpdatedOk returns a tuple with the StatusLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetStatusLastUpdatedOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusLastUpdated) {
		return nil, false
	}
	return o.StatusLastUpdated, true
}

// HasStatusLastUpdated returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasStatusLastUpdated() bool {
	if o != nil && !IsNil(o.StatusLastUpdated) {
		return true
	}

	return false
}

// SetStatusLastUpdated gets a reference to the given int64 and assigns it to the StatusLastUpdated field.
func (o *MsserverDhcpServer) SetStatusLastUpdated(v int64) {
	o.StatusLastUpdated = &v
}

// GetUseEnableMonitoring returns the UseEnableMonitoring field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetUseEnableMonitoring() bool {
	if o == nil || IsNil(o.UseEnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.UseEnableMonitoring
}

// GetUseEnableMonitoringOk returns a tuple with the UseEnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetUseEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableMonitoring) {
		return nil, false
	}
	return o.UseEnableMonitoring, true
}

// HasUseEnableMonitoring returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasUseEnableMonitoring() bool {
	if o != nil && !IsNil(o.UseEnableMonitoring) {
		return true
	}

	return false
}

// SetUseEnableMonitoring gets a reference to the given bool and assigns it to the UseEnableMonitoring field.
func (o *MsserverDhcpServer) SetUseEnableMonitoring(v bool) {
	o.UseEnableMonitoring = &v
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetEnableMonitoring() bool {
	if o == nil || IsNil(o.EnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableMonitoring
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMonitoring) {
		return nil, false
	}
	return o.EnableMonitoring, true
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasEnableMonitoring() bool {
	if o != nil && !IsNil(o.EnableMonitoring) {
		return true
	}

	return false
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *MsserverDhcpServer) SetEnableMonitoring(v bool) {
	o.EnableMonitoring = &v
}

// GetUseEnableInvalidMac returns the UseEnableInvalidMac field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetUseEnableInvalidMac() bool {
	if o == nil || IsNil(o.UseEnableInvalidMac) {
		var ret bool
		return ret
	}
	return *o.UseEnableInvalidMac
}

// GetUseEnableInvalidMacOk returns a tuple with the UseEnableInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetUseEnableInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableInvalidMac) {
		return nil, false
	}
	return o.UseEnableInvalidMac, true
}

// HasUseEnableInvalidMac returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasUseEnableInvalidMac() bool {
	if o != nil && !IsNil(o.UseEnableInvalidMac) {
		return true
	}

	return false
}

// SetUseEnableInvalidMac gets a reference to the given bool and assigns it to the UseEnableInvalidMac field.
func (o *MsserverDhcpServer) SetUseEnableInvalidMac(v bool) {
	o.UseEnableInvalidMac = &v
}

// GetEnableInvalidMac returns the EnableInvalidMac field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetEnableInvalidMac() bool {
	if o == nil || IsNil(o.EnableInvalidMac) {
		var ret bool
		return ret
	}
	return *o.EnableInvalidMac
}

// GetEnableInvalidMacOk returns a tuple with the EnableInvalidMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetEnableInvalidMacOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableInvalidMac) {
		return nil, false
	}
	return o.EnableInvalidMac, true
}

// HasEnableInvalidMac returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasEnableInvalidMac() bool {
	if o != nil && !IsNil(o.EnableInvalidMac) {
		return true
	}

	return false
}

// SetEnableInvalidMac gets a reference to the given bool and assigns it to the EnableInvalidMac field.
func (o *MsserverDhcpServer) SetEnableInvalidMac(v bool) {
	o.EnableInvalidMac = &v
}

// GetSupportsFailover returns the SupportsFailover field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetSupportsFailover() bool {
	if o == nil || IsNil(o.SupportsFailover) {
		var ret bool
		return ret
	}
	return *o.SupportsFailover
}

// GetSupportsFailoverOk returns a tuple with the SupportsFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetSupportsFailoverOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsFailover) {
		return nil, false
	}
	return o.SupportsFailover, true
}

// HasSupportsFailover returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasSupportsFailover() bool {
	if o != nil && !IsNil(o.SupportsFailover) {
		return true
	}

	return false
}

// SetSupportsFailover gets a reference to the given bool and assigns it to the SupportsFailover field.
func (o *MsserverDhcpServer) SetSupportsFailover(v bool) {
	o.SupportsFailover = &v
}

// GetUseSynchronizationMinDelay returns the UseSynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetUseSynchronizationMinDelay() bool {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationMinDelay
}

// GetUseSynchronizationMinDelayOk returns a tuple with the UseSynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetUseSynchronizationMinDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		return nil, false
	}
	return o.UseSynchronizationMinDelay, true
}

// HasUseSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasUseSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.UseSynchronizationMinDelay) {
		return true
	}

	return false
}

// SetUseSynchronizationMinDelay gets a reference to the given bool and assigns it to the UseSynchronizationMinDelay field.
func (o *MsserverDhcpServer) SetUseSynchronizationMinDelay(v bool) {
	o.UseSynchronizationMinDelay = &v
}

// GetSynchronizationMinDelay returns the SynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverDhcpServer) GetSynchronizationMinDelay() int64 {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		var ret int64
		return ret
	}
	return *o.SynchronizationMinDelay
}

// GetSynchronizationMinDelayOk returns a tuple with the SynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDhcpServer) GetSynchronizationMinDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		return nil, false
	}
	return o.SynchronizationMinDelay, true
}

// HasSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverDhcpServer) HasSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.SynchronizationMinDelay) {
		return true
	}

	return false
}

// SetSynchronizationMinDelay gets a reference to the given int64 and assigns it to the SynchronizationMinDelay field.
func (o *MsserverDhcpServer) SetSynchronizationMinDelay(v int64) {
	o.SynchronizationMinDelay = &v
}

func (o MsserverDhcpServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverDhcpServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.NextSyncControl) {
		toSerialize["next_sync_control"] = o.NextSyncControl
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusLastUpdated) {
		toSerialize["status_last_updated"] = o.StatusLastUpdated
	}
	if !IsNil(o.UseEnableMonitoring) {
		toSerialize["use_enable_monitoring"] = o.UseEnableMonitoring
	}
	if !IsNil(o.EnableMonitoring) {
		toSerialize["enable_monitoring"] = o.EnableMonitoring
	}
	if !IsNil(o.UseEnableInvalidMac) {
		toSerialize["use_enable_invalid_mac"] = o.UseEnableInvalidMac
	}
	if !IsNil(o.EnableInvalidMac) {
		toSerialize["enable_invalid_mac"] = o.EnableInvalidMac
	}
	if !IsNil(o.SupportsFailover) {
		toSerialize["supports_failover"] = o.SupportsFailover
	}
	if !IsNil(o.UseSynchronizationMinDelay) {
		toSerialize["use_synchronization_min_delay"] = o.UseSynchronizationMinDelay
	}
	if !IsNil(o.SynchronizationMinDelay) {
		toSerialize["synchronization_min_delay"] = o.SynchronizationMinDelay
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MsserverDhcpServer) UnmarshalJSON(data []byte) (err error) {
	varMsserverDhcpServer := _MsserverDhcpServer{}

	err = json.Unmarshal(data, &varMsserverDhcpServer)

	if err != nil {
		return err
	}

	*o = MsserverDhcpServer(varMsserverDhcpServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "use_login")
		delete(additionalProperties, "login_name")
		delete(additionalProperties, "login_password")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "next_sync_control")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_last_updated")
		delete(additionalProperties, "use_enable_monitoring")
		delete(additionalProperties, "enable_monitoring")
		delete(additionalProperties, "use_enable_invalid_mac")
		delete(additionalProperties, "enable_invalid_mac")
		delete(additionalProperties, "supports_failover")
		delete(additionalProperties, "use_synchronization_min_delay")
		delete(additionalProperties, "synchronization_min_delay")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMsserverDhcpServer struct {
	value *MsserverDhcpServer
	isSet bool
}

func (v NullableMsserverDhcpServer) Get() *MsserverDhcpServer {
	return v.value
}

func (v *NullableMsserverDhcpServer) Set(val *MsserverDhcpServer) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverDhcpServer) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverDhcpServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverDhcpServer(val *MsserverDhcpServer) *NullableMsserverDhcpServer {
	return &NullableMsserverDhcpServer{value: val, isSet: true}
}

func (v NullableMsserverDhcpServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverDhcpServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
