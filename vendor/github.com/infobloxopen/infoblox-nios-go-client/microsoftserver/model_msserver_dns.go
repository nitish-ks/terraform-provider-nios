/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverDns type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverDns{}

// MsserverDns struct for MsserverDns
type MsserverDns struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The address or FQDN of the DNS Microsoft Server.
	Address *string `json:"address,omitempty"`
	// Determines if synchronization of DNS reporting data from the Microsoft server is enabled or not.
	EnableDnsReportsSync *bool `json:"enable_dns_reports_sync,omitempty"`
	// The login name of the DNS Microsoft Server.
	LoginName *string `json:"login_name,omitempty"`
	// The login password of the DNS Microsoft Server.
	LoginPassword *string `json:"login_password,omitempty"`
	// The minimum number of minutes between two synchronizations.
	SynchronizationInterval *int64 `json:"synchronization_interval,omitempty"`
	// Use flag for: enable_dns_reports_sync
	UseEnableDnsReportsSync *bool `json:"use_enable_dns_reports_sync,omitempty"`
	// Use flag for: login_name , login_password
	UseLogin *bool `json:"use_login,omitempty"`
	// Use flag for: synchronization_interval
	UseSynchronizationInterval *bool `json:"use_synchronization_interval,omitempty"`
}

// NewMsserverDns instantiates a new MsserverDns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverDns() *MsserverDns {
	this := MsserverDns{}
	return &this
}

// NewMsserverDnsWithDefaults instantiates a new MsserverDns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverDnsWithDefaults() *MsserverDns {
	this := MsserverDns{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *MsserverDns) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *MsserverDns) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *MsserverDns) SetRef(v string) {
	o.Ref = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MsserverDns) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MsserverDns) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MsserverDns) SetAddress(v string) {
	o.Address = &v
}

// GetEnableDnsReportsSync returns the EnableDnsReportsSync field value if set, zero value otherwise.
func (o *MsserverDns) GetEnableDnsReportsSync() bool {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		var ret bool
		return ret
	}
	return *o.EnableDnsReportsSync
}

// GetEnableDnsReportsSyncOk returns a tuple with the EnableDnsReportsSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetEnableDnsReportsSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		return nil, false
	}
	return o.EnableDnsReportsSync, true
}

// HasEnableDnsReportsSync returns a boolean if a field has been set.
func (o *MsserverDns) HasEnableDnsReportsSync() bool {
	if o != nil && !IsNil(o.EnableDnsReportsSync) {
		return true
	}

	return false
}

// SetEnableDnsReportsSync gets a reference to the given bool and assigns it to the EnableDnsReportsSync field.
func (o *MsserverDns) SetEnableDnsReportsSync(v bool) {
	o.EnableDnsReportsSync = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverDns) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverDns) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverDns) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverDns) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverDns) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverDns) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetSynchronizationInterval returns the SynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverDns) GetSynchronizationInterval() int64 {
	if o == nil || IsNil(o.SynchronizationInterval) {
		var ret int64
		return ret
	}
	return *o.SynchronizationInterval
}

// GetSynchronizationIntervalOk returns a tuple with the SynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetSynchronizationIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationInterval) {
		return nil, false
	}
	return o.SynchronizationInterval, true
}

// HasSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverDns) HasSynchronizationInterval() bool {
	if o != nil && !IsNil(o.SynchronizationInterval) {
		return true
	}

	return false
}

// SetSynchronizationInterval gets a reference to the given int64 and assigns it to the SynchronizationInterval field.
func (o *MsserverDns) SetSynchronizationInterval(v int64) {
	o.SynchronizationInterval = &v
}

// GetUseEnableDnsReportsSync returns the UseEnableDnsReportsSync field value if set, zero value otherwise.
func (o *MsserverDns) GetUseEnableDnsReportsSync() bool {
	if o == nil || IsNil(o.UseEnableDnsReportsSync) {
		var ret bool
		return ret
	}
	return *o.UseEnableDnsReportsSync
}

// GetUseEnableDnsReportsSyncOk returns a tuple with the UseEnableDnsReportsSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetUseEnableDnsReportsSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDnsReportsSync) {
		return nil, false
	}
	return o.UseEnableDnsReportsSync, true
}

// HasUseEnableDnsReportsSync returns a boolean if a field has been set.
func (o *MsserverDns) HasUseEnableDnsReportsSync() bool {
	if o != nil && !IsNil(o.UseEnableDnsReportsSync) {
		return true
	}

	return false
}

// SetUseEnableDnsReportsSync gets a reference to the given bool and assigns it to the UseEnableDnsReportsSync field.
func (o *MsserverDns) SetUseEnableDnsReportsSync(v bool) {
	o.UseEnableDnsReportsSync = &v
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverDns) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverDns) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverDns) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetUseSynchronizationInterval returns the UseSynchronizationInterval field value if set, zero value otherwise.
func (o *MsserverDns) GetUseSynchronizationInterval() bool {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationInterval
}

// GetUseSynchronizationIntervalOk returns a tuple with the UseSynchronizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDns) GetUseSynchronizationIntervalOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationInterval) {
		return nil, false
	}
	return o.UseSynchronizationInterval, true
}

// HasUseSynchronizationInterval returns a boolean if a field has been set.
func (o *MsserverDns) HasUseSynchronizationInterval() bool {
	if o != nil && !IsNil(o.UseSynchronizationInterval) {
		return true
	}

	return false
}

// SetUseSynchronizationInterval gets a reference to the given bool and assigns it to the UseSynchronizationInterval field.
func (o *MsserverDns) SetUseSynchronizationInterval(v bool) {
	o.UseSynchronizationInterval = &v
}

func (o MsserverDns) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverDns) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.EnableDnsReportsSync) {
		toSerialize["enable_dns_reports_sync"] = o.EnableDnsReportsSync
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.SynchronizationInterval) {
		toSerialize["synchronization_interval"] = o.SynchronizationInterval
	}
	if !IsNil(o.UseEnableDnsReportsSync) {
		toSerialize["use_enable_dns_reports_sync"] = o.UseEnableDnsReportsSync
	}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.UseSynchronizationInterval) {
		toSerialize["use_synchronization_interval"] = o.UseSynchronizationInterval
	}
	return toSerialize, nil
}

type NullableMsserverDns struct {
	value *MsserverDns
	isSet bool
}

func (v NullableMsserverDns) Get() *MsserverDns {
	return v.value
}

func (v *NullableMsserverDns) Set(val *MsserverDns) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverDns) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverDns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverDns(val *MsserverDns) *NullableMsserverDns {
	return &NullableMsserverDns{value: val, isSet: true}
}

func (v NullableMsserverDns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverDns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
