/*
Infoblox MICROSOFTSERVER API

OpenAPI specification for Infoblox NIOS WAPI MICROSOFTSERVER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package microsoftserver

import (
	"encoding/json"
)

// checks if the MsserverDnsServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsserverDnsServer{}

// MsserverDnsServer struct for MsserverDnsServer
type MsserverDnsServer struct {
	// Flag to override login name and password from the MS Server
	UseLogin *bool `json:"use_login,omitempty"`
	// Microsoft Server login name
	LoginName *string `json:"login_name,omitempty"`
	// Microsoft Server login password
	LoginPassword *string `json:"login_password,omitempty"`
	// flag indicating if the DNS service is managed
	Managed *bool `json:"managed,omitempty"`
	// Defines what control to apply on the DNS server
	NextSyncControl *string `json:"next_sync_control,omitempty"`
	// Status of the Microsoft DNS Service
	Status *string `json:"status,omitempty"`
	// Detailed status of the DNS status
	StatusDetail *string `json:"status_detail,omitempty"`
	// Timestamp of the last update
	StatusLastUpdated *int64 `json:"status_last_updated,omitempty"`
	// Timestamp of the last synchronization attempt
	LastSyncTs *int64 `json:"last_sync_ts,omitempty"`
	// Status of the last synchronization attempt
	LastSyncStatus *string `json:"last_sync_status,omitempty"`
	// Detailled status of the last synchronization attempt
	LastSyncDetail *string `json:"last_sync_detail,omitempty"`
	// Ordered list of IP addresses to forward queries to
	Forwarders *string `json:"forwarders,omitempty"`
	// Flag indicating if the server supports IPv6
	SupportsIpv6 *bool `json:"supports_ipv6,omitempty"`
	// Flag indicating if the server supports reverse IPv6 zones
	SupportsIpv6Reverse *bool `json:"supports_ipv6_reverse,omitempty"`
	// Flag indicating if the server supports DNAME records
	SupportsRrDname *bool `json:"supports_rr_dname,omitempty"`
	// Flag indicating if the server supports
	SupportsDnssec *bool `json:"supports_dnssec,omitempty"`
	// Flag indicating if the server supports AD integrated zones
	SupportsActiveDirectory *bool `json:"supports_active_directory,omitempty"`
	// MS Server ip address
	Address *string `json:"address,omitempty"`
	// Flag indicating if the server supports NAPTR records
	SupportsRrNaptr *bool `json:"supports_rr_naptr,omitempty"`
	// Override enable monitoring inherited from grid level
	UseEnableMonitoring *bool `json:"use_enable_monitoring,omitempty"`
	// Flag indicating if the DNS service is monitored and controlled
	EnableMonitoring *bool `json:"enable_monitoring,omitempty"`
	// Flag to override synchronization interval from the MS Server
	UseSynchronizationMinDelay *bool `json:"use_synchronization_min_delay,omitempty"`
	// Minimum number of minutes between two synchronizations
	SynchronizationMinDelay *int64 `json:"synchronization_min_delay,omitempty"`
	// Override enable reports data inherited from grid level
	UseEnableDnsReportsSync *bool `json:"use_enable_dns_reports_sync,omitempty"`
	// Enable or Disable MS DNS data for reports from this MS Server
	EnableDnsReportsSync *bool `json:"enable_dns_reports_sync,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MsserverDnsServer MsserverDnsServer

// NewMsserverDnsServer instantiates a new MsserverDnsServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsserverDnsServer() *MsserverDnsServer {
	this := MsserverDnsServer{}
	return &this
}

// NewMsserverDnsServerWithDefaults instantiates a new MsserverDnsServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsserverDnsServerWithDefaults() *MsserverDnsServer {
	this := MsserverDnsServer{}
	return &this
}

// GetUseLogin returns the UseLogin field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetUseLogin() bool {
	if o == nil || IsNil(o.UseLogin) {
		var ret bool
		return ret
	}
	return *o.UseLogin
}

// GetUseLoginOk returns a tuple with the UseLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetUseLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLogin) {
		return nil, false
	}
	return o.UseLogin, true
}

// HasUseLogin returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasUseLogin() bool {
	if o != nil && !IsNil(o.UseLogin) {
		return true
	}

	return false
}

// SetUseLogin gets a reference to the given bool and assigns it to the UseLogin field.
func (o *MsserverDnsServer) SetUseLogin(v bool) {
	o.UseLogin = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *MsserverDnsServer) SetLoginName(v string) {
	o.LoginName = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetLoginPassword() string {
	if o == nil || IsNil(o.LoginPassword) {
		var ret string
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given string and assigns it to the LoginPassword field.
func (o *MsserverDnsServer) SetLoginPassword(v string) {
	o.LoginPassword = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *MsserverDnsServer) SetManaged(v bool) {
	o.Managed = &v
}

// GetNextSyncControl returns the NextSyncControl field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetNextSyncControl() string {
	if o == nil || IsNil(o.NextSyncControl) {
		var ret string
		return ret
	}
	return *o.NextSyncControl
}

// GetNextSyncControlOk returns a tuple with the NextSyncControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetNextSyncControlOk() (*string, bool) {
	if o == nil || IsNil(o.NextSyncControl) {
		return nil, false
	}
	return o.NextSyncControl, true
}

// HasNextSyncControl returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasNextSyncControl() bool {
	if o != nil && !IsNil(o.NextSyncControl) {
		return true
	}

	return false
}

// SetNextSyncControl gets a reference to the given string and assigns it to the NextSyncControl field.
func (o *MsserverDnsServer) SetNextSyncControl(v string) {
	o.NextSyncControl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MsserverDnsServer) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDetail returns the StatusDetail field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetStatusDetail() string {
	if o == nil || IsNil(o.StatusDetail) {
		var ret string
		return ret
	}
	return *o.StatusDetail
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetStatusDetailOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDetail) {
		return nil, false
	}
	return o.StatusDetail, true
}

// HasStatusDetail returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasStatusDetail() bool {
	if o != nil && !IsNil(o.StatusDetail) {
		return true
	}

	return false
}

// SetStatusDetail gets a reference to the given string and assigns it to the StatusDetail field.
func (o *MsserverDnsServer) SetStatusDetail(v string) {
	o.StatusDetail = &v
}

// GetStatusLastUpdated returns the StatusLastUpdated field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetStatusLastUpdated() int64 {
	if o == nil || IsNil(o.StatusLastUpdated) {
		var ret int64
		return ret
	}
	return *o.StatusLastUpdated
}

// GetStatusLastUpdatedOk returns a tuple with the StatusLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetStatusLastUpdatedOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusLastUpdated) {
		return nil, false
	}
	return o.StatusLastUpdated, true
}

// HasStatusLastUpdated returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasStatusLastUpdated() bool {
	if o != nil && !IsNil(o.StatusLastUpdated) {
		return true
	}

	return false
}

// SetStatusLastUpdated gets a reference to the given int64 and assigns it to the StatusLastUpdated field.
func (o *MsserverDnsServer) SetStatusLastUpdated(v int64) {
	o.StatusLastUpdated = &v
}

// GetLastSyncTs returns the LastSyncTs field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetLastSyncTs() int64 {
	if o == nil || IsNil(o.LastSyncTs) {
		var ret int64
		return ret
	}
	return *o.LastSyncTs
}

// GetLastSyncTsOk returns a tuple with the LastSyncTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetLastSyncTsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSyncTs) {
		return nil, false
	}
	return o.LastSyncTs, true
}

// HasLastSyncTs returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasLastSyncTs() bool {
	if o != nil && !IsNil(o.LastSyncTs) {
		return true
	}

	return false
}

// SetLastSyncTs gets a reference to the given int64 and assigns it to the LastSyncTs field.
func (o *MsserverDnsServer) SetLastSyncTs(v int64) {
	o.LastSyncTs = &v
}

// GetLastSyncStatus returns the LastSyncStatus field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetLastSyncStatus() string {
	if o == nil || IsNil(o.LastSyncStatus) {
		var ret string
		return ret
	}
	return *o.LastSyncStatus
}

// GetLastSyncStatusOk returns a tuple with the LastSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetLastSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncStatus) {
		return nil, false
	}
	return o.LastSyncStatus, true
}

// HasLastSyncStatus returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasLastSyncStatus() bool {
	if o != nil && !IsNil(o.LastSyncStatus) {
		return true
	}

	return false
}

// SetLastSyncStatus gets a reference to the given string and assigns it to the LastSyncStatus field.
func (o *MsserverDnsServer) SetLastSyncStatus(v string) {
	o.LastSyncStatus = &v
}

// GetLastSyncDetail returns the LastSyncDetail field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetLastSyncDetail() string {
	if o == nil || IsNil(o.LastSyncDetail) {
		var ret string
		return ret
	}
	return *o.LastSyncDetail
}

// GetLastSyncDetailOk returns a tuple with the LastSyncDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetLastSyncDetailOk() (*string, bool) {
	if o == nil || IsNil(o.LastSyncDetail) {
		return nil, false
	}
	return o.LastSyncDetail, true
}

// HasLastSyncDetail returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasLastSyncDetail() bool {
	if o != nil && !IsNil(o.LastSyncDetail) {
		return true
	}

	return false
}

// SetLastSyncDetail gets a reference to the given string and assigns it to the LastSyncDetail field.
func (o *MsserverDnsServer) SetLastSyncDetail(v string) {
	o.LastSyncDetail = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetForwarders() string {
	if o == nil || IsNil(o.Forwarders) {
		var ret string
		return ret
	}
	return *o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetForwardersOk() (*string, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given string and assigns it to the Forwarders field.
func (o *MsserverDnsServer) SetForwarders(v string) {
	o.Forwarders = &v
}

// GetSupportsIpv6 returns the SupportsIpv6 field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsIpv6() bool {
	if o == nil || IsNil(o.SupportsIpv6) {
		var ret bool
		return ret
	}
	return *o.SupportsIpv6
}

// GetSupportsIpv6Ok returns a tuple with the SupportsIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.SupportsIpv6) {
		return nil, false
	}
	return o.SupportsIpv6, true
}

// HasSupportsIpv6 returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsIpv6() bool {
	if o != nil && !IsNil(o.SupportsIpv6) {
		return true
	}

	return false
}

// SetSupportsIpv6 gets a reference to the given bool and assigns it to the SupportsIpv6 field.
func (o *MsserverDnsServer) SetSupportsIpv6(v bool) {
	o.SupportsIpv6 = &v
}

// GetSupportsIpv6Reverse returns the SupportsIpv6Reverse field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsIpv6Reverse() bool {
	if o == nil || IsNil(o.SupportsIpv6Reverse) {
		var ret bool
		return ret
	}
	return *o.SupportsIpv6Reverse
}

// GetSupportsIpv6ReverseOk returns a tuple with the SupportsIpv6Reverse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsIpv6ReverseOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsIpv6Reverse) {
		return nil, false
	}
	return o.SupportsIpv6Reverse, true
}

// HasSupportsIpv6Reverse returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsIpv6Reverse() bool {
	if o != nil && !IsNil(o.SupportsIpv6Reverse) {
		return true
	}

	return false
}

// SetSupportsIpv6Reverse gets a reference to the given bool and assigns it to the SupportsIpv6Reverse field.
func (o *MsserverDnsServer) SetSupportsIpv6Reverse(v bool) {
	o.SupportsIpv6Reverse = &v
}

// GetSupportsRrDname returns the SupportsRrDname field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsRrDname() bool {
	if o == nil || IsNil(o.SupportsRrDname) {
		var ret bool
		return ret
	}
	return *o.SupportsRrDname
}

// GetSupportsRrDnameOk returns a tuple with the SupportsRrDname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsRrDnameOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsRrDname) {
		return nil, false
	}
	return o.SupportsRrDname, true
}

// HasSupportsRrDname returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsRrDname() bool {
	if o != nil && !IsNil(o.SupportsRrDname) {
		return true
	}

	return false
}

// SetSupportsRrDname gets a reference to the given bool and assigns it to the SupportsRrDname field.
func (o *MsserverDnsServer) SetSupportsRrDname(v bool) {
	o.SupportsRrDname = &v
}

// GetSupportsDnssec returns the SupportsDnssec field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsDnssec() bool {
	if o == nil || IsNil(o.SupportsDnssec) {
		var ret bool
		return ret
	}
	return *o.SupportsDnssec
}

// GetSupportsDnssecOk returns a tuple with the SupportsDnssec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsDnssecOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDnssec) {
		return nil, false
	}
	return o.SupportsDnssec, true
}

// HasSupportsDnssec returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsDnssec() bool {
	if o != nil && !IsNil(o.SupportsDnssec) {
		return true
	}

	return false
}

// SetSupportsDnssec gets a reference to the given bool and assigns it to the SupportsDnssec field.
func (o *MsserverDnsServer) SetSupportsDnssec(v bool) {
	o.SupportsDnssec = &v
}

// GetSupportsActiveDirectory returns the SupportsActiveDirectory field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsActiveDirectory() bool {
	if o == nil || IsNil(o.SupportsActiveDirectory) {
		var ret bool
		return ret
	}
	return *o.SupportsActiveDirectory
}

// GetSupportsActiveDirectoryOk returns a tuple with the SupportsActiveDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsActiveDirectoryOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsActiveDirectory) {
		return nil, false
	}
	return o.SupportsActiveDirectory, true
}

// HasSupportsActiveDirectory returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsActiveDirectory() bool {
	if o != nil && !IsNil(o.SupportsActiveDirectory) {
		return true
	}

	return false
}

// SetSupportsActiveDirectory gets a reference to the given bool and assigns it to the SupportsActiveDirectory field.
func (o *MsserverDnsServer) SetSupportsActiveDirectory(v bool) {
	o.SupportsActiveDirectory = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *MsserverDnsServer) SetAddress(v string) {
	o.Address = &v
}

// GetSupportsRrNaptr returns the SupportsRrNaptr field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSupportsRrNaptr() bool {
	if o == nil || IsNil(o.SupportsRrNaptr) {
		var ret bool
		return ret
	}
	return *o.SupportsRrNaptr
}

// GetSupportsRrNaptrOk returns a tuple with the SupportsRrNaptr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSupportsRrNaptrOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsRrNaptr) {
		return nil, false
	}
	return o.SupportsRrNaptr, true
}

// HasSupportsRrNaptr returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSupportsRrNaptr() bool {
	if o != nil && !IsNil(o.SupportsRrNaptr) {
		return true
	}

	return false
}

// SetSupportsRrNaptr gets a reference to the given bool and assigns it to the SupportsRrNaptr field.
func (o *MsserverDnsServer) SetSupportsRrNaptr(v bool) {
	o.SupportsRrNaptr = &v
}

// GetUseEnableMonitoring returns the UseEnableMonitoring field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetUseEnableMonitoring() bool {
	if o == nil || IsNil(o.UseEnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.UseEnableMonitoring
}

// GetUseEnableMonitoringOk returns a tuple with the UseEnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetUseEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableMonitoring) {
		return nil, false
	}
	return o.UseEnableMonitoring, true
}

// HasUseEnableMonitoring returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasUseEnableMonitoring() bool {
	if o != nil && !IsNil(o.UseEnableMonitoring) {
		return true
	}

	return false
}

// SetUseEnableMonitoring gets a reference to the given bool and assigns it to the UseEnableMonitoring field.
func (o *MsserverDnsServer) SetUseEnableMonitoring(v bool) {
	o.UseEnableMonitoring = &v
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetEnableMonitoring() bool {
	if o == nil || IsNil(o.EnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableMonitoring
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetEnableMonitoringOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMonitoring) {
		return nil, false
	}
	return o.EnableMonitoring, true
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasEnableMonitoring() bool {
	if o != nil && !IsNil(o.EnableMonitoring) {
		return true
	}

	return false
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *MsserverDnsServer) SetEnableMonitoring(v bool) {
	o.EnableMonitoring = &v
}

// GetUseSynchronizationMinDelay returns the UseSynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetUseSynchronizationMinDelay() bool {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		var ret bool
		return ret
	}
	return *o.UseSynchronizationMinDelay
}

// GetUseSynchronizationMinDelayOk returns a tuple with the UseSynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetUseSynchronizationMinDelayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSynchronizationMinDelay) {
		return nil, false
	}
	return o.UseSynchronizationMinDelay, true
}

// HasUseSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasUseSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.UseSynchronizationMinDelay) {
		return true
	}

	return false
}

// SetUseSynchronizationMinDelay gets a reference to the given bool and assigns it to the UseSynchronizationMinDelay field.
func (o *MsserverDnsServer) SetUseSynchronizationMinDelay(v bool) {
	o.UseSynchronizationMinDelay = &v
}

// GetSynchronizationMinDelay returns the SynchronizationMinDelay field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetSynchronizationMinDelay() int64 {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		var ret int64
		return ret
	}
	return *o.SynchronizationMinDelay
}

// GetSynchronizationMinDelayOk returns a tuple with the SynchronizationMinDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetSynchronizationMinDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.SynchronizationMinDelay) {
		return nil, false
	}
	return o.SynchronizationMinDelay, true
}

// HasSynchronizationMinDelay returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasSynchronizationMinDelay() bool {
	if o != nil && !IsNil(o.SynchronizationMinDelay) {
		return true
	}

	return false
}

// SetSynchronizationMinDelay gets a reference to the given int64 and assigns it to the SynchronizationMinDelay field.
func (o *MsserverDnsServer) SetSynchronizationMinDelay(v int64) {
	o.SynchronizationMinDelay = &v
}

// GetUseEnableDnsReportsSync returns the UseEnableDnsReportsSync field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetUseEnableDnsReportsSync() bool {
	if o == nil || IsNil(o.UseEnableDnsReportsSync) {
		var ret bool
		return ret
	}
	return *o.UseEnableDnsReportsSync
}

// GetUseEnableDnsReportsSyncOk returns a tuple with the UseEnableDnsReportsSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetUseEnableDnsReportsSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.UseEnableDnsReportsSync) {
		return nil, false
	}
	return o.UseEnableDnsReportsSync, true
}

// HasUseEnableDnsReportsSync returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasUseEnableDnsReportsSync() bool {
	if o != nil && !IsNil(o.UseEnableDnsReportsSync) {
		return true
	}

	return false
}

// SetUseEnableDnsReportsSync gets a reference to the given bool and assigns it to the UseEnableDnsReportsSync field.
func (o *MsserverDnsServer) SetUseEnableDnsReportsSync(v bool) {
	o.UseEnableDnsReportsSync = &v
}

// GetEnableDnsReportsSync returns the EnableDnsReportsSync field value if set, zero value otherwise.
func (o *MsserverDnsServer) GetEnableDnsReportsSync() bool {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		var ret bool
		return ret
	}
	return *o.EnableDnsReportsSync
}

// GetEnableDnsReportsSyncOk returns a tuple with the EnableDnsReportsSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsserverDnsServer) GetEnableDnsReportsSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDnsReportsSync) {
		return nil, false
	}
	return o.EnableDnsReportsSync, true
}

// HasEnableDnsReportsSync returns a boolean if a field has been set.
func (o *MsserverDnsServer) HasEnableDnsReportsSync() bool {
	if o != nil && !IsNil(o.EnableDnsReportsSync) {
		return true
	}

	return false
}

// SetEnableDnsReportsSync gets a reference to the given bool and assigns it to the EnableDnsReportsSync field.
func (o *MsserverDnsServer) SetEnableDnsReportsSync(v bool) {
	o.EnableDnsReportsSync = &v
}

func (o MsserverDnsServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsserverDnsServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseLogin) {
		toSerialize["use_login"] = o.UseLogin
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.NextSyncControl) {
		toSerialize["next_sync_control"] = o.NextSyncControl
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDetail) {
		toSerialize["status_detail"] = o.StatusDetail
	}
	if !IsNil(o.StatusLastUpdated) {
		toSerialize["status_last_updated"] = o.StatusLastUpdated
	}
	if !IsNil(o.LastSyncTs) {
		toSerialize["last_sync_ts"] = o.LastSyncTs
	}
	if !IsNil(o.LastSyncStatus) {
		toSerialize["last_sync_status"] = o.LastSyncStatus
	}
	if !IsNil(o.LastSyncDetail) {
		toSerialize["last_sync_detail"] = o.LastSyncDetail
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.SupportsIpv6) {
		toSerialize["supports_ipv6"] = o.SupportsIpv6
	}
	if !IsNil(o.SupportsIpv6Reverse) {
		toSerialize["supports_ipv6_reverse"] = o.SupportsIpv6Reverse
	}
	if !IsNil(o.SupportsRrDname) {
		toSerialize["supports_rr_dname"] = o.SupportsRrDname
	}
	if !IsNil(o.SupportsDnssec) {
		toSerialize["supports_dnssec"] = o.SupportsDnssec
	}
	if !IsNil(o.SupportsActiveDirectory) {
		toSerialize["supports_active_directory"] = o.SupportsActiveDirectory
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.SupportsRrNaptr) {
		toSerialize["supports_rr_naptr"] = o.SupportsRrNaptr
	}
	if !IsNil(o.UseEnableMonitoring) {
		toSerialize["use_enable_monitoring"] = o.UseEnableMonitoring
	}
	if !IsNil(o.EnableMonitoring) {
		toSerialize["enable_monitoring"] = o.EnableMonitoring
	}
	if !IsNil(o.UseSynchronizationMinDelay) {
		toSerialize["use_synchronization_min_delay"] = o.UseSynchronizationMinDelay
	}
	if !IsNil(o.SynchronizationMinDelay) {
		toSerialize["synchronization_min_delay"] = o.SynchronizationMinDelay
	}
	if !IsNil(o.UseEnableDnsReportsSync) {
		toSerialize["use_enable_dns_reports_sync"] = o.UseEnableDnsReportsSync
	}
	if !IsNil(o.EnableDnsReportsSync) {
		toSerialize["enable_dns_reports_sync"] = o.EnableDnsReportsSync
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MsserverDnsServer) UnmarshalJSON(data []byte) (err error) {
	varMsserverDnsServer := _MsserverDnsServer{}

	err = json.Unmarshal(data, &varMsserverDnsServer)

	if err != nil {
		return err
	}

	*o = MsserverDnsServer(varMsserverDnsServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "use_login")
		delete(additionalProperties, "login_name")
		delete(additionalProperties, "login_password")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "next_sync_control")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_detail")
		delete(additionalProperties, "status_last_updated")
		delete(additionalProperties, "last_sync_ts")
		delete(additionalProperties, "last_sync_status")
		delete(additionalProperties, "last_sync_detail")
		delete(additionalProperties, "forwarders")
		delete(additionalProperties, "supports_ipv6")
		delete(additionalProperties, "supports_ipv6_reverse")
		delete(additionalProperties, "supports_rr_dname")
		delete(additionalProperties, "supports_dnssec")
		delete(additionalProperties, "supports_active_directory")
		delete(additionalProperties, "address")
		delete(additionalProperties, "supports_rr_naptr")
		delete(additionalProperties, "use_enable_monitoring")
		delete(additionalProperties, "enable_monitoring")
		delete(additionalProperties, "use_synchronization_min_delay")
		delete(additionalProperties, "synchronization_min_delay")
		delete(additionalProperties, "use_enable_dns_reports_sync")
		delete(additionalProperties, "enable_dns_reports_sync")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMsserverDnsServer struct {
	value *MsserverDnsServer
	isSet bool
}

func (v NullableMsserverDnsServer) Get() *MsserverDnsServer {
	return v.value
}

func (v *NullableMsserverDnsServer) Set(val *MsserverDnsServer) {
	v.value = val
	v.isSet = true
}

func (v NullableMsserverDnsServer) IsSet() bool {
	return v.isSet
}

func (v *NullableMsserverDnsServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsserverDnsServer(val *MsserverDnsServer) *NullableMsserverDnsServer {
	return &NullableMsserverDnsServer{value: val, isSet: true}
}

func (v NullableMsserverDnsServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsserverDnsServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
