/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the Dbsnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbsnapshot{}

// Dbsnapshot struct for Dbsnapshot
type Dbsnapshot struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// The time when the latest OneDB snapshot was taken in Epoch seconds format.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewDbsnapshot instantiates a new Dbsnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbsnapshot() *Dbsnapshot {
	this := Dbsnapshot{}
	return &this
}

// NewDbsnapshotWithDefaults instantiates a new Dbsnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbsnapshotWithDefaults() *Dbsnapshot {
	this := Dbsnapshot{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Dbsnapshot) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnapshot) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Dbsnapshot) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Dbsnapshot) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Dbsnapshot) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnapshot) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Dbsnapshot) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Dbsnapshot) SetComment(v string) {
	o.Comment = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Dbsnapshot) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbsnapshot) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Dbsnapshot) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Dbsnapshot) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o Dbsnapshot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbsnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableDbsnapshot struct {
	value *Dbsnapshot
	isSet bool
}

func (v NullableDbsnapshot) Get() *Dbsnapshot {
	return v.value
}

func (v *NullableDbsnapshot) Set(val *Dbsnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDbsnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDbsnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbsnapshot(val *Dbsnapshot) *NullableDbsnapshot {
	return &NullableDbsnapshot{value: val, isSet: true}
}

func (v NullableDbsnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbsnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
