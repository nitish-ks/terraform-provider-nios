/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetAllendpointsResponse - struct for GetAllendpointsResponse
type GetAllendpointsResponse struct {
	Allendpoints                          *Allendpoints
	GetAllendpointsResponseObjectAsResult *GetAllendpointsResponseObjectAsResult
}

// AllendpointsAsGetAllendpointsResponse is a convenience function that returns Allendpoints wrapped in GetAllendpointsResponse
func AllendpointsAsGetAllendpointsResponse(v *Allendpoints) GetAllendpointsResponse {
	return GetAllendpointsResponse{
		Allendpoints: v,
	}
}

// GetAllendpointsResponseObjectAsResultAsGetAllendpointsResponse is a convenience function that returns GetAllendpointsResponseObjectAsResult wrapped in GetAllendpointsResponse
func GetAllendpointsResponseObjectAsResultAsGetAllendpointsResponse(v *GetAllendpointsResponseObjectAsResult) GetAllendpointsResponse {
	return GetAllendpointsResponse{
		GetAllendpointsResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAllendpointsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Allendpoints
	err = newStrictDecoder(data).Decode(&dst.Allendpoints)
	if err == nil {
		jsonAllendpoints, _ := json.Marshal(dst.Allendpoints)
		if string(jsonAllendpoints) == "{}" { // empty struct
			dst.Allendpoints = nil
		} else {
			match++
		}
	} else {
		dst.Allendpoints = nil
	}

	// try to unmarshal data into GetAllendpointsResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetAllendpointsResponseObjectAsResult)
	if err == nil {
		jsonGetAllendpointsResponseObjectAsResult, _ := json.Marshal(dst.GetAllendpointsResponseObjectAsResult)
		if string(jsonGetAllendpointsResponseObjectAsResult) == "{}" { // empty struct
			dst.GetAllendpointsResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetAllendpointsResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Allendpoints = nil
		dst.GetAllendpointsResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAllendpointsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAllendpointsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAllendpointsResponse) MarshalJSON() ([]byte, error) {
	if src.Allendpoints != nil {
		return json.Marshal(&src.Allendpoints)
	}

	if src.GetAllendpointsResponseObjectAsResult != nil {
		return json.Marshal(&src.GetAllendpointsResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAllendpointsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Allendpoints != nil {
		return obj.Allendpoints
	}

	if obj.GetAllendpointsResponseObjectAsResult != nil {
		return obj.GetAllendpointsResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetAllendpointsResponse struct {
	value *GetAllendpointsResponse
	isSet bool
}

func (v NullableGetAllendpointsResponse) Get() *GetAllendpointsResponse {
	return v.value
}

func (v *NullableGetAllendpointsResponse) Set(val *GetAllendpointsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllendpointsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllendpointsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllendpointsResponse(val *GetAllendpointsResponse) *NullableGetAllendpointsResponse {
	return &NullableGetAllendpointsResponse{value: val, isSet: true}
}

func (v NullableGetAllendpointsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllendpointsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
