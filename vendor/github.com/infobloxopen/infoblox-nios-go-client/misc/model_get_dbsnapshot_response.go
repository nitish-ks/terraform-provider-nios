/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetDbsnapshotResponse - struct for GetDbsnapshotResponse
type GetDbsnapshotResponse struct {
	Dbsnapshot                          *Dbsnapshot
	GetDbsnapshotResponseObjectAsResult *GetDbsnapshotResponseObjectAsResult
}

// DbsnapshotAsGetDbsnapshotResponse is a convenience function that returns Dbsnapshot wrapped in GetDbsnapshotResponse
func DbsnapshotAsGetDbsnapshotResponse(v *Dbsnapshot) GetDbsnapshotResponse {
	return GetDbsnapshotResponse{
		Dbsnapshot: v,
	}
}

// GetDbsnapshotResponseObjectAsResultAsGetDbsnapshotResponse is a convenience function that returns GetDbsnapshotResponseObjectAsResult wrapped in GetDbsnapshotResponse
func GetDbsnapshotResponseObjectAsResultAsGetDbsnapshotResponse(v *GetDbsnapshotResponseObjectAsResult) GetDbsnapshotResponse {
	return GetDbsnapshotResponse{
		GetDbsnapshotResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDbsnapshotResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Dbsnapshot
	err = newStrictDecoder(data).Decode(&dst.Dbsnapshot)
	if err == nil {
		jsonDbsnapshot, _ := json.Marshal(dst.Dbsnapshot)
		if string(jsonDbsnapshot) == "{}" { // empty struct
			dst.Dbsnapshot = nil
		} else {
			match++
		}
	} else {
		dst.Dbsnapshot = nil
	}

	// try to unmarshal data into GetDbsnapshotResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDbsnapshotResponseObjectAsResult)
	if err == nil {
		jsonGetDbsnapshotResponseObjectAsResult, _ := json.Marshal(dst.GetDbsnapshotResponseObjectAsResult)
		if string(jsonGetDbsnapshotResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDbsnapshotResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDbsnapshotResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Dbsnapshot = nil
		dst.GetDbsnapshotResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDbsnapshotResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDbsnapshotResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDbsnapshotResponse) MarshalJSON() ([]byte, error) {
	if src.Dbsnapshot != nil {
		return json.Marshal(&src.Dbsnapshot)
	}

	if src.GetDbsnapshotResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDbsnapshotResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDbsnapshotResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Dbsnapshot != nil {
		return obj.Dbsnapshot
	}

	if obj.GetDbsnapshotResponseObjectAsResult != nil {
		return obj.GetDbsnapshotResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDbsnapshotResponse struct {
	value *GetDbsnapshotResponse
	isSet bool
}

func (v NullableGetDbsnapshotResponse) Get() *GetDbsnapshotResponse {
	return v.value
}

func (v *NullableGetDbsnapshotResponse) Set(val *GetDbsnapshotResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDbsnapshotResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDbsnapshotResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDbsnapshotResponse(val *GetDbsnapshotResponse) *NullableGetDbsnapshotResponse {
	return &NullableGetDbsnapshotResponse{value: val, isSet: true}
}

func (v NullableGetDbsnapshotResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDbsnapshotResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
