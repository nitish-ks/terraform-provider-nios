/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetDxlEndpointResponse - struct for GetDxlEndpointResponse
type GetDxlEndpointResponse struct {
	DxlEndpoint                          *DxlEndpoint
	GetDxlEndpointResponseObjectAsResult *GetDxlEndpointResponseObjectAsResult
}

// DxlEndpointAsGetDxlEndpointResponse is a convenience function that returns DxlEndpoint wrapped in GetDxlEndpointResponse
func DxlEndpointAsGetDxlEndpointResponse(v *DxlEndpoint) GetDxlEndpointResponse {
	return GetDxlEndpointResponse{
		DxlEndpoint: v,
	}
}

// GetDxlEndpointResponseObjectAsResultAsGetDxlEndpointResponse is a convenience function that returns GetDxlEndpointResponseObjectAsResult wrapped in GetDxlEndpointResponse
func GetDxlEndpointResponseObjectAsResultAsGetDxlEndpointResponse(v *GetDxlEndpointResponseObjectAsResult) GetDxlEndpointResponse {
	return GetDxlEndpointResponse{
		GetDxlEndpointResponseObjectAsResult: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDxlEndpointResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DxlEndpoint
	err = newStrictDecoder(data).Decode(&dst.DxlEndpoint)
	if err == nil {
		jsonDxlEndpoint, _ := json.Marshal(dst.DxlEndpoint)
		if string(jsonDxlEndpoint) == "{}" { // empty struct
			dst.DxlEndpoint = nil
		} else {
			match++
		}
	} else {
		dst.DxlEndpoint = nil
	}

	// try to unmarshal data into GetDxlEndpointResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetDxlEndpointResponseObjectAsResult)
	if err == nil {
		jsonGetDxlEndpointResponseObjectAsResult, _ := json.Marshal(dst.GetDxlEndpointResponseObjectAsResult)
		if string(jsonGetDxlEndpointResponseObjectAsResult) == "{}" { // empty struct
			dst.GetDxlEndpointResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetDxlEndpointResponseObjectAsResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DxlEndpoint = nil
		dst.GetDxlEndpointResponseObjectAsResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDxlEndpointResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDxlEndpointResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDxlEndpointResponse) MarshalJSON() ([]byte, error) {
	if src.DxlEndpoint != nil {
		return json.Marshal(&src.DxlEndpoint)
	}

	if src.GetDxlEndpointResponseObjectAsResult != nil {
		return json.Marshal(&src.GetDxlEndpointResponseObjectAsResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDxlEndpointResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DxlEndpoint != nil {
		return obj.DxlEndpoint
	}

	if obj.GetDxlEndpointResponseObjectAsResult != nil {
		return obj.GetDxlEndpointResponseObjectAsResult
	}

	// all schemas are nil
	return nil
}

type NullableGetDxlEndpointResponse struct {
	value *GetDxlEndpointResponse
	isSet bool
}

func (v NullableGetDxlEndpointResponse) Get() *GetDxlEndpointResponse {
	return v.value
}

func (v *NullableGetDxlEndpointResponse) Set(val *GetDxlEndpointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDxlEndpointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDxlEndpointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDxlEndpointResponse(val *GetDxlEndpointResponse) *NullableGetDxlEndpointResponse {
	return &NullableGetDxlEndpointResponse{value: val, isSet: true}
}

func (v NullableGetDxlEndpointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDxlEndpointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
