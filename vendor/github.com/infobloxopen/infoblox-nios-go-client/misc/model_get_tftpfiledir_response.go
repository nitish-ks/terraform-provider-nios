/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// GetTftpfiledirResponse - struct for GetTftpfiledirResponse
type GetTftpfiledirResponse struct {
	GetTftpfiledirResponseObjectAsResult *GetTftpfiledirResponseObjectAsResult
	Tftpfiledir                          *Tftpfiledir
}

// GetTftpfiledirResponseObjectAsResultAsGetTftpfiledirResponse is a convenience function that returns GetTftpfiledirResponseObjectAsResult wrapped in GetTftpfiledirResponse
func GetTftpfiledirResponseObjectAsResultAsGetTftpfiledirResponse(v *GetTftpfiledirResponseObjectAsResult) GetTftpfiledirResponse {
	return GetTftpfiledirResponse{
		GetTftpfiledirResponseObjectAsResult: v,
	}
}

// TftpfiledirAsGetTftpfiledirResponse is a convenience function that returns Tftpfiledir wrapped in GetTftpfiledirResponse
func TftpfiledirAsGetTftpfiledirResponse(v *Tftpfiledir) GetTftpfiledirResponse {
	return GetTftpfiledirResponse{
		Tftpfiledir: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTftpfiledirResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetTftpfiledirResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetTftpfiledirResponseObjectAsResult)
	if err == nil {
		jsonGetTftpfiledirResponseObjectAsResult, _ := json.Marshal(dst.GetTftpfiledirResponseObjectAsResult)
		if string(jsonGetTftpfiledirResponseObjectAsResult) == "{}" { // empty struct
			dst.GetTftpfiledirResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetTftpfiledirResponseObjectAsResult = nil
	}

	// try to unmarshal data into Tftpfiledir
	err = newStrictDecoder(data).Decode(&dst.Tftpfiledir)
	if err == nil {
		jsonTftpfiledir, _ := json.Marshal(dst.Tftpfiledir)
		if string(jsonTftpfiledir) == "{}" { // empty struct
			dst.Tftpfiledir = nil
		} else {
			match++
		}
	} else {
		dst.Tftpfiledir = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetTftpfiledirResponseObjectAsResult = nil
		dst.Tftpfiledir = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetTftpfiledirResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetTftpfiledirResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTftpfiledirResponse) MarshalJSON() ([]byte, error) {
	if src.GetTftpfiledirResponseObjectAsResult != nil {
		return json.Marshal(&src.GetTftpfiledirResponseObjectAsResult)
	}

	if src.Tftpfiledir != nil {
		return json.Marshal(&src.Tftpfiledir)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTftpfiledirResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetTftpfiledirResponseObjectAsResult != nil {
		return obj.GetTftpfiledirResponseObjectAsResult
	}

	if obj.Tftpfiledir != nil {
		return obj.Tftpfiledir
	}

	// all schemas are nil
	return nil
}

type NullableGetTftpfiledirResponse struct {
	value *GetTftpfiledirResponse
	isSet bool
}

func (v NullableGetTftpfiledirResponse) Get() *GetTftpfiledirResponse {
	return v.value
}

func (v *NullableGetTftpfiledirResponse) Set(val *GetTftpfiledirResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTftpfiledirResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTftpfiledirResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTftpfiledirResponse(val *GetTftpfiledirResponse) *NullableGetTftpfiledirResponse {
	return &NullableGetTftpfiledirResponse{value: val, isSet: true}
}

func (v NullableGetTftpfiledirResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTftpfiledirResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
