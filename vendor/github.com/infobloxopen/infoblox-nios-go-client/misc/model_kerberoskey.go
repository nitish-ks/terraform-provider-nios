/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the Kerberoskey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kerberoskey{}

// Kerberoskey struct for Kerberoskey
type Kerberoskey struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The Kerberos domain name.
	Domain *string `json:"domain,omitempty"`
	// The Kerberos key encryption type.
	Enctype *string `json:"enctype,omitempty"`
	// Determines whether the Kerberos key is assigned to the Grid or Grid member.
	InUse *bool `json:"in_use,omitempty"`
	// The list of hostnames and services of Grid members where the key is assigned or Grid/DHCP4 or Grid/DHCP6 or Grid/DNS.
	Members []string `json:"members,omitempty"`
	// The principal of the Kerberos key object.
	Principal *string `json:"principal,omitempty"`
	// The timestamp of the Kerberos key upload operation.
	UploadTimestamp *int64 `json:"upload_timestamp,omitempty"`
	// The Kerberos key version number (KVNO).
	Version *int64 `json:"version,omitempty"`
}

// NewKerberoskey instantiates a new Kerberoskey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberoskey() *Kerberoskey {
	this := Kerberoskey{}
	return &this
}

// NewKerberoskeyWithDefaults instantiates a new Kerberoskey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberoskeyWithDefaults() *Kerberoskey {
	this := Kerberoskey{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Kerberoskey) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Kerberoskey) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Kerberoskey) SetRef(v string) {
	o.Ref = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Kerberoskey) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Kerberoskey) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Kerberoskey) SetDomain(v string) {
	o.Domain = &v
}

// GetEnctype returns the Enctype field value if set, zero value otherwise.
func (o *Kerberoskey) GetEnctype() string {
	if o == nil || IsNil(o.Enctype) {
		var ret string
		return ret
	}
	return *o.Enctype
}

// GetEnctypeOk returns a tuple with the Enctype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetEnctypeOk() (*string, bool) {
	if o == nil || IsNil(o.Enctype) {
		return nil, false
	}
	return o.Enctype, true
}

// HasEnctype returns a boolean if a field has been set.
func (o *Kerberoskey) HasEnctype() bool {
	if o != nil && !IsNil(o.Enctype) {
		return true
	}

	return false
}

// SetEnctype gets a reference to the given string and assigns it to the Enctype field.
func (o *Kerberoskey) SetEnctype(v string) {
	o.Enctype = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *Kerberoskey) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *Kerberoskey) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *Kerberoskey) SetInUse(v bool) {
	o.InUse = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Kerberoskey) GetMembers() []string {
	if o == nil || IsNil(o.Members) {
		var ret []string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Kerberoskey) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *Kerberoskey) SetMembers(v []string) {
	o.Members = v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *Kerberoskey) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *Kerberoskey) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *Kerberoskey) SetPrincipal(v string) {
	o.Principal = &v
}

// GetUploadTimestamp returns the UploadTimestamp field value if set, zero value otherwise.
func (o *Kerberoskey) GetUploadTimestamp() int64 {
	if o == nil || IsNil(o.UploadTimestamp) {
		var ret int64
		return ret
	}
	return *o.UploadTimestamp
}

// GetUploadTimestampOk returns a tuple with the UploadTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetUploadTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadTimestamp) {
		return nil, false
	}
	return o.UploadTimestamp, true
}

// HasUploadTimestamp returns a boolean if a field has been set.
func (o *Kerberoskey) HasUploadTimestamp() bool {
	if o != nil && !IsNil(o.UploadTimestamp) {
		return true
	}

	return false
}

// SetUploadTimestamp gets a reference to the given int64 and assigns it to the UploadTimestamp field.
func (o *Kerberoskey) SetUploadTimestamp(v int64) {
	o.UploadTimestamp = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Kerberoskey) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kerberoskey) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Kerberoskey) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Kerberoskey) SetVersion(v int64) {
	o.Version = &v
}

func (o Kerberoskey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kerberoskey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Enctype) {
		toSerialize["enctype"] = o.Enctype
	}
	if !IsNil(o.InUse) {
		toSerialize["in_use"] = o.InUse
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.UploadTimestamp) {
		toSerialize["upload_timestamp"] = o.UploadTimestamp
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableKerberoskey struct {
	value *Kerberoskey
	isSet bool
}

func (v NullableKerberoskey) Get() *Kerberoskey {
	return v.value
}

func (v *NullableKerberoskey) Set(val *Kerberoskey) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberoskey) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberoskey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberoskey(val *Kerberoskey) *NullableKerberoskey {
	return &NullableKerberoskey{value: val, isSet: true}
}

func (v NullableKerberoskey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberoskey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
