/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListAllendpointsResponse - struct for ListAllendpointsResponse
type ListAllendpointsResponse struct {
	ListAllendpointsResponseObject *ListAllendpointsResponseObject
	ArrayOfAllendpoints            *[]Allendpoints
}

// ListAllendpointsResponseObjectAsListAllendpointsResponse is a convenience function that returns ListAllendpointsResponseObject wrapped in ListAllendpointsResponse
func ListAllendpointsResponseObjectAsListAllendpointsResponse(v *ListAllendpointsResponseObject) ListAllendpointsResponse {
	return ListAllendpointsResponse{
		ListAllendpointsResponseObject: v,
	}
}

// []AllendpointsAsListAllendpointsResponse is a convenience function that returns []Allendpoints wrapped in ListAllendpointsResponse
func ArrayOfAllendpointsAsListAllendpointsResponse(v *[]Allendpoints) ListAllendpointsResponse {
	return ListAllendpointsResponse{
		ArrayOfAllendpoints: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListAllendpointsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListAllendpointsResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListAllendpointsResponseObject)
	if err == nil {
		jsonListAllendpointsResponseObject, _ := json.Marshal(dst.ListAllendpointsResponseObject)
		if string(jsonListAllendpointsResponseObject) == "{}" { // empty struct
			dst.ListAllendpointsResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListAllendpointsResponseObject = nil
	}

	// try to unmarshal data into ArrayOfAllendpoints
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAllendpoints)
	if err == nil {
		jsonArrayOfAllendpoints, _ := json.Marshal(dst.ArrayOfAllendpoints)
		if string(jsonArrayOfAllendpoints) == "{}" { // empty struct
			dst.ArrayOfAllendpoints = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfAllendpoints = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListAllendpointsResponseObject = nil
		dst.ArrayOfAllendpoints = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListAllendpointsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListAllendpointsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListAllendpointsResponse) MarshalJSON() ([]byte, error) {
	if src.ListAllendpointsResponseObject != nil {
		return json.Marshal(&src.ListAllendpointsResponseObject)
	}

	if src.ArrayOfAllendpoints != nil {
		return json.Marshal(&src.ArrayOfAllendpoints)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListAllendpointsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListAllendpointsResponseObject != nil {
		return obj.ListAllendpointsResponseObject
	}

	if obj.ArrayOfAllendpoints != nil {
		return obj.ArrayOfAllendpoints
	}

	// all schemas are nil
	return nil
}

type NullableListAllendpointsResponse struct {
	value *ListAllendpointsResponse
	isSet bool
}

func (v NullableListAllendpointsResponse) Get() *ListAllendpointsResponse {
	return v.value
}

func (v *NullableListAllendpointsResponse) Set(val *ListAllendpointsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllendpointsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllendpointsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllendpointsResponse(val *ListAllendpointsResponse) *NullableListAllendpointsResponse {
	return &NullableListAllendpointsResponse{value: val, isSet: true}
}

func (v NullableListAllendpointsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllendpointsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
