/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListDxlEndpointResponse - struct for ListDxlEndpointResponse
type ListDxlEndpointResponse struct {
	ListDxlEndpointResponseObject *ListDxlEndpointResponseObject
	ArrayOfDxlEndpoint            *[]DxlEndpoint
}

// ListDxlEndpointResponseObjectAsListDxlEndpointResponse is a convenience function that returns ListDxlEndpointResponseObject wrapped in ListDxlEndpointResponse
func ListDxlEndpointResponseObjectAsListDxlEndpointResponse(v *ListDxlEndpointResponseObject) ListDxlEndpointResponse {
	return ListDxlEndpointResponse{
		ListDxlEndpointResponseObject: v,
	}
}

// []DxlEndpointAsListDxlEndpointResponse is a convenience function that returns []DxlEndpoint wrapped in ListDxlEndpointResponse
func ArrayOfDxlEndpointAsListDxlEndpointResponse(v *[]DxlEndpoint) ListDxlEndpointResponse {
	return ListDxlEndpointResponse{
		ArrayOfDxlEndpoint: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListDxlEndpointResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListDxlEndpointResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListDxlEndpointResponseObject)
	if err == nil {
		jsonListDxlEndpointResponseObject, _ := json.Marshal(dst.ListDxlEndpointResponseObject)
		if string(jsonListDxlEndpointResponseObject) == "{}" { // empty struct
			dst.ListDxlEndpointResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListDxlEndpointResponseObject = nil
	}

	// try to unmarshal data into ArrayOfDxlEndpoint
	err = newStrictDecoder(data).Decode(&dst.ArrayOfDxlEndpoint)
	if err == nil {
		jsonArrayOfDxlEndpoint, _ := json.Marshal(dst.ArrayOfDxlEndpoint)
		if string(jsonArrayOfDxlEndpoint) == "{}" { // empty struct
			dst.ArrayOfDxlEndpoint = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfDxlEndpoint = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListDxlEndpointResponseObject = nil
		dst.ArrayOfDxlEndpoint = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListDxlEndpointResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListDxlEndpointResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListDxlEndpointResponse) MarshalJSON() ([]byte, error) {
	if src.ListDxlEndpointResponseObject != nil {
		return json.Marshal(&src.ListDxlEndpointResponseObject)
	}

	if src.ArrayOfDxlEndpoint != nil {
		return json.Marshal(&src.ArrayOfDxlEndpoint)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListDxlEndpointResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListDxlEndpointResponseObject != nil {
		return obj.ListDxlEndpointResponseObject
	}

	if obj.ArrayOfDxlEndpoint != nil {
		return obj.ArrayOfDxlEndpoint
	}

	// all schemas are nil
	return nil
}

type NullableListDxlEndpointResponse struct {
	value *ListDxlEndpointResponse
	isSet bool
}

func (v NullableListDxlEndpointResponse) Get() *ListDxlEndpointResponse {
	return v.value
}

func (v *NullableListDxlEndpointResponse) Set(val *ListDxlEndpointResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListDxlEndpointResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListDxlEndpointResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDxlEndpointResponse(val *ListDxlEndpointResponse) *NullableListDxlEndpointResponse {
	return &NullableListDxlEndpointResponse{value: val, isSet: true}
}

func (v NullableListDxlEndpointResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDxlEndpointResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
