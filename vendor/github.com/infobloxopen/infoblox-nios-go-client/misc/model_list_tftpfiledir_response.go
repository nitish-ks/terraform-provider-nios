/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// ListTftpfiledirResponse - struct for ListTftpfiledirResponse
type ListTftpfiledirResponse struct {
	ListTftpfiledirResponseObject *ListTftpfiledirResponseObject
	ArrayOfTftpfiledir            *[]Tftpfiledir
}

// ListTftpfiledirResponseObjectAsListTftpfiledirResponse is a convenience function that returns ListTftpfiledirResponseObject wrapped in ListTftpfiledirResponse
func ListTftpfiledirResponseObjectAsListTftpfiledirResponse(v *ListTftpfiledirResponseObject) ListTftpfiledirResponse {
	return ListTftpfiledirResponse{
		ListTftpfiledirResponseObject: v,
	}
}

// []TftpfiledirAsListTftpfiledirResponse is a convenience function that returns []Tftpfiledir wrapped in ListTftpfiledirResponse
func ArrayOfTftpfiledirAsListTftpfiledirResponse(v *[]Tftpfiledir) ListTftpfiledirResponse {
	return ListTftpfiledirResponse{
		ArrayOfTftpfiledir: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTftpfiledirResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTftpfiledirResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListTftpfiledirResponseObject)
	if err == nil {
		jsonListTftpfiledirResponseObject, _ := json.Marshal(dst.ListTftpfiledirResponseObject)
		if string(jsonListTftpfiledirResponseObject) == "{}" { // empty struct
			dst.ListTftpfiledirResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListTftpfiledirResponseObject = nil
	}

	// try to unmarshal data into ArrayOfTftpfiledir
	err = newStrictDecoder(data).Decode(&dst.ArrayOfTftpfiledir)
	if err == nil {
		jsonArrayOfTftpfiledir, _ := json.Marshal(dst.ArrayOfTftpfiledir)
		if string(jsonArrayOfTftpfiledir) == "{}" { // empty struct
			dst.ArrayOfTftpfiledir = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfTftpfiledir = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTftpfiledirResponseObject = nil
		dst.ArrayOfTftpfiledir = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListTftpfiledirResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListTftpfiledirResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTftpfiledirResponse) MarshalJSON() ([]byte, error) {
	if src.ListTftpfiledirResponseObject != nil {
		return json.Marshal(&src.ListTftpfiledirResponseObject)
	}

	if src.ArrayOfTftpfiledir != nil {
		return json.Marshal(&src.ArrayOfTftpfiledir)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTftpfiledirResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListTftpfiledirResponseObject != nil {
		return obj.ListTftpfiledirResponseObject
	}

	if obj.ArrayOfTftpfiledir != nil {
		return obj.ArrayOfTftpfiledir
	}

	// all schemas are nil
	return nil
}

type NullableListTftpfiledirResponse struct {
	value *ListTftpfiledirResponse
	isSet bool
}

func (v NullableListTftpfiledirResponse) Get() *ListTftpfiledirResponse {
	return v.value
}

func (v *NullableListTftpfiledirResponse) Set(val *ListTftpfiledirResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTftpfiledirResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTftpfiledirResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTftpfiledirResponse(val *ListTftpfiledirResponse) *NullableListTftpfiledirResponse {
	return &NullableListTftpfiledirResponse{value: val, isSet: true}
}

func (v NullableListTftpfiledirResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTftpfiledirResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
