/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the Ruleset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ruleset{}

// Ruleset struct for Ruleset
type Ruleset struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// Descriptive comment about the Ruleset object.
	Comment *string `json:"comment,omitempty"`
	// The flag that indicates if the Ruleset object is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// The name of this Ruleset object.
	Name *string `json:"name,omitempty"`
	// The list of Rules assigned to this Ruleset object. Rules can be set only when the Ruleset type is set to \"NXDOMAIN\".
	NxdomainRules []RulesetNxdomainRules `json:"nxdomain_rules,omitempty"`
	// The type of this Ruleset object.
	Type *string `json:"type,omitempty"`
}

// NewRuleset instantiates a new Ruleset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleset() *Ruleset {
	this := Ruleset{}
	return &this
}

// NewRulesetWithDefaults instantiates a new Ruleset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesetWithDefaults() *Ruleset {
	this := Ruleset{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Ruleset) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Ruleset) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Ruleset) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Ruleset) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Ruleset) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Ruleset) SetComment(v string) {
	o.Comment = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Ruleset) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Ruleset) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Ruleset) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Ruleset) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ruleset) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ruleset) SetName(v string) {
	o.Name = &v
}

// GetNxdomainRules returns the NxdomainRules field value if set, zero value otherwise.
func (o *Ruleset) GetNxdomainRules() []RulesetNxdomainRules {
	if o == nil || IsNil(o.NxdomainRules) {
		var ret []RulesetNxdomainRules
		return ret
	}
	return o.NxdomainRules
}

// GetNxdomainRulesOk returns a tuple with the NxdomainRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetNxdomainRulesOk() ([]RulesetNxdomainRules, bool) {
	if o == nil || IsNil(o.NxdomainRules) {
		return nil, false
	}
	return o.NxdomainRules, true
}

// HasNxdomainRules returns a boolean if a field has been set.
func (o *Ruleset) HasNxdomainRules() bool {
	if o != nil && !IsNil(o.NxdomainRules) {
		return true
	}

	return false
}

// SetNxdomainRules gets a reference to the given []RulesetNxdomainRules and assigns it to the NxdomainRules field.
func (o *Ruleset) SetNxdomainRules(v []RulesetNxdomainRules) {
	o.NxdomainRules = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Ruleset) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ruleset) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Ruleset) SetType(v string) {
	o.Type = &v
}

func (o Ruleset) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ruleset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NxdomainRules) {
		toSerialize["nxdomain_rules"] = o.NxdomainRules
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRuleset struct {
	value *Ruleset
	isSet bool
}

func (v NullableRuleset) Get() *Ruleset {
	return v.value
}

func (v *NullableRuleset) Set(val *Ruleset) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleset) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleset(val *Ruleset) *NullableRuleset {
	return &NullableRuleset{value: val, isSet: true}
}

func (v NullableRuleset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
