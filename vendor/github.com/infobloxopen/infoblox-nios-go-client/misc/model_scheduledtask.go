/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the Scheduledtask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scheduledtask{}

// Scheduledtask struct for Scheduledtask
type Scheduledtask struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The approval status of the task.
	ApprovalStatus *string `json:"approval_status,omitempty"`
	// The approver of the task.
	Approver *string `json:"approver,omitempty"`
	// The comment specified by the approver of the task.
	ApproverComment *string `json:"approver_comment,omitempty"`
	// Indicates whether there will be an automatic restart when the appliance executes the task.
	AutomaticRestart *bool `json:"automatic_restart,omitempty"`
	// A list of objects that are affected by the task.
	ChangedObjects []ScheduledtaskChangedObjects `json:"changed_objects,omitempty"`
	// If this scheduled task has dependent tasks, their references will be returned in this field.
	DependentTasks []string `json:"dependent_tasks,omitempty"`
	// If this field is set to True the specified task will be executed immediately.
	ExecuteNow *bool `json:"execute_now,omitempty"`
	// Messages generated by the execution of the scheduled task after its completion.
	ExecutionDetails []string `json:"execution_details,omitempty"`
	// The type of details generated by the execution of the scheduled task after its completion.
	ExecutionDetailsType *string `json:"execution_details_type,omitempty"`
	// The execution status of the task.
	ExecutionStatus *string `json:"execution_status,omitempty"`
	// The time when the appliance executed the task.
	ExecutionTime *int64 `json:"execution_time,omitempty"`
	// Indicates whether this is a Network Insight scheduled task.
	IsNetworkInsightTask *bool `json:"is_network_insight_task,omitempty"`
	// The member where this task was created.
	Member *string `json:"member,omitempty"`
	// If this scheduled task has a predecessor task set, its reference will be returned in this field.
	PredecessorTask *string `json:"predecessor_task,omitempty"`
	// If set to True, if the scheduled task is a Network Insight task and it failed, a new task will be cloned from this task and re-executed.
	ReExecuteTask *bool `json:"re_execute_task,omitempty"`
	// The time when the task is scheduled to occur.
	ScheduledTime *int64 `json:"scheduled_time,omitempty"`
	// The time when the task was submitted.
	SubmitTime *int64 `json:"submit_time,omitempty"`
	// The submitter of the task.
	Submitter *string `json:"submitter,omitempty"`
	// The comment specified by the submitter of the task.
	SubmitterComment *string `json:"submitter_comment,omitempty"`
	// The task ID.
	TaskId *int64 `json:"task_id,omitempty"`
	// The task type.
	TaskType *string `json:"task_type,omitempty"`
	// The task ticket number.
	TicketNumber *string `json:"ticket_number,omitempty"`
}

// NewScheduledtask instantiates a new Scheduledtask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledtask() *Scheduledtask {
	this := Scheduledtask{}
	return &this
}

// NewScheduledtaskWithDefaults instantiates a new Scheduledtask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledtaskWithDefaults() *Scheduledtask {
	this := Scheduledtask{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Scheduledtask) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Scheduledtask) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Scheduledtask) SetRef(v string) {
	o.Ref = &v
}

// GetApprovalStatus returns the ApprovalStatus field value if set, zero value otherwise.
func (o *Scheduledtask) GetApprovalStatus() string {
	if o == nil || IsNil(o.ApprovalStatus) {
		var ret string
		return ret
	}
	return *o.ApprovalStatus
}

// GetApprovalStatusOk returns a tuple with the ApprovalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetApprovalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalStatus) {
		return nil, false
	}
	return o.ApprovalStatus, true
}

// HasApprovalStatus returns a boolean if a field has been set.
func (o *Scheduledtask) HasApprovalStatus() bool {
	if o != nil && !IsNil(o.ApprovalStatus) {
		return true
	}

	return false
}

// SetApprovalStatus gets a reference to the given string and assigns it to the ApprovalStatus field.
func (o *Scheduledtask) SetApprovalStatus(v string) {
	o.ApprovalStatus = &v
}

// GetApprover returns the Approver field value if set, zero value otherwise.
func (o *Scheduledtask) GetApprover() string {
	if o == nil || IsNil(o.Approver) {
		var ret string
		return ret
	}
	return *o.Approver
}

// GetApproverOk returns a tuple with the Approver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetApproverOk() (*string, bool) {
	if o == nil || IsNil(o.Approver) {
		return nil, false
	}
	return o.Approver, true
}

// HasApprover returns a boolean if a field has been set.
func (o *Scheduledtask) HasApprover() bool {
	if o != nil && !IsNil(o.Approver) {
		return true
	}

	return false
}

// SetApprover gets a reference to the given string and assigns it to the Approver field.
func (o *Scheduledtask) SetApprover(v string) {
	o.Approver = &v
}

// GetApproverComment returns the ApproverComment field value if set, zero value otherwise.
func (o *Scheduledtask) GetApproverComment() string {
	if o == nil || IsNil(o.ApproverComment) {
		var ret string
		return ret
	}
	return *o.ApproverComment
}

// GetApproverCommentOk returns a tuple with the ApproverComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetApproverCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ApproverComment) {
		return nil, false
	}
	return o.ApproverComment, true
}

// HasApproverComment returns a boolean if a field has been set.
func (o *Scheduledtask) HasApproverComment() bool {
	if o != nil && !IsNil(o.ApproverComment) {
		return true
	}

	return false
}

// SetApproverComment gets a reference to the given string and assigns it to the ApproverComment field.
func (o *Scheduledtask) SetApproverComment(v string) {
	o.ApproverComment = &v
}

// GetAutomaticRestart returns the AutomaticRestart field value if set, zero value otherwise.
func (o *Scheduledtask) GetAutomaticRestart() bool {
	if o == nil || IsNil(o.AutomaticRestart) {
		var ret bool
		return ret
	}
	return *o.AutomaticRestart
}

// GetAutomaticRestartOk returns a tuple with the AutomaticRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetAutomaticRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticRestart) {
		return nil, false
	}
	return o.AutomaticRestart, true
}

// HasAutomaticRestart returns a boolean if a field has been set.
func (o *Scheduledtask) HasAutomaticRestart() bool {
	if o != nil && !IsNil(o.AutomaticRestart) {
		return true
	}

	return false
}

// SetAutomaticRestart gets a reference to the given bool and assigns it to the AutomaticRestart field.
func (o *Scheduledtask) SetAutomaticRestart(v bool) {
	o.AutomaticRestart = &v
}

// GetChangedObjects returns the ChangedObjects field value if set, zero value otherwise.
func (o *Scheduledtask) GetChangedObjects() []ScheduledtaskChangedObjects {
	if o == nil || IsNil(o.ChangedObjects) {
		var ret []ScheduledtaskChangedObjects
		return ret
	}
	return o.ChangedObjects
}

// GetChangedObjectsOk returns a tuple with the ChangedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetChangedObjectsOk() ([]ScheduledtaskChangedObjects, bool) {
	if o == nil || IsNil(o.ChangedObjects) {
		return nil, false
	}
	return o.ChangedObjects, true
}

// HasChangedObjects returns a boolean if a field has been set.
func (o *Scheduledtask) HasChangedObjects() bool {
	if o != nil && !IsNil(o.ChangedObjects) {
		return true
	}

	return false
}

// SetChangedObjects gets a reference to the given []ScheduledtaskChangedObjects and assigns it to the ChangedObjects field.
func (o *Scheduledtask) SetChangedObjects(v []ScheduledtaskChangedObjects) {
	o.ChangedObjects = v
}

// GetDependentTasks returns the DependentTasks field value if set, zero value otherwise.
func (o *Scheduledtask) GetDependentTasks() []string {
	if o == nil || IsNil(o.DependentTasks) {
		var ret []string
		return ret
	}
	return o.DependentTasks
}

// GetDependentTasksOk returns a tuple with the DependentTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetDependentTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.DependentTasks) {
		return nil, false
	}
	return o.DependentTasks, true
}

// HasDependentTasks returns a boolean if a field has been set.
func (o *Scheduledtask) HasDependentTasks() bool {
	if o != nil && !IsNil(o.DependentTasks) {
		return true
	}

	return false
}

// SetDependentTasks gets a reference to the given []string and assigns it to the DependentTasks field.
func (o *Scheduledtask) SetDependentTasks(v []string) {
	o.DependentTasks = v
}

// GetExecuteNow returns the ExecuteNow field value if set, zero value otherwise.
func (o *Scheduledtask) GetExecuteNow() bool {
	if o == nil || IsNil(o.ExecuteNow) {
		var ret bool
		return ret
	}
	return *o.ExecuteNow
}

// GetExecuteNowOk returns a tuple with the ExecuteNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetExecuteNowOk() (*bool, bool) {
	if o == nil || IsNil(o.ExecuteNow) {
		return nil, false
	}
	return o.ExecuteNow, true
}

// HasExecuteNow returns a boolean if a field has been set.
func (o *Scheduledtask) HasExecuteNow() bool {
	if o != nil && !IsNil(o.ExecuteNow) {
		return true
	}

	return false
}

// SetExecuteNow gets a reference to the given bool and assigns it to the ExecuteNow field.
func (o *Scheduledtask) SetExecuteNow(v bool) {
	o.ExecuteNow = &v
}

// GetExecutionDetails returns the ExecutionDetails field value if set, zero value otherwise.
func (o *Scheduledtask) GetExecutionDetails() []string {
	if o == nil || IsNil(o.ExecutionDetails) {
		var ret []string
		return ret
	}
	return o.ExecutionDetails
}

// GetExecutionDetailsOk returns a tuple with the ExecutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetExecutionDetailsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExecutionDetails) {
		return nil, false
	}
	return o.ExecutionDetails, true
}

// HasExecutionDetails returns a boolean if a field has been set.
func (o *Scheduledtask) HasExecutionDetails() bool {
	if o != nil && !IsNil(o.ExecutionDetails) {
		return true
	}

	return false
}

// SetExecutionDetails gets a reference to the given []string and assigns it to the ExecutionDetails field.
func (o *Scheduledtask) SetExecutionDetails(v []string) {
	o.ExecutionDetails = v
}

// GetExecutionDetailsType returns the ExecutionDetailsType field value if set, zero value otherwise.
func (o *Scheduledtask) GetExecutionDetailsType() string {
	if o == nil || IsNil(o.ExecutionDetailsType) {
		var ret string
		return ret
	}
	return *o.ExecutionDetailsType
}

// GetExecutionDetailsTypeOk returns a tuple with the ExecutionDetailsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetExecutionDetailsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionDetailsType) {
		return nil, false
	}
	return o.ExecutionDetailsType, true
}

// HasExecutionDetailsType returns a boolean if a field has been set.
func (o *Scheduledtask) HasExecutionDetailsType() bool {
	if o != nil && !IsNil(o.ExecutionDetailsType) {
		return true
	}

	return false
}

// SetExecutionDetailsType gets a reference to the given string and assigns it to the ExecutionDetailsType field.
func (o *Scheduledtask) SetExecutionDetailsType(v string) {
	o.ExecutionDetailsType = &v
}

// GetExecutionStatus returns the ExecutionStatus field value if set, zero value otherwise.
func (o *Scheduledtask) GetExecutionStatus() string {
	if o == nil || IsNil(o.ExecutionStatus) {
		var ret string
		return ret
	}
	return *o.ExecutionStatus
}

// GetExecutionStatusOk returns a tuple with the ExecutionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetExecutionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionStatus) {
		return nil, false
	}
	return o.ExecutionStatus, true
}

// HasExecutionStatus returns a boolean if a field has been set.
func (o *Scheduledtask) HasExecutionStatus() bool {
	if o != nil && !IsNil(o.ExecutionStatus) {
		return true
	}

	return false
}

// SetExecutionStatus gets a reference to the given string and assigns it to the ExecutionStatus field.
func (o *Scheduledtask) SetExecutionStatus(v string) {
	o.ExecutionStatus = &v
}

// GetExecutionTime returns the ExecutionTime field value if set, zero value otherwise.
func (o *Scheduledtask) GetExecutionTime() int64 {
	if o == nil || IsNil(o.ExecutionTime) {
		var ret int64
		return ret
	}
	return *o.ExecutionTime
}

// GetExecutionTimeOk returns a tuple with the ExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetExecutionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExecutionTime) {
		return nil, false
	}
	return o.ExecutionTime, true
}

// HasExecutionTime returns a boolean if a field has been set.
func (o *Scheduledtask) HasExecutionTime() bool {
	if o != nil && !IsNil(o.ExecutionTime) {
		return true
	}

	return false
}

// SetExecutionTime gets a reference to the given int64 and assigns it to the ExecutionTime field.
func (o *Scheduledtask) SetExecutionTime(v int64) {
	o.ExecutionTime = &v
}

// GetIsNetworkInsightTask returns the IsNetworkInsightTask field value if set, zero value otherwise.
func (o *Scheduledtask) GetIsNetworkInsightTask() bool {
	if o == nil || IsNil(o.IsNetworkInsightTask) {
		var ret bool
		return ret
	}
	return *o.IsNetworkInsightTask
}

// GetIsNetworkInsightTaskOk returns a tuple with the IsNetworkInsightTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetIsNetworkInsightTaskOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNetworkInsightTask) {
		return nil, false
	}
	return o.IsNetworkInsightTask, true
}

// HasIsNetworkInsightTask returns a boolean if a field has been set.
func (o *Scheduledtask) HasIsNetworkInsightTask() bool {
	if o != nil && !IsNil(o.IsNetworkInsightTask) {
		return true
	}

	return false
}

// SetIsNetworkInsightTask gets a reference to the given bool and assigns it to the IsNetworkInsightTask field.
func (o *Scheduledtask) SetIsNetworkInsightTask(v bool) {
	o.IsNetworkInsightTask = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Scheduledtask) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Scheduledtask) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *Scheduledtask) SetMember(v string) {
	o.Member = &v
}

// GetPredecessorTask returns the PredecessorTask field value if set, zero value otherwise.
func (o *Scheduledtask) GetPredecessorTask() string {
	if o == nil || IsNil(o.PredecessorTask) {
		var ret string
		return ret
	}
	return *o.PredecessorTask
}

// GetPredecessorTaskOk returns a tuple with the PredecessorTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetPredecessorTaskOk() (*string, bool) {
	if o == nil || IsNil(o.PredecessorTask) {
		return nil, false
	}
	return o.PredecessorTask, true
}

// HasPredecessorTask returns a boolean if a field has been set.
func (o *Scheduledtask) HasPredecessorTask() bool {
	if o != nil && !IsNil(o.PredecessorTask) {
		return true
	}

	return false
}

// SetPredecessorTask gets a reference to the given string and assigns it to the PredecessorTask field.
func (o *Scheduledtask) SetPredecessorTask(v string) {
	o.PredecessorTask = &v
}

// GetReExecuteTask returns the ReExecuteTask field value if set, zero value otherwise.
func (o *Scheduledtask) GetReExecuteTask() bool {
	if o == nil || IsNil(o.ReExecuteTask) {
		var ret bool
		return ret
	}
	return *o.ReExecuteTask
}

// GetReExecuteTaskOk returns a tuple with the ReExecuteTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetReExecuteTaskOk() (*bool, bool) {
	if o == nil || IsNil(o.ReExecuteTask) {
		return nil, false
	}
	return o.ReExecuteTask, true
}

// HasReExecuteTask returns a boolean if a field has been set.
func (o *Scheduledtask) HasReExecuteTask() bool {
	if o != nil && !IsNil(o.ReExecuteTask) {
		return true
	}

	return false
}

// SetReExecuteTask gets a reference to the given bool and assigns it to the ReExecuteTask field.
func (o *Scheduledtask) SetReExecuteTask(v bool) {
	o.ReExecuteTask = &v
}

// GetScheduledTime returns the ScheduledTime field value if set, zero value otherwise.
func (o *Scheduledtask) GetScheduledTime() int64 {
	if o == nil || IsNil(o.ScheduledTime) {
		var ret int64
		return ret
	}
	return *o.ScheduledTime
}

// GetScheduledTimeOk returns a tuple with the ScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetScheduledTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ScheduledTime) {
		return nil, false
	}
	return o.ScheduledTime, true
}

// HasScheduledTime returns a boolean if a field has been set.
func (o *Scheduledtask) HasScheduledTime() bool {
	if o != nil && !IsNil(o.ScheduledTime) {
		return true
	}

	return false
}

// SetScheduledTime gets a reference to the given int64 and assigns it to the ScheduledTime field.
func (o *Scheduledtask) SetScheduledTime(v int64) {
	o.ScheduledTime = &v
}

// GetSubmitTime returns the SubmitTime field value if set, zero value otherwise.
func (o *Scheduledtask) GetSubmitTime() int64 {
	if o == nil || IsNil(o.SubmitTime) {
		var ret int64
		return ret
	}
	return *o.SubmitTime
}

// GetSubmitTimeOk returns a tuple with the SubmitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetSubmitTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.SubmitTime) {
		return nil, false
	}
	return o.SubmitTime, true
}

// HasSubmitTime returns a boolean if a field has been set.
func (o *Scheduledtask) HasSubmitTime() bool {
	if o != nil && !IsNil(o.SubmitTime) {
		return true
	}

	return false
}

// SetSubmitTime gets a reference to the given int64 and assigns it to the SubmitTime field.
func (o *Scheduledtask) SetSubmitTime(v int64) {
	o.SubmitTime = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *Scheduledtask) GetSubmitter() string {
	if o == nil || IsNil(o.Submitter) {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetSubmitterOk() (*string, bool) {
	if o == nil || IsNil(o.Submitter) {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *Scheduledtask) HasSubmitter() bool {
	if o != nil && !IsNil(o.Submitter) {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *Scheduledtask) SetSubmitter(v string) {
	o.Submitter = &v
}

// GetSubmitterComment returns the SubmitterComment field value if set, zero value otherwise.
func (o *Scheduledtask) GetSubmitterComment() string {
	if o == nil || IsNil(o.SubmitterComment) {
		var ret string
		return ret
	}
	return *o.SubmitterComment
}

// GetSubmitterCommentOk returns a tuple with the SubmitterComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetSubmitterCommentOk() (*string, bool) {
	if o == nil || IsNil(o.SubmitterComment) {
		return nil, false
	}
	return o.SubmitterComment, true
}

// HasSubmitterComment returns a boolean if a field has been set.
func (o *Scheduledtask) HasSubmitterComment() bool {
	if o != nil && !IsNil(o.SubmitterComment) {
		return true
	}

	return false
}

// SetSubmitterComment gets a reference to the given string and assigns it to the SubmitterComment field.
func (o *Scheduledtask) SetSubmitterComment(v string) {
	o.SubmitterComment = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *Scheduledtask) GetTaskId() int64 {
	if o == nil || IsNil(o.TaskId) {
		var ret int64
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetTaskIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *Scheduledtask) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int64 and assigns it to the TaskId field.
func (o *Scheduledtask) SetTaskId(v int64) {
	o.TaskId = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *Scheduledtask) GetTaskType() string {
	if o == nil || IsNil(o.TaskType) {
		var ret string
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetTaskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaskType) {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *Scheduledtask) HasTaskType() bool {
	if o != nil && !IsNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given string and assigns it to the TaskType field.
func (o *Scheduledtask) SetTaskType(v string) {
	o.TaskType = &v
}

// GetTicketNumber returns the TicketNumber field value if set, zero value otherwise.
func (o *Scheduledtask) GetTicketNumber() string {
	if o == nil || IsNil(o.TicketNumber) {
		var ret string
		return ret
	}
	return *o.TicketNumber
}

// GetTicketNumberOk returns a tuple with the TicketNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduledtask) GetTicketNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TicketNumber) {
		return nil, false
	}
	return o.TicketNumber, true
}

// HasTicketNumber returns a boolean if a field has been set.
func (o *Scheduledtask) HasTicketNumber() bool {
	if o != nil && !IsNil(o.TicketNumber) {
		return true
	}

	return false
}

// SetTicketNumber gets a reference to the given string and assigns it to the TicketNumber field.
func (o *Scheduledtask) SetTicketNumber(v string) {
	o.TicketNumber = &v
}

func (o Scheduledtask) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scheduledtask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.ApprovalStatus) {
		toSerialize["approval_status"] = o.ApprovalStatus
	}
	if !IsNil(o.Approver) {
		toSerialize["approver"] = o.Approver
	}
	if !IsNil(o.ApproverComment) {
		toSerialize["approver_comment"] = o.ApproverComment
	}
	if !IsNil(o.AutomaticRestart) {
		toSerialize["automatic_restart"] = o.AutomaticRestart
	}
	if !IsNil(o.ChangedObjects) {
		toSerialize["changed_objects"] = o.ChangedObjects
	}
	if !IsNil(o.DependentTasks) {
		toSerialize["dependent_tasks"] = o.DependentTasks
	}
	if !IsNil(o.ExecuteNow) {
		toSerialize["execute_now"] = o.ExecuteNow
	}
	if !IsNil(o.ExecutionDetails) {
		toSerialize["execution_details"] = o.ExecutionDetails
	}
	if !IsNil(o.ExecutionDetailsType) {
		toSerialize["execution_details_type"] = o.ExecutionDetailsType
	}
	if !IsNil(o.ExecutionStatus) {
		toSerialize["execution_status"] = o.ExecutionStatus
	}
	if !IsNil(o.ExecutionTime) {
		toSerialize["execution_time"] = o.ExecutionTime
	}
	if !IsNil(o.IsNetworkInsightTask) {
		toSerialize["is_network_insight_task"] = o.IsNetworkInsightTask
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.PredecessorTask) {
		toSerialize["predecessor_task"] = o.PredecessorTask
	}
	if !IsNil(o.ReExecuteTask) {
		toSerialize["re_execute_task"] = o.ReExecuteTask
	}
	if !IsNil(o.ScheduledTime) {
		toSerialize["scheduled_time"] = o.ScheduledTime
	}
	if !IsNil(o.SubmitTime) {
		toSerialize["submit_time"] = o.SubmitTime
	}
	if !IsNil(o.Submitter) {
		toSerialize["submitter"] = o.Submitter
	}
	if !IsNil(o.SubmitterComment) {
		toSerialize["submitter_comment"] = o.SubmitterComment
	}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	if !IsNil(o.TaskType) {
		toSerialize["task_type"] = o.TaskType
	}
	if !IsNil(o.TicketNumber) {
		toSerialize["ticket_number"] = o.TicketNumber
	}
	return toSerialize, nil
}

type NullableScheduledtask struct {
	value *Scheduledtask
	isSet bool
}

func (v NullableScheduledtask) Get() *Scheduledtask {
	return v.value
}

func (v *NullableScheduledtask) Set(val *Scheduledtask) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledtask) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledtask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledtask(val *Scheduledtask) *NullableScheduledtask {
	return &NullableScheduledtask{value: val, isSet: true}
}

func (v NullableScheduledtask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledtask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
