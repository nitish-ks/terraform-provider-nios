/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
)

// checks if the ScheduledtaskChangedObjects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledtaskChangedObjects{}

// ScheduledtaskChangedObjects struct for ScheduledtaskChangedObjects
type ScheduledtaskChangedObjects struct {
	// This is a description of the action that is applied to this object.
	Action *string `json:"action,omitempty"`
	// The object name.
	Name *string `json:"name,omitempty"`
	// A value of the object type, this may contain objects that are not yet available in WAPI.
	Type *string `json:"type,omitempty"`
	// The object type. This is undefined if the object is not yet supported.
	ObjectType *string `json:"object_type,omitempty"`
	// A list of properties that are being changed.
	Properties           []string `json:"properties,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScheduledtaskChangedObjects ScheduledtaskChangedObjects

// NewScheduledtaskChangedObjects instantiates a new ScheduledtaskChangedObjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledtaskChangedObjects() *ScheduledtaskChangedObjects {
	this := ScheduledtaskChangedObjects{}
	return &this
}

// NewScheduledtaskChangedObjectsWithDefaults instantiates a new ScheduledtaskChangedObjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledtaskChangedObjectsWithDefaults() *ScheduledtaskChangedObjects {
	this := ScheduledtaskChangedObjects{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ScheduledtaskChangedObjects) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledtaskChangedObjects) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ScheduledtaskChangedObjects) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ScheduledtaskChangedObjects) SetAction(v string) {
	o.Action = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScheduledtaskChangedObjects) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledtaskChangedObjects) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScheduledtaskChangedObjects) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScheduledtaskChangedObjects) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScheduledtaskChangedObjects) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledtaskChangedObjects) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScheduledtaskChangedObjects) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScheduledtaskChangedObjects) SetType(v string) {
	o.Type = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ScheduledtaskChangedObjects) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledtaskChangedObjects) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ScheduledtaskChangedObjects) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *ScheduledtaskChangedObjects) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ScheduledtaskChangedObjects) GetProperties() []string {
	if o == nil || IsNil(o.Properties) {
		var ret []string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledtaskChangedObjects) GetPropertiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ScheduledtaskChangedObjects) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []string and assigns it to the Properties field.
func (o *ScheduledtaskChangedObjects) SetProperties(v []string) {
	o.Properties = v
}

func (o ScheduledtaskChangedObjects) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledtaskChangedObjects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScheduledtaskChangedObjects) UnmarshalJSON(data []byte) (err error) {
	varScheduledtaskChangedObjects := _ScheduledtaskChangedObjects{}

	err = json.Unmarshal(data, &varScheduledtaskChangedObjects)

	if err != nil {
		return err
	}

	*o = ScheduledtaskChangedObjects(varScheduledtaskChangedObjects)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "properties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScheduledtaskChangedObjects struct {
	value *ScheduledtaskChangedObjects
	isSet bool
}

func (v NullableScheduledtaskChangedObjects) Get() *ScheduledtaskChangedObjects {
	return v.value
}

func (v *NullableScheduledtaskChangedObjects) Set(val *ScheduledtaskChangedObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledtaskChangedObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledtaskChangedObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledtaskChangedObjects(val *ScheduledtaskChangedObjects) *NullableScheduledtaskChangedObjects {
	return &NullableScheduledtaskChangedObjects{value: val, isSet: true}
}

func (v NullableScheduledtaskChangedObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledtaskChangedObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
