/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// UpdateDatacollectionclusterResponse - struct for UpdateDatacollectionclusterResponse
type UpdateDatacollectionclusterResponse struct {
	UpdateDatacollectionclusterResponseAsObject *UpdateDatacollectionclusterResponseAsObject
	String                                      *string
}

// UpdateDatacollectionclusterResponseAsObjectAsUpdateDatacollectionclusterResponse is a convenience function that returns UpdateDatacollectionclusterResponseAsObject wrapped in UpdateDatacollectionclusterResponse
func UpdateDatacollectionclusterResponseAsObjectAsUpdateDatacollectionclusterResponse(v *UpdateDatacollectionclusterResponseAsObject) UpdateDatacollectionclusterResponse {
	return UpdateDatacollectionclusterResponse{
		UpdateDatacollectionclusterResponseAsObject: v,
	}
}

// stringAsUpdateDatacollectionclusterResponse is a convenience function that returns string wrapped in UpdateDatacollectionclusterResponse
func StringAsUpdateDatacollectionclusterResponse(v *string) UpdateDatacollectionclusterResponse {
	return UpdateDatacollectionclusterResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateDatacollectionclusterResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateDatacollectionclusterResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateDatacollectionclusterResponseAsObject)
	if err == nil {
		jsonUpdateDatacollectionclusterResponseAsObject, _ := json.Marshal(dst.UpdateDatacollectionclusterResponseAsObject)
		if string(jsonUpdateDatacollectionclusterResponseAsObject) == "{}" { // empty struct
			dst.UpdateDatacollectionclusterResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateDatacollectionclusterResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateDatacollectionclusterResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateDatacollectionclusterResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateDatacollectionclusterResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateDatacollectionclusterResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateDatacollectionclusterResponseAsObject != nil {
		return json.Marshal(&src.UpdateDatacollectionclusterResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateDatacollectionclusterResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateDatacollectionclusterResponseAsObject != nil {
		return obj.UpdateDatacollectionclusterResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateDatacollectionclusterResponse struct {
	value *UpdateDatacollectionclusterResponse
	isSet bool
}

func (v NullableUpdateDatacollectionclusterResponse) Get() *UpdateDatacollectionclusterResponse {
	return v.value
}

func (v *NullableUpdateDatacollectionclusterResponse) Set(val *UpdateDatacollectionclusterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatacollectionclusterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatacollectionclusterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatacollectionclusterResponse(val *UpdateDatacollectionclusterResponse) *NullableUpdateDatacollectionclusterResponse {
	return &NullableUpdateDatacollectionclusterResponse{value: val, isSet: true}
}

func (v NullableUpdateDatacollectionclusterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatacollectionclusterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
