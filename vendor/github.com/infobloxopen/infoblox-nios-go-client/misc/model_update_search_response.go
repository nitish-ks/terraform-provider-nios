/*
Infoblox MISC API

OpenAPI specification for Infoblox NIOS WAPI MISC objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package misc

import (
	"encoding/json"
	"fmt"
)

// UpdateSearchResponse - struct for UpdateSearchResponse
type UpdateSearchResponse struct {
	UpdateSearchResponseAsObject *UpdateSearchResponseAsObject
	String                       *string
}

// UpdateSearchResponseAsObjectAsUpdateSearchResponse is a convenience function that returns UpdateSearchResponseAsObject wrapped in UpdateSearchResponse
func UpdateSearchResponseAsObjectAsUpdateSearchResponse(v *UpdateSearchResponseAsObject) UpdateSearchResponse {
	return UpdateSearchResponse{
		UpdateSearchResponseAsObject: v,
	}
}

// stringAsUpdateSearchResponse is a convenience function that returns string wrapped in UpdateSearchResponse
func StringAsUpdateSearchResponse(v *string) UpdateSearchResponse {
	return UpdateSearchResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateSearchResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateSearchResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateSearchResponseAsObject)
	if err == nil {
		jsonUpdateSearchResponseAsObject, _ := json.Marshal(dst.UpdateSearchResponseAsObject)
		if string(jsonUpdateSearchResponseAsObject) == "{}" { // empty struct
			dst.UpdateSearchResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateSearchResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateSearchResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateSearchResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateSearchResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateSearchResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateSearchResponseAsObject != nil {
		return json.Marshal(&src.UpdateSearchResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateSearchResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateSearchResponseAsObject != nil {
		return obj.UpdateSearchResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateSearchResponse struct {
	value *UpdateSearchResponse
	isSet bool
}

func (v NullableUpdateSearchResponse) Get() *UpdateSearchResponse {
	return v.value
}

func (v *NullableUpdateSearchResponse) Set(val *UpdateSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSearchResponse(val *UpdateSearchResponse) *NullableUpdateSearchResponse {
	return &NullableUpdateSearchResponse{value: val, isSet: true}
}

func (v NullableUpdateSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
