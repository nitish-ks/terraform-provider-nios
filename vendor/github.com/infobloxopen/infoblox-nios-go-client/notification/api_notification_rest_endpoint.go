/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type NotificationRestEndpointAPI interface {
	/*
		Create Create a notification:rest:endpoint object

		Creates a new notification:rest:endpoint object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestEndpointAPICreateRequest
	*/
	Create(ctx context.Context) NotificationRestEndpointAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateNotificationRestEndpointResponse
	CreateExecute(r NotificationRestEndpointAPICreateRequest) (*CreateNotificationRestEndpointResponse, *http.Response, error)
	/*
		Delete Delete a notification:rest:endpoint object

		Deletes a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) NotificationRestEndpointAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r NotificationRestEndpointAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve notification:rest:endpoint objects

		Returns a list of notification:rest:endpoint objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestEndpointAPIListRequest
	*/
	List(ctx context.Context) NotificationRestEndpointAPIListRequest

	// ListExecute executes the request
	//  @return ListNotificationRestEndpointResponse
	ListExecute(r NotificationRestEndpointAPIListRequest) (*ListNotificationRestEndpointResponse, *http.Response, error)
	/*
		Read Get a specific notification:rest:endpoint object

		Returns a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPIReadRequest
	*/
	Read(ctx context.Context, reference string) NotificationRestEndpointAPIReadRequest

	// ReadExecute executes the request
	//  @return GetNotificationRestEndpointResponse
	ReadExecute(r NotificationRestEndpointAPIReadRequest) (*GetNotificationRestEndpointResponse, *http.Response, error)
	/*
		Update Update a notification:rest:endpoint object

		Updates a specific notification:rest:endpoint object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:endpoint object
		@return NotificationRestEndpointAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) NotificationRestEndpointAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateNotificationRestEndpointResponse
	UpdateExecute(r NotificationRestEndpointAPIUpdateRequest) (*UpdateNotificationRestEndpointResponse, *http.Response, error)
}

// NotificationRestEndpointAPIService NotificationRestEndpointAPI service
type NotificationRestEndpointAPIService internal.Service

type NotificationRestEndpointAPICreateRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestEndpointAPI
	notificationRestEndpoint *NotificationRestEndpoint
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to create
func (r NotificationRestEndpointAPICreateRequest) NotificationRestEndpoint(notificationRestEndpoint NotificationRestEndpoint) NotificationRestEndpointAPICreateRequest {
	r.notificationRestEndpoint = &notificationRestEndpoint
	return r
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPICreateRequest) ReturnFields(returnFields string) NotificationRestEndpointAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestEndpointAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPICreateRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPICreateRequest) Execute() (*CreateNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a notification:rest:endpoint object

Creates a new notification:rest:endpoint object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestEndpointAPICreateRequest
*/
func (a *NotificationRestEndpointAPIService) Create(ctx context.Context) NotificationRestEndpointAPICreateRequest {
	return NotificationRestEndpointAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) CreateExecute(r NotificationRestEndpointAPICreateRequest) (*CreateNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.notificationRestEndpoint != nil {
		if r.notificationRestEndpoint.ExtAttrs == nil {
			r.notificationRestEndpoint.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.notificationRestEndpoint.ExtAttrs)[k]; !ok {
				(*r.notificationRestEndpoint.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.notificationRestEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPIDeleteRequest struct {
	ctx        context.Context
	ApiService NotificationRestEndpointAPI
	reference  string
}

func (r NotificationRestEndpointAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a notification:rest:endpoint object

Deletes a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPIDeleteRequest
*/
func (a *NotificationRestEndpointAPIService) Delete(ctx context.Context, reference string) NotificationRestEndpointAPIDeleteRequest {
	return NotificationRestEndpointAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NotificationRestEndpointAPIService) DeleteExecute(r NotificationRestEndpointAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NotificationRestEndpointAPIListRequest struct {
	ctx              context.Context
	ApiService       NotificationRestEndpointAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPIListRequest) ReturnFields(returnFields string) NotificationRestEndpointAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestEndpointAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r NotificationRestEndpointAPIListRequest) MaxResults(maxResults int32) NotificationRestEndpointAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPIListRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NotificationRestEndpointAPIListRequest) Paging(paging int32) NotificationRestEndpointAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NotificationRestEndpointAPIListRequest) PageId(pageId string) NotificationRestEndpointAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r NotificationRestEndpointAPIListRequest) Filters(filters map[string]interface{}) NotificationRestEndpointAPIListRequest {
	r.filters = &filters
	return r
}

func (r NotificationRestEndpointAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) NotificationRestEndpointAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NotificationRestEndpointAPIListRequest) Execute() (*ListNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve notification:rest:endpoint objects

Returns a list of notification:rest:endpoint objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestEndpointAPIListRequest
*/
func (a *NotificationRestEndpointAPIService) List(ctx context.Context) NotificationRestEndpointAPIListRequest {
	return NotificationRestEndpointAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) ListExecute(r NotificationRestEndpointAPIListRequest) (*ListNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPIReadRequest struct {
	ctx              context.Context
	ApiService       NotificationRestEndpointAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPIReadRequest) ReturnFields(returnFields string) NotificationRestEndpointAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestEndpointAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPIReadRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPIReadRequest) Execute() (*GetNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific notification:rest:endpoint object

Returns a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPIReadRequest
*/
func (a *NotificationRestEndpointAPIService) Read(ctx context.Context, reference string) NotificationRestEndpointAPIReadRequest {
	return NotificationRestEndpointAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) ReadExecute(r NotificationRestEndpointAPIReadRequest) (*GetNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestEndpointAPIUpdateRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestEndpointAPI
	reference                string
	notificationRestEndpoint *NotificationRestEndpoint
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to update
func (r NotificationRestEndpointAPIUpdateRequest) NotificationRestEndpoint(notificationRestEndpoint NotificationRestEndpoint) NotificationRestEndpointAPIUpdateRequest {
	r.notificationRestEndpoint = &notificationRestEndpoint
	return r
}

// Enter the field names followed by comma
func (r NotificationRestEndpointAPIUpdateRequest) ReturnFields(returnFields string) NotificationRestEndpointAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestEndpointAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestEndpointAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestEndpointAPIUpdateRequest) ReturnAsObject(returnAsObject int32) NotificationRestEndpointAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestEndpointAPIUpdateRequest) Execute() (*UpdateNotificationRestEndpointResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a notification:rest:endpoint object

Updates a specific notification:rest:endpoint object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:endpoint object
	@return NotificationRestEndpointAPIUpdateRequest
*/
func (a *NotificationRestEndpointAPIService) Update(ctx context.Context, reference string) NotificationRestEndpointAPIUpdateRequest {
	return NotificationRestEndpointAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNotificationRestEndpointResponse
func (a *NotificationRestEndpointAPIService) UpdateExecute(r NotificationRestEndpointAPIUpdateRequest) (*UpdateNotificationRestEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNotificationRestEndpointResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestEndpointAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:endpoint/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestEndpoint == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestEndpoint is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.notificationRestEndpoint != nil {
		if r.notificationRestEndpoint.ExtAttrs == nil {
			r.notificationRestEndpoint.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.notificationRestEndpoint.ExtAttrs)[k]; !ok {
				(*r.notificationRestEndpoint.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.notificationRestEndpoint
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
