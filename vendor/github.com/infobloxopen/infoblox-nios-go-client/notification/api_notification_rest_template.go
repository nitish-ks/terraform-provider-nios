/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type NotificationRestTemplateAPI interface {
	/*
		Delete Delete a notification:rest:template object

		Deletes a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) NotificationRestTemplateAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r NotificationRestTemplateAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve notification:rest:template objects

		Returns a list of notification:rest:template objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return NotificationRestTemplateAPIListRequest
	*/
	List(ctx context.Context) NotificationRestTemplateAPIListRequest

	// ListExecute executes the request
	//  @return ListNotificationRestTemplateResponse
	ListExecute(r NotificationRestTemplateAPIListRequest) (*ListNotificationRestTemplateResponse, *http.Response, error)
	/*
		Read Get a specific notification:rest:template object

		Returns a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPIReadRequest
	*/
	Read(ctx context.Context, reference string) NotificationRestTemplateAPIReadRequest

	// ReadExecute executes the request
	//  @return GetNotificationRestTemplateResponse
	ReadExecute(r NotificationRestTemplateAPIReadRequest) (*GetNotificationRestTemplateResponse, *http.Response, error)
	/*
		Update Update a notification:rest:template object

		Updates a specific notification:rest:template object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the notification:rest:template object
		@return NotificationRestTemplateAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) NotificationRestTemplateAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateNotificationRestTemplateResponse
	UpdateExecute(r NotificationRestTemplateAPIUpdateRequest) (*UpdateNotificationRestTemplateResponse, *http.Response, error)
}

// NotificationRestTemplateAPIService NotificationRestTemplateAPI service
type NotificationRestTemplateAPIService internal.Service

type NotificationRestTemplateAPIDeleteRequest struct {
	ctx        context.Context
	ApiService NotificationRestTemplateAPI
	reference  string
}

func (r NotificationRestTemplateAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a notification:rest:template object

Deletes a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPIDeleteRequest
*/
func (a *NotificationRestTemplateAPIService) Delete(ctx context.Context, reference string) NotificationRestTemplateAPIDeleteRequest {
	return NotificationRestTemplateAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *NotificationRestTemplateAPIService) DeleteExecute(r NotificationRestTemplateAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NotificationRestTemplateAPIListRequest struct {
	ctx              context.Context
	ApiService       NotificationRestTemplateAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPIListRequest) ReturnFields(returnFields string) NotificationRestTemplateAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestTemplateAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r NotificationRestTemplateAPIListRequest) MaxResults(maxResults int32) NotificationRestTemplateAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPIListRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r NotificationRestTemplateAPIListRequest) Paging(paging int32) NotificationRestTemplateAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r NotificationRestTemplateAPIListRequest) PageId(pageId string) NotificationRestTemplateAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r NotificationRestTemplateAPIListRequest) Filters(filters map[string]interface{}) NotificationRestTemplateAPIListRequest {
	r.filters = &filters
	return r
}

func (r NotificationRestTemplateAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) NotificationRestTemplateAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r NotificationRestTemplateAPIListRequest) Execute() (*ListNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve notification:rest:template objects

Returns a list of notification:rest:template objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NotificationRestTemplateAPIListRequest
*/
func (a *NotificationRestTemplateAPIService) List(ctx context.Context) NotificationRestTemplateAPIListRequest {
	return NotificationRestTemplateAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) ListExecute(r NotificationRestTemplateAPIListRequest) (*ListNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestTemplateAPIReadRequest struct {
	ctx              context.Context
	ApiService       NotificationRestTemplateAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPIReadRequest) ReturnFields(returnFields string) NotificationRestTemplateAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestTemplateAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPIReadRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestTemplateAPIReadRequest) Execute() (*GetNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific notification:rest:template object

Returns a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPIReadRequest
*/
func (a *NotificationRestTemplateAPIService) Read(ctx context.Context, reference string) NotificationRestTemplateAPIReadRequest {
	return NotificationRestTemplateAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) ReadExecute(r NotificationRestTemplateAPIReadRequest) (*GetNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NotificationRestTemplateAPIUpdateRequest struct {
	ctx                      context.Context
	ApiService               NotificationRestTemplateAPI
	reference                string
	notificationRestTemplate *NotificationRestTemplate
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to update
func (r NotificationRestTemplateAPIUpdateRequest) NotificationRestTemplate(notificationRestTemplate NotificationRestTemplate) NotificationRestTemplateAPIUpdateRequest {
	r.notificationRestTemplate = &notificationRestTemplate
	return r
}

// Enter the field names followed by comma
func (r NotificationRestTemplateAPIUpdateRequest) ReturnFields(returnFields string) NotificationRestTemplateAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r NotificationRestTemplateAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) NotificationRestTemplateAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r NotificationRestTemplateAPIUpdateRequest) ReturnAsObject(returnAsObject int32) NotificationRestTemplateAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r NotificationRestTemplateAPIUpdateRequest) Execute() (*UpdateNotificationRestTemplateResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a notification:rest:template object

Updates a specific notification:rest:template object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the notification:rest:template object
	@return NotificationRestTemplateAPIUpdateRequest
*/
func (a *NotificationRestTemplateAPIService) Update(ctx context.Context, reference string) NotificationRestTemplateAPIUpdateRequest {
	return NotificationRestTemplateAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateNotificationRestTemplateResponse
func (a *NotificationRestTemplateAPIService) UpdateExecute(r NotificationRestTemplateAPIUpdateRequest) (*UpdateNotificationRestTemplateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateNotificationRestTemplateResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NotificationRestTemplateAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/notification:rest:template/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationRestTemplate == nil {
		return localVarReturnValue, nil, internal.ReportError("notificationRestTemplate is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.notificationRestTemplate
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
