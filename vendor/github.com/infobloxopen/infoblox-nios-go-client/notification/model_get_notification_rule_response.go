/*
Infoblox NOTIFICATION API

OpenAPI specification for Infoblox NIOS WAPI NOTIFICATION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package notification

import (
	"encoding/json"
	"fmt"
)

// GetNotificationRuleResponse - struct for GetNotificationRuleResponse
type GetNotificationRuleResponse struct {
	GetNotificationRuleResponseObjectAsResult *GetNotificationRuleResponseObjectAsResult
	NotificationRule                          *NotificationRule
}

// GetNotificationRuleResponseObjectAsResultAsGetNotificationRuleResponse is a convenience function that returns GetNotificationRuleResponseObjectAsResult wrapped in GetNotificationRuleResponse
func GetNotificationRuleResponseObjectAsResultAsGetNotificationRuleResponse(v *GetNotificationRuleResponseObjectAsResult) GetNotificationRuleResponse {
	return GetNotificationRuleResponse{
		GetNotificationRuleResponseObjectAsResult: v,
	}
}

// NotificationRuleAsGetNotificationRuleResponse is a convenience function that returns NotificationRule wrapped in GetNotificationRuleResponse
func NotificationRuleAsGetNotificationRuleResponse(v *NotificationRule) GetNotificationRuleResponse {
	return GetNotificationRuleResponse{
		NotificationRule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetNotificationRuleResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetNotificationRuleResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetNotificationRuleResponseObjectAsResult)
	if err == nil {
		jsonGetNotificationRuleResponseObjectAsResult, _ := json.Marshal(dst.GetNotificationRuleResponseObjectAsResult)
		if string(jsonGetNotificationRuleResponseObjectAsResult) == "{}" { // empty struct
			dst.GetNotificationRuleResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetNotificationRuleResponseObjectAsResult = nil
	}

	// try to unmarshal data into NotificationRule
	err = newStrictDecoder(data).Decode(&dst.NotificationRule)
	if err == nil {
		jsonNotificationRule, _ := json.Marshal(dst.NotificationRule)
		if string(jsonNotificationRule) == "{}" { // empty struct
			dst.NotificationRule = nil
		} else {
			match++
		}
	} else {
		dst.NotificationRule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetNotificationRuleResponseObjectAsResult = nil
		dst.NotificationRule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetNotificationRuleResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetNotificationRuleResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetNotificationRuleResponse) MarshalJSON() ([]byte, error) {
	if src.GetNotificationRuleResponseObjectAsResult != nil {
		return json.Marshal(&src.GetNotificationRuleResponseObjectAsResult)
	}

	if src.NotificationRule != nil {
		return json.Marshal(&src.NotificationRule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetNotificationRuleResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetNotificationRuleResponseObjectAsResult != nil {
		return obj.GetNotificationRuleResponseObjectAsResult
	}

	if obj.NotificationRule != nil {
		return obj.NotificationRule
	}

	// all schemas are nil
	return nil
}

type NullableGetNotificationRuleResponse struct {
	value *GetNotificationRuleResponse
	isSet bool
}

func (v NullableGetNotificationRuleResponse) Get() *GetNotificationRuleResponse {
	return v.value
}

func (v *NullableGetNotificationRuleResponse) Set(val *GetNotificationRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNotificationRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNotificationRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNotificationRuleResponse(val *GetNotificationRuleResponse) *NullableGetNotificationRuleResponse {
	return &NullableGetNotificationRuleResponse{value: val, isSet: true}
}

func (v NullableGetNotificationRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNotificationRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
