/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type ParentalcontrolSubscriberrecordAPI interface {
	/*
		Create Create a parentalcontrol:subscriberrecord object

		Creates a new parentalcontrol:subscriberrecord object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ParentalcontrolSubscriberrecordAPICreateRequest
	*/
	Create(ctx context.Context) ParentalcontrolSubscriberrecordAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateParentalcontrolSubscriberrecordResponse
	CreateExecute(r ParentalcontrolSubscriberrecordAPICreateRequest) (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		Delete Delete a parentalcontrol:subscriberrecord object

		Deletes a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r ParentalcontrolSubscriberrecordAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve parentalcontrol:subscriberrecord objects

		Returns a list of parentalcontrol:subscriberrecord objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ParentalcontrolSubscriberrecordAPIListRequest
	*/
	List(ctx context.Context) ParentalcontrolSubscriberrecordAPIListRequest

	// ListExecute executes the request
	//  @return ListParentalcontrolSubscriberrecordResponse
	ListExecute(r ParentalcontrolSubscriberrecordAPIListRequest) (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		Read Get a specific parentalcontrol:subscriberrecord object

		Returns a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIReadRequest
	*/
	Read(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIReadRequest

	// ReadExecute executes the request
	//  @return GetParentalcontrolSubscriberrecordResponse
	ReadExecute(r ParentalcontrolSubscriberrecordAPIReadRequest) (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error)
	/*
		Update Update a parentalcontrol:subscriberrecord object

		Updates a specific parentalcontrol:subscriberrecord object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the parentalcontrol:subscriberrecord object
		@return ParentalcontrolSubscriberrecordAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateParentalcontrolSubscriberrecordResponse
	UpdateExecute(r ParentalcontrolSubscriberrecordAPIUpdateRequest) (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error)
}

// ParentalcontrolSubscriberrecordAPIService ParentalcontrolSubscriberrecordAPI service
type ParentalcontrolSubscriberrecordAPIService internal.Service

type ParentalcontrolSubscriberrecordAPICreateRequest struct {
	ctx                             context.Context
	ApiService                      ParentalcontrolSubscriberrecordAPI
	parentalcontrolSubscriberrecord *ParentalcontrolSubscriberrecord
	returnFields                    *string
	returnFieldsPlus                *string
	returnAsObject                  *int32
}

// Object data to create
func (r ParentalcontrolSubscriberrecordAPICreateRequest) ParentalcontrolSubscriberrecord(parentalcontrolSubscriberrecord ParentalcontrolSubscriberrecord) ParentalcontrolSubscriberrecordAPICreateRequest {
	r.parentalcontrolSubscriberrecord = &parentalcontrolSubscriberrecord
	return r
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPICreateRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) ParentalcontrolSubscriberrecordAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPICreateRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPICreateRequest) Execute() (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a parentalcontrol:subscriberrecord object

Creates a new parentalcontrol:subscriberrecord object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ParentalcontrolSubscriberrecordAPICreateRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) Create(ctx context.Context) ParentalcontrolSubscriberrecordAPICreateRequest {
	return ParentalcontrolSubscriberrecordAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) CreateExecute(r ParentalcontrolSubscriberrecordAPICreateRequest) (*CreateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parentalcontrolSubscriberrecord == nil {
		return localVarReturnValue, nil, internal.ReportError("parentalcontrolSubscriberrecord is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parentalcontrolSubscriberrecord
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIDeleteRequest struct {
	ctx        context.Context
	ApiService ParentalcontrolSubscriberrecordAPI
	reference  string
}

func (r ParentalcontrolSubscriberrecordAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a parentalcontrol:subscriberrecord object

Deletes a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIDeleteRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) Delete(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIDeleteRequest {
	return ParentalcontrolSubscriberrecordAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ParentalcontrolSubscriberrecordAPIService) DeleteExecute(r ParentalcontrolSubscriberrecordAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIListRequest struct {
	ctx              context.Context
	ApiService       ParentalcontrolSubscriberrecordAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIListRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) ParentalcontrolSubscriberrecordAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r ParentalcontrolSubscriberrecordAPIListRequest) MaxResults(maxResults int32) ParentalcontrolSubscriberrecordAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIListRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ParentalcontrolSubscriberrecordAPIListRequest) Paging(paging int32) ParentalcontrolSubscriberrecordAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ParentalcontrolSubscriberrecordAPIListRequest) PageId(pageId string) ParentalcontrolSubscriberrecordAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r ParentalcontrolSubscriberrecordAPIListRequest) Filters(filters map[string]interface{}) ParentalcontrolSubscriberrecordAPIListRequest {
	r.filters = &filters
	return r
}

func (r ParentalcontrolSubscriberrecordAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) ParentalcontrolSubscriberrecordAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ParentalcontrolSubscriberrecordAPIListRequest) Execute() (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve parentalcontrol:subscriberrecord objects

Returns a list of parentalcontrol:subscriberrecord objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ParentalcontrolSubscriberrecordAPIListRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) List(ctx context.Context) ParentalcontrolSubscriberrecordAPIListRequest {
	return ParentalcontrolSubscriberrecordAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ListExecute(r ParentalcontrolSubscriberrecordAPIListRequest) (*ListParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIReadRequest struct {
	ctx              context.Context
	ApiService       ParentalcontrolSubscriberrecordAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIReadRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) ParentalcontrolSubscriberrecordAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIReadRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPIReadRequest) Execute() (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific parentalcontrol:subscriberrecord object

Returns a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIReadRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) Read(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIReadRequest {
	return ParentalcontrolSubscriberrecordAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) ReadExecute(r ParentalcontrolSubscriberrecordAPIReadRequest) (*GetParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ParentalcontrolSubscriberrecordAPIUpdateRequest struct {
	ctx                             context.Context
	ApiService                      ParentalcontrolSubscriberrecordAPI
	reference                       string
	parentalcontrolSubscriberrecord *ParentalcontrolSubscriberrecord
	returnFields                    *string
	returnFieldsPlus                *string
	returnAsObject                  *int32
}

// Object data to update
func (r ParentalcontrolSubscriberrecordAPIUpdateRequest) ParentalcontrolSubscriberrecord(parentalcontrolSubscriberrecord ParentalcontrolSubscriberrecord) ParentalcontrolSubscriberrecordAPIUpdateRequest {
	r.parentalcontrolSubscriberrecord = &parentalcontrolSubscriberrecord
	return r
}

// Enter the field names followed by comma
func (r ParentalcontrolSubscriberrecordAPIUpdateRequest) ReturnFields(returnFields string) ParentalcontrolSubscriberrecordAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ParentalcontrolSubscriberrecordAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) ParentalcontrolSubscriberrecordAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ParentalcontrolSubscriberrecordAPIUpdateRequest) ReturnAsObject(returnAsObject int32) ParentalcontrolSubscriberrecordAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ParentalcontrolSubscriberrecordAPIUpdateRequest) Execute() (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a parentalcontrol:subscriberrecord object

Updates a specific parentalcontrol:subscriberrecord object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the parentalcontrol:subscriberrecord object
	@return ParentalcontrolSubscriberrecordAPIUpdateRequest
*/
func (a *ParentalcontrolSubscriberrecordAPIService) Update(ctx context.Context, reference string) ParentalcontrolSubscriberrecordAPIUpdateRequest {
	return ParentalcontrolSubscriberrecordAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateParentalcontrolSubscriberrecordResponse
func (a *ParentalcontrolSubscriberrecordAPIService) UpdateExecute(r ParentalcontrolSubscriberrecordAPIUpdateRequest) (*UpdateParentalcontrolSubscriberrecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateParentalcontrolSubscriberrecordResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ParentalcontrolSubscriberrecordAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/parentalcontrol:subscriberrecord/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parentalcontrolSubscriberrecord == nil {
		return localVarReturnValue, nil, internal.ReportError("parentalcontrolSubscriberrecord is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parentalcontrolSubscriberrecord
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
