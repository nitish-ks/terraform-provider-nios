/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"encoding/json"
	"fmt"
)

// ListParentalcontrolBlockingpolicyResponse - struct for ListParentalcontrolBlockingpolicyResponse
type ListParentalcontrolBlockingpolicyResponse struct {
	ListParentalcontrolBlockingpolicyResponseObject *ListParentalcontrolBlockingpolicyResponseObject
	ArrayOfParentalcontrolBlockingpolicy            *[]ParentalcontrolBlockingpolicy
}

// ListParentalcontrolBlockingpolicyResponseObjectAsListParentalcontrolBlockingpolicyResponse is a convenience function that returns ListParentalcontrolBlockingpolicyResponseObject wrapped in ListParentalcontrolBlockingpolicyResponse
func ListParentalcontrolBlockingpolicyResponseObjectAsListParentalcontrolBlockingpolicyResponse(v *ListParentalcontrolBlockingpolicyResponseObject) ListParentalcontrolBlockingpolicyResponse {
	return ListParentalcontrolBlockingpolicyResponse{
		ListParentalcontrolBlockingpolicyResponseObject: v,
	}
}

// []ParentalcontrolBlockingpolicyAsListParentalcontrolBlockingpolicyResponse is a convenience function that returns []ParentalcontrolBlockingpolicy wrapped in ListParentalcontrolBlockingpolicyResponse
func ArrayOfParentalcontrolBlockingpolicyAsListParentalcontrolBlockingpolicyResponse(v *[]ParentalcontrolBlockingpolicy) ListParentalcontrolBlockingpolicyResponse {
	return ListParentalcontrolBlockingpolicyResponse{
		ArrayOfParentalcontrolBlockingpolicy: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListParentalcontrolBlockingpolicyResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListParentalcontrolBlockingpolicyResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListParentalcontrolBlockingpolicyResponseObject)
	if err == nil {
		jsonListParentalcontrolBlockingpolicyResponseObject, _ := json.Marshal(dst.ListParentalcontrolBlockingpolicyResponseObject)
		if string(jsonListParentalcontrolBlockingpolicyResponseObject) == "{}" { // empty struct
			dst.ListParentalcontrolBlockingpolicyResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListParentalcontrolBlockingpolicyResponseObject = nil
	}

	// try to unmarshal data into ArrayOfParentalcontrolBlockingpolicy
	err = newStrictDecoder(data).Decode(&dst.ArrayOfParentalcontrolBlockingpolicy)
	if err == nil {
		jsonArrayOfParentalcontrolBlockingpolicy, _ := json.Marshal(dst.ArrayOfParentalcontrolBlockingpolicy)
		if string(jsonArrayOfParentalcontrolBlockingpolicy) == "{}" { // empty struct
			dst.ArrayOfParentalcontrolBlockingpolicy = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfParentalcontrolBlockingpolicy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListParentalcontrolBlockingpolicyResponseObject = nil
		dst.ArrayOfParentalcontrolBlockingpolicy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListParentalcontrolBlockingpolicyResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListParentalcontrolBlockingpolicyResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListParentalcontrolBlockingpolicyResponse) MarshalJSON() ([]byte, error) {
	if src.ListParentalcontrolBlockingpolicyResponseObject != nil {
		return json.Marshal(&src.ListParentalcontrolBlockingpolicyResponseObject)
	}

	if src.ArrayOfParentalcontrolBlockingpolicy != nil {
		return json.Marshal(&src.ArrayOfParentalcontrolBlockingpolicy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListParentalcontrolBlockingpolicyResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListParentalcontrolBlockingpolicyResponseObject != nil {
		return obj.ListParentalcontrolBlockingpolicyResponseObject
	}

	if obj.ArrayOfParentalcontrolBlockingpolicy != nil {
		return obj.ArrayOfParentalcontrolBlockingpolicy
	}

	// all schemas are nil
	return nil
}

type NullableListParentalcontrolBlockingpolicyResponse struct {
	value *ListParentalcontrolBlockingpolicyResponse
	isSet bool
}

func (v NullableListParentalcontrolBlockingpolicyResponse) Get() *ListParentalcontrolBlockingpolicyResponse {
	return v.value
}

func (v *NullableListParentalcontrolBlockingpolicyResponse) Set(val *ListParentalcontrolBlockingpolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListParentalcontrolBlockingpolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListParentalcontrolBlockingpolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListParentalcontrolBlockingpolicyResponse(val *ListParentalcontrolBlockingpolicyResponse) *NullableListParentalcontrolBlockingpolicyResponse {
	return &NullableListParentalcontrolBlockingpolicyResponse{value: val, isSet: true}
}

func (v NullableListParentalcontrolBlockingpolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListParentalcontrolBlockingpolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
