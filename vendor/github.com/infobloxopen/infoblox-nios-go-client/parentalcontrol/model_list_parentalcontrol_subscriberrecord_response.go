/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"encoding/json"
	"fmt"
)

// ListParentalcontrolSubscriberrecordResponse - struct for ListParentalcontrolSubscriberrecordResponse
type ListParentalcontrolSubscriberrecordResponse struct {
	ListParentalcontrolSubscriberrecordResponseObject *ListParentalcontrolSubscriberrecordResponseObject
	ArrayOfParentalcontrolSubscriberrecord            *[]ParentalcontrolSubscriberrecord
}

// ListParentalcontrolSubscriberrecordResponseObjectAsListParentalcontrolSubscriberrecordResponse is a convenience function that returns ListParentalcontrolSubscriberrecordResponseObject wrapped in ListParentalcontrolSubscriberrecordResponse
func ListParentalcontrolSubscriberrecordResponseObjectAsListParentalcontrolSubscriberrecordResponse(v *ListParentalcontrolSubscriberrecordResponseObject) ListParentalcontrolSubscriberrecordResponse {
	return ListParentalcontrolSubscriberrecordResponse{
		ListParentalcontrolSubscriberrecordResponseObject: v,
	}
}

// []ParentalcontrolSubscriberrecordAsListParentalcontrolSubscriberrecordResponse is a convenience function that returns []ParentalcontrolSubscriberrecord wrapped in ListParentalcontrolSubscriberrecordResponse
func ArrayOfParentalcontrolSubscriberrecordAsListParentalcontrolSubscriberrecordResponse(v *[]ParentalcontrolSubscriberrecord) ListParentalcontrolSubscriberrecordResponse {
	return ListParentalcontrolSubscriberrecordResponse{
		ArrayOfParentalcontrolSubscriberrecord: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListParentalcontrolSubscriberrecordResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListParentalcontrolSubscriberrecordResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListParentalcontrolSubscriberrecordResponseObject)
	if err == nil {
		jsonListParentalcontrolSubscriberrecordResponseObject, _ := json.Marshal(dst.ListParentalcontrolSubscriberrecordResponseObject)
		if string(jsonListParentalcontrolSubscriberrecordResponseObject) == "{}" { // empty struct
			dst.ListParentalcontrolSubscriberrecordResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListParentalcontrolSubscriberrecordResponseObject = nil
	}

	// try to unmarshal data into ArrayOfParentalcontrolSubscriberrecord
	err = newStrictDecoder(data).Decode(&dst.ArrayOfParentalcontrolSubscriberrecord)
	if err == nil {
		jsonArrayOfParentalcontrolSubscriberrecord, _ := json.Marshal(dst.ArrayOfParentalcontrolSubscriberrecord)
		if string(jsonArrayOfParentalcontrolSubscriberrecord) == "{}" { // empty struct
			dst.ArrayOfParentalcontrolSubscriberrecord = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfParentalcontrolSubscriberrecord = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListParentalcontrolSubscriberrecordResponseObject = nil
		dst.ArrayOfParentalcontrolSubscriberrecord = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListParentalcontrolSubscriberrecordResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListParentalcontrolSubscriberrecordResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListParentalcontrolSubscriberrecordResponse) MarshalJSON() ([]byte, error) {
	if src.ListParentalcontrolSubscriberrecordResponseObject != nil {
		return json.Marshal(&src.ListParentalcontrolSubscriberrecordResponseObject)
	}

	if src.ArrayOfParentalcontrolSubscriberrecord != nil {
		return json.Marshal(&src.ArrayOfParentalcontrolSubscriberrecord)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListParentalcontrolSubscriberrecordResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListParentalcontrolSubscriberrecordResponseObject != nil {
		return obj.ListParentalcontrolSubscriberrecordResponseObject
	}

	if obj.ArrayOfParentalcontrolSubscriberrecord != nil {
		return obj.ArrayOfParentalcontrolSubscriberrecord
	}

	// all schemas are nil
	return nil
}

type NullableListParentalcontrolSubscriberrecordResponse struct {
	value *ListParentalcontrolSubscriberrecordResponse
	isSet bool
}

func (v NullableListParentalcontrolSubscriberrecordResponse) Get() *ListParentalcontrolSubscriberrecordResponse {
	return v.value
}

func (v *NullableListParentalcontrolSubscriberrecordResponse) Set(val *ListParentalcontrolSubscriberrecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListParentalcontrolSubscriberrecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListParentalcontrolSubscriberrecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListParentalcontrolSubscriberrecordResponse(val *ListParentalcontrolSubscriberrecordResponse) *NullableListParentalcontrolSubscriberrecordResponse {
	return &NullableListParentalcontrolSubscriberrecordResponse{value: val, isSet: true}
}

func (v NullableListParentalcontrolSubscriberrecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListParentalcontrolSubscriberrecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
