/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"encoding/json"
)

// checks if the ParentalcontrolBlockingpolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentalcontrolBlockingpolicy{}

// ParentalcontrolBlockingpolicy struct for ParentalcontrolBlockingpolicy
type ParentalcontrolBlockingpolicy struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The name of the blocking policy.
	Name *string `json:"name,omitempty"`
	// The 32 bit hex value of the blocking policy.
	Value *string `json:"value,omitempty"`
}

// NewParentalcontrolBlockingpolicy instantiates a new ParentalcontrolBlockingpolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentalcontrolBlockingpolicy() *ParentalcontrolBlockingpolicy {
	this := ParentalcontrolBlockingpolicy{}
	return &this
}

// NewParentalcontrolBlockingpolicyWithDefaults instantiates a new ParentalcontrolBlockingpolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentalcontrolBlockingpolicyWithDefaults() *ParentalcontrolBlockingpolicy {
	this := ParentalcontrolBlockingpolicy{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ParentalcontrolBlockingpolicy) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolBlockingpolicy) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ParentalcontrolBlockingpolicy) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ParentalcontrolBlockingpolicy) SetRef(v string) {
	o.Ref = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParentalcontrolBlockingpolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolBlockingpolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParentalcontrolBlockingpolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParentalcontrolBlockingpolicy) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ParentalcontrolBlockingpolicy) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolBlockingpolicy) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ParentalcontrolBlockingpolicy) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ParentalcontrolBlockingpolicy) SetValue(v string) {
	o.Value = &v
}

func (o ParentalcontrolBlockingpolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentalcontrolBlockingpolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableParentalcontrolBlockingpolicy struct {
	value *ParentalcontrolBlockingpolicy
	isSet bool
}

func (v NullableParentalcontrolBlockingpolicy) Get() *ParentalcontrolBlockingpolicy {
	return v.value
}

func (v *NullableParentalcontrolBlockingpolicy) Set(val *ParentalcontrolBlockingpolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableParentalcontrolBlockingpolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableParentalcontrolBlockingpolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentalcontrolBlockingpolicy(val *ParentalcontrolBlockingpolicy) *NullableParentalcontrolBlockingpolicy {
	return &NullableParentalcontrolBlockingpolicy{value: val, isSet: true}
}

func (v NullableParentalcontrolBlockingpolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentalcontrolBlockingpolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
