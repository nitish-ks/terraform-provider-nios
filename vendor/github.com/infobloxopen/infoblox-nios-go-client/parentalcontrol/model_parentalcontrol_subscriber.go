/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"encoding/json"
)

// checks if the ParentalcontrolSubscriber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentalcontrolSubscriber{}

// ParentalcontrolSubscriber struct for ParentalcontrolSubscriber
type ParentalcontrolSubscriber struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The name of AVP to be used as an alternate subscriber ID for fixed lines.
	AltSubscriberId *string `json:"alt_subscriber_id,omitempty"`
	// A character string to control aspects of rewriting of the fields.
	AltSubscriberIdRegexp *string `json:"alt_subscriber_id_regexp,omitempty"`
	// The subexpression indicates which subexpression to extract. If zero, then the text matching the entire regular expression is extracted. If non-zero, then the regex must contain at least that many sub-expression groups. It takes values from 0 to 8.
	AltSubscriberIdSubexpression *int64 `json:"alt_subscriber_id_subexpression,omitempty"`
	// The list of ordered AVP Ancillary Fields.
	Ancillaries []string `json:"ancillaries,omitempty"`
	// Category content account name using the categorization service.
	CatAcctname *string `json:"cat_acctname,omitempty"`
	// Category content account password to access the categorization service.
	CatPassword *string `json:"cat_password,omitempty"`
	// Category content updates every number of hours.
	CatUpdateFrequency *int64 `json:"cat_update_frequency,omitempty"`
	// Category content vendor url to download category data from and upload feedback to, configure for parental control.
	CategoryUrl *string `json:"category_url,omitempty"`
	// Determines if NAS RADIUS traffic is accepted over MGMT only.
	EnableMgmtOnlyNas *bool `json:"enable_mgmt_only_nas,omitempty"`
	// Determines if parental control is enabled.
	EnableParentalControl *bool `json:"enable_parental_control,omitempty"`
	// The time for collector to be fully populated. Valid values are from 1 to 65535.
	InterimAccountingInterval *int64 `json:"interim_accounting_interval,omitempty"`
	// The ordered list of IP Anchors AVPs. The list content cannot be changed, but the order of elements.
	IpAnchors []string `json:"ip_anchors,omitempty"`
	// A character string to control aspects of rewriting of the fields.
	IpSpaceDiscRegexp *string `json:"ip_space_disc_regexp,omitempty"`
	// The subexpression indicates which subexpression to extract. If zero, then the text matching the entire regular expression is extracted. If non-zero, then the regex must contain at least that many sub-expression groups. It takes values from 0 to 8.
	IpSpaceDiscSubexpression *int64 `json:"ip_space_disc_subexpression,omitempty"`
	// The name of AVP to be used as IP address discriminator.
	IpSpaceDiscriminator *string `json:"ip_space_discriminator,omitempty"`
	// The name of AVP to be used as local ID.
	LocalId *string `json:"local_id,omitempty"`
	// A character string to control aspects of rewriting of the fields.
	LocalIdRegexp *string `json:"local_id_regexp,omitempty"`
	// The subexpression indicates which subexpression to extract. If zero, then the text matching the entire regular expression is extracted. If non-zero, then the regex must contain at least that many sub-expression groups. It takes values from 0 to 8.
	LocalIdSubexpression *int64 `json:"local_id_subexpression,omitempty"`
	// CEF log all guest lookups, will produce two logs in case of a violation.
	LogGuestLookups *bool `json:"log_guest_lookups,omitempty"`
	// NAS contextual information AVP.
	NasContextInfo *string `json:"nas_context_info,omitempty"`
	// The SOA to store parental control records.
	PcZoneName *string `json:"pc_zone_name,omitempty"`
	// Proxy server password used for authentication.
	ProxyPassword *string `json:"proxy_password,omitempty"`
	// Proxy url to download category data from and upload feedback to, configure for parental control. The default value 'None' is no longer valid as it match url regex pattern \"^http|https://\". The new default value does not get saved in database, but rather used for comparision with object created in unit test cases.
	ProxyUrl *string `json:"proxy_url,omitempty"`
	// Proxy server username used for authentication.
	ProxyUsername *string `json:"proxy_username,omitempty"`
	// The name of AVP to be used as a subscriber.
	SubscriberId *string `json:"subscriber_id,omitempty"`
	// A character string to control aspects of rewriting of the fields.
	SubscriberIdRegexp *string `json:"subscriber_id_regexp,omitempty"`
	// The subexpression indicates which subexpression to extract. If zero, then the text matching the entire regular expression is extracted. If non-zero, then the regex must contain at least that many sub-expression groups. It takes values from 0 to 8.
	SubscriberIdSubexpression *int64 `json:"subscriber_id_subexpression,omitempty"`
	// Number of days since zvelo DB failed to update.
	ZveloUpdateFailureInDays *int64 `json:"zvelo_update_failure_in_days,omitempty"`
}

// NewParentalcontrolSubscriber instantiates a new ParentalcontrolSubscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentalcontrolSubscriber() *ParentalcontrolSubscriber {
	this := ParentalcontrolSubscriber{}
	return &this
}

// NewParentalcontrolSubscriberWithDefaults instantiates a new ParentalcontrolSubscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentalcontrolSubscriberWithDefaults() *ParentalcontrolSubscriber {
	this := ParentalcontrolSubscriber{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ParentalcontrolSubscriber) SetRef(v string) {
	o.Ref = &v
}

// GetAltSubscriberId returns the AltSubscriberId field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetAltSubscriberId() string {
	if o == nil || IsNil(o.AltSubscriberId) {
		var ret string
		return ret
	}
	return *o.AltSubscriberId
}

// GetAltSubscriberIdOk returns a tuple with the AltSubscriberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetAltSubscriberIdOk() (*string, bool) {
	if o == nil || IsNil(o.AltSubscriberId) {
		return nil, false
	}
	return o.AltSubscriberId, true
}

// HasAltSubscriberId returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasAltSubscriberId() bool {
	if o != nil && !IsNil(o.AltSubscriberId) {
		return true
	}

	return false
}

// SetAltSubscriberId gets a reference to the given string and assigns it to the AltSubscriberId field.
func (o *ParentalcontrolSubscriber) SetAltSubscriberId(v string) {
	o.AltSubscriberId = &v
}

// GetAltSubscriberIdRegexp returns the AltSubscriberIdRegexp field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetAltSubscriberIdRegexp() string {
	if o == nil || IsNil(o.AltSubscriberIdRegexp) {
		var ret string
		return ret
	}
	return *o.AltSubscriberIdRegexp
}

// GetAltSubscriberIdRegexpOk returns a tuple with the AltSubscriberIdRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetAltSubscriberIdRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.AltSubscriberIdRegexp) {
		return nil, false
	}
	return o.AltSubscriberIdRegexp, true
}

// HasAltSubscriberIdRegexp returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasAltSubscriberIdRegexp() bool {
	if o != nil && !IsNil(o.AltSubscriberIdRegexp) {
		return true
	}

	return false
}

// SetAltSubscriberIdRegexp gets a reference to the given string and assigns it to the AltSubscriberIdRegexp field.
func (o *ParentalcontrolSubscriber) SetAltSubscriberIdRegexp(v string) {
	o.AltSubscriberIdRegexp = &v
}

// GetAltSubscriberIdSubexpression returns the AltSubscriberIdSubexpression field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetAltSubscriberIdSubexpression() int64 {
	if o == nil || IsNil(o.AltSubscriberIdSubexpression) {
		var ret int64
		return ret
	}
	return *o.AltSubscriberIdSubexpression
}

// GetAltSubscriberIdSubexpressionOk returns a tuple with the AltSubscriberIdSubexpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetAltSubscriberIdSubexpressionOk() (*int64, bool) {
	if o == nil || IsNil(o.AltSubscriberIdSubexpression) {
		return nil, false
	}
	return o.AltSubscriberIdSubexpression, true
}

// HasAltSubscriberIdSubexpression returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasAltSubscriberIdSubexpression() bool {
	if o != nil && !IsNil(o.AltSubscriberIdSubexpression) {
		return true
	}

	return false
}

// SetAltSubscriberIdSubexpression gets a reference to the given int64 and assigns it to the AltSubscriberIdSubexpression field.
func (o *ParentalcontrolSubscriber) SetAltSubscriberIdSubexpression(v int64) {
	o.AltSubscriberIdSubexpression = &v
}

// GetAncillaries returns the Ancillaries field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetAncillaries() []string {
	if o == nil || IsNil(o.Ancillaries) {
		var ret []string
		return ret
	}
	return o.Ancillaries
}

// GetAncillariesOk returns a tuple with the Ancillaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetAncillariesOk() ([]string, bool) {
	if o == nil || IsNil(o.Ancillaries) {
		return nil, false
	}
	return o.Ancillaries, true
}

// HasAncillaries returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasAncillaries() bool {
	if o != nil && !IsNil(o.Ancillaries) {
		return true
	}

	return false
}

// SetAncillaries gets a reference to the given []string and assigns it to the Ancillaries field.
func (o *ParentalcontrolSubscriber) SetAncillaries(v []string) {
	o.Ancillaries = v
}

// GetCatAcctname returns the CatAcctname field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetCatAcctname() string {
	if o == nil || IsNil(o.CatAcctname) {
		var ret string
		return ret
	}
	return *o.CatAcctname
}

// GetCatAcctnameOk returns a tuple with the CatAcctname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetCatAcctnameOk() (*string, bool) {
	if o == nil || IsNil(o.CatAcctname) {
		return nil, false
	}
	return o.CatAcctname, true
}

// HasCatAcctname returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasCatAcctname() bool {
	if o != nil && !IsNil(o.CatAcctname) {
		return true
	}

	return false
}

// SetCatAcctname gets a reference to the given string and assigns it to the CatAcctname field.
func (o *ParentalcontrolSubscriber) SetCatAcctname(v string) {
	o.CatAcctname = &v
}

// GetCatPassword returns the CatPassword field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetCatPassword() string {
	if o == nil || IsNil(o.CatPassword) {
		var ret string
		return ret
	}
	return *o.CatPassword
}

// GetCatPasswordOk returns a tuple with the CatPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetCatPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CatPassword) {
		return nil, false
	}
	return o.CatPassword, true
}

// HasCatPassword returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasCatPassword() bool {
	if o != nil && !IsNil(o.CatPassword) {
		return true
	}

	return false
}

// SetCatPassword gets a reference to the given string and assigns it to the CatPassword field.
func (o *ParentalcontrolSubscriber) SetCatPassword(v string) {
	o.CatPassword = &v
}

// GetCatUpdateFrequency returns the CatUpdateFrequency field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetCatUpdateFrequency() int64 {
	if o == nil || IsNil(o.CatUpdateFrequency) {
		var ret int64
		return ret
	}
	return *o.CatUpdateFrequency
}

// GetCatUpdateFrequencyOk returns a tuple with the CatUpdateFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetCatUpdateFrequencyOk() (*int64, bool) {
	if o == nil || IsNil(o.CatUpdateFrequency) {
		return nil, false
	}
	return o.CatUpdateFrequency, true
}

// HasCatUpdateFrequency returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasCatUpdateFrequency() bool {
	if o != nil && !IsNil(o.CatUpdateFrequency) {
		return true
	}

	return false
}

// SetCatUpdateFrequency gets a reference to the given int64 and assigns it to the CatUpdateFrequency field.
func (o *ParentalcontrolSubscriber) SetCatUpdateFrequency(v int64) {
	o.CatUpdateFrequency = &v
}

// GetCategoryUrl returns the CategoryUrl field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetCategoryUrl() string {
	if o == nil || IsNil(o.CategoryUrl) {
		var ret string
		return ret
	}
	return *o.CategoryUrl
}

// GetCategoryUrlOk returns a tuple with the CategoryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetCategoryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryUrl) {
		return nil, false
	}
	return o.CategoryUrl, true
}

// HasCategoryUrl returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasCategoryUrl() bool {
	if o != nil && !IsNil(o.CategoryUrl) {
		return true
	}

	return false
}

// SetCategoryUrl gets a reference to the given string and assigns it to the CategoryUrl field.
func (o *ParentalcontrolSubscriber) SetCategoryUrl(v string) {
	o.CategoryUrl = &v
}

// GetEnableMgmtOnlyNas returns the EnableMgmtOnlyNas field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetEnableMgmtOnlyNas() bool {
	if o == nil || IsNil(o.EnableMgmtOnlyNas) {
		var ret bool
		return ret
	}
	return *o.EnableMgmtOnlyNas
}

// GetEnableMgmtOnlyNasOk returns a tuple with the EnableMgmtOnlyNas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetEnableMgmtOnlyNasOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMgmtOnlyNas) {
		return nil, false
	}
	return o.EnableMgmtOnlyNas, true
}

// HasEnableMgmtOnlyNas returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasEnableMgmtOnlyNas() bool {
	if o != nil && !IsNil(o.EnableMgmtOnlyNas) {
		return true
	}

	return false
}

// SetEnableMgmtOnlyNas gets a reference to the given bool and assigns it to the EnableMgmtOnlyNas field.
func (o *ParentalcontrolSubscriber) SetEnableMgmtOnlyNas(v bool) {
	o.EnableMgmtOnlyNas = &v
}

// GetEnableParentalControl returns the EnableParentalControl field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetEnableParentalControl() bool {
	if o == nil || IsNil(o.EnableParentalControl) {
		var ret bool
		return ret
	}
	return *o.EnableParentalControl
}

// GetEnableParentalControlOk returns a tuple with the EnableParentalControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetEnableParentalControlOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableParentalControl) {
		return nil, false
	}
	return o.EnableParentalControl, true
}

// HasEnableParentalControl returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasEnableParentalControl() bool {
	if o != nil && !IsNil(o.EnableParentalControl) {
		return true
	}

	return false
}

// SetEnableParentalControl gets a reference to the given bool and assigns it to the EnableParentalControl field.
func (o *ParentalcontrolSubscriber) SetEnableParentalControl(v bool) {
	o.EnableParentalControl = &v
}

// GetInterimAccountingInterval returns the InterimAccountingInterval field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetInterimAccountingInterval() int64 {
	if o == nil || IsNil(o.InterimAccountingInterval) {
		var ret int64
		return ret
	}
	return *o.InterimAccountingInterval
}

// GetInterimAccountingIntervalOk returns a tuple with the InterimAccountingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetInterimAccountingIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.InterimAccountingInterval) {
		return nil, false
	}
	return o.InterimAccountingInterval, true
}

// HasInterimAccountingInterval returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasInterimAccountingInterval() bool {
	if o != nil && !IsNil(o.InterimAccountingInterval) {
		return true
	}

	return false
}

// SetInterimAccountingInterval gets a reference to the given int64 and assigns it to the InterimAccountingInterval field.
func (o *ParentalcontrolSubscriber) SetInterimAccountingInterval(v int64) {
	o.InterimAccountingInterval = &v
}

// GetIpAnchors returns the IpAnchors field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetIpAnchors() []string {
	if o == nil || IsNil(o.IpAnchors) {
		var ret []string
		return ret
	}
	return o.IpAnchors
}

// GetIpAnchorsOk returns a tuple with the IpAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetIpAnchorsOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAnchors) {
		return nil, false
	}
	return o.IpAnchors, true
}

// HasIpAnchors returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasIpAnchors() bool {
	if o != nil && !IsNil(o.IpAnchors) {
		return true
	}

	return false
}

// SetIpAnchors gets a reference to the given []string and assigns it to the IpAnchors field.
func (o *ParentalcontrolSubscriber) SetIpAnchors(v []string) {
	o.IpAnchors = v
}

// GetIpSpaceDiscRegexp returns the IpSpaceDiscRegexp field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscRegexp() string {
	if o == nil || IsNil(o.IpSpaceDiscRegexp) {
		var ret string
		return ret
	}
	return *o.IpSpaceDiscRegexp
}

// GetIpSpaceDiscRegexpOk returns a tuple with the IpSpaceDiscRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpaceDiscRegexp) {
		return nil, false
	}
	return o.IpSpaceDiscRegexp, true
}

// HasIpSpaceDiscRegexp returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasIpSpaceDiscRegexp() bool {
	if o != nil && !IsNil(o.IpSpaceDiscRegexp) {
		return true
	}

	return false
}

// SetIpSpaceDiscRegexp gets a reference to the given string and assigns it to the IpSpaceDiscRegexp field.
func (o *ParentalcontrolSubscriber) SetIpSpaceDiscRegexp(v string) {
	o.IpSpaceDiscRegexp = &v
}

// GetIpSpaceDiscSubexpression returns the IpSpaceDiscSubexpression field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscSubexpression() int64 {
	if o == nil || IsNil(o.IpSpaceDiscSubexpression) {
		var ret int64
		return ret
	}
	return *o.IpSpaceDiscSubexpression
}

// GetIpSpaceDiscSubexpressionOk returns a tuple with the IpSpaceDiscSubexpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscSubexpressionOk() (*int64, bool) {
	if o == nil || IsNil(o.IpSpaceDiscSubexpression) {
		return nil, false
	}
	return o.IpSpaceDiscSubexpression, true
}

// HasIpSpaceDiscSubexpression returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasIpSpaceDiscSubexpression() bool {
	if o != nil && !IsNil(o.IpSpaceDiscSubexpression) {
		return true
	}

	return false
}

// SetIpSpaceDiscSubexpression gets a reference to the given int64 and assigns it to the IpSpaceDiscSubexpression field.
func (o *ParentalcontrolSubscriber) SetIpSpaceDiscSubexpression(v int64) {
	o.IpSpaceDiscSubexpression = &v
}

// GetIpSpaceDiscriminator returns the IpSpaceDiscriminator field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscriminator() string {
	if o == nil || IsNil(o.IpSpaceDiscriminator) {
		var ret string
		return ret
	}
	return *o.IpSpaceDiscriminator
}

// GetIpSpaceDiscriminatorOk returns a tuple with the IpSpaceDiscriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetIpSpaceDiscriminatorOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpaceDiscriminator) {
		return nil, false
	}
	return o.IpSpaceDiscriminator, true
}

// HasIpSpaceDiscriminator returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasIpSpaceDiscriminator() bool {
	if o != nil && !IsNil(o.IpSpaceDiscriminator) {
		return true
	}

	return false
}

// SetIpSpaceDiscriminator gets a reference to the given string and assigns it to the IpSpaceDiscriminator field.
func (o *ParentalcontrolSubscriber) SetIpSpaceDiscriminator(v string) {
	o.IpSpaceDiscriminator = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetLocalId() string {
	if o == nil || IsNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetLocalIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
func (o *ParentalcontrolSubscriber) SetLocalId(v string) {
	o.LocalId = &v
}

// GetLocalIdRegexp returns the LocalIdRegexp field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetLocalIdRegexp() string {
	if o == nil || IsNil(o.LocalIdRegexp) {
		var ret string
		return ret
	}
	return *o.LocalIdRegexp
}

// GetLocalIdRegexpOk returns a tuple with the LocalIdRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetLocalIdRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.LocalIdRegexp) {
		return nil, false
	}
	return o.LocalIdRegexp, true
}

// HasLocalIdRegexp returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasLocalIdRegexp() bool {
	if o != nil && !IsNil(o.LocalIdRegexp) {
		return true
	}

	return false
}

// SetLocalIdRegexp gets a reference to the given string and assigns it to the LocalIdRegexp field.
func (o *ParentalcontrolSubscriber) SetLocalIdRegexp(v string) {
	o.LocalIdRegexp = &v
}

// GetLocalIdSubexpression returns the LocalIdSubexpression field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetLocalIdSubexpression() int64 {
	if o == nil || IsNil(o.LocalIdSubexpression) {
		var ret int64
		return ret
	}
	return *o.LocalIdSubexpression
}

// GetLocalIdSubexpressionOk returns a tuple with the LocalIdSubexpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetLocalIdSubexpressionOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalIdSubexpression) {
		return nil, false
	}
	return o.LocalIdSubexpression, true
}

// HasLocalIdSubexpression returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasLocalIdSubexpression() bool {
	if o != nil && !IsNil(o.LocalIdSubexpression) {
		return true
	}

	return false
}

// SetLocalIdSubexpression gets a reference to the given int64 and assigns it to the LocalIdSubexpression field.
func (o *ParentalcontrolSubscriber) SetLocalIdSubexpression(v int64) {
	o.LocalIdSubexpression = &v
}

// GetLogGuestLookups returns the LogGuestLookups field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetLogGuestLookups() bool {
	if o == nil || IsNil(o.LogGuestLookups) {
		var ret bool
		return ret
	}
	return *o.LogGuestLookups
}

// GetLogGuestLookupsOk returns a tuple with the LogGuestLookups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetLogGuestLookupsOk() (*bool, bool) {
	if o == nil || IsNil(o.LogGuestLookups) {
		return nil, false
	}
	return o.LogGuestLookups, true
}

// HasLogGuestLookups returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasLogGuestLookups() bool {
	if o != nil && !IsNil(o.LogGuestLookups) {
		return true
	}

	return false
}

// SetLogGuestLookups gets a reference to the given bool and assigns it to the LogGuestLookups field.
func (o *ParentalcontrolSubscriber) SetLogGuestLookups(v bool) {
	o.LogGuestLookups = &v
}

// GetNasContextInfo returns the NasContextInfo field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetNasContextInfo() string {
	if o == nil || IsNil(o.NasContextInfo) {
		var ret string
		return ret
	}
	return *o.NasContextInfo
}

// GetNasContextInfoOk returns a tuple with the NasContextInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetNasContextInfoOk() (*string, bool) {
	if o == nil || IsNil(o.NasContextInfo) {
		return nil, false
	}
	return o.NasContextInfo, true
}

// HasNasContextInfo returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasNasContextInfo() bool {
	if o != nil && !IsNil(o.NasContextInfo) {
		return true
	}

	return false
}

// SetNasContextInfo gets a reference to the given string and assigns it to the NasContextInfo field.
func (o *ParentalcontrolSubscriber) SetNasContextInfo(v string) {
	o.NasContextInfo = &v
}

// GetPcZoneName returns the PcZoneName field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetPcZoneName() string {
	if o == nil || IsNil(o.PcZoneName) {
		var ret string
		return ret
	}
	return *o.PcZoneName
}

// GetPcZoneNameOk returns a tuple with the PcZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetPcZoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.PcZoneName) {
		return nil, false
	}
	return o.PcZoneName, true
}

// HasPcZoneName returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasPcZoneName() bool {
	if o != nil && !IsNil(o.PcZoneName) {
		return true
	}

	return false
}

// SetPcZoneName gets a reference to the given string and assigns it to the PcZoneName field.
func (o *ParentalcontrolSubscriber) SetPcZoneName(v string) {
	o.PcZoneName = &v
}

// GetProxyPassword returns the ProxyPassword field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetProxyPassword() string {
	if o == nil || IsNil(o.ProxyPassword) {
		var ret string
		return ret
	}
	return *o.ProxyPassword
}

// GetProxyPasswordOk returns a tuple with the ProxyPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetProxyPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyPassword) {
		return nil, false
	}
	return o.ProxyPassword, true
}

// HasProxyPassword returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasProxyPassword() bool {
	if o != nil && !IsNil(o.ProxyPassword) {
		return true
	}

	return false
}

// SetProxyPassword gets a reference to the given string and assigns it to the ProxyPassword field.
func (o *ParentalcontrolSubscriber) SetProxyPassword(v string) {
	o.ProxyPassword = &v
}

// GetProxyUrl returns the ProxyUrl field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetProxyUrl() string {
	if o == nil || IsNil(o.ProxyUrl) {
		var ret string
		return ret
	}
	return *o.ProxyUrl
}

// GetProxyUrlOk returns a tuple with the ProxyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetProxyUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUrl) {
		return nil, false
	}
	return o.ProxyUrl, true
}

// HasProxyUrl returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasProxyUrl() bool {
	if o != nil && !IsNil(o.ProxyUrl) {
		return true
	}

	return false
}

// SetProxyUrl gets a reference to the given string and assigns it to the ProxyUrl field.
func (o *ParentalcontrolSubscriber) SetProxyUrl(v string) {
	o.ProxyUrl = &v
}

// GetProxyUsername returns the ProxyUsername field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetProxyUsername() string {
	if o == nil || IsNil(o.ProxyUsername) {
		var ret string
		return ret
	}
	return *o.ProxyUsername
}

// GetProxyUsernameOk returns a tuple with the ProxyUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetProxyUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUsername) {
		return nil, false
	}
	return o.ProxyUsername, true
}

// HasProxyUsername returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasProxyUsername() bool {
	if o != nil && !IsNil(o.ProxyUsername) {
		return true
	}

	return false
}

// SetProxyUsername gets a reference to the given string and assigns it to the ProxyUsername field.
func (o *ParentalcontrolSubscriber) SetProxyUsername(v string) {
	o.ProxyUsername = &v
}

// GetSubscriberId returns the SubscriberId field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetSubscriberId() string {
	if o == nil || IsNil(o.SubscriberId) {
		var ret string
		return ret
	}
	return *o.SubscriberId
}

// GetSubscriberIdOk returns a tuple with the SubscriberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetSubscriberIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberId) {
		return nil, false
	}
	return o.SubscriberId, true
}

// HasSubscriberId returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasSubscriberId() bool {
	if o != nil && !IsNil(o.SubscriberId) {
		return true
	}

	return false
}

// SetSubscriberId gets a reference to the given string and assigns it to the SubscriberId field.
func (o *ParentalcontrolSubscriber) SetSubscriberId(v string) {
	o.SubscriberId = &v
}

// GetSubscriberIdRegexp returns the SubscriberIdRegexp field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetSubscriberIdRegexp() string {
	if o == nil || IsNil(o.SubscriberIdRegexp) {
		var ret string
		return ret
	}
	return *o.SubscriberIdRegexp
}

// GetSubscriberIdRegexpOk returns a tuple with the SubscriberIdRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetSubscriberIdRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberIdRegexp) {
		return nil, false
	}
	return o.SubscriberIdRegexp, true
}

// HasSubscriberIdRegexp returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasSubscriberIdRegexp() bool {
	if o != nil && !IsNil(o.SubscriberIdRegexp) {
		return true
	}

	return false
}

// SetSubscriberIdRegexp gets a reference to the given string and assigns it to the SubscriberIdRegexp field.
func (o *ParentalcontrolSubscriber) SetSubscriberIdRegexp(v string) {
	o.SubscriberIdRegexp = &v
}

// GetSubscriberIdSubexpression returns the SubscriberIdSubexpression field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetSubscriberIdSubexpression() int64 {
	if o == nil || IsNil(o.SubscriberIdSubexpression) {
		var ret int64
		return ret
	}
	return *o.SubscriberIdSubexpression
}

// GetSubscriberIdSubexpressionOk returns a tuple with the SubscriberIdSubexpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetSubscriberIdSubexpressionOk() (*int64, bool) {
	if o == nil || IsNil(o.SubscriberIdSubexpression) {
		return nil, false
	}
	return o.SubscriberIdSubexpression, true
}

// HasSubscriberIdSubexpression returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasSubscriberIdSubexpression() bool {
	if o != nil && !IsNil(o.SubscriberIdSubexpression) {
		return true
	}

	return false
}

// SetSubscriberIdSubexpression gets a reference to the given int64 and assigns it to the SubscriberIdSubexpression field.
func (o *ParentalcontrolSubscriber) SetSubscriberIdSubexpression(v int64) {
	o.SubscriberIdSubexpression = &v
}

// GetZveloUpdateFailureInDays returns the ZveloUpdateFailureInDays field value if set, zero value otherwise.
func (o *ParentalcontrolSubscriber) GetZveloUpdateFailureInDays() int64 {
	if o == nil || IsNil(o.ZveloUpdateFailureInDays) {
		var ret int64
		return ret
	}
	return *o.ZveloUpdateFailureInDays
}

// GetZveloUpdateFailureInDaysOk returns a tuple with the ZveloUpdateFailureInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscriber) GetZveloUpdateFailureInDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ZveloUpdateFailureInDays) {
		return nil, false
	}
	return o.ZveloUpdateFailureInDays, true
}

// HasZveloUpdateFailureInDays returns a boolean if a field has been set.
func (o *ParentalcontrolSubscriber) HasZveloUpdateFailureInDays() bool {
	if o != nil && !IsNil(o.ZveloUpdateFailureInDays) {
		return true
	}

	return false
}

// SetZveloUpdateFailureInDays gets a reference to the given int64 and assigns it to the ZveloUpdateFailureInDays field.
func (o *ParentalcontrolSubscriber) SetZveloUpdateFailureInDays(v int64) {
	o.ZveloUpdateFailureInDays = &v
}

func (o ParentalcontrolSubscriber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentalcontrolSubscriber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AltSubscriberId) {
		toSerialize["alt_subscriber_id"] = o.AltSubscriberId
	}
	if !IsNil(o.AltSubscriberIdRegexp) {
		toSerialize["alt_subscriber_id_regexp"] = o.AltSubscriberIdRegexp
	}
	if !IsNil(o.AltSubscriberIdSubexpression) {
		toSerialize["alt_subscriber_id_subexpression"] = o.AltSubscriberIdSubexpression
	}
	if !IsNil(o.Ancillaries) {
		toSerialize["ancillaries"] = o.Ancillaries
	}
	if !IsNil(o.CatAcctname) {
		toSerialize["cat_acctname"] = o.CatAcctname
	}
	if !IsNil(o.CatPassword) {
		toSerialize["cat_password"] = o.CatPassword
	}
	if !IsNil(o.CatUpdateFrequency) {
		toSerialize["cat_update_frequency"] = o.CatUpdateFrequency
	}
	if !IsNil(o.CategoryUrl) {
		toSerialize["category_url"] = o.CategoryUrl
	}
	if !IsNil(o.EnableMgmtOnlyNas) {
		toSerialize["enable_mgmt_only_nas"] = o.EnableMgmtOnlyNas
	}
	if !IsNil(o.EnableParentalControl) {
		toSerialize["enable_parental_control"] = o.EnableParentalControl
	}
	if !IsNil(o.InterimAccountingInterval) {
		toSerialize["interim_accounting_interval"] = o.InterimAccountingInterval
	}
	if !IsNil(o.IpAnchors) {
		toSerialize["ip_anchors"] = o.IpAnchors
	}
	if !IsNil(o.IpSpaceDiscRegexp) {
		toSerialize["ip_space_disc_regexp"] = o.IpSpaceDiscRegexp
	}
	if !IsNil(o.IpSpaceDiscSubexpression) {
		toSerialize["ip_space_disc_subexpression"] = o.IpSpaceDiscSubexpression
	}
	if !IsNil(o.IpSpaceDiscriminator) {
		toSerialize["ip_space_discriminator"] = o.IpSpaceDiscriminator
	}
	if !IsNil(o.LocalId) {
		toSerialize["local_id"] = o.LocalId
	}
	if !IsNil(o.LocalIdRegexp) {
		toSerialize["local_id_regexp"] = o.LocalIdRegexp
	}
	if !IsNil(o.LocalIdSubexpression) {
		toSerialize["local_id_subexpression"] = o.LocalIdSubexpression
	}
	if !IsNil(o.LogGuestLookups) {
		toSerialize["log_guest_lookups"] = o.LogGuestLookups
	}
	if !IsNil(o.NasContextInfo) {
		toSerialize["nas_context_info"] = o.NasContextInfo
	}
	if !IsNil(o.PcZoneName) {
		toSerialize["pc_zone_name"] = o.PcZoneName
	}
	if !IsNil(o.ProxyPassword) {
		toSerialize["proxy_password"] = o.ProxyPassword
	}
	if !IsNil(o.ProxyUrl) {
		toSerialize["proxy_url"] = o.ProxyUrl
	}
	if !IsNil(o.ProxyUsername) {
		toSerialize["proxy_username"] = o.ProxyUsername
	}
	if !IsNil(o.SubscriberId) {
		toSerialize["subscriber_id"] = o.SubscriberId
	}
	if !IsNil(o.SubscriberIdRegexp) {
		toSerialize["subscriber_id_regexp"] = o.SubscriberIdRegexp
	}
	if !IsNil(o.SubscriberIdSubexpression) {
		toSerialize["subscriber_id_subexpression"] = o.SubscriberIdSubexpression
	}
	if !IsNil(o.ZveloUpdateFailureInDays) {
		toSerialize["zvelo_update_failure_in_days"] = o.ZveloUpdateFailureInDays
	}
	return toSerialize, nil
}

type NullableParentalcontrolSubscriber struct {
	value *ParentalcontrolSubscriber
	isSet bool
}

func (v NullableParentalcontrolSubscriber) Get() *ParentalcontrolSubscriber {
	return v.value
}

func (v *NullableParentalcontrolSubscriber) Set(val *ParentalcontrolSubscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableParentalcontrolSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableParentalcontrolSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentalcontrolSubscriber(val *ParentalcontrolSubscriber) *NullableParentalcontrolSubscriber {
	return &NullableParentalcontrolSubscriber{value: val, isSet: true}
}

func (v NullableParentalcontrolSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentalcontrolSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
