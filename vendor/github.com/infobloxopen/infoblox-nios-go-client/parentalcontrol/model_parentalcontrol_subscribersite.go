/*
Infoblox PARENTALCONTROL API

OpenAPI specification for Infoblox NIOS WAPI PARENTALCONTROL objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parentalcontrol

import (
	"encoding/json"
)

// checks if the ParentalcontrolSubscribersite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentalcontrolSubscribersite{}

// ParentalcontrolSubscribersite struct for ParentalcontrolSubscribersite
type ParentalcontrolSubscribersite struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The list of ABS for the site.
	Abss []ParentalcontrolSubscribersiteAbss `json:"abss,omitempty"`
	// The list of API members for the site.
	ApiMembers []ParentalcontrolSubscribersiteApiMembers `json:"api_members,omitempty"`
	// The port number for gRPC API server.
	ApiPort *int64 `json:"api_port,omitempty"`
	// The size of the Deterministic NAT block-size.
	BlockSize *int64 `json:"block_size,omitempty"`
	// The IPv4 Address of the blocking server.
	BlockingIpv4Vip1 *string `json:"blocking_ipv4_vip1,omitempty"`
	// The IPv4 Address of the blocking server.
	BlockingIpv4Vip2 *string `json:"blocking_ipv4_vip2,omitempty"`
	// The IPv6 Address of the blocking server.
	BlockingIpv6Vip1 *string `json:"blocking_ipv6_vip1,omitempty"`
	// The IPv6 Address of the blocking server.
	BlockingIpv6Vip2 *string `json:"blocking_ipv6_vip2,omitempty"`
	// The human readable comment for the site.
	Comment *string `json:"comment,omitempty"`
	// Enable/disable the DCA subscriber B/W list support.
	DcaSubBwList *bool `json:"dca_sub_bw_list,omitempty"`
	// Enable/disable the DCA subscriber query count.
	DcaSubQueryCount *bool `json:"dca_sub_query_count,omitempty"`
	// Enable/disable global allow list RPZ setting.
	EnableGlobalAllowListRpz *bool `json:"enable_global_allow_list_rpz,omitempty"`
	// Enable/disable Subscriber Secure Policy Bypass for Allowed list.
	EnableRpzFilteringBypass *bool `json:"enable_rpz_filtering_bypass,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The start of the first Deterministic block.
	FirstPort *int64 `json:"first_port,omitempty"`
	// Global allow list RPZ index. Valid values are between 0 and 63.
	GlobalAllowListRpz *int64 `json:"global_allow_list_rpz,omitempty"`
	// The max number of subscribers for the site. It is used to configure the cache size.
	MaximumSubscribers *int64 `json:"maximum_subscribers,omitempty"`
	// The list of members for the site.
	Members []ParentalcontrolSubscribersiteMembers `json:"members,omitempty"`
	// The list of MSP for the site.
	Msps []ParentalcontrolSubscribersiteMsps `json:"msps,omitempty"`
	// The name of the site.
	Name *string `json:"name,omitempty"`
	// The list of accounting log servers.
	NasGateways []ParentalcontrolSubscribersiteNasGateways `json:"nas_gateways,omitempty"`
	// The port number to reach the collector.
	NasPort *int64 `json:"nas_port,omitempty"`
	// Enforce the global proxy list.
	ProxyRpzPassthru *bool `json:"proxy_rpz_passthru,omitempty"`
	// The list of SPM for the site.
	Spms []ParentalcontrolSubscribersiteSpms `json:"spms,omitempty"`
	// Stop the anycast service when the subscriber service is in the interim state.
	StopAnycast *bool `json:"stop_anycast,omitempty"`
	// Restrict subscriber cache entries to NATed clients.
	StrictNat *bool `json:"strict_nat,omitempty"`
	// Subscriber collection type either RADIUS or API.
	SubscriberCollectionType *string `json:"subscriber_collection_type,omitempty"`
}

// NewParentalcontrolSubscribersite instantiates a new ParentalcontrolSubscribersite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentalcontrolSubscribersite() *ParentalcontrolSubscribersite {
	this := ParentalcontrolSubscribersite{}
	return &this
}

// NewParentalcontrolSubscribersiteWithDefaults instantiates a new ParentalcontrolSubscribersite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentalcontrolSubscribersiteWithDefaults() *ParentalcontrolSubscribersite {
	this := ParentalcontrolSubscribersite{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *ParentalcontrolSubscribersite) SetRef(v string) {
	o.Ref = &v
}

// GetAbss returns the Abss field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetAbss() []ParentalcontrolSubscribersiteAbss {
	if o == nil || IsNil(o.Abss) {
		var ret []ParentalcontrolSubscribersiteAbss
		return ret
	}
	return o.Abss
}

// GetAbssOk returns a tuple with the Abss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetAbssOk() ([]ParentalcontrolSubscribersiteAbss, bool) {
	if o == nil || IsNil(o.Abss) {
		return nil, false
	}
	return o.Abss, true
}

// HasAbss returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasAbss() bool {
	if o != nil && !IsNil(o.Abss) {
		return true
	}

	return false
}

// SetAbss gets a reference to the given []ParentalcontrolSubscribersiteAbss and assigns it to the Abss field.
func (o *ParentalcontrolSubscribersite) SetAbss(v []ParentalcontrolSubscribersiteAbss) {
	o.Abss = v
}

// GetApiMembers returns the ApiMembers field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetApiMembers() []ParentalcontrolSubscribersiteApiMembers {
	if o == nil || IsNil(o.ApiMembers) {
		var ret []ParentalcontrolSubscribersiteApiMembers
		return ret
	}
	return o.ApiMembers
}

// GetApiMembersOk returns a tuple with the ApiMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetApiMembersOk() ([]ParentalcontrolSubscribersiteApiMembers, bool) {
	if o == nil || IsNil(o.ApiMembers) {
		return nil, false
	}
	return o.ApiMembers, true
}

// HasApiMembers returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasApiMembers() bool {
	if o != nil && !IsNil(o.ApiMembers) {
		return true
	}

	return false
}

// SetApiMembers gets a reference to the given []ParentalcontrolSubscribersiteApiMembers and assigns it to the ApiMembers field.
func (o *ParentalcontrolSubscribersite) SetApiMembers(v []ParentalcontrolSubscribersiteApiMembers) {
	o.ApiMembers = v
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetApiPort() int64 {
	if o == nil || IsNil(o.ApiPort) {
		var ret int64
		return ret
	}
	return *o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetApiPortOk() (*int64, bool) {
	if o == nil || IsNil(o.ApiPort) {
		return nil, false
	}
	return o.ApiPort, true
}

// HasApiPort returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasApiPort() bool {
	if o != nil && !IsNil(o.ApiPort) {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given int64 and assigns it to the ApiPort field.
func (o *ParentalcontrolSubscribersite) SetApiPort(v int64) {
	o.ApiPort = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetBlockSize() int64 {
	if o == nil || IsNil(o.BlockSize) {
		var ret int64
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetBlockSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given int64 and assigns it to the BlockSize field.
func (o *ParentalcontrolSubscribersite) SetBlockSize(v int64) {
	o.BlockSize = &v
}

// GetBlockingIpv4Vip1 returns the BlockingIpv4Vip1 field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv4Vip1() string {
	if o == nil || IsNil(o.BlockingIpv4Vip1) {
		var ret string
		return ret
	}
	return *o.BlockingIpv4Vip1
}

// GetBlockingIpv4Vip1Ok returns a tuple with the BlockingIpv4Vip1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv4Vip1Ok() (*string, bool) {
	if o == nil || IsNil(o.BlockingIpv4Vip1) {
		return nil, false
	}
	return o.BlockingIpv4Vip1, true
}

// HasBlockingIpv4Vip1 returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasBlockingIpv4Vip1() bool {
	if o != nil && !IsNil(o.BlockingIpv4Vip1) {
		return true
	}

	return false
}

// SetBlockingIpv4Vip1 gets a reference to the given string and assigns it to the BlockingIpv4Vip1 field.
func (o *ParentalcontrolSubscribersite) SetBlockingIpv4Vip1(v string) {
	o.BlockingIpv4Vip1 = &v
}

// GetBlockingIpv4Vip2 returns the BlockingIpv4Vip2 field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv4Vip2() string {
	if o == nil || IsNil(o.BlockingIpv4Vip2) {
		var ret string
		return ret
	}
	return *o.BlockingIpv4Vip2
}

// GetBlockingIpv4Vip2Ok returns a tuple with the BlockingIpv4Vip2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv4Vip2Ok() (*string, bool) {
	if o == nil || IsNil(o.BlockingIpv4Vip2) {
		return nil, false
	}
	return o.BlockingIpv4Vip2, true
}

// HasBlockingIpv4Vip2 returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasBlockingIpv4Vip2() bool {
	if o != nil && !IsNil(o.BlockingIpv4Vip2) {
		return true
	}

	return false
}

// SetBlockingIpv4Vip2 gets a reference to the given string and assigns it to the BlockingIpv4Vip2 field.
func (o *ParentalcontrolSubscribersite) SetBlockingIpv4Vip2(v string) {
	o.BlockingIpv4Vip2 = &v
}

// GetBlockingIpv6Vip1 returns the BlockingIpv6Vip1 field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv6Vip1() string {
	if o == nil || IsNil(o.BlockingIpv6Vip1) {
		var ret string
		return ret
	}
	return *o.BlockingIpv6Vip1
}

// GetBlockingIpv6Vip1Ok returns a tuple with the BlockingIpv6Vip1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv6Vip1Ok() (*string, bool) {
	if o == nil || IsNil(o.BlockingIpv6Vip1) {
		return nil, false
	}
	return o.BlockingIpv6Vip1, true
}

// HasBlockingIpv6Vip1 returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasBlockingIpv6Vip1() bool {
	if o != nil && !IsNil(o.BlockingIpv6Vip1) {
		return true
	}

	return false
}

// SetBlockingIpv6Vip1 gets a reference to the given string and assigns it to the BlockingIpv6Vip1 field.
func (o *ParentalcontrolSubscribersite) SetBlockingIpv6Vip1(v string) {
	o.BlockingIpv6Vip1 = &v
}

// GetBlockingIpv6Vip2 returns the BlockingIpv6Vip2 field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv6Vip2() string {
	if o == nil || IsNil(o.BlockingIpv6Vip2) {
		var ret string
		return ret
	}
	return *o.BlockingIpv6Vip2
}

// GetBlockingIpv6Vip2Ok returns a tuple with the BlockingIpv6Vip2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetBlockingIpv6Vip2Ok() (*string, bool) {
	if o == nil || IsNil(o.BlockingIpv6Vip2) {
		return nil, false
	}
	return o.BlockingIpv6Vip2, true
}

// HasBlockingIpv6Vip2 returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasBlockingIpv6Vip2() bool {
	if o != nil && !IsNil(o.BlockingIpv6Vip2) {
		return true
	}

	return false
}

// SetBlockingIpv6Vip2 gets a reference to the given string and assigns it to the BlockingIpv6Vip2 field.
func (o *ParentalcontrolSubscribersite) SetBlockingIpv6Vip2(v string) {
	o.BlockingIpv6Vip2 = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ParentalcontrolSubscribersite) SetComment(v string) {
	o.Comment = &v
}

// GetDcaSubBwList returns the DcaSubBwList field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetDcaSubBwList() bool {
	if o == nil || IsNil(o.DcaSubBwList) {
		var ret bool
		return ret
	}
	return *o.DcaSubBwList
}

// GetDcaSubBwListOk returns a tuple with the DcaSubBwList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetDcaSubBwListOk() (*bool, bool) {
	if o == nil || IsNil(o.DcaSubBwList) {
		return nil, false
	}
	return o.DcaSubBwList, true
}

// HasDcaSubBwList returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasDcaSubBwList() bool {
	if o != nil && !IsNil(o.DcaSubBwList) {
		return true
	}

	return false
}

// SetDcaSubBwList gets a reference to the given bool and assigns it to the DcaSubBwList field.
func (o *ParentalcontrolSubscribersite) SetDcaSubBwList(v bool) {
	o.DcaSubBwList = &v
}

// GetDcaSubQueryCount returns the DcaSubQueryCount field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetDcaSubQueryCount() bool {
	if o == nil || IsNil(o.DcaSubQueryCount) {
		var ret bool
		return ret
	}
	return *o.DcaSubQueryCount
}

// GetDcaSubQueryCountOk returns a tuple with the DcaSubQueryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetDcaSubQueryCountOk() (*bool, bool) {
	if o == nil || IsNil(o.DcaSubQueryCount) {
		return nil, false
	}
	return o.DcaSubQueryCount, true
}

// HasDcaSubQueryCount returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasDcaSubQueryCount() bool {
	if o != nil && !IsNil(o.DcaSubQueryCount) {
		return true
	}

	return false
}

// SetDcaSubQueryCount gets a reference to the given bool and assigns it to the DcaSubQueryCount field.
func (o *ParentalcontrolSubscribersite) SetDcaSubQueryCount(v bool) {
	o.DcaSubQueryCount = &v
}

// GetEnableGlobalAllowListRpz returns the EnableGlobalAllowListRpz field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetEnableGlobalAllowListRpz() bool {
	if o == nil || IsNil(o.EnableGlobalAllowListRpz) {
		var ret bool
		return ret
	}
	return *o.EnableGlobalAllowListRpz
}

// GetEnableGlobalAllowListRpzOk returns a tuple with the EnableGlobalAllowListRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetEnableGlobalAllowListRpzOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGlobalAllowListRpz) {
		return nil, false
	}
	return o.EnableGlobalAllowListRpz, true
}

// HasEnableGlobalAllowListRpz returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasEnableGlobalAllowListRpz() bool {
	if o != nil && !IsNil(o.EnableGlobalAllowListRpz) {
		return true
	}

	return false
}

// SetEnableGlobalAllowListRpz gets a reference to the given bool and assigns it to the EnableGlobalAllowListRpz field.
func (o *ParentalcontrolSubscribersite) SetEnableGlobalAllowListRpz(v bool) {
	o.EnableGlobalAllowListRpz = &v
}

// GetEnableRpzFilteringBypass returns the EnableRpzFilteringBypass field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetEnableRpzFilteringBypass() bool {
	if o == nil || IsNil(o.EnableRpzFilteringBypass) {
		var ret bool
		return ret
	}
	return *o.EnableRpzFilteringBypass
}

// GetEnableRpzFilteringBypassOk returns a tuple with the EnableRpzFilteringBypass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetEnableRpzFilteringBypassOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRpzFilteringBypass) {
		return nil, false
	}
	return o.EnableRpzFilteringBypass, true
}

// HasEnableRpzFilteringBypass returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasEnableRpzFilteringBypass() bool {
	if o != nil && !IsNil(o.EnableRpzFilteringBypass) {
		return true
	}

	return false
}

// SetEnableRpzFilteringBypass gets a reference to the given bool and assigns it to the EnableRpzFilteringBypass field.
func (o *ParentalcontrolSubscribersite) SetEnableRpzFilteringBypass(v bool) {
	o.EnableRpzFilteringBypass = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *ParentalcontrolSubscribersite) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetFirstPort returns the FirstPort field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetFirstPort() int64 {
	if o == nil || IsNil(o.FirstPort) {
		var ret int64
		return ret
	}
	return *o.FirstPort
}

// GetFirstPortOk returns a tuple with the FirstPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetFirstPortOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstPort) {
		return nil, false
	}
	return o.FirstPort, true
}

// HasFirstPort returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasFirstPort() bool {
	if o != nil && !IsNil(o.FirstPort) {
		return true
	}

	return false
}

// SetFirstPort gets a reference to the given int64 and assigns it to the FirstPort field.
func (o *ParentalcontrolSubscribersite) SetFirstPort(v int64) {
	o.FirstPort = &v
}

// GetGlobalAllowListRpz returns the GlobalAllowListRpz field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetGlobalAllowListRpz() int64 {
	if o == nil || IsNil(o.GlobalAllowListRpz) {
		var ret int64
		return ret
	}
	return *o.GlobalAllowListRpz
}

// GetGlobalAllowListRpzOk returns a tuple with the GlobalAllowListRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetGlobalAllowListRpzOk() (*int64, bool) {
	if o == nil || IsNil(o.GlobalAllowListRpz) {
		return nil, false
	}
	return o.GlobalAllowListRpz, true
}

// HasGlobalAllowListRpz returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasGlobalAllowListRpz() bool {
	if o != nil && !IsNil(o.GlobalAllowListRpz) {
		return true
	}

	return false
}

// SetGlobalAllowListRpz gets a reference to the given int64 and assigns it to the GlobalAllowListRpz field.
func (o *ParentalcontrolSubscribersite) SetGlobalAllowListRpz(v int64) {
	o.GlobalAllowListRpz = &v
}

// GetMaximumSubscribers returns the MaximumSubscribers field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetMaximumSubscribers() int64 {
	if o == nil || IsNil(o.MaximumSubscribers) {
		var ret int64
		return ret
	}
	return *o.MaximumSubscribers
}

// GetMaximumSubscribersOk returns a tuple with the MaximumSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetMaximumSubscribersOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumSubscribers) {
		return nil, false
	}
	return o.MaximumSubscribers, true
}

// HasMaximumSubscribers returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasMaximumSubscribers() bool {
	if o != nil && !IsNil(o.MaximumSubscribers) {
		return true
	}

	return false
}

// SetMaximumSubscribers gets a reference to the given int64 and assigns it to the MaximumSubscribers field.
func (o *ParentalcontrolSubscribersite) SetMaximumSubscribers(v int64) {
	o.MaximumSubscribers = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetMembers() []ParentalcontrolSubscribersiteMembers {
	if o == nil || IsNil(o.Members) {
		var ret []ParentalcontrolSubscribersiteMembers
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetMembersOk() ([]ParentalcontrolSubscribersiteMembers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []ParentalcontrolSubscribersiteMembers and assigns it to the Members field.
func (o *ParentalcontrolSubscribersite) SetMembers(v []ParentalcontrolSubscribersiteMembers) {
	o.Members = v
}

// GetMsps returns the Msps field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetMsps() []ParentalcontrolSubscribersiteMsps {
	if o == nil || IsNil(o.Msps) {
		var ret []ParentalcontrolSubscribersiteMsps
		return ret
	}
	return o.Msps
}

// GetMspsOk returns a tuple with the Msps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetMspsOk() ([]ParentalcontrolSubscribersiteMsps, bool) {
	if o == nil || IsNil(o.Msps) {
		return nil, false
	}
	return o.Msps, true
}

// HasMsps returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasMsps() bool {
	if o != nil && !IsNil(o.Msps) {
		return true
	}

	return false
}

// SetMsps gets a reference to the given []ParentalcontrolSubscribersiteMsps and assigns it to the Msps field.
func (o *ParentalcontrolSubscribersite) SetMsps(v []ParentalcontrolSubscribersiteMsps) {
	o.Msps = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParentalcontrolSubscribersite) SetName(v string) {
	o.Name = &v
}

// GetNasGateways returns the NasGateways field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetNasGateways() []ParentalcontrolSubscribersiteNasGateways {
	if o == nil || IsNil(o.NasGateways) {
		var ret []ParentalcontrolSubscribersiteNasGateways
		return ret
	}
	return o.NasGateways
}

// GetNasGatewaysOk returns a tuple with the NasGateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetNasGatewaysOk() ([]ParentalcontrolSubscribersiteNasGateways, bool) {
	if o == nil || IsNil(o.NasGateways) {
		return nil, false
	}
	return o.NasGateways, true
}

// HasNasGateways returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasNasGateways() bool {
	if o != nil && !IsNil(o.NasGateways) {
		return true
	}

	return false
}

// SetNasGateways gets a reference to the given []ParentalcontrolSubscribersiteNasGateways and assigns it to the NasGateways field.
func (o *ParentalcontrolSubscribersite) SetNasGateways(v []ParentalcontrolSubscribersiteNasGateways) {
	o.NasGateways = v
}

// GetNasPort returns the NasPort field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetNasPort() int64 {
	if o == nil || IsNil(o.NasPort) {
		var ret int64
		return ret
	}
	return *o.NasPort
}

// GetNasPortOk returns a tuple with the NasPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetNasPortOk() (*int64, bool) {
	if o == nil || IsNil(o.NasPort) {
		return nil, false
	}
	return o.NasPort, true
}

// HasNasPort returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasNasPort() bool {
	if o != nil && !IsNil(o.NasPort) {
		return true
	}

	return false
}

// SetNasPort gets a reference to the given int64 and assigns it to the NasPort field.
func (o *ParentalcontrolSubscribersite) SetNasPort(v int64) {
	o.NasPort = &v
}

// GetProxyRpzPassthru returns the ProxyRpzPassthru field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetProxyRpzPassthru() bool {
	if o == nil || IsNil(o.ProxyRpzPassthru) {
		var ret bool
		return ret
	}
	return *o.ProxyRpzPassthru
}

// GetProxyRpzPassthruOk returns a tuple with the ProxyRpzPassthru field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetProxyRpzPassthruOk() (*bool, bool) {
	if o == nil || IsNil(o.ProxyRpzPassthru) {
		return nil, false
	}
	return o.ProxyRpzPassthru, true
}

// HasProxyRpzPassthru returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasProxyRpzPassthru() bool {
	if o != nil && !IsNil(o.ProxyRpzPassthru) {
		return true
	}

	return false
}

// SetProxyRpzPassthru gets a reference to the given bool and assigns it to the ProxyRpzPassthru field.
func (o *ParentalcontrolSubscribersite) SetProxyRpzPassthru(v bool) {
	o.ProxyRpzPassthru = &v
}

// GetSpms returns the Spms field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetSpms() []ParentalcontrolSubscribersiteSpms {
	if o == nil || IsNil(o.Spms) {
		var ret []ParentalcontrolSubscribersiteSpms
		return ret
	}
	return o.Spms
}

// GetSpmsOk returns a tuple with the Spms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetSpmsOk() ([]ParentalcontrolSubscribersiteSpms, bool) {
	if o == nil || IsNil(o.Spms) {
		return nil, false
	}
	return o.Spms, true
}

// HasSpms returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasSpms() bool {
	if o != nil && !IsNil(o.Spms) {
		return true
	}

	return false
}

// SetSpms gets a reference to the given []ParentalcontrolSubscribersiteSpms and assigns it to the Spms field.
func (o *ParentalcontrolSubscribersite) SetSpms(v []ParentalcontrolSubscribersiteSpms) {
	o.Spms = v
}

// GetStopAnycast returns the StopAnycast field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetStopAnycast() bool {
	if o == nil || IsNil(o.StopAnycast) {
		var ret bool
		return ret
	}
	return *o.StopAnycast
}

// GetStopAnycastOk returns a tuple with the StopAnycast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetStopAnycastOk() (*bool, bool) {
	if o == nil || IsNil(o.StopAnycast) {
		return nil, false
	}
	return o.StopAnycast, true
}

// HasStopAnycast returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasStopAnycast() bool {
	if o != nil && !IsNil(o.StopAnycast) {
		return true
	}

	return false
}

// SetStopAnycast gets a reference to the given bool and assigns it to the StopAnycast field.
func (o *ParentalcontrolSubscribersite) SetStopAnycast(v bool) {
	o.StopAnycast = &v
}

// GetStrictNat returns the StrictNat field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetStrictNat() bool {
	if o == nil || IsNil(o.StrictNat) {
		var ret bool
		return ret
	}
	return *o.StrictNat
}

// GetStrictNatOk returns a tuple with the StrictNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetStrictNatOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictNat) {
		return nil, false
	}
	return o.StrictNat, true
}

// HasStrictNat returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasStrictNat() bool {
	if o != nil && !IsNil(o.StrictNat) {
		return true
	}

	return false
}

// SetStrictNat gets a reference to the given bool and assigns it to the StrictNat field.
func (o *ParentalcontrolSubscribersite) SetStrictNat(v bool) {
	o.StrictNat = &v
}

// GetSubscriberCollectionType returns the SubscriberCollectionType field value if set, zero value otherwise.
func (o *ParentalcontrolSubscribersite) GetSubscriberCollectionType() string {
	if o == nil || IsNil(o.SubscriberCollectionType) {
		var ret string
		return ret
	}
	return *o.SubscriberCollectionType
}

// GetSubscriberCollectionTypeOk returns a tuple with the SubscriberCollectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentalcontrolSubscribersite) GetSubscriberCollectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberCollectionType) {
		return nil, false
	}
	return o.SubscriberCollectionType, true
}

// HasSubscriberCollectionType returns a boolean if a field has been set.
func (o *ParentalcontrolSubscribersite) HasSubscriberCollectionType() bool {
	if o != nil && !IsNil(o.SubscriberCollectionType) {
		return true
	}

	return false
}

// SetSubscriberCollectionType gets a reference to the given string and assigns it to the SubscriberCollectionType field.
func (o *ParentalcontrolSubscribersite) SetSubscriberCollectionType(v string) {
	o.SubscriberCollectionType = &v
}

func (o ParentalcontrolSubscribersite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentalcontrolSubscribersite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Abss) {
		toSerialize["abss"] = o.Abss
	}
	if !IsNil(o.ApiMembers) {
		toSerialize["api_members"] = o.ApiMembers
	}
	if !IsNil(o.ApiPort) {
		toSerialize["api_port"] = o.ApiPort
	}
	if !IsNil(o.BlockSize) {
		toSerialize["block_size"] = o.BlockSize
	}
	if !IsNil(o.BlockingIpv4Vip1) {
		toSerialize["blocking_ipv4_vip1"] = o.BlockingIpv4Vip1
	}
	if !IsNil(o.BlockingIpv4Vip2) {
		toSerialize["blocking_ipv4_vip2"] = o.BlockingIpv4Vip2
	}
	if !IsNil(o.BlockingIpv6Vip1) {
		toSerialize["blocking_ipv6_vip1"] = o.BlockingIpv6Vip1
	}
	if !IsNil(o.BlockingIpv6Vip2) {
		toSerialize["blocking_ipv6_vip2"] = o.BlockingIpv6Vip2
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DcaSubBwList) {
		toSerialize["dca_sub_bw_list"] = o.DcaSubBwList
	}
	if !IsNil(o.DcaSubQueryCount) {
		toSerialize["dca_sub_query_count"] = o.DcaSubQueryCount
	}
	if !IsNil(o.EnableGlobalAllowListRpz) {
		toSerialize["enable_global_allow_list_rpz"] = o.EnableGlobalAllowListRpz
	}
	if !IsNil(o.EnableRpzFilteringBypass) {
		toSerialize["enable_rpz_filtering_bypass"] = o.EnableRpzFilteringBypass
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.FirstPort) {
		toSerialize["first_port"] = o.FirstPort
	}
	if !IsNil(o.GlobalAllowListRpz) {
		toSerialize["global_allow_list_rpz"] = o.GlobalAllowListRpz
	}
	if !IsNil(o.MaximumSubscribers) {
		toSerialize["maximum_subscribers"] = o.MaximumSubscribers
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Msps) {
		toSerialize["msps"] = o.Msps
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NasGateways) {
		toSerialize["nas_gateways"] = o.NasGateways
	}
	if !IsNil(o.NasPort) {
		toSerialize["nas_port"] = o.NasPort
	}
	if !IsNil(o.ProxyRpzPassthru) {
		toSerialize["proxy_rpz_passthru"] = o.ProxyRpzPassthru
	}
	if !IsNil(o.Spms) {
		toSerialize["spms"] = o.Spms
	}
	if !IsNil(o.StopAnycast) {
		toSerialize["stop_anycast"] = o.StopAnycast
	}
	if !IsNil(o.StrictNat) {
		toSerialize["strict_nat"] = o.StrictNat
	}
	if !IsNil(o.SubscriberCollectionType) {
		toSerialize["subscriber_collection_type"] = o.SubscriberCollectionType
	}
	return toSerialize, nil
}

type NullableParentalcontrolSubscribersite struct {
	value *ParentalcontrolSubscribersite
	isSet bool
}

func (v NullableParentalcontrolSubscribersite) Get() *ParentalcontrolSubscribersite {
	return v.value
}

func (v *NullableParentalcontrolSubscribersite) Set(val *ParentalcontrolSubscribersite) {
	v.value = val
	v.isSet = true
}

func (v NullableParentalcontrolSubscribersite) IsSet() bool {
	return v.isSet
}

func (v *NullableParentalcontrolSubscribersite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentalcontrolSubscribersite(val *ParentalcontrolSubscribersite) *NullableParentalcontrolSubscribersite {
	return &NullableParentalcontrolSubscribersite{value: val, isSet: true}
}

func (v NullableParentalcontrolSubscribersite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentalcontrolSubscribersite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
