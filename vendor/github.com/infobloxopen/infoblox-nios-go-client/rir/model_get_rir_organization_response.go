/*
Infoblox RIR API

OpenAPI specification for Infoblox NIOS WAPI RIR objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rir

import (
	"encoding/json"
	"fmt"
)

// GetRirOrganizationResponse - struct for GetRirOrganizationResponse
type GetRirOrganizationResponse struct {
	GetRirOrganizationResponseObjectAsResult *GetRirOrganizationResponseObjectAsResult
	RirOrganization                          *RirOrganization
}

// GetRirOrganizationResponseObjectAsResultAsGetRirOrganizationResponse is a convenience function that returns GetRirOrganizationResponseObjectAsResult wrapped in GetRirOrganizationResponse
func GetRirOrganizationResponseObjectAsResultAsGetRirOrganizationResponse(v *GetRirOrganizationResponseObjectAsResult) GetRirOrganizationResponse {
	return GetRirOrganizationResponse{
		GetRirOrganizationResponseObjectAsResult: v,
	}
}

// RirOrganizationAsGetRirOrganizationResponse is a convenience function that returns RirOrganization wrapped in GetRirOrganizationResponse
func RirOrganizationAsGetRirOrganizationResponse(v *RirOrganization) GetRirOrganizationResponse {
	return GetRirOrganizationResponse{
		RirOrganization: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRirOrganizationResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRirOrganizationResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRirOrganizationResponseObjectAsResult)
	if err == nil {
		jsonGetRirOrganizationResponseObjectAsResult, _ := json.Marshal(dst.GetRirOrganizationResponseObjectAsResult)
		if string(jsonGetRirOrganizationResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRirOrganizationResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRirOrganizationResponseObjectAsResult = nil
	}

	// try to unmarshal data into RirOrganization
	err = newStrictDecoder(data).Decode(&dst.RirOrganization)
	if err == nil {
		jsonRirOrganization, _ := json.Marshal(dst.RirOrganization)
		if string(jsonRirOrganization) == "{}" { // empty struct
			dst.RirOrganization = nil
		} else {
			match++
		}
	} else {
		dst.RirOrganization = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRirOrganizationResponseObjectAsResult = nil
		dst.RirOrganization = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRirOrganizationResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRirOrganizationResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRirOrganizationResponse) MarshalJSON() ([]byte, error) {
	if src.GetRirOrganizationResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRirOrganizationResponseObjectAsResult)
	}

	if src.RirOrganization != nil {
		return json.Marshal(&src.RirOrganization)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRirOrganizationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRirOrganizationResponseObjectAsResult != nil {
		return obj.GetRirOrganizationResponseObjectAsResult
	}

	if obj.RirOrganization != nil {
		return obj.RirOrganization
	}

	// all schemas are nil
	return nil
}

type NullableGetRirOrganizationResponse struct {
	value *GetRirOrganizationResponse
	isSet bool
}

func (v NullableGetRirOrganizationResponse) Get() *GetRirOrganizationResponse {
	return v.value
}

func (v *NullableGetRirOrganizationResponse) Set(val *GetRirOrganizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRirOrganizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRirOrganizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRirOrganizationResponse(val *GetRirOrganizationResponse) *NullableGetRirOrganizationResponse {
	return &NullableGetRirOrganizationResponse{value: val, isSet: true}
}

func (v NullableGetRirOrganizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRirOrganizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
