/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type RecordRpzCnameClientipaddressAPI interface {
	/*
		Create Create a record:rpz:cname:clientipaddress object

		Creates a new record:rpz:cname:clientipaddress object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameClientipaddressAPICreateRequest
	*/
	Create(ctx context.Context) RecordRpzCnameClientipaddressAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateRecordRpzCnameClientipaddressResponse
	CreateExecute(r RecordRpzCnameClientipaddressAPICreateRequest) (*CreateRecordRpzCnameClientipaddressResponse, *http.Response, error)
	/*
		Delete Delete a record:rpz:cname:clientipaddress object

		Deletes a specific record:rpz:cname:clientipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddress object
		@return RecordRpzCnameClientipaddressAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r RecordRpzCnameClientipaddressAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve record:rpz:cname:clientipaddress objects

		Returns a list of record:rpz:cname:clientipaddress objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return RecordRpzCnameClientipaddressAPIListRequest
	*/
	List(ctx context.Context) RecordRpzCnameClientipaddressAPIListRequest

	// ListExecute executes the request
	//  @return ListRecordRpzCnameClientipaddressResponse
	ListExecute(r RecordRpzCnameClientipaddressAPIListRequest) (*ListRecordRpzCnameClientipaddressResponse, *http.Response, error)
	/*
		Read Get a specific record:rpz:cname:clientipaddress object

		Returns a specific record:rpz:cname:clientipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddress object
		@return RecordRpzCnameClientipaddressAPIReadRequest
	*/
	Read(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIReadRequest

	// ReadExecute executes the request
	//  @return GetRecordRpzCnameClientipaddressResponse
	ReadExecute(r RecordRpzCnameClientipaddressAPIReadRequest) (*GetRecordRpzCnameClientipaddressResponse, *http.Response, error)
	/*
		Update Update a record:rpz:cname:clientipaddress object

		Updates a specific record:rpz:cname:clientipaddress object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the record:rpz:cname:clientipaddress object
		@return RecordRpzCnameClientipaddressAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateRecordRpzCnameClientipaddressResponse
	UpdateExecute(r RecordRpzCnameClientipaddressAPIUpdateRequest) (*UpdateRecordRpzCnameClientipaddressResponse, *http.Response, error)
}

// RecordRpzCnameClientipaddressAPIService RecordRpzCnameClientipaddressAPI service
type RecordRpzCnameClientipaddressAPIService internal.Service

type RecordRpzCnameClientipaddressAPICreateRequest struct {
	ctx                           context.Context
	ApiService                    RecordRpzCnameClientipaddressAPI
	recordRpzCnameClientipaddress *RecordRpzCnameClientipaddress
	returnFields                  *string
	returnFieldsPlus              *string
	returnAsObject                *int32
}

// Object data to create
func (r RecordRpzCnameClientipaddressAPICreateRequest) RecordRpzCnameClientipaddress(recordRpzCnameClientipaddress RecordRpzCnameClientipaddress) RecordRpzCnameClientipaddressAPICreateRequest {
	r.recordRpzCnameClientipaddress = &recordRpzCnameClientipaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameClientipaddressAPICreateRequest) ReturnFields(returnFields string) RecordRpzCnameClientipaddressAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameClientipaddressAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameClientipaddressAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameClientipaddressAPICreateRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameClientipaddressAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameClientipaddressAPICreateRequest) Execute() (*CreateRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a record:rpz:cname:clientipaddress object

Creates a new record:rpz:cname:clientipaddress object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameClientipaddressAPICreateRequest
*/
func (a *RecordRpzCnameClientipaddressAPIService) Create(ctx context.Context) RecordRpzCnameClientipaddressAPICreateRequest {
	return RecordRpzCnameClientipaddressAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateRecordRpzCnameClientipaddressResponse
func (a *RecordRpzCnameClientipaddressAPIService) CreateExecute(r RecordRpzCnameClientipaddressAPICreateRequest) (*CreateRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateRecordRpzCnameClientipaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameClientipaddressAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameClientipaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameClientipaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameClientipaddress != nil {
		if r.recordRpzCnameClientipaddress.ExtAttrs == nil {
			r.recordRpzCnameClientipaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameClientipaddress.ExtAttrs)[k]; !ok {
				(*r.recordRpzCnameClientipaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameClientipaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameClientipaddressAPIDeleteRequest struct {
	ctx        context.Context
	ApiService RecordRpzCnameClientipaddressAPI
	reference  string
}

func (r RecordRpzCnameClientipaddressAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a record:rpz:cname:clientipaddress object

Deletes a specific record:rpz:cname:clientipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddress object
	@return RecordRpzCnameClientipaddressAPIDeleteRequest
*/
func (a *RecordRpzCnameClientipaddressAPIService) Delete(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIDeleteRequest {
	return RecordRpzCnameClientipaddressAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *RecordRpzCnameClientipaddressAPIService) DeleteExecute(r RecordRpzCnameClientipaddressAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameClientipaddressAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RecordRpzCnameClientipaddressAPIListRequest struct {
	ctx              context.Context
	ApiService       RecordRpzCnameClientipaddressAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r RecordRpzCnameClientipaddressAPIListRequest) ReturnFields(returnFields string) RecordRpzCnameClientipaddressAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameClientipaddressAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameClientipaddressAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r RecordRpzCnameClientipaddressAPIListRequest) MaxResults(maxResults int32) RecordRpzCnameClientipaddressAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameClientipaddressAPIListRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameClientipaddressAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r RecordRpzCnameClientipaddressAPIListRequest) Paging(paging int32) RecordRpzCnameClientipaddressAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r RecordRpzCnameClientipaddressAPIListRequest) PageId(pageId string) RecordRpzCnameClientipaddressAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r RecordRpzCnameClientipaddressAPIListRequest) Filters(filters map[string]interface{}) RecordRpzCnameClientipaddressAPIListRequest {
	r.filters = &filters
	return r
}

func (r RecordRpzCnameClientipaddressAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) RecordRpzCnameClientipaddressAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r RecordRpzCnameClientipaddressAPIListRequest) Execute() (*ListRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve record:rpz:cname:clientipaddress objects

Returns a list of record:rpz:cname:clientipaddress objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return RecordRpzCnameClientipaddressAPIListRequest
*/
func (a *RecordRpzCnameClientipaddressAPIService) List(ctx context.Context) RecordRpzCnameClientipaddressAPIListRequest {
	return RecordRpzCnameClientipaddressAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListRecordRpzCnameClientipaddressResponse
func (a *RecordRpzCnameClientipaddressAPIService) ListExecute(r RecordRpzCnameClientipaddressAPIListRequest) (*ListRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListRecordRpzCnameClientipaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameClientipaddressAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameClientipaddressAPIReadRequest struct {
	ctx              context.Context
	ApiService       RecordRpzCnameClientipaddressAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r RecordRpzCnameClientipaddressAPIReadRequest) ReturnFields(returnFields string) RecordRpzCnameClientipaddressAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameClientipaddressAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameClientipaddressAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameClientipaddressAPIReadRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameClientipaddressAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameClientipaddressAPIReadRequest) Execute() (*GetRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific record:rpz:cname:clientipaddress object

Returns a specific record:rpz:cname:clientipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddress object
	@return RecordRpzCnameClientipaddressAPIReadRequest
*/
func (a *RecordRpzCnameClientipaddressAPIService) Read(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIReadRequest {
	return RecordRpzCnameClientipaddressAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetRecordRpzCnameClientipaddressResponse
func (a *RecordRpzCnameClientipaddressAPIService) ReadExecute(r RecordRpzCnameClientipaddressAPIReadRequest) (*GetRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetRecordRpzCnameClientipaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameClientipaddressAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type RecordRpzCnameClientipaddressAPIUpdateRequest struct {
	ctx                           context.Context
	ApiService                    RecordRpzCnameClientipaddressAPI
	reference                     string
	recordRpzCnameClientipaddress *RecordRpzCnameClientipaddress
	returnFields                  *string
	returnFieldsPlus              *string
	returnAsObject                *int32
}

// Object data to update
func (r RecordRpzCnameClientipaddressAPIUpdateRequest) RecordRpzCnameClientipaddress(recordRpzCnameClientipaddress RecordRpzCnameClientipaddress) RecordRpzCnameClientipaddressAPIUpdateRequest {
	r.recordRpzCnameClientipaddress = &recordRpzCnameClientipaddress
	return r
}

// Enter the field names followed by comma
func (r RecordRpzCnameClientipaddressAPIUpdateRequest) ReturnFields(returnFields string) RecordRpzCnameClientipaddressAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r RecordRpzCnameClientipaddressAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) RecordRpzCnameClientipaddressAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r RecordRpzCnameClientipaddressAPIUpdateRequest) ReturnAsObject(returnAsObject int32) RecordRpzCnameClientipaddressAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r RecordRpzCnameClientipaddressAPIUpdateRequest) Execute() (*UpdateRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a record:rpz:cname:clientipaddress object

Updates a specific record:rpz:cname:clientipaddress object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the record:rpz:cname:clientipaddress object
	@return RecordRpzCnameClientipaddressAPIUpdateRequest
*/
func (a *RecordRpzCnameClientipaddressAPIService) Update(ctx context.Context, reference string) RecordRpzCnameClientipaddressAPIUpdateRequest {
	return RecordRpzCnameClientipaddressAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateRecordRpzCnameClientipaddressResponse
func (a *RecordRpzCnameClientipaddressAPIService) UpdateExecute(r RecordRpzCnameClientipaddressAPIUpdateRequest) (*UpdateRecordRpzCnameClientipaddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateRecordRpzCnameClientipaddressResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "RecordRpzCnameClientipaddressAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/record:rpz:cname:clientipaddress/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.recordRpzCnameClientipaddress == nil {
		return localVarReturnValue, nil, internal.ReportError("recordRpzCnameClientipaddress is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultExtAttrs) > 0 && r.recordRpzCnameClientipaddress != nil {
		if r.recordRpzCnameClientipaddress.ExtAttrs == nil {
			r.recordRpzCnameClientipaddress.ExtAttrs = &map[string]ExtAttrs{}
		}
		for k, v := range a.Client.Cfg.DefaultExtAttrs {
			if _, ok := (*r.recordRpzCnameClientipaddress.ExtAttrs)[k]; !ok {
				(*r.recordRpzCnameClientipaddress.ExtAttrs)[k] = ExtAttrs{
					Value: v.Value,
				}
			}
		}
	}
	// body params
	localVarPostBody = r.recordRpzCnameClientipaddress
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
