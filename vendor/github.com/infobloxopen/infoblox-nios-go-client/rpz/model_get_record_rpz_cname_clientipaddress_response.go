/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzCnameClientipaddressResponse - struct for GetRecordRpzCnameClientipaddressResponse
type GetRecordRpzCnameClientipaddressResponse struct {
	GetRecordRpzCnameClientipaddressResponseObjectAsResult *GetRecordRpzCnameClientipaddressResponseObjectAsResult
	RecordRpzCnameClientipaddress                          *RecordRpzCnameClientipaddress
}

// GetRecordRpzCnameClientipaddressResponseObjectAsResultAsGetRecordRpzCnameClientipaddressResponse is a convenience function that returns GetRecordRpzCnameClientipaddressResponseObjectAsResult wrapped in GetRecordRpzCnameClientipaddressResponse
func GetRecordRpzCnameClientipaddressResponseObjectAsResultAsGetRecordRpzCnameClientipaddressResponse(v *GetRecordRpzCnameClientipaddressResponseObjectAsResult) GetRecordRpzCnameClientipaddressResponse {
	return GetRecordRpzCnameClientipaddressResponse{
		GetRecordRpzCnameClientipaddressResponseObjectAsResult: v,
	}
}

// RecordRpzCnameClientipaddressAsGetRecordRpzCnameClientipaddressResponse is a convenience function that returns RecordRpzCnameClientipaddress wrapped in GetRecordRpzCnameClientipaddressResponse
func RecordRpzCnameClientipaddressAsGetRecordRpzCnameClientipaddressResponse(v *RecordRpzCnameClientipaddress) GetRecordRpzCnameClientipaddressResponse {
	return GetRecordRpzCnameClientipaddressResponse{
		RecordRpzCnameClientipaddress: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzCnameClientipaddressResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzCnameClientipaddressResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzCnameClientipaddressResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzCnameClientipaddressResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzCnameClientipaddressResponseObjectAsResult)
		if string(jsonGetRecordRpzCnameClientipaddressResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzCnameClientipaddressResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzCnameClientipaddressResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzCnameClientipaddress
	err = newStrictDecoder(data).Decode(&dst.RecordRpzCnameClientipaddress)
	if err == nil {
		jsonRecordRpzCnameClientipaddress, _ := json.Marshal(dst.RecordRpzCnameClientipaddress)
		if string(jsonRecordRpzCnameClientipaddress) == "{}" { // empty struct
			dst.RecordRpzCnameClientipaddress = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzCnameClientipaddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzCnameClientipaddressResponseObjectAsResult = nil
		dst.RecordRpzCnameClientipaddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzCnameClientipaddressResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzCnameClientipaddressResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzCnameClientipaddressResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzCnameClientipaddressResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzCnameClientipaddressResponseObjectAsResult)
	}

	if src.RecordRpzCnameClientipaddress != nil {
		return json.Marshal(&src.RecordRpzCnameClientipaddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzCnameClientipaddressResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzCnameClientipaddressResponseObjectAsResult != nil {
		return obj.GetRecordRpzCnameClientipaddressResponseObjectAsResult
	}

	if obj.RecordRpzCnameClientipaddress != nil {
		return obj.RecordRpzCnameClientipaddress
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzCnameClientipaddressResponse struct {
	value *GetRecordRpzCnameClientipaddressResponse
	isSet bool
}

func (v NullableGetRecordRpzCnameClientipaddressResponse) Get() *GetRecordRpzCnameClientipaddressResponse {
	return v.value
}

func (v *NullableGetRecordRpzCnameClientipaddressResponse) Set(val *GetRecordRpzCnameClientipaddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzCnameClientipaddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzCnameClientipaddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzCnameClientipaddressResponse(val *GetRecordRpzCnameClientipaddressResponse) *NullableGetRecordRpzCnameClientipaddressResponse {
	return &NullableGetRecordRpzCnameClientipaddressResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzCnameClientipaddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzCnameClientipaddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
