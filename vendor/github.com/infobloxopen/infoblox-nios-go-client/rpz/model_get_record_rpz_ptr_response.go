/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// GetRecordRpzPtrResponse - struct for GetRecordRpzPtrResponse
type GetRecordRpzPtrResponse struct {
	GetRecordRpzPtrResponseObjectAsResult *GetRecordRpzPtrResponseObjectAsResult
	RecordRpzPtr                          *RecordRpzPtr
}

// GetRecordRpzPtrResponseObjectAsResultAsGetRecordRpzPtrResponse is a convenience function that returns GetRecordRpzPtrResponseObjectAsResult wrapped in GetRecordRpzPtrResponse
func GetRecordRpzPtrResponseObjectAsResultAsGetRecordRpzPtrResponse(v *GetRecordRpzPtrResponseObjectAsResult) GetRecordRpzPtrResponse {
	return GetRecordRpzPtrResponse{
		GetRecordRpzPtrResponseObjectAsResult: v,
	}
}

// RecordRpzPtrAsGetRecordRpzPtrResponse is a convenience function that returns RecordRpzPtr wrapped in GetRecordRpzPtrResponse
func RecordRpzPtrAsGetRecordRpzPtrResponse(v *RecordRpzPtr) GetRecordRpzPtrResponse {
	return GetRecordRpzPtrResponse{
		RecordRpzPtr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRecordRpzPtrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetRecordRpzPtrResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetRecordRpzPtrResponseObjectAsResult)
	if err == nil {
		jsonGetRecordRpzPtrResponseObjectAsResult, _ := json.Marshal(dst.GetRecordRpzPtrResponseObjectAsResult)
		if string(jsonGetRecordRpzPtrResponseObjectAsResult) == "{}" { // empty struct
			dst.GetRecordRpzPtrResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetRecordRpzPtrResponseObjectAsResult = nil
	}

	// try to unmarshal data into RecordRpzPtr
	err = newStrictDecoder(data).Decode(&dst.RecordRpzPtr)
	if err == nil {
		jsonRecordRpzPtr, _ := json.Marshal(dst.RecordRpzPtr)
		if string(jsonRecordRpzPtr) == "{}" { // empty struct
			dst.RecordRpzPtr = nil
		} else {
			match++
		}
	} else {
		dst.RecordRpzPtr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetRecordRpzPtrResponseObjectAsResult = nil
		dst.RecordRpzPtr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRecordRpzPtrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRecordRpzPtrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRecordRpzPtrResponse) MarshalJSON() ([]byte, error) {
	if src.GetRecordRpzPtrResponseObjectAsResult != nil {
		return json.Marshal(&src.GetRecordRpzPtrResponseObjectAsResult)
	}

	if src.RecordRpzPtr != nil {
		return json.Marshal(&src.RecordRpzPtr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRecordRpzPtrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetRecordRpzPtrResponseObjectAsResult != nil {
		return obj.GetRecordRpzPtrResponseObjectAsResult
	}

	if obj.RecordRpzPtr != nil {
		return obj.RecordRpzPtr
	}

	// all schemas are nil
	return nil
}

type NullableGetRecordRpzPtrResponse struct {
	value *GetRecordRpzPtrResponse
	isSet bool
}

func (v NullableGetRecordRpzPtrResponse) Get() *GetRecordRpzPtrResponse {
	return v.value
}

func (v *NullableGetRecordRpzPtrResponse) Set(val *GetRecordRpzPtrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecordRpzPtrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecordRpzPtrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecordRpzPtrResponse(val *GetRecordRpzPtrResponse) *NullableGetRecordRpzPtrResponse {
	return &NullableGetRecordRpzPtrResponse{value: val, isSet: true}
}

func (v NullableGetRecordRpzPtrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecordRpzPtrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
