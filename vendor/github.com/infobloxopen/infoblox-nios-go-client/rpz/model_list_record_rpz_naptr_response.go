/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzNaptrResponse - struct for ListRecordRpzNaptrResponse
type ListRecordRpzNaptrResponse struct {
	ListRecordRpzNaptrResponseObject *ListRecordRpzNaptrResponseObject
	ArrayOfRecordRpzNaptr            *[]RecordRpzNaptr
}

// ListRecordRpzNaptrResponseObjectAsListRecordRpzNaptrResponse is a convenience function that returns ListRecordRpzNaptrResponseObject wrapped in ListRecordRpzNaptrResponse
func ListRecordRpzNaptrResponseObjectAsListRecordRpzNaptrResponse(v *ListRecordRpzNaptrResponseObject) ListRecordRpzNaptrResponse {
	return ListRecordRpzNaptrResponse{
		ListRecordRpzNaptrResponseObject: v,
	}
}

// []RecordRpzNaptrAsListRecordRpzNaptrResponse is a convenience function that returns []RecordRpzNaptr wrapped in ListRecordRpzNaptrResponse
func ArrayOfRecordRpzNaptrAsListRecordRpzNaptrResponse(v *[]RecordRpzNaptr) ListRecordRpzNaptrResponse {
	return ListRecordRpzNaptrResponse{
		ArrayOfRecordRpzNaptr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzNaptrResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzNaptrResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzNaptrResponseObject)
	if err == nil {
		jsonListRecordRpzNaptrResponseObject, _ := json.Marshal(dst.ListRecordRpzNaptrResponseObject)
		if string(jsonListRecordRpzNaptrResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzNaptrResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzNaptrResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzNaptr
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzNaptr)
	if err == nil {
		jsonArrayOfRecordRpzNaptr, _ := json.Marshal(dst.ArrayOfRecordRpzNaptr)
		if string(jsonArrayOfRecordRpzNaptr) == "{}" { // empty struct
			dst.ArrayOfRecordRpzNaptr = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzNaptr = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzNaptrResponseObject = nil
		dst.ArrayOfRecordRpzNaptr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzNaptrResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzNaptrResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzNaptrResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzNaptrResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzNaptrResponseObject)
	}

	if src.ArrayOfRecordRpzNaptr != nil {
		return json.Marshal(&src.ArrayOfRecordRpzNaptr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzNaptrResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzNaptrResponseObject != nil {
		return obj.ListRecordRpzNaptrResponseObject
	}

	if obj.ArrayOfRecordRpzNaptr != nil {
		return obj.ArrayOfRecordRpzNaptr
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzNaptrResponse struct {
	value *ListRecordRpzNaptrResponse
	isSet bool
}

func (v NullableListRecordRpzNaptrResponse) Get() *ListRecordRpzNaptrResponse {
	return v.value
}

func (v *NullableListRecordRpzNaptrResponse) Set(val *ListRecordRpzNaptrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzNaptrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzNaptrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzNaptrResponse(val *ListRecordRpzNaptrResponse) *NullableListRecordRpzNaptrResponse {
	return &NullableListRecordRpzNaptrResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzNaptrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzNaptrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
