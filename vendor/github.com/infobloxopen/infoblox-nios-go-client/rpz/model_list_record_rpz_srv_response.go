/*
Infoblox RPZ API

OpenAPI specification for Infoblox NIOS WAPI RPZ objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpz

import (
	"encoding/json"
	"fmt"
)

// ListRecordRpzSrvResponse - struct for ListRecordRpzSrvResponse
type ListRecordRpzSrvResponse struct {
	ListRecordRpzSrvResponseObject *ListRecordRpzSrvResponseObject
	ArrayOfRecordRpzSrv            *[]RecordRpzSrv
}

// ListRecordRpzSrvResponseObjectAsListRecordRpzSrvResponse is a convenience function that returns ListRecordRpzSrvResponseObject wrapped in ListRecordRpzSrvResponse
func ListRecordRpzSrvResponseObjectAsListRecordRpzSrvResponse(v *ListRecordRpzSrvResponseObject) ListRecordRpzSrvResponse {
	return ListRecordRpzSrvResponse{
		ListRecordRpzSrvResponseObject: v,
	}
}

// []RecordRpzSrvAsListRecordRpzSrvResponse is a convenience function that returns []RecordRpzSrv wrapped in ListRecordRpzSrvResponse
func ArrayOfRecordRpzSrvAsListRecordRpzSrvResponse(v *[]RecordRpzSrv) ListRecordRpzSrvResponse {
	return ListRecordRpzSrvResponse{
		ArrayOfRecordRpzSrv: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListRecordRpzSrvResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListRecordRpzSrvResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListRecordRpzSrvResponseObject)
	if err == nil {
		jsonListRecordRpzSrvResponseObject, _ := json.Marshal(dst.ListRecordRpzSrvResponseObject)
		if string(jsonListRecordRpzSrvResponseObject) == "{}" { // empty struct
			dst.ListRecordRpzSrvResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListRecordRpzSrvResponseObject = nil
	}

	// try to unmarshal data into ArrayOfRecordRpzSrv
	err = newStrictDecoder(data).Decode(&dst.ArrayOfRecordRpzSrv)
	if err == nil {
		jsonArrayOfRecordRpzSrv, _ := json.Marshal(dst.ArrayOfRecordRpzSrv)
		if string(jsonArrayOfRecordRpzSrv) == "{}" { // empty struct
			dst.ArrayOfRecordRpzSrv = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfRecordRpzSrv = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListRecordRpzSrvResponseObject = nil
		dst.ArrayOfRecordRpzSrv = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListRecordRpzSrvResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListRecordRpzSrvResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListRecordRpzSrvResponse) MarshalJSON() ([]byte, error) {
	if src.ListRecordRpzSrvResponseObject != nil {
		return json.Marshal(&src.ListRecordRpzSrvResponseObject)
	}

	if src.ArrayOfRecordRpzSrv != nil {
		return json.Marshal(&src.ArrayOfRecordRpzSrv)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListRecordRpzSrvResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListRecordRpzSrvResponseObject != nil {
		return obj.ListRecordRpzSrvResponseObject
	}

	if obj.ArrayOfRecordRpzSrv != nil {
		return obj.ArrayOfRecordRpzSrv
	}

	// all schemas are nil
	return nil
}

type NullableListRecordRpzSrvResponse struct {
	value *ListRecordRpzSrvResponse
	isSet bool
}

func (v NullableListRecordRpzSrvResponse) Get() *ListRecordRpzSrvResponse {
	return v.value
}

func (v *NullableListRecordRpzSrvResponse) Set(val *ListRecordRpzSrvResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListRecordRpzSrvResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListRecordRpzSrvResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRecordRpzSrvResponse(val *ListRecordRpzSrvResponse) *NullableListRecordRpzSrvResponse {
	return &NullableListRecordRpzSrvResponse{value: val, isSet: true}
}

func (v NullableListRecordRpzSrvResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRecordRpzSrvResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
