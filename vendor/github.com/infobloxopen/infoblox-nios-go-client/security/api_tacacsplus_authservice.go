/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type TacacsplusAuthserviceAPI interface {
	/*
		Create Create a tacacsplus:authservice object

		Creates a new tacacsplus:authservice object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TacacsplusAuthserviceAPICreateRequest
	*/
	Create(ctx context.Context) TacacsplusAuthserviceAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateTacacsplusAuthserviceResponse
	CreateExecute(r TacacsplusAuthserviceAPICreateRequest) (*CreateTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		Delete Delete a tacacsplus:authservice object

		Deletes a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) TacacsplusAuthserviceAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r TacacsplusAuthserviceAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve tacacsplus:authservice objects

		Returns a list of tacacsplus:authservice objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return TacacsplusAuthserviceAPIListRequest
	*/
	List(ctx context.Context) TacacsplusAuthserviceAPIListRequest

	// ListExecute executes the request
	//  @return ListTacacsplusAuthserviceResponse
	ListExecute(r TacacsplusAuthserviceAPIListRequest) (*ListTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		Read Get a specific tacacsplus:authservice object

		Returns a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPIReadRequest
	*/
	Read(ctx context.Context, reference string) TacacsplusAuthserviceAPIReadRequest

	// ReadExecute executes the request
	//  @return GetTacacsplusAuthserviceResponse
	ReadExecute(r TacacsplusAuthserviceAPIReadRequest) (*GetTacacsplusAuthserviceResponse, *http.Response, error)
	/*
		Update Update a tacacsplus:authservice object

		Updates a specific tacacsplus:authservice object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the tacacsplus:authservice object
		@return TacacsplusAuthserviceAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) TacacsplusAuthserviceAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateTacacsplusAuthserviceResponse
	UpdateExecute(r TacacsplusAuthserviceAPIUpdateRequest) (*UpdateTacacsplusAuthserviceResponse, *http.Response, error)
}

// TacacsplusAuthserviceAPIService TacacsplusAuthserviceAPI service
type TacacsplusAuthserviceAPIService internal.Service

type TacacsplusAuthserviceAPICreateRequest struct {
	ctx                   context.Context
	ApiService            TacacsplusAuthserviceAPI
	tacacsplusAuthservice *TacacsplusAuthservice
	returnFields          *string
	returnFieldsPlus      *string
	returnAsObject        *int32
}

// Object data to create
func (r TacacsplusAuthserviceAPICreateRequest) TacacsplusAuthservice(tacacsplusAuthservice TacacsplusAuthservice) TacacsplusAuthserviceAPICreateRequest {
	r.tacacsplusAuthservice = &tacacsplusAuthservice
	return r
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPICreateRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) TacacsplusAuthserviceAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPICreateRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPICreateRequest) Execute() (*CreateTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a tacacsplus:authservice object

Creates a new tacacsplus:authservice object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TacacsplusAuthserviceAPICreateRequest
*/
func (a *TacacsplusAuthserviceAPIService) Create(ctx context.Context) TacacsplusAuthserviceAPICreateRequest {
	return TacacsplusAuthserviceAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) CreateExecute(r TacacsplusAuthserviceAPICreateRequest) (*CreateTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tacacsplusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("tacacsplusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tacacsplusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPIDeleteRequest struct {
	ctx        context.Context
	ApiService TacacsplusAuthserviceAPI
	reference  string
}

func (r TacacsplusAuthserviceAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a tacacsplus:authservice object

Deletes a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPIDeleteRequest
*/
func (a *TacacsplusAuthserviceAPIService) Delete(ctx context.Context, reference string) TacacsplusAuthserviceAPIDeleteRequest {
	return TacacsplusAuthserviceAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *TacacsplusAuthserviceAPIService) DeleteExecute(r TacacsplusAuthserviceAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPIListRequest struct {
	ctx              context.Context
	ApiService       TacacsplusAuthserviceAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPIListRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) TacacsplusAuthserviceAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r TacacsplusAuthserviceAPIListRequest) MaxResults(maxResults int32) TacacsplusAuthserviceAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPIListRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r TacacsplusAuthserviceAPIListRequest) Paging(paging int32) TacacsplusAuthserviceAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r TacacsplusAuthserviceAPIListRequest) PageId(pageId string) TacacsplusAuthserviceAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r TacacsplusAuthserviceAPIListRequest) Filters(filters map[string]interface{}) TacacsplusAuthserviceAPIListRequest {
	r.filters = &filters
	return r
}

func (r TacacsplusAuthserviceAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) TacacsplusAuthserviceAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r TacacsplusAuthserviceAPIListRequest) Execute() (*ListTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve tacacsplus:authservice objects

Returns a list of tacacsplus:authservice objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TacacsplusAuthserviceAPIListRequest
*/
func (a *TacacsplusAuthserviceAPIService) List(ctx context.Context) TacacsplusAuthserviceAPIListRequest {
	return TacacsplusAuthserviceAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) ListExecute(r TacacsplusAuthserviceAPIListRequest) (*ListTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPIReadRequest struct {
	ctx              context.Context
	ApiService       TacacsplusAuthserviceAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPIReadRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) TacacsplusAuthserviceAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPIReadRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPIReadRequest) Execute() (*GetTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific tacacsplus:authservice object

Returns a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPIReadRequest
*/
func (a *TacacsplusAuthserviceAPIService) Read(ctx context.Context, reference string) TacacsplusAuthserviceAPIReadRequest {
	return TacacsplusAuthserviceAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) ReadExecute(r TacacsplusAuthserviceAPIReadRequest) (*GetTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type TacacsplusAuthserviceAPIUpdateRequest struct {
	ctx                   context.Context
	ApiService            TacacsplusAuthserviceAPI
	reference             string
	tacacsplusAuthservice *TacacsplusAuthservice
	returnFields          *string
	returnFieldsPlus      *string
	returnAsObject        *int32
}

// Object data to update
func (r TacacsplusAuthserviceAPIUpdateRequest) TacacsplusAuthservice(tacacsplusAuthservice TacacsplusAuthservice) TacacsplusAuthserviceAPIUpdateRequest {
	r.tacacsplusAuthservice = &tacacsplusAuthservice
	return r
}

// Enter the field names followed by comma
func (r TacacsplusAuthserviceAPIUpdateRequest) ReturnFields(returnFields string) TacacsplusAuthserviceAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r TacacsplusAuthserviceAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) TacacsplusAuthserviceAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r TacacsplusAuthserviceAPIUpdateRequest) ReturnAsObject(returnAsObject int32) TacacsplusAuthserviceAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r TacacsplusAuthserviceAPIUpdateRequest) Execute() (*UpdateTacacsplusAuthserviceResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a tacacsplus:authservice object

Updates a specific tacacsplus:authservice object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the tacacsplus:authservice object
	@return TacacsplusAuthserviceAPIUpdateRequest
*/
func (a *TacacsplusAuthserviceAPIService) Update(ctx context.Context, reference string) TacacsplusAuthserviceAPIUpdateRequest {
	return TacacsplusAuthserviceAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateTacacsplusAuthserviceResponse
func (a *TacacsplusAuthserviceAPIService) UpdateExecute(r TacacsplusAuthserviceAPIUpdateRequest) (*UpdateTacacsplusAuthserviceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateTacacsplusAuthserviceResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "TacacsplusAuthserviceAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/tacacsplus:authservice/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tacacsplusAuthservice == nil {
		return localVarReturnValue, nil, internal.ReportError("tacacsplusAuthservice is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tacacsplusAuthservice
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
