/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdAuthService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdAuthService{}

// AdAuthService struct for AdAuthService
type AdAuthService struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The Active Directory domain to which this server belongs.
	AdDomain *string `json:"ad_domain,omitempty"`
	// The descriptive comment for the AD authentication service.
	Comment *string `json:"comment,omitempty"`
	// Determines if Active Directory Authentication Service is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// The AD authentication server list.
	DomainControllers []AdAuthServiceDomainControllers `json:"domain_controllers,omitempty"`
	// The AD authentication service name.
	Name *string `json:"name,omitempty"`
	// Determines whether the nested group querying is enabled.
	NestedGroupQuerying *bool `json:"nested_group_querying,omitempty"`
	// The number of seconds that the appliance waits for a response from the AD server.
	Timeout *int64 `json:"timeout,omitempty"`
}

// NewAdAuthService instantiates a new AdAuthService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdAuthService() *AdAuthService {
	this := AdAuthService{}
	return &this
}

// NewAdAuthServiceWithDefaults instantiates a new AdAuthService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdAuthServiceWithDefaults() *AdAuthService {
	this := AdAuthService{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *AdAuthService) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *AdAuthService) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *AdAuthService) SetRef(v string) {
	o.Ref = &v
}

// GetAdDomain returns the AdDomain field value if set, zero value otherwise.
func (o *AdAuthService) GetAdDomain() string {
	if o == nil || IsNil(o.AdDomain) {
		var ret string
		return ret
	}
	return *o.AdDomain
}

// GetAdDomainOk returns a tuple with the AdDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetAdDomainOk() (*string, bool) {
	if o == nil || IsNil(o.AdDomain) {
		return nil, false
	}
	return o.AdDomain, true
}

// HasAdDomain returns a boolean if a field has been set.
func (o *AdAuthService) HasAdDomain() bool {
	if o != nil && !IsNil(o.AdDomain) {
		return true
	}

	return false
}

// SetAdDomain gets a reference to the given string and assigns it to the AdDomain field.
func (o *AdAuthService) SetAdDomain(v string) {
	o.AdDomain = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *AdAuthService) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *AdAuthService) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *AdAuthService) SetComment(v string) {
	o.Comment = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *AdAuthService) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *AdAuthService) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *AdAuthService) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDomainControllers returns the DomainControllers field value if set, zero value otherwise.
func (o *AdAuthService) GetDomainControllers() []AdAuthServiceDomainControllers {
	if o == nil || IsNil(o.DomainControllers) {
		var ret []AdAuthServiceDomainControllers
		return ret
	}
	return o.DomainControllers
}

// GetDomainControllersOk returns a tuple with the DomainControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetDomainControllersOk() ([]AdAuthServiceDomainControllers, bool) {
	if o == nil || IsNil(o.DomainControllers) {
		return nil, false
	}
	return o.DomainControllers, true
}

// HasDomainControllers returns a boolean if a field has been set.
func (o *AdAuthService) HasDomainControllers() bool {
	if o != nil && !IsNil(o.DomainControllers) {
		return true
	}

	return false
}

// SetDomainControllers gets a reference to the given []AdAuthServiceDomainControllers and assigns it to the DomainControllers field.
func (o *AdAuthService) SetDomainControllers(v []AdAuthServiceDomainControllers) {
	o.DomainControllers = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdAuthService) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdAuthService) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdAuthService) SetName(v string) {
	o.Name = &v
}

// GetNestedGroupQuerying returns the NestedGroupQuerying field value if set, zero value otherwise.
func (o *AdAuthService) GetNestedGroupQuerying() bool {
	if o == nil || IsNil(o.NestedGroupQuerying) {
		var ret bool
		return ret
	}
	return *o.NestedGroupQuerying
}

// GetNestedGroupQueryingOk returns a tuple with the NestedGroupQuerying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetNestedGroupQueryingOk() (*bool, bool) {
	if o == nil || IsNil(o.NestedGroupQuerying) {
		return nil, false
	}
	return o.NestedGroupQuerying, true
}

// HasNestedGroupQuerying returns a boolean if a field has been set.
func (o *AdAuthService) HasNestedGroupQuerying() bool {
	if o != nil && !IsNil(o.NestedGroupQuerying) {
		return true
	}

	return false
}

// SetNestedGroupQuerying gets a reference to the given bool and assigns it to the NestedGroupQuerying field.
func (o *AdAuthService) SetNestedGroupQuerying(v bool) {
	o.NestedGroupQuerying = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *AdAuthService) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAuthService) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *AdAuthService) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *AdAuthService) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o AdAuthService) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdAuthService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.AdDomain) {
		toSerialize["ad_domain"] = o.AdDomain
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DomainControllers) {
		toSerialize["domain_controllers"] = o.DomainControllers
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NestedGroupQuerying) {
		toSerialize["nested_group_querying"] = o.NestedGroupQuerying
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableAdAuthService struct {
	value *AdAuthService
	isSet bool
}

func (v NullableAdAuthService) Get() *AdAuthService {
	return v.value
}

func (v *NullableAdAuthService) Set(val *AdAuthService) {
	v.value = val
	v.isSet = true
}

func (v NullableAdAuthService) IsSet() bool {
	return v.isSet
}

func (v *NullableAdAuthService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdAuthService(val *AdAuthService) *NullableAdAuthService {
	return &NullableAdAuthService{value: val, isSet: true}
}

func (v NullableAdAuthService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdAuthService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
