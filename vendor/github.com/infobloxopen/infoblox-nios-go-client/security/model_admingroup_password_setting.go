/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdmingroupPasswordSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdmingroupPasswordSetting{}

// AdmingroupPasswordSetting struct for AdmingroupPasswordSetting
type AdmingroupPasswordSetting struct {
	// Whether password expiry enabled or not.
	ExpireEnable *bool `json:"expire_enable,omitempty"`
	// The days that password must expire
	ExpireDays *int64 `json:"expire_days,omitempty"`
	// Days to show up reminder prior to expiration
	ReminderDays         *int64 `json:"reminder_days,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdmingroupPasswordSetting AdmingroupPasswordSetting

// NewAdmingroupPasswordSetting instantiates a new AdmingroupPasswordSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmingroupPasswordSetting() *AdmingroupPasswordSetting {
	this := AdmingroupPasswordSetting{}
	return &this
}

// NewAdmingroupPasswordSettingWithDefaults instantiates a new AdmingroupPasswordSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdmingroupPasswordSettingWithDefaults() *AdmingroupPasswordSetting {
	this := AdmingroupPasswordSetting{}
	return &this
}

// GetExpireEnable returns the ExpireEnable field value if set, zero value otherwise.
func (o *AdmingroupPasswordSetting) GetExpireEnable() bool {
	if o == nil || IsNil(o.ExpireEnable) {
		var ret bool
		return ret
	}
	return *o.ExpireEnable
}

// GetExpireEnableOk returns a tuple with the ExpireEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupPasswordSetting) GetExpireEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpireEnable) {
		return nil, false
	}
	return o.ExpireEnable, true
}

// HasExpireEnable returns a boolean if a field has been set.
func (o *AdmingroupPasswordSetting) HasExpireEnable() bool {
	if o != nil && !IsNil(o.ExpireEnable) {
		return true
	}

	return false
}

// SetExpireEnable gets a reference to the given bool and assigns it to the ExpireEnable field.
func (o *AdmingroupPasswordSetting) SetExpireEnable(v bool) {
	o.ExpireEnable = &v
}

// GetExpireDays returns the ExpireDays field value if set, zero value otherwise.
func (o *AdmingroupPasswordSetting) GetExpireDays() int64 {
	if o == nil || IsNil(o.ExpireDays) {
		var ret int64
		return ret
	}
	return *o.ExpireDays
}

// GetExpireDaysOk returns a tuple with the ExpireDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupPasswordSetting) GetExpireDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpireDays) {
		return nil, false
	}
	return o.ExpireDays, true
}

// HasExpireDays returns a boolean if a field has been set.
func (o *AdmingroupPasswordSetting) HasExpireDays() bool {
	if o != nil && !IsNil(o.ExpireDays) {
		return true
	}

	return false
}

// SetExpireDays gets a reference to the given int64 and assigns it to the ExpireDays field.
func (o *AdmingroupPasswordSetting) SetExpireDays(v int64) {
	o.ExpireDays = &v
}

// GetReminderDays returns the ReminderDays field value if set, zero value otherwise.
func (o *AdmingroupPasswordSetting) GetReminderDays() int64 {
	if o == nil || IsNil(o.ReminderDays) {
		var ret int64
		return ret
	}
	return *o.ReminderDays
}

// GetReminderDaysOk returns a tuple with the ReminderDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdmingroupPasswordSetting) GetReminderDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ReminderDays) {
		return nil, false
	}
	return o.ReminderDays, true
}

// HasReminderDays returns a boolean if a field has been set.
func (o *AdmingroupPasswordSetting) HasReminderDays() bool {
	if o != nil && !IsNil(o.ReminderDays) {
		return true
	}

	return false
}

// SetReminderDays gets a reference to the given int64 and assigns it to the ReminderDays field.
func (o *AdmingroupPasswordSetting) SetReminderDays(v int64) {
	o.ReminderDays = &v
}

func (o AdmingroupPasswordSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdmingroupPasswordSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpireEnable) {
		toSerialize["expire_enable"] = o.ExpireEnable
	}
	if !IsNil(o.ExpireDays) {
		toSerialize["expire_days"] = o.ExpireDays
	}
	if !IsNil(o.ReminderDays) {
		toSerialize["reminder_days"] = o.ReminderDays
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdmingroupPasswordSetting) UnmarshalJSON(data []byte) (err error) {
	varAdmingroupPasswordSetting := _AdmingroupPasswordSetting{}

	err = json.Unmarshal(data, &varAdmingroupPasswordSetting)

	if err != nil {
		return err
	}

	*o = AdmingroupPasswordSetting(varAdmingroupPasswordSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expire_enable")
		delete(additionalProperties, "expire_days")
		delete(additionalProperties, "reminder_days")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmingroupPasswordSetting struct {
	value *AdmingroupPasswordSetting
	isSet bool
}

func (v NullableAdmingroupPasswordSetting) Get() *AdmingroupPasswordSetting {
	return v.value
}

func (v *NullableAdmingroupPasswordSetting) Set(val *AdmingroupPasswordSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmingroupPasswordSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmingroupPasswordSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmingroupPasswordSetting(val *AdmingroupPasswordSetting) *NullableAdmingroupPasswordSetting {
	return &NullableAdmingroupPasswordSetting{value: val, isSet: true}
}

func (v NullableAdmingroupPasswordSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmingroupPasswordSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
