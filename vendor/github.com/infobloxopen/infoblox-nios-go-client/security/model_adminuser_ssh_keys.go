/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the AdminuserSshKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminuserSshKeys{}

// AdminuserSshKeys struct for AdminuserSshKeys
type AdminuserSshKeys struct {
	// Unique identifier for the key
	KeyName *string `json:"key_name,omitempty"`
	// ssh_key_types
	KeyType *string `json:"key_type,omitempty"`
	// ssh key text
	KeyValue             *string `json:"key_value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdminuserSshKeys AdminuserSshKeys

// NewAdminuserSshKeys instantiates a new AdminuserSshKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminuserSshKeys() *AdminuserSshKeys {
	this := AdminuserSshKeys{}
	return &this
}

// NewAdminuserSshKeysWithDefaults instantiates a new AdminuserSshKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminuserSshKeysWithDefaults() *AdminuserSshKeys {
	this := AdminuserSshKeys{}
	return &this
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *AdminuserSshKeys) GetKeyName() string {
	if o == nil || IsNil(o.KeyName) {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminuserSshKeys) GetKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyName) {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *AdminuserSshKeys) HasKeyName() bool {
	if o != nil && !IsNil(o.KeyName) {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *AdminuserSshKeys) SetKeyName(v string) {
	o.KeyName = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *AdminuserSshKeys) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminuserSshKeys) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *AdminuserSshKeys) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *AdminuserSshKeys) SetKeyType(v string) {
	o.KeyType = &v
}

// GetKeyValue returns the KeyValue field value if set, zero value otherwise.
func (o *AdminuserSshKeys) GetKeyValue() string {
	if o == nil || IsNil(o.KeyValue) {
		var ret string
		return ret
	}
	return *o.KeyValue
}

// GetKeyValueOk returns a tuple with the KeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminuserSshKeys) GetKeyValueOk() (*string, bool) {
	if o == nil || IsNil(o.KeyValue) {
		return nil, false
	}
	return o.KeyValue, true
}

// HasKeyValue returns a boolean if a field has been set.
func (o *AdminuserSshKeys) HasKeyValue() bool {
	if o != nil && !IsNil(o.KeyValue) {
		return true
	}

	return false
}

// SetKeyValue gets a reference to the given string and assigns it to the KeyValue field.
func (o *AdminuserSshKeys) SetKeyValue(v string) {
	o.KeyValue = &v
}

func (o AdminuserSshKeys) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminuserSshKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyName) {
		toSerialize["key_name"] = o.KeyName
	}
	if !IsNil(o.KeyType) {
		toSerialize["key_type"] = o.KeyType
	}
	if !IsNil(o.KeyValue) {
		toSerialize["key_value"] = o.KeyValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdminuserSshKeys) UnmarshalJSON(data []byte) (err error) {
	varAdminuserSshKeys := _AdminuserSshKeys{}

	err = json.Unmarshal(data, &varAdminuserSshKeys)

	if err != nil {
		return err
	}

	*o = AdminuserSshKeys(varAdminuserSshKeys)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key_name")
		delete(additionalProperties, "key_type")
		delete(additionalProperties, "key_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdminuserSshKeys struct {
	value *AdminuserSshKeys
	isSet bool
}

func (v NullableAdminuserSshKeys) Get() *AdminuserSshKeys {
	return v.value
}

func (v *NullableAdminuserSshKeys) Set(val *AdminuserSshKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminuserSshKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminuserSshKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminuserSshKeys(val *AdminuserSshKeys) *NullableAdminuserSshKeys {
	return &NullableAdminuserSshKeys{value: val, isSet: true}
}

func (v NullableAdminuserSshKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminuserSshKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
