/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// GetTacacsplusAuthserviceResponse - struct for GetTacacsplusAuthserviceResponse
type GetTacacsplusAuthserviceResponse struct {
	GetTacacsplusAuthserviceResponseObjectAsResult *GetTacacsplusAuthserviceResponseObjectAsResult
	TacacsplusAuthservice                          *TacacsplusAuthservice
}

// GetTacacsplusAuthserviceResponseObjectAsResultAsGetTacacsplusAuthserviceResponse is a convenience function that returns GetTacacsplusAuthserviceResponseObjectAsResult wrapped in GetTacacsplusAuthserviceResponse
func GetTacacsplusAuthserviceResponseObjectAsResultAsGetTacacsplusAuthserviceResponse(v *GetTacacsplusAuthserviceResponseObjectAsResult) GetTacacsplusAuthserviceResponse {
	return GetTacacsplusAuthserviceResponse{
		GetTacacsplusAuthserviceResponseObjectAsResult: v,
	}
}

// TacacsplusAuthserviceAsGetTacacsplusAuthserviceResponse is a convenience function that returns TacacsplusAuthservice wrapped in GetTacacsplusAuthserviceResponse
func TacacsplusAuthserviceAsGetTacacsplusAuthserviceResponse(v *TacacsplusAuthservice) GetTacacsplusAuthserviceResponse {
	return GetTacacsplusAuthserviceResponse{
		TacacsplusAuthservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTacacsplusAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetTacacsplusAuthserviceResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetTacacsplusAuthserviceResponseObjectAsResult)
	if err == nil {
		jsonGetTacacsplusAuthserviceResponseObjectAsResult, _ := json.Marshal(dst.GetTacacsplusAuthserviceResponseObjectAsResult)
		if string(jsonGetTacacsplusAuthserviceResponseObjectAsResult) == "{}" { // empty struct
			dst.GetTacacsplusAuthserviceResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetTacacsplusAuthserviceResponseObjectAsResult = nil
	}

	// try to unmarshal data into TacacsplusAuthservice
	err = newStrictDecoder(data).Decode(&dst.TacacsplusAuthservice)
	if err == nil {
		jsonTacacsplusAuthservice, _ := json.Marshal(dst.TacacsplusAuthservice)
		if string(jsonTacacsplusAuthservice) == "{}" { // empty struct
			dst.TacacsplusAuthservice = nil
		} else {
			match++
		}
	} else {
		dst.TacacsplusAuthservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetTacacsplusAuthserviceResponseObjectAsResult = nil
		dst.TacacsplusAuthservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetTacacsplusAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetTacacsplusAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTacacsplusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.GetTacacsplusAuthserviceResponseObjectAsResult != nil {
		return json.Marshal(&src.GetTacacsplusAuthserviceResponseObjectAsResult)
	}

	if src.TacacsplusAuthservice != nil {
		return json.Marshal(&src.TacacsplusAuthservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTacacsplusAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetTacacsplusAuthserviceResponseObjectAsResult != nil {
		return obj.GetTacacsplusAuthserviceResponseObjectAsResult
	}

	if obj.TacacsplusAuthservice != nil {
		return obj.TacacsplusAuthservice
	}

	// all schemas are nil
	return nil
}

type NullableGetTacacsplusAuthserviceResponse struct {
	value *GetTacacsplusAuthserviceResponse
	isSet bool
}

func (v NullableGetTacacsplusAuthserviceResponse) Get() *GetTacacsplusAuthserviceResponse {
	return v.value
}

func (v *NullableGetTacacsplusAuthserviceResponse) Set(val *GetTacacsplusAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTacacsplusAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTacacsplusAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTacacsplusAuthserviceResponse(val *GetTacacsplusAuthserviceResponse) *NullableGetTacacsplusAuthserviceResponse {
	return &NullableGetTacacsplusAuthserviceResponse{value: val, isSet: true}
}

func (v NullableGetTacacsplusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTacacsplusAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
