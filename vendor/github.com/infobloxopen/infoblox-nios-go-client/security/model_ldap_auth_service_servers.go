/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the LdapAuthServiceServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdapAuthServiceServers{}

// LdapAuthServiceServers struct for LdapAuthServiceServers
type LdapAuthServiceServers struct {
	// The IP address or FQDN of the LDAP server.
	Address *string `json:"address,omitempty"`
	// The authentication type for the LDAP server.
	AuthenticationType *string `json:"authentication_type,omitempty"`
	// The base DN for the LDAP server.
	BaseDn *string `json:"base_dn,omitempty"`
	// The user password for authentication.
	BindPassword *string `json:"bind_password,omitempty"`
	// The user DN for authentication.
	BindUserDn *string `json:"bind_user_dn,omitempty"`
	// The LDAP descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// Determines if the LDAP server is disabled.
	Disable *bool `json:"disable,omitempty"`
	// The LDAP server encryption type.
	Encryption *string `json:"encryption,omitempty"`
	// The LDAP server port.
	Port *int64 `json:"port,omitempty"`
	// Determines if the connection via the MGMT interface is allowed.
	UseMgmtPort *bool `json:"use_mgmt_port,omitempty"`
	// The LDAP server version.
	Version              *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LdapAuthServiceServers LdapAuthServiceServers

// NewLdapAuthServiceServers instantiates a new LdapAuthServiceServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapAuthServiceServers() *LdapAuthServiceServers {
	this := LdapAuthServiceServers{}
	return &this
}

// NewLdapAuthServiceServersWithDefaults instantiates a new LdapAuthServiceServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapAuthServiceServersWithDefaults() *LdapAuthServiceServers {
	this := LdapAuthServiceServers{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *LdapAuthServiceServers) SetAddress(v string) {
	o.Address = &v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetAuthenticationType() string {
	if o == nil || IsNil(o.AuthenticationType) {
		var ret string
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationType) {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasAuthenticationType() bool {
	if o != nil && !IsNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given string and assigns it to the AuthenticationType field.
func (o *LdapAuthServiceServers) SetAuthenticationType(v string) {
	o.AuthenticationType = &v
}

// GetBaseDn returns the BaseDn field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetBaseDn() string {
	if o == nil || IsNil(o.BaseDn) {
		var ret string
		return ret
	}
	return *o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetBaseDnOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDn) {
		return nil, false
	}
	return o.BaseDn, true
}

// HasBaseDn returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasBaseDn() bool {
	if o != nil && !IsNil(o.BaseDn) {
		return true
	}

	return false
}

// SetBaseDn gets a reference to the given string and assigns it to the BaseDn field.
func (o *LdapAuthServiceServers) SetBaseDn(v string) {
	o.BaseDn = &v
}

// GetBindPassword returns the BindPassword field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetBindPassword() string {
	if o == nil || IsNil(o.BindPassword) {
		var ret string
		return ret
	}
	return *o.BindPassword
}

// GetBindPasswordOk returns a tuple with the BindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetBindPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.BindPassword) {
		return nil, false
	}
	return o.BindPassword, true
}

// HasBindPassword returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasBindPassword() bool {
	if o != nil && !IsNil(o.BindPassword) {
		return true
	}

	return false
}

// SetBindPassword gets a reference to the given string and assigns it to the BindPassword field.
func (o *LdapAuthServiceServers) SetBindPassword(v string) {
	o.BindPassword = &v
}

// GetBindUserDn returns the BindUserDn field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetBindUserDn() string {
	if o == nil || IsNil(o.BindUserDn) {
		var ret string
		return ret
	}
	return *o.BindUserDn
}

// GetBindUserDnOk returns a tuple with the BindUserDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetBindUserDnOk() (*string, bool) {
	if o == nil || IsNil(o.BindUserDn) {
		return nil, false
	}
	return o.BindUserDn, true
}

// HasBindUserDn returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasBindUserDn() bool {
	if o != nil && !IsNil(o.BindUserDn) {
		return true
	}

	return false
}

// SetBindUserDn gets a reference to the given string and assigns it to the BindUserDn field.
func (o *LdapAuthServiceServers) SetBindUserDn(v string) {
	o.BindUserDn = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *LdapAuthServiceServers) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *LdapAuthServiceServers) SetDisable(v bool) {
	o.Disable = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetEncryption() string {
	if o == nil || IsNil(o.Encryption) {
		var ret string
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given string and assigns it to the Encryption field.
func (o *LdapAuthServiceServers) SetEncryption(v string) {
	o.Encryption = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *LdapAuthServiceServers) SetPort(v int64) {
	o.Port = &v
}

// GetUseMgmtPort returns the UseMgmtPort field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetUseMgmtPort() bool {
	if o == nil || IsNil(o.UseMgmtPort) {
		var ret bool
		return ret
	}
	return *o.UseMgmtPort
}

// GetUseMgmtPortOk returns a tuple with the UseMgmtPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetUseMgmtPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtPort) {
		return nil, false
	}
	return o.UseMgmtPort, true
}

// HasUseMgmtPort returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasUseMgmtPort() bool {
	if o != nil && !IsNil(o.UseMgmtPort) {
		return true
	}

	return false
}

// SetUseMgmtPort gets a reference to the given bool and assigns it to the UseMgmtPort field.
func (o *LdapAuthServiceServers) SetUseMgmtPort(v bool) {
	o.UseMgmtPort = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *LdapAuthServiceServers) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapAuthServiceServers) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *LdapAuthServiceServers) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *LdapAuthServiceServers) SetVersion(v string) {
	o.Version = &v
}

func (o LdapAuthServiceServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdapAuthServiceServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AuthenticationType) {
		toSerialize["authentication_type"] = o.AuthenticationType
	}
	if !IsNil(o.BaseDn) {
		toSerialize["base_dn"] = o.BaseDn
	}
	if !IsNil(o.BindPassword) {
		toSerialize["bind_password"] = o.BindPassword
	}
	if !IsNil(o.BindUserDn) {
		toSerialize["bind_user_dn"] = o.BindUserDn
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.UseMgmtPort) {
		toSerialize["use_mgmt_port"] = o.UseMgmtPort
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LdapAuthServiceServers) UnmarshalJSON(data []byte) (err error) {
	varLdapAuthServiceServers := _LdapAuthServiceServers{}

	err = json.Unmarshal(data, &varLdapAuthServiceServers)

	if err != nil {
		return err
	}

	*o = LdapAuthServiceServers(varLdapAuthServiceServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "authentication_type")
		delete(additionalProperties, "base_dn")
		delete(additionalProperties, "bind_password")
		delete(additionalProperties, "bind_user_dn")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "disable")
		delete(additionalProperties, "encryption")
		delete(additionalProperties, "port")
		delete(additionalProperties, "use_mgmt_port")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLdapAuthServiceServers struct {
	value *LdapAuthServiceServers
	isSet bool
}

func (v NullableLdapAuthServiceServers) Get() *LdapAuthServiceServers {
	return v.value
}

func (v *NullableLdapAuthServiceServers) Set(val *LdapAuthServiceServers) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapAuthServiceServers) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapAuthServiceServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapAuthServiceServers(val *LdapAuthServiceServers) *NullableLdapAuthServiceServers {
	return &NullableLdapAuthServiceServers{value: val, isSet: true}
}

func (v NullableLdapAuthServiceServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapAuthServiceServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
