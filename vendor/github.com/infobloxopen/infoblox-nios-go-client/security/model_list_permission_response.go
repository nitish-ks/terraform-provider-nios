/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListPermissionResponse - struct for ListPermissionResponse
type ListPermissionResponse struct {
	ListPermissionResponseObject *ListPermissionResponseObject
	ArrayOfPermission            *[]Permission
}

// ListPermissionResponseObjectAsListPermissionResponse is a convenience function that returns ListPermissionResponseObject wrapped in ListPermissionResponse
func ListPermissionResponseObjectAsListPermissionResponse(v *ListPermissionResponseObject) ListPermissionResponse {
	return ListPermissionResponse{
		ListPermissionResponseObject: v,
	}
}

// []PermissionAsListPermissionResponse is a convenience function that returns []Permission wrapped in ListPermissionResponse
func ArrayOfPermissionAsListPermissionResponse(v *[]Permission) ListPermissionResponse {
	return ListPermissionResponse{
		ArrayOfPermission: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListPermissionResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListPermissionResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListPermissionResponseObject)
	if err == nil {
		jsonListPermissionResponseObject, _ := json.Marshal(dst.ListPermissionResponseObject)
		if string(jsonListPermissionResponseObject) == "{}" { // empty struct
			dst.ListPermissionResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListPermissionResponseObject = nil
	}

	// try to unmarshal data into ArrayOfPermission
	err = newStrictDecoder(data).Decode(&dst.ArrayOfPermission)
	if err == nil {
		jsonArrayOfPermission, _ := json.Marshal(dst.ArrayOfPermission)
		if string(jsonArrayOfPermission) == "{}" { // empty struct
			dst.ArrayOfPermission = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfPermission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListPermissionResponseObject = nil
		dst.ArrayOfPermission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListPermissionResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListPermissionResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListPermissionResponse) MarshalJSON() ([]byte, error) {
	if src.ListPermissionResponseObject != nil {
		return json.Marshal(&src.ListPermissionResponseObject)
	}

	if src.ArrayOfPermission != nil {
		return json.Marshal(&src.ArrayOfPermission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListPermissionResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListPermissionResponseObject != nil {
		return obj.ListPermissionResponseObject
	}

	if obj.ArrayOfPermission != nil {
		return obj.ArrayOfPermission
	}

	// all schemas are nil
	return nil
}

type NullableListPermissionResponse struct {
	value *ListPermissionResponse
	isSet bool
}

func (v NullableListPermissionResponse) Get() *ListPermissionResponse {
	return v.value
}

func (v *NullableListPermissionResponse) Set(val *ListPermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListPermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListPermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPermissionResponse(val *ListPermissionResponse) *NullableListPermissionResponse {
	return &NullableListPermissionResponse{value: val, isSet: true}
}

func (v NullableListPermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
