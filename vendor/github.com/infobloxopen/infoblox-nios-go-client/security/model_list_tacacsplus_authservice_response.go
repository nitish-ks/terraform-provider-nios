/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// ListTacacsplusAuthserviceResponse - struct for ListTacacsplusAuthserviceResponse
type ListTacacsplusAuthserviceResponse struct {
	ListTacacsplusAuthserviceResponseObject *ListTacacsplusAuthserviceResponseObject
	ArrayOfTacacsplusAuthservice            *[]TacacsplusAuthservice
}

// ListTacacsplusAuthserviceResponseObjectAsListTacacsplusAuthserviceResponse is a convenience function that returns ListTacacsplusAuthserviceResponseObject wrapped in ListTacacsplusAuthserviceResponse
func ListTacacsplusAuthserviceResponseObjectAsListTacacsplusAuthserviceResponse(v *ListTacacsplusAuthserviceResponseObject) ListTacacsplusAuthserviceResponse {
	return ListTacacsplusAuthserviceResponse{
		ListTacacsplusAuthserviceResponseObject: v,
	}
}

// []TacacsplusAuthserviceAsListTacacsplusAuthserviceResponse is a convenience function that returns []TacacsplusAuthservice wrapped in ListTacacsplusAuthserviceResponse
func ArrayOfTacacsplusAuthserviceAsListTacacsplusAuthserviceResponse(v *[]TacacsplusAuthservice) ListTacacsplusAuthserviceResponse {
	return ListTacacsplusAuthserviceResponse{
		ArrayOfTacacsplusAuthservice: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListTacacsplusAuthserviceResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListTacacsplusAuthserviceResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListTacacsplusAuthserviceResponseObject)
	if err == nil {
		jsonListTacacsplusAuthserviceResponseObject, _ := json.Marshal(dst.ListTacacsplusAuthserviceResponseObject)
		if string(jsonListTacacsplusAuthserviceResponseObject) == "{}" { // empty struct
			dst.ListTacacsplusAuthserviceResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListTacacsplusAuthserviceResponseObject = nil
	}

	// try to unmarshal data into ArrayOfTacacsplusAuthservice
	err = newStrictDecoder(data).Decode(&dst.ArrayOfTacacsplusAuthservice)
	if err == nil {
		jsonArrayOfTacacsplusAuthservice, _ := json.Marshal(dst.ArrayOfTacacsplusAuthservice)
		if string(jsonArrayOfTacacsplusAuthservice) == "{}" { // empty struct
			dst.ArrayOfTacacsplusAuthservice = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfTacacsplusAuthservice = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListTacacsplusAuthserviceResponseObject = nil
		dst.ArrayOfTacacsplusAuthservice = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListTacacsplusAuthserviceResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListTacacsplusAuthserviceResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListTacacsplusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	if src.ListTacacsplusAuthserviceResponseObject != nil {
		return json.Marshal(&src.ListTacacsplusAuthserviceResponseObject)
	}

	if src.ArrayOfTacacsplusAuthservice != nil {
		return json.Marshal(&src.ArrayOfTacacsplusAuthservice)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListTacacsplusAuthserviceResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListTacacsplusAuthserviceResponseObject != nil {
		return obj.ListTacacsplusAuthserviceResponseObject
	}

	if obj.ArrayOfTacacsplusAuthservice != nil {
		return obj.ArrayOfTacacsplusAuthservice
	}

	// all schemas are nil
	return nil
}

type NullableListTacacsplusAuthserviceResponse struct {
	value *ListTacacsplusAuthserviceResponse
	isSet bool
}

func (v NullableListTacacsplusAuthserviceResponse) Get() *ListTacacsplusAuthserviceResponse {
	return v.value
}

func (v *NullableListTacacsplusAuthserviceResponse) Set(val *ListTacacsplusAuthserviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTacacsplusAuthserviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTacacsplusAuthserviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTacacsplusAuthserviceResponse(val *ListTacacsplusAuthserviceResponse) *NullableListTacacsplusAuthserviceResponse {
	return &NullableListTacacsplusAuthserviceResponse{value: val, isSet: true}
}

func (v NullableListTacacsplusAuthserviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTacacsplusAuthserviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
