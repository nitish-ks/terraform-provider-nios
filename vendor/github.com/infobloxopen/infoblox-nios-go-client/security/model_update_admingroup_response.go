/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
	"fmt"
)

// UpdateAdmingroupResponse - struct for UpdateAdmingroupResponse
type UpdateAdmingroupResponse struct {
	UpdateAdmingroupResponseAsObject *UpdateAdmingroupResponseAsObject
	String                           *string
}

// UpdateAdmingroupResponseAsObjectAsUpdateAdmingroupResponse is a convenience function that returns UpdateAdmingroupResponseAsObject wrapped in UpdateAdmingroupResponse
func UpdateAdmingroupResponseAsObjectAsUpdateAdmingroupResponse(v *UpdateAdmingroupResponseAsObject) UpdateAdmingroupResponse {
	return UpdateAdmingroupResponse{
		UpdateAdmingroupResponseAsObject: v,
	}
}

// stringAsUpdateAdmingroupResponse is a convenience function that returns string wrapped in UpdateAdmingroupResponse
func StringAsUpdateAdmingroupResponse(v *string) UpdateAdmingroupResponse {
	return UpdateAdmingroupResponse{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateAdmingroupResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateAdmingroupResponseAsObject
	err = newStrictDecoder(data).Decode(&dst.UpdateAdmingroupResponseAsObject)
	if err == nil {
		jsonUpdateAdmingroupResponseAsObject, _ := json.Marshal(dst.UpdateAdmingroupResponseAsObject)
		if string(jsonUpdateAdmingroupResponseAsObject) == "{}" { // empty struct
			dst.UpdateAdmingroupResponseAsObject = nil
		} else {
			match++
		}
	} else {
		dst.UpdateAdmingroupResponseAsObject = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateAdmingroupResponseAsObject = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateAdmingroupResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateAdmingroupResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateAdmingroupResponse) MarshalJSON() ([]byte, error) {
	if src.UpdateAdmingroupResponseAsObject != nil {
		return json.Marshal(&src.UpdateAdmingroupResponseAsObject)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateAdmingroupResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateAdmingroupResponseAsObject != nil {
		return obj.UpdateAdmingroupResponseAsObject
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUpdateAdmingroupResponse struct {
	value *UpdateAdmingroupResponse
	isSet bool
}

func (v NullableUpdateAdmingroupResponse) Get() *UpdateAdmingroupResponse {
	return v.value
}

func (v *NullableUpdateAdmingroupResponse) Set(val *UpdateAdmingroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAdmingroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAdmingroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAdmingroupResponse(val *UpdateAdmingroupResponse) *NullableUpdateAdmingroupResponse {
	return &NullableUpdateAdmingroupResponse{value: val, isSet: true}
}

func (v NullableUpdateAdmingroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAdmingroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
