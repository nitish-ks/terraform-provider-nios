/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type SmartfolderPersonalAPI interface {
	/*
		Create Create a smartfolder:personal object

		Creates a new smartfolder:personal object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderPersonalAPICreateRequest
	*/
	Create(ctx context.Context) SmartfolderPersonalAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateSmartfolderPersonalResponse
	CreateExecute(r SmartfolderPersonalAPICreateRequest) (*CreateSmartfolderPersonalResponse, *http.Response, error)
	/*
		Delete Delete a smartfolder:personal object

		Deletes a specific smartfolder:personal object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:personal object
		@return SmartfolderPersonalAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) SmartfolderPersonalAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r SmartfolderPersonalAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve smartfolder:personal objects

		Returns a list of smartfolder:personal objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SmartfolderPersonalAPIListRequest
	*/
	List(ctx context.Context) SmartfolderPersonalAPIListRequest

	// ListExecute executes the request
	//  @return ListSmartfolderPersonalResponse
	ListExecute(r SmartfolderPersonalAPIListRequest) (*ListSmartfolderPersonalResponse, *http.Response, error)
	/*
		Read Get a specific smartfolder:personal object

		Returns a specific smartfolder:personal object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:personal object
		@return SmartfolderPersonalAPIReadRequest
	*/
	Read(ctx context.Context, reference string) SmartfolderPersonalAPIReadRequest

	// ReadExecute executes the request
	//  @return GetSmartfolderPersonalResponse
	ReadExecute(r SmartfolderPersonalAPIReadRequest) (*GetSmartfolderPersonalResponse, *http.Response, error)
	/*
		Update Update a smartfolder:personal object

		Updates a specific smartfolder:personal object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the smartfolder:personal object
		@return SmartfolderPersonalAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) SmartfolderPersonalAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateSmartfolderPersonalResponse
	UpdateExecute(r SmartfolderPersonalAPIUpdateRequest) (*UpdateSmartfolderPersonalResponse, *http.Response, error)
}

// SmartfolderPersonalAPIService SmartfolderPersonalAPI service
type SmartfolderPersonalAPIService internal.Service

type SmartfolderPersonalAPICreateRequest struct {
	ctx                 context.Context
	ApiService          SmartfolderPersonalAPI
	smartfolderPersonal *SmartfolderPersonal
	returnFields        *string
	returnFieldsPlus    *string
	returnAsObject      *int32
}

// Object data to create
func (r SmartfolderPersonalAPICreateRequest) SmartfolderPersonal(smartfolderPersonal SmartfolderPersonal) SmartfolderPersonalAPICreateRequest {
	r.smartfolderPersonal = &smartfolderPersonal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderPersonalAPICreateRequest) ReturnFields(returnFields string) SmartfolderPersonalAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderPersonalAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderPersonalAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderPersonalAPICreateRequest) ReturnAsObject(returnAsObject int32) SmartfolderPersonalAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderPersonalAPICreateRequest) Execute() (*CreateSmartfolderPersonalResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a smartfolder:personal object

Creates a new smartfolder:personal object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderPersonalAPICreateRequest
*/
func (a *SmartfolderPersonalAPIService) Create(ctx context.Context) SmartfolderPersonalAPICreateRequest {
	return SmartfolderPersonalAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSmartfolderPersonalResponse
func (a *SmartfolderPersonalAPIService) CreateExecute(r SmartfolderPersonalAPICreateRequest) (*CreateSmartfolderPersonalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateSmartfolderPersonalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderPersonalAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:personal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderPersonal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderPersonal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderPersonal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderPersonalAPIDeleteRequest struct {
	ctx        context.Context
	ApiService SmartfolderPersonalAPI
	reference  string
}

func (r SmartfolderPersonalAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a smartfolder:personal object

Deletes a specific smartfolder:personal object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:personal object
	@return SmartfolderPersonalAPIDeleteRequest
*/
func (a *SmartfolderPersonalAPIService) Delete(ctx context.Context, reference string) SmartfolderPersonalAPIDeleteRequest {
	return SmartfolderPersonalAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *SmartfolderPersonalAPIService) DeleteExecute(r SmartfolderPersonalAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderPersonalAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:personal/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SmartfolderPersonalAPIListRequest struct {
	ctx              context.Context
	ApiService       SmartfolderPersonalAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r SmartfolderPersonalAPIListRequest) ReturnFields(returnFields string) SmartfolderPersonalAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderPersonalAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderPersonalAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r SmartfolderPersonalAPIListRequest) MaxResults(maxResults int32) SmartfolderPersonalAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderPersonalAPIListRequest) ReturnAsObject(returnAsObject int32) SmartfolderPersonalAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r SmartfolderPersonalAPIListRequest) Paging(paging int32) SmartfolderPersonalAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r SmartfolderPersonalAPIListRequest) PageId(pageId string) SmartfolderPersonalAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r SmartfolderPersonalAPIListRequest) Filters(filters map[string]interface{}) SmartfolderPersonalAPIListRequest {
	r.filters = &filters
	return r
}

func (r SmartfolderPersonalAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) SmartfolderPersonalAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r SmartfolderPersonalAPIListRequest) Execute() (*ListSmartfolderPersonalResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve smartfolder:personal objects

Returns a list of smartfolder:personal objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SmartfolderPersonalAPIListRequest
*/
func (a *SmartfolderPersonalAPIService) List(ctx context.Context) SmartfolderPersonalAPIListRequest {
	return SmartfolderPersonalAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListSmartfolderPersonalResponse
func (a *SmartfolderPersonalAPIService) ListExecute(r SmartfolderPersonalAPIListRequest) (*ListSmartfolderPersonalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListSmartfolderPersonalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderPersonalAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:personal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderPersonalAPIReadRequest struct {
	ctx              context.Context
	ApiService       SmartfolderPersonalAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r SmartfolderPersonalAPIReadRequest) ReturnFields(returnFields string) SmartfolderPersonalAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderPersonalAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderPersonalAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderPersonalAPIReadRequest) ReturnAsObject(returnAsObject int32) SmartfolderPersonalAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderPersonalAPIReadRequest) Execute() (*GetSmartfolderPersonalResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific smartfolder:personal object

Returns a specific smartfolder:personal object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:personal object
	@return SmartfolderPersonalAPIReadRequest
*/
func (a *SmartfolderPersonalAPIService) Read(ctx context.Context, reference string) SmartfolderPersonalAPIReadRequest {
	return SmartfolderPersonalAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetSmartfolderPersonalResponse
func (a *SmartfolderPersonalAPIService) ReadExecute(r SmartfolderPersonalAPIReadRequest) (*GetSmartfolderPersonalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetSmartfolderPersonalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderPersonalAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:personal/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartfolderPersonalAPIUpdateRequest struct {
	ctx                 context.Context
	ApiService          SmartfolderPersonalAPI
	reference           string
	smartfolderPersonal *SmartfolderPersonal
	returnFields        *string
	returnFieldsPlus    *string
	returnAsObject      *int32
}

// Object data to update
func (r SmartfolderPersonalAPIUpdateRequest) SmartfolderPersonal(smartfolderPersonal SmartfolderPersonal) SmartfolderPersonalAPIUpdateRequest {
	r.smartfolderPersonal = &smartfolderPersonal
	return r
}

// Enter the field names followed by comma
func (r SmartfolderPersonalAPIUpdateRequest) ReturnFields(returnFields string) SmartfolderPersonalAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r SmartfolderPersonalAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) SmartfolderPersonalAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r SmartfolderPersonalAPIUpdateRequest) ReturnAsObject(returnAsObject int32) SmartfolderPersonalAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r SmartfolderPersonalAPIUpdateRequest) Execute() (*UpdateSmartfolderPersonalResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a smartfolder:personal object

Updates a specific smartfolder:personal object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the smartfolder:personal object
	@return SmartfolderPersonalAPIUpdateRequest
*/
func (a *SmartfolderPersonalAPIService) Update(ctx context.Context, reference string) SmartfolderPersonalAPIUpdateRequest {
	return SmartfolderPersonalAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateSmartfolderPersonalResponse
func (a *SmartfolderPersonalAPIService) UpdateExecute(r SmartfolderPersonalAPIUpdateRequest) (*UpdateSmartfolderPersonalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateSmartfolderPersonalResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SmartfolderPersonalAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/smartfolder:personal/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smartfolderPersonal == nil {
		return localVarReturnValue, nil, internal.ReportError("smartfolderPersonal is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smartfolderPersonal
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
