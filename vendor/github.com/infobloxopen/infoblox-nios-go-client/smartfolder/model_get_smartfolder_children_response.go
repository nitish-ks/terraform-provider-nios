/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
	"fmt"
)

// GetSmartfolderChildrenResponse - struct for GetSmartfolderChildrenResponse
type GetSmartfolderChildrenResponse struct {
	GetSmartfolderChildrenResponseObjectAsResult *GetSmartfolderChildrenResponseObjectAsResult
	SmartfolderChildren                          *SmartfolderChildren
}

// GetSmartfolderChildrenResponseObjectAsResultAsGetSmartfolderChildrenResponse is a convenience function that returns GetSmartfolderChildrenResponseObjectAsResult wrapped in GetSmartfolderChildrenResponse
func GetSmartfolderChildrenResponseObjectAsResultAsGetSmartfolderChildrenResponse(v *GetSmartfolderChildrenResponseObjectAsResult) GetSmartfolderChildrenResponse {
	return GetSmartfolderChildrenResponse{
		GetSmartfolderChildrenResponseObjectAsResult: v,
	}
}

// SmartfolderChildrenAsGetSmartfolderChildrenResponse is a convenience function that returns SmartfolderChildren wrapped in GetSmartfolderChildrenResponse
func SmartfolderChildrenAsGetSmartfolderChildrenResponse(v *SmartfolderChildren) GetSmartfolderChildrenResponse {
	return GetSmartfolderChildrenResponse{
		SmartfolderChildren: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSmartfolderChildrenResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetSmartfolderChildrenResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetSmartfolderChildrenResponseObjectAsResult)
	if err == nil {
		jsonGetSmartfolderChildrenResponseObjectAsResult, _ := json.Marshal(dst.GetSmartfolderChildrenResponseObjectAsResult)
		if string(jsonGetSmartfolderChildrenResponseObjectAsResult) == "{}" { // empty struct
			dst.GetSmartfolderChildrenResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetSmartfolderChildrenResponseObjectAsResult = nil
	}

	// try to unmarshal data into SmartfolderChildren
	err = newStrictDecoder(data).Decode(&dst.SmartfolderChildren)
	if err == nil {
		jsonSmartfolderChildren, _ := json.Marshal(dst.SmartfolderChildren)
		if string(jsonSmartfolderChildren) == "{}" { // empty struct
			dst.SmartfolderChildren = nil
		} else {
			match++
		}
	} else {
		dst.SmartfolderChildren = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetSmartfolderChildrenResponseObjectAsResult = nil
		dst.SmartfolderChildren = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSmartfolderChildrenResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSmartfolderChildrenResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSmartfolderChildrenResponse) MarshalJSON() ([]byte, error) {
	if src.GetSmartfolderChildrenResponseObjectAsResult != nil {
		return json.Marshal(&src.GetSmartfolderChildrenResponseObjectAsResult)
	}

	if src.SmartfolderChildren != nil {
		return json.Marshal(&src.SmartfolderChildren)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSmartfolderChildrenResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetSmartfolderChildrenResponseObjectAsResult != nil {
		return obj.GetSmartfolderChildrenResponseObjectAsResult
	}

	if obj.SmartfolderChildren != nil {
		return obj.SmartfolderChildren
	}

	// all schemas are nil
	return nil
}

type NullableGetSmartfolderChildrenResponse struct {
	value *GetSmartfolderChildrenResponse
	isSet bool
}

func (v NullableGetSmartfolderChildrenResponse) Get() *GetSmartfolderChildrenResponse {
	return v.value
}

func (v *NullableGetSmartfolderChildrenResponse) Set(val *GetSmartfolderChildrenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSmartfolderChildrenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSmartfolderChildrenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSmartfolderChildrenResponse(val *GetSmartfolderChildrenResponse) *NullableGetSmartfolderChildrenResponse {
	return &NullableGetSmartfolderChildrenResponse{value: val, isSet: true}
}

func (v NullableGetSmartfolderChildrenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSmartfolderChildrenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
