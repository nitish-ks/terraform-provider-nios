/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
	"fmt"
)

// ListSmartfolderChildrenResponse - struct for ListSmartfolderChildrenResponse
type ListSmartfolderChildrenResponse struct {
	ListSmartfolderChildrenResponseObject *ListSmartfolderChildrenResponseObject
	ArrayOfSmartfolderChildren            *[]SmartfolderChildren
}

// ListSmartfolderChildrenResponseObjectAsListSmartfolderChildrenResponse is a convenience function that returns ListSmartfolderChildrenResponseObject wrapped in ListSmartfolderChildrenResponse
func ListSmartfolderChildrenResponseObjectAsListSmartfolderChildrenResponse(v *ListSmartfolderChildrenResponseObject) ListSmartfolderChildrenResponse {
	return ListSmartfolderChildrenResponse{
		ListSmartfolderChildrenResponseObject: v,
	}
}

// []SmartfolderChildrenAsListSmartfolderChildrenResponse is a convenience function that returns []SmartfolderChildren wrapped in ListSmartfolderChildrenResponse
func ArrayOfSmartfolderChildrenAsListSmartfolderChildrenResponse(v *[]SmartfolderChildren) ListSmartfolderChildrenResponse {
	return ListSmartfolderChildrenResponse{
		ArrayOfSmartfolderChildren: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListSmartfolderChildrenResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListSmartfolderChildrenResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListSmartfolderChildrenResponseObject)
	if err == nil {
		jsonListSmartfolderChildrenResponseObject, _ := json.Marshal(dst.ListSmartfolderChildrenResponseObject)
		if string(jsonListSmartfolderChildrenResponseObject) == "{}" { // empty struct
			dst.ListSmartfolderChildrenResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListSmartfolderChildrenResponseObject = nil
	}

	// try to unmarshal data into ArrayOfSmartfolderChildren
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSmartfolderChildren)
	if err == nil {
		jsonArrayOfSmartfolderChildren, _ := json.Marshal(dst.ArrayOfSmartfolderChildren)
		if string(jsonArrayOfSmartfolderChildren) == "{}" { // empty struct
			dst.ArrayOfSmartfolderChildren = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfSmartfolderChildren = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListSmartfolderChildrenResponseObject = nil
		dst.ArrayOfSmartfolderChildren = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListSmartfolderChildrenResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListSmartfolderChildrenResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListSmartfolderChildrenResponse) MarshalJSON() ([]byte, error) {
	if src.ListSmartfolderChildrenResponseObject != nil {
		return json.Marshal(&src.ListSmartfolderChildrenResponseObject)
	}

	if src.ArrayOfSmartfolderChildren != nil {
		return json.Marshal(&src.ArrayOfSmartfolderChildren)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListSmartfolderChildrenResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListSmartfolderChildrenResponseObject != nil {
		return obj.ListSmartfolderChildrenResponseObject
	}

	if obj.ArrayOfSmartfolderChildren != nil {
		return obj.ArrayOfSmartfolderChildren
	}

	// all schemas are nil
	return nil
}

type NullableListSmartfolderChildrenResponse struct {
	value *ListSmartfolderChildrenResponse
	isSet bool
}

func (v NullableListSmartfolderChildrenResponse) Get() *ListSmartfolderChildrenResponse {
	return v.value
}

func (v *NullableListSmartfolderChildrenResponse) Set(val *ListSmartfolderChildrenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListSmartfolderChildrenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListSmartfolderChildrenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSmartfolderChildrenResponse(val *ListSmartfolderChildrenResponse) *NullableListSmartfolderChildrenResponse {
	return &NullableListSmartfolderChildrenResponse{value: val, isSet: true}
}

func (v NullableListSmartfolderChildrenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSmartfolderChildrenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
