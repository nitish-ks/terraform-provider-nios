/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
)

// checks if the SmartfolderChildrenValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartfolderChildrenValue{}

// SmartfolderChildrenValue struct for SmartfolderChildrenValue
type SmartfolderChildrenValue struct {
	// The integer value of the Smart Folder query.
	ValueInteger *int64 `json:"value_integer,omitempty"`
	// The string value of the Smart Folder query.
	ValueString *string `json:"value_string,omitempty"`
	// The timestamp value of the Smart Folder query.
	ValueDate *int64 `json:"value_date,omitempty"`
	// The boolean value of the Smart Folder query.
	ValueBoolean         *bool `json:"value_boolean,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmartfolderChildrenValue SmartfolderChildrenValue

// NewSmartfolderChildrenValue instantiates a new SmartfolderChildrenValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartfolderChildrenValue() *SmartfolderChildrenValue {
	this := SmartfolderChildrenValue{}
	return &this
}

// NewSmartfolderChildrenValueWithDefaults instantiates a new SmartfolderChildrenValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartfolderChildrenValueWithDefaults() *SmartfolderChildrenValue {
	this := SmartfolderChildrenValue{}
	return &this
}

// GetValueInteger returns the ValueInteger field value if set, zero value otherwise.
func (o *SmartfolderChildrenValue) GetValueInteger() int64 {
	if o == nil || IsNil(o.ValueInteger) {
		var ret int64
		return ret
	}
	return *o.ValueInteger
}

// GetValueIntegerOk returns a tuple with the ValueInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildrenValue) GetValueIntegerOk() (*int64, bool) {
	if o == nil || IsNil(o.ValueInteger) {
		return nil, false
	}
	return o.ValueInteger, true
}

// HasValueInteger returns a boolean if a field has been set.
func (o *SmartfolderChildrenValue) HasValueInteger() bool {
	if o != nil && !IsNil(o.ValueInteger) {
		return true
	}

	return false
}

// SetValueInteger gets a reference to the given int64 and assigns it to the ValueInteger field.
func (o *SmartfolderChildrenValue) SetValueInteger(v int64) {
	o.ValueInteger = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *SmartfolderChildrenValue) GetValueString() string {
	if o == nil || IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildrenValue) GetValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *SmartfolderChildrenValue) HasValueString() bool {
	if o != nil && !IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *SmartfolderChildrenValue) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueDate returns the ValueDate field value if set, zero value otherwise.
func (o *SmartfolderChildrenValue) GetValueDate() int64 {
	if o == nil || IsNil(o.ValueDate) {
		var ret int64
		return ret
	}
	return *o.ValueDate
}

// GetValueDateOk returns a tuple with the ValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildrenValue) GetValueDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ValueDate) {
		return nil, false
	}
	return o.ValueDate, true
}

// HasValueDate returns a boolean if a field has been set.
func (o *SmartfolderChildrenValue) HasValueDate() bool {
	if o != nil && !IsNil(o.ValueDate) {
		return true
	}

	return false
}

// SetValueDate gets a reference to the given int64 and assigns it to the ValueDate field.
func (o *SmartfolderChildrenValue) SetValueDate(v int64) {
	o.ValueDate = &v
}

// GetValueBoolean returns the ValueBoolean field value if set, zero value otherwise.
func (o *SmartfolderChildrenValue) GetValueBoolean() bool {
	if o == nil || IsNil(o.ValueBoolean) {
		var ret bool
		return ret
	}
	return *o.ValueBoolean
}

// GetValueBooleanOk returns a tuple with the ValueBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderChildrenValue) GetValueBooleanOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueBoolean) {
		return nil, false
	}
	return o.ValueBoolean, true
}

// HasValueBoolean returns a boolean if a field has been set.
func (o *SmartfolderChildrenValue) HasValueBoolean() bool {
	if o != nil && !IsNil(o.ValueBoolean) {
		return true
	}

	return false
}

// SetValueBoolean gets a reference to the given bool and assigns it to the ValueBoolean field.
func (o *SmartfolderChildrenValue) SetValueBoolean(v bool) {
	o.ValueBoolean = &v
}

func (o SmartfolderChildrenValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartfolderChildrenValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValueInteger) {
		toSerialize["value_integer"] = o.ValueInteger
	}
	if !IsNil(o.ValueString) {
		toSerialize["value_string"] = o.ValueString
	}
	if !IsNil(o.ValueDate) {
		toSerialize["value_date"] = o.ValueDate
	}
	if !IsNil(o.ValueBoolean) {
		toSerialize["value_boolean"] = o.ValueBoolean
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmartfolderChildrenValue) UnmarshalJSON(data []byte) (err error) {
	varSmartfolderChildrenValue := _SmartfolderChildrenValue{}

	err = json.Unmarshal(data, &varSmartfolderChildrenValue)

	if err != nil {
		return err
	}

	*o = SmartfolderChildrenValue(varSmartfolderChildrenValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value_integer")
		delete(additionalProperties, "value_string")
		delete(additionalProperties, "value_date")
		delete(additionalProperties, "value_boolean")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmartfolderChildrenValue struct {
	value *SmartfolderChildrenValue
	isSet bool
}

func (v NullableSmartfolderChildrenValue) Get() *SmartfolderChildrenValue {
	return v.value
}

func (v *NullableSmartfolderChildrenValue) Set(val *SmartfolderChildrenValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartfolderChildrenValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartfolderChildrenValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartfolderChildrenValue(val *SmartfolderChildrenValue) *NullableSmartfolderChildrenValue {
	return &NullableSmartfolderChildrenValue{value: val, isSet: true}
}

func (v NullableSmartfolderChildrenValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartfolderChildrenValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
