/*
Infoblox SMARTFOLDER API

OpenAPI specification for Infoblox NIOS WAPI SMARTFOLDER objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smartfolder

import (
	"encoding/json"
)

// checks if the SmartfolderPersonal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartfolderPersonal{}

// SmartfolderPersonal struct for SmartfolderPersonal
type SmartfolderPersonal struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The personal Smart Folder descriptive comment.
	Comment *string `json:"comment,omitempty"`
	// The personal Smart Folder groupping rules.
	GroupBys []SmartfolderPersonalGroupBys `json:"group_bys,omitempty"`
	// Determines whether the personal Smart Folder is a shortcut.
	IsShortcut *bool `json:"is_shortcut,omitempty"`
	// The personal Smart Folder name.
	Name *string `json:"name,omitempty"`
	// The personal Smart Folder filter queries.
	QueryItems []SmartfolderPersonalQueryItems `json:"query_items,omitempty"`
}

// NewSmartfolderPersonal instantiates a new SmartfolderPersonal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartfolderPersonal() *SmartfolderPersonal {
	this := SmartfolderPersonal{}
	return &this
}

// NewSmartfolderPersonalWithDefaults instantiates a new SmartfolderPersonal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartfolderPersonalWithDefaults() *SmartfolderPersonal {
	this := SmartfolderPersonal{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SmartfolderPersonal) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SmartfolderPersonal) SetComment(v string) {
	o.Comment = &v
}

// GetGroupBys returns the GroupBys field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetGroupBys() []SmartfolderPersonalGroupBys {
	if o == nil || IsNil(o.GroupBys) {
		var ret []SmartfolderPersonalGroupBys
		return ret
	}
	return o.GroupBys
}

// GetGroupBysOk returns a tuple with the GroupBys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetGroupBysOk() ([]SmartfolderPersonalGroupBys, bool) {
	if o == nil || IsNil(o.GroupBys) {
		return nil, false
	}
	return o.GroupBys, true
}

// HasGroupBys returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasGroupBys() bool {
	if o != nil && !IsNil(o.GroupBys) {
		return true
	}

	return false
}

// SetGroupBys gets a reference to the given []SmartfolderPersonalGroupBys and assigns it to the GroupBys field.
func (o *SmartfolderPersonal) SetGroupBys(v []SmartfolderPersonalGroupBys) {
	o.GroupBys = v
}

// GetIsShortcut returns the IsShortcut field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetIsShortcut() bool {
	if o == nil || IsNil(o.IsShortcut) {
		var ret bool
		return ret
	}
	return *o.IsShortcut
}

// GetIsShortcutOk returns a tuple with the IsShortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetIsShortcutOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShortcut) {
		return nil, false
	}
	return o.IsShortcut, true
}

// HasIsShortcut returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasIsShortcut() bool {
	if o != nil && !IsNil(o.IsShortcut) {
		return true
	}

	return false
}

// SetIsShortcut gets a reference to the given bool and assigns it to the IsShortcut field.
func (o *SmartfolderPersonal) SetIsShortcut(v bool) {
	o.IsShortcut = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartfolderPersonal) SetName(v string) {
	o.Name = &v
}

// GetQueryItems returns the QueryItems field value if set, zero value otherwise.
func (o *SmartfolderPersonal) GetQueryItems() []SmartfolderPersonalQueryItems {
	if o == nil || IsNil(o.QueryItems) {
		var ret []SmartfolderPersonalQueryItems
		return ret
	}
	return o.QueryItems
}

// GetQueryItemsOk returns a tuple with the QueryItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartfolderPersonal) GetQueryItemsOk() ([]SmartfolderPersonalQueryItems, bool) {
	if o == nil || IsNil(o.QueryItems) {
		return nil, false
	}
	return o.QueryItems, true
}

// HasQueryItems returns a boolean if a field has been set.
func (o *SmartfolderPersonal) HasQueryItems() bool {
	if o != nil && !IsNil(o.QueryItems) {
		return true
	}

	return false
}

// SetQueryItems gets a reference to the given []SmartfolderPersonalQueryItems and assigns it to the QueryItems field.
func (o *SmartfolderPersonal) SetQueryItems(v []SmartfolderPersonalQueryItems) {
	o.QueryItems = v
}

func (o SmartfolderPersonal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartfolderPersonal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.GroupBys) {
		toSerialize["group_bys"] = o.GroupBys
	}
	if !IsNil(o.IsShortcut) {
		toSerialize["is_shortcut"] = o.IsShortcut
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QueryItems) {
		toSerialize["query_items"] = o.QueryItems
	}
	return toSerialize, nil
}

type NullableSmartfolderPersonal struct {
	value *SmartfolderPersonal
	isSet bool
}

func (v NullableSmartfolderPersonal) Get() *SmartfolderPersonal {
	return v.value
}

func (v *NullableSmartfolderPersonal) Set(val *SmartfolderPersonal) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartfolderPersonal) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartfolderPersonal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartfolderPersonal(val *SmartfolderPersonal) *NullableSmartfolderPersonal {
	return &NullableSmartfolderPersonal{value: val, isSet: true}
}

func (v NullableSmartfolderPersonal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartfolderPersonal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
