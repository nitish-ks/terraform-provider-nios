/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type ThreatinsightAllowlistAPI interface {
	/*
		Create Create a threatinsight:allowlist object

		Creates a new threatinsight:allowlist object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatinsightAllowlistAPICreateRequest
	*/
	Create(ctx context.Context) ThreatinsightAllowlistAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateThreatinsightAllowlistResponse
	CreateExecute(r ThreatinsightAllowlistAPICreateRequest) (*CreateThreatinsightAllowlistResponse, *http.Response, error)
	/*
		Delete Delete a threatinsight:allowlist object

		Deletes a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) ThreatinsightAllowlistAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r ThreatinsightAllowlistAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve threatinsight:allowlist objects

		Returns a list of threatinsight:allowlist objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatinsightAllowlistAPIListRequest
	*/
	List(ctx context.Context) ThreatinsightAllowlistAPIListRequest

	// ListExecute executes the request
	//  @return ListThreatinsightAllowlistResponse
	ListExecute(r ThreatinsightAllowlistAPIListRequest) (*ListThreatinsightAllowlistResponse, *http.Response, error)
	/*
		Read Get a specific threatinsight:allowlist object

		Returns a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIReadRequest
	*/
	Read(ctx context.Context, reference string) ThreatinsightAllowlistAPIReadRequest

	// ReadExecute executes the request
	//  @return GetThreatinsightAllowlistResponse
	ReadExecute(r ThreatinsightAllowlistAPIReadRequest) (*GetThreatinsightAllowlistResponse, *http.Response, error)
	/*
		Update Update a threatinsight:allowlist object

		Updates a specific threatinsight:allowlist object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatinsight:allowlist object
		@return ThreatinsightAllowlistAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) ThreatinsightAllowlistAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateThreatinsightAllowlistResponse
	UpdateExecute(r ThreatinsightAllowlistAPIUpdateRequest) (*UpdateThreatinsightAllowlistResponse, *http.Response, error)
}

// ThreatinsightAllowlistAPIService ThreatinsightAllowlistAPI service
type ThreatinsightAllowlistAPIService internal.Service

type ThreatinsightAllowlistAPICreateRequest struct {
	ctx                    context.Context
	ApiService             ThreatinsightAllowlistAPI
	threatinsightAllowlist *ThreatinsightAllowlist
	returnFields           *string
	returnFieldsPlus       *string
	returnAsObject         *int32
}

// Object data to create
func (r ThreatinsightAllowlistAPICreateRequest) ThreatinsightAllowlist(threatinsightAllowlist ThreatinsightAllowlist) ThreatinsightAllowlistAPICreateRequest {
	r.threatinsightAllowlist = &threatinsightAllowlist
	return r
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPICreateRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatinsightAllowlistAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPICreateRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPICreateRequest) Execute() (*CreateThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a threatinsight:allowlist object

Creates a new threatinsight:allowlist object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatinsightAllowlistAPICreateRequest
*/
func (a *ThreatinsightAllowlistAPIService) Create(ctx context.Context) ThreatinsightAllowlistAPICreateRequest {
	return ThreatinsightAllowlistAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) CreateExecute(r ThreatinsightAllowlistAPICreateRequest) (*CreateThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatinsightAllowlist == nil {
		return localVarReturnValue, nil, internal.ReportError("threatinsightAllowlist is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatinsightAllowlist
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIDeleteRequest struct {
	ctx        context.Context
	ApiService ThreatinsightAllowlistAPI
	reference  string
}

func (r ThreatinsightAllowlistAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a threatinsight:allowlist object

Deletes a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIDeleteRequest
*/
func (a *ThreatinsightAllowlistAPIService) Delete(ctx context.Context, reference string) ThreatinsightAllowlistAPIDeleteRequest {
	return ThreatinsightAllowlistAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ThreatinsightAllowlistAPIService) DeleteExecute(r ThreatinsightAllowlistAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIListRequest struct {
	ctx              context.Context
	ApiService       ThreatinsightAllowlistAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIListRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatinsightAllowlistAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r ThreatinsightAllowlistAPIListRequest) MaxResults(maxResults int32) ThreatinsightAllowlistAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIListRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatinsightAllowlistAPIListRequest) Paging(paging int32) ThreatinsightAllowlistAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatinsightAllowlistAPIListRequest) PageId(pageId string) ThreatinsightAllowlistAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatinsightAllowlistAPIListRequest) Filters(filters map[string]interface{}) ThreatinsightAllowlistAPIListRequest {
	r.filters = &filters
	return r
}

func (r ThreatinsightAllowlistAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatinsightAllowlistAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatinsightAllowlistAPIListRequest) Execute() (*ListThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve threatinsight:allowlist objects

Returns a list of threatinsight:allowlist objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatinsightAllowlistAPIListRequest
*/
func (a *ThreatinsightAllowlistAPIService) List(ctx context.Context) ThreatinsightAllowlistAPIListRequest {
	return ThreatinsightAllowlistAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ListExecute(r ThreatinsightAllowlistAPIListRequest) (*ListThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIReadRequest struct {
	ctx              context.Context
	ApiService       ThreatinsightAllowlistAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIReadRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatinsightAllowlistAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIReadRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPIReadRequest) Execute() (*GetThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific threatinsight:allowlist object

Returns a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIReadRequest
*/
func (a *ThreatinsightAllowlistAPIService) Read(ctx context.Context, reference string) ThreatinsightAllowlistAPIReadRequest {
	return ThreatinsightAllowlistAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) ReadExecute(r ThreatinsightAllowlistAPIReadRequest) (*GetThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatinsightAllowlistAPIUpdateRequest struct {
	ctx                    context.Context
	ApiService             ThreatinsightAllowlistAPI
	reference              string
	threatinsightAllowlist *ThreatinsightAllowlist
	returnFields           *string
	returnFieldsPlus       *string
	returnAsObject         *int32
}

// Object data to update
func (r ThreatinsightAllowlistAPIUpdateRequest) ThreatinsightAllowlist(threatinsightAllowlist ThreatinsightAllowlist) ThreatinsightAllowlistAPIUpdateRequest {
	r.threatinsightAllowlist = &threatinsightAllowlist
	return r
}

// Enter the field names followed by comma
func (r ThreatinsightAllowlistAPIUpdateRequest) ReturnFields(returnFields string) ThreatinsightAllowlistAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatinsightAllowlistAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatinsightAllowlistAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatinsightAllowlistAPIUpdateRequest) ReturnAsObject(returnAsObject int32) ThreatinsightAllowlistAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatinsightAllowlistAPIUpdateRequest) Execute() (*UpdateThreatinsightAllowlistResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a threatinsight:allowlist object

Updates a specific threatinsight:allowlist object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatinsight:allowlist object
	@return ThreatinsightAllowlistAPIUpdateRequest
*/
func (a *ThreatinsightAllowlistAPIService) Update(ctx context.Context, reference string) ThreatinsightAllowlistAPIUpdateRequest {
	return ThreatinsightAllowlistAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatinsightAllowlistResponse
func (a *ThreatinsightAllowlistAPIService) UpdateExecute(r ThreatinsightAllowlistAPIUpdateRequest) (*UpdateThreatinsightAllowlistResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatinsightAllowlistResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatinsightAllowlistAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatinsight:allowlist/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatinsightAllowlist == nil {
		return localVarReturnValue, nil, internal.ReportError("threatinsightAllowlist is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatinsightAllowlist
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
