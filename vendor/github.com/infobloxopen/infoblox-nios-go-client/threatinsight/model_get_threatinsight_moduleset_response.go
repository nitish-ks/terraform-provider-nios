/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"encoding/json"
	"fmt"
)

// GetThreatinsightModulesetResponse - struct for GetThreatinsightModulesetResponse
type GetThreatinsightModulesetResponse struct {
	GetThreatinsightModulesetResponseObjectAsResult *GetThreatinsightModulesetResponseObjectAsResult
	ThreatinsightModuleset                          *ThreatinsightModuleset
}

// GetThreatinsightModulesetResponseObjectAsResultAsGetThreatinsightModulesetResponse is a convenience function that returns GetThreatinsightModulesetResponseObjectAsResult wrapped in GetThreatinsightModulesetResponse
func GetThreatinsightModulesetResponseObjectAsResultAsGetThreatinsightModulesetResponse(v *GetThreatinsightModulesetResponseObjectAsResult) GetThreatinsightModulesetResponse {
	return GetThreatinsightModulesetResponse{
		GetThreatinsightModulesetResponseObjectAsResult: v,
	}
}

// ThreatinsightModulesetAsGetThreatinsightModulesetResponse is a convenience function that returns ThreatinsightModuleset wrapped in GetThreatinsightModulesetResponse
func ThreatinsightModulesetAsGetThreatinsightModulesetResponse(v *ThreatinsightModuleset) GetThreatinsightModulesetResponse {
	return GetThreatinsightModulesetResponse{
		ThreatinsightModuleset: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetThreatinsightModulesetResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetThreatinsightModulesetResponseObjectAsResult
	err = newStrictDecoder(data).Decode(&dst.GetThreatinsightModulesetResponseObjectAsResult)
	if err == nil {
		jsonGetThreatinsightModulesetResponseObjectAsResult, _ := json.Marshal(dst.GetThreatinsightModulesetResponseObjectAsResult)
		if string(jsonGetThreatinsightModulesetResponseObjectAsResult) == "{}" { // empty struct
			dst.GetThreatinsightModulesetResponseObjectAsResult = nil
		} else {
			match++
		}
	} else {
		dst.GetThreatinsightModulesetResponseObjectAsResult = nil
	}

	// try to unmarshal data into ThreatinsightModuleset
	err = newStrictDecoder(data).Decode(&dst.ThreatinsightModuleset)
	if err == nil {
		jsonThreatinsightModuleset, _ := json.Marshal(dst.ThreatinsightModuleset)
		if string(jsonThreatinsightModuleset) == "{}" { // empty struct
			dst.ThreatinsightModuleset = nil
		} else {
			match++
		}
	} else {
		dst.ThreatinsightModuleset = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetThreatinsightModulesetResponseObjectAsResult = nil
		dst.ThreatinsightModuleset = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetThreatinsightModulesetResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetThreatinsightModulesetResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetThreatinsightModulesetResponse) MarshalJSON() ([]byte, error) {
	if src.GetThreatinsightModulesetResponseObjectAsResult != nil {
		return json.Marshal(&src.GetThreatinsightModulesetResponseObjectAsResult)
	}

	if src.ThreatinsightModuleset != nil {
		return json.Marshal(&src.ThreatinsightModuleset)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetThreatinsightModulesetResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetThreatinsightModulesetResponseObjectAsResult != nil {
		return obj.GetThreatinsightModulesetResponseObjectAsResult
	}

	if obj.ThreatinsightModuleset != nil {
		return obj.ThreatinsightModuleset
	}

	// all schemas are nil
	return nil
}

type NullableGetThreatinsightModulesetResponse struct {
	value *GetThreatinsightModulesetResponse
	isSet bool
}

func (v NullableGetThreatinsightModulesetResponse) Get() *GetThreatinsightModulesetResponse {
	return v.value
}

func (v *NullableGetThreatinsightModulesetResponse) Set(val *GetThreatinsightModulesetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetThreatinsightModulesetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetThreatinsightModulesetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetThreatinsightModulesetResponse(val *GetThreatinsightModulesetResponse) *NullableGetThreatinsightModulesetResponse {
	return &NullableGetThreatinsightModulesetResponse{value: val, isSet: true}
}

func (v NullableGetThreatinsightModulesetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetThreatinsightModulesetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
