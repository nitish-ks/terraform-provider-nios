/*
Infoblox THREATINSIGHT API

OpenAPI specification for Infoblox NIOS WAPI THREATINSIGHT objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatinsight

import (
	"encoding/json"
	"fmt"
)

// ListThreatinsightAllowlistResponse - struct for ListThreatinsightAllowlistResponse
type ListThreatinsightAllowlistResponse struct {
	ListThreatinsightAllowlistResponseObject *ListThreatinsightAllowlistResponseObject
	ArrayOfThreatinsightAllowlist            *[]ThreatinsightAllowlist
}

// ListThreatinsightAllowlistResponseObjectAsListThreatinsightAllowlistResponse is a convenience function that returns ListThreatinsightAllowlistResponseObject wrapped in ListThreatinsightAllowlistResponse
func ListThreatinsightAllowlistResponseObjectAsListThreatinsightAllowlistResponse(v *ListThreatinsightAllowlistResponseObject) ListThreatinsightAllowlistResponse {
	return ListThreatinsightAllowlistResponse{
		ListThreatinsightAllowlistResponseObject: v,
	}
}

// []ThreatinsightAllowlistAsListThreatinsightAllowlistResponse is a convenience function that returns []ThreatinsightAllowlist wrapped in ListThreatinsightAllowlistResponse
func ArrayOfThreatinsightAllowlistAsListThreatinsightAllowlistResponse(v *[]ThreatinsightAllowlist) ListThreatinsightAllowlistResponse {
	return ListThreatinsightAllowlistResponse{
		ArrayOfThreatinsightAllowlist: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListThreatinsightAllowlistResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListThreatinsightAllowlistResponseObject
	err = newStrictDecoder(data).Decode(&dst.ListThreatinsightAllowlistResponseObject)
	if err == nil {
		jsonListThreatinsightAllowlistResponseObject, _ := json.Marshal(dst.ListThreatinsightAllowlistResponseObject)
		if string(jsonListThreatinsightAllowlistResponseObject) == "{}" { // empty struct
			dst.ListThreatinsightAllowlistResponseObject = nil
		} else {
			match++
		}
	} else {
		dst.ListThreatinsightAllowlistResponseObject = nil
	}

	// try to unmarshal data into ArrayOfThreatinsightAllowlist
	err = newStrictDecoder(data).Decode(&dst.ArrayOfThreatinsightAllowlist)
	if err == nil {
		jsonArrayOfThreatinsightAllowlist, _ := json.Marshal(dst.ArrayOfThreatinsightAllowlist)
		if string(jsonArrayOfThreatinsightAllowlist) == "{}" { // empty struct
			dst.ArrayOfThreatinsightAllowlist = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfThreatinsightAllowlist = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListThreatinsightAllowlistResponseObject = nil
		dst.ArrayOfThreatinsightAllowlist = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListThreatinsightAllowlistResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListThreatinsightAllowlistResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListThreatinsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	if src.ListThreatinsightAllowlistResponseObject != nil {
		return json.Marshal(&src.ListThreatinsightAllowlistResponseObject)
	}

	if src.ArrayOfThreatinsightAllowlist != nil {
		return json.Marshal(&src.ArrayOfThreatinsightAllowlist)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListThreatinsightAllowlistResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ListThreatinsightAllowlistResponseObject != nil {
		return obj.ListThreatinsightAllowlistResponseObject
	}

	if obj.ArrayOfThreatinsightAllowlist != nil {
		return obj.ArrayOfThreatinsightAllowlist
	}

	// all schemas are nil
	return nil
}

type NullableListThreatinsightAllowlistResponse struct {
	value *ListThreatinsightAllowlistResponse
	isSet bool
}

func (v NullableListThreatinsightAllowlistResponse) Get() *ListThreatinsightAllowlistResponse {
	return v.value
}

func (v *NullableListThreatinsightAllowlistResponse) Set(val *ListThreatinsightAllowlistResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListThreatinsightAllowlistResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListThreatinsightAllowlistResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListThreatinsightAllowlistResponse(val *ListThreatinsightAllowlistResponse) *NullableListThreatinsightAllowlistResponse {
	return &NullableListThreatinsightAllowlistResponse{value: val, isSet: true}
}

func (v NullableListThreatinsightAllowlistResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListThreatinsightAllowlistResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
