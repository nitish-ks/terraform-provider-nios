/*
Infoblox THREATPROTECTION API

OpenAPI specification for Infoblox NIOS WAPI THREATPROTECTION objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package threatprotection

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/infoblox-nios-go-client/internal"
)

type ThreatprotectionGridRuleAPI interface {
	/*
		Create Create a threatprotection:grid:rule object

		Creates a new threatprotection:grid:rule object

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionGridRuleAPICreateRequest
	*/
	Create(ctx context.Context) ThreatprotectionGridRuleAPICreateRequest

	// CreateExecute executes the request
	//  @return CreateThreatprotectionGridRuleResponse
	CreateExecute(r ThreatprotectionGridRuleAPICreateRequest) (*CreateThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		Delete Delete a threatprotection:grid:rule object

		Deletes a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIDeleteRequest
	*/
	Delete(ctx context.Context, reference string) ThreatprotectionGridRuleAPIDeleteRequest

	// DeleteExecute executes the request
	DeleteExecute(r ThreatprotectionGridRuleAPIDeleteRequest) (*http.Response, error)
	/*
		List Retrieve threatprotection:grid:rule objects

		Returns a list of threatprotection:grid:rule objects matching the search criteria

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ThreatprotectionGridRuleAPIListRequest
	*/
	List(ctx context.Context) ThreatprotectionGridRuleAPIListRequest

	// ListExecute executes the request
	//  @return ListThreatprotectionGridRuleResponse
	ListExecute(r ThreatprotectionGridRuleAPIListRequest) (*ListThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		Read Get a specific threatprotection:grid:rule object

		Returns a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIReadRequest
	*/
	Read(ctx context.Context, reference string) ThreatprotectionGridRuleAPIReadRequest

	// ReadExecute executes the request
	//  @return GetThreatprotectionGridRuleResponse
	ReadExecute(r ThreatprotectionGridRuleAPIReadRequest) (*GetThreatprotectionGridRuleResponse, *http.Response, error)
	/*
		Update Update a threatprotection:grid:rule object

		Updates a specific threatprotection:grid:rule object by reference

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param reference Reference of the threatprotection:grid:rule object
		@return ThreatprotectionGridRuleAPIUpdateRequest
	*/
	Update(ctx context.Context, reference string) ThreatprotectionGridRuleAPIUpdateRequest

	// UpdateExecute executes the request
	//  @return UpdateThreatprotectionGridRuleResponse
	UpdateExecute(r ThreatprotectionGridRuleAPIUpdateRequest) (*UpdateThreatprotectionGridRuleResponse, *http.Response, error)
}

// ThreatprotectionGridRuleAPIService ThreatprotectionGridRuleAPI service
type ThreatprotectionGridRuleAPIService internal.Service

type ThreatprotectionGridRuleAPICreateRequest struct {
	ctx                      context.Context
	ApiService               ThreatprotectionGridRuleAPI
	threatprotectionGridRule *ThreatprotectionGridRule
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to create
func (r ThreatprotectionGridRuleAPICreateRequest) ThreatprotectionGridRule(threatprotectionGridRule ThreatprotectionGridRule) ThreatprotectionGridRuleAPICreateRequest {
	r.threatprotectionGridRule = &threatprotectionGridRule
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPICreateRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPICreateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPICreateRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatprotectionGridRuleAPICreateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPICreateRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPICreateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPICreateRequest) Execute() (*CreateThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.CreateExecute(r)
}

/*
Create Create a threatprotection:grid:rule object

Creates a new threatprotection:grid:rule object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionGridRuleAPICreateRequest
*/
func (a *ThreatprotectionGridRuleAPIService) Create(ctx context.Context) ThreatprotectionGridRuleAPICreateRequest {
	return ThreatprotectionGridRuleAPICreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) CreateExecute(r ThreatprotectionGridRuleAPICreateRequest) (*CreateThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.Create")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionGridRule == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionGridRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionGridRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIDeleteRequest struct {
	ctx        context.Context
	ApiService ThreatprotectionGridRuleAPI
	reference  string
}

func (r ThreatprotectionGridRuleAPIDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecute(r)
}

/*
Delete Delete a threatprotection:grid:rule object

Deletes a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIDeleteRequest
*/
func (a *ThreatprotectionGridRuleAPIService) Delete(ctx context.Context, reference string) ThreatprotectionGridRuleAPIDeleteRequest {
	return ThreatprotectionGridRuleAPIDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
func (a *ThreatprotectionGridRuleAPIService) DeleteExecute(r ThreatprotectionGridRuleAPIDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []internal.FormFile
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.Delete")
	if err != nil {
		return nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIListRequest struct {
	ctx              context.Context
	ApiService       ThreatprotectionGridRuleAPI
	returnFields     *string
	returnFieldsPlus *string
	maxResults       *int32
	returnAsObject   *int32
	paging           *int32
	pageId           *string
	filters          *map[string]interface{}
	extattrfilter    *map[string]interface{}
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIListRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIListRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIListRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatprotectionGridRuleAPIListRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Enter the number of results to be fetched
func (r ThreatprotectionGridRuleAPIListRequest) MaxResults(maxResults int32) ThreatprotectionGridRuleAPIListRequest {
	r.maxResults = &maxResults
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIListRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIListRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Control paging of results
func (r ThreatprotectionGridRuleAPIListRequest) Paging(paging int32) ThreatprotectionGridRuleAPIListRequest {
	r.paging = &paging
	return r
}

// Page id for retrieving next page of results
func (r ThreatprotectionGridRuleAPIListRequest) PageId(pageId string) ThreatprotectionGridRuleAPIListRequest {
	r.pageId = &pageId
	return r
}

func (r ThreatprotectionGridRuleAPIListRequest) Filters(filters map[string]interface{}) ThreatprotectionGridRuleAPIListRequest {
	r.filters = &filters
	return r
}

func (r ThreatprotectionGridRuleAPIListRequest) Extattrfilter(extattrfilter map[string]interface{}) ThreatprotectionGridRuleAPIListRequest {
	r.extattrfilter = &extattrfilter
	return r
}

func (r ThreatprotectionGridRuleAPIListRequest) Execute() (*ListThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Retrieve threatprotection:grid:rule objects

Returns a list of threatprotection:grid:rule objects matching the search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThreatprotectionGridRuleAPIListRequest
*/
func (a *ThreatprotectionGridRuleAPIService) List(ctx context.Context) ThreatprotectionGridRuleAPIListRequest {
	return ThreatprotectionGridRuleAPIListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ListExecute(r ThreatprotectionGridRuleAPIListRequest) (*ListThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.maxResults != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.paging != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_paging", r.paging, "form", "")
	}
	if r.pageId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_id", r.pageId, "form", "")
	}
	if r.filters != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.extattrfilter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "extattrfilter", r.extattrfilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIReadRequest struct {
	ctx              context.Context
	ApiService       ThreatprotectionGridRuleAPI
	reference        string
	returnFields     *string
	returnFieldsPlus *string
	returnAsObject   *int32
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIReadRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIReadRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIReadRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatprotectionGridRuleAPIReadRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIReadRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIReadRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPIReadRequest) Execute() (*GetThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.ReadExecute(r)
}

/*
Read Get a specific threatprotection:grid:rule object

Returns a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIReadRequest
*/
func (a *ThreatprotectionGridRuleAPIService) Read(ctx context.Context, reference string) ThreatprotectionGridRuleAPIReadRequest {
	return ThreatprotectionGridRuleAPIReadRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return GetThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) ReadExecute(r ThreatprotectionGridRuleAPIReadRequest) (*GetThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GetThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.Read")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThreatprotectionGridRuleAPIUpdateRequest struct {
	ctx                      context.Context
	ApiService               ThreatprotectionGridRuleAPI
	reference                string
	threatprotectionGridRule *ThreatprotectionGridRule
	returnFields             *string
	returnFieldsPlus         *string
	returnAsObject           *int32
}

// Object data to update
func (r ThreatprotectionGridRuleAPIUpdateRequest) ThreatprotectionGridRule(threatprotectionGridRule ThreatprotectionGridRule) ThreatprotectionGridRuleAPIUpdateRequest {
	r.threatprotectionGridRule = &threatprotectionGridRule
	return r
}

// Enter the field names followed by comma
func (r ThreatprotectionGridRuleAPIUpdateRequest) ReturnFields(returnFields string) ThreatprotectionGridRuleAPIUpdateRequest {
	r.returnFields = &returnFields
	return r
}

// Enter the field names followed by comma, this returns the required fields along with the default fields
func (r ThreatprotectionGridRuleAPIUpdateRequest) ReturnFieldsPlus(returnFieldsPlus string) ThreatprotectionGridRuleAPIUpdateRequest {
	r.returnFieldsPlus = &returnFieldsPlus
	return r
}

// Select 1 if result is required as an object
func (r ThreatprotectionGridRuleAPIUpdateRequest) ReturnAsObject(returnAsObject int32) ThreatprotectionGridRuleAPIUpdateRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ThreatprotectionGridRuleAPIUpdateRequest) Execute() (*UpdateThreatprotectionGridRuleResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update a threatprotection:grid:rule object

Updates a specific threatprotection:grid:rule object by reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param reference Reference of the threatprotection:grid:rule object
	@return ThreatprotectionGridRuleAPIUpdateRequest
*/
func (a *ThreatprotectionGridRuleAPIService) Update(ctx context.Context, reference string) ThreatprotectionGridRuleAPIUpdateRequest {
	return ThreatprotectionGridRuleAPIUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		reference:  reference,
	}
}

// Execute executes the request
//
//	@return UpdateThreatprotectionGridRuleResponse
func (a *ThreatprotectionGridRuleAPIService) UpdateExecute(r ThreatprotectionGridRuleAPIUpdateRequest) (*UpdateThreatprotectionGridRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *UpdateThreatprotectionGridRuleResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ThreatprotectionGridRuleAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/threatprotection:grid:rule/{reference}"
	localVarPath = strings.Replace(localVarPath, "{"+"reference"+"}", url.PathEscape(internal.ParameterValueToString(r.reference, "reference")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.threatprotectionGridRule == nil {
		return localVarReturnValue, nil, internal.ReportError("threatprotectionGridRule is required and must be specified")
	}

	if r.returnFields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.returnFieldsPlus != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFieldsPlus, "form", "")
	}
	if r.returnAsObject != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.threatprotectionGridRule
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
